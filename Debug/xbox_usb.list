
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08012598  08012598  00022598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129c4  080129c4  00030178  2**0
                  CONTENTS
  4 .ARM          00000008  080129c4  080129c4  000229c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080129cc  080129cc  00030178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080129cc  080129cc  000229cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080129d4  080129d4  000229d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  080129d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057ac  20000178  08012b50  00030178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005924  08012b50  00035924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d36d  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008660  00000000  00000000  0008d515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002518  00000000  00000000  00095b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002348  00000000  00000000  00098090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2e4  00000000  00000000  0009a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c135  00000000  00000000  000c66bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5757  00000000  00000000  000f27f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e7f48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1b0  00000000  00000000  001e7f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000178 	.word	0x20000178
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012580 	.word	0x08012580

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000017c 	.word	0x2000017c
 800020c:	08012580 	.word	0x08012580

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	460b      	mov	r3, r1
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f000 f856 	bl	80006be <_ZN5Print5printEmi>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f000 f805 	bl	800063c <_ZN5Print5printEli>
 8000632:	4603      	mov	r3, r0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <_ZN5Print5printEli+0x26>
    return write(n);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	4611      	mov	r1, r2
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	4798      	blx	r3
 800065e:	4603      	mov	r3, r0
 8000660:	e029      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d11d      	bne.n	80006a4 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	2b00      	cmp	r3, #0
 800066c:	da12      	bge.n	8000694 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800066e:	212d      	movs	r1, #45	; 0x2d
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffaf 	bl	80005d4 <_ZN5Print5printEc>
 8000676:	4603      	mov	r3, r0
 8000678:	617b      	str	r3, [r7, #20]
      n = -n;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	425b      	negs	r3, r3
 800067e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	220a      	movs	r2, #10
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f839 	bl	80006fe <_ZN5Print11printNumberEmh>
 800068c:	4602      	mov	r2, r0
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4413      	add	r3, r2
 8000692:	e010      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	220a      	movs	r2, #10
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f000 f82f 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006a0:	4603      	mov	r3, r0
 80006a2:	e008      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	4619      	mov	r1, r3
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f826 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006b2:	4603      	mov	r3, r0
 80006b4:	bf00      	nop
  }
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d109      	bne.n	80006e4 <_ZN5Print5printEmi+0x26>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	4798      	blx	r3
 80006e0:	4603      	mov	r3, r0
 80006e2:	e008      	b.n	80006f6 <_ZN5Print5printEmi+0x38>
  else return printNumber(n, base);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f000 f806 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006f2:	4603      	mov	r3, r0
 80006f4:	bf00      	nop
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80006fe:	b580      	push	{r7, lr}
 8000700:	b090      	sub	sp, #64	; 0x40
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	4613      	mov	r3, r2
 800070a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	3320      	adds	r3, #32
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8000714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d801      	bhi.n	8000724 <_ZN5Print11printNumberEmh+0x26>
 8000720:	230a      	movs	r3, #10
 8000722:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000730:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 8000732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000734:	b2da      	uxtb	r2, r3
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	79f9      	ldrb	r1, [r7, #7]
 800073c:	fb11 f303 	smulbb	r3, r1, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800074c:	2b09      	cmp	r3, #9
 800074e:	d804      	bhi.n	800075a <_ZN5Print11printNumberEmh+0x5c>
 8000750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000754:	3330      	adds	r3, #48	; 0x30
 8000756:	b2db      	uxtb	r3, r3
 8000758:	e003      	b.n	8000762 <_ZN5Print11printNumberEmh+0x64>
 800075a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800075e:	3337      	adds	r3, #55	; 0x37
 8000760:	b2db      	uxtb	r3, r3
 8000762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000764:	3a01      	subs	r2, #1
 8000766:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800076a:	7013      	strb	r3, [r2, #0]
  } while(n);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d000      	beq.n	8000774 <_ZN5Print11printNumberEmh+0x76>
  do {
 8000772:	e7d7      	b.n	8000724 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff fece 	bl	8000518 <_ZN5Print5writeEPKc>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3740      	adds	r7, #64	; 0x40
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3304      	adds	r3, #4
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1cf9      	adds	r1, r7, #3
 800079c:	2201      	movs	r2, #1
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	4798      	blx	r3
 80007a2:	4603      	mov	r3, r0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	6918      	ldr	r0, [r3, #16]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	6979      	ldr	r1, [r7, #20]
 80007ca:	f005 f94c 	bl	8005a66 <HAL_UART_Transmit>
	return size;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6918      	ldr	r0, [r3, #16]
 80007e4:	f107 010f 	add.w	r1, r7, #15
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2201      	movs	r2, #1
 80007ee:	f005 f9cc 	bl	8005b8a <HAL_UART_Receive>
	return data;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	return -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <_ZN5PrintC1Ev+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	08012754 	.word	0x08012754

08000868 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffe4 	bl	8000840 <_ZN5PrintC1Ev>
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_ZN6StreamC1Ev+0x28>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	08012814 	.word	0x08012814

08000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffe1 	bl	8000868 <_ZN6StreamC1Ev>
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	611a      	str	r2, [r3, #16]
	};
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08012764 	.word	0x08012764

080008c0 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	4903      	ldr	r1, [pc, #12]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <_ZN2P910SetDirReadEv+0x28>)
 80008da:	f001 fbe9 	bl	80020b0 <HAL_GPIO_Init>
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000194 	.word	0x20000194
 80008e8:	40020800 	.word	0x40020800

080008ec <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <_ZN3P103SetEv+0x14>)
 80008f6:	f001 fd87 	bl	8002408 <HAL_GPIO_WritePin>
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400

08000904 <_ZN3P105ClearEv>:
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <_ZN3P105ClearEv+0x14>)
 800090e:	f001 fd7b 	bl	8002408 <HAL_GPIO_WritePin>
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020400 	.word	0x40020400

0800091c <_ZN3P1011SetDirWriteEv>:
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000934:	2203      	movs	r2, #3
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	4902      	ldr	r1, [pc, #8]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <_ZN3P1011SetDirWriteEv+0x2c>)
 800093c:	f001 fbb8 	bl	80020b0 <HAL_GPIO_Init>
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200001a8 	.word	0x200001a8
 8000948:	40020400 	.word	0x40020400

0800094c <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2206      	movs	r2, #6
 8000966:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffde 	bl	800094c <_ZN3BTD11pairWithHIDEv>
        };
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4798      	blx	r3
                OnInitBTHID();
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	331c      	adds	r3, #28
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	4798      	blx	r3
        };
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	460b      	mov	r3, r1
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	72fb      	strb	r3, [r7, #11]
                return;
 80009d0:	bf00      	nop
        }
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_ZN9PS4ParserC1Ev+0x20>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
                Reset();
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f00f ffaa 	bl	8010944 <_ZN9PS4Parser5ResetEv>
        };
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08012808 	.word	0x08012808

08000a00 <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	4608      	mov	r0, r1
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4603      	mov	r3, r0
 8000a10:	70fb      	strb	r3, [r7, #3]
 8000a12:	460b      	mov	r3, r1
 8000a14:	70bb      	strb	r3, [r7, #2]
 8000a16:	4613      	mov	r3, r2
 8000a18:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	78fa      	ldrb	r2, [r7, #3]
 8000a1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	78ba      	ldrb	r2, [r7, #2]
 8000a26:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	787a      	ldrb	r2, [r7, #1]
 8000a2e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2201      	movs	r2, #1
 8000a36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	141b      	asrs	r3, r3, #16
 8000a54:	b2d9      	uxtb	r1, r3
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	121b      	asrs	r3, r3, #8
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ffcd 	bl	8000a00 <_ZN9PS4Parser6setLedEhhh>
        };
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68b9      	ldr	r1, [r7, #8]
 8000a88:	f00e fd76 	bl	800f578 <_ZN5BTHIDC1EP3BTDbPKc>
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3378      	adds	r3, #120	; 0x78
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffa3 	bl	80009dc <_ZN9PS4ParserC1Ev>
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3378      	adds	r3, #120	; 0x78
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f00f ff4c 	bl	8010944 <_ZN9PS4Parser5ResetEv>
        };
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	080127cc 	.word	0x080127cc
 8000abc:	080127fc 	.word	0x080127fc

08000ac0 <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3378      	adds	r3, #120	; 0x78
 8000aea:	7af9      	ldrb	r1, [r7, #11]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f00f fe63 	bl	80107ba <_ZN9PS4Parser5ParseEhPh>
        };
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3378      	adds	r3, #120	; 0x78
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f00f ff1b 	bl	8010944 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f855 	bl	8000bbe <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d105      	bne.n	8000b28 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3378      	adds	r3, #120	; 0x78
 8000b20:	21ff      	movs	r1, #255	; 0xff
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ff8f 	bl	8000a46 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3378      	adds	r3, #120	; 0x78
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f00f ff01 	bl	8010944 <_ZN9PS4Parser5ResetEv>
        };
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b096      	sub	sp, #88	; 0x58
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	224f      	movs	r2, #79	; 0x4f
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f011 fcb1 	bl	80124c4 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000b62:	2352      	movs	r3, #82	; 0x52
 8000b64:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000b66:	2311      	movs	r3, #17
 8000b68:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000b6e:	23ff      	movs	r3, #255	; 0xff
 8000b70:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	785b      	ldrb	r3, [r3, #1]
 8000b76:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	789b      	ldrb	r3, [r3, #2]
 8000b82:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	78db      	ldrb	r3, [r3, #3]
 8000b88:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	791b      	ldrb	r3, [r3, #4]
 8000b8e:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	795b      	ldrb	r3, [r3, #5]
 8000b94:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	799b      	ldrb	r3, [r3, #6]
 8000b9a:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	224f      	movs	r2, #79	; 0x4f
 8000ba8:	4619      	mov	r1, r3
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 f81a 	bl	8000be4 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bb0:	bf00      	nop
 8000bb2:	3758      	adds	r7, #88	; 0x58
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000bb8:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000bbc:	e7c5      	b.n	8000b4a <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000bbe <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b084      	sub	sp, #16
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000bc6:	2343      	movs	r3, #67	; 0x43
 8000bc8:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000bca:	2302      	movs	r3, #2
 8000bcc:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f804 	bl	8000be4 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6898      	ldr	r0, [r3, #8]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	8999      	ldrh	r1, [r3, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	7d9b      	ldrb	r3, [r3, #22]
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	7dd2      	ldrb	r2, [r2, #23]
 8000c02:	79fc      	ldrb	r4, [r7, #7]
 8000c04:	9201      	str	r2, [sp, #4]
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	4623      	mov	r3, r4
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f00d fd50 	bl	800e6b0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd90      	pop	{r4, r7, pc}

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f001 f900 	bl	8001e20 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f8ac 	bl	8000d7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f000 f9d6 	bl	8000fd4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c28:	f000 f9a6 	bl	8000f78 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000c2c:	f000 f968 	bl	8000f00 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000c30:	f00a fe8c 	bl	800b94c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000c34:	f000 f93a 	bl	8000eac <_ZL13MX_TIM14_Initv>
  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000c38:	4a39      	ldr	r2, [pc, #228]	; (8000d20 <main+0x108>)
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <main+0x10c>)
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	4619      	mov	r1, r3
 8000c40:	2358      	movs	r3, #88	; 0x58
 8000c42:	461a      	mov	r2, r3
 8000c44:	f011 fc30 	bl	80124a8 <memcpy>
  UART_Handle = huart2;
 8000c48:	4a37      	ldr	r2, [pc, #220]	; (8000d28 <main+0x110>)
 8000c4a:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <main+0x114>)
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2344      	movs	r3, #68	; 0x44
 8000c52:	461a      	mov	r2, r3
 8000c54:	f011 fc28 	bl	80124a8 <memcpy>



  HAL_TIM_Base_Start_IT(&htim14);
 8000c58:	4835      	ldr	r0, [pc, #212]	; (8000d30 <main+0x118>)
 8000c5a:	f004 fc63 	bl	8005524 <HAL_TIM_Base_Start_IT>
//  uint8_t L2_val;
//  uint8_t R2_val;
  Serial.print(F("\r\nCPU Frequency is: "));
 8000c5e:	4935      	ldr	r1, [pc, #212]	; (8000d34 <main+0x11c>)
 8000c60:	4835      	ldr	r0, [pc, #212]	; (8000d38 <main+0x120>)
 8000c62:	f7ff fc9b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000c66:	f002 fe85 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a33      	ldr	r2, [pc, #204]	; (8000d3c <main+0x124>)
 8000c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c72:	0c9b      	lsrs	r3, r3, #18
 8000c74:	4a32      	ldr	r2, [pc, #200]	; (8000d40 <main+0x128>)
 8000c76:	6013      	str	r3, [r2, #0]
  Serial.print((int)cpu_freq);
 8000c78:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <main+0x128>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	220a      	movs	r2, #10
 8000c7e:	4619      	mov	r1, r3
 8000c80:	482d      	ldr	r0, [pc, #180]	; (8000d38 <main+0x120>)
 8000c82:	f7ff fccb 	bl	800061c <_ZN5Print5printEii>
  Serial.print("MHz");
 8000c86:	492f      	ldr	r1, [pc, #188]	; (8000d44 <main+0x12c>)
 8000c88:	482b      	ldr	r0, [pc, #172]	; (8000d38 <main+0x120>)
 8000c8a:	f7ff fc95 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000c8e:	492e      	ldr	r1, [pc, #184]	; (8000d48 <main+0x130>)
 8000c90:	4829      	ldr	r0, [pc, #164]	; (8000d38 <main+0x120>)
 8000c92:	f7ff fc91 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <main+0x118>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <main+0x134>)
 8000ca0:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500); //500ms
 8000ca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ca6:	f001 f8fd 	bl	8001ea4 <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <main+0x118>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <main+0x134>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <main+0x138>)
 8000cbc:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000cbe:	4925      	ldr	r1, [pc, #148]	; (8000d54 <main+0x13c>)
 8000cc0:	481d      	ldr	r0, [pc, #116]	; (8000d38 <main+0x120>)
 8000cc2:	f7ff fc79 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <main+0x138>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <main+0x140>)
 8000ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4817      	ldr	r0, [pc, #92]	; (8000d38 <main+0x120>)
 8000cda:	f7ff fc9f 	bl	800061c <_ZN5Print5printEii>
  Serial.print(" ms");
 8000cde:	491f      	ldr	r1, [pc, #124]	; (8000d5c <main+0x144>)
 8000ce0:	4815      	ldr	r0, [pc, #84]	; (8000d38 <main+0x120>)
 8000ce2:	f7ff fc69 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <main+0x148>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	220a      	movs	r2, #10
 8000cec:	4619      	mov	r1, r3
 8000cee:	4812      	ldr	r0, [pc, #72]	; (8000d38 <main+0x120>)
 8000cf0:	f7ff fc94 	bl	800061c <_ZN5Print5printEii>



  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000cf4:	f008 f8d6 	bl	8008ea4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000cf8:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <main+0x14c>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	481a      	ldr	r0, [pc, #104]	; (8000d68 <main+0x150>)
 8000cfe:	f008 f91b 	bl	8008f38 <osThreadNew>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <main+0x154>)
 8000d06:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <main+0x158>)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4819      	ldr	r0, [pc, #100]	; (8000d74 <main+0x15c>)
 8000d0e:	f008 f913 	bl	8008f38 <osThreadNew>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a18      	ldr	r2, [pc, #96]	; (8000d78 <main+0x160>)
 8000d16:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d18:	f008 f8e8 	bl	8008eec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <main+0x104>
 8000d1e:	bf00      	nop
 8000d20:	200002a8 	.word	0x200002a8
 8000d24:	200001bc 	.word	0x200001bc
 8000d28:	20000300 	.word	0x20000300
 8000d2c:	20000214 	.word	0x20000214
 8000d30:	20000258 	.word	0x20000258
 8000d34:	080125a8 	.word	0x080125a8
 8000d38:	20000344 	.word	0x20000344
 8000d3c:	431bde83 	.word	0x431bde83
 8000d40:	20000604 	.word	0x20000604
 8000d44:	080125c0 	.word	0x080125c0
 8000d48:	080125c4 	.word	0x080125c4
 8000d4c:	20000608 	.word	0x20000608
 8000d50:	2000060a 	.word	0x2000060a
 8000d54:	080125cc 	.word	0x080125cc
 8000d58:	cccccccd 	.word	0xcccccccd
 8000d5c:	080125e0 	.word	0x080125e0
 8000d60:	2000060c 	.word	0x2000060c
 8000d64:	0801277c 	.word	0x0801277c
 8000d68:	08001089 	.word	0x08001089
 8000d6c:	200002a0 	.word	0x200002a0
 8000d70:	080127a0 	.word	0x080127a0
 8000d74:	08001731 	.word	0x08001731
 8000d78:	200002a4 	.word	0x200002a4

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0ac      	sub	sp, #176	; 0xb0
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d86:	2234      	movs	r2, #52	; 0x34
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f011 fb9a 	bl	80124c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	225c      	movs	r2, #92	; 0x5c
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f011 fb8b 	bl	80124c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <SystemClock_Config+0x128>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a3b      	ldr	r2, [pc, #236]	; (8000ea4 <SystemClock_Config+0x128>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <SystemClock_Config+0x128>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <SystemClock_Config+0x12c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a35      	ldr	r2, [pc, #212]	; (8000ea8 <SystemClock_Config+0x12c>)
 8000dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <SystemClock_Config+0x12c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e00:	2304      	movs	r3, #4
 8000e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e06:	23a8      	movs	r3, #168	; 0xa8
 8000e08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e12:	2307      	movs	r3, #7
 8000e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 fae8 	bl	80043f8 <HAL_RCC_OscConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bf14      	ite	ne
 8000e2e:	2301      	movne	r3, #1
 8000e30:	2300      	moveq	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e38:	f000 fca0 	bl	800177c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e40:	2302      	movs	r3, #2
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e4c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e58:	2105      	movs	r1, #5
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fca4 	bl	80037a8 <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf14      	ite	ne
 8000e66:	2301      	movne	r3, #1
 8000e68:	2300      	moveq	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000e70:	f000 fc84 	bl	800177c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e78:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 fddc 	bl	8003a40 <HAL_RCCEx_PeriphCLKConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf14      	ite	ne
 8000e8e:	2301      	movne	r3, #1
 8000e90:	2300      	moveq	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000e98:	f000 fc70 	bl	800177c <Error_Handler>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	37b0      	adds	r7, #176	; 0xb0
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_ZL13MX_TIM14_Initv+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000eb8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000ebc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000ec6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000eca:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ed8:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <_ZL13MX_TIM14_Initv+0x4c>)
 8000eda:	f004 fad3 	bl	8005484 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bf14      	ite	ne
 8000ee4:	2301      	movne	r3, #1
 8000ee6:	2300      	moveq	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 8000eee:	f000 fc45 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000258 	.word	0x20000258
 8000efc:	40002000 	.word	0x40002000

08000f00 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f06:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <_ZL12MX_SPI1_Initv+0x74>)
 8000f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f34:	2218      	movs	r2, #24
 8000f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f50:	4807      	ldr	r0, [pc, #28]	; (8000f70 <_ZL12MX_SPI1_Initv+0x70>)
 8000f52:	f003 fcef 	bl	8004934 <HAL_SPI_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000f66:	f000 fc09 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200001bc 	.word	0x200001bc
 8000f74:	40013000 	.word	0x40013000

08000f78 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fae:	4807      	ldr	r0, [pc, #28]	; (8000fcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fb0:	f004 fd0c 	bl	80059cc <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000fc4:	f000 fbda 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000214 	.word	0x20000214
 8000fd0:	40004400 	.word	0x40004400

08000fd4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a22      	ldr	r2, [pc, #136]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a1b      	ldr	r2, [pc, #108]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a0d      	ldr	r2, [pc, #52]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <_ZL12MX_GPIO_Initv+0xa8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800105a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <_ZL12MX_GPIO_Initv+0xac>)
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <_ZL12MX_GPIO_Initv+0xb0>)
 8001070:	f001 f81e 	bl	80020b0 <HAL_GPIO_Init>

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	10210000 	.word	0x10210000
 8001084:	40020800 	.word	0x40020800

08001088 <_Z10StartGetBTPv>:
//	}
//}

/* USER CODE END 4 */
void StartGetBT(void *argument)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 8001090:	48a9      	ldr	r0, [pc, #676]	; (8001338 <_Z10StartGetBTPv+0x2b0>)
 8001092:	f000 fb81 	bl	8001798 <_ZN8MAX3421eI3P102P9E4InitEv>
 8001096:	4603      	mov	r3, r0
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	bf0c      	ite	eq
 800109e:	2301      	moveq	r3, #1
 80010a0:	2300      	movne	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <_Z10StartGetBTPv+0x2a>
  		Serial.print(F("\r\nOSC did not start"));
 80010a8:	49a4      	ldr	r1, [pc, #656]	; (800133c <_Z10StartGetBTPv+0x2b4>)
 80010aa:	48a5      	ldr	r0, [pc, #660]	; (8001340 <_Z10StartGetBTPv+0x2b8>)
 80010ac:	f7ff fa76 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 80010b0:	e7fe      	b.n	80010b0 <_Z10StartGetBTPv+0x28>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 80010b2:	49a4      	ldr	r1, [pc, #656]	; (8001344 <_Z10StartGetBTPv+0x2bc>)
 80010b4:	48a2      	ldr	r0, [pc, #648]	; (8001340 <_Z10StartGetBTPv+0x2b8>)
 80010b6:	f7ff fa71 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  gameHID.JoyX = 0;
 80010ba:	4ba3      	ldr	r3, [pc, #652]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 80010c0:	4ba1      	ldr	r3, [pc, #644]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 80010c6:	4ba0      	ldr	r3, [pc, #640]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 80010cc:	4b9e      	ldr	r3, [pc, #632]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 80010d2:	4b9d      	ldr	r3, [pc, #628]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 80010d8:	4b9b      	ldr	r3, [pc, #620]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 80010de:	4a9a      	ldr	r2, [pc, #616]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80010e0:	7993      	ldrb	r3, [r2, #6]
 80010e2:	f36f 0300 	bfc	r3, #0, #1
 80010e6:	7193      	strb	r3, [r2, #6]

  xboxHID.startByte = 0;
 80010e8:	4b98      	ldr	r3, [pc, #608]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 80010ee:	4b97      	ldr	r3, [pc, #604]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 80010f0:	2214      	movs	r2, #20
 80010f2:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0;
 80010f4:	4b95      	ldr	r3, [pc, #596]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 80010fa:	4b94      	ldr	r3, [pc, #592]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 8001100:	4b92      	ldr	r3, [pc, #584]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 8001102:	2200      	movs	r2, #0
 8001104:	715a      	strb	r2, [r3, #5]
  xboxHID.Y = 0;
 8001106:	4b91      	ldr	r3, [pc, #580]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 8001108:	2200      	movs	r2, #0
 800110a:	71da      	strb	r2, [r3, #7]
  xboxHID.X = 0;
 800110c:	4b8f      	ldr	r3, [pc, #572]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 800110e:	2200      	movs	r2, #0
 8001110:	719a      	strb	r2, [r3, #6]
  xboxHID.BLACK = 0;
 8001112:	4b8e      	ldr	r3, [pc, #568]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 8001114:	2200      	movs	r2, #0
 8001116:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 8001118:	4b8c      	ldr	r3, [pc, #560]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 800111a:	2200      	movs	r2, #0
 800111c:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 800111e:	4b8b      	ldr	r3, [pc, #556]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 8001120:	2200      	movs	r2, #0
 8001122:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 8001124:	4b89      	ldr	r3, [pc, #548]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 8001126:	2200      	movs	r2, #0
 8001128:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 800112a:	4b88      	ldr	r3, [pc, #544]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 800112c:	2200      	movs	r2, #0
 800112e:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 8001130:	4b86      	ldr	r3, [pc, #536]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 8001132:	2200      	movs	r2, #0
 8001134:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 8001136:	4b85      	ldr	r3, [pc, #532]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 8001138:	2200      	movs	r2, #0
 800113a:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 800113c:	4b83      	ldr	r3, [pc, #524]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 800113e:	2200      	movs	r2, #0
 8001140:	825a      	strh	r2, [r3, #18]
  {

	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
			if(xid_ran > 0) {
 8001142:	4b83      	ldr	r3, [pc, #524]	; (8001350 <_Z10StartGetBTPv+0x2c8>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d012      	beq.n	8001170 <_Z10StartGetBTPv+0xe8>
				Serial.print("\r\nHey the xid code ran ");
 800114a:	4982      	ldr	r1, [pc, #520]	; (8001354 <_Z10StartGetBTPv+0x2cc>)
 800114c:	487c      	ldr	r0, [pc, #496]	; (8001340 <_Z10StartGetBTPv+0x2b8>)
 800114e:	f7ff fa33 	bl	80005b8 <_ZN5Print5printEPKc>
				Serial.print(xid_ran);
 8001152:	4b7f      	ldr	r3, [pc, #508]	; (8001350 <_Z10StartGetBTPv+0x2c8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	220a      	movs	r2, #10
 8001158:	4619      	mov	r1, r3
 800115a:	4879      	ldr	r0, [pc, #484]	; (8001340 <_Z10StartGetBTPv+0x2b8>)
 800115c:	f7ff fa4c 	bl	80005f8 <_ZN5Print5printEhi>
				Serial.print("\r\n");
 8001160:	497d      	ldr	r1, [pc, #500]	; (8001358 <_Z10StartGetBTPv+0x2d0>)
 8001162:	4877      	ldr	r0, [pc, #476]	; (8001340 <_Z10StartGetBTPv+0x2b8>)
 8001164:	f7ff fa28 	bl	80005b8 <_ZN5Print5printEPKc>
				Serial.print(caller_str);
 8001168:	497c      	ldr	r1, [pc, #496]	; (800135c <_Z10StartGetBTPv+0x2d4>)
 800116a:	4875      	ldr	r0, [pc, #468]	; (8001340 <_Z10StartGetBTPv+0x2b8>)
 800116c:	f7ff fa24 	bl	80005b8 <_ZN5Print5printEPKc>
			}
			if(usb_failed || usb_failed2) {
 8001170:	4b7b      	ldr	r3, [pc, #492]	; (8001360 <_Z10StartGetBTPv+0x2d8>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <_Z10StartGetBTPv+0xf8>
 8001178:	4b7a      	ldr	r3, [pc, #488]	; (8001364 <_Z10StartGetBTPv+0x2dc>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <_Z10StartGetBTPv+0x100>
				Serial.print("\r\nUSBd failed");
 8001180:	4979      	ldr	r1, [pc, #484]	; (8001368 <_Z10StartGetBTPv+0x2e0>)
 8001182:	486f      	ldr	r0, [pc, #444]	; (8001340 <_Z10StartGetBTPv+0x2b8>)
 8001184:	f7ff fa18 	bl	80005b8 <_ZN5Print5printEPKc>
			}
			Usb.Task();
 8001188:	486b      	ldr	r0, [pc, #428]	; (8001338 <_Z10StartGetBTPv+0x2b0>)
 800118a:	f010 f919 	bl	80113c0 <_ZN3USB4TaskEv>
			if (PS4.connected()) {
 800118e:	4877      	ldr	r0, [pc, #476]	; (800136c <_Z10StartGetBTPv+0x2e4>)
 8001190:	f7ff fc96 	bl	8000ac0 <_ZN5PS4BT9connectedEv>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8293 	beq.w	80016c2 <_Z10StartGetBTPv+0x63a>
				ps4_connected = 1;
 800119c:	4b74      	ldr	r3, [pc, #464]	; (8001370 <_Z10StartGetBTPv+0x2e8>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
				LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 80011a2:	2100      	movs	r1, #0
 80011a4:	4873      	ldr	r0, [pc, #460]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 80011a6:	f00f faf8 	bl	801079a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b72      	ldr	r3, [pc, #456]	; (8001378 <_Z10StartGetBTPv+0x2f0>)
 80011b0:	701a      	strb	r2, [r3, #0]
				LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 80011b2:	2101      	movs	r1, #1
 80011b4:	486f      	ldr	r0, [pc, #444]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 80011b6:	f00f faf0 	bl	801079a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	4b6f      	ldr	r3, [pc, #444]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 80011c0:	701a      	strb	r2, [r3, #0]
				RightHatX_val = PS4.getAnalogHat(RightHatX);
 80011c2:	2102      	movs	r1, #2
 80011c4:	486b      	ldr	r0, [pc, #428]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 80011c6:	f00f fae8 	bl	801079a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b6c      	ldr	r3, [pc, #432]	; (8001380 <_Z10StartGetBTPv+0x2f8>)
 80011d0:	701a      	strb	r2, [r3, #0]
				RightHatY_val = PS4.getAnalogHat(RightHatY);
 80011d2:	2103      	movs	r1, #3
 80011d4:	4867      	ldr	r0, [pc, #412]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 80011d6:	f00f fae0 	bl	801079a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b69      	ldr	r3, [pc, #420]	; (8001384 <_Z10StartGetBTPv+0x2fc>)
 80011e0:	701a      	strb	r2, [r3, #0]

				if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117 || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 80011e2:	4b65      	ldr	r3, [pc, #404]	; (8001378 <_Z10StartGetBTPv+0x2f0>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b89      	cmp	r3, #137	; 0x89
 80011e8:	d81b      	bhi.n	8001222 <_Z10StartGetBTPv+0x19a>
 80011ea:	4b63      	ldr	r3, [pc, #396]	; (8001378 <_Z10StartGetBTPv+0x2f0>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b74      	cmp	r3, #116	; 0x74
 80011f0:	d917      	bls.n	8001222 <_Z10StartGetBTPv+0x19a>
 80011f2:	4b62      	ldr	r3, [pc, #392]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b89      	cmp	r3, #137	; 0x89
 80011f8:	d813      	bhi.n	8001222 <_Z10StartGetBTPv+0x19a>
 80011fa:	4b60      	ldr	r3, [pc, #384]	; (800137c <_Z10StartGetBTPv+0x2f4>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b74      	cmp	r3, #116	; 0x74
 8001200:	d90f      	bls.n	8001222 <_Z10StartGetBTPv+0x19a>
 8001202:	4b5f      	ldr	r3, [pc, #380]	; (8001380 <_Z10StartGetBTPv+0x2f8>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b89      	cmp	r3, #137	; 0x89
 8001208:	d80b      	bhi.n	8001222 <_Z10StartGetBTPv+0x19a>
 800120a:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <_Z10StartGetBTPv+0x2f8>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b74      	cmp	r3, #116	; 0x74
 8001210:	d907      	bls.n	8001222 <_Z10StartGetBTPv+0x19a>
 8001212:	4b5c      	ldr	r3, [pc, #368]	; (8001384 <_Z10StartGetBTPv+0x2fc>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b89      	cmp	r3, #137	; 0x89
 8001218:	d803      	bhi.n	8001222 <_Z10StartGetBTPv+0x19a>
 800121a:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <_Z10StartGetBTPv+0x2fc>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b74      	cmp	r3, #116	; 0x74
 8001220:	d844      	bhi.n	80012ac <_Z10StartGetBTPv+0x224>
					gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8001222:	2100      	movs	r1, #0
 8001224:	4853      	ldr	r0, [pc, #332]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 8001226:	f00f fab8 	bl	801079a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800122a:	4603      	mov	r3, r0
 800122c:	3b80      	subs	r3, #128	; 0x80
 800122e:	b2db      	uxtb	r3, r3
 8001230:	b25a      	sxtb	r2, r3
 8001232:	4b45      	ldr	r3, [pc, #276]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 8001234:	709a      	strb	r2, [r3, #2]
					gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8001236:	2101      	movs	r1, #1
 8001238:	484e      	ldr	r0, [pc, #312]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 800123a:	f00f faae 	bl	801079a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800123e:	4603      	mov	r3, r0
 8001240:	3b80      	subs	r3, #128	; 0x80
 8001242:	b2db      	uxtb	r3, r3
 8001244:	b25a      	sxtb	r2, r3
 8001246:	4b40      	ldr	r3, [pc, #256]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 8001248:	70da      	strb	r2, [r3, #3]
					gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 800124a:	2102      	movs	r1, #2
 800124c:	4849      	ldr	r0, [pc, #292]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 800124e:	f00f faa4 	bl	801079a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001252:	4603      	mov	r3, r0
 8001254:	3b80      	subs	r3, #128	; 0x80
 8001256:	b2db      	uxtb	r3, r3
 8001258:	b25a      	sxtb	r2, r3
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 800125c:	711a      	strb	r2, [r3, #4]
					gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 800125e:	2103      	movs	r1, #3
 8001260:	4844      	ldr	r0, [pc, #272]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 8001262:	f00f fa9a 	bl	801079a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001266:	4603      	mov	r3, r0
 8001268:	3b80      	subs	r3, #128	; 0x80
 800126a:	b2db      	uxtb	r3, r3
 800126c:	b25a      	sxtb	r2, r3
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 8001270:	715a      	strb	r2, [r3, #5]

					xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 8001274:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 800127e:	819a      	strh	r2, [r3, #12]
					xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 8001280:	4b31      	ldr	r3, [pc, #196]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 8001282:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b21a      	sxth	r2, r3
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 800128c:	81da      	strh	r2, [r3, #14]
					xboxHID.rightStickX = gameHID.Joy2X << 8;
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 8001290:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b2c      	ldr	r3, [pc, #176]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 800129a:	821a      	strh	r2, [r3, #16]
					xboxHID.rightStickY = gameHID.Joy2Y << 8;
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 800129e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 80012a8:	825a      	strh	r2, [r3, #18]
 80012aa:	e017      	b.n	80012dc <_Z10StartGetBTPv+0x254>

				} else {
					gameHID.JoyX = 0;
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	709a      	strb	r2, [r3, #2]
					gameHID.JoyY = 0;
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	70da      	strb	r2, [r3, #3]
					gameHID.Joy2X = 0;
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	711a      	strb	r2, [r3, #4]
					gameHID.Joy2Y = 0;
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	715a      	strb	r2, [r3, #5]

					xboxHID.leftStickX = 0;
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	819a      	strh	r2, [r3, #12]
					xboxHID.leftStickY = 0;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	81da      	strh	r2, [r3, #14]
					xboxHID.rightStickX = 0;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	821a      	strh	r2, [r3, #16]
					xboxHID.rightStickY = 0;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	825a      	strh	r2, [r3, #18]
				}

				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 80012dc:	2108      	movs	r1, #8
 80012de:	4825      	ldr	r0, [pc, #148]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 80012e0:	f00f fa42 	bl	8010768 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80012e4:	4603      	mov	r3, r0
 80012e6:	3b80      	subs	r3, #128	; 0x80
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	b25a      	sxtb	r2, r3
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 80012ee:	701a      	strb	r2, [r3, #0]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 80012f0:	2109      	movs	r1, #9
 80012f2:	4820      	ldr	r0, [pc, #128]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 80012f4:	f00f fa38 	bl	8010768 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80012f8:	4603      	mov	r3, r0
 80012fa:	3b80      	subs	r3, #128	; 0x80
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 8001302:	705a      	strb	r2, [r3, #1]

				xboxHID.L = gameHID.Joy_LT;
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 8001306:	f993 3000 	ldrsb.w	r3, [r3]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 800130e:	729a      	strb	r2, [r3, #10]
				xboxHID.R = gameHID.Joy_RT;
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 8001312:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <_Z10StartGetBTPv+0x2c4>)
 800131a:	72da      	strb	r2, [r3, #11]


				if (PS4.getButtonClick(PS)) {
 800131c:	2110      	movs	r1, #16
 800131e:	4815      	ldr	r0, [pc, #84]	; (8001374 <_Z10StartGetBTPv+0x2ec>)
 8001320:	f00f f9e2 	bl	80106e8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d02e      	beq.n	8001388 <_Z10StartGetBTPv+0x300>
					gameHID.ps4ButtonsTag.button_ps = 1;
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <_Z10StartGetBTPv+0x2c0>)
 800132c:	7993      	ldrb	r3, [r2, #6]
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	7193      	strb	r3, [r2, #6]
 8001334:	e02d      	b.n	8001392 <_Z10StartGetBTPv+0x30a>
 8001336:	bf00      	nop
 8001338:	20000358 	.word	0x20000358
 800133c:	080125e4 	.word	0x080125e4
 8001340:	20000344 	.word	0x20000344
 8001344:	080125f8 	.word	0x080125f8
 8001348:	200005f8 	.word	0x200005f8
 800134c:	20000610 	.word	0x20000610
 8001350:	20000625 	.word	0x20000625
 8001354:	08012618 	.word	0x08012618
 8001358:	08012630 	.word	0x08012630
 800135c:	20004fa4 	.word	0x20004fa4
 8001360:	20000626 	.word	0x20000626
 8001364:	20004f38 	.word	0x20004f38
 8001368:	08012634 	.word	0x08012634
 800136c:	2000052c 	.word	0x2000052c
 8001370:	200005f5 	.word	0x200005f5
 8001374:	200005a4 	.word	0x200005a4
 8001378:	20000600 	.word	0x20000600
 800137c:	20000601 	.word	0x20000601
 8001380:	20000602 	.word	0x20000602
 8001384:	20000603 	.word	0x20000603
				} else {
					gameHID.ps4ButtonsTag.button_ps = 0;
 8001388:	4ab4      	ldr	r2, [pc, #720]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 800138a:	7993      	ldrb	r3, [r2, #6]
 800138c:	f36f 0341 	bfc	r3, #1, #1
 8001390:	7193      	strb	r3, [r2, #6]
				}

				if (PS4.getButtonPress(TRIANGLE)) {
 8001392:	210c      	movs	r1, #12
 8001394:	48b2      	ldr	r0, [pc, #712]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 8001396:	f00f f97f 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <_Z10StartGetBTPv+0x32a>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 80013a0:	4aae      	ldr	r2, [pc, #696]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 80013a2:	79d3      	ldrb	r3, [r2, #7]
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	71d3      	strb	r3, [r2, #7]
					xboxHID.Y = 0xFF;
 80013aa:	4bae      	ldr	r3, [pc, #696]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80013ac:	22ff      	movs	r2, #255	; 0xff
 80013ae:	71da      	strb	r2, [r3, #7]
 80013b0:	e007      	b.n	80013c2 <_Z10StartGetBTPv+0x33a>
				} else {
					gameHID.ps4ButtonsTag.button_triangle = 0;
 80013b2:	4aaa      	ldr	r2, [pc, #680]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 80013b4:	79d3      	ldrb	r3, [r2, #7]
 80013b6:	f36f 0300 	bfc	r3, #0, #1
 80013ba:	71d3      	strb	r3, [r2, #7]
					xboxHID.Y = 0;
 80013bc:	4ba9      	ldr	r3, [pc, #676]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	71da      	strb	r2, [r3, #7]
				}

				if (PS4.getButtonPress(CIRCLE)) {
 80013c2:	210d      	movs	r1, #13
 80013c4:	48a6      	ldr	r0, [pc, #664]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 80013c6:	f00f f967 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <_Z10StartGetBTPv+0x35a>
					gameHID.ps4ButtonsTag.button_circle = 1;
 80013d0:	4aa2      	ldr	r2, [pc, #648]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 80013d2:	7993      	ldrb	r3, [r2, #6]
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	7193      	strb	r3, [r2, #6]
					xboxHID.B = 0xFF;
 80013da:	4ba2      	ldr	r3, [pc, #648]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80013dc:	22ff      	movs	r2, #255	; 0xff
 80013de:	715a      	strb	r2, [r3, #5]
 80013e0:	e007      	b.n	80013f2 <_Z10StartGetBTPv+0x36a>
				} else {
					gameHID.ps4ButtonsTag.button_circle = 0;
 80013e2:	4a9e      	ldr	r2, [pc, #632]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 80013e4:	7993      	ldrb	r3, [r2, #6]
 80013e6:	f36f 13c7 	bfc	r3, #7, #1
 80013ea:	7193      	strb	r3, [r2, #6]
					xboxHID.B = 0;
 80013ec:	4b9d      	ldr	r3, [pc, #628]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	715a      	strb	r2, [r3, #5]
				}

				if (PS4.getButtonPress(CROSS)) {
 80013f2:	210e      	movs	r1, #14
 80013f4:	489a      	ldr	r0, [pc, #616]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 80013f6:	f00f f94f 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <_Z10StartGetBTPv+0x38a>
					gameHID.ps4ButtonsTag.button_cross = 1;
 8001400:	4a96      	ldr	r2, [pc, #600]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 8001402:	7993      	ldrb	r3, [r2, #6]
 8001404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001408:	7193      	strb	r3, [r2, #6]
					xboxHID.A = 0xFF;
 800140a:	4b96      	ldr	r3, [pc, #600]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 800140c:	22ff      	movs	r2, #255	; 0xff
 800140e:	711a      	strb	r2, [r3, #4]
 8001410:	e007      	b.n	8001422 <_Z10StartGetBTPv+0x39a>
				} else {
					gameHID.ps4ButtonsTag.button_cross = 0;
 8001412:	4a92      	ldr	r2, [pc, #584]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 8001414:	7993      	ldrb	r3, [r2, #6]
 8001416:	f36f 1386 	bfc	r3, #6, #1
 800141a:	7193      	strb	r3, [r2, #6]
					xboxHID.A = 0xFF;	//always press A for testing
 800141c:	4b91      	ldr	r3, [pc, #580]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 800141e:	22ff      	movs	r2, #255	; 0xff
 8001420:	711a      	strb	r2, [r3, #4]
				}

				if (PS4.getButtonPress(SQUARE)) {
 8001422:	210f      	movs	r1, #15
 8001424:	488e      	ldr	r0, [pc, #568]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 8001426:	f00f f937 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <_Z10StartGetBTPv+0x3ba>
					gameHID.ps4ButtonsTag.button_square = 1;
 8001430:	4a8a      	ldr	r2, [pc, #552]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 8001432:	79d3      	ldrb	r3, [r2, #7]
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	71d3      	strb	r3, [r2, #7]
					xboxHID.X = 0xFF;
 800143a:	4b8a      	ldr	r3, [pc, #552]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 800143c:	22ff      	movs	r2, #255	; 0xff
 800143e:	719a      	strb	r2, [r3, #6]
 8001440:	e007      	b.n	8001452 <_Z10StartGetBTPv+0x3ca>
				} else {
					gameHID.ps4ButtonsTag.button_square = 0;
 8001442:	4a86      	ldr	r2, [pc, #536]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 8001444:	79d3      	ldrb	r3, [r2, #7]
 8001446:	f36f 0341 	bfc	r3, #1, #1
 800144a:	71d3      	strb	r3, [r2, #7]
					xboxHID.X = 0;
 800144c:	4b85      	ldr	r3, [pc, #532]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 800144e:	2200      	movs	r2, #0
 8001450:	719a      	strb	r2, [r3, #6]
				}

				if (PS4.getButtonPress(UP)) {
 8001452:	2100      	movs	r1, #0
 8001454:	4882      	ldr	r0, [pc, #520]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 8001456:	f00f f91f 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00c      	beq.n	800147a <_Z10StartGetBTPv+0x3f2>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8001460:	4a7e      	ldr	r2, [pc, #504]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 8001462:	79d3      	ldrb	r3, [r2, #7]
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DUP;
 800146a:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 800146c:	789b      	ldrb	r3, [r3, #2]
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001476:	709a      	strb	r2, [r3, #2]
 8001478:	e00b      	b.n	8001492 <_Z10StartGetBTPv+0x40a>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_up = 0;
 800147a:	4a78      	ldr	r2, [pc, #480]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 800147c:	79d3      	ldrb	r3, [r2, #7]
 800147e:	f36f 0382 	bfc	r3, #2, #1
 8001482:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DUP;
 8001484:	4b77      	ldr	r3, [pc, #476]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001486:	789b      	ldrb	r3, [r3, #2]
 8001488:	f083 0301 	eor.w	r3, r3, #1
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b75      	ldr	r3, [pc, #468]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001490:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(RIGHT)) {
 8001492:	2101      	movs	r1, #1
 8001494:	4872      	ldr	r0, [pc, #456]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 8001496:	f00f f8ff 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00c      	beq.n	80014ba <_Z10StartGetBTPv+0x432>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 80014a0:	4a6e      	ldr	r2, [pc, #440]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 80014a2:	79d3      	ldrb	r3, [r2, #7]
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DRIGHT;
 80014aa:	4b6e      	ldr	r3, [pc, #440]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80014ac:	789b      	ldrb	r3, [r3, #2]
 80014ae:	f043 0308 	orr.w	r3, r3, #8
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80014b6:	709a      	strb	r2, [r3, #2]
 80014b8:	e00b      	b.n	80014d2 <_Z10StartGetBTPv+0x44a>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_right = 0;
 80014ba:	4a68      	ldr	r2, [pc, #416]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 80014bc:	79d3      	ldrb	r3, [r2, #7]
 80014be:	f36f 03c3 	bfc	r3, #3, #1
 80014c2:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DRIGHT;
 80014c4:	4b67      	ldr	r3, [pc, #412]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80014c6:	789b      	ldrb	r3, [r3, #2]
 80014c8:	f083 0308 	eor.w	r3, r3, #8
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b65      	ldr	r3, [pc, #404]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80014d0:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(DOWN)) {
 80014d2:	2102      	movs	r1, #2
 80014d4:	4862      	ldr	r0, [pc, #392]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 80014d6:	f00f f8df 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00c      	beq.n	80014fa <_Z10StartGetBTPv+0x472>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 80014e0:	4a5e      	ldr	r2, [pc, #376]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 80014e2:	79d3      	ldrb	r3, [r2, #7]
 80014e4:	f043 0320 	orr.w	r3, r3, #32
 80014e8:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DDOWN;
 80014ea:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80014ec:	789b      	ldrb	r3, [r3, #2]
 80014ee:	f043 0302 	orr.w	r3, r3, #2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80014f6:	709a      	strb	r2, [r3, #2]
 80014f8:	e00b      	b.n	8001512 <_Z10StartGetBTPv+0x48a>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_down = 0;
 80014fa:	4a58      	ldr	r2, [pc, #352]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 80014fc:	79d3      	ldrb	r3, [r2, #7]
 80014fe:	f36f 1345 	bfc	r3, #5, #1
 8001502:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DDOWN;
 8001504:	4b57      	ldr	r3, [pc, #348]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001506:	789b      	ldrb	r3, [r3, #2]
 8001508:	f083 0302 	eor.w	r3, r3, #2
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b55      	ldr	r3, [pc, #340]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001510:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(LEFT)) {
 8001512:	2103      	movs	r1, #3
 8001514:	4852      	ldr	r0, [pc, #328]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 8001516:	f00f f8bf 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00c      	beq.n	800153a <_Z10StartGetBTPv+0x4b2>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8001520:	4a4e      	ldr	r2, [pc, #312]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 8001522:	79d3      	ldrb	r3, [r2, #7]
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_DLEFT;
 800152a:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 800152c:	789b      	ldrb	r3, [r3, #2]
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b4b      	ldr	r3, [pc, #300]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001536:	709a      	strb	r2, [r3, #2]
 8001538:	e00b      	b.n	8001552 <_Z10StartGetBTPv+0x4ca>

				} else {
					gameHID.ps4ButtonsTag.button_dpad_left = 0;
 800153a:	4a48      	ldr	r2, [pc, #288]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 800153c:	79d3      	ldrb	r3, [r2, #7]
 800153e:	f36f 1304 	bfc	r3, #4, #1
 8001542:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_DLEFT;
 8001544:	4b47      	ldr	r3, [pc, #284]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	f083 0304 	eor.w	r3, r3, #4
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b45      	ldr	r3, [pc, #276]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001550:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(L1)) {
 8001552:	210a      	movs	r1, #10
 8001554:	4842      	ldr	r0, [pc, #264]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 8001556:	f00f f89f 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <_Z10StartGetBTPv+0x4ea>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8001560:	4a3e      	ldr	r2, [pc, #248]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 8001562:	7993      	ldrb	r3, [r2, #6]
 8001564:	f043 0320 	orr.w	r3, r3, #32
 8001568:	7193      	strb	r3, [r2, #6]
					xboxHID.BLACK = 0xFF;
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 800156c:	22ff      	movs	r2, #255	; 0xff
 800156e:	721a      	strb	r2, [r3, #8]
 8001570:	e007      	b.n	8001582 <_Z10StartGetBTPv+0x4fa>

				} else {
					gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001572:	4a3a      	ldr	r2, [pc, #232]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 8001574:	7993      	ldrb	r3, [r2, #6]
 8001576:	f36f 1345 	bfc	r3, #5, #1
 800157a:	7193      	strb	r3, [r2, #6]
					xboxHID.BLACK = 0;
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 800157e:	2200      	movs	r2, #0
 8001580:	721a      	strb	r2, [r3, #8]
				}

				if (PS4.getButtonPress(L3)) {
 8001582:	2106      	movs	r1, #6
 8001584:	4836      	ldr	r0, [pc, #216]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 8001586:	f00f f887 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00c      	beq.n	80015aa <_Z10StartGetBTPv+0x522>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8001590:	4a32      	ldr	r2, [pc, #200]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 8001592:	79d3      	ldrb	r3, [r2, #7]
 8001594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001598:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_LS_BTN;
 800159a:	4b32      	ldr	r3, [pc, #200]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 800159c:	789b      	ldrb	r3, [r3, #2]
 800159e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80015a6:	709a      	strb	r2, [r3, #2]
 80015a8:	e00b      	b.n	80015c2 <_Z10StartGetBTPv+0x53a>
				} else {
					gameHID.ps4ButtonsTag.button_left_thumb = 0;
 80015aa:	4a2c      	ldr	r2, [pc, #176]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 80015ac:	79d3      	ldrb	r3, [r2, #7]
 80015ae:	f36f 1386 	bfc	r3, #6, #1
 80015b2:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_LS_BTN;
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80015b6:	789b      	ldrb	r3, [r3, #2]
 80015b8:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b29      	ldr	r3, [pc, #164]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80015c0:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(R1)) {
 80015c2:	210b      	movs	r1, #11
 80015c4:	4826      	ldr	r0, [pc, #152]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 80015c6:	f00f f867 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <_Z10StartGetBTPv+0x55a>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 80015d0:	4a22      	ldr	r2, [pc, #136]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 80015d2:	7993      	ldrb	r3, [r2, #6]
 80015d4:	f043 0310 	orr.w	r3, r3, #16
 80015d8:	7193      	strb	r3, [r2, #6]
					xboxHID.WHITE = 0xFF;
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80015dc:	22ff      	movs	r2, #255	; 0xff
 80015de:	725a      	strb	r2, [r3, #9]
 80015e0:	e007      	b.n	80015f2 <_Z10StartGetBTPv+0x56a>
				} else {
					gameHID.ps4ButtonsTag.button_right_trigger = 0;
 80015e2:	4a1e      	ldr	r2, [pc, #120]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 80015e4:	7993      	ldrb	r3, [r2, #6]
 80015e6:	f36f 1304 	bfc	r3, #4, #1
 80015ea:	7193      	strb	r3, [r2, #6]
					xboxHID.WHITE = 0;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	725a      	strb	r2, [r3, #9]
				}

				if (PS4.getButtonPress(R3)) {
 80015f2:	2107      	movs	r1, #7
 80015f4:	481a      	ldr	r0, [pc, #104]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 80015f6:	f00f f84f 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00c      	beq.n	800161a <_Z10StartGetBTPv+0x592>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 8001600:	4a16      	ldr	r2, [pc, #88]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 8001602:	79d3      	ldrb	r3, [r2, #7]
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons |= XBOX_RS_BTN;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 800160c:	789b      	ldrb	r3, [r3, #2]
 800160e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001612:	b2da      	uxtb	r2, r3
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001616:	709a      	strb	r2, [r3, #2]
 8001618:	e00c      	b.n	8001634 <_Z10StartGetBTPv+0x5ac>
				} else {
					gameHID.ps4ButtonsTag.button_right_thumb = 0;
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 800161c:	79d3      	ldrb	r3, [r2, #7]
 800161e:	f36f 13c7 	bfc	r3, #7, #1
 8001622:	71d3      	strb	r3, [r2, #7]
					xboxHID.dButtons ^= XBOX_RS_BTN;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001626:	789b      	ldrb	r3, [r3, #2]
 8001628:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800162c:	43db      	mvns	r3, r3
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001632:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(SHARE)) {
 8001634:	2104      	movs	r1, #4
 8001636:	480a      	ldr	r0, [pc, #40]	; (8001660 <_Z10StartGetBTPv+0x5d8>)
 8001638:	f00f f82e 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d012      	beq.n	8001668 <_Z10StartGetBTPv+0x5e0>
					gameHID.ps4ButtonsTag.button_share = 1;
 8001642:	4a06      	ldr	r2, [pc, #24]	; (800165c <_Z10StartGetBTPv+0x5d4>)
 8001644:	7993      	ldrb	r3, [r2, #6]
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons |= XBOX_BACK_BTN;
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 800164e:	789b      	ldrb	r3, [r3, #2]
 8001650:	f043 0320 	orr.w	r3, r3, #32
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b03      	ldr	r3, [pc, #12]	; (8001664 <_Z10StartGetBTPv+0x5dc>)
 8001658:	709a      	strb	r2, [r3, #2]
 800165a:	e011      	b.n	8001680 <_Z10StartGetBTPv+0x5f8>
 800165c:	200005f8 	.word	0x200005f8
 8001660:	200005a4 	.word	0x200005a4
 8001664:	20000610 	.word	0x20000610
				} else {
					gameHID.ps4ButtonsTag.button_share = 0;
 8001668:	4a29      	ldr	r2, [pc, #164]	; (8001710 <_Z10StartGetBTPv+0x688>)
 800166a:	7993      	ldrb	r3, [r2, #6]
 800166c:	f36f 03c3 	bfc	r3, #3, #1
 8001670:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons ^= XBOX_BACK_BTN;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <_Z10StartGetBTPv+0x68c>)
 8001674:	789b      	ldrb	r3, [r3, #2]
 8001676:	f083 0320 	eor.w	r3, r3, #32
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <_Z10StartGetBTPv+0x68c>)
 800167e:	709a      	strb	r2, [r3, #2]
				}

				if (PS4.getButtonPress(OPTIONS)) {
 8001680:	2105      	movs	r1, #5
 8001682:	4825      	ldr	r0, [pc, #148]	; (8001718 <_Z10StartGetBTPv+0x690>)
 8001684:	f00f f808 	bl	8010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00c      	beq.n	80016a8 <_Z10StartGetBTPv+0x620>
					gameHID.ps4ButtonsTag.button_start = 1;
 800168e:	4a20      	ldr	r2, [pc, #128]	; (8001710 <_Z10StartGetBTPv+0x688>)
 8001690:	7993      	ldrb	r3, [r2, #6]
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons |= XBOX_START_BTN;
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <_Z10StartGetBTPv+0x68c>)
 800169a:	789b      	ldrb	r3, [r3, #2]
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <_Z10StartGetBTPv+0x68c>)
 80016a4:	709a      	strb	r2, [r3, #2]
 80016a6:	e02e      	b.n	8001706 <_Z10StartGetBTPv+0x67e>
				} else {
					gameHID.ps4ButtonsTag.button_start = 0;
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <_Z10StartGetBTPv+0x688>)
 80016aa:	7993      	ldrb	r3, [r2, #6]
 80016ac:	f36f 0382 	bfc	r3, #2, #1
 80016b0:	7193      	strb	r3, [r2, #6]
					xboxHID.dButtons ^= XBOX_START_BTN;
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <_Z10StartGetBTPv+0x68c>)
 80016b4:	789b      	ldrb	r3, [r3, #2]
 80016b6:	f083 0310 	eor.w	r3, r3, #16
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_Z10StartGetBTPv+0x68c>)
 80016be:	709a      	strb	r2, [r3, #2]
 80016c0:	e021      	b.n	8001706 <_Z10StartGetBTPv+0x67e>
				}

		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80016c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c6:	4815      	ldr	r0, [pc, #84]	; (800171c <_Z10StartGetBTPv+0x694>)
 80016c8:	f000 fe86 	bl	80023d8 <HAL_GPIO_ReadPin>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bf0c      	ite	eq
 80016d2:	2301      	moveq	r3, #1
 80016d4:	2300      	movne	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d011      	beq.n	8001700 <_Z10StartGetBTPv+0x678>
			if (!buttonPressed) {
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_Z10StartGetBTPv+0x698>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	f083 0301 	eor.w	r3, r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <_Z10StartGetBTPv+0x670>
				Serial.print(F("\r\nButton Pressed"));
 80016ea:	490e      	ldr	r1, [pc, #56]	; (8001724 <_Z10StartGetBTPv+0x69c>)
 80016ec:	480e      	ldr	r0, [pc, #56]	; (8001728 <_Z10StartGetBTPv+0x6a0>)
 80016ee:	f7fe ff55 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.pair(); // Start paring routine if user button was just pressed
 80016f2:	480e      	ldr	r0, [pc, #56]	; (800172c <_Z10StartGetBTPv+0x6a4>)
 80016f4:	f7ff f93f 	bl	8000976 <_ZN5BTHID4pairEv>
			}
			buttonPressed = true;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <_Z10StartGetBTPv+0x698>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	e002      	b.n	8001706 <_Z10StartGetBTPv+0x67e>
		} else
			buttonPressed = false;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <_Z10StartGetBTPv+0x698>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]


    osDelay(1);
 8001706:	2001      	movs	r0, #1
 8001708:	f007 fca8 	bl	800905c <osDelay>
			if(xid_ran > 0) {
 800170c:	e519      	b.n	8001142 <_Z10StartGetBTPv+0xba>
 800170e:	bf00      	nop
 8001710:	200005f8 	.word	0x200005f8
 8001714:	20000610 	.word	0x20000610
 8001718:	200005a4 	.word	0x200005a4
 800171c:	40020800 	.word	0x40020800
 8001720:	200005f4 	.word	0x200005f4
 8001724:	08012644 	.word	0x08012644
 8001728:	20000344 	.word	0x20000344
 800172c:	2000052c 	.word	0x2000052c

08001730 <_Z12StartSendUSBPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
	MX_USB_DEVICE_Init();
 8001738:	f00a f908 	bl	800b94c <MX_USB_DEVICE_Init>
#endif

#if OG_XBOX_SETUP
	//Serial.print(xboxHID.leftStickX);

	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 800173c:	2214      	movs	r2, #20
 800173e:	4904      	ldr	r1, [pc, #16]	; (8001750 <_Z12StartSendUSBPv+0x20>)
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <_Z12StartSendUSBPv+0x24>)
 8001742:	f006 f9a9 	bl	8007a98 <USBD_HID_SendReport>
#endif
    osDelay(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f007 fc88 	bl	800905c <osDelay>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 800174c:	e7f6      	b.n	800173c <_Z12StartSendUSBPv+0xc>
 800174e:	bf00      	nop
 8001750:	20000610 	.word	0x20000610
 8001754:	20005048 	.word	0x20005048

08001758 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END StartSendUSB */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800176a:	f000 fb7b 	bl	8001e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40001c00 	.word	0x40001c00

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	Serial.print("\r\nSomething went wrong!");
 8001780:	4903      	ldr	r1, [pc, #12]	; (8001790 <Error_Handler+0x14>)
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <Error_Handler+0x18>)
 8001784:	f7fe ff18 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x10>
 800178e:	bf00      	nop
 8001790:	08012658 	.word	0x08012658
 8001794:	20000344 	.word	0x20000344

08001798 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 80017a0:	f7ff f8bc 	bl	800091c <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 80017a4:	f7ff f8a2 	bl	80008ec <_ZN3P103SetEv>
        spi::init();
 80017a8:	f000 f845 	bl	8001836 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 80017ac:	f7ff f888 	bl	80008c0 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 80017b0:	2218      	movs	r2, #24
 80017b2:	2188      	movs	r1, #136	; 0x88
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f845 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f864 	bl	8001888 <_ZN8MAX3421eI3P102P9E5resetEv>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bf0c      	ite	eq
 80017c6:	2301      	moveq	r3, #1
 80017c8:	2300      	movne	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295
 80017d4:	e02b      	b.n	800182e <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 80017d6:	22c1      	movs	r2, #193	; 0xc1
 80017d8:	21d8      	movs	r1, #216	; 0xd8
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f832 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 80017e0:	2260      	movs	r2, #96	; 0x60
 80017e2:	21d0      	movs	r1, #208	; 0xd0
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f82d 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 80017ea:	2204      	movs	r2, #4
 80017ec:	21e8      	movs	r1, #232	; 0xe8
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f828 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 80017f4:	21e8      	movs	r1, #232	; 0xe8
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f876 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf0c      	ite	eq
 8001806:	2301      	moveq	r3, #1
 8001808:	2300      	movne	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d000      	beq.n	8001812 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8001810:	e7f0      	b.n	80017f4 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f88a 	bl	800192c <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001818:	2220      	movs	r2, #32
 800181a:	21c8      	movs	r1, #200	; 0xc8
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f811 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001822:	2201      	movs	r2, #1
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f80c 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
        }
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
 8001850:	4613      	mov	r3, r2
 8001852:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001854:	f7ff f856 	bl	8000904 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8001862:	78bb      	ldrb	r3, [r7, #2]
 8001864:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001866:	f107 010c 	add.w	r1, r7, #12
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	2202      	movs	r2, #2
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8001872:	f003 f8e8 	bl	8004a46 <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001876:	f7ff f839 	bl	80008ec <_ZN3P103SetEv>
        return;
 800187a:	bf00      	nop
};
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002a8 	.word	0x200002a8

08001888 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001894:	2220      	movs	r2, #32
 8001896:	2178      	movs	r1, #120	; 0x78
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ffd3 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 800189e:	2200      	movs	r2, #0
 80018a0:	2178      	movs	r1, #120	; 0x78
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffce 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 80018a8:	89fb      	ldrh	r3, [r7, #14]
 80018aa:	3301      	adds	r3, #1
 80018ac:	81fb      	strh	r3, [r7, #14]
 80018ae:	89fb      	ldrh	r3, [r7, #14]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00f      	beq.n	80018de <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 80018be:	2168      	movs	r1, #104	; 0x68
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f811 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d100      	bne.n	80018dc <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 80018da:	e7e5      	b.n	80018a8 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 80018dc:	bf00      	nop
        return ( i);
 80018de:	89fb      	ldrh	r3, [r7, #14]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 80018f4:	f7ff f806 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 80018f8:	1cf9      	adds	r1, r7, #3
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	2201      	movs	r2, #1
 8001900:	4809      	ldr	r0, [pc, #36]	; (8001928 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001902:	f003 f8a0 	bl	8004a46 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 800190a:	f107 010f 	add.w	r1, r7, #15
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	2201      	movs	r2, #1
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001916:	f003 f9d2 	bl	8004cbe <HAL_SPI_Receive>
        SPI_SS::Set();
 800191a:	f7fe ffe7 	bl	80008ec <_ZN3P103SetEv>
        return (rv);
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200002a8 	.word	0x200002a8

0800192c <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001934:	21f8      	movs	r1, #248	; 0xf8
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffd6 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001946:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2bc0      	cmp	r3, #192	; 0xc0
 800194c:	d04a      	beq.n	80019e4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 800194e:	2bc0      	cmp	r3, #192	; 0xc0
 8001950:	dc55      	bgt.n	80019fe <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001952:	2b80      	cmp	r3, #128	; 0x80
 8001954:	d006      	beq.n	8001964 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8001956:	2b80      	cmp	r3, #128	; 0x80
 8001958:	dc51      	bgt.n	80019fe <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800195a:	2b00      	cmp	r3, #0
 800195c:	d046      	beq.n	80019ec <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 800195e:	2b40      	cmp	r3, #64	; 0x40
 8001960:	d020      	beq.n	80019a4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 8001962:	e04c      	b.n	80019fe <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001964:	21d8      	movs	r1, #216	; 0xd8
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffbe 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	bf0c      	ite	eq
 8001976:	2301      	moveq	r3, #1
 8001978:	2300      	movne	r3, #0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001980:	22c9      	movs	r2, #201	; 0xc9
 8001982:	21d8      	movs	r1, #216	; 0xd8
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff5d 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800198c:	2202      	movs	r2, #2
 800198e:	701a      	strb	r2, [r3, #0]
                        break;
 8001990:	e035      	b.n	80019fe <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001992:	22cb      	movs	r2, #203	; 0xcb
 8001994:	21d8      	movs	r1, #216	; 0xd8
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ff54 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800199e:	2203      	movs	r2, #3
 80019a0:	701a      	strb	r2, [r3, #0]
                        break;
 80019a2:	e02c      	b.n	80019fe <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80019a4:	21d8      	movs	r1, #216	; 0xd8
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff9e 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 80019c0:	22cb      	movs	r2, #203	; 0xcb
 80019c2:	21d8      	movs	r1, #216	; 0xd8
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff3d 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019cc:	2203      	movs	r2, #3
 80019ce:	701a      	strb	r2, [r3, #0]
                        break;
 80019d0:	e015      	b.n	80019fe <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80019d2:	22c9      	movs	r2, #201	; 0xc9
 80019d4:	21d8      	movs	r1, #216	; 0xd8
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff34 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
                        break;
 80019e2:	e00c      	b.n	80019fe <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
                        break;
 80019ea:	e008      	b.n	80019fe <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 80019ec:	22d1      	movs	r2, #209	; 0xd1
 80019ee:	21d8      	movs	r1, #216	; 0xd8
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff27 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
                        break;
 80019fc:	bf00      	nop
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000624 	.word	0x20000624

08001a0c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d115      	bne.n	8001a48 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d110      	bne.n	8001a48 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 8001a26:	490a      	ldr	r1, [pc, #40]	; (8001a50 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001a28:	480a      	ldr	r0, [pc, #40]	; (8001a54 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001a2a:	f7fe ff33 	bl	8000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 8001a2e:	480a      	ldr	r0, [pc, #40]	; (8001a58 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001a30:	f00f f826 	bl	8010a80 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8001a34:	4908      	ldr	r1, [pc, #32]	; (8001a58 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001a36:	4809      	ldr	r0, [pc, #36]	; (8001a5c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001a38:	f00a fe26 	bl	800c688 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4906      	ldr	r1, [pc, #24]	; (8001a5c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001a42:	4808      	ldr	r0, [pc, #32]	; (8001a64 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001a44:	f7ff f814 	bl	8000a70 <_ZN5PS4BTC1EP3BTDbPKc>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000214 	.word	0x20000214
 8001a54:	20000344 	.word	0x20000344
 8001a58:	20000358 	.word	0x20000358
 8001a5c:	20000414 	.word	0x20000414
 8001a60:	08012670 	.word	0x08012670
 8001a64:	2000052c 	.word	0x2000052c

08001a68 <_GLOBAL__sub_I_hspi1>:
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff ffcb 	bl	8001a0c <_Z41__static_initialization_and_destruction_0ii>
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_MspInit+0x54>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <HAL_MspInit+0x54>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_MspInit+0x54>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_MspInit+0x54>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <HAL_MspInit+0x54>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_MspInit+0x54>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	210f      	movs	r1, #15
 8001aba:	f06f 0001 	mvn.w	r0, #1
 8001abe:	f000 facd 	bl	800205c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800

08001ad0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <HAL_SPI_MspInit+0x84>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d12b      	bne.n	8001b4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a17      	ldr	r2, [pc, #92]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_SPI_MspInit+0x88>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b2a:	23e0      	movs	r3, #224	; 0xe0
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <HAL_SPI_MspInit+0x8c>)
 8001b46:	f000 fab3 	bl	80020b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40013000 	.word	0x40013000
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020000 	.word	0x40020000

08001b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_TIM_Base_MspInit+0x48>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d115      	bne.n	8001b9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_TIM_Base_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <HAL_TIM_Base_MspInit+0x4c>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_TIM_Base_MspInit+0x4c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2105      	movs	r1, #5
 8001b92:	202d      	movs	r0, #45	; 0x2d
 8001b94:	f000 fa62 	bl	800205c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001b98:	202d      	movs	r0, #45	; 0x2d
 8001b9a:	f000 fa7b 	bl	8002094 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40002000 	.word	0x40002000
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <HAL_UART_MspInit+0x84>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12b      	bne.n	8001c2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c0a:	230c      	movs	r3, #12
 8001c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_UART_MspInit+0x8c>)
 8001c26:	f000 fa43 	bl	80020b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40004400 	.word	0x40004400
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000

08001c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	; 0x30
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	202c      	movs	r0, #44	; 0x2c
 8001c56:	f000 fa01 	bl	800205c <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c5a:	202c      	movs	r0, #44	; 0x2c
 8001c5c:	f000 fa1a 	bl	8002094 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <HAL_InitTick+0xa4>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	4a1e      	ldr	r2, [pc, #120]	; (8001ce4 <HAL_InitTick+0xa4>)
 8001c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_InitTick+0xa4>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c7c:	f107 0210 	add.w	r2, r7, #16
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 fea8 	bl	80039dc <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c8c:	f001 fe7e 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8001c90:	4603      	mov	r3, r0
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c98:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <HAL_InitTick+0xa8>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0c9b      	lsrs	r3, r3, #18
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_InitTick+0xac>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <HAL_InitTick+0xb0>)
 8001ca8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_InitTick+0xac>)
 8001cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cb0:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_InitTick+0xac>)
 8001cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb6:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_InitTick+0xac>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_InitTick+0xac>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001cc4:	4809      	ldr	r0, [pc, #36]	; (8001cec <HAL_InitTick+0xac>)
 8001cc6:	f003 fbdd 	bl	8005484 <HAL_TIM_Base_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d104      	bne.n	8001cda <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001cd0:	4806      	ldr	r0, [pc, #24]	; (8001cec <HAL_InitTick+0xac>)
 8001cd2:	f003 fc27 	bl	8005524 <HAL_TIM_Base_Start_IT>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	e000      	b.n	8001cdc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3730      	adds	r7, #48	; 0x30
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	431bde83 	.word	0x431bde83
 8001cec:	20004f58 	.word	0x20004f58
 8001cf0:	40001c00 	.word	0x40001c00

08001cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <NMI_Handler+0x4>

08001cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <MemManage_Handler+0x4>

08001d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <BusFault_Handler+0x4>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler+0x4>

08001d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001d26:	f003 fc6d 	bl	8005604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20004f58 	.word	0x20004f58

08001d34 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001d3a:	f003 fc63 	bl	8005604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000258 	.word	0x20000258

08001d48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <OTG_FS_IRQHandler+0x10>)
 8001d4e:	f000 fccb 	bl	80026e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20005518 	.word	0x20005518

08001d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_kill>:

int _kill(int pid, int sig)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d76:	f010 fb6d 	bl	8012454 <__errno>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2216      	movs	r2, #22
 8001d7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_exit>:

void _exit (int status)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ffe7 	bl	8001d6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d9e:	e7fe      	b.n	8001d9e <_exit+0x12>

08001da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <SystemInit+0x28>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <SystemInit+0x28>)
 8001dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <SystemInit+0x28>)
 8001db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dba:	609a      	str	r2, [r3, #8]
#endif
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dd2:	e003      	b.n	8001ddc <LoopCopyDataInit>

08001dd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dda:	3104      	adds	r1, #4

08001ddc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ddc:	480b      	ldr	r0, [pc, #44]	; (8001e0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001de0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001de2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001de4:	d3f6      	bcc.n	8001dd4 <CopyDataInit>
  ldr  r2, =_sbss
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001de8:	e002      	b.n	8001df0 <LoopFillZerobss>

08001dea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dec:	f842 3b04 	str.w	r3, [r2], #4

08001df0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001df2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001df4:	d3f9      	bcc.n	8001dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001df6:	f7ff ffd3 	bl	8001da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dfa:	f010 fb31 	bl	8012460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dfe:	f7fe ff0b 	bl	8000c18 <main>
  bx  lr    
 8001e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e08:	080129d8 	.word	0x080129d8
  ldr  r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e10:	20000178 	.word	0x20000178
  ldr  r2, =_sbss
 8001e14:	20000178 	.word	0x20000178
  ldr  r3, = _ebss
 8001e18:	20005924 	.word	0x20005924

08001e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e1c:	e7fe      	b.n	8001e1c <ADC_IRQHandler>
	...

08001e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <HAL_Init+0x40>)
 8001e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_Init+0x40>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <HAL_Init+0x40>)
 8001e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_Init+0x40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_Init+0x40>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f000 f8fc 	bl	8002046 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7ff fef6 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e54:	f7ff fe10 	bl	8001a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023c00 	.word	0x40023c00

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000008 	.word	0x20000008
 8001e88:	20004fa0 	.word	0x20004fa0

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20004fa0 	.word	0x20004fa0

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000008 	.word	0x20000008

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ff4c 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206e:	f7ff ff61 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 8002072:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	6978      	ldr	r0, [r7, #20]
 800207a:	f7ff ffb1 	bl	8001fe0 <NVIC_EncodePriority>
 800207e:	4602      	mov	r2, r0
 8002080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff80 	bl	8001f8c <__NVIC_SetPriority>
}
 800208c:	bf00      	nop
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff54 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e165      	b.n	8002398 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8154 	bne.w	8002392 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d005      	beq.n	8002102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d130      	bne.n	8002164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 0201 	and.w	r2, r3, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b03      	cmp	r3, #3
 800216e:	d017      	beq.n	80021a0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d123      	bne.n	80021f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	08da      	lsrs	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3208      	adds	r2, #8
 80021b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80ae 	beq.w	8002392 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b5d      	ldr	r3, [pc, #372]	; (80023b0 <HAL_GPIO_Init+0x300>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a5c      	ldr	r2, [pc, #368]	; (80023b0 <HAL_GPIO_Init+0x300>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b5a      	ldr	r3, [pc, #360]	; (80023b0 <HAL_GPIO_Init+0x300>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002252:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_GPIO_Init+0x304>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4f      	ldr	r2, [pc, #316]	; (80023b8 <HAL_GPIO_Init+0x308>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d025      	beq.n	80022ca <HAL_GPIO_Init+0x21a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4e      	ldr	r2, [pc, #312]	; (80023bc <HAL_GPIO_Init+0x30c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01f      	beq.n	80022c6 <HAL_GPIO_Init+0x216>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4d      	ldr	r2, [pc, #308]	; (80023c0 <HAL_GPIO_Init+0x310>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d019      	beq.n	80022c2 <HAL_GPIO_Init+0x212>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4c      	ldr	r2, [pc, #304]	; (80023c4 <HAL_GPIO_Init+0x314>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_GPIO_Init+0x20e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4b      	ldr	r2, [pc, #300]	; (80023c8 <HAL_GPIO_Init+0x318>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00d      	beq.n	80022ba <HAL_GPIO_Init+0x20a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <HAL_GPIO_Init+0x31c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <HAL_GPIO_Init+0x206>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a49      	ldr	r2, [pc, #292]	; (80023d0 <HAL_GPIO_Init+0x320>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_GPIO_Init+0x202>
 80022ae:	2306      	movs	r3, #6
 80022b0:	e00c      	b.n	80022cc <HAL_GPIO_Init+0x21c>
 80022b2:	2307      	movs	r3, #7
 80022b4:	e00a      	b.n	80022cc <HAL_GPIO_Init+0x21c>
 80022b6:	2305      	movs	r3, #5
 80022b8:	e008      	b.n	80022cc <HAL_GPIO_Init+0x21c>
 80022ba:	2304      	movs	r3, #4
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x21c>
 80022be:	2303      	movs	r3, #3
 80022c0:	e004      	b.n	80022cc <HAL_GPIO_Init+0x21c>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e002      	b.n	80022cc <HAL_GPIO_Init+0x21c>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_GPIO_Init+0x21c>
 80022ca:	2300      	movs	r3, #0
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	f002 0203 	and.w	r2, r2, #3
 80022d2:	0092      	lsls	r2, r2, #2
 80022d4:	4093      	lsls	r3, r2
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022dc:	4935      	ldr	r1, [pc, #212]	; (80023b4 <HAL_GPIO_Init+0x304>)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_GPIO_Init+0x324>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800230e:	4a31      	ldr	r2, [pc, #196]	; (80023d4 <HAL_GPIO_Init+0x324>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HAL_GPIO_Init+0x324>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002338:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <HAL_GPIO_Init+0x324>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800233e:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <HAL_GPIO_Init+0x324>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002362:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <HAL_GPIO_Init+0x324>)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <HAL_GPIO_Init+0x324>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_GPIO_Init+0x324>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3301      	adds	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b0f      	cmp	r3, #15
 800239c:	f67f ae96 	bls.w	80020cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40013800 	.word	0x40013800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40020400 	.word	0x40020400
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020c00 	.word	0x40020c00
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40021400 	.word	0x40021400
 80023d0:	40021800 	.word	0x40021800
 80023d4:	40013c00 	.word	0x40013c00

080023d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800243a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243c:	b08f      	sub	sp, #60	; 0x3c
 800243e:	af0a      	add	r7, sp, #40	; 0x28
 8002440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e116      	b.n	800267a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f009 fbb0 	bl	800bbcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2203      	movs	r2, #3
 8002470:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f003 ff47 	bl	800631e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	687e      	ldr	r6, [r7, #4]
 8002498:	466d      	mov	r5, sp
 800249a:	f106 0410 	add.w	r4, r6, #16
 800249e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80024ae:	1d33      	adds	r3, r6, #4
 80024b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b2:	6838      	ldr	r0, [r7, #0]
 80024b4:	f003 fe1e 	bl	80060f4 <USB_CoreInit>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2202      	movs	r2, #2
 80024c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0d7      	b.n	800267a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 ff35 	bl	8006340 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e04a      	b.n	8002572 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	333d      	adds	r3, #61	; 0x3d
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	333c      	adds	r3, #60	; 0x3c
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	b298      	uxth	r0, r3
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3342      	adds	r3, #66	; 0x42
 8002518:	4602      	mov	r2, r0
 800251a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	333f      	adds	r3, #63	; 0x3f
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3344      	adds	r3, #68	; 0x44
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3348      	adds	r3, #72	; 0x48
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3350      	adds	r3, #80	; 0x50
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	3301      	adds	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d3af      	bcc.n	80024dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e044      	b.n	800260c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	3301      	adds	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d3b5      	bcc.n	8002582 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	687e      	ldr	r6, [r7, #4]
 800261e:	466d      	mov	r5, sp
 8002620:	f106 0410 	add.w	r4, r6, #16
 8002624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002630:	e885 0003 	stmia.w	r5, {r0, r1}
 8002634:	1d33      	adds	r3, r6, #4
 8002636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002638:	6838      	ldr	r0, [r7, #0]
 800263a:	f003 feab 	bl	8006394 <USB_DevInit>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e014      	b.n	800267a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	2b01      	cmp	r3, #1
 8002666:	d102      	bne.n	800266e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f001 f879 	bl	8003760 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f004 fee6 	bl	8007444 <USB_DevDisconnect>

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002682 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_PCD_Start+0x1c>
 800269a:	2302      	movs	r3, #2
 800269c:	e020      	b.n	80026e0 <HAL_PCD_Start+0x5e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d109      	bne.n	80026c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d005      	beq.n	80026c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fe18 	bl	80062fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f004 fe96 	bl	8007402 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b08d      	sub	sp, #52	; 0x34
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f004 ff54 	bl	80075ac <USB_GetMode>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 83ca 	bne.w	8002ea0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f004 feb8 	bl	8007486 <USB_ReadInterrupts>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 83c0 	beq.w	8002e9e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f004 feaf 	bl	8007486 <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b02      	cmp	r3, #2
 8002730:	d107      	bne.n	8002742 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f002 0202 	and.w	r2, r2, #2
 8002740:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f004 fe9d 	bl	8007486 <USB_ReadInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b10      	cmp	r3, #16
 8002754:	d161      	bne.n	800281a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0210 	bic.w	r2, r2, #16
 8002764:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 020f 	and.w	r2, r3, #15
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	3304      	adds	r3, #4
 8002784:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	0c5b      	lsrs	r3, r3, #17
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	2b02      	cmp	r3, #2
 8002790:	d124      	bne.n	80027dc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d035      	beq.n	800280a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	6a38      	ldr	r0, [r7, #32]
 80027b2:	f004 fd03 	bl	80071bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027c2:	441a      	add	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d4:	441a      	add	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	619a      	str	r2, [r3, #24]
 80027da:	e016      	b.n	800280a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	0c5b      	lsrs	r3, r3, #17
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	2b06      	cmp	r3, #6
 80027e6:	d110      	bne.n	800280a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027ee:	2208      	movs	r2, #8
 80027f0:	4619      	mov	r1, r3
 80027f2:	6a38      	ldr	r0, [r7, #32]
 80027f4:	f004 fce2 	bl	80071bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002804:	441a      	add	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0210 	orr.w	r2, r2, #16
 8002818:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f004 fe31 	bl	8007486 <USB_ReadInterrupts>
 8002824:	4603      	mov	r3, r0
 8002826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800282e:	d16e      	bne.n	800290e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f004 fe37 	bl	80074ac <USB_ReadDevAllOutEpInterrupt>
 800283e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002840:	e062      	b.n	8002908 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d057      	beq.n	80028fc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f004 fe5c 	bl	8007514 <USB_ReadDevOutEPInterrupt>
 800285c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00c      	beq.n	8002882 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002874:	461a      	mov	r2, r3
 8002876:	2301      	movs	r3, #1
 8002878:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800287a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fdc5 	bl	800340c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00c      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002898:	461a      	mov	r2, r3
 800289a:	2308      	movs	r3, #8
 800289c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800289e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 febf 	bl	8003624 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028bc:	461a      	mov	r2, r3
 80028be:	2310      	movs	r3, #16
 80028c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d8:	461a      	mov	r2, r3
 80028da:	2320      	movs	r3, #32
 80028dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f4:	461a      	mov	r2, r3
 80028f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	3301      	adds	r3, #1
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290a:	2b00      	cmp	r3, #0
 800290c:	d199      	bne.n	8002842 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f004 fdb7 	bl	8007486 <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002922:	f040 80c0 	bne.w	8002aa6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fdd8 	bl	80074e0 <USB_ReadDevAllInEpInterrupt>
 8002930:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002936:	e0b2      	b.n	8002a9e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 80a7 	beq.w	8002a92 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	4611      	mov	r1, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f004 fdfe 	bl	8007550 <USB_ReadDevInEPInterrupt>
 8002954:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d057      	beq.n	8002a10 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	2201      	movs	r2, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43db      	mvns	r3, r3
 800297a:	69f9      	ldr	r1, [r7, #28]
 800297c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002980:	4013      	ands	r3, r2
 8002982:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002990:	461a      	mov	r2, r3
 8002992:	2301      	movs	r3, #1
 8002994:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d132      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	3348      	adds	r3, #72	; 0x48
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4403      	add	r3, r0
 80029be:	3344      	adds	r3, #68	; 0x44
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4419      	add	r1, r3
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4403      	add	r3, r0
 80029d2:	3348      	adds	r3, #72	; 0x48
 80029d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d113      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x31c>
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3350      	adds	r3, #80	; 0x50
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029fc:	461a      	mov	r2, r3
 80029fe:	2101      	movs	r1, #1
 8002a00:	f004 fe06 	bl	8007610 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f009 f95f 	bl	800bcce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a26:	461a      	mov	r2, r3
 8002a28:	2308      	movs	r3, #8
 8002a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a42:	461a      	mov	r2, r3
 8002a44:	2310      	movs	r3, #16
 8002a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2340      	movs	r3, #64	; 0x40
 8002a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fc30 	bl	80032f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	3301      	adds	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f af49 	bne.w	8002938 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f004 fceb 	bl	8007486 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aba:	d122      	bne.n	8002b02 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d108      	bne.n	8002aec <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f009 fb2f 	bl	800c148 <HAL_PCDEx_LPM_Callback>
 8002aea:	e002      	b.n	8002af2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f009 f965 	bl	800bdbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 fcbd 	bl	8007486 <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b16:	d112      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d102      	bne.n	8002b2e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f009 f921 	bl	800bd70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b3c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 fc9f 	bl	8007486 <USB_ReadInterrupts>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b52:	d121      	bne.n	8002b98 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002b62:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d111      	bne.n	8002b92 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b88:	2101      	movs	r1, #1
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f009 fadc 	bl	800c148 <HAL_PCDEx_LPM_Callback>
 8002b90:	e002      	b.n	8002b98 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f009 f8ec 	bl	800bd70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f004 fc72 	bl	8007486 <USB_ReadInterrupts>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bac:	f040 80c7 	bne.w	8002d3e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2110      	movs	r1, #16
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 fd40 	bl	8006650 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd4:	e056      	b.n	8002c84 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be2:	461a      	mov	r2, r3
 8002be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002be8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfa:	0151      	lsls	r1, r2, #5
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	440a      	add	r2, r1
 8002c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c08:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c1a:	0151      	lsls	r1, r2, #5
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	440a      	add	r2, r1
 8002c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c36:	461a      	mov	r2, r3
 8002c38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4e:	0151      	lsls	r1, r2, #5
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	440a      	add	r2, r1
 8002c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6e:	0151      	lsls	r1, r2, #5
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	440a      	add	r2, r1
 8002c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	3301      	adds	r3, #1
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d3a3      	bcc.n	8002bd6 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ca0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cba:	f043 030b 	orr.w	r3, r3, #11
 8002cbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd0:	f043 030b 	orr.w	r3, r3, #11
 8002cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd6:	e015      	b.n	8002d04 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cfe:	f043 030b 	orr.w	r3, r3, #11
 8002d02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f004 fc71 	bl	8007610 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f004 fb9f 	bl	8007486 <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	d124      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f004 fc35 	bl	80075c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f003 fcd5 	bl	8006712 <USB_GetDevSpeed>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681c      	ldr	r4, [r3, #0]
 8002d74:	f000 fdfe 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 8002d78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	4620      	mov	r0, r4
 8002d84:	f003 fa18 	bl	80061b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f008 ffc8 	bl	800bd1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 fb6f 	bl	8007486 <USB_ReadInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d10a      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f008 ffa5 	bl	800bd02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f002 0208 	and.w	r2, r2, #8
 8002dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f004 fb5a 	bl	8007486 <USB_ReadInterrupts>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ddc:	d10f      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f009 f807 	bl	800bdfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 fb3f 	bl	8007486 <USB_ReadInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e12:	d10f      	bne.n	8002e34 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f008 ffda 	bl	800bdd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 fb24 	bl	8007486 <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e48:	d10a      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f008 ffe8 	bl	800be20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 fb0e 	bl	8007486 <USB_ReadInterrupts>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d115      	bne.n	8002ea0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f008 ffd8 	bl	800be3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	e000      	b.n	8002ea0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002e9e:	bf00      	nop
    }
  }
}
 8002ea0:	3734      	adds	r7, #52	; 0x34
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}

08002ea6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_PCD_SetAddress+0x1a>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e013      	b.n	8002ee8 <HAL_PCD_SetAddress+0x42>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f004 fa6c 	bl	80073b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	70fb      	strb	r3, [r7, #3]
 8002f02:	460b      	mov	r3, r1
 8002f04:	803b      	strh	r3, [r7, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da0f      	bge.n	8002f36 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3338      	adds	r3, #56	; 0x38
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	705a      	strb	r2, [r3, #1]
 8002f34:	e00f      	b.n	8002f56 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	f003 020f 	and.w	r2, r3, #15
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f62:	883a      	ldrh	r2, [r7, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	78ba      	ldrb	r2, [r7, #2]
 8002f6c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f80:	78bb      	ldrb	r3, [r7, #2]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d102      	bne.n	8002f8c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_PCD_EP_Open+0xaa>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e00e      	b.n	8002fb8 <HAL_PCD_EP_Open+0xc8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 fbd7 	bl	800675c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da0f      	bge.n	8002ff4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 020f 	and.w	r2, r3, #15
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	3338      	adds	r3, #56	; 0x38
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3304      	adds	r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	705a      	strb	r2, [r3, #1]
 8002ff2:	e00f      	b.n	8003014 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 020f 	and.w	r2, r3, #15
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	3304      	adds	r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	b2da      	uxtb	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_PCD_EP_Close+0x6e>
 800302a:	2302      	movs	r3, #2
 800302c:	e00e      	b.n	800304c <HAL_PCD_EP_Close+0x8c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68f9      	ldr	r1, [r7, #12]
 800303c:	4618      	mov	r0, r3
 800303e:	f003 fc15 	bl	800686c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	460b      	mov	r3, r1
 8003062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003064:	7afb      	ldrb	r3, [r7, #11]
 8003066:	f003 020f 	and.w	r2, r3, #15
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	3304      	adds	r3, #4
 800307c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2200      	movs	r2, #0
 8003094:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	b2da      	uxtb	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030b0:	7afb      	ldrb	r3, [r7, #11]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	6979      	ldr	r1, [r7, #20]
 80030c8:	f003 fef0 	bl	8006eac <USB_EP0StartXfer>
 80030cc:	e008      	b.n	80030e0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	f003 fca2 	bl	8006a24 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	460b      	mov	r3, r1
 80030f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	3338      	adds	r3, #56	; 0x38
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	3304      	adds	r3, #4
 8003110:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2201      	movs	r2, #1
 8003128:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800312a:	7afb      	ldrb	r3, [r7, #11]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	b2da      	uxtb	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d102      	bne.n	8003144 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003144:	7afb      	ldrb	r3, [r7, #11]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	6979      	ldr	r1, [r7, #20]
 800315c:	f003 fea6 	bl	8006eac <USB_EP0StartXfer>
 8003160:	e008      	b.n	8003174 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	6979      	ldr	r1, [r7, #20]
 8003170:	f003 fc58 	bl	8006a24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 020f 	and.w	r2, r3, #15
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d901      	bls.n	800319c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e050      	b.n	800323e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800319c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	da0f      	bge.n	80031c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 020f 	and.w	r2, r3, #15
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	3338      	adds	r3, #56	; 0x38
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4413      	add	r3, r2
 80031b8:	3304      	adds	r3, #4
 80031ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	705a      	strb	r2, [r3, #1]
 80031c2:	e00d      	b.n	80031e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	3304      	adds	r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_PCD_EP_SetStall+0x82>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e01e      	b.n	800323e <HAL_PCD_EP_SetStall+0xc0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68f9      	ldr	r1, [r7, #12]
 800320e:	4618      	mov	r0, r3
 8003210:	f003 fffd 	bl	800720e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	b2d9      	uxtb	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800322e:	461a      	mov	r2, r3
 8003230:	f004 f9ee 	bl	8007610 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d901      	bls.n	8003264 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e042      	b.n	80032ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003268:	2b00      	cmp	r3, #0
 800326a:	da0f      	bge.n	800328c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 020f 	and.w	r2, r3, #15
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	3338      	adds	r3, #56	; 0x38
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	705a      	strb	r2, [r3, #1]
 800328a:	e00f      	b.n	80032ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 020f 	and.w	r2, r3, #15
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_PCD_EP_ClrStall+0x86>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e00e      	b.n	80032ea <HAL_PCD_EP_ClrStall+0xa4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68f9      	ldr	r1, [r7, #12]
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 f805 	bl	80072ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b08a      	sub	sp, #40	; 0x28
 80032f6:	af02      	add	r7, sp, #8
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	3338      	adds	r3, #56	; 0x38
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	3304      	adds	r3, #4
 8003318:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	429a      	cmp	r2, r3
 8003324:	d901      	bls.n	800332a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06c      	b.n	8003404 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	429a      	cmp	r2, r3
 800333e:	d902      	bls.n	8003346 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3303      	adds	r3, #3
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800334e:	e02b      	b.n	80033a8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	429a      	cmp	r2, r3
 8003364:	d902      	bls.n	800336c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	3303      	adds	r3, #3
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68d9      	ldr	r1, [r3, #12]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003384:	b2db      	uxtb	r3, r3
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	4603      	mov	r3, r0
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f003 fee1 	bl	8007152 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	441a      	add	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	699a      	ldr	r2, [r3, #24]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	441a      	add	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d809      	bhi.n	80033d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d203      	bcs.n	80033d2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1be      	bne.n	8003350 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d811      	bhi.n	8003402 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	2201      	movs	r2, #1
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	6939      	ldr	r1, [r7, #16]
 80033fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033fe:	4013      	ands	r3, r2
 8003400:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	333c      	adds	r3, #60	; 0x3c
 8003424:	3304      	adds	r3, #4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b01      	cmp	r3, #1
 8003440:	f040 80a0 	bne.w	8003584 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d015      	beq.n	800347a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a72      	ldr	r2, [pc, #456]	; (800361c <PCD_EP_OutXfrComplete_int+0x210>)
 8003452:	4293      	cmp	r3, r2
 8003454:	f240 80dd 	bls.w	8003612 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80d7 	beq.w	8003612 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003470:	461a      	mov	r2, r3
 8003472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003476:	6093      	str	r3, [r2, #8]
 8003478:	e0cb      	b.n	8003612 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003490:	461a      	mov	r2, r3
 8003492:	2320      	movs	r3, #32
 8003494:	6093      	str	r3, [r2, #8]
 8003496:	e0bc      	b.n	8003612 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 80b7 	bne.w	8003612 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a5d      	ldr	r2, [pc, #372]	; (800361c <PCD_EP_OutXfrComplete_int+0x210>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d90f      	bls.n	80034cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c2:	461a      	mov	r2, r3
 80034c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c8:	6093      	str	r3, [r2, #8]
 80034ca:	e0a2      	b.n	8003612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	0159      	lsls	r1, r3, #5
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80034f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4403      	add	r3, r0
 8003502:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003506:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4403      	add	r3, r0
 800352a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4419      	add	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4403      	add	r3, r0
 8003540:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003544:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d114      	bne.n	8003576 <PCD_EP_OutXfrComplete_int+0x16a>
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d108      	bne.n	8003576 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800356e:	461a      	mov	r2, r3
 8003570:	2101      	movs	r1, #1
 8003572:	f004 f84d 	bl	8007610 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	4619      	mov	r1, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f008 fb8b 	bl	800bc98 <HAL_PCD_DataOutStageCallback>
 8003582:	e046      	b.n	8003612 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a26      	ldr	r2, [pc, #152]	; (8003620 <PCD_EP_OutXfrComplete_int+0x214>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d124      	bne.n	80035d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a2:	461a      	mov	r2, r3
 80035a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a8:	6093      	str	r3, [r2, #8]
 80035aa:	e032      	b.n	8003612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c2:	461a      	mov	r2, r3
 80035c4:	2320      	movs	r3, #32
 80035c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f008 fb62 	bl	800bc98 <HAL_PCD_DataOutStageCallback>
 80035d4:	e01d      	b.n	8003612 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d114      	bne.n	8003606 <PCD_EP_OutXfrComplete_int+0x1fa>
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d108      	bne.n	8003606 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035fe:	461a      	mov	r2, r3
 8003600:	2100      	movs	r1, #0
 8003602:	f004 f805 	bl	8007610 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f008 fb43 	bl	800bc98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	4f54300a 	.word	0x4f54300a
 8003620:	4f54310a 	.word	0x4f54310a

08003624 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	333c      	adds	r3, #60	; 0x3c
 800363c:	3304      	adds	r3, #4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a15      	ldr	r2, [pc, #84]	; (80036ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d90e      	bls.n	8003678 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003670:	461a      	mov	r2, r3
 8003672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003676:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f008 fafb 	bl	800bc74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <PCD_EP_OutSetupPacket_int+0x88>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d90c      	bls.n	80036a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d108      	bne.n	80036a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003698:	461a      	mov	r2, r3
 800369a:	2101      	movs	r1, #1
 800369c:	f003 ffb8 	bl	8007610 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	4f54300a 	.word	0x4f54300a

080036b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
 80036bc:	4613      	mov	r3, r2
 80036be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d107      	bne.n	80036de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036ce:	883b      	ldrh	r3, [r7, #0]
 80036d0:	0419      	lsls	r1, r3, #16
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	430a      	orrs	r2, r1
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
 80036dc:	e028      	b.n	8003730 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	4413      	add	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	e00d      	b.n	800370e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	3340      	adds	r3, #64	; 0x40
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	4413      	add	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	3301      	adds	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	3b01      	subs	r3, #1
 8003714:	429a      	cmp	r2, r3
 8003716:	d3ec      	bcc.n	80036f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003718:	883b      	ldrh	r3, [r7, #0]
 800371a:	0418      	lsls	r0, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6819      	ldr	r1, [r3, #0]
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	3b01      	subs	r3, #1
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	4302      	orrs	r2, r0
 8003728:	3340      	adds	r3, #64	; 0x40
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003792:	f043 0303 	orr.w	r3, r3, #3
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0cc      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037bc:	4b68      	ldr	r3, [pc, #416]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d90c      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b65      	ldr	r3, [pc, #404]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b63      	ldr	r3, [pc, #396]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0b8      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037fc:	4b59      	ldr	r3, [pc, #356]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a58      	ldr	r2, [pc, #352]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003814:	4b53      	ldr	r3, [pc, #332]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800381e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003820:	4b50      	ldr	r3, [pc, #320]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	494d      	ldr	r1, [pc, #308]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d044      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b47      	ldr	r3, [pc, #284]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d119      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e07f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d003      	beq.n	8003866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003862:	2b03      	cmp	r3, #3
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003866:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e06f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003876:	4b3b      	ldr	r3, [pc, #236]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e067      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003886:	4b37      	ldr	r3, [pc, #220]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4934      	ldr	r1, [pc, #208]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003898:	f7fe faf8 	bl	8001e8c <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a0:	f7fe faf4 	bl	8001e8c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e04f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 020c 	and.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1eb      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c8:	4b25      	ldr	r3, [pc, #148]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d20c      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b22      	ldr	r3, [pc, #136]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e032      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4916      	ldr	r1, [pc, #88]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	490e      	ldr	r1, [pc, #56]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800392e:	f000 fbb1 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 8003932:	4602      	mov	r2, r0
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	490a      	ldr	r1, [pc, #40]	; (8003968 <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	5ccb      	ldrb	r3, [r1, r3]
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	4a09      	ldr	r2, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe f976 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40023c00 	.word	0x40023c00
 8003964:	40023800 	.word	0x40023800
 8003968:	0801282c 	.word	0x0801282c
 800396c:	20000000 	.word	0x20000000
 8003970:	20000004 	.word	0x20000004

08003974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_RCC_GetHCLKFreq+0x14>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000000 	.word	0x20000000

0800398c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003990:	f7ff fff0 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	0a9b      	lsrs	r3, r3, #10
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4903      	ldr	r1, [pc, #12]	; (80039b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	0801283c 	.word	0x0801283c

080039b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039b8:	f7ff ffdc 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0b5b      	lsrs	r3, r3, #13
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4903      	ldr	r1, [pc, #12]	; (80039d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	0801283c 	.word	0x0801283c

080039dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	220f      	movs	r2, #15
 80039ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_GetClockConfig+0x5c>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0203 	and.w	r2, r3, #3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <HAL_RCC_GetClockConfig+0x5c>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <HAL_RCC_GetClockConfig+0x5c>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_GetClockConfig+0x5c>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	08db      	lsrs	r3, r3, #3
 8003a16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a1e:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <HAL_RCC_GetClockConfig+0x60>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 020f 	and.w	r2, r3, #15
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	601a      	str	r2, [r3, #0]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40023c00 	.word	0x40023c00

08003a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d010      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003a78:	4b6f      	ldr	r3, [pc, #444]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a7e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	496c      	ldr	r1, [pc, #432]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003a96:	2301      	movs	r3, #1
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d010      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003aa6:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aac:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	4960      	ldr	r1, [pc, #384]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d017      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad4:	4b58      	ldr	r3, [pc, #352]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ada:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4955      	ldr	r1, [pc, #340]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af2:	d101      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003af4:	2301      	movs	r3, #1
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003b00:	2301      	movs	r3, #1
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d017      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b10:	4b49      	ldr	r3, [pc, #292]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	4946      	ldr	r1, [pc, #280]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003b30:	2301      	movs	r3, #1
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 808a 	beq.w	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	4a38      	ldr	r2, [pc, #224]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5e:	4b36      	ldr	r3, [pc, #216]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b6a:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a33      	ldr	r2, [pc, #204]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b76:	f7fe f989 	bl	8001e8c <HAL_GetTick>
 8003b7a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fe f985 	bl	8001e8c <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e278      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b90:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b9c:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d02f      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb4:	6a3a      	ldr	r2, [r7, #32]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d028      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bba:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bc4:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003bd0:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d114      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003be2:	f7fe f953 	bl	8001e8c <HAL_GetTick>
 8003be6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fe f94f 	bl	8001e8c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e240      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c00:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ee      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c18:	d114      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2e:	4902      	ldr	r1, [pc, #8]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	608b      	str	r3, [r1, #8]
 8003c34:	e00c      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	42470e40 	.word	0x42470e40
 8003c44:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4a49      	ldr	r2, [pc, #292]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c4e:	6093      	str	r3, [r2, #8]
 8003c50:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5c:	4944      	ldr	r1, [pc, #272]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003c74:	4b3f      	ldr	r3, [pc, #252]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003c76:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003c84:	4b3a      	ldr	r3, [pc, #232]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	4937      	ldr	r1, [pc, #220]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ca6:	4b32      	ldr	r3, [pc, #200]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cac:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb4:	492e      	ldr	r1, [pc, #184]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d011      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cc8:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cce:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	4926      	ldr	r1, [pc, #152]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce6:	d101      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	491a      	ldr	r1, [pc, #104]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d011      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d20:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	4911      	ldr	r1, [pc, #68]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d38:	d101      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d005      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d4c:	f040 80ff 	bne.w	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d56:	f7fe f899 	bl	8001e8c <HAL_GetTick>
 8003d5a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d5c:	e00e      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d5e:	f7fe f895 	bl	8001e8c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d907      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e188      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d70:	40023800 	.word	0x40023800
 8003d74:	424711e0 	.word	0x424711e0
 8003d78:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d7c:	4b7e      	ldr	r3, [pc, #504]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1ea      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d009      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d028      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d124      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003db0:	4b71      	ldr	r3, [pc, #452]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dc2:	4b6d      	ldr	r3, [pc, #436]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc8:	0e1b      	lsrs	r3, r3, #24
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	3b01      	subs	r3, #1
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	431a      	orrs	r2, r3
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	071b      	lsls	r3, r3, #28
 8003df2:	4961      	ldr	r1, [pc, #388]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d035      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e24:	d130      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e26:	4b54      	ldr	r3, [pc, #336]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	3301      	adds	r3, #1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e38:	4b4f      	ldr	r3, [pc, #316]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e3e:	0f1b      	lsrs	r3, r3, #28
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	019b      	lsls	r3, r3, #6
 8003e50:	431a      	orrs	r2, r3
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	3b01      	subs	r3, #1
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	061b      	lsls	r3, r3, #24
 8003e62:	431a      	orrs	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	071b      	lsls	r3, r3, #28
 8003e68:	4943      	ldr	r1, [pc, #268]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e70:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e76:	f023 021f 	bic.w	r2, r3, #31
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	493d      	ldr	r1, [pc, #244]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d029      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9c:	d124      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e9e:	4b36      	ldr	r3, [pc, #216]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eb0:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb6:	0f1b      	lsrs	r3, r3, #28
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	019b      	lsls	r3, r3, #6
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	061b      	lsls	r3, r3, #24
 8003eda:	431a      	orrs	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	071b      	lsls	r3, r3, #28
 8003ee0:	4925      	ldr	r1, [pc, #148]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d016      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	019b      	lsls	r3, r3, #6
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	3b01      	subs	r3, #1
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	071b      	lsls	r3, r3, #28
 8003f1a:	4917      	ldr	r1, [pc, #92]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f22:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f28:	f7fd ffb0 	bl	8001e8c <HAL_GetTick>
 8003f2c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f30:	f7fd ffac 	bl	8001e8c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e09f      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f42:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	f040 8095 	bne.w	8004080 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f5c:	f7fd ff96 	bl	8001e8c <HAL_GetTick>
 8003f60:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f62:	e00f      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f64:	f7fd ff92 	bl	8001e8c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d908      	bls.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e085      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	42470068 	.word	0x42470068
 8003f80:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f84:	4b41      	ldr	r3, [pc, #260]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f90:	d0e8      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d02b      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d127      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003fba:	4b34      	ldr	r3, [pc, #208]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	019b      	lsls	r3, r3, #6
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	061b      	lsls	r3, r3, #24
 8003fe8:	4928      	ldr	r1, [pc, #160]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ff0:	4b26      	ldr	r3, [pc, #152]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	3b01      	subs	r3, #1
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	4922      	ldr	r1, [pc, #136]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01d      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401e:	d118      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004020:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	0e1b      	lsrs	r3, r3, #24
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	019b      	lsls	r3, r3, #6
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	3b01      	subs	r3, #1
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	431a      	orrs	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	4910      	ldr	r1, [pc, #64]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004058:	f7fd ff18 	bl	8001e8c <HAL_GetTick>
 800405c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004060:	f7fd ff14 	bl	8001e8c <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e007      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800407a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800407e:	d1ef      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3730      	adds	r7, #48	; 0x30
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023800 	.word	0x40023800
 8004090:	42470070 	.word	0x42470070

08004094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004098:	b088      	sub	sp, #32
 800409a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b0:	4bce      	ldr	r3, [pc, #824]	; (80043ec <HAL_RCC_GetSysClockFreq+0x358>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	f200 818d 	bhi.w	80043d8 <HAL_RCC_GetSysClockFreq+0x344>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <HAL_RCC_GetSysClockFreq+0x30>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	080043d9 	.word	0x080043d9
 80040cc:	080043d9 	.word	0x080043d9
 80040d0:	080043d9 	.word	0x080043d9
 80040d4:	080040ff 	.word	0x080040ff
 80040d8:	080043d9 	.word	0x080043d9
 80040dc:	080043d9 	.word	0x080043d9
 80040e0:	080043d9 	.word	0x080043d9
 80040e4:	08004105 	.word	0x08004105
 80040e8:	080043d9 	.word	0x080043d9
 80040ec:	080043d9 	.word	0x080043d9
 80040f0:	080043d9 	.word	0x080043d9
 80040f4:	08004279 	.word	0x08004279
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f8:	4bbd      	ldr	r3, [pc, #756]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80040fa:	61bb      	str	r3, [r7, #24]
       break;
 80040fc:	e16f      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040fe:	4bbd      	ldr	r3, [pc, #756]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x360>)
 8004100:	61bb      	str	r3, [r7, #24]
      break;
 8004102:	e16c      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004104:	4bb9      	ldr	r3, [pc, #740]	; (80043ec <HAL_RCC_GetSysClockFreq+0x358>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800410c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800410e:	4bb7      	ldr	r3, [pc, #732]	; (80043ec <HAL_RCC_GetSysClockFreq+0x358>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d053      	beq.n	80041c2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411a:	4bb4      	ldr	r3, [pc, #720]	; (80043ec <HAL_RCC_GetSysClockFreq+0x358>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	099b      	lsrs	r3, r3, #6
 8004120:	461a      	mov	r2, r3
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	f240 10ff 	movw	r0, #511	; 0x1ff
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	ea02 0400 	and.w	r4, r2, r0
 8004132:	603c      	str	r4, [r7, #0]
 8004134:	400b      	ands	r3, r1
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	e9d7 4500 	ldrd	r4, r5, [r7]
 800413c:	4620      	mov	r0, r4
 800413e:	4629      	mov	r1, r5
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	014b      	lsls	r3, r1, #5
 800414a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800414e:	0142      	lsls	r2, r0, #5
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	4623      	mov	r3, r4
 8004156:	1ac0      	subs	r0, r0, r3
 8004158:	462b      	mov	r3, r5
 800415a:	eb61 0103 	sbc.w	r1, r1, r3
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	018b      	lsls	r3, r1, #6
 8004168:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800416c:	0182      	lsls	r2, r0, #6
 800416e:	1a12      	subs	r2, r2, r0
 8004170:	eb63 0301 	sbc.w	r3, r3, r1
 8004174:	f04f 0000 	mov.w	r0, #0
 8004178:	f04f 0100 	mov.w	r1, #0
 800417c:	00d9      	lsls	r1, r3, #3
 800417e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004182:	00d0      	lsls	r0, r2, #3
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4621      	mov	r1, r4
 800418a:	1852      	adds	r2, r2, r1
 800418c:	4629      	mov	r1, r5
 800418e:	eb43 0101 	adc.w	r1, r3, r1
 8004192:	460b      	mov	r3, r1
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f04f 0100 	mov.w	r1, #0
 800419c:	0259      	lsls	r1, r3, #9
 800419e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041a2:	0250      	lsls	r0, r2, #9
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	f7fc f834 	bl	8000220 <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4613      	mov	r3, r2
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	e04c      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c2:	4b8a      	ldr	r3, [pc, #552]	; (80043ec <HAL_RCC_GetSysClockFreq+0x358>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	461a      	mov	r2, r3
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041d2:	f04f 0100 	mov.w	r1, #0
 80041d6:	ea02 0a00 	and.w	sl, r2, r0
 80041da:	ea03 0b01 	and.w	fp, r3, r1
 80041de:	4650      	mov	r0, sl
 80041e0:	4659      	mov	r1, fp
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	014b      	lsls	r3, r1, #5
 80041ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041f0:	0142      	lsls	r2, r0, #5
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	ebb0 000a 	subs.w	r0, r0, sl
 80041fa:	eb61 010b 	sbc.w	r1, r1, fp
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	018b      	lsls	r3, r1, #6
 8004208:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800420c:	0182      	lsls	r2, r0, #6
 800420e:	1a12      	subs	r2, r2, r0
 8004210:	eb63 0301 	sbc.w	r3, r3, r1
 8004214:	f04f 0000 	mov.w	r0, #0
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	00d9      	lsls	r1, r3, #3
 800421e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004222:	00d0      	lsls	r0, r2, #3
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	eb12 020a 	adds.w	r2, r2, sl
 800422c:	eb43 030b 	adc.w	r3, r3, fp
 8004230:	f04f 0000 	mov.w	r0, #0
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	0299      	lsls	r1, r3, #10
 800423a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800423e:	0290      	lsls	r0, r2, #10
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	461a      	mov	r2, r3
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	f7fb ffe6 	bl	8000220 <__aeabi_uldivmod>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4613      	mov	r3, r2
 800425a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800425c:	4b63      	ldr	r3, [pc, #396]	; (80043ec <HAL_RCC_GetSysClockFreq+0x358>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	3301      	adds	r3, #1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	61bb      	str	r3, [r7, #24]
      break;
 8004276:	e0b2      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004278:	4b5c      	ldr	r3, [pc, #368]	; (80043ec <HAL_RCC_GetSysClockFreq+0x358>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004280:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004282:	4b5a      	ldr	r3, [pc, #360]	; (80043ec <HAL_RCC_GetSysClockFreq+0x358>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04d      	beq.n	800432a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b57      	ldr	r3, [pc, #348]	; (80043ec <HAL_RCC_GetSysClockFreq+0x358>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	461a      	mov	r2, r3
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	ea02 0800 	and.w	r8, r2, r0
 80042a6:	ea03 0901 	and.w	r9, r3, r1
 80042aa:	4640      	mov	r0, r8
 80042ac:	4649      	mov	r1, r9
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	014b      	lsls	r3, r1, #5
 80042b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042bc:	0142      	lsls	r2, r0, #5
 80042be:	4610      	mov	r0, r2
 80042c0:	4619      	mov	r1, r3
 80042c2:	ebb0 0008 	subs.w	r0, r0, r8
 80042c6:	eb61 0109 	sbc.w	r1, r1, r9
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	018b      	lsls	r3, r1, #6
 80042d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042d8:	0182      	lsls	r2, r0, #6
 80042da:	1a12      	subs	r2, r2, r0
 80042dc:	eb63 0301 	sbc.w	r3, r3, r1
 80042e0:	f04f 0000 	mov.w	r0, #0
 80042e4:	f04f 0100 	mov.w	r1, #0
 80042e8:	00d9      	lsls	r1, r3, #3
 80042ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042ee:	00d0      	lsls	r0, r2, #3
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	eb12 0208 	adds.w	r2, r2, r8
 80042f8:	eb43 0309 	adc.w	r3, r3, r9
 80042fc:	f04f 0000 	mov.w	r0, #0
 8004300:	f04f 0100 	mov.w	r1, #0
 8004304:	0259      	lsls	r1, r3, #9
 8004306:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800430a:	0250      	lsls	r0, r2, #9
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	461a      	mov	r2, r3
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	f7fb ff80 	bl	8000220 <__aeabi_uldivmod>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4613      	mov	r3, r2
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	e04a      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432a:	4b30      	ldr	r3, [pc, #192]	; (80043ec <HAL_RCC_GetSysClockFreq+0x358>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	099b      	lsrs	r3, r3, #6
 8004330:	461a      	mov	r2, r3
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	f240 10ff 	movw	r0, #511	; 0x1ff
 800433a:	f04f 0100 	mov.w	r1, #0
 800433e:	ea02 0400 	and.w	r4, r2, r0
 8004342:	ea03 0501 	and.w	r5, r3, r1
 8004346:	4620      	mov	r0, r4
 8004348:	4629      	mov	r1, r5
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	014b      	lsls	r3, r1, #5
 8004354:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004358:	0142      	lsls	r2, r0, #5
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	1b00      	subs	r0, r0, r4
 8004360:	eb61 0105 	sbc.w	r1, r1, r5
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	018b      	lsls	r3, r1, #6
 800436e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004372:	0182      	lsls	r2, r0, #6
 8004374:	1a12      	subs	r2, r2, r0
 8004376:	eb63 0301 	sbc.w	r3, r3, r1
 800437a:	f04f 0000 	mov.w	r0, #0
 800437e:	f04f 0100 	mov.w	r1, #0
 8004382:	00d9      	lsls	r1, r3, #3
 8004384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004388:	00d0      	lsls	r0, r2, #3
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	1912      	adds	r2, r2, r4
 8004390:	eb45 0303 	adc.w	r3, r5, r3
 8004394:	f04f 0000 	mov.w	r0, #0
 8004398:	f04f 0100 	mov.w	r1, #0
 800439c:	0299      	lsls	r1, r3, #10
 800439e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043a2:	0290      	lsls	r0, r2, #10
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	f7fb ff34 	bl	8000220 <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4613      	mov	r3, r2
 80043be:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_RCC_GetSysClockFreq+0x358>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	0f1b      	lsrs	r3, r3, #28
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	61bb      	str	r3, [r7, #24]
      break;
 80043d6:	e002      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80043da:	61bb      	str	r3, [r7, #24]
      break;
 80043dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043de:	69bb      	ldr	r3, [r7, #24]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ea:	bf00      	nop
 80043ec:	40023800 	.word	0x40023800
 80043f0:	00f42400 	.word	0x00f42400
 80043f4:	007a1200 	.word	0x007a1200

080043f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e28d      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8083 	beq.w	800451e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004418:	4b94      	ldr	r3, [pc, #592]	; (800466c <HAL_RCC_OscConfig+0x274>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b04      	cmp	r3, #4
 8004422:	d019      	beq.n	8004458 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004424:	4b91      	ldr	r3, [pc, #580]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800442c:	2b08      	cmp	r3, #8
 800442e:	d106      	bne.n	800443e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004430:	4b8e      	ldr	r3, [pc, #568]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800443c:	d00c      	beq.n	8004458 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800443e:	4b8b      	ldr	r3, [pc, #556]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004446:	2b0c      	cmp	r3, #12
 8004448:	d112      	bne.n	8004470 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800444a:	4b88      	ldr	r3, [pc, #544]	; (800466c <HAL_RCC_OscConfig+0x274>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004456:	d10b      	bne.n	8004470 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	4b84      	ldr	r3, [pc, #528]	; (800466c <HAL_RCC_OscConfig+0x274>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d05b      	beq.n	800451c <HAL_RCC_OscConfig+0x124>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d157      	bne.n	800451c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e25a      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d106      	bne.n	8004488 <HAL_RCC_OscConfig+0x90>
 800447a:	4b7c      	ldr	r3, [pc, #496]	; (800466c <HAL_RCC_OscConfig+0x274>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a7b      	ldr	r2, [pc, #492]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e01d      	b.n	80044c4 <HAL_RCC_OscConfig+0xcc>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0xb4>
 8004492:	4b76      	ldr	r3, [pc, #472]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a75      	ldr	r2, [pc, #468]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b73      	ldr	r3, [pc, #460]	; (800466c <HAL_RCC_OscConfig+0x274>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a72      	ldr	r2, [pc, #456]	; (800466c <HAL_RCC_OscConfig+0x274>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0xcc>
 80044ac:	4b6f      	ldr	r3, [pc, #444]	; (800466c <HAL_RCC_OscConfig+0x274>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a6e      	ldr	r2, [pc, #440]	; (800466c <HAL_RCC_OscConfig+0x274>)
 80044b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b6c      	ldr	r3, [pc, #432]	; (800466c <HAL_RCC_OscConfig+0x274>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a6b      	ldr	r2, [pc, #428]	; (800466c <HAL_RCC_OscConfig+0x274>)
 80044be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fcde 	bl	8001e8c <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fd fcda 	bl	8001e8c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e21f      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e6:	4b61      	ldr	r3, [pc, #388]	; (800466c <HAL_RCC_OscConfig+0x274>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0xdc>
 80044f2:	e014      	b.n	800451e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fd fcca 	bl	8001e8c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fd fcc6 	bl	8001e8c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e20b      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450e:	4b57      	ldr	r3, [pc, #348]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x104>
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d06f      	beq.n	800460a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800452a:	4b50      	ldr	r3, [pc, #320]	; (800466c <HAL_RCC_OscConfig+0x274>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b00      	cmp	r3, #0
 8004534:	d017      	beq.n	8004566 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004536:	4b4d      	ldr	r3, [pc, #308]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800453e:	2b08      	cmp	r3, #8
 8004540:	d105      	bne.n	800454e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004542:	4b4a      	ldr	r3, [pc, #296]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b47      	ldr	r3, [pc, #284]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004556:	2b0c      	cmp	r3, #12
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455a:	4b44      	ldr	r3, [pc, #272]	; (800466c <HAL_RCC_OscConfig+0x274>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b41      	ldr	r3, [pc, #260]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x186>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1d3      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b3b      	ldr	r3, [pc, #236]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4937      	ldr	r1, [pc, #220]	; (800466c <HAL_RCC_OscConfig+0x274>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e03a      	b.n	800460a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b34      	ldr	r3, [pc, #208]	; (8004670 <HAL_RCC_OscConfig+0x278>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fd fc73 	bl	8001e8c <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fd fc6f 	bl	8001e8c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e1b4      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	4b2b      	ldr	r3, [pc, #172]	; (800466c <HAL_RCC_OscConfig+0x274>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b28      	ldr	r3, [pc, #160]	; (800466c <HAL_RCC_OscConfig+0x274>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4925      	ldr	r1, [pc, #148]	; (800466c <HAL_RCC_OscConfig+0x274>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e015      	b.n	800460a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b24      	ldr	r3, [pc, #144]	; (8004670 <HAL_RCC_OscConfig+0x278>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd fc52 	bl	8001e8c <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fd fc4e 	bl	8001e8c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e193      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b1b      	ldr	r3, [pc, #108]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d036      	beq.n	8004684 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <HAL_RCC_OscConfig+0x27c>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fd fc32 	bl	8001e8c <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462c:	f7fd fc2e 	bl	8001e8c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e173      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_OscConfig+0x274>)
 8004640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x234>
 800464a:	e01b      	b.n	8004684 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_OscConfig+0x27c>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004652:	f7fd fc1b 	bl	8001e8c <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	e00e      	b.n	8004678 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465a:	f7fd fc17 	bl	8001e8c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d907      	bls.n	8004678 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e15c      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
 800466c:	40023800 	.word	0x40023800
 8004670:	42470000 	.word	0x42470000
 8004674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	4b8a      	ldr	r3, [pc, #552]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 800467a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ea      	bne.n	800465a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8097 	beq.w	80047c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004696:	4b83      	ldr	r3, [pc, #524]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	4b7f      	ldr	r3, [pc, #508]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	4a7e      	ldr	r2, [pc, #504]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 80046ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b0:	6413      	str	r3, [r2, #64]	; 0x40
 80046b2:	4b7c      	ldr	r3, [pc, #496]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046be:	2301      	movs	r3, #1
 80046c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c2:	4b79      	ldr	r3, [pc, #484]	; (80048a8 <HAL_RCC_OscConfig+0x4b0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d118      	bne.n	8004700 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ce:	4b76      	ldr	r3, [pc, #472]	; (80048a8 <HAL_RCC_OscConfig+0x4b0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a75      	ldr	r2, [pc, #468]	; (80048a8 <HAL_RCC_OscConfig+0x4b0>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046da:	f7fd fbd7 	bl	8001e8c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e2:	f7fd fbd3 	bl	8001e8c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e118      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f4:	4b6c      	ldr	r3, [pc, #432]	; (80048a8 <HAL_RCC_OscConfig+0x4b0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <HAL_RCC_OscConfig+0x31e>
 8004708:	4b66      	ldr	r3, [pc, #408]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	4a65      	ldr	r2, [pc, #404]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	6713      	str	r3, [r2, #112]	; 0x70
 8004714:	e01c      	b.n	8004750 <HAL_RCC_OscConfig+0x358>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b05      	cmp	r3, #5
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x340>
 800471e:	4b61      	ldr	r3, [pc, #388]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	4a60      	ldr	r2, [pc, #384]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 8004724:	f043 0304 	orr.w	r3, r3, #4
 8004728:	6713      	str	r3, [r2, #112]	; 0x70
 800472a:	4b5e      	ldr	r3, [pc, #376]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472e:	4a5d      	ldr	r2, [pc, #372]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	6713      	str	r3, [r2, #112]	; 0x70
 8004736:	e00b      	b.n	8004750 <HAL_RCC_OscConfig+0x358>
 8004738:	4b5a      	ldr	r3, [pc, #360]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	4a59      	ldr	r2, [pc, #356]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	; 0x70
 8004744:	4b57      	ldr	r3, [pc, #348]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004748:	4a56      	ldr	r2, [pc, #344]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 800474a:	f023 0304 	bic.w	r3, r3, #4
 800474e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d015      	beq.n	8004784 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fd fb98 	bl	8001e8c <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475e:	e00a      	b.n	8004776 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004760:	f7fd fb94 	bl	8001e8c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	; 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e0d7      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004776:	4b4b      	ldr	r3, [pc, #300]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0ee      	beq.n	8004760 <HAL_RCC_OscConfig+0x368>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004784:	f7fd fb82 	bl	8001e8c <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478c:	f7fd fb7e 	bl	8001e8c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	; 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e0c1      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a2:	4b40      	ldr	r3, [pc, #256]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ee      	bne.n	800478c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b4:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	4a3a      	ldr	r2, [pc, #232]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 80047ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80ad 	beq.w	8004924 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ca:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d060      	beq.n	8004898 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d145      	bne.n	800486a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	4b33      	ldr	r3, [pc, #204]	; (80048ac <HAL_RCC_OscConfig+0x4b4>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fd fb52 	bl	8001e8c <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fd fb4e 	bl	8001e8c <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e093      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fe:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	019b      	lsls	r3, r3, #6
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	3b01      	subs	r3, #1
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	071b      	lsls	r3, r3, #28
 8004836:	491b      	ldr	r1, [pc, #108]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <HAL_RCC_OscConfig+0x4b4>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fd fb23 	bl	8001e8c <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800484a:	f7fd fb1f 	bl	8001e8c <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e064      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485c:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x452>
 8004868:	e05c      	b.n	8004924 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <HAL_RCC_OscConfig+0x4b4>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fd fb0c 	bl	8001e8c <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004878:	f7fd fb08 	bl	8001e8c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e04d      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_RCC_OscConfig+0x4ac>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x480>
 8004896:	e045      	b.n	8004924 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d107      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e040      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40007000 	.word	0x40007000
 80048ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048b0:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <HAL_RCC_OscConfig+0x538>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d030      	beq.n	8004920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d129      	bne.n	8004920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d122      	bne.n	8004920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048e0:	4013      	ands	r3, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d119      	bne.n	8004920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	3b01      	subs	r3, #1
 80048fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d10f      	bne.n	8004920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d107      	bne.n	8004920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40023800 	.word	0x40023800

08004934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07b      	b.n	8004a3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d108      	bne.n	8004960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004956:	d009      	beq.n	800496c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	61da      	str	r2, [r3, #28]
 800495e:	e005      	b.n	800496c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fd f8a2 	bl	8001ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f0:	ea42 0103 	orr.w	r1, r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	f003 0104 	and.w	r1, r3, #4
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0210 	and.w	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b088      	sub	sp, #32
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	603b      	str	r3, [r7, #0]
 8004a52:	4613      	mov	r3, r2
 8004a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_SPI_Transmit+0x22>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e126      	b.n	8004cb6 <HAL_SPI_Transmit+0x270>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a70:	f7fd fa0c 	bl	8001e8c <HAL_GetTick>
 8004a74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a86:	2302      	movs	r3, #2
 8004a88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a8a:	e10b      	b.n	8004ca4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_Transmit+0x52>
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a9c:	e102      	b.n	8004ca4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	88fa      	ldrh	r2, [r7, #6]
 8004ab6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae4:	d10f      	bne.n	8004b06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d007      	beq.n	8004b24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2c:	d14b      	bne.n	8004bc6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_SPI_Transmit+0xf6>
 8004b36:	8afb      	ldrh	r3, [r7, #22]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d13e      	bne.n	8004bba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	881a      	ldrh	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	1c9a      	adds	r2, r3, #2
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b60:	e02b      	b.n	8004bba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d112      	bne.n	8004b96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	881a      	ldrh	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	1c9a      	adds	r2, r3, #2
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b94:	e011      	b.n	8004bba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b96:	f7fd f979 	bl	8001e8c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d803      	bhi.n	8004bae <HAL_SPI_Transmit+0x168>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d102      	bne.n	8004bb4 <HAL_SPI_Transmit+0x16e>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bb8:	e074      	b.n	8004ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1ce      	bne.n	8004b62 <HAL_SPI_Transmit+0x11c>
 8004bc4:	e04c      	b.n	8004c60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_SPI_Transmit+0x18e>
 8004bce:	8afb      	ldrh	r3, [r7, #22]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d140      	bne.n	8004c56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	7812      	ldrb	r2, [r2, #0]
 8004be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bfa:	e02c      	b.n	8004c56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d113      	bne.n	8004c32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c30:	e011      	b.n	8004c56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c32:	f7fd f92b 	bl	8001e8c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d803      	bhi.n	8004c4a <HAL_SPI_Transmit+0x204>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d102      	bne.n	8004c50 <HAL_SPI_Transmit+0x20a>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c54:	e026      	b.n	8004ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1cd      	bne.n	8004bfc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fbcb 	bl	8005400 <SPI_EndRxTxTransaction>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e000      	b.n	8004ca4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004ca2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b088      	sub	sp, #32
 8004cc2:	af02      	add	r7, sp, #8
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cda:	d112      	bne.n	8004d02 <HAL_SPI_Receive+0x44>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10e      	bne.n	8004d02 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f8f1 	bl	8004ee0 <HAL_SPI_TransmitReceive>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	e0ea      	b.n	8004ed8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_SPI_Receive+0x52>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0e3      	b.n	8004ed8 <HAL_SPI_Receive+0x21a>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d18:	f7fd f8b8 	bl	8001e8c <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d002      	beq.n	8004d30 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d2e:	e0ca      	b.n	8004ec6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_SPI_Receive+0x7e>
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d40:	e0c1      	b.n	8004ec6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2204      	movs	r2, #4
 8004d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	88fa      	ldrh	r2, [r7, #6]
 8004d5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d88:	d10f      	bne.n	8004daa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004da8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d007      	beq.n	8004dc8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d162      	bne.n	8004e96 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004dd0:	e02e      	b.n	8004e30 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d115      	bne.n	8004e0c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f103 020c 	add.w	r2, r3, #12
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e0a:	e011      	b.n	8004e30 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e0c:	f7fd f83e 	bl	8001e8c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d803      	bhi.n	8004e24 <HAL_SPI_Receive+0x166>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	d102      	bne.n	8004e2a <HAL_SPI_Receive+0x16c>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e2e:	e04a      	b.n	8004ec6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1cb      	bne.n	8004dd2 <HAL_SPI_Receive+0x114>
 8004e3a:	e031      	b.n	8004ea0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d113      	bne.n	8004e72 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	b292      	uxth	r2, r2
 8004e56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	1c9a      	adds	r2, r3, #2
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e70:	e011      	b.n	8004e96 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e72:	f7fd f80b 	bl	8001e8c <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d803      	bhi.n	8004e8a <HAL_SPI_Receive+0x1cc>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e88:	d102      	bne.n	8004e90 <HAL_SPI_Receive+0x1d2>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e94:	e017      	b.n	8004ec6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1cd      	bne.n	8004e3c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 fa45 	bl	8005334 <SPI_EndRxTransaction>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	75fb      	strb	r3, [r7, #23]
 8004ec2:	e000      	b.n	8004ec6 <HAL_SPI_Receive+0x208>
  }

error :
 8004ec4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08c      	sub	sp, #48	; 0x30
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x26>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e18a      	b.n	800521c <HAL_SPI_TransmitReceive+0x33c>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f0e:	f7fc ffbd 	bl	8001e8c <HAL_GetTick>
 8004f12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f24:	887b      	ldrh	r3, [r7, #2]
 8004f26:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d00f      	beq.n	8004f50 <HAL_SPI_TransmitReceive+0x70>
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f36:	d107      	bne.n	8004f48 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <HAL_SPI_TransmitReceive+0x68>
 8004f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d003      	beq.n	8004f50 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f4e:	e15b      	b.n	8005208 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_SPI_TransmitReceive+0x82>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_SPI_TransmitReceive+0x82>
 8004f5c:	887b      	ldrh	r3, [r7, #2]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d103      	bne.n	8004f6a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f68:	e14e      	b.n	8005208 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d003      	beq.n	8004f7e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2205      	movs	r2, #5
 8004f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	887a      	ldrh	r2, [r7, #2]
 8004f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	887a      	ldrh	r2, [r7, #2]
 8004f94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	887a      	ldrh	r2, [r7, #2]
 8004fa0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	887a      	ldrh	r2, [r7, #2]
 8004fa6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d007      	beq.n	8004fd2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fda:	d178      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x10a>
 8004fe4:	8b7b      	ldrh	r3, [r7, #26]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d166      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	881a      	ldrh	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	1c9a      	adds	r2, r3, #2
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800500e:	e053      	b.n	80050b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b02      	cmp	r3, #2
 800501c:	d11b      	bne.n	8005056 <HAL_SPI_TransmitReceive+0x176>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d016      	beq.n	8005056 <HAL_SPI_TransmitReceive+0x176>
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d113      	bne.n	8005056 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	1c9a      	adds	r2, r3, #2
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d119      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x1b8>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d014      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	b292      	uxth	r2, r2
 800507a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	1c9a      	adds	r2, r3, #2
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508a:	b29b      	uxth	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005094:	2301      	movs	r3, #1
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005098:	f7fc fef8 	bl	8001e8c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d807      	bhi.n	80050b8 <HAL_SPI_TransmitReceive+0x1d8>
 80050a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d003      	beq.n	80050b8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050b6:	e0a7      	b.n	8005208 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1a6      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x130>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1a1      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x130>
 80050cc:	e07c      	b.n	80051c8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x1fc>
 80050d6:	8b7b      	ldrh	r3, [r7, #26]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d16b      	bne.n	80051b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	7812      	ldrb	r2, [r2, #0]
 80050e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005102:	e057      	b.n	80051b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b02      	cmp	r3, #2
 8005110:	d11c      	bne.n	800514c <HAL_SPI_TransmitReceive+0x26c>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d017      	beq.n	800514c <HAL_SPI_TransmitReceive+0x26c>
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	2b01      	cmp	r3, #1
 8005120:	d114      	bne.n	800514c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	7812      	ldrb	r2, [r2, #0]
 800512e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b01      	cmp	r3, #1
 8005158:	d119      	bne.n	800518e <HAL_SPI_TransmitReceive+0x2ae>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d014      	beq.n	800518e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800518a:	2301      	movs	r3, #1
 800518c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800518e:	f7fc fe7d 	bl	8001e8c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800519a:	429a      	cmp	r2, r3
 800519c:	d803      	bhi.n	80051a6 <HAL_SPI_TransmitReceive+0x2c6>
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d102      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x2cc>
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d103      	bne.n	80051b4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051b2:	e029      	b.n	8005208 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1a2      	bne.n	8005104 <HAL_SPI_TransmitReceive+0x224>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d19d      	bne.n	8005104 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f917 	bl	8005400 <SPI_EndRxTxTransaction>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d006      	beq.n	80051e6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051e4:	e010      	b.n	8005208 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10b      	bne.n	8005206 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	e000      	b.n	8005208 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005206:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005218:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800521c:	4618      	mov	r0, r3
 800521e:	3730      	adds	r7, #48	; 0x30
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005234:	f7fc fe2a 	bl	8001e8c <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	4413      	add	r3, r2
 8005242:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005244:	f7fc fe22 	bl	8001e8c <HAL_GetTick>
 8005248:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800524a:	4b39      	ldr	r3, [pc, #228]	; (8005330 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	015b      	lsls	r3, r3, #5
 8005250:	0d1b      	lsrs	r3, r3, #20
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800525a:	e054      	b.n	8005306 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005262:	d050      	beq.n	8005306 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005264:	f7fc fe12 	bl	8001e8c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	429a      	cmp	r2, r3
 8005272:	d902      	bls.n	800527a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d13d      	bne.n	80052f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005288:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005292:	d111      	bne.n	80052b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529c:	d004      	beq.n	80052a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a6:	d107      	bne.n	80052b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c0:	d10f      	bne.n	80052e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e017      	b.n	8005326 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	3b01      	subs	r3, #1
 8005304:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4013      	ands	r3, r2
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	429a      	cmp	r2, r3
 8005314:	bf0c      	ite	eq
 8005316:	2301      	moveq	r3, #1
 8005318:	2300      	movne	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	429a      	cmp	r2, r3
 8005322:	d19b      	bne.n	800525c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3720      	adds	r7, #32
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000000 	.word	0x20000000

08005334 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005348:	d111      	bne.n	800536e <SPI_EndRxTransaction+0x3a>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005352:	d004      	beq.n	800535e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535c:	d107      	bne.n	800536e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800536c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005376:	d12a      	bne.n	80053ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005380:	d012      	beq.n	80053a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	2180      	movs	r1, #128	; 0x80
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff ff49 	bl	8005224 <SPI_WaitFlagStateUntilTimeout>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02d      	beq.n	80053f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539c:	f043 0220 	orr.w	r2, r3, #32
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e026      	b.n	80053f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2200      	movs	r2, #0
 80053b0:	2101      	movs	r1, #1
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff ff36 	bl	8005224 <SPI_WaitFlagStateUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01a      	beq.n	80053f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	f043 0220 	orr.w	r2, r3, #32
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e013      	b.n	80053f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2200      	movs	r2, #0
 80053d6:	2101      	movs	r1, #1
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff ff23 	bl	8005224 <SPI_WaitFlagStateUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e8:	f043 0220 	orr.w	r2, r3, #32
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e000      	b.n	80053f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800540c:	4b1b      	ldr	r3, [pc, #108]	; (800547c <SPI_EndRxTxTransaction+0x7c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1b      	ldr	r2, [pc, #108]	; (8005480 <SPI_EndRxTxTransaction+0x80>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	0d5b      	lsrs	r3, r3, #21
 8005418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800541c:	fb02 f303 	mul.w	r3, r2, r3
 8005420:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800542a:	d112      	bne.n	8005452 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2200      	movs	r2, #0
 8005434:	2180      	movs	r1, #128	; 0x80
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff fef4 	bl	8005224 <SPI_WaitFlagStateUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d016      	beq.n	8005470 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e00f      	b.n	8005472 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	3b01      	subs	r3, #1
 800545c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005468:	2b80      	cmp	r3, #128	; 0x80
 800546a:	d0f2      	beq.n	8005452 <SPI_EndRxTxTransaction+0x52>
 800546c:	e000      	b.n	8005470 <SPI_EndRxTxTransaction+0x70>
        break;
 800546e:	bf00      	nop
  }

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000000 	.word	0x20000000
 8005480:	165e9f81 	.word	0x165e9f81

08005484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e041      	b.n	800551a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fc fb58 	bl	8001b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	4619      	mov	r1, r3
 80054c2:	4610      	mov	r0, r2
 80054c4:	f000 f9ce 	bl	8005864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e04e      	b.n	80055da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a23      	ldr	r2, [pc, #140]	; (80055e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d022      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d01d      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1f      	ldr	r2, [pc, #124]	; (80055ec <HAL_TIM_Base_Start_IT+0xc8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1e      	ldr	r2, [pc, #120]	; (80055f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1c      	ldr	r2, [pc, #112]	; (80055f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1b      	ldr	r2, [pc, #108]	; (80055f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a19      	ldr	r2, [pc, #100]	; (80055fc <HAL_TIM_Base_Start_IT+0xd8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0x80>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_TIM_Base_Start_IT+0xdc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d111      	bne.n	80055c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b06      	cmp	r3, #6
 80055b4:	d010      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0201 	orr.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c6:	e007      	b.n	80055d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40010000 	.word	0x40010000
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800
 80055f4:	40000c00 	.word	0x40000c00
 80055f8:	40010400 	.word	0x40010400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40001800 	.word	0x40001800

08005604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b02      	cmp	r3, #2
 8005618:	d122      	bne.n	8005660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b02      	cmp	r3, #2
 8005626:	d11b      	bne.n	8005660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0202 	mvn.w	r2, #2
 8005630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f8ee 	bl	8005828 <HAL_TIM_IC_CaptureCallback>
 800564c:	e005      	b.n	800565a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f8e0 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f8f1 	bl	800583c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d122      	bne.n	80056b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b04      	cmp	r3, #4
 800567a:	d11b      	bne.n	80056b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0204 	mvn.w	r2, #4
 8005684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f8c4 	bl	8005828 <HAL_TIM_IC_CaptureCallback>
 80056a0:	e005      	b.n	80056ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8b6 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f8c7 	bl	800583c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d122      	bne.n	8005708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d11b      	bne.n	8005708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0208 	mvn.w	r2, #8
 80056d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2204      	movs	r2, #4
 80056de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f89a 	bl	8005828 <HAL_TIM_IC_CaptureCallback>
 80056f4:	e005      	b.n	8005702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f88c 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f89d 	bl	800583c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b10      	cmp	r3, #16
 8005714:	d122      	bne.n	800575c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b10      	cmp	r3, #16
 8005722:	d11b      	bne.n	800575c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f06f 0210 	mvn.w	r2, #16
 800572c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2208      	movs	r2, #8
 8005732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f870 	bl	8005828 <HAL_TIM_IC_CaptureCallback>
 8005748:	e005      	b.n	8005756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f862 	bl	8005814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f873 	bl	800583c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b01      	cmp	r3, #1
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b01      	cmp	r3, #1
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0201 	mvn.w	r2, #1
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fb ffe8 	bl	8001758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b80      	cmp	r3, #128	; 0x80
 8005794:	d10e      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	d107      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f902 	bl	80059b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d10e      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057cc:	2b40      	cmp	r3, #64	; 0x40
 80057ce:	d107      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f838 	bl	8005850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d10e      	bne.n	800580c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d107      	bne.n	800580c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0220 	mvn.w	r2, #32
 8005804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f8cc 	bl	80059a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a40      	ldr	r2, [pc, #256]	; (8005978 <TIM_Base_SetConfig+0x114>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d013      	beq.n	80058a4 <TIM_Base_SetConfig+0x40>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005882:	d00f      	beq.n	80058a4 <TIM_Base_SetConfig+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a3d      	ldr	r2, [pc, #244]	; (800597c <TIM_Base_SetConfig+0x118>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00b      	beq.n	80058a4 <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a3c      	ldr	r2, [pc, #240]	; (8005980 <TIM_Base_SetConfig+0x11c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d007      	beq.n	80058a4 <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a3b      	ldr	r2, [pc, #236]	; (8005984 <TIM_Base_SetConfig+0x120>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d003      	beq.n	80058a4 <TIM_Base_SetConfig+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a3a      	ldr	r2, [pc, #232]	; (8005988 <TIM_Base_SetConfig+0x124>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d108      	bne.n	80058b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a2f      	ldr	r2, [pc, #188]	; (8005978 <TIM_Base_SetConfig+0x114>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d02b      	beq.n	8005916 <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c4:	d027      	beq.n	8005916 <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a2c      	ldr	r2, [pc, #176]	; (800597c <TIM_Base_SetConfig+0x118>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d023      	beq.n	8005916 <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a2b      	ldr	r2, [pc, #172]	; (8005980 <TIM_Base_SetConfig+0x11c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01f      	beq.n	8005916 <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2a      	ldr	r2, [pc, #168]	; (8005984 <TIM_Base_SetConfig+0x120>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01b      	beq.n	8005916 <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a29      	ldr	r2, [pc, #164]	; (8005988 <TIM_Base_SetConfig+0x124>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d017      	beq.n	8005916 <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a28      	ldr	r2, [pc, #160]	; (800598c <TIM_Base_SetConfig+0x128>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a27      	ldr	r2, [pc, #156]	; (8005990 <TIM_Base_SetConfig+0x12c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00f      	beq.n	8005916 <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a26      	ldr	r2, [pc, #152]	; (8005994 <TIM_Base_SetConfig+0x130>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00b      	beq.n	8005916 <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a25      	ldr	r2, [pc, #148]	; (8005998 <TIM_Base_SetConfig+0x134>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d007      	beq.n	8005916 <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a24      	ldr	r2, [pc, #144]	; (800599c <TIM_Base_SetConfig+0x138>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d003      	beq.n	8005916 <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a23      	ldr	r2, [pc, #140]	; (80059a0 <TIM_Base_SetConfig+0x13c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d108      	bne.n	8005928 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a0a      	ldr	r2, [pc, #40]	; (8005978 <TIM_Base_SetConfig+0x114>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d003      	beq.n	800595c <TIM_Base_SetConfig+0xf8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a0c      	ldr	r2, [pc, #48]	; (8005988 <TIM_Base_SetConfig+0x124>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d103      	bne.n	8005964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	615a      	str	r2, [r3, #20]
}
 800596a:	bf00      	nop
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40000c00 	.word	0x40000c00
 8005988:	40010400 	.word	0x40010400
 800598c:	40014000 	.word	0x40014000
 8005990:	40014400 	.word	0x40014400
 8005994:	40014800 	.word	0x40014800
 8005998:	40001800 	.word	0x40001800
 800599c:	40001c00 	.word	0x40001c00
 80059a0:	40002000 	.word	0x40002000

080059a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e03f      	b.n	8005a5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d106      	bne.n	80059f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fc f8dc 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2224      	movs	r2, #36	; 0x24
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f9a7 	bl	8005d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b08a      	sub	sp, #40	; 0x28
 8005a6a:	af02      	add	r7, sp, #8
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d17c      	bne.n	8005b80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_UART_Transmit+0x2c>
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e075      	b.n	8005b82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_UART_Transmit+0x3e>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e06e      	b.n	8005b82 <HAL_UART_Transmit+0x11c>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2221      	movs	r2, #33	; 0x21
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aba:	f7fc f9e7 	bl	8001e8c <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	88fa      	ldrh	r2, [r7, #6]
 8005aca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad4:	d108      	bne.n	8005ae8 <HAL_UART_Transmit+0x82>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	e003      	b.n	8005af0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005af8:	e02a      	b.n	8005b50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2200      	movs	r2, #0
 8005b02:	2180      	movs	r1, #128	; 0x80
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f8e2 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e036      	b.n	8005b82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10b      	bne.n	8005b32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	e007      	b.n	8005b42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	781a      	ldrb	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1cf      	bne.n	8005afa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2200      	movs	r2, #0
 8005b62:	2140      	movs	r1, #64	; 0x40
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f8b2 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e006      	b.n	8005b82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e000      	b.n	8005b82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b08a      	sub	sp, #40	; 0x28
 8005b8e:	af02      	add	r7, sp, #8
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	f040 808c 	bne.w	8005cc4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_UART_Receive+0x2e>
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e084      	b.n	8005cc6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_UART_Receive+0x40>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e07d      	b.n	8005cc6 <HAL_UART_Receive+0x13c>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2222      	movs	r2, #34	; 0x22
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005be6:	f7fc f951 	bl	8001e8c <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	88fa      	ldrh	r2, [r7, #6]
 8005bf0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	88fa      	ldrh	r2, [r7, #6]
 8005bf6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c00:	d108      	bne.n	8005c14 <HAL_UART_Receive+0x8a>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d104      	bne.n	8005c14 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e003      	b.n	8005c1c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c24:	e043      	b.n	8005cae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2120      	movs	r1, #32
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f84c 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e042      	b.n	8005cc6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10c      	bne.n	8005c60 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	e01f      	b.n	8005ca0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c68:	d007      	beq.n	8005c7a <HAL_UART_Receive+0xf0>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <HAL_UART_Receive+0xfe>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	e008      	b.n	8005c9a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1b6      	bne.n	8005c26 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cde:	e02c      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d028      	beq.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8005cee:	f7fc f8cd 	bl	8001e8c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d21d      	bcs.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d0c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695a      	ldr	r2, [r3, #20]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e00f      	b.n	8005d5a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4013      	ands	r3, r2
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	bf0c      	ite	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	2300      	movne	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d0c3      	beq.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d68:	b09f      	sub	sp, #124	; 0x7c
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7a:	68d9      	ldr	r1, [r3, #12]
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	ea40 0301 	orr.w	r3, r0, r1
 8005d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005da8:	f021 010c 	bic.w	r1, r1, #12
 8005dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005db2:	430b      	orrs	r3, r1
 8005db4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	6999      	ldr	r1, [r3, #24]
 8005dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	ea40 0301 	orr.w	r3, r0, r1
 8005dcc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4bc5      	ldr	r3, [pc, #788]	; (80060e8 <UART_SetConfig+0x384>)
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d004      	beq.n	8005de2 <UART_SetConfig+0x7e>
 8005dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	4bc3      	ldr	r3, [pc, #780]	; (80060ec <UART_SetConfig+0x388>)
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d103      	bne.n	8005dea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005de2:	f7fd fde7 	bl	80039b4 <HAL_RCC_GetPCLK2Freq>
 8005de6:	6778      	str	r0, [r7, #116]	; 0x74
 8005de8:	e002      	b.n	8005df0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dea:	f7fd fdcf 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8005dee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df8:	f040 80b6 	bne.w	8005f68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dfe:	461c      	mov	r4, r3
 8005e00:	f04f 0500 	mov.w	r5, #0
 8005e04:	4622      	mov	r2, r4
 8005e06:	462b      	mov	r3, r5
 8005e08:	1891      	adds	r1, r2, r2
 8005e0a:	6439      	str	r1, [r7, #64]	; 0x40
 8005e0c:	415b      	adcs	r3, r3
 8005e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e14:	1912      	adds	r2, r2, r4
 8005e16:	eb45 0303 	adc.w	r3, r5, r3
 8005e1a:	f04f 0000 	mov.w	r0, #0
 8005e1e:	f04f 0100 	mov.w	r1, #0
 8005e22:	00d9      	lsls	r1, r3, #3
 8005e24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e28:	00d0      	lsls	r0, r2, #3
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	1911      	adds	r1, r2, r4
 8005e30:	6639      	str	r1, [r7, #96]	; 0x60
 8005e32:	416b      	adcs	r3, r5
 8005e34:	667b      	str	r3, [r7, #100]	; 0x64
 8005e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	1891      	adds	r1, r2, r2
 8005e42:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e44:	415b      	adcs	r3, r3
 8005e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e50:	f7fa f9e6 	bl	8000220 <__aeabi_uldivmod>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4ba5      	ldr	r3, [pc, #660]	; (80060f0 <UART_SetConfig+0x38c>)
 8005e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	011e      	lsls	r6, r3, #4
 8005e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e64:	461c      	mov	r4, r3
 8005e66:	f04f 0500 	mov.w	r5, #0
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	1891      	adds	r1, r2, r2
 8005e70:	6339      	str	r1, [r7, #48]	; 0x30
 8005e72:	415b      	adcs	r3, r3
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
 8005e76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e7a:	1912      	adds	r2, r2, r4
 8005e7c:	eb45 0303 	adc.w	r3, r5, r3
 8005e80:	f04f 0000 	mov.w	r0, #0
 8005e84:	f04f 0100 	mov.w	r1, #0
 8005e88:	00d9      	lsls	r1, r3, #3
 8005e8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e8e:	00d0      	lsls	r0, r2, #3
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	1911      	adds	r1, r2, r4
 8005e96:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e98:	416b      	adcs	r3, r5
 8005e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	1891      	adds	r1, r2, r2
 8005ea8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eaa:	415b      	adcs	r3, r3
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eb2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005eb6:	f7fa f9b3 	bl	8000220 <__aeabi_uldivmod>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4b8c      	ldr	r3, [pc, #560]	; (80060f0 <UART_SetConfig+0x38c>)
 8005ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	2164      	movs	r1, #100	; 0x64
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	3332      	adds	r3, #50	; 0x32
 8005ed2:	4a87      	ldr	r2, [pc, #540]	; (80060f0 <UART_SetConfig+0x38c>)
 8005ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed8:	095b      	lsrs	r3, r3, #5
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ee0:	441e      	add	r6, r3
 8005ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	1894      	adds	r4, r2, r2
 8005ef0:	623c      	str	r4, [r7, #32]
 8005ef2:	415b      	adcs	r3, r3
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005efa:	1812      	adds	r2, r2, r0
 8005efc:	eb41 0303 	adc.w	r3, r1, r3
 8005f00:	f04f 0400 	mov.w	r4, #0
 8005f04:	f04f 0500 	mov.w	r5, #0
 8005f08:	00dd      	lsls	r5, r3, #3
 8005f0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f0e:	00d4      	lsls	r4, r2, #3
 8005f10:	4622      	mov	r2, r4
 8005f12:	462b      	mov	r3, r5
 8005f14:	1814      	adds	r4, r2, r0
 8005f16:	653c      	str	r4, [r7, #80]	; 0x50
 8005f18:	414b      	adcs	r3, r1
 8005f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	461a      	mov	r2, r3
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	1891      	adds	r1, r2, r2
 8005f28:	61b9      	str	r1, [r7, #24]
 8005f2a:	415b      	adcs	r3, r3
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f36:	f7fa f973 	bl	8000220 <__aeabi_uldivmod>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4b6c      	ldr	r3, [pc, #432]	; (80060f0 <UART_SetConfig+0x38c>)
 8005f40:	fba3 1302 	umull	r1, r3, r3, r2
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	2164      	movs	r1, #100	; 0x64
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	3332      	adds	r3, #50	; 0x32
 8005f52:	4a67      	ldr	r2, [pc, #412]	; (80060f0 <UART_SetConfig+0x38c>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	f003 0207 	and.w	r2, r3, #7
 8005f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4432      	add	r2, r6
 8005f64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f66:	e0b9      	b.n	80060dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f6a:	461c      	mov	r4, r3
 8005f6c:	f04f 0500 	mov.w	r5, #0
 8005f70:	4622      	mov	r2, r4
 8005f72:	462b      	mov	r3, r5
 8005f74:	1891      	adds	r1, r2, r2
 8005f76:	6139      	str	r1, [r7, #16]
 8005f78:	415b      	adcs	r3, r3
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f80:	1912      	adds	r2, r2, r4
 8005f82:	eb45 0303 	adc.w	r3, r5, r3
 8005f86:	f04f 0000 	mov.w	r0, #0
 8005f8a:	f04f 0100 	mov.w	r1, #0
 8005f8e:	00d9      	lsls	r1, r3, #3
 8005f90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f94:	00d0      	lsls	r0, r2, #3
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	eb12 0804 	adds.w	r8, r2, r4
 8005f9e:	eb43 0905 	adc.w	r9, r3, r5
 8005fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f04f 0100 	mov.w	r1, #0
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	008b      	lsls	r3, r1, #2
 8005fb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fba:	0082      	lsls	r2, r0, #2
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	f7fa f92e 	bl	8000220 <__aeabi_uldivmod>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4b49      	ldr	r3, [pc, #292]	; (80060f0 <UART_SetConfig+0x38c>)
 8005fca:	fba3 2302 	umull	r2, r3, r3, r2
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	011e      	lsls	r6, r3, #4
 8005fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f04f 0100 	mov.w	r1, #0
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	1894      	adds	r4, r2, r2
 8005fe0:	60bc      	str	r4, [r7, #8]
 8005fe2:	415b      	adcs	r3, r3
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fea:	1812      	adds	r2, r2, r0
 8005fec:	eb41 0303 	adc.w	r3, r1, r3
 8005ff0:	f04f 0400 	mov.w	r4, #0
 8005ff4:	f04f 0500 	mov.w	r5, #0
 8005ff8:	00dd      	lsls	r5, r3, #3
 8005ffa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ffe:	00d4      	lsls	r4, r2, #3
 8006000:	4622      	mov	r2, r4
 8006002:	462b      	mov	r3, r5
 8006004:	1814      	adds	r4, r2, r0
 8006006:	64bc      	str	r4, [r7, #72]	; 0x48
 8006008:	414b      	adcs	r3, r1
 800600a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800600c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	4618      	mov	r0, r3
 8006012:	f04f 0100 	mov.w	r1, #0
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	008b      	lsls	r3, r1, #2
 8006020:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006024:	0082      	lsls	r2, r0, #2
 8006026:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800602a:	f7fa f8f9 	bl	8000220 <__aeabi_uldivmod>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4b2f      	ldr	r3, [pc, #188]	; (80060f0 <UART_SetConfig+0x38c>)
 8006034:	fba3 1302 	umull	r1, r3, r3, r2
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	2164      	movs	r1, #100	; 0x64
 800603c:	fb01 f303 	mul.w	r3, r1, r3
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	3332      	adds	r3, #50	; 0x32
 8006046:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <UART_SetConfig+0x38c>)
 8006048:	fba2 2303 	umull	r2, r3, r2, r3
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006052:	441e      	add	r6, r3
 8006054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006056:	4618      	mov	r0, r3
 8006058:	f04f 0100 	mov.w	r1, #0
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	1894      	adds	r4, r2, r2
 8006062:	603c      	str	r4, [r7, #0]
 8006064:	415b      	adcs	r3, r3
 8006066:	607b      	str	r3, [r7, #4]
 8006068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800606c:	1812      	adds	r2, r2, r0
 800606e:	eb41 0303 	adc.w	r3, r1, r3
 8006072:	f04f 0400 	mov.w	r4, #0
 8006076:	f04f 0500 	mov.w	r5, #0
 800607a:	00dd      	lsls	r5, r3, #3
 800607c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006080:	00d4      	lsls	r4, r2, #3
 8006082:	4622      	mov	r2, r4
 8006084:	462b      	mov	r3, r5
 8006086:	eb12 0a00 	adds.w	sl, r2, r0
 800608a:	eb43 0b01 	adc.w	fp, r3, r1
 800608e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	4618      	mov	r0, r3
 8006094:	f04f 0100 	mov.w	r1, #0
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	008b      	lsls	r3, r1, #2
 80060a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060a6:	0082      	lsls	r2, r0, #2
 80060a8:	4650      	mov	r0, sl
 80060aa:	4659      	mov	r1, fp
 80060ac:	f7fa f8b8 	bl	8000220 <__aeabi_uldivmod>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <UART_SetConfig+0x38c>)
 80060b6:	fba3 1302 	umull	r1, r3, r3, r2
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	2164      	movs	r1, #100	; 0x64
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	3332      	adds	r3, #50	; 0x32
 80060c8:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <UART_SetConfig+0x38c>)
 80060ca:	fba2 2303 	umull	r2, r3, r2, r3
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	f003 020f 	and.w	r2, r3, #15
 80060d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4432      	add	r2, r6
 80060da:	609a      	str	r2, [r3, #8]
}
 80060dc:	bf00      	nop
 80060de:	377c      	adds	r7, #124	; 0x7c
 80060e0:	46bd      	mov	sp, r7
 80060e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e6:	bf00      	nop
 80060e8:	40011000 	.word	0x40011000
 80060ec:	40011400 	.word	0x40011400
 80060f0:	51eb851f 	.word	0x51eb851f

080060f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060f4:	b084      	sub	sp, #16
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	f107 001c 	add.w	r0, r7, #28
 8006102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	2b01      	cmp	r3, #1
 800610a:	d122      	bne.n	8006152 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006136:	2b01      	cmp	r3, #1
 8006138:	d105      	bne.n	8006146 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 fac0 	bl	80076cc <USB_CoreReset>
 800614c:	4603      	mov	r3, r0
 800614e:	73fb      	strb	r3, [r7, #15]
 8006150:	e01a      	b.n	8006188 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f001 fab4 	bl	80076cc <USB_CoreReset>
 8006164:	4603      	mov	r3, r0
 8006166:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
 800617a:	e005      	b.n	8006188 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	2b01      	cmp	r3, #1
 800618c:	d10b      	bne.n	80061a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f043 0206 	orr.w	r2, r3, #6
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f043 0220 	orr.w	r2, r3, #32
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061b2:	b004      	add	sp, #16
 80061b4:	4770      	bx	lr
	...

080061b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d165      	bne.n	8006298 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4a41      	ldr	r2, [pc, #260]	; (80062d4 <USB_SetTurnaroundTime+0x11c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d906      	bls.n	80061e2 <USB_SetTurnaroundTime+0x2a>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4a40      	ldr	r2, [pc, #256]	; (80062d8 <USB_SetTurnaroundTime+0x120>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d202      	bcs.n	80061e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061dc:	230f      	movs	r3, #15
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	e062      	b.n	80062a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	4a3c      	ldr	r2, [pc, #240]	; (80062d8 <USB_SetTurnaroundTime+0x120>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d306      	bcc.n	80061f8 <USB_SetTurnaroundTime+0x40>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	4a3b      	ldr	r2, [pc, #236]	; (80062dc <USB_SetTurnaroundTime+0x124>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d202      	bcs.n	80061f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061f2:	230e      	movs	r3, #14
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	e057      	b.n	80062a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4a38      	ldr	r2, [pc, #224]	; (80062dc <USB_SetTurnaroundTime+0x124>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d306      	bcc.n	800620e <USB_SetTurnaroundTime+0x56>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4a37      	ldr	r2, [pc, #220]	; (80062e0 <USB_SetTurnaroundTime+0x128>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d202      	bcs.n	800620e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006208:	230d      	movs	r3, #13
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	e04c      	b.n	80062a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	4a33      	ldr	r2, [pc, #204]	; (80062e0 <USB_SetTurnaroundTime+0x128>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d306      	bcc.n	8006224 <USB_SetTurnaroundTime+0x6c>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	4a32      	ldr	r2, [pc, #200]	; (80062e4 <USB_SetTurnaroundTime+0x12c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d802      	bhi.n	8006224 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800621e:	230c      	movs	r3, #12
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	e041      	b.n	80062a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4a2f      	ldr	r2, [pc, #188]	; (80062e4 <USB_SetTurnaroundTime+0x12c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d906      	bls.n	800623a <USB_SetTurnaroundTime+0x82>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4a2e      	ldr	r2, [pc, #184]	; (80062e8 <USB_SetTurnaroundTime+0x130>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d802      	bhi.n	800623a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006234:	230b      	movs	r3, #11
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	e036      	b.n	80062a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4a2a      	ldr	r2, [pc, #168]	; (80062e8 <USB_SetTurnaroundTime+0x130>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d906      	bls.n	8006250 <USB_SetTurnaroundTime+0x98>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4a29      	ldr	r2, [pc, #164]	; (80062ec <USB_SetTurnaroundTime+0x134>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d802      	bhi.n	8006250 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800624a:	230a      	movs	r3, #10
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	e02b      	b.n	80062a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4a26      	ldr	r2, [pc, #152]	; (80062ec <USB_SetTurnaroundTime+0x134>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d906      	bls.n	8006266 <USB_SetTurnaroundTime+0xae>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4a25      	ldr	r2, [pc, #148]	; (80062f0 <USB_SetTurnaroundTime+0x138>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d202      	bcs.n	8006266 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006260:	2309      	movs	r3, #9
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e020      	b.n	80062a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4a21      	ldr	r2, [pc, #132]	; (80062f0 <USB_SetTurnaroundTime+0x138>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d306      	bcc.n	800627c <USB_SetTurnaroundTime+0xc4>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a20      	ldr	r2, [pc, #128]	; (80062f4 <USB_SetTurnaroundTime+0x13c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d802      	bhi.n	800627c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006276:	2308      	movs	r3, #8
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	e015      	b.n	80062a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <USB_SetTurnaroundTime+0x13c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d906      	bls.n	8006292 <USB_SetTurnaroundTime+0xda>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a1c      	ldr	r2, [pc, #112]	; (80062f8 <USB_SetTurnaroundTime+0x140>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d202      	bcs.n	8006292 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800628c:	2307      	movs	r3, #7
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e00a      	b.n	80062a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006292:	2306      	movs	r3, #6
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	e007      	b.n	80062a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800629e:	2309      	movs	r3, #9
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	e001      	b.n	80062a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062a4:	2309      	movs	r3, #9
 80062a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80062c0:	431a      	orrs	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	00d8acbf 	.word	0x00d8acbf
 80062d8:	00e4e1c0 	.word	0x00e4e1c0
 80062dc:	00f42400 	.word	0x00f42400
 80062e0:	01067380 	.word	0x01067380
 80062e4:	011a499f 	.word	0x011a499f
 80062e8:	01312cff 	.word	0x01312cff
 80062ec:	014ca43f 	.word	0x014ca43f
 80062f0:	016e3600 	.word	0x016e3600
 80062f4:	01a6ab1f 	.word	0x01a6ab1f
 80062f8:	01e84800 	.word	0x01e84800

080062fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f043 0201 	orr.w	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f023 0201 	bic.w	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d106      	bne.n	800636c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60da      	str	r2, [r3, #12]
 800636a:	e00b      	b.n	8006384 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60da      	str	r2, [r3, #12]
 800637e:	e001      	b.n	8006384 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e003      	b.n	800638c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006384:	2032      	movs	r0, #50	; 0x32
 8006386:	f7fb fd8d 	bl	8001ea4 <HAL_Delay>

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006394:	b084      	sub	sp, #16
 8006396:	b580      	push	{r7, lr}
 8006398:	b086      	sub	sp, #24
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063ae:	2300      	movs	r3, #0
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	e009      	b.n	80063c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3340      	adds	r3, #64	; 0x40
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	2200      	movs	r2, #0
 80063c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	3301      	adds	r3, #1
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b0e      	cmp	r3, #14
 80063cc:	d9f2      	bls.n	80063b4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d11c      	bne.n	800640e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e2:	f043 0302 	orr.w	r3, r3, #2
 80063e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	e005      	b.n	800641a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006420:	461a      	mov	r2, r3
 8006422:	2300      	movs	r3, #0
 8006424:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642c:	4619      	mov	r1, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006434:	461a      	mov	r2, r3
 8006436:	680b      	ldr	r3, [r1, #0]
 8006438:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	2b01      	cmp	r3, #1
 800643e:	d10c      	bne.n	800645a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006446:	2100      	movs	r1, #0
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f949 	bl	80066e0 <USB_SetDevSpeed>
 800644e:	e008      	b.n	8006462 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006450:	2101      	movs	r1, #1
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f944 	bl	80066e0 <USB_SetDevSpeed>
 8006458:	e003      	b.n	8006462 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800645a:	2103      	movs	r1, #3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f93f 	bl	80066e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006462:	2110      	movs	r1, #16
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f8f3 	bl	8006650 <USB_FlushTxFifo>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f911 	bl	800669c <USB_FlushRxFifo>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648a:	461a      	mov	r2, r3
 800648c:	2300      	movs	r3, #0
 800648e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	461a      	mov	r2, r3
 8006498:	2300      	movs	r3, #0
 800649a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a2:	461a      	mov	r2, r3
 80064a4:	2300      	movs	r3, #0
 80064a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064a8:	2300      	movs	r3, #0
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	e043      	b.n	8006536 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064c4:	d118      	bne.n	80064f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d8:	461a      	mov	r2, r3
 80064da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	e013      	b.n	800650a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ee:	461a      	mov	r2, r3
 80064f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	e008      	b.n	800650a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	461a      	mov	r2, r3
 8006506:	2300      	movs	r3, #0
 8006508:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006516:	461a      	mov	r2, r3
 8006518:	2300      	movs	r3, #0
 800651a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006528:	461a      	mov	r2, r3
 800652a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800652e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	3301      	adds	r3, #1
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	429a      	cmp	r2, r3
 800653c:	d3b7      	bcc.n	80064ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800653e:	2300      	movs	r3, #0
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	e043      	b.n	80065cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800655a:	d118      	bne.n	800658e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656e:	461a      	mov	r2, r3
 8006570:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	e013      	b.n	80065a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	461a      	mov	r2, r3
 8006586:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	e008      	b.n	80065a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	461a      	mov	r2, r3
 800659c:	2300      	movs	r3, #0
 800659e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065be:	461a      	mov	r2, r3
 80065c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	3301      	adds	r3, #1
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d3b7      	bcc.n	8006544 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d105      	bne.n	8006608 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	f043 0210 	orr.w	r2, r3, #16
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699a      	ldr	r2, [r3, #24]
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <USB_DevInit+0x2b8>)
 800660e:	4313      	orrs	r3, r2
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f043 0208 	orr.w	r2, r3, #8
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006628:	2b01      	cmp	r3, #1
 800662a:	d107      	bne.n	800663c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006634:	f043 0304 	orr.w	r3, r3, #4
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800663c:	7dfb      	ldrb	r3, [r7, #23]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006648:	b004      	add	sp, #16
 800664a:	4770      	bx	lr
 800664c:	803c3800 	.word	0x803c3800

08006650 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	019b      	lsls	r3, r3, #6
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3301      	adds	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a09      	ldr	r2, [pc, #36]	; (8006698 <USB_FlushTxFifo+0x48>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d901      	bls.n	800667c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e006      	b.n	800668a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b20      	cmp	r3, #32
 8006686:	d0f0      	beq.n	800666a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	00030d40 	.word	0x00030d40

0800669c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2210      	movs	r2, #16
 80066ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4a09      	ldr	r2, [pc, #36]	; (80066dc <USB_FlushRxFifo+0x40>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d901      	bls.n	80066c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e006      	b.n	80066ce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d0f0      	beq.n	80066ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	00030d40 	.word	0x00030d40

080066e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	68f9      	ldr	r1, [r7, #12]
 80066fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006700:	4313      	orrs	r3, r2
 8006702:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006712:	b480      	push	{r7}
 8006714:	b087      	sub	sp, #28
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0306 	and.w	r3, r3, #6
 800672a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006732:	2300      	movs	r3, #0
 8006734:	75fb      	strb	r3, [r7, #23]
 8006736:	e00a      	b.n	800674e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d002      	beq.n	8006744 <USB_GetDevSpeed+0x32>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b06      	cmp	r3, #6
 8006742:	d102      	bne.n	800674a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006744:	2302      	movs	r3, #2
 8006746:	75fb      	strb	r3, [r7, #23]
 8006748:	e001      	b.n	800674e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800674a:	230f      	movs	r3, #15
 800674c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800674e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006750:	4618      	mov	r0, r3
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d13a      	bne.n	80067ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	2101      	movs	r1, #1
 800678a:	fa01 f303 	lsl.w	r3, r1, r3
 800678e:	b29b      	uxth	r3, r3
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006796:	4313      	orrs	r3, r2
 8006798:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d155      	bne.n	800685c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	78db      	ldrb	r3, [r3, #3]
 80067ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	059b      	lsls	r3, r3, #22
 80067d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067d4:	4313      	orrs	r3, r2
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	e036      	b.n	800685c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f4:	69da      	ldr	r2, [r3, #28]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	2101      	movs	r1, #1
 8006800:	fa01 f303 	lsl.w	r3, r1, r3
 8006804:	041b      	lsls	r3, r3, #16
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800680c:	4313      	orrs	r3, r2
 800680e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d11a      	bne.n	800685c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	78db      	ldrb	r3, [r3, #3]
 8006840:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006842:	430b      	orrs	r3, r1
 8006844:	4313      	orrs	r3, r2
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d161      	bne.n	800694c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800689a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800689e:	d11f      	bne.n	80068e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	2101      	movs	r1, #1
 80068f2:	fa01 f303 	lsl.w	r3, r1, r3
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	43db      	mvns	r3, r3
 80068fa:	68f9      	ldr	r1, [r7, #12]
 80068fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006900:	4013      	ands	r3, r2
 8006902:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	69da      	ldr	r2, [r3, #28]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	f003 030f 	and.w	r3, r3, #15
 8006914:	2101      	movs	r1, #1
 8006916:	fa01 f303 	lsl.w	r3, r1, r3
 800691a:	b29b      	uxth	r3, r3
 800691c:	43db      	mvns	r3, r3
 800691e:	68f9      	ldr	r1, [r7, #12]
 8006920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006924:	4013      	ands	r3, r2
 8006926:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	0159      	lsls	r1, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	440b      	add	r3, r1
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	4619      	mov	r1, r3
 8006944:	4b35      	ldr	r3, [pc, #212]	; (8006a1c <USB_DeactivateEndpoint+0x1b0>)
 8006946:	4013      	ands	r3, r2
 8006948:	600b      	str	r3, [r1, #0]
 800694a:	e060      	b.n	8006a0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800695e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006962:	d11f      	bne.n	80069a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	440a      	add	r2, r1
 800697a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006982:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	2101      	movs	r1, #1
 80069b6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	43db      	mvns	r3, r3
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069c4:	4013      	ands	r3, r2
 80069c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ce:	69da      	ldr	r2, [r3, #28]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	2101      	movs	r1, #1
 80069da:	fa01 f303 	lsl.w	r3, r1, r3
 80069de:	041b      	lsls	r3, r3, #16
 80069e0:	43db      	mvns	r3, r3
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e8:	4013      	ands	r3, r2
 80069ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	0159      	lsls	r1, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	440b      	add	r3, r1
 8006a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a06:	4619      	mov	r1, r3
 8006a08:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <USB_DeactivateEndpoint+0x1b4>)
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	ec337800 	.word	0xec337800
 8006a20:	eff37800 	.word	0xeff37800

08006a24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08a      	sub	sp, #40	; 0x28
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	f040 815c 	bne.w	8006cfe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d132      	bne.n	8006ab4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	0151      	lsls	r1, r2, #5
 8006aa4:	69fa      	ldr	r2, [r7, #28]
 8006aa6:	440a      	add	r2, r1
 8006aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aac:	0cdb      	lsrs	r3, r3, #19
 8006aae:	04db      	lsls	r3, r3, #19
 8006ab0:	6113      	str	r3, [r2, #16]
 8006ab2:	e074      	b.n	8006b9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ace:	0cdb      	lsrs	r3, r3, #19
 8006ad0:	04db      	lsls	r3, r3, #19
 8006ad2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006af2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006af6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b04:	691a      	ldr	r2, [r3, #16]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	6959      	ldr	r1, [r3, #20]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	440b      	add	r3, r1
 8006b10:	1e59      	subs	r1, r3, #1
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b1a:	04d9      	lsls	r1, r3, #19
 8006b1c:	4b9d      	ldr	r3, [pc, #628]	; (8006d94 <USB_EPStartXfer+0x370>)
 8006b1e:	400b      	ands	r3, r1
 8006b20:	69b9      	ldr	r1, [r7, #24]
 8006b22:	0148      	lsls	r0, r1, #5
 8006b24:	69f9      	ldr	r1, [r7, #28]
 8006b26:	4401      	add	r1, r0
 8006b28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3c:	691a      	ldr	r2, [r3, #16]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b46:	69b9      	ldr	r1, [r7, #24]
 8006b48:	0148      	lsls	r0, r1, #5
 8006b4a:	69f9      	ldr	r1, [r7, #28]
 8006b4c:	4401      	add	r1, r0
 8006b4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b52:	4313      	orrs	r3, r2
 8006b54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	78db      	ldrb	r3, [r3, #3]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d11f      	bne.n	8006b9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006b7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	69fa      	ldr	r2, [r7, #28]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d14b      	bne.n	8006c3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d009      	beq.n	8006bc0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	78db      	ldrb	r3, [r3, #3]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d128      	bne.n	8006c1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d110      	bne.n	8006bfa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	e00f      	b.n	8006c1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	e12f      	b.n	8006e9c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	0151      	lsls	r1, r2, #5
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	440a      	add	r2, r1
 8006c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	78db      	ldrb	r3, [r3, #3]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d015      	beq.n	8006c90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8117 	beq.w	8006e9c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	2101      	movs	r1, #1
 8006c80:	fa01 f303 	lsl.w	r3, r1, r3
 8006c84:	69f9      	ldr	r1, [r7, #28]
 8006c86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	634b      	str	r3, [r1, #52]	; 0x34
 8006c8e:	e105      	b.n	8006e9c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d110      	bne.n	8006cc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	e00f      	b.n	8006ce2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	0151      	lsls	r1, r2, #5
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	440a      	add	r2, r1
 8006cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	68d9      	ldr	r1, [r3, #12]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	b298      	uxth	r0, r3
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 fa2b 	bl	8007152 <USB_WritePacket>
 8006cfc:	e0ce      	b.n	8006e9c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d18:	0cdb      	lsrs	r3, r3, #19
 8006d1a:	04db      	lsls	r3, r3, #19
 8006d1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d126      	bne.n	8006d98 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d60:	69b9      	ldr	r1, [r7, #24]
 8006d62:	0148      	lsls	r0, r1, #5
 8006d64:	69f9      	ldr	r1, [r7, #28]
 8006d66:	4401      	add	r1, r0
 8006d68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	0151      	lsls	r1, r2, #5
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	440a      	add	r2, r1
 8006d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d8e:	6113      	str	r3, [r2, #16]
 8006d90:	e036      	b.n	8006e00 <USB_EPStartXfer+0x3dc>
 8006d92:	bf00      	nop
 8006d94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	695a      	ldr	r2, [r3, #20]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	4413      	add	r3, r2
 8006da2:	1e5a      	subs	r2, r3, #1
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	8afb      	ldrh	r3, [r7, #22]
 8006dbe:	04d9      	lsls	r1, r3, #19
 8006dc0:	4b39      	ldr	r3, [pc, #228]	; (8006ea8 <USB_EPStartXfer+0x484>)
 8006dc2:	400b      	ands	r3, r1
 8006dc4:	69b9      	ldr	r1, [r7, #24]
 8006dc6:	0148      	lsls	r0, r1, #5
 8006dc8:	69f9      	ldr	r1, [r7, #28]
 8006dca:	4401      	add	r1, r0
 8006dcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	8af9      	ldrh	r1, [r7, #22]
 8006de8:	fb01 f303 	mul.w	r3, r1, r3
 8006dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df0:	69b9      	ldr	r1, [r7, #24]
 8006df2:	0148      	lsls	r0, r1, #5
 8006df4:	69f9      	ldr	r1, [r7, #28]
 8006df6:	4401      	add	r1, r0
 8006df8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d10d      	bne.n	8006e22 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	68d9      	ldr	r1, [r3, #12]
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1e:	460a      	mov	r2, r1
 8006e20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	78db      	ldrb	r3, [r3, #3]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d128      	bne.n	8006e7c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d110      	bne.n	8006e5c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	e00f      	b.n	8006e7c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3720      	adds	r7, #32
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	1ff80000 	.word	0x1ff80000

08006eac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	f040 80cd 	bne.w	8007068 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d132      	bne.n	8006f3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ef4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ef8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	0151      	lsls	r1, r2, #5
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	440a      	add	r2, r1
 8006f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	0151      	lsls	r1, r2, #5
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	440a      	add	r2, r1
 8006f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f34:	0cdb      	lsrs	r3, r3, #19
 8006f36:	04db      	lsls	r3, r3, #19
 8006f38:	6113      	str	r3, [r2, #16]
 8006f3a:	e04e      	b.n	8006fda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f56:	0cdb      	lsrs	r3, r3, #19
 8006f58:	04db      	lsls	r3, r3, #19
 8006f5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	0151      	lsls	r1, r2, #5
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	440a      	add	r2, r1
 8006f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	695a      	ldr	r2, [r3, #20]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d903      	bls.n	8006f94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	0151      	lsls	r1, r2, #5
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	440a      	add	r2, r1
 8006faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	691a      	ldr	r2, [r3, #16]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fca:	6939      	ldr	r1, [r7, #16]
 8006fcc:	0148      	lsls	r0, r1, #5
 8006fce:	6979      	ldr	r1, [r7, #20]
 8006fd0:	4401      	add	r1, r0
 8006fd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d11e      	bne.n	800701e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d009      	beq.n	8006ffc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	0151      	lsls	r1, r2, #5
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	440a      	add	r2, r1
 8007012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007016:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	e092      	b.n	8007144 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	440a      	add	r2, r1
 8007034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007038:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800703c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d07e      	beq.n	8007144 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	2101      	movs	r1, #1
 8007058:	fa01 f303 	lsl.w	r3, r1, r3
 800705c:	6979      	ldr	r1, [r7, #20]
 800705e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007062:	4313      	orrs	r3, r2
 8007064:	634b      	str	r3, [r1, #52]	; 0x34
 8007066:	e06d      	b.n	8007144 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	440a      	add	r2, r1
 800707e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007082:	0cdb      	lsrs	r3, r3, #19
 8007084:	04db      	lsls	r3, r3, #19
 8007086:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	440a      	add	r2, r1
 800709e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	0151      	lsls	r1, r2, #5
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	440a      	add	r2, r1
 80070d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f2:	6939      	ldr	r1, [r7, #16]
 80070f4:	0148      	lsls	r0, r1, #5
 80070f6:	6979      	ldr	r1, [r7, #20]
 80070f8:	4401      	add	r1, r0
 80070fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070fe:	4313      	orrs	r3, r2
 8007100:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d10d      	bne.n	8007124 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	68d9      	ldr	r1, [r3, #12]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007120:	460a      	mov	r2, r1
 8007122:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	440a      	add	r2, r1
 800713a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007142:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007152:	b480      	push	{r7}
 8007154:	b089      	sub	sp, #36	; 0x24
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	4611      	mov	r1, r2
 800715e:	461a      	mov	r2, r3
 8007160:	460b      	mov	r3, r1
 8007162:	71fb      	strb	r3, [r7, #7]
 8007164:	4613      	mov	r3, r2
 8007166:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007170:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007174:	2b00      	cmp	r3, #0
 8007176:	d11a      	bne.n	80071ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007178:	88bb      	ldrh	r3, [r7, #4]
 800717a:	3303      	adds	r3, #3
 800717c:	089b      	lsrs	r3, r3, #2
 800717e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007180:	2300      	movs	r3, #0
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	e00f      	b.n	80071a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	031a      	lsls	r2, r3, #12
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	4413      	add	r3, r2
 800718e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007192:	461a      	mov	r2, r3
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6013      	str	r3, [r2, #0]
      pSrc++;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	3304      	adds	r3, #4
 800719e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	3301      	adds	r3, #1
 80071a4:	61bb      	str	r3, [r7, #24]
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d3eb      	bcc.n	8007186 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3724      	adds	r7, #36	; 0x24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071bc:	b480      	push	{r7}
 80071be:	b089      	sub	sp, #36	; 0x24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	3303      	adds	r3, #3
 80071d6:	089b      	lsrs	r3, r3, #2
 80071d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80071da:	2300      	movs	r3, #0
 80071dc:	61bb      	str	r3, [r7, #24]
 80071de:	e00b      	b.n	80071f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	3304      	adds	r3, #4
 80071f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	3301      	adds	r3, #1
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d3ef      	bcc.n	80071e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007200:	69fb      	ldr	r3, [r7, #28]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3724      	adds	r7, #36	; 0x24
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800720e:	b480      	push	{r7}
 8007210:	b085      	sub	sp, #20
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	785b      	ldrb	r3, [r3, #1]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d12c      	bne.n	8007284 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	db12      	blt.n	8007262 <USB_EPSetStall+0x54>
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00f      	beq.n	8007262 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	440a      	add	r2, r1
 8007258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007260:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	0151      	lsls	r1, r2, #5
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	440a      	add	r2, r1
 8007278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	e02b      	b.n	80072dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	db12      	blt.n	80072bc <USB_EPSetStall+0xae>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00f      	beq.n	80072bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	0151      	lsls	r1, r2, #5
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	440a      	add	r2, r1
 80072d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d128      	bne.n	8007358 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	0151      	lsls	r1, r2, #5
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	440a      	add	r2, r1
 800731c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007320:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007324:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	78db      	ldrb	r3, [r3, #3]
 800732a:	2b03      	cmp	r3, #3
 800732c:	d003      	beq.n	8007336 <USB_EPClearStall+0x4c>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	78db      	ldrb	r3, [r3, #3]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d138      	bne.n	80073a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	e027      	b.n	80073a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	440a      	add	r2, r1
 800736e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007372:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007376:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	78db      	ldrb	r3, [r3, #3]
 800737c:	2b03      	cmp	r3, #3
 800737e:	d003      	beq.n	8007388 <USB_EPClearStall+0x9e>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	78db      	ldrb	r3, [r3, #3]
 8007384:	2b02      	cmp	r3, #2
 8007386:	d10f      	bne.n	80073a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	0151      	lsls	r1, r2, #5
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	440a      	add	r2, r1
 800739e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b085      	sub	sp, #20
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	460b      	mov	r3, r1
 80073c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80073d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	011b      	lsls	r3, r3, #4
 80073e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80073ea:	68f9      	ldr	r1, [r7, #12]
 80073ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073f0:	4313      	orrs	r3, r2
 80073f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007402:	b480      	push	{r7}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800741c:	f023 0303 	bic.w	r3, r3, #3
 8007420:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007430:	f023 0302 	bic.w	r3, r3, #2
 8007434:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800745e:	f023 0303 	bic.w	r3, r3, #3
 8007462:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007472:	f043 0302 	orr.w	r3, r3, #2
 8007476:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007486:	b480      	push	{r7}
 8007488:	b085      	sub	sp, #20
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4013      	ands	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800749e:	68fb      	ldr	r3, [r7, #12]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	4013      	ands	r3, r2
 80074ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	0c1b      	lsrs	r3, r3, #16
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	4013      	ands	r3, r2
 8007502:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	b29b      	uxth	r3, r3
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	4013      	ands	r3, r2
 8007540:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007542:	68bb      	ldr	r3, [r7, #8]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	fa22 f303 	lsr.w	r3, r2, r3
 8007580:	01db      	lsls	r3, r3, #7
 8007582:	b2db      	uxtb	r3, r3
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	4313      	orrs	r3, r2
 8007588:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	4013      	ands	r3, r2
 800759c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800759e:	68bb      	ldr	r3, [r7, #8]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	f003 0301 	and.w	r3, r3, #1
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80075e6:	f023 0307 	bic.w	r3, r3, #7
 80075ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
	...

08007610 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	460b      	mov	r3, r1
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	333c      	adds	r3, #60	; 0x3c
 8007626:	3304      	adds	r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <USB_EP0_OutStart+0xb8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d90a      	bls.n	800764a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007644:	d101      	bne.n	800764a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	e037      	b.n	80076ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007650:	461a      	mov	r2, r3
 8007652:	2300      	movs	r3, #0
 8007654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007664:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007678:	f043 0318 	orr.w	r3, r3, #24
 800767c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007690:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d10f      	bne.n	80076b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80076b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	4f54300a 	.word	0x4f54300a

080076cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3301      	adds	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4a13      	ldr	r2, [pc, #76]	; (8007730 <USB_CoreReset+0x64>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d901      	bls.n	80076ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e01b      	b.n	8007722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	daf2      	bge.n	80076d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f043 0201 	orr.w	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4a09      	ldr	r2, [pc, #36]	; (8007730 <USB_CoreReset+0x64>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d901      	bls.n	8007714 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e006      	b.n	8007722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b01      	cmp	r3, #1
 800771e:	d0f0      	beq.n	8007702 <USB_CoreReset+0x36>

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	00030d40 	.word	0x00030d40

08007734 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007740:	2010      	movs	r0, #16
 8007742:	f004 fd4f 	bl	800c1e4 <USBD_static_malloc>
 8007746:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d108      	bne.n	8007760 <USBD_HID_Init+0x2c>
  {
	  usb_failed = 1;
 800774e:	4b14      	ldr	r3, [pc, #80]	; (80077a0 <USBD_HID_Init+0x6c>)
 8007750:	2201      	movs	r2, #1
 8007752:	701a      	strb	r2, [r3, #0]
    pdev->pClassData = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800775c:	2302      	movs	r3, #2
 800775e:	e01b      	b.n	8007798 <USBD_HID_Init+0x64>
  }

  pdev->pClassData = (void *)hhid;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	7c1b      	ldrb	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d103      	bne.n	8007778 <USBD_HID_Init+0x44>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2207      	movs	r2, #7
 8007774:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007776:	e002      	b.n	800777e <USBD_HID_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2208      	movs	r2, #8
 800777c:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800777e:	2320      	movs	r3, #32
 8007780:	2203      	movs	r2, #3
 8007782:	2181      	movs	r1, #129	; 0x81
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f004 fbce 	bl	800bf26 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20000626 	.word	0x20000626

080077a4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80077b0:	2181      	movs	r1, #129	; 0x81
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f004 fbdd 	bl	800bf72 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d4:	4618      	mov	r0, r3
 80077d6:	f004 fd13 	bl	800c200 <USBD_static_free>
    pdev->pClassData = NULL;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ec:	b590      	push	{r4, r7, lr}
 80077ee:	b089      	sub	sp, #36	; 0x24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
   strcpy(caller_str, __builtin_FUNCTION());
 80077f6:	4aa1      	ldr	r2, [pc, #644]	; (8007a7c <USBD_HID_Setup+0x290>)
 80077f8:	4ba1      	ldr	r3, [pc, #644]	; (8007a80 <USBD_HID_Setup+0x294>)
 80077fa:	4614      	mov	r4, r2
 80077fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80077fe:	6020      	str	r0, [r4, #0]
 8007800:	6061      	str	r1, [r4, #4]
 8007802:	60a2      	str	r2, [r4, #8]
 8007804:	881a      	ldrh	r2, [r3, #0]
 8007806:	789b      	ldrb	r3, [r3, #2]
 8007808:	81a2      	strh	r2, [r4, #12]
 800780a:	73a3      	strb	r3, [r4, #14]

  xid_ran++;
 800780c:	4b9d      	ldr	r3, [pc, #628]	; (8007a84 <USBD_HID_Setup+0x298>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	3301      	adds	r3, #1
 8007812:	b2da      	uxtb	r2, r3
 8007814:	4b9b      	ldr	r3, [pc, #620]	; (8007a84 <USBD_HID_Setup+0x298>)
 8007816:	701a      	strb	r2, [r3, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800781e:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <USBD_HID_Setup+0x4c>
  {
	  usb_failed = 1;
 800782e:	4b96      	ldr	r3, [pc, #600]	; (8007a88 <USBD_HID_Setup+0x29c>)
 8007830:	2201      	movs	r2, #1
 8007832:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 8007834:	2303      	movs	r3, #3
 8007836:	e11d      	b.n	8007a74 <USBD_HID_Setup+0x288>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007840:	2bc1      	cmp	r3, #193	; 0xc1
 8007842:	f000 80ce 	beq.w	80079e2 <USBD_HID_Setup+0x1f6>
 8007846:	2bc1      	cmp	r3, #193	; 0xc1
 8007848:	f200 810b 	bhi.w	8007a62 <USBD_HID_Setup+0x276>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d046      	beq.n	80078de <USBD_HID_Setup+0xf2>
 8007850:	2b20      	cmp	r3, #32
 8007852:	f040 8106 	bne.w	8007a62 <USBD_HID_Setup+0x276>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	3b02      	subs	r3, #2
 800785c:	2b09      	cmp	r3, #9
 800785e:	d836      	bhi.n	80078ce <USBD_HID_Setup+0xe2>
 8007860:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <USBD_HID_Setup+0x7c>)
 8007862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007866:	bf00      	nop
 8007868:	080078bf 	.word	0x080078bf
 800786c:	0800789f 	.word	0x0800789f
 8007870:	080078cf 	.word	0x080078cf
 8007874:	080078cf 	.word	0x080078cf
 8007878:	080078cf 	.word	0x080078cf
 800787c:	080078cf 	.word	0x080078cf
 8007880:	080078cf 	.word	0x080078cf
 8007884:	080078cf 	.word	0x080078cf
 8007888:	080078ad 	.word	0x080078ad
 800788c:	08007891 	.word	0x08007891
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	885b      	ldrh	r3, [r3, #2]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	461a      	mov	r2, r3
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	601a      	str	r2, [r3, #0]
          break;
 800789c:	e01e      	b.n	80078dc <USBD_HID_Setup+0xf0>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	2201      	movs	r2, #1
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 fa56 	bl	8008d56 <USBD_CtlSendData>
          break;
 80078aa:	e017      	b.n	80078dc <USBD_HID_Setup+0xf0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	885b      	ldrh	r3, [r3, #2]
 80078b0:	0a1b      	lsrs	r3, r3, #8
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	461a      	mov	r2, r3
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	605a      	str	r2, [r3, #4]
          break;
 80078bc:	e00e      	b.n	80078dc <USBD_HID_Setup+0xf0>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	3304      	adds	r3, #4
 80078c2:	2201      	movs	r2, #1
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fa45 	bl	8008d56 <USBD_CtlSendData>
          break;
 80078cc:	e006      	b.n	80078dc <USBD_HID_Setup+0xf0>

        default:
          USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 f9cf 	bl	8008c74 <USBD_CtlError>
          ret = USBD_FAIL;
 80078d6:	2303      	movs	r3, #3
 80078d8:	77fb      	strb	r3, [r7, #31]
          break;
 80078da:	bf00      	nop
      }
      break;
 80078dc:	e0c9      	b.n	8007a72 <USBD_HID_Setup+0x286>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	785b      	ldrb	r3, [r3, #1]
 80078e2:	2b0b      	cmp	r3, #11
 80078e4:	d874      	bhi.n	80079d0 <USBD_HID_Setup+0x1e4>
 80078e6:	a201      	add	r2, pc, #4	; (adr r2, 80078ec <USBD_HID_Setup+0x100>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	0800791d 	.word	0x0800791d
 80078f0:	080079df 	.word	0x080079df
 80078f4:	080079d1 	.word	0x080079d1
 80078f8:	080079d1 	.word	0x080079d1
 80078fc:	080079d1 	.word	0x080079d1
 8007900:	080079d1 	.word	0x080079d1
 8007904:	08007947 	.word	0x08007947
 8007908:	080079d1 	.word	0x080079d1
 800790c:	080079d1 	.word	0x080079d1
 8007910:	080079d1 	.word	0x080079d1
 8007914:	0800797f 	.word	0x0800797f
 8007918:	080079a9 	.word	0x080079a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b03      	cmp	r3, #3
 8007926:	d107      	bne.n	8007938 <USBD_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007928:	f107 030e 	add.w	r3, r7, #14
 800792c:	2202      	movs	r2, #2
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 fa10 	bl	8008d56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007936:	e053      	b.n	80079e0 <USBD_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 f99a 	bl	8008c74 <USBD_CtlError>
            ret = USBD_FAIL;
 8007940:	2303      	movs	r3, #3
 8007942:	77fb      	strb	r3, [r7, #31]
          break;
 8007944:	e04c      	b.n	80079e0 <USBD_HID_Setup+0x1f4>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	885b      	ldrh	r3, [r3, #2]
 800794a:	0a1b      	lsrs	r3, r3, #8
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b21      	cmp	r3, #33	; 0x21
 8007950:	d10e      	bne.n	8007970 <USBD_HID_Setup+0x184>
          {
            pbuf = USBD_HID_Desc;
 8007952:	4b4e      	ldr	r3, [pc, #312]	; (8007a8c <USBD_HID_Setup+0x2a0>)
 8007954:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	2b12      	cmp	r3, #18
 800795c:	bf28      	it	cs
 800795e:	2312      	movcs	r3, #18
 8007960:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007962:	8afb      	ldrh	r3, [r7, #22]
 8007964:	461a      	mov	r2, r3
 8007966:	6939      	ldr	r1, [r7, #16]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 f9f4 	bl	8008d56 <USBD_CtlSendData>
          break;
 800796e:	e037      	b.n	80079e0 <USBD_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 f97e 	bl	8008c74 <USBD_CtlError>
            ret = USBD_FAIL;
 8007978:	2303      	movs	r3, #3
 800797a:	77fb      	strb	r3, [r7, #31]
            break;
 800797c:	e030      	b.n	80079e0 <USBD_HID_Setup+0x1f4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b03      	cmp	r3, #3
 8007988:	d107      	bne.n	800799a <USBD_HID_Setup+0x1ae>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	3308      	adds	r3, #8
 800798e:	2201      	movs	r2, #1
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f001 f9df 	bl	8008d56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007998:	e022      	b.n	80079e0 <USBD_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 f969 	bl	8008c74 <USBD_CtlError>
            ret = USBD_FAIL;
 80079a2:	2303      	movs	r3, #3
 80079a4:	77fb      	strb	r3, [r7, #31]
          break;
 80079a6:	e01b      	b.n	80079e0 <USBD_HID_Setup+0x1f4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d106      	bne.n	80079c2 <USBD_HID_Setup+0x1d6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	885b      	ldrh	r3, [r3, #2]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079c0:	e00e      	b.n	80079e0 <USBD_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 f955 	bl	8008c74 <USBD_CtlError>
            ret = USBD_FAIL;
 80079ca:	2303      	movs	r3, #3
 80079cc:	77fb      	strb	r3, [r7, #31]
          break;
 80079ce:	e007      	b.n	80079e0 <USBD_HID_Setup+0x1f4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 f94e 	bl	8008c74 <USBD_CtlError>
          ret = USBD_FAIL;
 80079d8:	2303      	movs	r3, #3
 80079da:	77fb      	strb	r3, [r7, #31]
          break;
 80079dc:	e000      	b.n	80079e0 <USBD_HID_Setup+0x1f4>
          break;
 80079de:	bf00      	nop
      }
      break;
 80079e0:	e047      	b.n	8007a72 <USBD_HID_Setup+0x286>

    case 0xC1:			//this is for the og xbox, this is the custom vendor request
    	xid_ran = 1;
 80079e2:	4b28      	ldr	r3, [pc, #160]	; (8007a84 <USBD_HID_Setup+0x298>)
 80079e4:	2201      	movs	r2, #1
 80079e6:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	785b      	ldrb	r3, [r3, #1]
 80079ec:	2b06      	cmp	r3, #6
 80079ee:	d10f      	bne.n	8007a10 <USBD_HID_Setup+0x224>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	885b      	ldrh	r3, [r3, #2]
 80079f4:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 80079f8:	d10a      	bne.n	8007a10 <USBD_HID_Setup+0x224>
    		len = 16;
 80079fa:	2310      	movs	r3, #16
 80079fc:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 80079fe:	4b23      	ldr	r3, [pc, #140]	; (8007a8c <USBD_HID_Setup+0x2a0>)
 8007a00:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8007a02:	8afb      	ldrh	r3, [r7, #22]
 8007a04:	461a      	mov	r2, r3
 8007a06:	6939      	ldr	r1, [r7, #16]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 f9a4 	bl	8008d56 <USBD_CtlSendData>
 8007a0e:	e027      	b.n	8007a60 <USBD_HID_Setup+0x274>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d10f      	bne.n	8007a38 <USBD_HID_Setup+0x24c>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	885b      	ldrh	r3, [r3, #2]
 8007a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a20:	d10a      	bne.n	8007a38 <USBD_HID_Setup+0x24c>
    		len = 20;
 8007a22:	2314      	movs	r3, #20
 8007a24:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8007a26:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <USBD_HID_Setup+0x2a4>)
 8007a28:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8007a2a:	8afb      	ldrh	r3, [r7, #22]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6939      	ldr	r1, [r7, #16]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 f990 	bl	8008d56 <USBD_CtlSendData>
 8007a36:	e013      	b.n	8007a60 <USBD_HID_Setup+0x274>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	785b      	ldrb	r3, [r3, #1]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d117      	bne.n	8007a70 <USBD_HID_Setup+0x284>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	885b      	ldrh	r3, [r3, #2]
 8007a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a48:	d112      	bne.n	8007a70 <USBD_HID_Setup+0x284>
    		len = 6;
 8007a4a:	2306      	movs	r3, #6
 8007a4c:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8007a4e:	4b11      	ldr	r3, [pc, #68]	; (8007a94 <USBD_HID_Setup+0x2a8>)
 8007a50:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8007a52:	8afb      	ldrh	r3, [r7, #22]
 8007a54:	461a      	mov	r2, r3
 8007a56:	6939      	ldr	r1, [r7, #16]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 f97c 	bl	8008d56 <USBD_CtlSendData>
    	}
    break;
 8007a5e:	e007      	b.n	8007a70 <USBD_HID_Setup+0x284>
 8007a60:	e006      	b.n	8007a70 <USBD_HID_Setup+0x284>


    default:
      USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f905 	bl	8008c74 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	77fb      	strb	r3, [r7, #31]
      break;
 8007a6e:	e000      	b.n	8007a72 <USBD_HID_Setup+0x286>
    break;
 8007a70:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3724      	adds	r7, #36	; 0x24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd90      	pop	{r4, r7, pc}
 8007a7c:	20004fa4 	.word	0x20004fa4
 8007a80:	08012678 	.word	0x08012678
 8007a84:	20000625 	.word	0x20000625
 8007a88:	20000626 	.word	0x20000626
 8007a8c:	20000084 	.word	0x20000084
 8007a90:	200000a0 	.word	0x200000a0
 8007a94:	200000b4 	.word	0x200000b4

08007a98 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aac:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e013      	b.n	8007ae0 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d10c      	bne.n	8007ade <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	7b1b      	ldrb	r3, [r3, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d108      	bne.n	8007ade <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007ad2:	88fb      	ldrh	r3, [r7, #6]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	2181      	movs	r1, #129	; 0x81
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f004 faf2 	bl	800c0c2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2220      	movs	r2, #32
 8007af4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007af6:	4b03      	ldr	r3, [pc, #12]	; (8007b04 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	20000044 	.word	0x20000044

08007b08 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8007b10:	bf00      	nop
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
	...

08007b20 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007b2e:	4b03      	ldr	r3, [pc, #12]	; (8007b3c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	20000064 	.word	0x20000064

08007b40 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b52:	2200      	movs	r2, #0
 8007b54:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	220a      	movs	r2, #10
 8007b70:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007b72:	4b03      	ldr	r3, [pc, #12]	; (8007b80 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	20000094 	.word	0x20000094

08007b84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e01f      	b.n	8007bdc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	79fa      	ldrb	r2, [r7, #7]
 8007bce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f004 f941 	bl	800be58 <USBD_LL_Init>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e016      	b.n	8007c2a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	f107 020e 	add.w	r2, r7, #14
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4798      	blx	r3
 8007c20:	4602      	mov	r2, r0
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f004 f958 	bl	800bef0 <USBD_LL_Start>
 8007c40:	4603      	mov	r3, r0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d009      	beq.n	8007c8e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	78fa      	ldrb	r2, [r7, #3]
 8007c84:	4611      	mov	r1, r2
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d007      	beq.n	8007cbe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	78fa      	ldrb	r2, [r7, #3]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	4798      	blx	r3
  }

  return USBD_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 ff90 	bl	8008c00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d01a      	beq.n	8007d3a <USBD_LL_SetupStage+0x72>
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d822      	bhi.n	8007d4e <USBD_LL_SetupStage+0x86>
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <USBD_LL_SetupStage+0x4a>
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d00a      	beq.n	8007d26 <USBD_LL_SetupStage+0x5e>
 8007d10:	e01d      	b.n	8007d4e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa62 	bl	80081e4 <USBD_StdDevReq>
 8007d20:	4603      	mov	r3, r0
 8007d22:	73fb      	strb	r3, [r7, #15]
      break;
 8007d24:	e020      	b.n	8007d68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fac6 	bl	80082c0 <USBD_StdItfReq>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73fb      	strb	r3, [r7, #15]
      break;
 8007d38:	e016      	b.n	8007d68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fb05 	bl	8008352 <USBD_StdEPReq>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d4c:	e00c      	b.n	8007d68 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f004 f927 	bl	800bfb0 <USBD_LL_StallEP>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
      break;
 8007d66:	bf00      	nop
  }

  return ret;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b086      	sub	sp, #24
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	607a      	str	r2, [r7, #4]
 8007d7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007d80:	7afb      	ldrb	r3, [r7, #11]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d138      	bne.n	8007df8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d14a      	bne.n	8007e2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d913      	bls.n	8007dcc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	1ad2      	subs	r2, r2, r3
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	bf28      	it	cs
 8007dbe:	4613      	movcs	r3, r2
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 fff2 	bl	8008dae <USBD_CtlContinueRx>
 8007dca:	e030      	b.n	8007e2e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d10b      	bne.n	8007df0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 ffed 	bl	8008dd0 <USBD_CtlSendStatus>
 8007df6:	e01a      	b.n	8007e2e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d114      	bne.n	8007e2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00e      	beq.n	8007e2e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	7afa      	ldrb	r2, [r7, #11]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	4798      	blx	r3
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	e000      	b.n	8007e30 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	460b      	mov	r3, r1
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d16b      	bne.n	8007f24 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d156      	bne.n	8007f0a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d914      	bls.n	8007e92 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	1ad2      	subs	r2, r2, r3
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6879      	ldr	r1, [r7, #4]
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 ff84 	bl	8008d8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e84:	2300      	movs	r3, #0
 8007e86:	2200      	movs	r2, #0
 8007e88:	2100      	movs	r1, #0
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f004 f93a 	bl	800c104 <USBD_LL_PrepareReceive>
 8007e90:	e03b      	b.n	8007f0a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d11c      	bne.n	8007ed8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d316      	bcc.n	8007ed8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d20f      	bcs.n	8007ed8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2100      	movs	r1, #0
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 ff65 	bl	8008d8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f004 f917 	bl	800c104 <USBD_LL_PrepareReceive>
 8007ed6:	e018      	b.n	8007f0a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d10b      	bne.n	8007efc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007efc:	2180      	movs	r1, #128	; 0x80
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f004 f856 	bl	800bfb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 ff76 	bl	8008df6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d122      	bne.n	8007f5a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff fe98 	bl	8007c4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f22:	e01a      	b.n	8007f5a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d114      	bne.n	8007f5a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00e      	beq.n	8007f5a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	7afa      	ldrb	r2, [r7, #11]
 8007f46:	4611      	mov	r1, r2
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	4798      	blx	r3
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	e000      	b.n	8007f5c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e02f      	b.n	8007ff8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00f      	beq.n	8007fc2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6852      	ldr	r2, [r2, #4]
 8007fba:	b2d2      	uxtb	r2, r2
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fc2:	2340      	movs	r3, #64	; 0x40
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f003 ffac 	bl	800bf26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2240      	movs	r2, #64	; 0x40
 8007fda:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fde:	2340      	movs	r3, #64	; 0x40
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2180      	movs	r1, #128	; 0x80
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f003 ff9e 	bl	800bf26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2240      	movs	r2, #64	; 0x40
 8007ff4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800802e:	b2da      	uxtb	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2204      	movs	r2, #4
 800803a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b04      	cmp	r3, #4
 800805e:	d106      	bne.n	800806e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008066:	b2da      	uxtb	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800808e:	2303      	movs	r3, #3
 8008090:	e012      	b.n	80080b8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b03      	cmp	r3, #3
 800809c:	d10b      	bne.n	80080b6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d005      	beq.n	80080b6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e014      	b.n	8008104 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d10d      	bne.n	8008102 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d007      	beq.n	8008102 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	4611      	mov	r1, r2
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008122:	2303      	movs	r3, #3
 8008124:	e014      	b.n	8008150 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b03      	cmp	r3, #3
 8008130:	d10d      	bne.n	800814e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	d007      	beq.n	800814e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	4611      	mov	r1, r2
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008184:	2b00      	cmp	r3, #0
 8008186:	d009      	beq.n	800819c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6852      	ldr	r2, [r2, #4]
 8008194:	b2d2      	uxtb	r2, r2
 8008196:	4611      	mov	r1, r2
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	4798      	blx	r3
  }

  return USBD_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b087      	sub	sp, #28
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	3301      	adds	r3, #1
 80081bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80081c4:	8a3b      	ldrh	r3, [r7, #16]
 80081c6:	021b      	lsls	r3, r3, #8
 80081c8:	b21a      	sxth	r2, r3
 80081ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	b21b      	sxth	r3, r3
 80081d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80081d4:	89fb      	ldrh	r3, [r7, #14]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
	...

080081e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081fa:	2b40      	cmp	r3, #64	; 0x40
 80081fc:	d005      	beq.n	800820a <USBD_StdDevReq+0x26>
 80081fe:	2b40      	cmp	r3, #64	; 0x40
 8008200:	d853      	bhi.n	80082aa <USBD_StdDevReq+0xc6>
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00b      	beq.n	800821e <USBD_StdDevReq+0x3a>
 8008206:	2b20      	cmp	r3, #32
 8008208:	d14f      	bne.n	80082aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	4798      	blx	r3
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]
      break;
 800821c:	e04a      	b.n	80082b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	785b      	ldrb	r3, [r3, #1]
 8008222:	2b09      	cmp	r3, #9
 8008224:	d83b      	bhi.n	800829e <USBD_StdDevReq+0xba>
 8008226:	a201      	add	r2, pc, #4	; (adr r2, 800822c <USBD_StdDevReq+0x48>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	08008281 	.word	0x08008281
 8008230:	08008295 	.word	0x08008295
 8008234:	0800829f 	.word	0x0800829f
 8008238:	0800828b 	.word	0x0800828b
 800823c:	0800829f 	.word	0x0800829f
 8008240:	0800825f 	.word	0x0800825f
 8008244:	08008255 	.word	0x08008255
 8008248:	0800829f 	.word	0x0800829f
 800824c:	08008277 	.word	0x08008277
 8008250:	08008269 	.word	0x08008269
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f9de 	bl	8008618 <USBD_GetDescriptor>
          break;
 800825c:	e024      	b.n	80082a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fb43 	bl	80088ec <USBD_SetAddress>
          break;
 8008266:	e01f      	b.n	80082a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fb82 	bl	8008974 <USBD_SetConfig>
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]
          break;
 8008274:	e018      	b.n	80082a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fc21 	bl	8008ac0 <USBD_GetConfig>
          break;
 800827e:	e013      	b.n	80082a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fc52 	bl	8008b2c <USBD_GetStatus>
          break;
 8008288:	e00e      	b.n	80082a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fc81 	bl	8008b94 <USBD_SetFeature>
          break;
 8008292:	e009      	b.n	80082a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fc90 	bl	8008bbc <USBD_ClrFeature>
          break;
 800829c:	e004      	b.n	80082a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fce7 	bl	8008c74 <USBD_CtlError>
          break;
 80082a6:	bf00      	nop
      }
      break;
 80082a8:	e004      	b.n	80082b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fce1 	bl	8008c74 <USBD_CtlError>
      break;
 80082b2:	bf00      	nop
  }

  return ret;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop

080082c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082d6:	2b40      	cmp	r3, #64	; 0x40
 80082d8:	d005      	beq.n	80082e6 <USBD_StdItfReq+0x26>
 80082da:	2b40      	cmp	r3, #64	; 0x40
 80082dc:	d82f      	bhi.n	800833e <USBD_StdItfReq+0x7e>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <USBD_StdItfReq+0x26>
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d12b      	bne.n	800833e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	3b01      	subs	r3, #1
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d81d      	bhi.n	8008330 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	889b      	ldrh	r3, [r3, #4]
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d813      	bhi.n	8008326 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	4798      	blx	r3
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d110      	bne.n	800833a <USBD_StdItfReq+0x7a>
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10d      	bne.n	800833a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fd56 	bl	8008dd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008324:	e009      	b.n	800833a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fca3 	bl	8008c74 <USBD_CtlError>
          break;
 800832e:	e004      	b.n	800833a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fc9e 	bl	8008c74 <USBD_CtlError>
          break;
 8008338:	e000      	b.n	800833c <USBD_StdItfReq+0x7c>
          break;
 800833a:	bf00      	nop
      }
      break;
 800833c:	e004      	b.n	8008348 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fc97 	bl	8008c74 <USBD_CtlError>
      break;
 8008346:	bf00      	nop
  }

  return ret;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	889b      	ldrh	r3, [r3, #4]
 8008364:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	d007      	beq.n	8008382 <USBD_StdEPReq+0x30>
 8008372:	2b40      	cmp	r3, #64	; 0x40
 8008374:	f200 8145 	bhi.w	8008602 <USBD_StdEPReq+0x2b0>
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00c      	beq.n	8008396 <USBD_StdEPReq+0x44>
 800837c:	2b20      	cmp	r3, #32
 800837e:	f040 8140 	bne.w	8008602 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	4798      	blx	r3
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]
      break;
 8008394:	e13a      	b.n	800860c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	2b03      	cmp	r3, #3
 800839c:	d007      	beq.n	80083ae <USBD_StdEPReq+0x5c>
 800839e:	2b03      	cmp	r3, #3
 80083a0:	f300 8129 	bgt.w	80085f6 <USBD_StdEPReq+0x2a4>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d07f      	beq.n	80084a8 <USBD_StdEPReq+0x156>
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d03c      	beq.n	8008426 <USBD_StdEPReq+0xd4>
 80083ac:	e123      	b.n	80085f6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d002      	beq.n	80083c0 <USBD_StdEPReq+0x6e>
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d016      	beq.n	80083ec <USBD_StdEPReq+0x9a>
 80083be:	e02c      	b.n	800841a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00d      	beq.n	80083e2 <USBD_StdEPReq+0x90>
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	2b80      	cmp	r3, #128	; 0x80
 80083ca:	d00a      	beq.n	80083e2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f003 fded 	bl	800bfb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083d6:	2180      	movs	r1, #128	; 0x80
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f003 fde9 	bl	800bfb0 <USBD_LL_StallEP>
 80083de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083e0:	e020      	b.n	8008424 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fc45 	bl	8008c74 <USBD_CtlError>
              break;
 80083ea:	e01b      	b.n	8008424 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	885b      	ldrh	r3, [r3, #2]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10e      	bne.n	8008412 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <USBD_StdEPReq+0xc0>
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b80      	cmp	r3, #128	; 0x80
 80083fe:	d008      	beq.n	8008412 <USBD_StdEPReq+0xc0>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	88db      	ldrh	r3, [r3, #6]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f003 fdcf 	bl	800bfb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fcdc 	bl	8008dd0 <USBD_CtlSendStatus>

              break;
 8008418:	e004      	b.n	8008424 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fc29 	bl	8008c74 <USBD_CtlError>
              break;
 8008422:	bf00      	nop
          }
          break;
 8008424:	e0ec      	b.n	8008600 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d002      	beq.n	8008438 <USBD_StdEPReq+0xe6>
 8008432:	2b03      	cmp	r3, #3
 8008434:	d016      	beq.n	8008464 <USBD_StdEPReq+0x112>
 8008436:	e030      	b.n	800849a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00d      	beq.n	800845a <USBD_StdEPReq+0x108>
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b80      	cmp	r3, #128	; 0x80
 8008442:	d00a      	beq.n	800845a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f003 fdb1 	bl	800bfb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800844e:	2180      	movs	r1, #128	; 0x80
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f003 fdad 	bl	800bfb0 <USBD_LL_StallEP>
 8008456:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008458:	e025      	b.n	80084a6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fc09 	bl	8008c74 <USBD_CtlError>
              break;
 8008462:	e020      	b.n	80084a6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	885b      	ldrh	r3, [r3, #2]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d11b      	bne.n	80084a4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f003 fdb7 	bl	800bfee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fca5 	bl	8008dd0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	4798      	blx	r3
 8008494:	4603      	mov	r3, r0
 8008496:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008498:	e004      	b.n	80084a4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fbe9 	bl	8008c74 <USBD_CtlError>
              break;
 80084a2:	e000      	b.n	80084a6 <USBD_StdEPReq+0x154>
              break;
 80084a4:	bf00      	nop
          }
          break;
 80084a6:	e0ab      	b.n	8008600 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d002      	beq.n	80084ba <USBD_StdEPReq+0x168>
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d032      	beq.n	800851e <USBD_StdEPReq+0x1cc>
 80084b8:	e097      	b.n	80085ea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d007      	beq.n	80084d0 <USBD_StdEPReq+0x17e>
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	2b80      	cmp	r3, #128	; 0x80
 80084c4:	d004      	beq.n	80084d0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fbd3 	bl	8008c74 <USBD_CtlError>
                break;
 80084ce:	e091      	b.n	80085f4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	da0b      	bge.n	80084f0 <USBD_StdEPReq+0x19e>
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084de:	4613      	mov	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	3310      	adds	r3, #16
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	4413      	add	r3, r2
 80084ec:	3304      	adds	r3, #4
 80084ee:	e00b      	b.n	8008508 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	4413      	add	r3, r2
 8008506:	3304      	adds	r3, #4
 8008508:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2202      	movs	r2, #2
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fc1d 	bl	8008d56 <USBD_CtlSendData>
              break;
 800851c:	e06a      	b.n	80085f4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800851e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008522:	2b00      	cmp	r3, #0
 8008524:	da11      	bge.n	800854a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	f003 020f 	and.w	r2, r3, #15
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	440b      	add	r3, r1
 8008538:	3324      	adds	r3, #36	; 0x24
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d117      	bne.n	8008570 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fb96 	bl	8008c74 <USBD_CtlError>
                  break;
 8008548:	e054      	b.n	80085f4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	f003 020f 	and.w	r2, r3, #15
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d104      	bne.n	8008570 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fb83 	bl	8008c74 <USBD_CtlError>
                  break;
 800856e:	e041      	b.n	80085f4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008574:	2b00      	cmp	r3, #0
 8008576:	da0b      	bge.n	8008590 <USBD_StdEPReq+0x23e>
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800857e:	4613      	mov	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	3310      	adds	r3, #16
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	4413      	add	r3, r2
 800858c:	3304      	adds	r3, #4
 800858e:	e00b      	b.n	80085a8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	4413      	add	r3, r2
 80085a6:	3304      	adds	r3, #4
 80085a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <USBD_StdEPReq+0x264>
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	2b80      	cmp	r3, #128	; 0x80
 80085b4:	d103      	bne.n	80085be <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	e00e      	b.n	80085dc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085be:	7bbb      	ldrb	r3, [r7, #14]
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f003 fd32 	bl	800c02c <USBD_LL_IsStallEP>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2201      	movs	r2, #1
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	e002      	b.n	80085dc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2202      	movs	r2, #2
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fbb7 	bl	8008d56 <USBD_CtlSendData>
              break;
 80085e8:	e004      	b.n	80085f4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fb41 	bl	8008c74 <USBD_CtlError>
              break;
 80085f2:	bf00      	nop
          }
          break;
 80085f4:	e004      	b.n	8008600 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fb3b 	bl	8008c74 <USBD_CtlError>
          break;
 80085fe:	bf00      	nop
      }
      break;
 8008600:	e004      	b.n	800860c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fb35 	bl	8008c74 <USBD_CtlError>
      break;
 800860a:	bf00      	nop
  }

  return ret;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	885b      	ldrh	r3, [r3, #2]
 8008632:	0a1b      	lsrs	r3, r3, #8
 8008634:	b29b      	uxth	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	2b06      	cmp	r3, #6
 800863a:	f200 8128 	bhi.w	800888e <USBD_GetDescriptor+0x276>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <USBD_GetDescriptor+0x2c>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008661 	.word	0x08008661
 8008648:	08008679 	.word	0x08008679
 800864c:	080086b9 	.word	0x080086b9
 8008650:	0800888f 	.word	0x0800888f
 8008654:	0800888f 	.word	0x0800888f
 8008658:	0800882f 	.word	0x0800882f
 800865c:	0800885b 	.word	0x0800885b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
      break;
 8008676:	e112      	b.n	800889e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	7c1b      	ldrb	r3, [r3, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10d      	bne.n	800869c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	f107 0208 	add.w	r2, r7, #8
 800868c:	4610      	mov	r0, r2
 800868e:	4798      	blx	r3
 8008690:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3301      	adds	r3, #1
 8008696:	2202      	movs	r2, #2
 8008698:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800869a:	e100      	b.n	800889e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	f107 0208 	add.w	r2, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3301      	adds	r3, #1
 80086b2:	2202      	movs	r2, #2
 80086b4:	701a      	strb	r2, [r3, #0]
      break;
 80086b6:	e0f2      	b.n	800889e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	885b      	ldrh	r3, [r3, #2]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b05      	cmp	r3, #5
 80086c0:	f200 80ac 	bhi.w	800881c <USBD_GetDescriptor+0x204>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <USBD_GetDescriptor+0xb4>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	080086e5 	.word	0x080086e5
 80086d0:	08008719 	.word	0x08008719
 80086d4:	0800874d 	.word	0x0800874d
 80086d8:	08008781 	.word	0x08008781
 80086dc:	080087b5 	.word	0x080087b5
 80086e0:	080087e9 	.word	0x080087e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00b      	beq.n	8008708 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	7c12      	ldrb	r2, [r2, #16]
 80086fc:	f107 0108 	add.w	r1, r7, #8
 8008700:	4610      	mov	r0, r2
 8008702:	4798      	blx	r3
 8008704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008706:	e091      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fab2 	bl	8008c74 <USBD_CtlError>
            err++;
 8008710:	7afb      	ldrb	r3, [r7, #11]
 8008712:	3301      	adds	r3, #1
 8008714:	72fb      	strb	r3, [r7, #11]
          break;
 8008716:	e089      	b.n	800882c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00b      	beq.n	800873c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	7c12      	ldrb	r2, [r2, #16]
 8008730:	f107 0108 	add.w	r1, r7, #8
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
 8008738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800873a:	e077      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fa98 	bl	8008c74 <USBD_CtlError>
            err++;
 8008744:	7afb      	ldrb	r3, [r7, #11]
 8008746:	3301      	adds	r3, #1
 8008748:	72fb      	strb	r3, [r7, #11]
          break;
 800874a:	e06f      	b.n	800882c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	7c12      	ldrb	r2, [r2, #16]
 8008764:	f107 0108 	add.w	r1, r7, #8
 8008768:	4610      	mov	r0, r2
 800876a:	4798      	blx	r3
 800876c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800876e:	e05d      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa7e 	bl	8008c74 <USBD_CtlError>
            err++;
 8008778:	7afb      	ldrb	r3, [r7, #11]
 800877a:	3301      	adds	r3, #1
 800877c:	72fb      	strb	r3, [r7, #11]
          break;
 800877e:	e055      	b.n	800882c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00b      	beq.n	80087a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	7c12      	ldrb	r2, [r2, #16]
 8008798:	f107 0108 	add.w	r1, r7, #8
 800879c:	4610      	mov	r0, r2
 800879e:	4798      	blx	r3
 80087a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a2:	e043      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa64 	bl	8008c74 <USBD_CtlError>
            err++;
 80087ac:	7afb      	ldrb	r3, [r7, #11]
 80087ae:	3301      	adds	r3, #1
 80087b0:	72fb      	strb	r3, [r7, #11]
          break;
 80087b2:	e03b      	b.n	800882c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00b      	beq.n	80087d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	7c12      	ldrb	r2, [r2, #16]
 80087cc:	f107 0108 	add.w	r1, r7, #8
 80087d0:	4610      	mov	r0, r2
 80087d2:	4798      	blx	r3
 80087d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087d6:	e029      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fa4a 	bl	8008c74 <USBD_CtlError>
            err++;
 80087e0:	7afb      	ldrb	r3, [r7, #11]
 80087e2:	3301      	adds	r3, #1
 80087e4:	72fb      	strb	r3, [r7, #11]
          break;
 80087e6:	e021      	b.n	800882c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	7c12      	ldrb	r2, [r2, #16]
 8008800:	f107 0108 	add.w	r1, r7, #8
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3
 8008808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880a:	e00f      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa30 	bl	8008c74 <USBD_CtlError>
            err++;
 8008814:	7afb      	ldrb	r3, [r7, #11]
 8008816:	3301      	adds	r3, #1
 8008818:	72fb      	strb	r3, [r7, #11]
          break;
 800881a:	e007      	b.n	800882c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa28 	bl	8008c74 <USBD_CtlError>
          err++;
 8008824:	7afb      	ldrb	r3, [r7, #11]
 8008826:	3301      	adds	r3, #1
 8008828:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800882a:	bf00      	nop
      }
      break;
 800882c:	e037      	b.n	800889e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	7c1b      	ldrb	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d109      	bne.n	800884a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883e:	f107 0208 	add.w	r2, r7, #8
 8008842:	4610      	mov	r0, r2
 8008844:	4798      	blx	r3
 8008846:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008848:	e029      	b.n	800889e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fa11 	bl	8008c74 <USBD_CtlError>
        err++;
 8008852:	7afb      	ldrb	r3, [r7, #11]
 8008854:	3301      	adds	r3, #1
 8008856:	72fb      	strb	r3, [r7, #11]
      break;
 8008858:	e021      	b.n	800889e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	7c1b      	ldrb	r3, [r3, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10d      	bne.n	800887e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	f107 0208 	add.w	r2, r7, #8
 800886e:	4610      	mov	r0, r2
 8008870:	4798      	blx	r3
 8008872:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3301      	adds	r3, #1
 8008878:	2207      	movs	r2, #7
 800887a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800887c:	e00f      	b.n	800889e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f9f7 	bl	8008c74 <USBD_CtlError>
        err++;
 8008886:	7afb      	ldrb	r3, [r7, #11]
 8008888:	3301      	adds	r3, #1
 800888a:	72fb      	strb	r3, [r7, #11]
      break;
 800888c:	e007      	b.n	800889e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f9ef 	bl	8008c74 <USBD_CtlError>
      err++;
 8008896:	7afb      	ldrb	r3, [r7, #11]
 8008898:	3301      	adds	r3, #1
 800889a:	72fb      	strb	r3, [r7, #11]
      break;
 800889c:	bf00      	nop
  }

  if (err != 0U)
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d11e      	bne.n	80088e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	88db      	ldrh	r3, [r3, #6]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d016      	beq.n	80088da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80088ac:	893b      	ldrh	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00e      	beq.n	80088d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	88da      	ldrh	r2, [r3, #6]
 80088b6:	893b      	ldrh	r3, [r7, #8]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	bf28      	it	cs
 80088bc:	4613      	movcs	r3, r2
 80088be:	b29b      	uxth	r3, r3
 80088c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088c2:	893b      	ldrh	r3, [r7, #8]
 80088c4:	461a      	mov	r2, r3
 80088c6:	68f9      	ldr	r1, [r7, #12]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fa44 	bl	8008d56 <USBD_CtlSendData>
 80088ce:	e009      	b.n	80088e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f9ce 	bl	8008c74 <USBD_CtlError>
 80088d8:	e004      	b.n	80088e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fa78 	bl	8008dd0 <USBD_CtlSendStatus>
 80088e0:	e000      	b.n	80088e4 <USBD_GetDescriptor+0x2cc>
    return;
 80088e2:	bf00      	nop
  }
}
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop

080088ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	889b      	ldrh	r3, [r3, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d131      	bne.n	8008962 <USBD_SetAddress+0x76>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	88db      	ldrh	r3, [r3, #6]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d12d      	bne.n	8008962 <USBD_SetAddress+0x76>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	885b      	ldrh	r3, [r3, #2]
 800890a:	2b7f      	cmp	r3, #127	; 0x7f
 800890c:	d829      	bhi.n	8008962 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	885b      	ldrh	r3, [r3, #2]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008918:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b03      	cmp	r3, #3
 8008924:	d104      	bne.n	8008930 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f9a3 	bl	8008c74 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892e:	e01d      	b.n	800896c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7bfa      	ldrb	r2, [r7, #15]
 8008934:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f003 fba1 	bl	800c084 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fa44 	bl	8008dd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2202      	movs	r2, #2
 8008952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008956:	e009      	b.n	800896c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008960:	e004      	b.n	800896c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f985 	bl	8008c74 <USBD_CtlError>
  }
}
 800896a:	bf00      	nop
 800896c:	bf00      	nop
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	885b      	ldrh	r3, [r3, #2]
 8008986:	b2da      	uxtb	r2, r3
 8008988:	4b4c      	ldr	r3, [pc, #304]	; (8008abc <USBD_SetConfig+0x148>)
 800898a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800898c:	4b4b      	ldr	r3, [pc, #300]	; (8008abc <USBD_SetConfig+0x148>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d905      	bls.n	80089a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f96c 	bl	8008c74 <USBD_CtlError>
    return USBD_FAIL;
 800899c:	2303      	movs	r3, #3
 800899e:	e088      	b.n	8008ab2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d002      	beq.n	80089b2 <USBD_SetConfig+0x3e>
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d025      	beq.n	80089fc <USBD_SetConfig+0x88>
 80089b0:	e071      	b.n	8008a96 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089b2:	4b42      	ldr	r3, [pc, #264]	; (8008abc <USBD_SetConfig+0x148>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d01c      	beq.n	80089f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80089ba:	4b40      	ldr	r3, [pc, #256]	; (8008abc <USBD_SetConfig+0x148>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089c4:	4b3d      	ldr	r3, [pc, #244]	; (8008abc <USBD_SetConfig+0x148>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff f948 	bl	8007c60 <USBD_SetClassConfig>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d004      	beq.n	80089e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f949 	bl	8008c74 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089e2:	e065      	b.n	8008ab0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f9f3 	bl	8008dd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2203      	movs	r2, #3
 80089ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089f2:	e05d      	b.n	8008ab0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f9eb 	bl	8008dd0 <USBD_CtlSendStatus>
      break;
 80089fa:	e059      	b.n	8008ab0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089fc:	4b2f      	ldr	r3, [pc, #188]	; (8008abc <USBD_SetConfig+0x148>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d112      	bne.n	8008a2a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a0c:	4b2b      	ldr	r3, [pc, #172]	; (8008abc <USBD_SetConfig+0x148>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a16:	4b29      	ldr	r3, [pc, #164]	; (8008abc <USBD_SetConfig+0x148>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff f93b 	bl	8007c98 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f9d4 	bl	8008dd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a28:	e042      	b.n	8008ab0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008a2a:	4b24      	ldr	r3, [pc, #144]	; (8008abc <USBD_SetConfig+0x148>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d02a      	beq.n	8008a8e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff f929 	bl	8007c98 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a46:	4b1d      	ldr	r3, [pc, #116]	; (8008abc <USBD_SetConfig+0x148>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a50:	4b1a      	ldr	r3, [pc, #104]	; (8008abc <USBD_SetConfig+0x148>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff f902 	bl	8007c60 <USBD_SetClassConfig>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00f      	beq.n	8008a86 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f903 	bl	8008c74 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff f90e 	bl	8007c98 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a84:	e014      	b.n	8008ab0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f9a2 	bl	8008dd0 <USBD_CtlSendStatus>
      break;
 8008a8c:	e010      	b.n	8008ab0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f99e 	bl	8008dd0 <USBD_CtlSendStatus>
      break;
 8008a94:	e00c      	b.n	8008ab0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f8eb 	bl	8008c74 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a9e:	4b07      	ldr	r3, [pc, #28]	; (8008abc <USBD_SetConfig+0x148>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff f8f7 	bl	8007c98 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	73fb      	strb	r3, [r7, #15]
      break;
 8008aae:	bf00      	nop
  }

  return ret;
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000627 	.word	0x20000627

08008ac0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	88db      	ldrh	r3, [r3, #6]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d004      	beq.n	8008adc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f8cd 	bl	8008c74 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ada:	e023      	b.n	8008b24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	dc02      	bgt.n	8008aee <USBD_GetConfig+0x2e>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dc03      	bgt.n	8008af4 <USBD_GetConfig+0x34>
 8008aec:	e015      	b.n	8008b1a <USBD_GetConfig+0x5a>
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d00b      	beq.n	8008b0a <USBD_GetConfig+0x4a>
 8008af2:	e012      	b.n	8008b1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3308      	adds	r3, #8
 8008afe:	2201      	movs	r2, #1
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f927 	bl	8008d56 <USBD_CtlSendData>
        break;
 8008b08:	e00c      	b.n	8008b24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	2201      	movs	r2, #1
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f91f 	bl	8008d56 <USBD_CtlSendData>
        break;
 8008b18:	e004      	b.n	8008b24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f8a9 	bl	8008c74 <USBD_CtlError>
        break;
 8008b22:	bf00      	nop
}
 8008b24:	bf00      	nop
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d81e      	bhi.n	8008b82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	88db      	ldrh	r3, [r3, #6]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d004      	beq.n	8008b56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f890 	bl	8008c74 <USBD_CtlError>
        break;
 8008b54:	e01a      	b.n	8008b8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d005      	beq.n	8008b72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	f043 0202 	orr.w	r2, r3, #2
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	330c      	adds	r3, #12
 8008b76:	2202      	movs	r2, #2
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f8eb 	bl	8008d56 <USBD_CtlSendData>
      break;
 8008b80:	e004      	b.n	8008b8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f875 	bl	8008c74 <USBD_CtlError>
      break;
 8008b8a:	bf00      	nop
  }
}
 8008b8c:	bf00      	nop
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	885b      	ldrh	r3, [r3, #2]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d106      	bne.n	8008bb4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f90e 	bl	8008dd0 <USBD_CtlSendStatus>
  }
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d80b      	bhi.n	8008bec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	885b      	ldrh	r3, [r3, #2]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d10c      	bne.n	8008bf6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f8f3 	bl	8008dd0 <USBD_CtlSendStatus>
      }
      break;
 8008bea:	e004      	b.n	8008bf6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f840 	bl	8008c74 <USBD_CtlError>
      break;
 8008bf4:	e000      	b.n	8008bf8 <USBD_ClrFeature+0x3c>
      break;
 8008bf6:	bf00      	nop
  }
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	781a      	ldrb	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	781a      	ldrb	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3301      	adds	r3, #1
 8008c28:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f7ff fabb 	bl	80081a6 <SWAPBYTE>
 8008c30:	4603      	mov	r3, r0
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3301      	adds	r3, #1
 8008c42:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7ff faae 	bl	80081a6 <SWAPBYTE>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f7ff faa1 	bl	80081a6 <SWAPBYTE>
 8008c64:	4603      	mov	r3, r0
 8008c66:	461a      	mov	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	80da      	strh	r2, [r3, #6]
}
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c7e:	2180      	movs	r1, #128	; 0x80
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f003 f995 	bl	800bfb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c86:	2100      	movs	r1, #0
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f003 f991 	bl	800bfb0 <USBD_LL_StallEP>
}
 8008c8e:	bf00      	nop
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b086      	sub	sp, #24
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d036      	beq.n	8008d1a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008cb0:	6938      	ldr	r0, [r7, #16]
 8008cb2:	f000 f836 	bl	8008d22 <USBD_GetLen>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	3301      	adds	r3, #1
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	4413      	add	r3, r2
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	7812      	ldrb	r2, [r2, #0]
 8008cce:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	4413      	add	r3, r2
 8008cdc:	2203      	movs	r2, #3
 8008cde:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ce6:	e013      	b.n	8008d10 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	4413      	add	r3, r2
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	7812      	ldrb	r2, [r2, #0]
 8008cf2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	613b      	str	r3, [r7, #16]
    idx++;
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	4413      	add	r3, r2
 8008d06:	2200      	movs	r2, #0
 8008d08:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1e7      	bne.n	8008ce8 <USBD_GetString+0x52>
 8008d18:	e000      	b.n	8008d1c <USBD_GetString+0x86>
    return;
 8008d1a:	bf00      	nop
  }
}
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d32:	e005      	b.n	8008d40 <USBD_GetLen+0x1e>
  {
    len++;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	3301      	adds	r3, #1
 8008d38:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1f5      	bne.n	8008d34 <USBD_GetLen+0x12>
  }

  return len;
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	60b9      	str	r1, [r7, #8]
 8008d60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2202      	movs	r2, #2
 8008d66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f003 f9a0 	bl	800c0c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f003 f98f 	bl	800c0c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f003 f99f 	bl	800c104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2204      	movs	r2, #4
 8008ddc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008de0:	2300      	movs	r3, #0
 8008de2:	2200      	movs	r2, #0
 8008de4:	2100      	movs	r1, #0
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f003 f96b 	bl	800c0c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b082      	sub	sp, #8
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2205      	movs	r2, #5
 8008e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e06:	2300      	movs	r3, #0
 8008e08:	2200      	movs	r2, #0
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f003 f979 	bl	800c104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <__NVIC_SetPriority>:
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	6039      	str	r1, [r7, #0]
 8008e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	db0a      	blt.n	8008e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	490c      	ldr	r1, [pc, #48]	; (8008e68 <__NVIC_SetPriority+0x4c>)
 8008e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e3a:	0112      	lsls	r2, r2, #4
 8008e3c:	b2d2      	uxtb	r2, r2
 8008e3e:	440b      	add	r3, r1
 8008e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e44:	e00a      	b.n	8008e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	4908      	ldr	r1, [pc, #32]	; (8008e6c <__NVIC_SetPriority+0x50>)
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	3b04      	subs	r3, #4
 8008e54:	0112      	lsls	r2, r2, #4
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	440b      	add	r3, r1
 8008e5a:	761a      	strb	r2, [r3, #24]
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	e000e100 	.word	0xe000e100
 8008e6c:	e000ed00 	.word	0xe000ed00

08008e70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008e70:	b580      	push	{r7, lr}
 8008e72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008e74:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <SysTick_Handler+0x1c>)
 8008e76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008e78:	f001 fcfe 	bl	800a878 <xTaskGetSchedulerState>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d001      	beq.n	8008e86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008e82:	f002 fae9 	bl	800b458 <xPortSysTickHandler>
  }
}
 8008e86:	bf00      	nop
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	e000e010 	.word	0xe000e010

08008e90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008e94:	2100      	movs	r1, #0
 8008e96:	f06f 0004 	mvn.w	r0, #4
 8008e9a:	f7ff ffbf 	bl	8008e1c <__NVIC_SetPriority>
#endif
}
 8008e9e:	bf00      	nop
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eaa:	f3ef 8305 	mrs	r3, IPSR
 8008eae:	603b      	str	r3, [r7, #0]
  return(result);
 8008eb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008eb6:	f06f 0305 	mvn.w	r3, #5
 8008eba:	607b      	str	r3, [r7, #4]
 8008ebc:	e00c      	b.n	8008ed8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ebe:	4b0a      	ldr	r3, [pc, #40]	; (8008ee8 <osKernelInitialize+0x44>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d105      	bne.n	8008ed2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ec6:	4b08      	ldr	r3, [pc, #32]	; (8008ee8 <osKernelInitialize+0x44>)
 8008ec8:	2201      	movs	r2, #1
 8008eca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	607b      	str	r3, [r7, #4]
 8008ed0:	e002      	b.n	8008ed8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ed8:	687b      	ldr	r3, [r7, #4]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20000628 	.word	0x20000628

08008eec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ef2:	f3ef 8305 	mrs	r3, IPSR
 8008ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ef8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008efe:	f06f 0305 	mvn.w	r3, #5
 8008f02:	607b      	str	r3, [r7, #4]
 8008f04:	e010      	b.n	8008f28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f06:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <osKernelStart+0x48>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d109      	bne.n	8008f22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f0e:	f7ff ffbf 	bl	8008e90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f12:	4b08      	ldr	r3, [pc, #32]	; (8008f34 <osKernelStart+0x48>)
 8008f14:	2202      	movs	r2, #2
 8008f16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f18:	f001 f866 	bl	8009fe8 <vTaskStartScheduler>
      stat = osOK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	607b      	str	r3, [r7, #4]
 8008f20:	e002      	b.n	8008f28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f22:	f04f 33ff 	mov.w	r3, #4294967295
 8008f26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f28:	687b      	ldr	r3, [r7, #4]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000628 	.word	0x20000628

08008f38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08e      	sub	sp, #56	; 0x38
 8008f3c:	af04      	add	r7, sp, #16
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f48:	f3ef 8305 	mrs	r3, IPSR
 8008f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8008f4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d17e      	bne.n	8009052 <osThreadNew+0x11a>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d07b      	beq.n	8009052 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f5a:	2380      	movs	r3, #128	; 0x80
 8008f5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f5e:	2318      	movs	r3, #24
 8008f60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008f66:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d045      	beq.n	8008ffe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d002      	beq.n	8008f80 <osThreadNew+0x48>
        name = attr->name;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d008      	beq.n	8008fa6 <osThreadNew+0x6e>
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	2b38      	cmp	r3, #56	; 0x38
 8008f98:	d805      	bhi.n	8008fa6 <osThreadNew+0x6e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <osThreadNew+0x72>
        return (NULL);
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e054      	b.n	8009054 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	089b      	lsrs	r3, r3, #2
 8008fb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00e      	beq.n	8008fe0 <osThreadNew+0xa8>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	2b5b      	cmp	r3, #91	; 0x5b
 8008fc8:	d90a      	bls.n	8008fe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d006      	beq.n	8008fe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <osThreadNew+0xa8>
        mem = 1;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	61bb      	str	r3, [r7, #24]
 8008fde:	e010      	b.n	8009002 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10c      	bne.n	8009002 <osThreadNew+0xca>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d108      	bne.n	8009002 <osThreadNew+0xca>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d104      	bne.n	8009002 <osThreadNew+0xca>
          mem = 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61bb      	str	r3, [r7, #24]
 8008ffc:	e001      	b.n	8009002 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d110      	bne.n	800902a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009010:	9202      	str	r2, [sp, #8]
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6a3a      	ldr	r2, [r7, #32]
 800901c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 fe0c 	bl	8009c3c <xTaskCreateStatic>
 8009024:	4603      	mov	r3, r0
 8009026:	613b      	str	r3, [r7, #16]
 8009028:	e013      	b.n	8009052 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d110      	bne.n	8009052 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	b29a      	uxth	r2, r3
 8009034:	f107 0310 	add.w	r3, r7, #16
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 fe57 	bl	8009cf6 <xTaskCreate>
 8009048:	4603      	mov	r3, r0
 800904a:	2b01      	cmp	r3, #1
 800904c:	d001      	beq.n	8009052 <osThreadNew+0x11a>
            hTask = NULL;
 800904e:	2300      	movs	r3, #0
 8009050:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009052:	693b      	ldr	r3, [r7, #16]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3728      	adds	r7, #40	; 0x28
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009064:	f3ef 8305 	mrs	r3, IPSR
 8009068:	60bb      	str	r3, [r7, #8]
  return(result);
 800906a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <osDelay+0x1c>
    stat = osErrorISR;
 8009070:	f06f 0305 	mvn.w	r3, #5
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	e007      	b.n	8009088 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009078:	2300      	movs	r3, #0
 800907a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 ff7c 	bl	8009f80 <vTaskDelay>
    }
  }

  return (stat);
 8009088:	68fb      	ldr	r3, [r7, #12]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4a07      	ldr	r2, [pc, #28]	; (80090c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80090a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	4a06      	ldr	r2, [pc, #24]	; (80090c4 <vApplicationGetIdleTaskMemory+0x30>)
 80090aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2280      	movs	r2, #128	; 0x80
 80090b0:	601a      	str	r2, [r3, #0]
}
 80090b2:	bf00      	nop
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	2000062c 	.word	0x2000062c
 80090c4:	20000688 	.word	0x20000688

080090c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4a07      	ldr	r2, [pc, #28]	; (80090f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80090d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	4a06      	ldr	r2, [pc, #24]	; (80090f8 <vApplicationGetTimerTaskMemory+0x30>)
 80090de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090e6:	601a      	str	r2, [r3, #0]
}
 80090e8:	bf00      	nop
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	20000888 	.word	0x20000888
 80090f8:	200008e4 	.word	0x200008e4

080090fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f103 0208 	add.w	r2, r3, #8
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f04f 32ff 	mov.w	r2, #4294967295
 8009114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f103 0208 	add.w	r2, r3, #8
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f103 0208 	add.w	r2, r3, #8
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800914a:	bf00      	nop
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009156:	b480      	push	{r7}
 8009158:	b085      	sub	sp, #20
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	689a      	ldr	r2, [r3, #8]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	1c5a      	adds	r2, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	601a      	str	r2, [r3, #0]
}
 8009192:	bf00      	nop
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800919e:	b480      	push	{r7}
 80091a0:	b085      	sub	sp, #20
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b4:	d103      	bne.n	80091be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	e00c      	b.n	80091d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	3308      	adds	r3, #8
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	e002      	b.n	80091cc <vListInsert+0x2e>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d2f6      	bcs.n	80091c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	601a      	str	r2, [r3, #0]
}
 8009204:	bf00      	nop
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	6892      	ldr	r2, [r2, #8]
 8009226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6852      	ldr	r2, [r2, #4]
 8009230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	429a      	cmp	r2, r3
 800923a:	d103      	bne.n	8009244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	1e5a      	subs	r2, r3, #1
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10a      	bne.n	800928e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800928a:	bf00      	nop
 800928c:	e7fe      	b.n	800928c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800928e:	f002 f851 	bl	800b334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929a:	68f9      	ldr	r1, [r7, #12]
 800929c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800929e:	fb01 f303 	mul.w	r3, r1, r3
 80092a2:	441a      	add	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092be:	3b01      	subs	r3, #1
 80092c0:	68f9      	ldr	r1, [r7, #12]
 80092c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092c4:	fb01 f303 	mul.w	r3, r1, r3
 80092c8:	441a      	add	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	22ff      	movs	r2, #255	; 0xff
 80092d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	22ff      	movs	r2, #255	; 0xff
 80092da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d114      	bne.n	800930e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d01a      	beq.n	8009322 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3310      	adds	r3, #16
 80092f0:	4618      	mov	r0, r3
 80092f2:	f001 f903 	bl	800a4fc <xTaskRemoveFromEventList>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d012      	beq.n	8009322 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80092fc:	4b0c      	ldr	r3, [pc, #48]	; (8009330 <xQueueGenericReset+0xcc>)
 80092fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	e009      	b.n	8009322 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3310      	adds	r3, #16
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff fef2 	bl	80090fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3324      	adds	r3, #36	; 0x24
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff feed 	bl	80090fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009322:	f002 f837 	bl	800b394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009326:	2301      	movs	r3, #1
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08e      	sub	sp, #56	; 0x38
 8009338:	af02      	add	r7, sp, #8
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10a      	bne.n	800937a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009376:	bf00      	nop
 8009378:	e7fe      	b.n	8009378 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <xQueueGenericCreateStatic+0x52>
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <xQueueGenericCreateStatic+0x56>
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <xQueueGenericCreateStatic+0x58>
 800938a:	2300      	movs	r3, #0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	623b      	str	r3, [r7, #32]
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <xQueueGenericCreateStatic+0x7e>
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <xQueueGenericCreateStatic+0x82>
 80093b2:	2301      	movs	r3, #1
 80093b4:	e000      	b.n	80093b8 <xQueueGenericCreateStatic+0x84>
 80093b6:	2300      	movs	r3, #0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	61fb      	str	r3, [r7, #28]
}
 80093ce:	bf00      	nop
 80093d0:	e7fe      	b.n	80093d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093d2:	2350      	movs	r3, #80	; 0x50
 80093d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2b50      	cmp	r3, #80	; 0x50
 80093da:	d00a      	beq.n	80093f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	61bb      	str	r3, [r7, #24]
}
 80093ee:	bf00      	nop
 80093f0:	e7fe      	b.n	80093f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80093f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80093f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00d      	beq.n	800941a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	2201      	movs	r2, #1
 8009402:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009406:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800940a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	4613      	mov	r3, r2
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	68b9      	ldr	r1, [r7, #8]
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f000 f805 	bl	8009424 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800941c:	4618      	mov	r0, r3
 800941e:	3730      	adds	r7, #48	; 0x30
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d103      	bne.n	8009440 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	e002      	b.n	8009446 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009452:	2101      	movs	r1, #1
 8009454:	69b8      	ldr	r0, [r7, #24]
 8009456:	f7ff ff05 	bl	8009264 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	78fa      	ldrb	r2, [r7, #3]
 800945e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009462:	bf00      	nop
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
	...

0800946c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08e      	sub	sp, #56	; 0x38
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
 8009478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800947a:	2300      	movs	r3, #0
 800947c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10a      	bne.n	800949e <xQueueGenericSend+0x32>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800949a:	bf00      	nop
 800949c:	e7fe      	b.n	800949c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d103      	bne.n	80094ac <xQueueGenericSend+0x40>
 80094a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <xQueueGenericSend+0x44>
 80094ac:	2301      	movs	r3, #1
 80094ae:	e000      	b.n	80094b2 <xQueueGenericSend+0x46>
 80094b0:	2300      	movs	r3, #0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10a      	bne.n	80094cc <xQueueGenericSend+0x60>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d103      	bne.n	80094da <xQueueGenericSend+0x6e>
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <xQueueGenericSend+0x72>
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <xQueueGenericSend+0x74>
 80094de:	2300      	movs	r3, #0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <xQueueGenericSend+0x8e>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	623b      	str	r3, [r7, #32]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094fa:	f001 f9bd 	bl	800a878 <xTaskGetSchedulerState>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d102      	bne.n	800950a <xQueueGenericSend+0x9e>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d101      	bne.n	800950e <xQueueGenericSend+0xa2>
 800950a:	2301      	movs	r3, #1
 800950c:	e000      	b.n	8009510 <xQueueGenericSend+0xa4>
 800950e:	2300      	movs	r3, #0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10a      	bne.n	800952a <xQueueGenericSend+0xbe>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	61fb      	str	r3, [r7, #28]
}
 8009526:	bf00      	nop
 8009528:	e7fe      	b.n	8009528 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800952a:	f001 ff03 	bl	800b334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009536:	429a      	cmp	r2, r3
 8009538:	d302      	bcc.n	8009540 <xQueueGenericSend+0xd4>
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b02      	cmp	r3, #2
 800953e:	d129      	bne.n	8009594 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	68b9      	ldr	r1, [r7, #8]
 8009544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009546:	f000 fa0b 	bl	8009960 <prvCopyDataToQueue>
 800954a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	2b00      	cmp	r3, #0
 8009552:	d010      	beq.n	8009576 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009556:	3324      	adds	r3, #36	; 0x24
 8009558:	4618      	mov	r0, r3
 800955a:	f000 ffcf 	bl	800a4fc <xTaskRemoveFromEventList>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d013      	beq.n	800958c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009564:	4b3f      	ldr	r3, [pc, #252]	; (8009664 <xQueueGenericSend+0x1f8>)
 8009566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	e00a      	b.n	800958c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009578:	2b00      	cmp	r3, #0
 800957a:	d007      	beq.n	800958c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800957c:	4b39      	ldr	r3, [pc, #228]	; (8009664 <xQueueGenericSend+0x1f8>)
 800957e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800958c:	f001 ff02 	bl	800b394 <vPortExitCritical>
				return pdPASS;
 8009590:	2301      	movs	r3, #1
 8009592:	e063      	b.n	800965c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d103      	bne.n	80095a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800959a:	f001 fefb 	bl	800b394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800959e:	2300      	movs	r3, #0
 80095a0:	e05c      	b.n	800965c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d106      	bne.n	80095b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095a8:	f107 0314 	add.w	r3, r7, #20
 80095ac:	4618      	mov	r0, r3
 80095ae:	f001 f809 	bl	800a5c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095b2:	2301      	movs	r3, #1
 80095b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095b6:	f001 feed 	bl	800b394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095ba:	f000 fd7b 	bl	800a0b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095be:	f001 feb9 	bl	800b334 <vPortEnterCritical>
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095c8:	b25b      	sxtb	r3, r3
 80095ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ce:	d103      	bne.n	80095d8 <xQueueGenericSend+0x16c>
 80095d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095de:	b25b      	sxtb	r3, r3
 80095e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e4:	d103      	bne.n	80095ee <xQueueGenericSend+0x182>
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095ee:	f001 fed1 	bl	800b394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095f2:	1d3a      	adds	r2, r7, #4
 80095f4:	f107 0314 	add.w	r3, r7, #20
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fff8 	bl	800a5f0 <xTaskCheckForTimeOut>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d124      	bne.n	8009650 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009608:	f000 faa2 	bl	8009b50 <prvIsQueueFull>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d018      	beq.n	8009644 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009614:	3310      	adds	r3, #16
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	4611      	mov	r1, r2
 800961a:	4618      	mov	r0, r3
 800961c:	f000 ff1e 	bl	800a45c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009622:	f000 fa2d 	bl	8009a80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009626:	f000 fd53 	bl	800a0d0 <xTaskResumeAll>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	f47f af7c 	bne.w	800952a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009632:	4b0c      	ldr	r3, [pc, #48]	; (8009664 <xQueueGenericSend+0x1f8>)
 8009634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	e772      	b.n	800952a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009646:	f000 fa1b 	bl	8009a80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800964a:	f000 fd41 	bl	800a0d0 <xTaskResumeAll>
 800964e:	e76c      	b.n	800952a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009652:	f000 fa15 	bl	8009a80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009656:	f000 fd3b 	bl	800a0d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800965a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800965c:	4618      	mov	r0, r3
 800965e:	3738      	adds	r7, #56	; 0x38
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	e000ed04 	.word	0xe000ed04

08009668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b090      	sub	sp, #64	; 0x40
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800967a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10a      	bne.n	8009696 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009684:	f383 8811 	msr	BASEPRI, r3
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009692:	bf00      	nop
 8009694:	e7fe      	b.n	8009694 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d103      	bne.n	80096a4 <xQueueGenericSendFromISR+0x3c>
 800969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d101      	bne.n	80096a8 <xQueueGenericSendFromISR+0x40>
 80096a4:	2301      	movs	r3, #1
 80096a6:	e000      	b.n	80096aa <xQueueGenericSendFromISR+0x42>
 80096a8:	2300      	movs	r3, #0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096c0:	bf00      	nop
 80096c2:	e7fe      	b.n	80096c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d103      	bne.n	80096d2 <xQueueGenericSendFromISR+0x6a>
 80096ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <xQueueGenericSendFromISR+0x6e>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e000      	b.n	80096d8 <xQueueGenericSendFromISR+0x70>
 80096d6:	2300      	movs	r3, #0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	623b      	str	r3, [r7, #32]
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096f2:	f001 ff01 	bl	800b4f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096f6:	f3ef 8211 	mrs	r2, BASEPRI
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	61fa      	str	r2, [r7, #28]
 800970c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800970e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009710:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971a:	429a      	cmp	r2, r3
 800971c:	d302      	bcc.n	8009724 <xQueueGenericSendFromISR+0xbc>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b02      	cmp	r3, #2
 8009722:	d12f      	bne.n	8009784 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800972a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800972e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	68b9      	ldr	r1, [r7, #8]
 8009738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800973a:	f000 f911 	bl	8009960 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800973e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009746:	d112      	bne.n	800976e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	2b00      	cmp	r3, #0
 800974e:	d016      	beq.n	800977e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009752:	3324      	adds	r3, #36	; 0x24
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fed1 	bl	800a4fc <xTaskRemoveFromEventList>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00e      	beq.n	800977e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00b      	beq.n	800977e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	e007      	b.n	800977e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800976e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009772:	3301      	adds	r3, #1
 8009774:	b2db      	uxtb	r3, r3
 8009776:	b25a      	sxtb	r2, r3
 8009778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800977e:	2301      	movs	r3, #1
 8009780:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009782:	e001      	b.n	8009788 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009784:	2300      	movs	r3, #0
 8009786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009792:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009796:	4618      	mov	r0, r3
 8009798:	3740      	adds	r7, #64	; 0x40
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08c      	sub	sp, #48	; 0x30
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097ac:	2300      	movs	r3, #0
 80097ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10a      	bne.n	80097d0 <xQueueReceive+0x30>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	623b      	str	r3, [r7, #32]
}
 80097cc:	bf00      	nop
 80097ce:	e7fe      	b.n	80097ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d103      	bne.n	80097de <xQueueReceive+0x3e>
 80097d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d101      	bne.n	80097e2 <xQueueReceive+0x42>
 80097de:	2301      	movs	r3, #1
 80097e0:	e000      	b.n	80097e4 <xQueueReceive+0x44>
 80097e2:	2300      	movs	r3, #0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10a      	bne.n	80097fe <xQueueReceive+0x5e>
	__asm volatile
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	61fb      	str	r3, [r7, #28]
}
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097fe:	f001 f83b 	bl	800a878 <xTaskGetSchedulerState>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <xQueueReceive+0x6e>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <xQueueReceive+0x72>
 800980e:	2301      	movs	r3, #1
 8009810:	e000      	b.n	8009814 <xQueueReceive+0x74>
 8009812:	2300      	movs	r3, #0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10a      	bne.n	800982e <xQueueReceive+0x8e>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	61bb      	str	r3, [r7, #24]
}
 800982a:	bf00      	nop
 800982c:	e7fe      	b.n	800982c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800982e:	f001 fd81 	bl	800b334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009836:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	2b00      	cmp	r3, #0
 800983c:	d01f      	beq.n	800987e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800983e:	68b9      	ldr	r1, [r7, #8]
 8009840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009842:	f000 f8f7 	bl	8009a34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009848:	1e5a      	subs	r2, r3, #1
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00f      	beq.n	8009876 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009858:	3310      	adds	r3, #16
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fe4e 	bl	800a4fc <xTaskRemoveFromEventList>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d007      	beq.n	8009876 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009866:	4b3d      	ldr	r3, [pc, #244]	; (800995c <xQueueReceive+0x1bc>)
 8009868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009876:	f001 fd8d 	bl	800b394 <vPortExitCritical>
				return pdPASS;
 800987a:	2301      	movs	r3, #1
 800987c:	e069      	b.n	8009952 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d103      	bne.n	800988c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009884:	f001 fd86 	bl	800b394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009888:	2300      	movs	r3, #0
 800988a:	e062      	b.n	8009952 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	2b00      	cmp	r3, #0
 8009890:	d106      	bne.n	80098a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009892:	f107 0310 	add.w	r3, r7, #16
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fe94 	bl	800a5c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800989c:	2301      	movs	r3, #1
 800989e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098a0:	f001 fd78 	bl	800b394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098a4:	f000 fc06 	bl	800a0b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098a8:	f001 fd44 	bl	800b334 <vPortEnterCritical>
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098b2:	b25b      	sxtb	r3, r3
 80098b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b8:	d103      	bne.n	80098c2 <xQueueReceive+0x122>
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098c8:	b25b      	sxtb	r3, r3
 80098ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ce:	d103      	bne.n	80098d8 <xQueueReceive+0x138>
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098d8:	f001 fd5c 	bl	800b394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098dc:	1d3a      	adds	r2, r7, #4
 80098de:	f107 0310 	add.w	r3, r7, #16
 80098e2:	4611      	mov	r1, r2
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fe83 	bl	800a5f0 <xTaskCheckForTimeOut>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d123      	bne.n	8009938 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098f2:	f000 f917 	bl	8009b24 <prvIsQueueEmpty>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d017      	beq.n	800992c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	3324      	adds	r3, #36	; 0x24
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	4611      	mov	r1, r2
 8009904:	4618      	mov	r0, r3
 8009906:	f000 fda9 	bl	800a45c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800990a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800990c:	f000 f8b8 	bl	8009a80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009910:	f000 fbde 	bl	800a0d0 <xTaskResumeAll>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d189      	bne.n	800982e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800991a:	4b10      	ldr	r3, [pc, #64]	; (800995c <xQueueReceive+0x1bc>)
 800991c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	e780      	b.n	800982e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800992c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800992e:	f000 f8a7 	bl	8009a80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009932:	f000 fbcd 	bl	800a0d0 <xTaskResumeAll>
 8009936:	e77a      	b.n	800982e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800993a:	f000 f8a1 	bl	8009a80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800993e:	f000 fbc7 	bl	800a0d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009944:	f000 f8ee 	bl	8009b24 <prvIsQueueEmpty>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	f43f af6f 	beq.w	800982e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009950:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009952:	4618      	mov	r0, r3
 8009954:	3730      	adds	r7, #48	; 0x30
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	e000ed04 	.word	0xe000ed04

08009960 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800996c:	2300      	movs	r3, #0
 800996e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10d      	bne.n	800999a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d14d      	bne.n	8009a22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	4618      	mov	r0, r3
 800998c:	f000 ff92 	bl	800a8b4 <xTaskPriorityDisinherit>
 8009990:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	609a      	str	r2, [r3, #8]
 8009998:	e043      	b.n	8009a22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d119      	bne.n	80099d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6858      	ldr	r0, [r3, #4]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a8:	461a      	mov	r2, r3
 80099aa:	68b9      	ldr	r1, [r7, #8]
 80099ac:	f008 fd7c 	bl	80124a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b8:	441a      	add	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d32b      	bcc.n	8009a22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	605a      	str	r2, [r3, #4]
 80099d2:	e026      	b.n	8009a22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	68d8      	ldr	r0, [r3, #12]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099dc:	461a      	mov	r2, r3
 80099de:	68b9      	ldr	r1, [r7, #8]
 80099e0:	f008 fd62 	bl	80124a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	425b      	negs	r3, r3
 80099ee:	441a      	add	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d207      	bcs.n	8009a10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	689a      	ldr	r2, [r3, #8]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a08:	425b      	negs	r3, r3
 8009a0a:	441a      	add	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d105      	bne.n	8009a22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a2a:	697b      	ldr	r3, [r7, #20]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d018      	beq.n	8009a78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4e:	441a      	add	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68da      	ldr	r2, [r3, #12]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d303      	bcc.n	8009a68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68d9      	ldr	r1, [r3, #12]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a70:	461a      	mov	r2, r3
 8009a72:	6838      	ldr	r0, [r7, #0]
 8009a74:	f008 fd18 	bl	80124a8 <memcpy>
	}
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a88:	f001 fc54 	bl	800b334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a94:	e011      	b.n	8009aba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d012      	beq.n	8009ac4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3324      	adds	r3, #36	; 0x24
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 fd2a 	bl	800a4fc <xTaskRemoveFromEventList>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009aae:	f000 fe01 	bl	800a6b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	dce9      	bgt.n	8009a96 <prvUnlockQueue+0x16>
 8009ac2:	e000      	b.n	8009ac6 <prvUnlockQueue+0x46>
					break;
 8009ac4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	22ff      	movs	r2, #255	; 0xff
 8009aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009ace:	f001 fc61 	bl	800b394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ad2:	f001 fc2f 	bl	800b334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009adc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ade:	e011      	b.n	8009b04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d012      	beq.n	8009b0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3310      	adds	r3, #16
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 fd05 	bl	800a4fc <xTaskRemoveFromEventList>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009af8:	f000 fddc 	bl	800a6b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	dce9      	bgt.n	8009ae0 <prvUnlockQueue+0x60>
 8009b0c:	e000      	b.n	8009b10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	22ff      	movs	r2, #255	; 0xff
 8009b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b18:	f001 fc3c 	bl	800b394 <vPortExitCritical>
}
 8009b1c:	bf00      	nop
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b2c:	f001 fc02 	bl	800b334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d102      	bne.n	8009b3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	e001      	b.n	8009b42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b42:	f001 fc27 	bl	800b394 <vPortExitCritical>

	return xReturn;
 8009b46:	68fb      	ldr	r3, [r7, #12]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b58:	f001 fbec 	bl	800b334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d102      	bne.n	8009b6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	e001      	b.n	8009b72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b72:	f001 fc0f 	bl	800b394 <vPortExitCritical>

	return xReturn;
 8009b76:	68fb      	ldr	r3, [r7, #12]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60fb      	str	r3, [r7, #12]
 8009b8e:	e014      	b.n	8009bba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b90:	4a0f      	ldr	r2, [pc, #60]	; (8009bd0 <vQueueAddToRegistry+0x50>)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10b      	bne.n	8009bb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b9c:	490c      	ldr	r1, [pc, #48]	; (8009bd0 <vQueueAddToRegistry+0x50>)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ba6:	4a0a      	ldr	r2, [pc, #40]	; (8009bd0 <vQueueAddToRegistry+0x50>)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	00db      	lsls	r3, r3, #3
 8009bac:	4413      	add	r3, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009bb2:	e006      	b.n	8009bc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b07      	cmp	r3, #7
 8009bbe:	d9e7      	bls.n	8009b90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009bc0:	bf00      	nop
 8009bc2:	bf00      	nop
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	20005008 	.word	0x20005008

08009bd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009be4:	f001 fba6 	bl	800b334 <vPortEnterCritical>
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bee:	b25b      	sxtb	r3, r3
 8009bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf4:	d103      	bne.n	8009bfe <vQueueWaitForMessageRestricted+0x2a>
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c04:	b25b      	sxtb	r3, r3
 8009c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0a:	d103      	bne.n	8009c14 <vQueueWaitForMessageRestricted+0x40>
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c14:	f001 fbbe 	bl	800b394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d106      	bne.n	8009c2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3324      	adds	r3, #36	; 0x24
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	68b9      	ldr	r1, [r7, #8]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 fc3b 	bl	800a4a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c2e:	6978      	ldr	r0, [r7, #20]
 8009c30:	f7ff ff26 	bl	8009a80 <prvUnlockQueue>
	}
 8009c34:	bf00      	nop
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08e      	sub	sp, #56	; 0x38
 8009c40:	af04      	add	r7, sp, #16
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10a      	bne.n	8009c66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	623b      	str	r3, [r7, #32]
}
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <xTaskCreateStatic+0x46>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	61fb      	str	r3, [r7, #28]
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c82:	235c      	movs	r3, #92	; 0x5c
 8009c84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	2b5c      	cmp	r3, #92	; 0x5c
 8009c8a:	d00a      	beq.n	8009ca2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	61bb      	str	r3, [r7, #24]
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ca2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d01e      	beq.n	8009ce8 <xTaskCreateStatic+0xac>
 8009caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d01b      	beq.n	8009ce8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9303      	str	r3, [sp, #12]
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc8:	9302      	str	r3, [sp, #8]
 8009cca:	f107 0314 	add.w	r3, r7, #20
 8009cce:	9301      	str	r3, [sp, #4]
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	68b9      	ldr	r1, [r7, #8]
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 f850 	bl	8009d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ce2:	f000 f8dd 	bl	8009ea0 <prvAddNewTaskToReadyList>
 8009ce6:	e001      	b.n	8009cec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009cec:	697b      	ldr	r3, [r7, #20]
	}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3728      	adds	r7, #40	; 0x28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b08c      	sub	sp, #48	; 0x30
 8009cfa:	af04      	add	r7, sp, #16
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	60b9      	str	r1, [r7, #8]
 8009d00:	603b      	str	r3, [r7, #0]
 8009d02:	4613      	mov	r3, r2
 8009d04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d06:	88fb      	ldrh	r3, [r7, #6]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f001 fc34 	bl	800b578 <pvPortMalloc>
 8009d10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00e      	beq.n	8009d36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d18:	205c      	movs	r0, #92	; 0x5c
 8009d1a:	f001 fc2d 	bl	800b578 <pvPortMalloc>
 8009d1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8009d2c:	e005      	b.n	8009d3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d2e:	6978      	ldr	r0, [r7, #20]
 8009d30:	f001 fcee 	bl	800b710 <vPortFree>
 8009d34:	e001      	b.n	8009d3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d017      	beq.n	8009d70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d48:	88fa      	ldrh	r2, [r7, #6]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	9303      	str	r3, [sp, #12]
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	9302      	str	r3, [sp, #8]
 8009d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	68b9      	ldr	r1, [r7, #8]
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f000 f80e 	bl	8009d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d64:	69f8      	ldr	r0, [r7, #28]
 8009d66:	f000 f89b 	bl	8009ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	61bb      	str	r3, [r7, #24]
 8009d6e:	e002      	b.n	8009d76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d70:	f04f 33ff 	mov.w	r3, #4294967295
 8009d74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d76:	69bb      	ldr	r3, [r7, #24]
	}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3720      	adds	r7, #32
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
 8009d8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	461a      	mov	r2, r3
 8009d98:	21a5      	movs	r1, #165	; 0xa5
 8009d9a:	f008 fb93 	bl	80124c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009da8:	3b01      	subs	r3, #1
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	f023 0307 	bic.w	r3, r3, #7
 8009db6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	f003 0307 	and.w	r3, r3, #7
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00a      	beq.n	8009dd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	617b      	str	r3, [r7, #20]
}
 8009dd4:	bf00      	nop
 8009dd6:	e7fe      	b.n	8009dd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d01f      	beq.n	8009e1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dde:	2300      	movs	r3, #0
 8009de0:	61fb      	str	r3, [r7, #28]
 8009de2:	e012      	b.n	8009e0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	4413      	add	r3, r2
 8009dea:	7819      	ldrb	r1, [r3, #0]
 8009dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	4413      	add	r3, r2
 8009df2:	3334      	adds	r3, #52	; 0x34
 8009df4:	460a      	mov	r2, r1
 8009df6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d006      	beq.n	8009e12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	3301      	adds	r3, #1
 8009e08:	61fb      	str	r3, [r7, #28]
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	2b0f      	cmp	r3, #15
 8009e0e:	d9e9      	bls.n	8009de4 <prvInitialiseNewTask+0x64>
 8009e10:	e000      	b.n	8009e14 <prvInitialiseNewTask+0x94>
			{
				break;
 8009e12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e1c:	e003      	b.n	8009e26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	2b37      	cmp	r3, #55	; 0x37
 8009e2a:	d901      	bls.n	8009e30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e2c:	2337      	movs	r3, #55	; 0x37
 8009e2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	2200      	movs	r2, #0
 8009e40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e44:	3304      	adds	r3, #4
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7ff f978 	bl	800913c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4e:	3318      	adds	r3, #24
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7ff f973 	bl	800913c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6e:	2200      	movs	r2, #0
 8009e70:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	68f9      	ldr	r1, [r7, #12]
 8009e7e:	69b8      	ldr	r0, [r7, #24]
 8009e80:	f001 f928 	bl	800b0d4 <pxPortInitialiseStack>
 8009e84:	4602      	mov	r2, r0
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e96:	bf00      	nop
 8009e98:	3720      	adds	r7, #32
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
	...

08009ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ea8:	f001 fa44 	bl	800b334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009eac:	4b2d      	ldr	r3, [pc, #180]	; (8009f64 <prvAddNewTaskToReadyList+0xc4>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	4a2c      	ldr	r2, [pc, #176]	; (8009f64 <prvAddNewTaskToReadyList+0xc4>)
 8009eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009eb6:	4b2c      	ldr	r3, [pc, #176]	; (8009f68 <prvAddNewTaskToReadyList+0xc8>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d109      	bne.n	8009ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ebe:	4a2a      	ldr	r2, [pc, #168]	; (8009f68 <prvAddNewTaskToReadyList+0xc8>)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ec4:	4b27      	ldr	r3, [pc, #156]	; (8009f64 <prvAddNewTaskToReadyList+0xc4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d110      	bne.n	8009eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ecc:	f000 fc16 	bl	800a6fc <prvInitialiseTaskLists>
 8009ed0:	e00d      	b.n	8009eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ed2:	4b26      	ldr	r3, [pc, #152]	; (8009f6c <prvAddNewTaskToReadyList+0xcc>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d109      	bne.n	8009eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009eda:	4b23      	ldr	r3, [pc, #140]	; (8009f68 <prvAddNewTaskToReadyList+0xc8>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d802      	bhi.n	8009eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ee8:	4a1f      	ldr	r2, [pc, #124]	; (8009f68 <prvAddNewTaskToReadyList+0xc8>)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009eee:	4b20      	ldr	r3, [pc, #128]	; (8009f70 <prvAddNewTaskToReadyList+0xd0>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4a1e      	ldr	r2, [pc, #120]	; (8009f70 <prvAddNewTaskToReadyList+0xd0>)
 8009ef6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ef8:	4b1d      	ldr	r3, [pc, #116]	; (8009f70 <prvAddNewTaskToReadyList+0xd0>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f04:	4b1b      	ldr	r3, [pc, #108]	; (8009f74 <prvAddNewTaskToReadyList+0xd4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d903      	bls.n	8009f14 <prvAddNewTaskToReadyList+0x74>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	4a18      	ldr	r2, [pc, #96]	; (8009f74 <prvAddNewTaskToReadyList+0xd4>)
 8009f12:	6013      	str	r3, [r2, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f18:	4613      	mov	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4a15      	ldr	r2, [pc, #84]	; (8009f78 <prvAddNewTaskToReadyList+0xd8>)
 8009f22:	441a      	add	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3304      	adds	r3, #4
 8009f28:	4619      	mov	r1, r3
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	f7ff f913 	bl	8009156 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f30:	f001 fa30 	bl	800b394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f34:	4b0d      	ldr	r3, [pc, #52]	; (8009f6c <prvAddNewTaskToReadyList+0xcc>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00e      	beq.n	8009f5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f3c:	4b0a      	ldr	r3, [pc, #40]	; (8009f68 <prvAddNewTaskToReadyList+0xc8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d207      	bcs.n	8009f5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f4a:	4b0c      	ldr	r3, [pc, #48]	; (8009f7c <prvAddNewTaskToReadyList+0xdc>)
 8009f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	200011b8 	.word	0x200011b8
 8009f68:	20000ce4 	.word	0x20000ce4
 8009f6c:	200011c4 	.word	0x200011c4
 8009f70:	200011d4 	.word	0x200011d4
 8009f74:	200011c0 	.word	0x200011c0
 8009f78:	20000ce8 	.word	0x20000ce8
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d017      	beq.n	8009fc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f92:	4b13      	ldr	r3, [pc, #76]	; (8009fe0 <vTaskDelay+0x60>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <vTaskDelay+0x30>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	60bb      	str	r3, [r7, #8]
}
 8009fac:	bf00      	nop
 8009fae:	e7fe      	b.n	8009fae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009fb0:	f000 f880 	bl	800a0b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fcea 	bl	800a990 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fbc:	f000 f888 	bl	800a0d0 <xTaskResumeAll>
 8009fc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d107      	bne.n	8009fd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009fc8:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <vTaskDelay+0x64>)
 8009fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fd8:	bf00      	nop
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	200011e0 	.word	0x200011e0
 8009fe4:	e000ed04 	.word	0xe000ed04

08009fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08a      	sub	sp, #40	; 0x28
 8009fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ff6:	463a      	mov	r2, r7
 8009ff8:	1d39      	adds	r1, r7, #4
 8009ffa:	f107 0308 	add.w	r3, r7, #8
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7ff f848 	bl	8009094 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	9202      	str	r2, [sp, #8]
 800a00c:	9301      	str	r3, [sp, #4]
 800a00e:	2300      	movs	r3, #0
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	2300      	movs	r3, #0
 800a014:	460a      	mov	r2, r1
 800a016:	4921      	ldr	r1, [pc, #132]	; (800a09c <vTaskStartScheduler+0xb4>)
 800a018:	4821      	ldr	r0, [pc, #132]	; (800a0a0 <vTaskStartScheduler+0xb8>)
 800a01a:	f7ff fe0f 	bl	8009c3c <xTaskCreateStatic>
 800a01e:	4603      	mov	r3, r0
 800a020:	4a20      	ldr	r2, [pc, #128]	; (800a0a4 <vTaskStartScheduler+0xbc>)
 800a022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a024:	4b1f      	ldr	r3, [pc, #124]	; (800a0a4 <vTaskStartScheduler+0xbc>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a02c:	2301      	movs	r3, #1
 800a02e:	617b      	str	r3, [r7, #20]
 800a030:	e001      	b.n	800a036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a032:	2300      	movs	r3, #0
 800a034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d102      	bne.n	800a042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a03c:	f000 fcfc 	bl	800aa38 <xTimerCreateTimerTask>
 800a040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d116      	bne.n	800a076 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	613b      	str	r3, [r7, #16]
}
 800a05a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a05c:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <vTaskStartScheduler+0xc0>)
 800a05e:	f04f 32ff 	mov.w	r2, #4294967295
 800a062:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a064:	4b11      	ldr	r3, [pc, #68]	; (800a0ac <vTaskStartScheduler+0xc4>)
 800a066:	2201      	movs	r2, #1
 800a068:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a06a:	4b11      	ldr	r3, [pc, #68]	; (800a0b0 <vTaskStartScheduler+0xc8>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a070:	f001 f8be 	bl	800b1f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a074:	e00e      	b.n	800a094 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07c:	d10a      	bne.n	800a094 <vTaskStartScheduler+0xac>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	60fb      	str	r3, [r7, #12]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <vTaskStartScheduler+0xaa>
}
 800a094:	bf00      	nop
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	08012688 	.word	0x08012688
 800a0a0:	0800a6cd 	.word	0x0800a6cd
 800a0a4:	200011dc 	.word	0x200011dc
 800a0a8:	200011d8 	.word	0x200011d8
 800a0ac:	200011c4 	.word	0x200011c4
 800a0b0:	200011bc 	.word	0x200011bc

0800a0b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a0b8:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <vTaskSuspendAll+0x18>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	4a03      	ldr	r2, [pc, #12]	; (800a0cc <vTaskSuspendAll+0x18>)
 800a0c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0c2:	bf00      	nop
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	200011e0 	.word	0x200011e0

0800a0d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0de:	4b42      	ldr	r3, [pc, #264]	; (800a1e8 <xTaskResumeAll+0x118>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10a      	bne.n	800a0fc <xTaskResumeAll+0x2c>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	603b      	str	r3, [r7, #0]
}
 800a0f8:	bf00      	nop
 800a0fa:	e7fe      	b.n	800a0fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0fc:	f001 f91a 	bl	800b334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a100:	4b39      	ldr	r3, [pc, #228]	; (800a1e8 <xTaskResumeAll+0x118>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3b01      	subs	r3, #1
 800a106:	4a38      	ldr	r2, [pc, #224]	; (800a1e8 <xTaskResumeAll+0x118>)
 800a108:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a10a:	4b37      	ldr	r3, [pc, #220]	; (800a1e8 <xTaskResumeAll+0x118>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d162      	bne.n	800a1d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a112:	4b36      	ldr	r3, [pc, #216]	; (800a1ec <xTaskResumeAll+0x11c>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d05e      	beq.n	800a1d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a11a:	e02f      	b.n	800a17c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a11c:	4b34      	ldr	r3, [pc, #208]	; (800a1f0 <xTaskResumeAll+0x120>)
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3318      	adds	r3, #24
 800a128:	4618      	mov	r0, r3
 800a12a:	f7ff f871 	bl	8009210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3304      	adds	r3, #4
 800a132:	4618      	mov	r0, r3
 800a134:	f7ff f86c 	bl	8009210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13c:	4b2d      	ldr	r3, [pc, #180]	; (800a1f4 <xTaskResumeAll+0x124>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d903      	bls.n	800a14c <xTaskResumeAll+0x7c>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	4a2a      	ldr	r2, [pc, #168]	; (800a1f4 <xTaskResumeAll+0x124>)
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4a27      	ldr	r2, [pc, #156]	; (800a1f8 <xTaskResumeAll+0x128>)
 800a15a:	441a      	add	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3304      	adds	r3, #4
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f7fe fff7 	bl	8009156 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16c:	4b23      	ldr	r3, [pc, #140]	; (800a1fc <xTaskResumeAll+0x12c>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a172:	429a      	cmp	r2, r3
 800a174:	d302      	bcc.n	800a17c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a176:	4b22      	ldr	r3, [pc, #136]	; (800a200 <xTaskResumeAll+0x130>)
 800a178:	2201      	movs	r2, #1
 800a17a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a17c:	4b1c      	ldr	r3, [pc, #112]	; (800a1f0 <xTaskResumeAll+0x120>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1cb      	bne.n	800a11c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a18a:	f000 fb55 	bl	800a838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a18e:	4b1d      	ldr	r3, [pc, #116]	; (800a204 <xTaskResumeAll+0x134>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d010      	beq.n	800a1bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a19a:	f000 f847 	bl	800a22c <xTaskIncrementTick>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a1a4:	4b16      	ldr	r3, [pc, #88]	; (800a200 <xTaskResumeAll+0x130>)
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1f1      	bne.n	800a19a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a1b6:	4b13      	ldr	r3, [pc, #76]	; (800a204 <xTaskResumeAll+0x134>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1bc:	4b10      	ldr	r3, [pc, #64]	; (800a200 <xTaskResumeAll+0x130>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d009      	beq.n	800a1d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1c8:	4b0f      	ldr	r3, [pc, #60]	; (800a208 <xTaskResumeAll+0x138>)
 800a1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1d8:	f001 f8dc 	bl	800b394 <vPortExitCritical>

	return xAlreadyYielded;
 800a1dc:	68bb      	ldr	r3, [r7, #8]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	200011e0 	.word	0x200011e0
 800a1ec:	200011b8 	.word	0x200011b8
 800a1f0:	20001178 	.word	0x20001178
 800a1f4:	200011c0 	.word	0x200011c0
 800a1f8:	20000ce8 	.word	0x20000ce8
 800a1fc:	20000ce4 	.word	0x20000ce4
 800a200:	200011cc 	.word	0x200011cc
 800a204:	200011c8 	.word	0x200011c8
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a212:	4b05      	ldr	r3, [pc, #20]	; (800a228 <xTaskGetTickCount+0x1c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a218:	687b      	ldr	r3, [r7, #4]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	200011bc 	.word	0x200011bc

0800a22c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a232:	2300      	movs	r3, #0
 800a234:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a236:	4b4f      	ldr	r3, [pc, #316]	; (800a374 <xTaskIncrementTick+0x148>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f040 808f 	bne.w	800a35e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a240:	4b4d      	ldr	r3, [pc, #308]	; (800a378 <xTaskIncrementTick+0x14c>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3301      	adds	r3, #1
 800a246:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a248:	4a4b      	ldr	r2, [pc, #300]	; (800a378 <xTaskIncrementTick+0x14c>)
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d120      	bne.n	800a296 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a254:	4b49      	ldr	r3, [pc, #292]	; (800a37c <xTaskIncrementTick+0x150>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00a      	beq.n	800a274 <xTaskIncrementTick+0x48>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	603b      	str	r3, [r7, #0]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <xTaskIncrementTick+0x46>
 800a274:	4b41      	ldr	r3, [pc, #260]	; (800a37c <xTaskIncrementTick+0x150>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	4b41      	ldr	r3, [pc, #260]	; (800a380 <xTaskIncrementTick+0x154>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a3f      	ldr	r2, [pc, #252]	; (800a37c <xTaskIncrementTick+0x150>)
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	4a3f      	ldr	r2, [pc, #252]	; (800a380 <xTaskIncrementTick+0x154>)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	4b3e      	ldr	r3, [pc, #248]	; (800a384 <xTaskIncrementTick+0x158>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3301      	adds	r3, #1
 800a28e:	4a3d      	ldr	r2, [pc, #244]	; (800a384 <xTaskIncrementTick+0x158>)
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	f000 fad1 	bl	800a838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a296:	4b3c      	ldr	r3, [pc, #240]	; (800a388 <xTaskIncrementTick+0x15c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d349      	bcc.n	800a334 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2a0:	4b36      	ldr	r3, [pc, #216]	; (800a37c <xTaskIncrementTick+0x150>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d104      	bne.n	800a2b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2aa:	4b37      	ldr	r3, [pc, #220]	; (800a388 <xTaskIncrementTick+0x15c>)
 800a2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b0:	601a      	str	r2, [r3, #0]
					break;
 800a2b2:	e03f      	b.n	800a334 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b4:	4b31      	ldr	r3, [pc, #196]	; (800a37c <xTaskIncrementTick+0x150>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d203      	bcs.n	800a2d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2cc:	4a2e      	ldr	r2, [pc, #184]	; (800a388 <xTaskIncrementTick+0x15c>)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2d2:	e02f      	b.n	800a334 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fe ff99 	bl	8009210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d004      	beq.n	800a2f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	3318      	adds	r3, #24
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe ff90 	bl	8009210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f4:	4b25      	ldr	r3, [pc, #148]	; (800a38c <xTaskIncrementTick+0x160>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d903      	bls.n	800a304 <xTaskIncrementTick+0xd8>
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a300:	4a22      	ldr	r2, [pc, #136]	; (800a38c <xTaskIncrementTick+0x160>)
 800a302:	6013      	str	r3, [r2, #0]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a308:	4613      	mov	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4a1f      	ldr	r2, [pc, #124]	; (800a390 <xTaskIncrementTick+0x164>)
 800a312:	441a      	add	r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	3304      	adds	r3, #4
 800a318:	4619      	mov	r1, r3
 800a31a:	4610      	mov	r0, r2
 800a31c:	f7fe ff1b 	bl	8009156 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a324:	4b1b      	ldr	r3, [pc, #108]	; (800a394 <xTaskIncrementTick+0x168>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d3b8      	bcc.n	800a2a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a32e:	2301      	movs	r3, #1
 800a330:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a332:	e7b5      	b.n	800a2a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a334:	4b17      	ldr	r3, [pc, #92]	; (800a394 <xTaskIncrementTick+0x168>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33a:	4915      	ldr	r1, [pc, #84]	; (800a390 <xTaskIncrementTick+0x164>)
 800a33c:	4613      	mov	r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	440b      	add	r3, r1
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d901      	bls.n	800a350 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a34c:	2301      	movs	r3, #1
 800a34e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a350:	4b11      	ldr	r3, [pc, #68]	; (800a398 <xTaskIncrementTick+0x16c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a358:	2301      	movs	r3, #1
 800a35a:	617b      	str	r3, [r7, #20]
 800a35c:	e004      	b.n	800a368 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a35e:	4b0f      	ldr	r3, [pc, #60]	; (800a39c <xTaskIncrementTick+0x170>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	3301      	adds	r3, #1
 800a364:	4a0d      	ldr	r2, [pc, #52]	; (800a39c <xTaskIncrementTick+0x170>)
 800a366:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a368:	697b      	ldr	r3, [r7, #20]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	200011e0 	.word	0x200011e0
 800a378:	200011bc 	.word	0x200011bc
 800a37c:	20001170 	.word	0x20001170
 800a380:	20001174 	.word	0x20001174
 800a384:	200011d0 	.word	0x200011d0
 800a388:	200011d8 	.word	0x200011d8
 800a38c:	200011c0 	.word	0x200011c0
 800a390:	20000ce8 	.word	0x20000ce8
 800a394:	20000ce4 	.word	0x20000ce4
 800a398:	200011cc 	.word	0x200011cc
 800a39c:	200011c8 	.word	0x200011c8

0800a3a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3a6:	4b28      	ldr	r3, [pc, #160]	; (800a448 <vTaskSwitchContext+0xa8>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d003      	beq.n	800a3b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3ae:	4b27      	ldr	r3, [pc, #156]	; (800a44c <vTaskSwitchContext+0xac>)
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3b4:	e041      	b.n	800a43a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a3b6:	4b25      	ldr	r3, [pc, #148]	; (800a44c <vTaskSwitchContext+0xac>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3bc:	4b24      	ldr	r3, [pc, #144]	; (800a450 <vTaskSwitchContext+0xb0>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	60fb      	str	r3, [r7, #12]
 800a3c2:	e010      	b.n	800a3e6 <vTaskSwitchContext+0x46>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10a      	bne.n	800a3e0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	607b      	str	r3, [r7, #4]
}
 800a3dc:	bf00      	nop
 800a3de:	e7fe      	b.n	800a3de <vTaskSwitchContext+0x3e>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	491b      	ldr	r1, [pc, #108]	; (800a454 <vTaskSwitchContext+0xb4>)
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4413      	add	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	440b      	add	r3, r1
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0e4      	beq.n	800a3c4 <vTaskSwitchContext+0x24>
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4a13      	ldr	r2, [pc, #76]	; (800a454 <vTaskSwitchContext+0xb4>)
 800a406:	4413      	add	r3, r2
 800a408:	60bb      	str	r3, [r7, #8]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	605a      	str	r2, [r3, #4]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	3308      	adds	r3, #8
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d104      	bne.n	800a42a <vTaskSwitchContext+0x8a>
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	605a      	str	r2, [r3, #4]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	4a09      	ldr	r2, [pc, #36]	; (800a458 <vTaskSwitchContext+0xb8>)
 800a432:	6013      	str	r3, [r2, #0]
 800a434:	4a06      	ldr	r2, [pc, #24]	; (800a450 <vTaskSwitchContext+0xb0>)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6013      	str	r3, [r2, #0]
}
 800a43a:	bf00      	nop
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	200011e0 	.word	0x200011e0
 800a44c:	200011cc 	.word	0x200011cc
 800a450:	200011c0 	.word	0x200011c0
 800a454:	20000ce8 	.word	0x20000ce8
 800a458:	20000ce4 	.word	0x20000ce4

0800a45c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10a      	bne.n	800a482 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	60fb      	str	r3, [r7, #12]
}
 800a47e:	bf00      	nop
 800a480:	e7fe      	b.n	800a480 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a482:	4b07      	ldr	r3, [pc, #28]	; (800a4a0 <vTaskPlaceOnEventList+0x44>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3318      	adds	r3, #24
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7fe fe87 	bl	800919e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a490:	2101      	movs	r1, #1
 800a492:	6838      	ldr	r0, [r7, #0]
 800a494:	f000 fa7c 	bl	800a990 <prvAddCurrentTaskToDelayedList>
}
 800a498:	bf00      	nop
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	20000ce4 	.word	0x20000ce4

0800a4a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10a      	bne.n	800a4cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	617b      	str	r3, [r7, #20]
}
 800a4c8:	bf00      	nop
 800a4ca:	e7fe      	b.n	800a4ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4cc:	4b0a      	ldr	r3, [pc, #40]	; (800a4f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	3318      	adds	r3, #24
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f7fe fe3e 	bl	8009156 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	68b8      	ldr	r0, [r7, #8]
 800a4ea:	f000 fa51 	bl	800a990 <prvAddCurrentTaskToDelayedList>
	}
 800a4ee:	bf00      	nop
 800a4f0:	3718      	adds	r7, #24
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000ce4 	.word	0x20000ce4

0800a4fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	60fb      	str	r3, [r7, #12]
}
 800a524:	bf00      	nop
 800a526:	e7fe      	b.n	800a526 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	3318      	adds	r3, #24
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fe6f 	bl	8009210 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a532:	4b1e      	ldr	r3, [pc, #120]	; (800a5ac <xTaskRemoveFromEventList+0xb0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d11d      	bne.n	800a576 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	3304      	adds	r3, #4
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fe66 	bl	8009210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a548:	4b19      	ldr	r3, [pc, #100]	; (800a5b0 <xTaskRemoveFromEventList+0xb4>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d903      	bls.n	800a558 <xTaskRemoveFromEventList+0x5c>
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a554:	4a16      	ldr	r2, [pc, #88]	; (800a5b0 <xTaskRemoveFromEventList+0xb4>)
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55c:	4613      	mov	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4a13      	ldr	r2, [pc, #76]	; (800a5b4 <xTaskRemoveFromEventList+0xb8>)
 800a566:	441a      	add	r2, r3
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	3304      	adds	r3, #4
 800a56c:	4619      	mov	r1, r3
 800a56e:	4610      	mov	r0, r2
 800a570:	f7fe fdf1 	bl	8009156 <vListInsertEnd>
 800a574:	e005      	b.n	800a582 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	3318      	adds	r3, #24
 800a57a:	4619      	mov	r1, r3
 800a57c:	480e      	ldr	r0, [pc, #56]	; (800a5b8 <xTaskRemoveFromEventList+0xbc>)
 800a57e:	f7fe fdea 	bl	8009156 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a586:	4b0d      	ldr	r3, [pc, #52]	; (800a5bc <xTaskRemoveFromEventList+0xc0>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d905      	bls.n	800a59c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a590:	2301      	movs	r3, #1
 800a592:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a594:	4b0a      	ldr	r3, [pc, #40]	; (800a5c0 <xTaskRemoveFromEventList+0xc4>)
 800a596:	2201      	movs	r2, #1
 800a598:	601a      	str	r2, [r3, #0]
 800a59a:	e001      	b.n	800a5a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a59c:	2300      	movs	r3, #0
 800a59e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5a0:	697b      	ldr	r3, [r7, #20]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	200011e0 	.word	0x200011e0
 800a5b0:	200011c0 	.word	0x200011c0
 800a5b4:	20000ce8 	.word	0x20000ce8
 800a5b8:	20001178 	.word	0x20001178
 800a5bc:	20000ce4 	.word	0x20000ce4
 800a5c0:	200011cc 	.word	0x200011cc

0800a5c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5cc:	4b06      	ldr	r3, [pc, #24]	; (800a5e8 <vTaskInternalSetTimeOutState+0x24>)
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5d4:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <vTaskInternalSetTimeOutState+0x28>)
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	605a      	str	r2, [r3, #4]
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	200011d0 	.word	0x200011d0
 800a5ec:	200011bc 	.word	0x200011bc

0800a5f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b088      	sub	sp, #32
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10a      	bne.n	800a616 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	613b      	str	r3, [r7, #16]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10a      	bne.n	800a632 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	60fb      	str	r3, [r7, #12]
}
 800a62e:	bf00      	nop
 800a630:	e7fe      	b.n	800a630 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a632:	f000 fe7f 	bl	800b334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a636:	4b1d      	ldr	r3, [pc, #116]	; (800a6ac <xTaskCheckForTimeOut+0xbc>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	69ba      	ldr	r2, [r7, #24]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64e:	d102      	bne.n	800a656 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a650:	2300      	movs	r3, #0
 800a652:	61fb      	str	r3, [r7, #28]
 800a654:	e023      	b.n	800a69e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	4b15      	ldr	r3, [pc, #84]	; (800a6b0 <xTaskCheckForTimeOut+0xc0>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d007      	beq.n	800a672 <xTaskCheckForTimeOut+0x82>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d302      	bcc.n	800a672 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a66c:	2301      	movs	r3, #1
 800a66e:	61fb      	str	r3, [r7, #28]
 800a670:	e015      	b.n	800a69e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d20b      	bcs.n	800a694 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	1ad2      	subs	r2, r2, r3
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f7ff ff9b 	bl	800a5c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a68e:	2300      	movs	r3, #0
 800a690:	61fb      	str	r3, [r7, #28]
 800a692:	e004      	b.n	800a69e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2200      	movs	r2, #0
 800a698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a69a:	2301      	movs	r3, #1
 800a69c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a69e:	f000 fe79 	bl	800b394 <vPortExitCritical>

	return xReturn;
 800a6a2:	69fb      	ldr	r3, [r7, #28]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3720      	adds	r7, #32
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	200011bc 	.word	0x200011bc
 800a6b0:	200011d0 	.word	0x200011d0

0800a6b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6b8:	4b03      	ldr	r3, [pc, #12]	; (800a6c8 <vTaskMissedYield+0x14>)
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	601a      	str	r2, [r3, #0]
}
 800a6be:	bf00      	nop
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	200011cc 	.word	0x200011cc

0800a6cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6d4:	f000 f852 	bl	800a77c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6d8:	4b06      	ldr	r3, [pc, #24]	; (800a6f4 <prvIdleTask+0x28>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d9f9      	bls.n	800a6d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6e0:	4b05      	ldr	r3, [pc, #20]	; (800a6f8 <prvIdleTask+0x2c>)
 800a6e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e6:	601a      	str	r2, [r3, #0]
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6f0:	e7f0      	b.n	800a6d4 <prvIdleTask+0x8>
 800a6f2:	bf00      	nop
 800a6f4:	20000ce8 	.word	0x20000ce8
 800a6f8:	e000ed04 	.word	0xe000ed04

0800a6fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a702:	2300      	movs	r3, #0
 800a704:	607b      	str	r3, [r7, #4]
 800a706:	e00c      	b.n	800a722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	4613      	mov	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4413      	add	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4a12      	ldr	r2, [pc, #72]	; (800a75c <prvInitialiseTaskLists+0x60>)
 800a714:	4413      	add	r3, r2
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe fcf0 	bl	80090fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3301      	adds	r3, #1
 800a720:	607b      	str	r3, [r7, #4]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2b37      	cmp	r3, #55	; 0x37
 800a726:	d9ef      	bls.n	800a708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a728:	480d      	ldr	r0, [pc, #52]	; (800a760 <prvInitialiseTaskLists+0x64>)
 800a72a:	f7fe fce7 	bl	80090fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a72e:	480d      	ldr	r0, [pc, #52]	; (800a764 <prvInitialiseTaskLists+0x68>)
 800a730:	f7fe fce4 	bl	80090fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a734:	480c      	ldr	r0, [pc, #48]	; (800a768 <prvInitialiseTaskLists+0x6c>)
 800a736:	f7fe fce1 	bl	80090fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a73a:	480c      	ldr	r0, [pc, #48]	; (800a76c <prvInitialiseTaskLists+0x70>)
 800a73c:	f7fe fcde 	bl	80090fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a740:	480b      	ldr	r0, [pc, #44]	; (800a770 <prvInitialiseTaskLists+0x74>)
 800a742:	f7fe fcdb 	bl	80090fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a746:	4b0b      	ldr	r3, [pc, #44]	; (800a774 <prvInitialiseTaskLists+0x78>)
 800a748:	4a05      	ldr	r2, [pc, #20]	; (800a760 <prvInitialiseTaskLists+0x64>)
 800a74a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a74c:	4b0a      	ldr	r3, [pc, #40]	; (800a778 <prvInitialiseTaskLists+0x7c>)
 800a74e:	4a05      	ldr	r2, [pc, #20]	; (800a764 <prvInitialiseTaskLists+0x68>)
 800a750:	601a      	str	r2, [r3, #0]
}
 800a752:	bf00      	nop
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000ce8 	.word	0x20000ce8
 800a760:	20001148 	.word	0x20001148
 800a764:	2000115c 	.word	0x2000115c
 800a768:	20001178 	.word	0x20001178
 800a76c:	2000118c 	.word	0x2000118c
 800a770:	200011a4 	.word	0x200011a4
 800a774:	20001170 	.word	0x20001170
 800a778:	20001174 	.word	0x20001174

0800a77c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a782:	e019      	b.n	800a7b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a784:	f000 fdd6 	bl	800b334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a788:	4b10      	ldr	r3, [pc, #64]	; (800a7cc <prvCheckTasksWaitingTermination+0x50>)
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3304      	adds	r3, #4
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe fd3b 	bl	8009210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a79a:	4b0d      	ldr	r3, [pc, #52]	; (800a7d0 <prvCheckTasksWaitingTermination+0x54>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	4a0b      	ldr	r2, [pc, #44]	; (800a7d0 <prvCheckTasksWaitingTermination+0x54>)
 800a7a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7a4:	4b0b      	ldr	r3, [pc, #44]	; (800a7d4 <prvCheckTasksWaitingTermination+0x58>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	4a0a      	ldr	r2, [pc, #40]	; (800a7d4 <prvCheckTasksWaitingTermination+0x58>)
 800a7ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7ae:	f000 fdf1 	bl	800b394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f810 	bl	800a7d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7b8:	4b06      	ldr	r3, [pc, #24]	; (800a7d4 <prvCheckTasksWaitingTermination+0x58>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1e1      	bne.n	800a784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7c0:	bf00      	nop
 800a7c2:	bf00      	nop
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	2000118c 	.word	0x2000118c
 800a7d0:	200011b8 	.word	0x200011b8
 800a7d4:	200011a0 	.word	0x200011a0

0800a7d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d108      	bne.n	800a7fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 ff8e 	bl	800b710 <vPortFree>
				vPortFree( pxTCB );
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 ff8b 	bl	800b710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7fa:	e018      	b.n	800a82e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a802:	2b01      	cmp	r3, #1
 800a804:	d103      	bne.n	800a80e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 ff82 	bl	800b710 <vPortFree>
	}
 800a80c:	e00f      	b.n	800a82e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a814:	2b02      	cmp	r3, #2
 800a816:	d00a      	beq.n	800a82e <prvDeleteTCB+0x56>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	60fb      	str	r3, [r7, #12]
}
 800a82a:	bf00      	nop
 800a82c:	e7fe      	b.n	800a82c <prvDeleteTCB+0x54>
	}
 800a82e:	bf00      	nop
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a83e:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <prvResetNextTaskUnblockTime+0x38>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d104      	bne.n	800a852 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a848:	4b0a      	ldr	r3, [pc, #40]	; (800a874 <prvResetNextTaskUnblockTime+0x3c>)
 800a84a:	f04f 32ff 	mov.w	r2, #4294967295
 800a84e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a850:	e008      	b.n	800a864 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a852:	4b07      	ldr	r3, [pc, #28]	; (800a870 <prvResetNextTaskUnblockTime+0x38>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	4a04      	ldr	r2, [pc, #16]	; (800a874 <prvResetNextTaskUnblockTime+0x3c>)
 800a862:	6013      	str	r3, [r2, #0]
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	20001170 	.word	0x20001170
 800a874:	200011d8 	.word	0x200011d8

0800a878 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a87e:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <xTaskGetSchedulerState+0x34>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d102      	bne.n	800a88c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a886:	2301      	movs	r3, #1
 800a888:	607b      	str	r3, [r7, #4]
 800a88a:	e008      	b.n	800a89e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a88c:	4b08      	ldr	r3, [pc, #32]	; (800a8b0 <xTaskGetSchedulerState+0x38>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d102      	bne.n	800a89a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a894:	2302      	movs	r3, #2
 800a896:	607b      	str	r3, [r7, #4]
 800a898:	e001      	b.n	800a89e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a89a:	2300      	movs	r3, #0
 800a89c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a89e:	687b      	ldr	r3, [r7, #4]
	}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	200011c4 	.word	0x200011c4
 800a8b0:	200011e0 	.word	0x200011e0

0800a8b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d056      	beq.n	800a978 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a8ca:	4b2e      	ldr	r3, [pc, #184]	; (800a984 <xTaskPriorityDisinherit+0xd0>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d00a      	beq.n	800a8ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	60fb      	str	r3, [r7, #12]
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10a      	bne.n	800a908 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	60bb      	str	r3, [r7, #8]
}
 800a904:	bf00      	nop
 800a906:	e7fe      	b.n	800a906 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a90c:	1e5a      	subs	r2, r3, #1
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d02c      	beq.n	800a978 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a922:	2b00      	cmp	r3, #0
 800a924:	d128      	bne.n	800a978 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	3304      	adds	r3, #4
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fe fc70 	bl	8009210 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a948:	4b0f      	ldr	r3, [pc, #60]	; (800a988 <xTaskPriorityDisinherit+0xd4>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d903      	bls.n	800a958 <xTaskPriorityDisinherit+0xa4>
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a954:	4a0c      	ldr	r2, [pc, #48]	; (800a988 <xTaskPriorityDisinherit+0xd4>)
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95c:	4613      	mov	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4a09      	ldr	r2, [pc, #36]	; (800a98c <xTaskPriorityDisinherit+0xd8>)
 800a966:	441a      	add	r2, r3
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	3304      	adds	r3, #4
 800a96c:	4619      	mov	r1, r3
 800a96e:	4610      	mov	r0, r2
 800a970:	f7fe fbf1 	bl	8009156 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a974:	2301      	movs	r3, #1
 800a976:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a978:	697b      	ldr	r3, [r7, #20]
	}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20000ce4 	.word	0x20000ce4
 800a988:	200011c0 	.word	0x200011c0
 800a98c:	20000ce8 	.word	0x20000ce8

0800a990 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a99a:	4b21      	ldr	r3, [pc, #132]	; (800aa20 <prvAddCurrentTaskToDelayedList+0x90>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9a0:	4b20      	ldr	r3, [pc, #128]	; (800aa24 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe fc32 	bl	8009210 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b2:	d10a      	bne.n	800a9ca <prvAddCurrentTaskToDelayedList+0x3a>
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d007      	beq.n	800a9ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9ba:	4b1a      	ldr	r3, [pc, #104]	; (800aa24 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3304      	adds	r3, #4
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4819      	ldr	r0, [pc, #100]	; (800aa28 <prvAddCurrentTaskToDelayedList+0x98>)
 800a9c4:	f7fe fbc7 	bl	8009156 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9c8:	e026      	b.n	800aa18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9d2:	4b14      	ldr	r3, [pc, #80]	; (800aa24 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d209      	bcs.n	800a9f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9e2:	4b12      	ldr	r3, [pc, #72]	; (800aa2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	f7fe fbd5 	bl	800919e <vListInsert>
}
 800a9f4:	e010      	b.n	800aa18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9f6:	4b0e      	ldr	r3, [pc, #56]	; (800aa30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3304      	adds	r3, #4
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	f7fe fbcb 	bl	800919e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa08:	4b0a      	ldr	r3, [pc, #40]	; (800aa34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d202      	bcs.n	800aa18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa12:	4a08      	ldr	r2, [pc, #32]	; (800aa34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	6013      	str	r3, [r2, #0]
}
 800aa18:	bf00      	nop
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	200011bc 	.word	0x200011bc
 800aa24:	20000ce4 	.word	0x20000ce4
 800aa28:	200011a4 	.word	0x200011a4
 800aa2c:	20001174 	.word	0x20001174
 800aa30:	20001170 	.word	0x20001170
 800aa34:	200011d8 	.word	0x200011d8

0800aa38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08a      	sub	sp, #40	; 0x28
 800aa3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa42:	f000 fb07 	bl	800b054 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa46:	4b1c      	ldr	r3, [pc, #112]	; (800aab8 <xTimerCreateTimerTask+0x80>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d021      	beq.n	800aa92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa56:	1d3a      	adds	r2, r7, #4
 800aa58:	f107 0108 	add.w	r1, r7, #8
 800aa5c:	f107 030c 	add.w	r3, r7, #12
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fe fb31 	bl	80090c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa66:	6879      	ldr	r1, [r7, #4]
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	9202      	str	r2, [sp, #8]
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	2302      	movs	r3, #2
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	2300      	movs	r3, #0
 800aa76:	460a      	mov	r2, r1
 800aa78:	4910      	ldr	r1, [pc, #64]	; (800aabc <xTimerCreateTimerTask+0x84>)
 800aa7a:	4811      	ldr	r0, [pc, #68]	; (800aac0 <xTimerCreateTimerTask+0x88>)
 800aa7c:	f7ff f8de 	bl	8009c3c <xTaskCreateStatic>
 800aa80:	4603      	mov	r3, r0
 800aa82:	4a10      	ldr	r2, [pc, #64]	; (800aac4 <xTimerCreateTimerTask+0x8c>)
 800aa84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa86:	4b0f      	ldr	r3, [pc, #60]	; (800aac4 <xTimerCreateTimerTask+0x8c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10a      	bne.n	800aaae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	613b      	str	r3, [r7, #16]
}
 800aaaa:	bf00      	nop
 800aaac:	e7fe      	b.n	800aaac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aaae:	697b      	ldr	r3, [r7, #20]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3718      	adds	r7, #24
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	20001214 	.word	0x20001214
 800aabc:	08012690 	.word	0x08012690
 800aac0:	0800abfd 	.word	0x0800abfd
 800aac4:	20001218 	.word	0x20001218

0800aac8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b08a      	sub	sp, #40	; 0x28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aad6:	2300      	movs	r3, #0
 800aad8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10a      	bne.n	800aaf6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	623b      	str	r3, [r7, #32]
}
 800aaf2:	bf00      	nop
 800aaf4:	e7fe      	b.n	800aaf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aaf6:	4b1a      	ldr	r3, [pc, #104]	; (800ab60 <xTimerGenericCommand+0x98>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d02a      	beq.n	800ab54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2b05      	cmp	r3, #5
 800ab0e:	dc18      	bgt.n	800ab42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab10:	f7ff feb2 	bl	800a878 <xTaskGetSchedulerState>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d109      	bne.n	800ab2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab1a:	4b11      	ldr	r3, [pc, #68]	; (800ab60 <xTimerGenericCommand+0x98>)
 800ab1c:	6818      	ldr	r0, [r3, #0]
 800ab1e:	f107 0110 	add.w	r1, r7, #16
 800ab22:	2300      	movs	r3, #0
 800ab24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab26:	f7fe fca1 	bl	800946c <xQueueGenericSend>
 800ab2a:	6278      	str	r0, [r7, #36]	; 0x24
 800ab2c:	e012      	b.n	800ab54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab2e:	4b0c      	ldr	r3, [pc, #48]	; (800ab60 <xTimerGenericCommand+0x98>)
 800ab30:	6818      	ldr	r0, [r3, #0]
 800ab32:	f107 0110 	add.w	r1, r7, #16
 800ab36:	2300      	movs	r3, #0
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f7fe fc97 	bl	800946c <xQueueGenericSend>
 800ab3e:	6278      	str	r0, [r7, #36]	; 0x24
 800ab40:	e008      	b.n	800ab54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab42:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <xTimerGenericCommand+0x98>)
 800ab44:	6818      	ldr	r0, [r3, #0]
 800ab46:	f107 0110 	add.w	r1, r7, #16
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	f7fe fd8b 	bl	8009668 <xQueueGenericSendFromISR>
 800ab52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3728      	adds	r7, #40	; 0x28
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	20001214 	.word	0x20001214

0800ab64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b088      	sub	sp, #32
 800ab68:	af02      	add	r7, sp, #8
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab6e:	4b22      	ldr	r3, [pc, #136]	; (800abf8 <prvProcessExpiredTimer+0x94>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fe fb47 	bl	8009210 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab88:	f003 0304 	and.w	r3, r3, #4
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d022      	beq.n	800abd6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	699a      	ldr	r2, [r3, #24]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	18d1      	adds	r1, r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	6978      	ldr	r0, [r7, #20]
 800ab9e:	f000 f8d1 	bl	800ad44 <prvInsertTimerInActiveList>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d01f      	beq.n	800abe8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aba8:	2300      	movs	r3, #0
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	2300      	movs	r3, #0
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	2100      	movs	r1, #0
 800abb2:	6978      	ldr	r0, [r7, #20]
 800abb4:	f7ff ff88 	bl	800aac8 <xTimerGenericCommand>
 800abb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d113      	bne.n	800abe8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	60fb      	str	r3, [r7, #12]
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abdc:	f023 0301 	bic.w	r3, r3, #1
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	6978      	ldr	r0, [r7, #20]
 800abee:	4798      	blx	r3
}
 800abf0:	bf00      	nop
 800abf2:	3718      	adds	r7, #24
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	2000120c 	.word	0x2000120c

0800abfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac04:	f107 0308 	add.w	r3, r7, #8
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 f857 	bl	800acbc <prvGetNextExpireTime>
 800ac0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	4619      	mov	r1, r3
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f000 f803 	bl	800ac20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac1a:	f000 f8d5 	bl	800adc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac1e:	e7f1      	b.n	800ac04 <prvTimerTask+0x8>

0800ac20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac2a:	f7ff fa43 	bl	800a0b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac2e:	f107 0308 	add.w	r3, r7, #8
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 f866 	bl	800ad04 <prvSampleTimeNow>
 800ac38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d130      	bne.n	800aca2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10a      	bne.n	800ac5c <prvProcessTimerOrBlockTask+0x3c>
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d806      	bhi.n	800ac5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac4e:	f7ff fa3f 	bl	800a0d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac52:	68f9      	ldr	r1, [r7, #12]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f7ff ff85 	bl	800ab64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac5a:	e024      	b.n	800aca6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d008      	beq.n	800ac74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac62:	4b13      	ldr	r3, [pc, #76]	; (800acb0 <prvProcessTimerOrBlockTask+0x90>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <prvProcessTimerOrBlockTask+0x50>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e000      	b.n	800ac72 <prvProcessTimerOrBlockTask+0x52>
 800ac70:	2300      	movs	r3, #0
 800ac72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac74:	4b0f      	ldr	r3, [pc, #60]	; (800acb4 <prvProcessTimerOrBlockTask+0x94>)
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	4619      	mov	r1, r3
 800ac82:	f7fe ffa7 	bl	8009bd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac86:	f7ff fa23 	bl	800a0d0 <xTaskResumeAll>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac90:	4b09      	ldr	r3, [pc, #36]	; (800acb8 <prvProcessTimerOrBlockTask+0x98>)
 800ac92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac96:	601a      	str	r2, [r3, #0]
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	f3bf 8f6f 	isb	sy
}
 800aca0:	e001      	b.n	800aca6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aca2:	f7ff fa15 	bl	800a0d0 <xTaskResumeAll>
}
 800aca6:	bf00      	nop
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	20001210 	.word	0x20001210
 800acb4:	20001214 	.word	0x20001214
 800acb8:	e000ed04 	.word	0xe000ed04

0800acbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800acc4:	4b0e      	ldr	r3, [pc, #56]	; (800ad00 <prvGetNextExpireTime+0x44>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <prvGetNextExpireTime+0x16>
 800acce:	2201      	movs	r2, #1
 800acd0:	e000      	b.n	800acd4 <prvGetNextExpireTime+0x18>
 800acd2:	2200      	movs	r2, #0
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d105      	bne.n	800acec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ace0:	4b07      	ldr	r3, [pc, #28]	; (800ad00 <prvGetNextExpireTime+0x44>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	60fb      	str	r3, [r7, #12]
 800acea:	e001      	b.n	800acf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800acec:	2300      	movs	r3, #0
 800acee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800acf0:	68fb      	ldr	r3, [r7, #12]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	2000120c 	.word	0x2000120c

0800ad04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad0c:	f7ff fa7e 	bl	800a20c <xTaskGetTickCount>
 800ad10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad12:	4b0b      	ldr	r3, [pc, #44]	; (800ad40 <prvSampleTimeNow+0x3c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d205      	bcs.n	800ad28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad1c:	f000 f936 	bl	800af8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	e002      	b.n	800ad2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad2e:	4a04      	ldr	r2, [pc, #16]	; (800ad40 <prvSampleTimeNow+0x3c>)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad34:	68fb      	ldr	r3, [r7, #12]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	2000121c 	.word	0x2000121c

0800ad44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad52:	2300      	movs	r3, #0
 800ad54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d812      	bhi.n	800ad90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	1ad2      	subs	r2, r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d302      	bcc.n	800ad7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	617b      	str	r3, [r7, #20]
 800ad7c:	e01b      	b.n	800adb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad7e:	4b10      	ldr	r3, [pc, #64]	; (800adc0 <prvInsertTimerInActiveList+0x7c>)
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3304      	adds	r3, #4
 800ad86:	4619      	mov	r1, r3
 800ad88:	4610      	mov	r0, r2
 800ad8a:	f7fe fa08 	bl	800919e <vListInsert>
 800ad8e:	e012      	b.n	800adb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d206      	bcs.n	800ada6 <prvInsertTimerInActiveList+0x62>
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d302      	bcc.n	800ada6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ada0:	2301      	movs	r3, #1
 800ada2:	617b      	str	r3, [r7, #20]
 800ada4:	e007      	b.n	800adb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ada6:	4b07      	ldr	r3, [pc, #28]	; (800adc4 <prvInsertTimerInActiveList+0x80>)
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	3304      	adds	r3, #4
 800adae:	4619      	mov	r1, r3
 800adb0:	4610      	mov	r0, r2
 800adb2:	f7fe f9f4 	bl	800919e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800adb6:	697b      	ldr	r3, [r7, #20]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3718      	adds	r7, #24
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	20001210 	.word	0x20001210
 800adc4:	2000120c 	.word	0x2000120c

0800adc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08e      	sub	sp, #56	; 0x38
 800adcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adce:	e0ca      	b.n	800af66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	da18      	bge.n	800ae08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800add6:	1d3b      	adds	r3, r7, #4
 800add8:	3304      	adds	r3, #4
 800adda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800addc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10a      	bne.n	800adf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	61fb      	str	r3, [r7, #28]
}
 800adf4:	bf00      	nop
 800adf6:	e7fe      	b.n	800adf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adfe:	6850      	ldr	r0, [r2, #4]
 800ae00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae02:	6892      	ldr	r2, [r2, #8]
 800ae04:	4611      	mov	r1, r2
 800ae06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f2c0 80aa 	blt.w	800af64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	695b      	ldr	r3, [r3, #20]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d004      	beq.n	800ae26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1e:	3304      	adds	r3, #4
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fe f9f5 	bl	8009210 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae26:	463b      	mov	r3, r7
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7ff ff6b 	bl	800ad04 <prvSampleTimeNow>
 800ae2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b09      	cmp	r3, #9
 800ae34:	f200 8097 	bhi.w	800af66 <prvProcessReceivedCommands+0x19e>
 800ae38:	a201      	add	r2, pc, #4	; (adr r2, 800ae40 <prvProcessReceivedCommands+0x78>)
 800ae3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3e:	bf00      	nop
 800ae40:	0800ae69 	.word	0x0800ae69
 800ae44:	0800ae69 	.word	0x0800ae69
 800ae48:	0800ae69 	.word	0x0800ae69
 800ae4c:	0800aedd 	.word	0x0800aedd
 800ae50:	0800aef1 	.word	0x0800aef1
 800ae54:	0800af3b 	.word	0x0800af3b
 800ae58:	0800ae69 	.word	0x0800ae69
 800ae5c:	0800ae69 	.word	0x0800ae69
 800ae60:	0800aedd 	.word	0x0800aedd
 800ae64:	0800aef1 	.word	0x0800aef1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae6e:	f043 0301 	orr.w	r3, r3, #1
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	18d1      	adds	r1, r2, r3
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae88:	f7ff ff5c 	bl	800ad44 <prvInsertTimerInActiveList>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d069      	beq.n	800af66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aea0:	f003 0304 	and.w	r3, r3, #4
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d05e      	beq.n	800af66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	441a      	add	r2, r3
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeba:	f7ff fe05 	bl	800aac8 <xTimerGenericCommand>
 800aebe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aec0:	6a3b      	ldr	r3, [r7, #32]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d14f      	bne.n	800af66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	61bb      	str	r3, [r7, #24]
}
 800aed8:	bf00      	nop
 800aeda:	e7fe      	b.n	800aeda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aee2:	f023 0301 	bic.w	r3, r3, #1
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aeee:	e03a      	b.n	800af66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aef6:	f043 0301 	orr.w	r3, r3, #1
 800aefa:	b2da      	uxtb	r2, r3
 800aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10a      	bne.n	800af26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	617b      	str	r3, [r7, #20]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af28:	699a      	ldr	r2, [r3, #24]
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	18d1      	adds	r1, r2, r3
 800af2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af34:	f7ff ff06 	bl	800ad44 <prvInsertTimerInActiveList>
					break;
 800af38:	e015      	b.n	800af66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af40:	f003 0302 	and.w	r3, r3, #2
 800af44:	2b00      	cmp	r3, #0
 800af46:	d103      	bne.n	800af50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800af48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af4a:	f000 fbe1 	bl	800b710 <vPortFree>
 800af4e:	e00a      	b.n	800af66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af56:	f023 0301 	bic.w	r3, r3, #1
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af62:	e000      	b.n	800af66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800af64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af66:	4b08      	ldr	r3, [pc, #32]	; (800af88 <prvProcessReceivedCommands+0x1c0>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	1d39      	adds	r1, r7, #4
 800af6c:	2200      	movs	r2, #0
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe fc16 	bl	80097a0 <xQueueReceive>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	f47f af2a 	bne.w	800add0 <prvProcessReceivedCommands+0x8>
	}
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	3730      	adds	r7, #48	; 0x30
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20001214 	.word	0x20001214

0800af8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af92:	e048      	b.n	800b026 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af94:	4b2d      	ldr	r3, [pc, #180]	; (800b04c <prvSwitchTimerLists+0xc0>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af9e:	4b2b      	ldr	r3, [pc, #172]	; (800b04c <prvSwitchTimerLists+0xc0>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3304      	adds	r3, #4
 800afac:	4618      	mov	r0, r3
 800afae:	f7fe f92f 	bl	8009210 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afc0:	f003 0304 	and.w	r3, r3, #4
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d02e      	beq.n	800b026 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	4413      	add	r3, r2
 800afd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d90e      	bls.n	800aff8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afe6:	4b19      	ldr	r3, [pc, #100]	; (800b04c <prvSwitchTimerLists+0xc0>)
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	3304      	adds	r3, #4
 800afee:	4619      	mov	r1, r3
 800aff0:	4610      	mov	r0, r2
 800aff2:	f7fe f8d4 	bl	800919e <vListInsert>
 800aff6:	e016      	b.n	800b026 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aff8:	2300      	movs	r3, #0
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	2300      	movs	r3, #0
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	2100      	movs	r1, #0
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f7ff fd60 	bl	800aac8 <xTimerGenericCommand>
 800b008:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	603b      	str	r3, [r7, #0]
}
 800b022:	bf00      	nop
 800b024:	e7fe      	b.n	800b024 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b026:	4b09      	ldr	r3, [pc, #36]	; (800b04c <prvSwitchTimerLists+0xc0>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1b1      	bne.n	800af94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b030:	4b06      	ldr	r3, [pc, #24]	; (800b04c <prvSwitchTimerLists+0xc0>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b036:	4b06      	ldr	r3, [pc, #24]	; (800b050 <prvSwitchTimerLists+0xc4>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a04      	ldr	r2, [pc, #16]	; (800b04c <prvSwitchTimerLists+0xc0>)
 800b03c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b03e:	4a04      	ldr	r2, [pc, #16]	; (800b050 <prvSwitchTimerLists+0xc4>)
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	6013      	str	r3, [r2, #0]
}
 800b044:	bf00      	nop
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	2000120c 	.word	0x2000120c
 800b050:	20001210 	.word	0x20001210

0800b054 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b05a:	f000 f96b 	bl	800b334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b05e:	4b15      	ldr	r3, [pc, #84]	; (800b0b4 <prvCheckForValidListAndQueue+0x60>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d120      	bne.n	800b0a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b066:	4814      	ldr	r0, [pc, #80]	; (800b0b8 <prvCheckForValidListAndQueue+0x64>)
 800b068:	f7fe f848 	bl	80090fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b06c:	4813      	ldr	r0, [pc, #76]	; (800b0bc <prvCheckForValidListAndQueue+0x68>)
 800b06e:	f7fe f845 	bl	80090fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b072:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <prvCheckForValidListAndQueue+0x6c>)
 800b074:	4a10      	ldr	r2, [pc, #64]	; (800b0b8 <prvCheckForValidListAndQueue+0x64>)
 800b076:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b078:	4b12      	ldr	r3, [pc, #72]	; (800b0c4 <prvCheckForValidListAndQueue+0x70>)
 800b07a:	4a10      	ldr	r2, [pc, #64]	; (800b0bc <prvCheckForValidListAndQueue+0x68>)
 800b07c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b07e:	2300      	movs	r3, #0
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	4b11      	ldr	r3, [pc, #68]	; (800b0c8 <prvCheckForValidListAndQueue+0x74>)
 800b084:	4a11      	ldr	r2, [pc, #68]	; (800b0cc <prvCheckForValidListAndQueue+0x78>)
 800b086:	2110      	movs	r1, #16
 800b088:	200a      	movs	r0, #10
 800b08a:	f7fe f953 	bl	8009334 <xQueueGenericCreateStatic>
 800b08e:	4603      	mov	r3, r0
 800b090:	4a08      	ldr	r2, [pc, #32]	; (800b0b4 <prvCheckForValidListAndQueue+0x60>)
 800b092:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b094:	4b07      	ldr	r3, [pc, #28]	; (800b0b4 <prvCheckForValidListAndQueue+0x60>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d005      	beq.n	800b0a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b09c:	4b05      	ldr	r3, [pc, #20]	; (800b0b4 <prvCheckForValidListAndQueue+0x60>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	490b      	ldr	r1, [pc, #44]	; (800b0d0 <prvCheckForValidListAndQueue+0x7c>)
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fe fd6c 	bl	8009b80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0a8:	f000 f974 	bl	800b394 <vPortExitCritical>
}
 800b0ac:	bf00      	nop
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20001214 	.word	0x20001214
 800b0b8:	200011e4 	.word	0x200011e4
 800b0bc:	200011f8 	.word	0x200011f8
 800b0c0:	2000120c 	.word	0x2000120c
 800b0c4:	20001210 	.word	0x20001210
 800b0c8:	200012c0 	.word	0x200012c0
 800b0cc:	20001220 	.word	0x20001220
 800b0d0:	08012698 	.word	0x08012698

0800b0d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	3b04      	subs	r3, #4
 800b0e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	3b04      	subs	r3, #4
 800b0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	f023 0201 	bic.w	r2, r3, #1
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3b04      	subs	r3, #4
 800b102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b104:	4a0c      	ldr	r2, [pc, #48]	; (800b138 <pxPortInitialiseStack+0x64>)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3b14      	subs	r3, #20
 800b10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3b04      	subs	r3, #4
 800b11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f06f 0202 	mvn.w	r2, #2
 800b122:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	3b20      	subs	r3, #32
 800b128:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b12a:	68fb      	ldr	r3, [r7, #12]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	0800b13d 	.word	0x0800b13d

0800b13c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b146:	4b12      	ldr	r3, [pc, #72]	; (800b190 <prvTaskExitError+0x54>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14e:	d00a      	beq.n	800b166 <prvTaskExitError+0x2a>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	60fb      	str	r3, [r7, #12]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <prvTaskExitError+0x28>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	60bb      	str	r3, [r7, #8]
}
 800b178:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b17a:	bf00      	nop
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0fc      	beq.n	800b17c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b182:	bf00      	nop
 800b184:	bf00      	nop
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr
 800b190:	200000bc 	.word	0x200000bc
	...

0800b1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b1a0:	4b07      	ldr	r3, [pc, #28]	; (800b1c0 <pxCurrentTCBConst2>)
 800b1a2:	6819      	ldr	r1, [r3, #0]
 800b1a4:	6808      	ldr	r0, [r1, #0]
 800b1a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1aa:	f380 8809 	msr	PSP, r0
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f04f 0000 	mov.w	r0, #0
 800b1b6:	f380 8811 	msr	BASEPRI, r0
 800b1ba:	4770      	bx	lr
 800b1bc:	f3af 8000 	nop.w

0800b1c0 <pxCurrentTCBConst2>:
 800b1c0:	20000ce4 	.word	0x20000ce4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1c4:	bf00      	nop
 800b1c6:	bf00      	nop

0800b1c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1c8:	4808      	ldr	r0, [pc, #32]	; (800b1ec <prvPortStartFirstTask+0x24>)
 800b1ca:	6800      	ldr	r0, [r0, #0]
 800b1cc:	6800      	ldr	r0, [r0, #0]
 800b1ce:	f380 8808 	msr	MSP, r0
 800b1d2:	f04f 0000 	mov.w	r0, #0
 800b1d6:	f380 8814 	msr	CONTROL, r0
 800b1da:	b662      	cpsie	i
 800b1dc:	b661      	cpsie	f
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	df00      	svc	0
 800b1e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1ea:	bf00      	nop
 800b1ec:	e000ed08 	.word	0xe000ed08

0800b1f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1f6:	4b46      	ldr	r3, [pc, #280]	; (800b310 <xPortStartScheduler+0x120>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a46      	ldr	r2, [pc, #280]	; (800b314 <xPortStartScheduler+0x124>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d10a      	bne.n	800b216 <xPortStartScheduler+0x26>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	613b      	str	r3, [r7, #16]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b216:	4b3e      	ldr	r3, [pc, #248]	; (800b310 <xPortStartScheduler+0x120>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a3f      	ldr	r2, [pc, #252]	; (800b318 <xPortStartScheduler+0x128>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d10a      	bne.n	800b236 <xPortStartScheduler+0x46>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	60fb      	str	r3, [r7, #12]
}
 800b232:	bf00      	nop
 800b234:	e7fe      	b.n	800b234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b236:	4b39      	ldr	r3, [pc, #228]	; (800b31c <xPortStartScheduler+0x12c>)
 800b238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	22ff      	movs	r2, #255	; 0xff
 800b246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b250:	78fb      	ldrb	r3, [r7, #3]
 800b252:	b2db      	uxtb	r3, r3
 800b254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b258:	b2da      	uxtb	r2, r3
 800b25a:	4b31      	ldr	r3, [pc, #196]	; (800b320 <xPortStartScheduler+0x130>)
 800b25c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b25e:	4b31      	ldr	r3, [pc, #196]	; (800b324 <xPortStartScheduler+0x134>)
 800b260:	2207      	movs	r2, #7
 800b262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b264:	e009      	b.n	800b27a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b266:	4b2f      	ldr	r3, [pc, #188]	; (800b324 <xPortStartScheduler+0x134>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	3b01      	subs	r3, #1
 800b26c:	4a2d      	ldr	r2, [pc, #180]	; (800b324 <xPortStartScheduler+0x134>)
 800b26e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b270:	78fb      	ldrb	r3, [r7, #3]
 800b272:	b2db      	uxtb	r3, r3
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	b2db      	uxtb	r3, r3
 800b278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b27a:	78fb      	ldrb	r3, [r7, #3]
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b282:	2b80      	cmp	r3, #128	; 0x80
 800b284:	d0ef      	beq.n	800b266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b286:	4b27      	ldr	r3, [pc, #156]	; (800b324 <xPortStartScheduler+0x134>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f1c3 0307 	rsb	r3, r3, #7
 800b28e:	2b04      	cmp	r3, #4
 800b290:	d00a      	beq.n	800b2a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	60bb      	str	r3, [r7, #8]
}
 800b2a4:	bf00      	nop
 800b2a6:	e7fe      	b.n	800b2a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2a8:	4b1e      	ldr	r3, [pc, #120]	; (800b324 <xPortStartScheduler+0x134>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	4a1d      	ldr	r2, [pc, #116]	; (800b324 <xPortStartScheduler+0x134>)
 800b2b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2b2:	4b1c      	ldr	r3, [pc, #112]	; (800b324 <xPortStartScheduler+0x134>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2ba:	4a1a      	ldr	r2, [pc, #104]	; (800b324 <xPortStartScheduler+0x134>)
 800b2bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2c6:	4b18      	ldr	r3, [pc, #96]	; (800b328 <xPortStartScheduler+0x138>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a17      	ldr	r2, [pc, #92]	; (800b328 <xPortStartScheduler+0x138>)
 800b2cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2d2:	4b15      	ldr	r3, [pc, #84]	; (800b328 <xPortStartScheduler+0x138>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a14      	ldr	r2, [pc, #80]	; (800b328 <xPortStartScheduler+0x138>)
 800b2d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b2dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2de:	f000 f8dd 	bl	800b49c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2e2:	4b12      	ldr	r3, [pc, #72]	; (800b32c <xPortStartScheduler+0x13c>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2e8:	f000 f8fc 	bl	800b4e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2ec:	4b10      	ldr	r3, [pc, #64]	; (800b330 <xPortStartScheduler+0x140>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a0f      	ldr	r2, [pc, #60]	; (800b330 <xPortStartScheduler+0x140>)
 800b2f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2f8:	f7ff ff66 	bl	800b1c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2fc:	f7ff f850 	bl	800a3a0 <vTaskSwitchContext>
	prvTaskExitError();
 800b300:	f7ff ff1c 	bl	800b13c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3718      	adds	r7, #24
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	e000ed00 	.word	0xe000ed00
 800b314:	410fc271 	.word	0x410fc271
 800b318:	410fc270 	.word	0x410fc270
 800b31c:	e000e400 	.word	0xe000e400
 800b320:	20001310 	.word	0x20001310
 800b324:	20001314 	.word	0x20001314
 800b328:	e000ed20 	.word	0xe000ed20
 800b32c:	200000bc 	.word	0x200000bc
 800b330:	e000ef34 	.word	0xe000ef34

0800b334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	607b      	str	r3, [r7, #4]
}
 800b34c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b34e:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <vPortEnterCritical+0x58>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	3301      	adds	r3, #1
 800b354:	4a0d      	ldr	r2, [pc, #52]	; (800b38c <vPortEnterCritical+0x58>)
 800b356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b358:	4b0c      	ldr	r3, [pc, #48]	; (800b38c <vPortEnterCritical+0x58>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d10f      	bne.n	800b380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b360:	4b0b      	ldr	r3, [pc, #44]	; (800b390 <vPortEnterCritical+0x5c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00a      	beq.n	800b380 <vPortEnterCritical+0x4c>
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	603b      	str	r3, [r7, #0]
}
 800b37c:	bf00      	nop
 800b37e:	e7fe      	b.n	800b37e <vPortEnterCritical+0x4a>
	}
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	200000bc 	.word	0x200000bc
 800b390:	e000ed04 	.word	0xe000ed04

0800b394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b39a:	4b12      	ldr	r3, [pc, #72]	; (800b3e4 <vPortExitCritical+0x50>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10a      	bne.n	800b3b8 <vPortExitCritical+0x24>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	607b      	str	r3, [r7, #4]
}
 800b3b4:	bf00      	nop
 800b3b6:	e7fe      	b.n	800b3b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3b8:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <vPortExitCritical+0x50>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	4a09      	ldr	r2, [pc, #36]	; (800b3e4 <vPortExitCritical+0x50>)
 800b3c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3c2:	4b08      	ldr	r3, [pc, #32]	; (800b3e4 <vPortExitCritical+0x50>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d105      	bne.n	800b3d6 <vPortExitCritical+0x42>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	f383 8811 	msr	BASEPRI, r3
}
 800b3d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3d6:	bf00      	nop
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	200000bc 	.word	0x200000bc
	...

0800b3f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3f0:	f3ef 8009 	mrs	r0, PSP
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	4b15      	ldr	r3, [pc, #84]	; (800b450 <pxCurrentTCBConst>)
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	f01e 0f10 	tst.w	lr, #16
 800b400:	bf08      	it	eq
 800b402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40a:	6010      	str	r0, [r2, #0]
 800b40c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b410:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b414:	f380 8811 	msr	BASEPRI, r0
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f7fe ffbe 	bl	800a3a0 <vTaskSwitchContext>
 800b424:	f04f 0000 	mov.w	r0, #0
 800b428:	f380 8811 	msr	BASEPRI, r0
 800b42c:	bc09      	pop	{r0, r3}
 800b42e:	6819      	ldr	r1, [r3, #0]
 800b430:	6808      	ldr	r0, [r1, #0]
 800b432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b436:	f01e 0f10 	tst.w	lr, #16
 800b43a:	bf08      	it	eq
 800b43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b440:	f380 8809 	msr	PSP, r0
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	f3af 8000 	nop.w

0800b450 <pxCurrentTCBConst>:
 800b450:	20000ce4 	.word	0x20000ce4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b454:	bf00      	nop
 800b456:	bf00      	nop

0800b458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
	__asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	607b      	str	r3, [r7, #4]
}
 800b470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b472:	f7fe fedb 	bl	800a22c <xTaskIncrementTick>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d003      	beq.n	800b484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b47c:	4b06      	ldr	r3, [pc, #24]	; (800b498 <xPortSysTickHandler+0x40>)
 800b47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b482:	601a      	str	r2, [r3, #0]
 800b484:	2300      	movs	r3, #0
 800b486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	f383 8811 	msr	BASEPRI, r3
}
 800b48e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b490:	bf00      	nop
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	e000ed04 	.word	0xe000ed04

0800b49c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b49c:	b480      	push	{r7}
 800b49e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4a0:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <vPortSetupTimerInterrupt+0x34>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4a6:	4b0b      	ldr	r3, [pc, #44]	; (800b4d4 <vPortSetupTimerInterrupt+0x38>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4ac:	4b0a      	ldr	r3, [pc, #40]	; (800b4d8 <vPortSetupTimerInterrupt+0x3c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a0a      	ldr	r2, [pc, #40]	; (800b4dc <vPortSetupTimerInterrupt+0x40>)
 800b4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b6:	099b      	lsrs	r3, r3, #6
 800b4b8:	4a09      	ldr	r2, [pc, #36]	; (800b4e0 <vPortSetupTimerInterrupt+0x44>)
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4be:	4b04      	ldr	r3, [pc, #16]	; (800b4d0 <vPortSetupTimerInterrupt+0x34>)
 800b4c0:	2207      	movs	r2, #7
 800b4c2:	601a      	str	r2, [r3, #0]
}
 800b4c4:	bf00      	nop
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	e000e010 	.word	0xe000e010
 800b4d4:	e000e018 	.word	0xe000e018
 800b4d8:	20000000 	.word	0x20000000
 800b4dc:	10624dd3 	.word	0x10624dd3
 800b4e0:	e000e014 	.word	0xe000e014

0800b4e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b4f4 <vPortEnableVFP+0x10>
 800b4e8:	6801      	ldr	r1, [r0, #0]
 800b4ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b4ee:	6001      	str	r1, [r0, #0]
 800b4f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4f2:	bf00      	nop
 800b4f4:	e000ed88 	.word	0xe000ed88

0800b4f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4fe:	f3ef 8305 	mrs	r3, IPSR
 800b502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2b0f      	cmp	r3, #15
 800b508:	d914      	bls.n	800b534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b50a:	4a17      	ldr	r2, [pc, #92]	; (800b568 <vPortValidateInterruptPriority+0x70>)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	4413      	add	r3, r2
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b514:	4b15      	ldr	r3, [pc, #84]	; (800b56c <vPortValidateInterruptPriority+0x74>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	7afa      	ldrb	r2, [r7, #11]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d20a      	bcs.n	800b534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	607b      	str	r3, [r7, #4]
}
 800b530:	bf00      	nop
 800b532:	e7fe      	b.n	800b532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b534:	4b0e      	ldr	r3, [pc, #56]	; (800b570 <vPortValidateInterruptPriority+0x78>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b53c:	4b0d      	ldr	r3, [pc, #52]	; (800b574 <vPortValidateInterruptPriority+0x7c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	429a      	cmp	r2, r3
 800b542:	d90a      	bls.n	800b55a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	603b      	str	r3, [r7, #0]
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <vPortValidateInterruptPriority+0x60>
	}
 800b55a:	bf00      	nop
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	e000e3f0 	.word	0xe000e3f0
 800b56c:	20001310 	.word	0x20001310
 800b570:	e000ed0c 	.word	0xe000ed0c
 800b574:	20001314 	.word	0x20001314

0800b578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b08a      	sub	sp, #40	; 0x28
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b580:	2300      	movs	r3, #0
 800b582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b584:	f7fe fd96 	bl	800a0b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b588:	4b5b      	ldr	r3, [pc, #364]	; (800b6f8 <pvPortMalloc+0x180>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b590:	f000 f920 	bl	800b7d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b594:	4b59      	ldr	r3, [pc, #356]	; (800b6fc <pvPortMalloc+0x184>)
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4013      	ands	r3, r2
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f040 8093 	bne.w	800b6c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d01d      	beq.n	800b5e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b5a8:	2208      	movs	r2, #8
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f003 0307 	and.w	r3, r3, #7
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d014      	beq.n	800b5e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f023 0307 	bic.w	r3, r3, #7
 800b5c0:	3308      	adds	r3, #8
 800b5c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f003 0307 	and.w	r3, r3, #7
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00a      	beq.n	800b5e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	617b      	str	r3, [r7, #20]
}
 800b5e0:	bf00      	nop
 800b5e2:	e7fe      	b.n	800b5e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d06e      	beq.n	800b6c8 <pvPortMalloc+0x150>
 800b5ea:	4b45      	ldr	r3, [pc, #276]	; (800b700 <pvPortMalloc+0x188>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d869      	bhi.n	800b6c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5f4:	4b43      	ldr	r3, [pc, #268]	; (800b704 <pvPortMalloc+0x18c>)
 800b5f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5f8:	4b42      	ldr	r3, [pc, #264]	; (800b704 <pvPortMalloc+0x18c>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5fe:	e004      	b.n	800b60a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	429a      	cmp	r2, r3
 800b612:	d903      	bls.n	800b61c <pvPortMalloc+0xa4>
 800b614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1f1      	bne.n	800b600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b61c:	4b36      	ldr	r3, [pc, #216]	; (800b6f8 <pvPortMalloc+0x180>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b622:	429a      	cmp	r2, r3
 800b624:	d050      	beq.n	800b6c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2208      	movs	r2, #8
 800b62c:	4413      	add	r3, r2
 800b62e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	1ad2      	subs	r2, r2, r3
 800b640:	2308      	movs	r3, #8
 800b642:	005b      	lsls	r3, r3, #1
 800b644:	429a      	cmp	r2, r3
 800b646:	d91f      	bls.n	800b688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4413      	add	r3, r2
 800b64e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	f003 0307 	and.w	r3, r3, #7
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00a      	beq.n	800b670 <pvPortMalloc+0xf8>
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	613b      	str	r3, [r7, #16]
}
 800b66c:	bf00      	nop
 800b66e:	e7fe      	b.n	800b66e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	1ad2      	subs	r2, r2, r3
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b682:	69b8      	ldr	r0, [r7, #24]
 800b684:	f000 f908 	bl	800b898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b688:	4b1d      	ldr	r3, [pc, #116]	; (800b700 <pvPortMalloc+0x188>)
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	1ad3      	subs	r3, r2, r3
 800b692:	4a1b      	ldr	r2, [pc, #108]	; (800b700 <pvPortMalloc+0x188>)
 800b694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b696:	4b1a      	ldr	r3, [pc, #104]	; (800b700 <pvPortMalloc+0x188>)
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	4b1b      	ldr	r3, [pc, #108]	; (800b708 <pvPortMalloc+0x190>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d203      	bcs.n	800b6aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6a2:	4b17      	ldr	r3, [pc, #92]	; (800b700 <pvPortMalloc+0x188>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a18      	ldr	r2, [pc, #96]	; (800b708 <pvPortMalloc+0x190>)
 800b6a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	4b13      	ldr	r3, [pc, #76]	; (800b6fc <pvPortMalloc+0x184>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	431a      	orrs	r2, r3
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b6be:	4b13      	ldr	r3, [pc, #76]	; (800b70c <pvPortMalloc+0x194>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	4a11      	ldr	r2, [pc, #68]	; (800b70c <pvPortMalloc+0x194>)
 800b6c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6c8:	f7fe fd02 	bl	800a0d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	f003 0307 	and.w	r3, r3, #7
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00a      	beq.n	800b6ec <pvPortMalloc+0x174>
	__asm volatile
 800b6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6da:	f383 8811 	msr	BASEPRI, r3
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f3bf 8f4f 	dsb	sy
 800b6e6:	60fb      	str	r3, [r7, #12]
}
 800b6e8:	bf00      	nop
 800b6ea:	e7fe      	b.n	800b6ea <pvPortMalloc+0x172>
	return pvReturn;
 800b6ec:	69fb      	ldr	r3, [r7, #28]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3728      	adds	r7, #40	; 0x28
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20004f20 	.word	0x20004f20
 800b6fc:	20004f34 	.word	0x20004f34
 800b700:	20004f24 	.word	0x20004f24
 800b704:	20004f18 	.word	0x20004f18
 800b708:	20004f28 	.word	0x20004f28
 800b70c:	20004f2c 	.word	0x20004f2c

0800b710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d04d      	beq.n	800b7be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b722:	2308      	movs	r3, #8
 800b724:	425b      	negs	r3, r3
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	4413      	add	r3, r2
 800b72a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	685a      	ldr	r2, [r3, #4]
 800b734:	4b24      	ldr	r3, [pc, #144]	; (800b7c8 <vPortFree+0xb8>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4013      	ands	r3, r2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10a      	bne.n	800b754 <vPortFree+0x44>
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	60fb      	str	r3, [r7, #12]
}
 800b750:	bf00      	nop
 800b752:	e7fe      	b.n	800b752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00a      	beq.n	800b772 <vPortFree+0x62>
	__asm volatile
 800b75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	60bb      	str	r3, [r7, #8]
}
 800b76e:	bf00      	nop
 800b770:	e7fe      	b.n	800b770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	685a      	ldr	r2, [r3, #4]
 800b776:	4b14      	ldr	r3, [pc, #80]	; (800b7c8 <vPortFree+0xb8>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4013      	ands	r3, r2
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d01e      	beq.n	800b7be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d11a      	bne.n	800b7be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	685a      	ldr	r2, [r3, #4]
 800b78c:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <vPortFree+0xb8>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	43db      	mvns	r3, r3
 800b792:	401a      	ands	r2, r3
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b798:	f7fe fc8c 	bl	800a0b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	4b0a      	ldr	r3, [pc, #40]	; (800b7cc <vPortFree+0xbc>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	4a09      	ldr	r2, [pc, #36]	; (800b7cc <vPortFree+0xbc>)
 800b7a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7aa:	6938      	ldr	r0, [r7, #16]
 800b7ac:	f000 f874 	bl	800b898 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b7b0:	4b07      	ldr	r3, [pc, #28]	; (800b7d0 <vPortFree+0xc0>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	4a06      	ldr	r2, [pc, #24]	; (800b7d0 <vPortFree+0xc0>)
 800b7b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b7ba:	f7fe fc89 	bl	800a0d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7be:	bf00      	nop
 800b7c0:	3718      	adds	r7, #24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20004f34 	.word	0x20004f34
 800b7cc:	20004f24 	.word	0x20004f24
 800b7d0:	20004f30 	.word	0x20004f30

0800b7d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b7de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7e0:	4b27      	ldr	r3, [pc, #156]	; (800b880 <prvHeapInit+0xac>)
 800b7e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f003 0307 	and.w	r3, r3, #7
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00c      	beq.n	800b808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	3307      	adds	r3, #7
 800b7f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f023 0307 	bic.w	r3, r3, #7
 800b7fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	1ad3      	subs	r3, r2, r3
 800b802:	4a1f      	ldr	r2, [pc, #124]	; (800b880 <prvHeapInit+0xac>)
 800b804:	4413      	add	r3, r2
 800b806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b80c:	4a1d      	ldr	r2, [pc, #116]	; (800b884 <prvHeapInit+0xb0>)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b812:	4b1c      	ldr	r3, [pc, #112]	; (800b884 <prvHeapInit+0xb0>)
 800b814:	2200      	movs	r2, #0
 800b816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	4413      	add	r3, r2
 800b81e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b820:	2208      	movs	r2, #8
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	1a9b      	subs	r3, r3, r2
 800b826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f023 0307 	bic.w	r3, r3, #7
 800b82e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	4a15      	ldr	r2, [pc, #84]	; (800b888 <prvHeapInit+0xb4>)
 800b834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b836:	4b14      	ldr	r3, [pc, #80]	; (800b888 <prvHeapInit+0xb4>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2200      	movs	r2, #0
 800b83c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b83e:	4b12      	ldr	r3, [pc, #72]	; (800b888 <prvHeapInit+0xb4>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	1ad2      	subs	r2, r2, r3
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b854:	4b0c      	ldr	r3, [pc, #48]	; (800b888 <prvHeapInit+0xb4>)
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	4a0a      	ldr	r2, [pc, #40]	; (800b88c <prvHeapInit+0xb8>)
 800b862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	4a09      	ldr	r2, [pc, #36]	; (800b890 <prvHeapInit+0xbc>)
 800b86a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b86c:	4b09      	ldr	r3, [pc, #36]	; (800b894 <prvHeapInit+0xc0>)
 800b86e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b872:	601a      	str	r2, [r3, #0]
}
 800b874:	bf00      	nop
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	20001318 	.word	0x20001318
 800b884:	20004f18 	.word	0x20004f18
 800b888:	20004f20 	.word	0x20004f20
 800b88c:	20004f28 	.word	0x20004f28
 800b890:	20004f24 	.word	0x20004f24
 800b894:	20004f34 	.word	0x20004f34

0800b898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8a0:	4b28      	ldr	r3, [pc, #160]	; (800b944 <prvInsertBlockIntoFreeList+0xac>)
 800b8a2:	60fb      	str	r3, [r7, #12]
 800b8a4:	e002      	b.n	800b8ac <prvInsertBlockIntoFreeList+0x14>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d8f7      	bhi.n	800b8a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d108      	bne.n	800b8da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	685a      	ldr	r2, [r3, #4]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	441a      	add	r2, r3
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	441a      	add	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d118      	bne.n	800b920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	4b15      	ldr	r3, [pc, #84]	; (800b948 <prvInsertBlockIntoFreeList+0xb0>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d00d      	beq.n	800b916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685a      	ldr	r2, [r3, #4]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	441a      	add	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	e008      	b.n	800b928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b916:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <prvInsertBlockIntoFreeList+0xb0>)
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	601a      	str	r2, [r3, #0]
 800b91e:	e003      	b.n	800b928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d002      	beq.n	800b936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b936:	bf00      	nop
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	20004f18 	.word	0x20004f18
 800b948:	20004f20 	.word	0x20004f20

0800b94c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b950:	2201      	movs	r2, #1
 800b952:	4912      	ldr	r1, [pc, #72]	; (800b99c <MX_USB_DEVICE_Init+0x50>)
 800b954:	4812      	ldr	r0, [pc, #72]	; (800b9a0 <MX_USB_DEVICE_Init+0x54>)
 800b956:	f7fc f915 	bl	8007b84 <USBD_Init>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d004      	beq.n	800b96a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800b960:	4b10      	ldr	r3, [pc, #64]	; (800b9a4 <MX_USB_DEVICE_Init+0x58>)
 800b962:	2201      	movs	r2, #1
 800b964:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b966:	f7f5 ff09 	bl	800177c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b96a:	490f      	ldr	r1, [pc, #60]	; (800b9a8 <MX_USB_DEVICE_Init+0x5c>)
 800b96c:	480c      	ldr	r0, [pc, #48]	; (800b9a0 <MX_USB_DEVICE_Init+0x54>)
 800b96e:	f7fc f939 	bl	8007be4 <USBD_RegisterClass>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d004      	beq.n	800b982 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800b978:	4b0a      	ldr	r3, [pc, #40]	; (800b9a4 <MX_USB_DEVICE_Init+0x58>)
 800b97a:	2201      	movs	r2, #1
 800b97c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b97e:	f7f5 fefd 	bl	800177c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b982:	4807      	ldr	r0, [pc, #28]	; (800b9a0 <MX_USB_DEVICE_Init+0x54>)
 800b984:	f7fc f955 	bl	8007c32 <USBD_Start>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d004      	beq.n	800b998 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800b98e:	4b05      	ldr	r3, [pc, #20]	; (800b9a4 <MX_USB_DEVICE_Init+0x58>)
 800b990:	2201      	movs	r2, #1
 800b992:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800b994:	f7f5 fef2 	bl	800177c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b998:	bf00      	nop
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	200000c0 	.word	0x200000c0
 800b9a0:	20005048 	.word	0x20005048
 800b9a4:	20004f38 	.word	0x20004f38
 800b9a8:	2000000c 	.word	0x2000000c

0800b9ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	6039      	str	r1, [r7, #0]
 800b9b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	2212      	movs	r2, #18
 800b9bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b9be:	4b03      	ldr	r3, [pc, #12]	; (800b9cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	200000dc 	.word	0x200000dc

0800b9d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	6039      	str	r1, [r7, #0]
 800b9da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2204      	movs	r2, #4
 800b9e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b9e2:	4b03      	ldr	r3, [pc, #12]	; (800b9f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	200000f0 	.word	0x200000f0

0800b9f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	6039      	str	r1, [r7, #0]
 800b9fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba00:	79fb      	ldrb	r3, [r7, #7]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d105      	bne.n	800ba12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	4907      	ldr	r1, [pc, #28]	; (800ba28 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba0a:	4808      	ldr	r0, [pc, #32]	; (800ba2c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba0c:	f7fd f943 	bl	8008c96 <USBD_GetString>
 800ba10:	e004      	b.n	800ba1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	4904      	ldr	r1, [pc, #16]	; (800ba28 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba16:	4805      	ldr	r0, [pc, #20]	; (800ba2c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba18:	f7fd f93d 	bl	8008c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba1c:	4b02      	ldr	r3, [pc, #8]	; (800ba28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	20005318 	.word	0x20005318
 800ba2c:	080126a0 	.word	0x080126a0

0800ba30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	6039      	str	r1, [r7, #0]
 800ba3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	4904      	ldr	r1, [pc, #16]	; (800ba50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba40:	4804      	ldr	r0, [pc, #16]	; (800ba54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba42:	f7fd f928 	bl	8008c96 <USBD_GetString>
  return USBD_StrDesc;
 800ba46:	4b02      	ldr	r3, [pc, #8]	; (800ba50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	20005318 	.word	0x20005318
 800ba54:	080126b8 	.word	0x080126b8

0800ba58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	6039      	str	r1, [r7, #0]
 800ba62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	221a      	movs	r2, #26
 800ba68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba6a:	f000 f843 	bl	800baf4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ba6e:	4b02      	ldr	r3, [pc, #8]	; (800ba78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	200000f4 	.word	0x200000f4

0800ba7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	4603      	mov	r3, r0
 800ba84:	6039      	str	r1, [r7, #0]
 800ba86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d105      	bne.n	800ba9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	4907      	ldr	r1, [pc, #28]	; (800bab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba92:	4808      	ldr	r0, [pc, #32]	; (800bab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba94:	f7fd f8ff 	bl	8008c96 <USBD_GetString>
 800ba98:	e004      	b.n	800baa4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	4904      	ldr	r1, [pc, #16]	; (800bab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba9e:	4805      	ldr	r0, [pc, #20]	; (800bab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800baa0:	f7fd f8f9 	bl	8008c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800baa4:	4b02      	ldr	r3, [pc, #8]	; (800bab0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	20005318 	.word	0x20005318
 800bab4:	080126cc 	.word	0x080126cc

0800bab8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	6039      	str	r1, [r7, #0]
 800bac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bac4:	79fb      	ldrb	r3, [r7, #7]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d105      	bne.n	800bad6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	4907      	ldr	r1, [pc, #28]	; (800baec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bace:	4808      	ldr	r0, [pc, #32]	; (800baf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bad0:	f7fd f8e1 	bl	8008c96 <USBD_GetString>
 800bad4:	e004      	b.n	800bae0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	4904      	ldr	r1, [pc, #16]	; (800baec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bada:	4805      	ldr	r0, [pc, #20]	; (800baf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800badc:	f7fd f8db 	bl	8008c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bae0:	4b02      	ldr	r3, [pc, #8]	; (800baec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	20005318 	.word	0x20005318
 800baf0:	080126d8 	.word	0x080126d8

0800baf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bafa:	4b0f      	ldr	r3, [pc, #60]	; (800bb38 <Get_SerialNum+0x44>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb00:	4b0e      	ldr	r3, [pc, #56]	; (800bb3c <Get_SerialNum+0x48>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb06:	4b0e      	ldr	r3, [pc, #56]	; (800bb40 <Get_SerialNum+0x4c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4413      	add	r3, r2
 800bb12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d009      	beq.n	800bb2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb1a:	2208      	movs	r2, #8
 800bb1c:	4909      	ldr	r1, [pc, #36]	; (800bb44 <Get_SerialNum+0x50>)
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f000 f814 	bl	800bb4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb24:	2204      	movs	r2, #4
 800bb26:	4908      	ldr	r1, [pc, #32]	; (800bb48 <Get_SerialNum+0x54>)
 800bb28:	68b8      	ldr	r0, [r7, #8]
 800bb2a:	f000 f80f 	bl	800bb4c <IntToUnicode>
  }
}
 800bb2e:	bf00      	nop
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	1fff7a10 	.word	0x1fff7a10
 800bb3c:	1fff7a14 	.word	0x1fff7a14
 800bb40:	1fff7a18 	.word	0x1fff7a18
 800bb44:	200000f6 	.word	0x200000f6
 800bb48:	20000106 	.word	0x20000106

0800bb4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	4613      	mov	r3, r2
 800bb58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb5e:	2300      	movs	r3, #0
 800bb60:	75fb      	strb	r3, [r7, #23]
 800bb62:	e027      	b.n	800bbb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	0f1b      	lsrs	r3, r3, #28
 800bb68:	2b09      	cmp	r3, #9
 800bb6a:	d80b      	bhi.n	800bb84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	0f1b      	lsrs	r3, r3, #28
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	4619      	mov	r1, r3
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	440b      	add	r3, r1
 800bb7c:	3230      	adds	r2, #48	; 0x30
 800bb7e:	b2d2      	uxtb	r2, r2
 800bb80:	701a      	strb	r2, [r3, #0]
 800bb82:	e00a      	b.n	800bb9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	0f1b      	lsrs	r3, r3, #28
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
 800bb8c:	005b      	lsls	r3, r3, #1
 800bb8e:	4619      	mov	r1, r3
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	440b      	add	r3, r1
 800bb94:	3237      	adds	r2, #55	; 0x37
 800bb96:	b2d2      	uxtb	r2, r2
 800bb98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	011b      	lsls	r3, r3, #4
 800bb9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	3301      	adds	r3, #1
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	4413      	add	r3, r2
 800bbaa:	2200      	movs	r2, #0
 800bbac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bbae:	7dfb      	ldrb	r3, [r7, #23]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	75fb      	strb	r3, [r7, #23]
 800bbb4:	7dfa      	ldrb	r2, [r7, #23]
 800bbb6:	79fb      	ldrb	r3, [r7, #7]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d3d3      	bcc.n	800bb64 <IntToUnicode+0x18>
  }
}
 800bbbc:	bf00      	nop
 800bbbe:	bf00      	nop
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
	...

0800bbcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b08a      	sub	sp, #40	; 0x28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbd4:	f107 0314 	add.w	r3, r7, #20
 800bbd8:	2200      	movs	r2, #0
 800bbda:	601a      	str	r2, [r3, #0]
 800bbdc:	605a      	str	r2, [r3, #4]
 800bbde:	609a      	str	r2, [r3, #8]
 800bbe0:	60da      	str	r2, [r3, #12]
 800bbe2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbec:	d13a      	bne.n	800bc64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbee:	2300      	movs	r3, #0
 800bbf0:	613b      	str	r3, [r7, #16]
 800bbf2:	4b1e      	ldr	r3, [pc, #120]	; (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bbf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf6:	4a1d      	ldr	r2, [pc, #116]	; (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bbf8:	f043 0301 	orr.w	r3, r3, #1
 800bbfc:	6313      	str	r3, [r2, #48]	; 0x30
 800bbfe:	4b1b      	ldr	r3, [pc, #108]	; (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bc0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc10:	2302      	movs	r3, #2
 800bc12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc14:	2300      	movs	r3, #0
 800bc16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc1c:	230a      	movs	r3, #10
 800bc1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc20:	f107 0314 	add.w	r3, r7, #20
 800bc24:	4619      	mov	r1, r3
 800bc26:	4812      	ldr	r0, [pc, #72]	; (800bc70 <HAL_PCD_MspInit+0xa4>)
 800bc28:	f7f6 fa42 	bl	80020b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc2c:	4b0f      	ldr	r3, [pc, #60]	; (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc30:	4a0e      	ldr	r2, [pc, #56]	; (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc36:	6353      	str	r3, [r2, #52]	; 0x34
 800bc38:	2300      	movs	r3, #0
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	4b0b      	ldr	r3, [pc, #44]	; (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc40:	4a0a      	ldr	r2, [pc, #40]	; (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc46:	6453      	str	r3, [r2, #68]	; 0x44
 800bc48:	4b08      	ldr	r3, [pc, #32]	; (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bc54:	2200      	movs	r2, #0
 800bc56:	2105      	movs	r1, #5
 800bc58:	2043      	movs	r0, #67	; 0x43
 800bc5a:	f7f6 f9ff 	bl	800205c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc5e:	2043      	movs	r0, #67	; 0x43
 800bc60:	f7f6 fa18 	bl	8002094 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc64:	bf00      	nop
 800bc66:	3728      	adds	r7, #40	; 0x28
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	40023800 	.word	0x40023800
 800bc70:	40020000 	.word	0x40020000

0800bc74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	f7fc f81c 	bl	8007cc8 <USBD_LL_SetupStage>
}
 800bc90:	bf00      	nop
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bcaa:	78fa      	ldrb	r2, [r7, #3]
 800bcac:	6879      	ldr	r1, [r7, #4]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	1a9b      	subs	r3, r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	440b      	add	r3, r1
 800bcb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	78fb      	ldrb	r3, [r7, #3]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	f7fc f856 	bl	8007d72 <USBD_LL_DataOutStage>
}
 800bcc6:	bf00      	nop
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b082      	sub	sp, #8
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bce0:	78fa      	ldrb	r2, [r7, #3]
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	4613      	mov	r3, r2
 800bce6:	00db      	lsls	r3, r3, #3
 800bce8:	1a9b      	subs	r3, r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	440b      	add	r3, r1
 800bcee:	3348      	adds	r3, #72	; 0x48
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	78fb      	ldrb	r3, [r7, #3]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	f7fc f89f 	bl	8007e38 <USBD_LL_DataInStage>
}
 800bcfa:	bf00      	nop
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b082      	sub	sp, #8
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fc f9b3 	bl	800807c <USBD_LL_SOF>
}
 800bd16:	bf00      	nop
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b084      	sub	sp, #16
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd26:	2301      	movs	r3, #1
 800bd28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d102      	bne.n	800bd38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bd32:	2300      	movs	r3, #0
 800bd34:	73fb      	strb	r3, [r7, #15]
 800bd36:	e008      	b.n	800bd4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d102      	bne.n	800bd46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bd40:	2301      	movs	r3, #1
 800bd42:	73fb      	strb	r3, [r7, #15]
 800bd44:	e001      	b.n	800bd4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bd46:	f7f5 fd19 	bl	800177c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd50:	7bfa      	ldrb	r2, [r7, #15]
 800bd52:	4611      	mov	r1, r2
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fc f953 	bl	8008000 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fc f8ff 	bl	8007f64 <USBD_LL_Reset>
}
 800bd66:	bf00      	nop
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fc f94e 	bl	8008020 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	6812      	ldr	r2, [r2, #0]
 800bd92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd96:	f043 0301 	orr.w	r3, r3, #1
 800bd9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a1b      	ldr	r3, [r3, #32]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bda4:	4b04      	ldr	r3, [pc, #16]	; (800bdb8 <HAL_PCD_SuspendCallback+0x48>)
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	4a03      	ldr	r2, [pc, #12]	; (800bdb8 <HAL_PCD_SuspendCallback+0x48>)
 800bdaa:	f043 0306 	orr.w	r3, r3, #6
 800bdae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	e000ed00 	.word	0xe000ed00

0800bdbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fc f93e 	bl	800804c <USBD_LL_Resume>
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdea:	78fa      	ldrb	r2, [r7, #3]
 800bdec:	4611      	mov	r1, r2
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fc f98c 	bl	800810c <USBD_LL_IsoOUTIncomplete>
}
 800bdf4:	bf00      	nop
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be0e:	78fa      	ldrb	r2, [r7, #3]
 800be10:	4611      	mov	r1, r2
 800be12:	4618      	mov	r0, r3
 800be14:	f7fc f954 	bl	80080c0 <USBD_LL_IsoINIncomplete>
}
 800be18:	bf00      	nop
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fc f992 	bl	8008158 <USBD_LL_DevConnected>
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fc f98f 	bl	800816e <USBD_LL_DevDisconnected>
}
 800be50:	bf00      	nop
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d13c      	bne.n	800bee2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be68:	4a20      	ldr	r2, [pc, #128]	; (800beec <USBD_LL_Init+0x94>)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a1e      	ldr	r2, [pc, #120]	; (800beec <USBD_LL_Init+0x94>)
 800be74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be78:	4b1c      	ldr	r3, [pc, #112]	; (800beec <USBD_LL_Init+0x94>)
 800be7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800be7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800be80:	4b1a      	ldr	r3, [pc, #104]	; (800beec <USBD_LL_Init+0x94>)
 800be82:	2206      	movs	r2, #6
 800be84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800be86:	4b19      	ldr	r3, [pc, #100]	; (800beec <USBD_LL_Init+0x94>)
 800be88:	2202      	movs	r2, #2
 800be8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be8c:	4b17      	ldr	r3, [pc, #92]	; (800beec <USBD_LL_Init+0x94>)
 800be8e:	2200      	movs	r2, #0
 800be90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be92:	4b16      	ldr	r3, [pc, #88]	; (800beec <USBD_LL_Init+0x94>)
 800be94:	2202      	movs	r2, #2
 800be96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be98:	4b14      	ldr	r3, [pc, #80]	; (800beec <USBD_LL_Init+0x94>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800be9e:	4b13      	ldr	r3, [pc, #76]	; (800beec <USBD_LL_Init+0x94>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bea4:	4b11      	ldr	r3, [pc, #68]	; (800beec <USBD_LL_Init+0x94>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800beaa:	4b10      	ldr	r3, [pc, #64]	; (800beec <USBD_LL_Init+0x94>)
 800beac:	2200      	movs	r2, #0
 800beae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800beb0:	4b0e      	ldr	r3, [pc, #56]	; (800beec <USBD_LL_Init+0x94>)
 800beb2:	2200      	movs	r2, #0
 800beb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800beb6:	480d      	ldr	r0, [pc, #52]	; (800beec <USBD_LL_Init+0x94>)
 800beb8:	f7f6 fabf 	bl	800243a <HAL_PCD_Init>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d001      	beq.n	800bec6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bec2:	f7f5 fc5b 	bl	800177c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bec6:	2180      	movs	r1, #128	; 0x80
 800bec8:	4808      	ldr	r0, [pc, #32]	; (800beec <USBD_LL_Init+0x94>)
 800beca:	f7f7 fc38 	bl	800373e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bece:	2240      	movs	r2, #64	; 0x40
 800bed0:	2100      	movs	r1, #0
 800bed2:	4806      	ldr	r0, [pc, #24]	; (800beec <USBD_LL_Init+0x94>)
 800bed4:	f7f7 fbec 	bl	80036b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bed8:	2280      	movs	r2, #128	; 0x80
 800beda:	2101      	movs	r1, #1
 800bedc:	4803      	ldr	r0, [pc, #12]	; (800beec <USBD_LL_Init+0x94>)
 800bede:	f7f7 fbe7 	bl	80036b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	20005518 	.word	0x20005518

0800bef0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7f6 fbbb 	bl	8002682 <HAL_PCD_Start>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 f97e 	bl	800c214 <USBD_Get_USB_Status>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	4608      	mov	r0, r1
 800bf30:	4611      	mov	r1, r2
 800bf32:	461a      	mov	r2, r3
 800bf34:	4603      	mov	r3, r0
 800bf36:	70fb      	strb	r3, [r7, #3]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70bb      	strb	r3, [r7, #2]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf4e:	78bb      	ldrb	r3, [r7, #2]
 800bf50:	883a      	ldrh	r2, [r7, #0]
 800bf52:	78f9      	ldrb	r1, [r7, #3]
 800bf54:	f7f6 ffcc 	bl	8002ef0 <HAL_PCD_EP_Open>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 f958 	bl	800c214 <USBD_Get_USB_Status>
 800bf64:	4603      	mov	r3, r0
 800bf66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf8c:	78fa      	ldrb	r2, [r7, #3]
 800bf8e:	4611      	mov	r1, r2
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7f7 f815 	bl	8002fc0 <HAL_PCD_EP_Close>
 800bf96:	4603      	mov	r3, r0
 800bf98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 f939 	bl	800c214 <USBD_Get_USB_Status>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfca:	78fa      	ldrb	r2, [r7, #3]
 800bfcc:	4611      	mov	r1, r2
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7f7 f8d5 	bl	800317e <HAL_PCD_EP_SetStall>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 f91a 	bl	800c214 <USBD_Get_USB_Status>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	460b      	mov	r3, r1
 800bff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bffe:	2300      	movs	r3, #0
 800c000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c008:	78fa      	ldrb	r2, [r7, #3]
 800c00a:	4611      	mov	r1, r2
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7f7 f91a 	bl	8003246 <HAL_PCD_EP_ClrStall>
 800c012:	4603      	mov	r3, r0
 800c014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c016:	7bfb      	ldrb	r3, [r7, #15]
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 f8fb 	bl	800c214 <USBD_Get_USB_Status>
 800c01e:	4603      	mov	r3, r0
 800c020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c022:	7bbb      	ldrb	r3, [r7, #14]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	460b      	mov	r3, r1
 800c036:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c03e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c044:	2b00      	cmp	r3, #0
 800c046:	da0b      	bge.n	800c060 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c048:	78fb      	ldrb	r3, [r7, #3]
 800c04a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c04e:	68f9      	ldr	r1, [r7, #12]
 800c050:	4613      	mov	r3, r2
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	1a9b      	subs	r3, r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	440b      	add	r3, r1
 800c05a:	333e      	adds	r3, #62	; 0x3e
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	e00b      	b.n	800c078 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c066:	68f9      	ldr	r1, [r7, #12]
 800c068:	4613      	mov	r3, r2
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	1a9b      	subs	r3, r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	440b      	add	r3, r1
 800c072:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c076:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c094:	2300      	movs	r3, #0
 800c096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c09e:	78fa      	ldrb	r2, [r7, #3]
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7f6 feff 	bl	8002ea6 <HAL_PCD_SetAddress>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 f8b0 	bl	800c214 <USBD_Get_USB_Status>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b086      	sub	sp, #24
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	60f8      	str	r0, [r7, #12]
 800c0ca:	607a      	str	r2, [r7, #4]
 800c0cc:	603b      	str	r3, [r7, #0]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c0e0:	7af9      	ldrb	r1, [r7, #11]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	f7f7 f800 	bl	80030ea <HAL_PCD_EP_Transmit>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ee:	7dfb      	ldrb	r3, [r7, #23]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 f88f 	bl	800c214 <USBD_Get_USB_Status>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	607a      	str	r2, [r7, #4]
 800c10e:	603b      	str	r3, [r7, #0]
 800c110:	460b      	mov	r3, r1
 800c112:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c122:	7af9      	ldrb	r1, [r7, #11]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	f7f6 ff94 	bl	8003054 <HAL_PCD_EP_Receive>
 800c12c:	4603      	mov	r3, r0
 800c12e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c130:	7dfb      	ldrb	r3, [r7, #23]
 800c132:	4618      	mov	r0, r3
 800c134:	f000 f86e 	bl	800c214 <USBD_Get_USB_Status>
 800c138:	4603      	mov	r3, r0
 800c13a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c13c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3718      	adds	r7, #24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
	...

0800c148 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	460b      	mov	r3, r1
 800c152:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c154:	78fb      	ldrb	r3, [r7, #3]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d002      	beq.n	800c160 <HAL_PCDEx_LPM_Callback+0x18>
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d01f      	beq.n	800c19e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c15e:	e03b      	b.n	800c1d8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6a1b      	ldr	r3, [r3, #32]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d007      	beq.n	800c178 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c168:	f7f4 fe08 	bl	8000d7c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c16c:	4b1c      	ldr	r3, [pc, #112]	; (800c1e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	4a1b      	ldr	r2, [pc, #108]	; (800c1e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c172:	f023 0306 	bic.w	r3, r3, #6
 800c176:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	6812      	ldr	r2, [r2, #0]
 800c186:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c18a:	f023 0301 	bic.w	r3, r3, #1
 800c18e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c196:	4618      	mov	r0, r3
 800c198:	f7fb ff58 	bl	800804c <USBD_LL_Resume>
    break;
 800c19c:	e01c      	b.n	800c1d8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	6812      	ldr	r2, [r2, #0]
 800c1ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1b0:	f043 0301 	orr.w	r3, r3, #1
 800c1b4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7fb ff2f 	bl	8008020 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d005      	beq.n	800c1d6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1ca:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	4a04      	ldr	r2, [pc, #16]	; (800c1e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1d0:	f043 0306 	orr.w	r3, r3, #6
 800c1d4:	6113      	str	r3, [r2, #16]
    break;
 800c1d6:	bf00      	nop
}
 800c1d8:	bf00      	nop
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	e000ed00 	.word	0xe000ed00

0800c1e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1ec:	4b03      	ldr	r3, [pc, #12]	; (800c1fc <USBD_static_malloc+0x18>)
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	370c      	adds	r7, #12
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	20004f3c 	.word	0x20004f3c

0800c200 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]

}
 800c208:	bf00      	nop
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	4603      	mov	r3, r0
 800c21c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c222:	79fb      	ldrb	r3, [r7, #7]
 800c224:	2b03      	cmp	r3, #3
 800c226:	d817      	bhi.n	800c258 <USBD_Get_USB_Status+0x44>
 800c228:	a201      	add	r2, pc, #4	; (adr r2, 800c230 <USBD_Get_USB_Status+0x1c>)
 800c22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c22e:	bf00      	nop
 800c230:	0800c241 	.word	0x0800c241
 800c234:	0800c247 	.word	0x0800c247
 800c238:	0800c24d 	.word	0x0800c24d
 800c23c:	0800c253 	.word	0x0800c253
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	73fb      	strb	r3, [r7, #15]
    break;
 800c244:	e00b      	b.n	800c25e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c246:	2303      	movs	r3, #3
 800c248:	73fb      	strb	r3, [r7, #15]
    break;
 800c24a:	e008      	b.n	800c25e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c24c:	2301      	movs	r3, #1
 800c24e:	73fb      	strb	r3, [r7, #15]
    break;
 800c250:	e005      	b.n	800c25e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c252:	2303      	movs	r3, #3
 800c254:	73fb      	strb	r3, [r7, #15]
    break;
 800c256:	e002      	b.n	800c25e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c258:	2303      	movs	r3, #3
 800c25a:	73fb      	strb	r3, [r7, #15]
    break;
 800c25c:	bf00      	nop
  }
  return usb_status;
 800c25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3714      	adds	r7, #20
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	4608      	mov	r0, r1
 800c276:	4611      	mov	r1, r2
 800c278:	461a      	mov	r2, r3
 800c27a:	4603      	mov	r3, r0
 800c27c:	70fb      	strb	r3, [r7, #3]
 800c27e:	460b      	mov	r3, r1
 800c280:	70bb      	strb	r3, [r7, #2]
 800c282:	4613      	mov	r3, r2
 800c284:	707b      	strb	r3, [r7, #1]
                return 0;
 800c286:	2300      	movs	r3, #0
        }
 800c288:	4618      	mov	r0, r3
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	4608      	mov	r0, r1
 800c29e:	4611      	mov	r1, r2
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	70fb      	strb	r3, [r7, #3]
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	70bb      	strb	r3, [r7, #2]
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	707b      	strb	r3, [r7, #1]
                return 0;
 800c2ae:	2300      	movs	r3, #0
        }
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
                return 0;
 800c2c4:	2300      	movs	r3, #0
        }
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	370c      	adds	r7, #12
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800c2d2:	b480      	push	{r7}
 800c2d4:	b083      	sub	sp, #12
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
                return 0;
 800c2da:	2300      	movs	r3, #0
        }
 800c2dc:	4618      	mov	r0, r3
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
                return 0;
 800c2f0:	2300      	movs	r3, #0
        }
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	370c      	adds	r7, #12
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800c2fe:	b480      	push	{r7}
 800c300:	b083      	sub	sp, #12
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	460b      	mov	r3, r1
 800c308:	70fb      	strb	r3, [r7, #3]
                return;
 800c30a:	bf00      	nop
        } // Note used for hubs only!
 800c30c:	370c      	adds	r7, #12
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr

0800c316 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800c316:	b480      	push	{r7}
 800c318:	b083      	sub	sp, #12
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
 800c31e:	460b      	mov	r3, r1
 800c320:	807b      	strh	r3, [r7, #2]
 800c322:	4613      	mov	r3, r2
 800c324:	803b      	strh	r3, [r7, #0]
                return false;
 800c326:	2300      	movs	r3, #0
        }
 800c328:	4618      	mov	r0, r3
 800c32a:	370c      	adds	r7, #12
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	460b      	mov	r3, r1
 800c33e:	70fb      	strb	r3, [r7, #3]
                return false;
 800c340:	2300      	movs	r3, #0
        }
 800c342:	4618      	mov	r0, r3
 800c344:	370c      	adds	r7, #12
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800c34e:	b480      	push	{r7}
 800c350:	b083      	sub	sp, #12
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	460b      	mov	r3, r1
 800c358:	70fb      	strb	r3, [r7, #3]
                return true;
 800c35a:	2301      	movs	r3, #1
        }
 800c35c:	4618      	mov	r0, r3
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800c370:	687b      	ldr	r3, [r7, #4]
        };
 800c372:	4618      	mov	r0, r3
 800c374:	370c      	adds	r7, #12
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800c37e:	b480      	push	{r7}
 800c380:	b085      	sub	sp, #20
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c388:	2300      	movs	r3, #0
 800c38a:	73fb      	strb	r3, [r7, #15]
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
 800c38e:	2b0f      	cmp	r3, #15
 800c390:	d812      	bhi.n	800c3b8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800c392:	7bfa      	ldrb	r2, [r7, #15]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	321e      	adds	r2, #30
 800c398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d107      	bne.n	800c3b0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800c3a0:	7bfa      	ldrb	r2, [r7, #15]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	321e      	adds	r2, #30
 800c3a6:	6839      	ldr	r1, [r7, #0]
 800c3a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	e004      	b.n	800c3ba <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	73fb      	strb	r3, [r7, #15]
 800c3b6:	e7e9      	b.n	800c38c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800c3b8:	23d3      	movs	r3, #211	; 0xd3
        };
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800c3c6:	b480      	push	{r7}
 800c3c8:	b083      	sub	sp, #12
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	701a      	strb	r2, [r3, #0]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	705a      	strb	r2, [r3, #1]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	709a      	strb	r2, [r3, #2]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	70da      	strb	r2, [r3, #3]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	711a      	strb	r2, [r3, #4]
        };
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	601a      	str	r2, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	711a      	strb	r2, [r3, #4]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	715a      	strb	r2, [r3, #5]
        };
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	4618      	mov	r0, r3
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	781a      	ldrb	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	715a      	strb	r2, [r3, #5]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	795a      	ldrb	r2, [r3, #5]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	711a      	strb	r2, [r3, #4]
        };
 800c440:	bf00      	nop
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	601a      	str	r2, [r3, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	711a      	strb	r2, [r3, #4]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2200      	movs	r2, #0
 800c464:	80da      	strh	r2, [r3, #6]
        };
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4618      	mov	r0, r3
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2200      	movs	r2, #0
 800c48c:	80da      	strh	r2, [r3, #6]
        };
 800c48e:	bf00      	nop
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800c49a:	b480      	push	{r7}
 800c49c:	b085      	sub	sp, #20
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	60f8      	str	r0, [r7, #12]
 800c4a2:	60b9      	str	r1, [r7, #8]
 800c4a4:	607a      	str	r2, [r7, #4]
 800c4a6:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	791b      	ldrb	r3, [r3, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d009      	beq.n	800c4c8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800c4b4:	e029      	b.n	800c50a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	887a      	ldrh	r2, [r7, #2]
 800c4ba:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	791b      	ldrb	r3, [r3, #4]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	88db      	ldrh	r3, [r3, #6]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d015      	beq.n	800c4fc <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	881b      	ldrh	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d011      	beq.n	800c4fc <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	88db      	ldrh	r3, [r3, #6]
 800c4dc:	3b01      	subs	r3, #1
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	80da      	strh	r2, [r3, #6]
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	1c5a      	adds	r2, r3, #1
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	601a      	str	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	801a      	strh	r2, [r3, #0]
 800c4fa:	e7e5      	b.n	800c4c8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	88db      	ldrh	r3, [r3, #6]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d102      	bne.n	800c50a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	88db      	ldrh	r3, [r3, #6]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bf0c      	ite	eq
 800c512:	2301      	moveq	r3, #1
 800c514:	2300      	movne	r3, #0
 800c516:	b2db      	uxtb	r3, r3
        };
 800c518:	4618      	mov	r0, r3
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	4608      	mov	r0, r1
 800c52e:	4611      	mov	r1, r2
 800c530:	461a      	mov	r2, r3
 800c532:	4603      	mov	r3, r0
 800c534:	70fb      	strb	r3, [r7, #3]
 800c536:	460b      	mov	r3, r1
 800c538:	70bb      	strb	r3, [r7, #2]
 800c53a:	4613      	mov	r3, r2
 800c53c:	707b      	strb	r3, [r7, #1]
        };
 800c53e:	bf00      	nop
 800c540:	370c      	adds	r7, #12
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
	...

0800c54c <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	4a04      	ldr	r2, [pc, #16]	; (800c568 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	601a      	str	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	080128bc 	.word	0x080128bc

0800c56c <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	4a04      	ldr	r2, [pc, #16]	; (800c588 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	601a      	str	r2, [r3, #0]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4618      	mov	r0, r3
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	080128a4 	.word	0x080128a4

0800c58c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
                return bAddress;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800c59a:	4618      	mov	r0, r3
 800c59c:	370c      	adds	r7, #12
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800c5a6:	b480      	push	{r7}
 800c5a8:	b083      	sub	sp, #12
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800c5cc:	78fb      	ldrb	r3, [r7, #3]
 800c5ce:	2be0      	cmp	r3, #224	; 0xe0
 800c5d0:	bf0c      	ite	eq
 800c5d2:	2301      	moveq	r3, #1
 800c5d4:	2300      	movne	r3, #0
 800c5d6:	b2db      	uxtb	r3, r3
        };
 800c5d8:	4618      	mov	r0, r3
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	807b      	strh	r3, [r7, #2]
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800c5f4:	887b      	ldrh	r3, [r7, #2]
 800c5f6:	f640 225c 	movw	r2, #2652	; 0xa5c
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d104      	bne.n	800c608 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800c5fe:	883b      	ldrh	r3, [r7, #0]
 800c600:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800c604:	4293      	cmp	r3, r2
 800c606:	d009      	beq.n	800c61c <_ZN3BTD8VIDPIDOKEtt+0x38>
 800c608:	887b      	ldrh	r3, [r7, #2]
 800c60a:	f240 520d 	movw	r2, #1293	; 0x50d
 800c60e:	4293      	cmp	r3, r2
 800c610:	d106      	bne.n	800c620 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800c612:	883b      	ldrh	r3, [r7, #0]
 800c614:	f240 625a 	movw	r2, #1626	; 0x65a
 800c618:	4293      	cmp	r3, r2
 800c61a:	d101      	bne.n	800c620 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e02d      	b.n	800c67c <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	7d1b      	ldrb	r3, [r3, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d113      	bne.n	800c650 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	7d5b      	ldrb	r3, [r3, #21]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10f      	bne.n	800c650 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	7d9b      	ldrb	r3, [r3, #22]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10b      	bne.n	800c650 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	7ddb      	ldrb	r3, [r3, #23]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d107      	bne.n	800c650 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	7e1b      	ldrb	r3, [r3, #24]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d103      	bne.n	800c650 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	7e5b      	ldrb	r3, [r3, #25]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d014      	beq.n	800c67a <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800c650:	887b      	ldrh	r3, [r7, #2]
 800c652:	f240 524c 	movw	r2, #1356	; 0x54c
 800c656:	4293      	cmp	r3, r2
 800c658:	d10f      	bne.n	800c67a <_ZN3BTD8VIDPIDOKEtt+0x96>
 800c65a:	883b      	ldrh	r3, [r7, #0]
 800c65c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c660:	d009      	beq.n	800c676 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c662:	883b      	ldrh	r3, [r7, #0]
 800c664:	f240 422f 	movw	r2, #1071	; 0x42f
 800c668:	4293      	cmp	r3, r2
 800c66a:	d004      	beq.n	800c676 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800c66c:	883b      	ldrh	r3, [r7, #0]
 800c66e:	f240 32d5 	movw	r2, #981	; 0x3d5
 800c672:	4293      	cmp	r3, r2
 800c674:	d101      	bne.n	800c67a <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800c676:	2301      	movs	r3, #1
 800c678:	e000      	b.n	800c67c <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800c67a:	2300      	movs	r3, #0
        };
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4618      	mov	r0, r3
 800c696:	f7ff ff59 	bl	800c54c <_ZN15USBDeviceConfigC1Ev>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	3304      	adds	r3, #4
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7ff ff64 	bl	800c56c <_ZN17UsbConfigXtracterC1Ev>
 800c6a4:	4a2b      	ldr	r2, [pc, #172]	; (800c754 <_ZN3BTDC1EP3USB+0xcc>)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	601a      	str	r2, [r3, #0]
 800c6aa:	4a2b      	ldr	r2, [pc, #172]	; (800c758 <_ZN3BTDC1EP3USB+0xd0>)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	605a      	str	r2, [r3, #4]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	683a      	ldr	r2, [r7, #0]
 800c6dc:	64da      	str	r2, [r3, #76]	; 0x4c
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	661a      	str	r2, [r3, #96]	; 0x60
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c70c:	2300      	movs	r3, #0
 800c70e:	73fb      	strb	r3, [r7, #15]
 800c710:	7bfb      	ldrb	r3, [r7, #15]
 800c712:	2b03      	cmp	r3, #3
 800c714:	d80a      	bhi.n	800c72c <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800c716:	7bfb      	ldrb	r3, [r7, #15]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	3318      	adds	r3, #24
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	4413      	add	r3, r2
 800c720:	2200      	movs	r2, #0
 800c722:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	3301      	adds	r3, #1
 800c728:	73fb      	strb	r3, [r7, #15]
 800c72a:	e7f1      	b.n	800c710 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 fa7d 	bl	800cc2c <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c736:	2b00      	cmp	r3, #0
 800c738:	d006      	beq.n	800c748 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	4611      	mov	r1, r2
 800c742:	4618      	mov	r0, r3
 800c744:	f7ff fe1b 	bl	800c37e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4618      	mov	r0, r3
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	08012864 	.word	0x08012864
 800c758:	08012898 	.word	0x08012898

0800c75c <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800c75c:	b590      	push	{r4, r7, lr}
 800c75e:	b08f      	sub	sp, #60	; 0x3c
 800c760:	af02      	add	r7, sp, #8
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	4608      	mov	r0, r1
 800c766:	4611      	mov	r1, r2
 800c768:	461a      	mov	r2, r3
 800c76a:	4603      	mov	r3, r0
 800c76c:	70fb      	strb	r3, [r7, #3]
 800c76e:	460b      	mov	r3, r1
 800c770:	70bb      	strb	r3, [r7, #2]
 800c772:	4613      	mov	r3, r2
 800c774:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800c776:	2312      	movs	r3, #18
 800c778:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800c77c:	f107 0308 	add.w	r3, r7, #8
 800c780:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800c782:	2300      	movs	r3, #0
 800c784:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800c786:	2300      	movs	r3, #0
 800c788:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 fa4e 	bl	800cc2c <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c794:	4618      	mov	r0, r3
 800c796:	f7ff fde7 	bl	800c368 <_ZN3USB14GetAddressPoolEv>
 800c79a:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d001      	beq.n	800c7aa <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800c7a6:	23d9      	movs	r3, #217	; 0xd9
 800c7a8:	e087      	b.n	800c8ba <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	69f8      	ldr	r0, [r7, #28]
 800c7b4:	4798      	blx	r3
 800c7b6:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d101      	bne.n	800c7c2 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c7be:	23d6      	movs	r3, #214	; 0xd6
 800c7c0:	e07b      	b.n	800c8ba <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d101      	bne.n	800c7ce <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800c7ca:	23d7      	movs	r3, #215	; 0xd7
 800c7cc:	e075      	b.n	800c8ba <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800c7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7dc:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	787a      	ldrb	r2, [r7, #1]
 800c7e2:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c7e8:	f107 0308 	add.w	r3, r7, #8
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	2312      	movs	r3, #18
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	2100      	movs	r1, #0
 800c7f4:	f005 fa13 	bl	8011c1e <_ZN3USB11getDevDescrEhhtPh>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c800:	6a3a      	ldr	r2, [r7, #32]
 800c802:	601a      	str	r2, [r3, #0]

        if(rcode)
 800c804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d146      	bne.n	800c89a <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	3304      	adds	r3, #4
 800c812:	681c      	ldr	r4, [r3, #0]
 800c814:	78bb      	ldrb	r3, [r7, #2]
 800c816:	78f9      	ldrb	r1, [r7, #3]
 800c818:	2200      	movs	r2, #0
 800c81a:	69f8      	ldr	r0, [r7, #28]
 800c81c:	47a0      	blx	r4
 800c81e:	4603      	mov	r3, r0
 800c820:	461a      	mov	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d101      	bne.n	800c836 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800c832:	23d4      	movs	r3, #212	; 0xd4
 800c834:	e041      	b.n	800c8ba <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	791b      	ldrb	r3, [r3, #4]
 800c83a:	2b09      	cmp	r3, #9
 800c83c:	d017      	beq.n	800c86e <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	79da      	ldrb	r2, [r3, #7]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	7c5a      	ldrb	r2, [r3, #17]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800c852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c854:	891b      	ldrh	r3, [r3, #8]
 800c856:	b29a      	uxth	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c860:	895b      	ldrh	r3, [r3, #10]
 800c862:	b29a      	uxth	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800c86a:	23e0      	movs	r3, #224	; 0xe0
 800c86c:	e025      	b.n	800c8ba <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800c86e:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c87a:	2300      	movs	r3, #0
 800c87c:	2200      	movs	r2, #0
 800c87e:	f005 fa6b 	bl	8011d58 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800c882:	23d1      	movs	r3, #209	; 0xd1
 800c884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	3308      	adds	r3, #8
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	4798      	blx	r3
        return rcode;
 800c894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c898:	e00f      	b.n	800c8ba <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800c89a:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800c89c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8a0:	2b0d      	cmp	r3, #13
 800c8a2:	d002      	beq.n	800c8aa <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800c8a4:	23e1      	movs	r3, #225	; 0xe1
 800c8a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	4798      	blx	r3
        return rcode;
 800c8b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3734      	adds	r7, #52	; 0x34
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd90      	pop	{r4, r7, pc}

0800c8c2 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b096      	sub	sp, #88	; 0x58
 800c8c6:	af02      	add	r7, sp, #8
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	4608      	mov	r0, r1
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	70fb      	strb	r3, [r7, #3]
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	70bb      	strb	r3, [r7, #2]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c8e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7ff fd38 	bl	800c368 <_ZN3USB14GetAddressPoolEv>
 800c8f8:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c8fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c906:	4611      	mov	r1, r2
 800c908:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c90a:	4798      	blx	r3
 800c90c:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800c90e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c910:	2b00      	cmp	r3, #0
 800c912:	d101      	bne.n	800c918 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c914:	23d6      	movs	r3, #214	; 0xd6
 800c916:	e185      	b.n	800cc24 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800c918:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c91c:	f7f5 fac2 	bl	8001ea4 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c92a:	2200      	movs	r2, #0
 800c92c:	2100      	movs	r1, #0
 800c92e:	f005 fa13 	bl	8011d58 <_ZN3USB7setAddrEhhh>
 800c932:	4603      	mov	r3, r0
 800c934:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800c938:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d003      	beq.n	800c948 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800c940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c942:	2200      	movs	r2, #0
 800c944:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800c946:	e165      	b.n	800cc14 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800c948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c94a:	2200      	movs	r2, #0
 800c94c:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800c94e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c95a:	4611      	mov	r1, r2
 800c95c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c95e:	4798      	blx	r3
 800c960:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800c962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800c968:	23d6      	movs	r3, #214	; 0xd6
 800c96a:	e15b      	b.n	800cc24 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800c96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c96e:	787a      	ldrb	r2, [r7, #1]
 800c970:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	3351      	adds	r3, #81	; 0x51
 800c980:	2201      	movs	r2, #1
 800c982:	f004 f8dc 	bl	8010b3e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800c986:	4603      	mov	r3, r0
 800c988:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800c98c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c990:	2b00      	cmp	r3, #0
 800c992:	f040 8128 	bne.w	800cbe6 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c99c:	f240 524c 	movw	r2, #1356	; 0x54c
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d177      	bne.n	800ca94 <_ZN3BTD4InitEhhb+0x1d2>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c9aa:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800c9ae:	d00d      	beq.n	800c9cc <_ZN3BTD4InitEhhb+0x10a>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c9b6:	f240 422f 	movw	r2, #1071	; 0x42f
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d006      	beq.n	800c9cc <_ZN3BTD4InitEhhb+0x10a>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800c9c4:	f240 32d5 	movw	r2, #981	; 0x3d5
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d163      	bne.n	800ca94 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800c9cc:	2064      	movs	r0, #100	; 0x64
 800c9ce:	f7f5 fa69 	bl	8001ea4 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	f005 f9e6 	bl	8011db4 <_ZN3USB7setConfEhhh>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800c9ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f040 80f9 	bne.w	800cbea <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7d1b      	ldrb	r3, [r3, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d113      	bne.n	800ca28 <_ZN3BTD4InitEhhb+0x166>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	7d5b      	ldrb	r3, [r3, #21]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10f      	bne.n	800ca28 <_ZN3BTD4InitEhhb+0x166>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7d9b      	ldrb	r3, [r3, #22]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10b      	bne.n	800ca28 <_ZN3BTD4InitEhhb+0x166>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7ddb      	ldrb	r3, [r3, #23]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d107      	bne.n	800ca28 <_ZN3BTD4InitEhhb+0x166>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	7e1b      	ldrb	r3, [r3, #24]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d103      	bne.n	800ca28 <_ZN3BTD4InitEhhb+0x166>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	7e5b      	ldrb	r3, [r3, #25]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d019      	beq.n	800ca5c <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca2e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ca32:	d006      	beq.n	800ca42 <_ZN3BTD4InitEhhb+0x180>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ca3a:	f240 422f 	movw	r2, #1071	; 0x42f
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d106      	bne.n	800ca50 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	3314      	adds	r3, #20
 800ca46:	4619      	mov	r1, r3
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f002 f8b0 	bl	800ebae <_ZN3BTD9setBdaddrEPh>
 800ca4e:	e005      	b.n	800ca5c <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	3314      	adds	r3, #20
 800ca54:	4619      	mov	r1, r3
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f002 f8e9 	bl	800ec2e <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	f005 f9a1 	bl	8011db4 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f005 f96a 	bl	8011d58 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	3308      	adds	r3, #8
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800ca90:	23d1      	movs	r3, #209	; 0xd1
 800ca92:	e0c7      	b.n	800cc24 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800ca94:	2300      	movs	r3, #0
 800ca96:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ca9a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ca9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d25e      	bcs.n	800cb64 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800caac:	f640 225c 	movw	r2, #2652	; 0xa5c
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d106      	bne.n	800cac2 <_ZN3BTD4InitEhhb+0x200>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800caba:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d00d      	beq.n	800cade <_ZN3BTD4InitEhhb+0x21c>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800cac8:	f240 520d 	movw	r2, #1293	; 0x50d
 800cacc:	4293      	cmp	r3, r2
 800cace:	d120      	bne.n	800cb12 <_ZN3BTD4InitEhhb+0x250>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cad6:	f240 625a 	movw	r2, #1626	; 0x65a
 800cada:	4293      	cmp	r3, r2
 800cadc:	d119      	bne.n	800cb12 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	1d1a      	adds	r2, r3, #4
 800cae2:	f107 0308 	add.w	r3, r7, #8
 800cae6:	4611      	mov	r1, r2
 800cae8:	4618      	mov	r0, r3
 800caea:	f002 f8f3 	bl	800ecd4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800caf8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cafc:	f107 0308 	add.w	r3, r7, #8
 800cb00:	9300      	str	r3, [sp, #0]
 800cb02:	4613      	mov	r3, r2
 800cb04:	2200      	movs	r2, #0
 800cb06:	f005 f8da 	bl	8011cbe <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cb10:	e018      	b.n	800cb44 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	1d1a      	adds	r2, r3, #4
 800cb16:	f107 0308 	add.w	r3, r7, #8
 800cb1a:	4611      	mov	r1, r2
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f002 f927 	bl	800ed70 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb2c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800cb30:	f107 0308 	add.w	r3, r7, #8
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	4613      	mov	r3, r2
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f005 f8c0 	bl	8011cbe <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800cb44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d150      	bne.n	800cbee <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cb52:	2b03      	cmp	r3, #3
 800cb54:	d805      	bhi.n	800cb62 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800cb56:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800cb60:	e79b      	b.n	800ca9a <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800cb62:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800cb6a:	2b03      	cmp	r3, #3
 800cb6c:	d945      	bls.n	800cbfa <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	3351      	adds	r3, #81	; 0x51
 800cb82:	f003 ffdc 	bl	8010b3e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800cb86:	4603      	mov	r3, r0
 800cb88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cb8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d12e      	bne.n	800cbf2 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cbaa:	f005 f903 	bl	8011db4 <_ZN3USB7setConfEhhh>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800cbb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d11c      	bne.n	800cbf6 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2264      	movs	r2, #100	; 0x64
 800cbc0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	e01e      	b.n	800cc24 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800cbe6:	bf00      	nop
 800cbe8:	e014      	b.n	800cc14 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800cbea:	bf00      	nop
 800cbec:	e012      	b.n	800cc14 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800cbee:	bf00      	nop
 800cbf0:	e010      	b.n	800cc14 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800cbf2:	bf00      	nop
 800cbf4:	e00e      	b.n	800cc14 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800cbf6:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800cbf8:	e00c      	b.n	800cc14 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800cbfa:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cc06:	2300      	movs	r3, #0
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f005 f8a5 	bl	8011d58 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800cc0e:	23d1      	movs	r3, #209	; 0xd1
 800cc10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	3308      	adds	r3, #8
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	4798      	blx	r3
        return rcode;
 800cc20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3750      	adds	r7, #80	; 0x50
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800cc34:	2300      	movs	r3, #0
 800cc36:	73fb      	strb	r3, [r7, #15]
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
 800cc3a:	2b03      	cmp	r3, #3
 800cc3c:	d845      	bhi.n	800ccca <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800cc3e:	7bfa      	ldrb	r2, [r7, #15]
 800cc40:	6879      	ldr	r1, [r7, #4]
 800cc42:	4613      	mov	r3, r2
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	4413      	add	r3, r2
 800cc48:	440b      	add	r3, r1
 800cc4a:	3351      	adds	r3, #81	; 0x51
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800cc50:	7bfb      	ldrb	r3, [r7, #15]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d001      	beq.n	800cc5a <_ZN3BTD10InitializeEv+0x2e>
 800cc56:	2000      	movs	r0, #0
 800cc58:	e000      	b.n	800cc5c <_ZN3BTD10InitializeEv+0x30>
 800cc5a:	2008      	movs	r0, #8
 800cc5c:	7bfa      	ldrb	r2, [r7, #15]
 800cc5e:	6879      	ldr	r1, [r7, #4]
 800cc60:	4613      	mov	r3, r2
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	4413      	add	r3, r2
 800cc66:	440b      	add	r3, r1
 800cc68:	3352      	adds	r3, #82	; 0x52
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800cc6e:	7bfa      	ldrb	r2, [r7, #15]
 800cc70:	6879      	ldr	r1, [r7, #4]
 800cc72:	4613      	mov	r3, r2
 800cc74:	005b      	lsls	r3, r3, #1
 800cc76:	4413      	add	r3, r2
 800cc78:	440b      	add	r3, r1
 800cc7a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cc7e:	78d3      	ldrb	r3, [r2, #3]
 800cc80:	f36f 0300 	bfc	r3, #0, #1
 800cc84:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800cc86:	7bfa      	ldrb	r2, [r7, #15]
 800cc88:	6879      	ldr	r1, [r7, #4]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	005b      	lsls	r3, r3, #1
 800cc8e:	4413      	add	r3, r2
 800cc90:	440b      	add	r3, r1
 800cc92:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cc96:	78d3      	ldrb	r3, [r2, #3]
 800cc98:	f36f 0341 	bfc	r3, #1, #1
 800cc9c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d001      	beq.n	800cca8 <_ZN3BTD10InitializeEv+0x7c>
 800cca4:	2101      	movs	r1, #1
 800cca6:	e000      	b.n	800ccaa <_ZN3BTD10InitializeEv+0x7e>
 800cca8:	210f      	movs	r1, #15
 800ccaa:	7bfa      	ldrb	r2, [r7, #15]
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	005b      	lsls	r3, r3, #1
 800ccb2:	4413      	add	r3, r2
 800ccb4:	4403      	add	r3, r0
 800ccb6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800ccba:	78d3      	ldrb	r3, [r2, #3]
 800ccbc:	f361 0387 	bfi	r3, r1, #2, #6
 800ccc0:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	73fb      	strb	r3, [r7, #15]
 800ccc8:	e7b6      	b.n	800cc38 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800ccca:	2300      	movs	r3, #0
 800cccc:	73fb      	strb	r3, [r7, #15]
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d81c      	bhi.n	800cd0e <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	3318      	adds	r3, #24
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d010      	beq.n	800cd06 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800cce4:	7bfb      	ldrb	r3, [r7, #15]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	3318      	adds	r3, #24
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	6859      	ldr	r1, [r3, #4]
 800ccf0:	7bfb      	ldrb	r3, [r7, #15]
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	3318      	adds	r3, #24
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	4413      	add	r3, r2
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	3308      	adds	r3, #8
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4608      	mov	r0, r1
 800cd04:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	73fb      	strb	r3, [r7, #15]
 800cd0c:	e7df      	b.n	800ccce <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2201      	movs	r2, #1
 800cd42:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800cd64:	bf00      	nop
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	4608      	mov	r0, r1
 800cd76:	4611      	mov	r1, r2
 800cd78:	461a      	mov	r2, r3
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	70fb      	strb	r3, [r7, #3]
 800cd7e:	460b      	mov	r3, r1
 800cd80:	70bb      	strb	r3, [r7, #2]
 800cd82:	4613      	mov	r3, r2
 800cd84:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800cd86:	787b      	ldrb	r3, [r7, #1]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d15d      	bne.n	800ce48 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	78fa      	ldrb	r2, [r7, #3]
 800cd90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	78db      	ldrb	r3, [r3, #3]
 800cd98:	f003 0303 	and.w	r3, r3, #3
 800cd9c:	2b03      	cmp	r3, #3
 800cd9e:	d114      	bne.n	800cdca <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	789b      	ldrb	r3, [r3, #2]
 800cda4:	b25b      	sxtb	r3, r3
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	da0f      	bge.n	800cdca <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800cdae:	7bfa      	ldrb	r2, [r7, #15]
 800cdb0:	6879      	ldr	r1, [r7, #4]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	4413      	add	r3, r2
 800cdb8:	440b      	add	r3, r1
 800cdba:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800cdbe:	78d3      	ldrb	r3, [r2, #3]
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	f361 0387 	bfi	r3, r1, #2, #6
 800cdc6:	70d3      	strb	r3, [r2, #3]
 800cdc8:	e00e      	b.n	800cde8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	78db      	ldrb	r3, [r3, #3]
 800cdce:	f003 0303 	and.w	r3, r3, #3
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d13a      	bne.n	800ce4c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	789b      	ldrb	r3, [r3, #2]
 800cdda:	b25b      	sxtb	r3, r3
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	da01      	bge.n	800cde4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800cde0:	2302      	movs	r3, #2
 800cde2:	e000      	b.n	800cde6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800cde4:	2303      	movs	r3, #3
 800cde6:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	789b      	ldrb	r3, [r3, #2]
 800cdec:	7bfa      	ldrb	r2, [r7, #15]
 800cdee:	f003 030f 	and.w	r3, r3, #15
 800cdf2:	b2d8      	uxtb	r0, r3
 800cdf4:	6879      	ldr	r1, [r7, #4]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	005b      	lsls	r3, r3, #1
 800cdfa:	4413      	add	r3, r2
 800cdfc:	440b      	add	r3, r1
 800cdfe:	3351      	adds	r3, #81	; 0x51
 800ce00:	4602      	mov	r2, r0
 800ce02:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	889b      	ldrh	r3, [r3, #4]
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	7bfa      	ldrb	r2, [r7, #15]
 800ce0c:	b2d8      	uxtb	r0, r3
 800ce0e:	6879      	ldr	r1, [r7, #4]
 800ce10:	4613      	mov	r3, r2
 800ce12:	005b      	lsls	r3, r3, #1
 800ce14:	4413      	add	r3, r2
 800ce16:	440b      	add	r3, r1
 800ce18:	3352      	adds	r3, #82	; 0x52
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	799b      	ldrb	r3, [r3, #6]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d204      	bcs.n	800ce36 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	799a      	ldrb	r2, [r3, #6]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800ce46:	e002      	b.n	800ce4e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800ce48:	bf00      	nop
 800ce4a:	e000      	b.n	800ce4e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800ce4c:	bf00      	nop
}
 800ce4e:	3714      	adds	r7, #20
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800ce58:	f1a0 0004 	sub.w	r0, r0, #4
 800ce5c:	f7ff bf86 	b.w	800cd6c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800ce60 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7ff fedf 	bl	800cc2c <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7ff fa78 	bl	800c368 <_ZN3USB14GetAddressPoolEv>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	3208      	adds	r2, #8
 800ce7e:	6812      	ldr	r2, [r2, #0]
 800ce80:	6879      	ldr	r1, [r7, #4]
 800ce82:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800ce86:	4618      	mov	r0, r3
 800ce88:	4790      	blx	r2
        return 0;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800cea2:	f083 0301 	eor.w	r3, r3, #1
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d001      	beq.n	800ceb0 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	e01d      	b.n	800ceec <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800ceb0:	f7f4 ffec 	bl	8001e8c <HAL_GetTick>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	43db      	mvns	r3, r3
 800cebe:	0fdb      	lsrs	r3, r3, #31
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d011      	beq.n	800ceea <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800cec6:	f7f4 ffe1 	bl	8001e8c <HAL_GetTick>
 800ceca:	4602      	mov	r2, r0
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800ced2:	441a      	add	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 f80b 	bl	800cef4 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fb22 	bl	800d528 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 fe4b 	bl	800db80 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800cef4:	b5b0      	push	{r4, r5, r7, lr}
 800cef6:	b088      	sub	sp, #32
 800cef8:	af02      	add	r7, sp, #8
 800cefa:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800cefc:	2340      	movs	r3, #64	; 0x40
 800cefe:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	3389      	adds	r3, #137	; 0x89
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800cf1a:	f107 050c 	add.w	r5, r7, #12
 800cf1e:	9201      	str	r2, [sp, #4]
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	462b      	mov	r3, r5
 800cf24:	4622      	mov	r2, r4
 800cf26:	f003 ff72 	bl	8010e0e <_ZN3USB10inTransferEhhPtPhh>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800cf2e:	7bfb      	ldrb	r3, [r7, #15]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d003      	beq.n	800cf3c <_ZN3BTD14HCI_event_taskEv+0x48>
 800cf34:	7bfb      	ldrb	r3, [r7, #15]
 800cf36:	2b04      	cmp	r3, #4
 800cf38:	f040 82f1 	bne.w	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cf42:	3b01      	subs	r3, #1
 800cf44:	2b35      	cmp	r3, #53	; 0x35
 800cf46:	f200 82ea 	bhi.w	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
 800cf4a:	a201      	add	r2, pc, #4	; (adr r2, 800cf50 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800cf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf50:	0800d131 	.word	0x0800d131
 800cf54:	0800d191 	.word	0x0800d191
 800cf58:	0800d2e9 	.word	0x0800d2e9
 800cf5c:	0800d3d3 	.word	0x0800d3d3
 800cf60:	0800d345 	.word	0x0800d345
 800cf64:	0800d491 	.word	0x0800d491
 800cf68:	0800d377 	.word	0x0800d377
 800cf6c:	0800d509 	.word	0x0800d509
 800cf70:	0800d509 	.word	0x0800d509
 800cf74:	0800d51f 	.word	0x0800d51f
 800cf78:	0800d51f 	.word	0x0800d51f
 800cf7c:	0800d509 	.word	0x0800d509
 800cf80:	0800d509 	.word	0x0800d509
 800cf84:	0800d029 	.word	0x0800d029
 800cf88:	0800d509 	.word	0x0800d509
 800cf8c:	0800d51f 	.word	0x0800d51f
 800cf90:	0800d51f 	.word	0x0800d51f
 800cf94:	0800d509 	.word	0x0800d509
 800cf98:	0800d509 	.word	0x0800d509
 800cf9c:	0800d51f 	.word	0x0800d51f
 800cfa0:	0800d51f 	.word	0x0800d51f
 800cfa4:	0800d45f 	.word	0x0800d45f
 800cfa8:	0800d489 	.word	0x0800d489
 800cfac:	0800d509 	.word	0x0800d509
 800cfb0:	0800d509 	.word	0x0800d509
 800cfb4:	0800d509 	.word	0x0800d509
 800cfb8:	0800d509 	.word	0x0800d509
 800cfbc:	0800d51f 	.word	0x0800d51f
 800cfc0:	0800d51f 	.word	0x0800d51f
 800cfc4:	0800d51f 	.word	0x0800d51f
 800cfc8:	0800d51f 	.word	0x0800d51f
 800cfcc:	0800d509 	.word	0x0800d509
 800cfd0:	0800d51f 	.word	0x0800d51f
 800cfd4:	0800d51f 	.word	0x0800d51f
 800cfd8:	0800d51f 	.word	0x0800d51f
 800cfdc:	0800d51f 	.word	0x0800d51f
 800cfe0:	0800d51f 	.word	0x0800d51f
 800cfe4:	0800d51f 	.word	0x0800d51f
 800cfe8:	0800d51f 	.word	0x0800d51f
 800cfec:	0800d51f 	.word	0x0800d51f
 800cff0:	0800d51f 	.word	0x0800d51f
 800cff4:	0800d51f 	.word	0x0800d51f
 800cff8:	0800d51f 	.word	0x0800d51f
 800cffc:	0800d51f 	.word	0x0800d51f
 800d000:	0800d51f 	.word	0x0800d51f
 800d004:	0800d51f 	.word	0x0800d51f
 800d008:	0800d51f 	.word	0x0800d51f
 800d00c:	0800d51f 	.word	0x0800d51f
 800d010:	0800d4f9 	.word	0x0800d4f9
 800d014:	0800d509 	.word	0x0800d509
 800d018:	0800d501 	.word	0x0800d501
 800d01c:	0800d51f 	.word	0x0800d51f
 800d020:	0800d51f 	.word	0x0800d51f
 800d024:	0800d509 	.word	0x0800d509
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f040 826c 	bne.w	800d50c <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d03a:	f043 0301 	orr.w	r3, r3, #1
 800d03e:	b29a      	uxth	r2, r3
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d114      	bne.n	800d07a <_ZN3BTD14HCI_event_taskEv+0x186>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d056:	2b10      	cmp	r3, #16
 800d058:	d10f      	bne.n	800d07a <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d06c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d070:	b29a      	uxth	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d078:	e059      	b.n	800d12e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d080:	2b04      	cmp	r3, #4
 800d082:	d12a      	bne.n	800d0da <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d08a:	2b10      	cmp	r3, #16
 800d08c:	d125      	bne.n	800d0da <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d114      	bne.n	800d0c6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d10f      	bne.n	800d0c6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800d0ac:	f003 0308 	and.w	r3, r3, #8
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d004      	beq.n	800d0be <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800d0bc:	e003      	b.n	800d0c6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d0cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800d0d8:	e029      	b.n	800d12e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d0e0:	2b09      	cmp	r3, #9
 800d0e2:	f040 8213 	bne.w	800d50c <_ZN3BTD14HCI_event_taskEv+0x618>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d0ec:	2b10      	cmp	r3, #16
 800d0ee:	f040 820d 	bne.w	800d50c <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	75fb      	strb	r3, [r7, #23]
 800d0f6:	7dfb      	ldrb	r3, [r7, #23]
 800d0f8:	2b05      	cmp	r3, #5
 800d0fa:	d80e      	bhi.n	800d11a <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800d0fc:	7dfb      	ldrb	r3, [r7, #23]
 800d0fe:	1d9a      	adds	r2, r3, #6
 800d100:	7dfb      	ldrb	r3, [r7, #23]
 800d102:	6879      	ldr	r1, [r7, #4]
 800d104:	440a      	add	r2, r1
 800d106:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	4413      	add	r3, r2
 800d10e:	460a      	mov	r2, r1
 800d110:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800d112:	7dfb      	ldrb	r3, [r7, #23]
 800d114:	3301      	adds	r3, #1
 800d116:	75fb      	strb	r3, [r7, #23]
 800d118:	e7ed      	b.n	800d0f6 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d120:	f043 0320 	orr.w	r3, r3, #32
 800d124:	b29a      	uxth	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800d12c:	e1ee      	b.n	800d50c <_ZN3BTD14HCI_event_taskEv+0x618>
 800d12e:	e1ed      	b.n	800d50c <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d136:	2b04      	cmp	r3, #4
 800d138:	d921      	bls.n	800d17e <_ZN3BTD14HCI_event_taskEv+0x28a>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d140:	2b00      	cmp	r3, #0
 800d142:	d104      	bne.n	800d14e <_ZN3BTD14HCI_event_taskEv+0x25a>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d017      	beq.n	800d17e <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	220a      	movs	r2, #10
 800d17a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d184:	3301      	adds	r3, #1
 800d186:	b2da      	uxtb	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800d18e:	e1c6      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d196:	2b00      	cmp	r3, #0
 800d198:	f000 81ba 	beq.w	800d510 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d19c:	2300      	movs	r3, #0
 800d19e:	75bb      	strb	r3, [r7, #22]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d1a6:	7dba      	ldrb	r2, [r7, #22]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	f080 81b1 	bcs.w	800d510 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	7dbb      	ldrb	r3, [r7, #22]
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	0049      	lsls	r1, r1, #1
 800d1be:	440b      	add	r3, r1
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	4413      	add	r3, r2
 800d1c4:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	757b      	strb	r3, [r7, #21]
 800d1ca:	7d7b      	ldrb	r3, [r7, #21]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d811      	bhi.n	800d1f4 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800d1d0:	7d7b      	ldrb	r3, [r7, #21]
 800d1d2:	1d1a      	adds	r2, r3, #4
 800d1d4:	7bbb      	ldrb	r3, [r7, #14]
 800d1d6:	441a      	add	r2, r3
 800d1d8:	7d7b      	ldrb	r3, [r7, #21]
 800d1da:	6879      	ldr	r1, [r7, #4]
 800d1dc:	440a      	add	r2, r1
 800d1de:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	460a      	mov	r2, r1
 800d1e8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800d1ec:	7d7b      	ldrb	r3, [r7, #21]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	757b      	strb	r3, [r7, #21]
 800d1f2:	e7ea      	b.n	800d1ca <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d038      	beq.n	800d270 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d204:	2b00      	cmp	r3, #0
 800d206:	d133      	bne.n	800d270 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d20e:	2b05      	cmp	r3, #5
 800d210:	d12e      	bne.n	800d270 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d218:	f003 030c 	and.w	r3, r3, #12
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d027      	beq.n	800d270 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800d228:	2300      	movs	r3, #0
 800d22a:	753b      	strb	r3, [r7, #20]
 800d22c:	7d3b      	ldrb	r3, [r7, #20]
 800d22e:	2b05      	cmp	r3, #5
 800d230:	d814      	bhi.n	800d25c <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d232:	7d3b      	ldrb	r3, [r7, #20]
 800d234:	1cd9      	adds	r1, r3, #3
 800d236:	7dba      	ldrb	r2, [r7, #22]
 800d238:	4613      	mov	r3, r2
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	4413      	add	r3, r2
 800d23e:	005b      	lsls	r3, r3, #1
 800d240:	18ca      	adds	r2, r1, r3
 800d242:	7d3b      	ldrb	r3, [r7, #20]
 800d244:	6879      	ldr	r1, [r7, #4]
 800d246:	440a      	add	r2, r1
 800d248:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	4413      	add	r3, r2
 800d250:	460a      	mov	r2, r1
 800d252:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d254:	7d3b      	ldrb	r3, [r7, #20]
 800d256:	3301      	adds	r3, #1
 800d258:	753b      	strb	r3, [r7, #20]
 800d25a:	e7e7      	b.n	800d22c <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d266:	b29a      	uxth	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d26e:	e03a      	b.n	800d2e6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d276:	2b00      	cmp	r3, #0
 800d278:	d031      	beq.n	800d2de <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d280:	f003 030f 	and.w	r3, r3, #15
 800d284:	2b05      	cmp	r3, #5
 800d286:	d12a      	bne.n	800d2de <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d28e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d292:	2b00      	cmp	r3, #0
 800d294:	d023      	beq.n	800d2de <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800d296:	2300      	movs	r3, #0
 800d298:	74fb      	strb	r3, [r7, #19]
 800d29a:	7cfb      	ldrb	r3, [r7, #19]
 800d29c:	2b05      	cmp	r3, #5
 800d29e:	d814      	bhi.n	800d2ca <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800d2a0:	7cfb      	ldrb	r3, [r7, #19]
 800d2a2:	1cd9      	adds	r1, r3, #3
 800d2a4:	7dba      	ldrb	r2, [r7, #22]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	005b      	lsls	r3, r3, #1
 800d2aa:	4413      	add	r3, r2
 800d2ac:	005b      	lsls	r3, r3, #1
 800d2ae:	18ca      	adds	r2, r1, r3
 800d2b0:	7cfb      	ldrb	r3, [r7, #19]
 800d2b2:	6879      	ldr	r1, [r7, #4]
 800d2b4:	440a      	add	r2, r1
 800d2b6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	4413      	add	r3, r2
 800d2be:	460a      	mov	r2, r1
 800d2c0:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800d2c2:	7cfb      	ldrb	r3, [r7, #19]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	74fb      	strb	r3, [r7, #19]
 800d2c8:	e7e7      	b.n	800d29a <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d4:	b29a      	uxth	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800d2dc:	e003      	b.n	800d2e6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800d2de:	7dbb      	ldrb	r3, [r7, #22]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	75bb      	strb	r3, [r7, #22]
 800d2e4:	e75c      	b.n	800d1a0 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800d2e6:	e113      	b.n	800d510 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d2ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d300:	2b00      	cmp	r3, #0
 800d302:	d11a      	bne.n	800d33a <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d30a:	b21a      	sxth	r2, r3
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d312:	021b      	lsls	r3, r3, #8
 800d314:	b21b      	sxth	r3, r3
 800d316:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d31a:	b21b      	sxth	r3, r3
 800d31c:	4313      	orrs	r3, r2
 800d31e:	b21b      	sxth	r3, r3
 800d320:	b29a      	uxth	r2, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d32c:	f043 0302 	orr.w	r3, r3, #2
 800d330:	b29a      	uxth	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800d338:	e0f1      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2206      	movs	r2, #6
 800d33e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d342:	e0ec      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f040 80e2 	bne.w	800d514 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d356:	f043 0304 	orr.w	r3, r3, #4
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d368:	f023 0302 	bic.w	r3, r3, #2
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d374:	e0ce      	b.n	800d514 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f040 80cb 	bne.w	800d518 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d382:	2300      	movs	r3, #0
 800d384:	74bb      	strb	r3, [r7, #18]
 800d386:	7cbb      	ldrb	r3, [r7, #18]
 800d388:	2b1d      	cmp	r3, #29
 800d38a:	d818      	bhi.n	800d3be <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800d38c:	7cbb      	ldrb	r3, [r7, #18]
 800d38e:	f103 0209 	add.w	r2, r3, #9
 800d392:	7cbb      	ldrb	r3, [r7, #18]
 800d394:	6879      	ldr	r1, [r7, #4]
 800d396:	440a      	add	r2, r1
 800d398:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	4413      	add	r3, r2
 800d3a0:	460a      	mov	r2, r1
 800d3a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800d3a6:	7cbb      	ldrb	r3, [r7, #18]
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d003      	beq.n	800d3bc <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800d3b4:	7cbb      	ldrb	r3, [r7, #18]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	74bb      	strb	r3, [r7, #18]
 800d3ba:	e7e4      	b.n	800d386 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800d3bc:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d3c4:	f043 0308 	orr.w	r3, r3, #8
 800d3c8:	b29a      	uxth	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800d3d0:	e0a2      	b.n	800d518 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	747b      	strb	r3, [r7, #17]
 800d3d6:	7c7b      	ldrb	r3, [r7, #17]
 800d3d8:	2b05      	cmp	r3, #5
 800d3da:	d80e      	bhi.n	800d3fa <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800d3dc:	7c7b      	ldrb	r3, [r7, #17]
 800d3de:	1c9a      	adds	r2, r3, #2
 800d3e0:	7c7b      	ldrb	r3, [r7, #17]
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	440a      	add	r2, r1
 800d3e6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	460a      	mov	r2, r1
 800d3f0:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800d3f2:	7c7b      	ldrb	r3, [r7, #17]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	747b      	strb	r3, [r7, #17]
 800d3f8:	e7ed      	b.n	800d3d6 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	743b      	strb	r3, [r7, #16]
 800d3fe:	7c3b      	ldrb	r3, [r7, #16]
 800d400:	2b02      	cmp	r3, #2
 800d402:	d810      	bhi.n	800d426 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800d404:	7c3b      	ldrb	r3, [r7, #16]
 800d406:	f103 0208 	add.w	r2, r3, #8
 800d40a:	7c3b      	ldrb	r3, [r7, #16]
 800d40c:	6879      	ldr	r1, [r7, #4]
 800d40e:	440a      	add	r2, r1
 800d410:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	4413      	add	r3, r2
 800d418:	460a      	mov	r2, r1
 800d41a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800d41e:	7c3b      	ldrb	r3, [r7, #16]
 800d420:	3301      	adds	r3, #1
 800d422:	743b      	strb	r3, [r7, #16]
 800d424:	e7eb      	b.n	800d3fe <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d42c:	f003 030f 	and.w	r3, r3, #15
 800d430:	2b05      	cmp	r3, #5
 800d432:	d10a      	bne.n	800d44a <_ZN3BTD14HCI_event_taskEv+0x556>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d43a:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d003      	beq.n	800d44a <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2201      	movs	r2, #1
 800d446:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d450:	f043 0310 	orr.w	r3, r3, #16
 800d454:	b29a      	uxth	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800d45c:	e05f      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d464:	2b00      	cmp	r3, #0
 800d466:	d003      	beq.n	800d470 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 feec 	bl	800e246 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800d46e:	e056      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	691b      	ldr	r3, [r3, #16]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d003      	beq.n	800d480 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 fee4 	bl	800e246 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800d47e:	e04e      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 ff93 	bl	800e3ac <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800d486:	e04a      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 ffca 	bl	800e422 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800d48e:	e046      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800d496:	2b00      	cmp	r3, #0
 800d498:	d123      	bne.n	800d4e2 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00c      	beq.n	800d4be <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4aa:	f083 0301 	eor.w	r3, r3, #1
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d004      	beq.n	800d4be <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800d4bc:	e02e      	b.n	800d51c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d029      	beq.n	800d51c <_ZN3BTD14HCI_event_taskEv+0x628>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d4ce:	f083 0301 	eor.w	r3, r3, #1
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d021      	beq.n	800d51c <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800d4e0:	e01c      	b.n	800d51c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	8b5b      	ldrh	r3, [r3, #26]
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f001 f882 	bl	800e5f2 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2210      	movs	r2, #16
 800d4f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800d4f6:	e011      	b.n	800d51c <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 ffcd 	bl	800e498 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800d4fe:	e00e      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f001 f810 	bl	800e526 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800d506:	e00a      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800d508:	bf00      	nop
 800d50a:	e008      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d50c:	bf00      	nop
 800d50e:	e006      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d510:	bf00      	nop
 800d512:	e004      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d514:	bf00      	nop
 800d516:	e002      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d518:	bf00      	nop
 800d51a:	e000      	b.n	800d51e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800d51c:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800d51e:	bf00      	nop
 800d520:	3718      	adds	r7, #24
 800d522:	46bd      	mov	sp, r7
 800d524:	bdb0      	pop	{r4, r5, r7, pc}
 800d526:	bf00      	nop

0800d528 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d536:	2b13      	cmp	r3, #19
 800d538:	f200 82ef 	bhi.w	800db1a <_ZN3BTD8HCI_taskEv+0x5f2>
 800d53c:	a201      	add	r2, pc, #4	; (adr r2, 800d544 <_ZN3BTD8HCI_taskEv+0x1c>)
 800d53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d542:	bf00      	nop
 800d544:	0800d595 	.word	0x0800d595
 800d548:	0800d5cf 	.word	0x0800d5cf
 800d54c:	0800d655 	.word	0x0800d655
 800d550:	0800d675 	.word	0x0800d675
 800d554:	0800d695 	.word	0x0800d695
 800d558:	0800d6e9 	.word	0x0800d6e9
 800d55c:	0800d78f 	.word	0x0800d78f
 800d560:	0800d7bd 	.word	0x0800d7bd
 800d564:	0800d7f7 	.word	0x0800d7f7
 800d568:	0800d81f 	.word	0x0800d81f
 800d56c:	0800d855 	.word	0x0800d855
 800d570:	0800d8b3 	.word	0x0800d8b3
 800d574:	0800d8f1 	.word	0x0800d8f1
 800d578:	0800da17 	.word	0x0800da17
 800d57c:	0800db1b 	.word	0x0800db1b
 800d580:	0800da5d 	.word	0x0800da5d
 800d584:	0800da8b 	.word	0x0800da8b
 800d588:	0800d71f 	.word	0x0800d71f
 800d58c:	0800d755 	.word	0x0800d755
 800d590:	0800d775 	.word	0x0800d775
                case HCI_INIT_STATE:
                        hci_counter++;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d59a:	3301      	adds	r3, #1
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	f240 82b4 	bls.w	800db1e <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 fb7d 	bl	800dcb6 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800d5cc:	e2a7      	b.n	800db1e <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	b29a      	uxth	r2, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d5e4:	f003 0301 	and.w	r3, r3, #1
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00b      	beq.n	800d604 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f001 f830 	bl	800e662 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800d602:	e28e      	b.n	800db22 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d610:	429a      	cmp	r2, r3
 800d612:	f240 8286 	bls.w	800db22 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d61c:	461a      	mov	r2, r3
 800d61e:	0092      	lsls	r2, r2, #2
 800d620:	4413      	add	r3, r2
 800d622:	005b      	lsls	r3, r3, #1
 800d624:	b29a      	uxth	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800d632:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d636:	d904      	bls.n	800d642 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d63e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800d652:	e266      	b.n	800db22 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d65a:	f003 0301 	and.w	r3, r3, #1
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f000 8261 	beq.w	800db26 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2203      	movs	r2, #3
 800d668:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 fb72 	bl	800dd56 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800d672:	e258      	b.n	800db26 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d67a:	f003 0320 	and.w	r3, r3, #32
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 8253 	beq.w	800db2a <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fb8a 	bl	800dd9e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2204      	movs	r2, #4
 800d68e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d692:	e24a      	b.n	800db2a <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f000 8245 	beq.w	800db2e <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00a      	beq.n	800d6c2 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fc5d 	bl	800df72 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2205      	movs	r2, #5
 800d6bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d6c0:	e235      	b.n	800db2e <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d008      	beq.n	800d6de <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 fb89 	bl	800dde6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2211      	movs	r2, #17
 800d6d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d6dc:	e227      	b.n	800db2e <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2206      	movs	r2, #6
 800d6e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d6e6:	e222      	b.n	800db2e <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d6ee:	f003 0301 	and.w	r3, r3, #1
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f000 821d 	beq.w	800db32 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d008      	beq.n	800d714 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800d702:	2100      	movs	r1, #0
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 fb6e 	bl	800dde6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2211      	movs	r2, #17
 800d70e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d712:	e20e      	b.n	800db32 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2206      	movs	r2, #6
 800d718:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d71c:	e209      	b.n	800db32 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f000 8204 	beq.w	800db36 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800d734:	2b00      	cmp	r3, #0
 800d736:	d008      	beq.n	800d74a <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800d738:	2101      	movs	r1, #1
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fc9d 	bl	800e07a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2212      	movs	r2, #18
 800d744:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800d748:	e1f5      	b.n	800db36 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2206      	movs	r2, #6
 800d74e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d752:	e1f0      	b.n	800db36 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d75a:	f003 0301 	and.w	r3, r3, #1
 800d75e:	2b00      	cmp	r3, #0
 800d760:	f000 81eb 	beq.w	800db3a <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f000 fc4d 	bl	800e004 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2213      	movs	r2, #19
 800d76e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d772:	e1e2      	b.n	800db3a <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d77a:	f003 0301 	and.w	r3, r3, #1
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f000 81dd 	beq.w	800db3e <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2206      	movs	r2, #6
 800d788:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d78c:	e1d7      	b.n	800db3e <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d794:	2b00      	cmp	r3, #0
 800d796:	d104      	bne.n	800d7a2 <_ZN3BTD8HCI_taskEv+0x27a>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d007      	beq.n	800d7b2 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fc8f 	bl	800e0c6 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2207      	movs	r2, #7
 800d7ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800d7b0:	e1d8      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	220a      	movs	r2, #10
 800d7b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d7ba:	e1d3      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f000 81bb 	beq.w	800db42 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 fcb2 	bl	800e136 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d007      	beq.n	800d7ec <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 fb74 	bl	800deca <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	220c      	movs	r2, #12
 800d7e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800d7ea:	e1aa      	b.n	800db42 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2208      	movs	r2, #8
 800d7f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d7f4:	e1a5      	b.n	800db42 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d7fc:	f003 0301 	and.w	r3, r3, #1
 800d800:	2b00      	cmp	r3, #0
 800d802:	f000 81a0 	beq.w	800db46 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fcac 	bl	800e16c <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2209      	movs	r2, #9
 800d818:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d81c:	e193      	b.n	800db46 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d828:	2b00      	cmp	r3, #0
 800d82a:	f000 818e 	beq.w	800db4a <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d834:	f003 0302 	and.w	r3, r3, #2
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d007      	beq.n	800d84c <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 fead 	bl	800e59c <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	220a      	movs	r2, #10
 800d846:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800d84a:	e17e      	b.n	800db4a <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 fc8d 	bl	800e16c <_ZN3BTD11hci_connectEv>
                        break;
 800d852:	e17a      	b.n	800db4a <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d85a:	f083 0301 	eor.w	r3, r3, #1
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	2b00      	cmp	r3, #0
 800d862:	f000 8174 	beq.w	800db4e <_ZN3BTD8HCI_taskEv+0x626>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d86c:	f083 0301 	eor.w	r3, r3, #1
 800d870:	b2db      	uxtb	r3, r3
 800d872:	2b00      	cmp	r3, #0
 800d874:	f000 816b 	beq.w	800db4e <_ZN3BTD8HCI_taskEv+0x626>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d87e:	f083 0301 	eor.w	r3, r3, #1
 800d882:	b2db      	uxtb	r3, r3
 800d884:	2b00      	cmp	r3, #0
 800d886:	f000 8162 	beq.w	800db4e <_ZN3BTD8HCI_taskEv+0x626>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d890:	f083 0301 	eor.w	r3, r3, #1
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b00      	cmp	r3, #0
 800d898:	f000 8159 	beq.w	800db4e <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 fa29 	bl	800dcf4 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	220b      	movs	r2, #11
 800d8ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800d8b0:	e14d      	b.n	800db4e <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8b8:	f003 0310 	and.w	r3, r3, #16
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00a      	beq.n	800d8d6 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 faff 	bl	800deca <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	220c      	movs	r2, #12
 800d8d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800d8d4:	e13d      	b.n	800db52 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8dc:	f003 0304 	and.w	r3, r3, #4
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f000 8136 	beq.w	800db52 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2210      	movs	r2, #16
 800d8ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800d8ee:	e130      	b.n	800db52 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d8f6:	f003 0308 	and.w	r3, r3, #8
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	f000 812b 	beq.w	800db56 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	3322      	adds	r3, #34	; 0x22
 800d904:	2208      	movs	r2, #8
 800d906:	4999      	ldr	r1, [pc, #612]	; (800db6c <_ZN3BTD8HCI_taskEv+0x644>)
 800d908:	4618      	mov	r0, r3
 800d90a:	f004 fe27 	bl	801255c <strncmp>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d147      	bne.n	800d9a4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	3322      	adds	r3, #34	; 0x22
 800d938:	2216      	movs	r2, #22
 800d93a:	498d      	ldr	r1, [pc, #564]	; (800db70 <_ZN3BTD8HCI_taskEv+0x648>)
 800d93c:	4618      	mov	r0, r3
 800d93e:	f004 fe0d 	bl	801255c <strncmp>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d104      	bne.n	800d952 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d950:	e028      	b.n	800d9a4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	3322      	adds	r3, #34	; 0x22
 800d956:	2216      	movs	r2, #22
 800d958:	4986      	ldr	r1, [pc, #536]	; (800db74 <_ZN3BTD8HCI_taskEv+0x64c>)
 800d95a:	4618      	mov	r0, r3
 800d95c:	f004 fdfe 	bl	801255c <strncmp>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d110      	bne.n	800d988 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d986:	e00d      	b.n	800d9a4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	3322      	adds	r3, #34	; 0x22
 800d98c:	2213      	movs	r2, #19
 800d98e:	497a      	ldr	r1, [pc, #488]	; (800db78 <_ZN3BTD8HCI_taskEv+0x650>)
 800d990:	4618      	mov	r0, r3
 800d992:	f004 fde3 	bl	801255c <strncmp>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d103      	bne.n	800d9a4 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d117      	bne.n	800d9de <_ZN3BTD8HCI_taskEv+0x4b6>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800d9b4:	2b25      	cmp	r3, #37	; 0x25
 800d9b6:	d112      	bne.n	800d9de <_ZN3BTD8HCI_taskEv+0x4b6>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800d9be:	2b08      	cmp	r3, #8
 800d9c0:	d10d      	bne.n	800d9de <_ZN3BTD8HCI_taskEv+0x4b6>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	3322      	adds	r3, #34	; 0x22
 800d9c6:	2213      	movs	r2, #19
 800d9c8:	496c      	ldr	r1, [pc, #432]	; (800db7c <_ZN3BTD8HCI_taskEv+0x654>)
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f004 fdc6 	bl	801255c <strncmp>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d103      	bne.n	800d9de <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d104      	bne.n	800d9f2 <_ZN3BTD8HCI_taskEv+0x4ca>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d009      	beq.n	800da06 <_ZN3BTD8HCI_taskEv+0x4de>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d004      	beq.n	800da06 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2208      	movs	r2, #8
 800da00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800da04:	e0a7      	b.n	800db56 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 fa17 	bl	800de3a <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	220d      	movs	r2, #13
 800da10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800da14:	e09f      	b.n	800db56 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800da1c:	f003 0302 	and.w	r3, r3, #2
 800da20:	2b00      	cmp	r3, #0
 800da22:	f000 809a 	beq.w	800db5a <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d003      	beq.n	800da38 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	220f      	movs	r2, #15
 800da56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800da5a:	e07e      	b.n	800db5a <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800da62:	3301      	adds	r3, #1
 800da64:	b29a      	uxth	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800da72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da76:	d972      	bls.n	800db5e <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	220a      	movs	r2, #10
 800da84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800da88:	e069      	b.n	800db5e <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800da90:	f003 0304 	and.w	r3, r3, #4
 800da94:	2b00      	cmp	r3, #0
 800da96:	d064      	beq.n	800db62 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	3389      	adds	r3, #137	; 0x89
 800daa4:	2240      	movs	r2, #64	; 0x40
 800daa6:	2100      	movs	r1, #0
 800daa8:	4618      	mov	r0, r3
 800daaa:	f004 fd0b 	bl	80124c4 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	33c9      	adds	r3, #201	; 0xc9
 800dab2:	2240      	movs	r2, #64	; 0x40
 800dab4:	2100      	movs	r1, #0
 800dab6:	4618      	mov	r0, r3
 800dab8:	f004 fd04 	bl	80124c4 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2200      	movs	r2, #0
 800dae0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	220a      	movs	r2, #10
 800db14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800db18:	e023      	b.n	800db62 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800db1a:	bf00      	nop
 800db1c:	e022      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db1e:	bf00      	nop
 800db20:	e020      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db22:	bf00      	nop
 800db24:	e01e      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db26:	bf00      	nop
 800db28:	e01c      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db2a:	bf00      	nop
 800db2c:	e01a      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db2e:	bf00      	nop
 800db30:	e018      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db32:	bf00      	nop
 800db34:	e016      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db36:	bf00      	nop
 800db38:	e014      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db3a:	bf00      	nop
 800db3c:	e012      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db3e:	bf00      	nop
 800db40:	e010      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db42:	bf00      	nop
 800db44:	e00e      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db46:	bf00      	nop
 800db48:	e00c      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db4a:	bf00      	nop
 800db4c:	e00a      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db4e:	bf00      	nop
 800db50:	e008      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db52:	bf00      	nop
 800db54:	e006      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db56:	bf00      	nop
 800db58:	e004      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db5a:	bf00      	nop
 800db5c:	e002      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db5e:	bf00      	nop
 800db60:	e000      	b.n	800db64 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800db62:	bf00      	nop
        }
}
 800db64:	bf00      	nop
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	080126e8 	.word	0x080126e8
 800db70:	080126f4 	.word	0x080126f4
 800db74:	0801270c 	.word	0x0801270c
 800db78:	08012724 	.word	0x08012724
 800db7c:	08012738 	.word	0x08012738

0800db80 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800db80:	b5b0      	push	{r4, r5, r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af02      	add	r7, sp, #8
 800db86:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800db88:	2340      	movs	r3, #64	; 0x40
 800db8a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	33c9      	adds	r3, #201	; 0xc9
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800dba6:	f107 050a 	add.w	r5, r7, #10
 800dbaa:	9201      	str	r2, [sp, #4]
 800dbac:	9300      	str	r3, [sp, #0]
 800dbae:	462b      	mov	r3, r5
 800dbb0:	4622      	mov	r2, r4
 800dbb2:	f003 f92c 	bl	8010e0e <_ZN3USB10inTransferEhhPtPhh>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800dbba:	7b7b      	ldrb	r3, [r7, #13]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d125      	bne.n	800dc0c <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800dbc0:	897b      	ldrh	r3, [r7, #10]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d022      	beq.n	800dc0c <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	73fb      	strb	r3, [r7, #15]
 800dbca:	7bfb      	ldrb	r3, [r7, #15]
 800dbcc:	2b03      	cmp	r3, #3
 800dbce:	d81d      	bhi.n	800dc0c <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	3318      	adds	r3, #24
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4413      	add	r3, r2
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d011      	beq.n	800dc04 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	3318      	adds	r3, #24
 800dbe6:	009b      	lsls	r3, r3, #2
 800dbe8:	4413      	add	r3, r2
 800dbea:	6858      	ldr	r0, [r3, #4]
 800dbec:	7bfb      	ldrb	r3, [r7, #15]
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	3318      	adds	r3, #24
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	32c9      	adds	r2, #201	; 0xc9
 800dc00:	4611      	mov	r1, r2
 800dc02:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800dc04:	7bfb      	ldrb	r3, [r7, #15]
 800dc06:	3301      	adds	r3, #1
 800dc08:	73fb      	strb	r3, [r7, #15]
 800dc0a:	e7de      	b.n	800dbca <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	73bb      	strb	r3, [r7, #14]
 800dc10:	7bbb      	ldrb	r3, [r7, #14]
 800dc12:	2b03      	cmp	r3, #3
 800dc14:	d81c      	bhi.n	800dc50 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800dc16:	7bbb      	ldrb	r3, [r7, #14]
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	3318      	adds	r3, #24
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4413      	add	r3, r2
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d010      	beq.n	800dc48 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800dc26:	7bbb      	ldrb	r3, [r7, #14]
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	3318      	adds	r3, #24
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	4413      	add	r3, r2
 800dc30:	6859      	ldr	r1, [r3, #4]
 800dc32:	7bbb      	ldrb	r3, [r7, #14]
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	3318      	adds	r3, #24
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	4413      	add	r3, r2
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	3304      	adds	r3, #4
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4608      	mov	r0, r1
 800dc46:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dc48:	7bbb      	ldrb	r3, [r7, #14]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	73bb      	strb	r3, [r7, #14]
 800dc4e:	e7df      	b.n	800dc10 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800dc50:	bf00      	nop
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bdb0      	pop	{r4, r5, r7, pc}

0800dc58 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b08c      	sub	sp, #48	; 0x30
 800dc5c:	af08      	add	r7, sp, #32
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	4613      	mov	r3, r2
 800dc64:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dc6c:	f023 0301 	bic.w	r3, r3, #1
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dc88:	2300      	movs	r3, #0
 800dc8a:	9307      	str	r3, [sp, #28]
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	9306      	str	r3, [sp, #24]
 800dc90:	88fb      	ldrh	r3, [r7, #6]
 800dc92:	9305      	str	r3, [sp, #20]
 800dc94:	88fb      	ldrh	r3, [r7, #6]
 800dc96:	9304      	str	r3, [sp, #16]
 800dc98:	2300      	movs	r3, #0
 800dc9a:	9303      	str	r3, [sp, #12]
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	9302      	str	r3, [sp, #8]
 800dca0:	2300      	movs	r3, #0
 800dca2:	9301      	str	r3, [sp, #4]
 800dca4:	2300      	movs	r3, #0
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	2320      	movs	r3, #32
 800dcaa:	f002 ffd8 	bl	8010c5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800dcae:	bf00      	nop
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b082      	sub	sp, #8
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2203      	movs	r2, #3
 800dcca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	220c      	movs	r2, #12
 800dcd2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	3389      	adds	r3, #137	; 0x89
 800dce2:	2203      	movs	r2, #3
 800dce4:	4619      	mov	r1, r3
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff ffb6 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800dcec:	bf00      	nop
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dd02:	f023 0310 	bic.w	r3, r3, #16
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	221a      	movs	r2, #26
 800dd12:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	220c      	movs	r2, #12
 800dd1a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2201      	movs	r2, #1
 800dd22:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d004      	beq.n	800dd38 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2203      	movs	r2, #3
 800dd32:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800dd36:	e003      	b.n	800dd40 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2202      	movs	r2, #2
 800dd3c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	3389      	adds	r3, #137	; 0x89
 800dd44:	2204      	movs	r2, #4
 800dd46:	4619      	mov	r1, r3
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f7ff ff85 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800dd4e:	bf00      	nop
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b082      	sub	sp, #8
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dd64:	f023 0320 	bic.w	r3, r3, #32
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2209      	movs	r2, #9
 800dd74:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2210      	movs	r2, #16
 800dd7c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3389      	adds	r3, #137	; 0x89
 800dd8c:	2203      	movs	r2, #3
 800dd8e:	4619      	mov	r1, r3
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff ff61 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800dd96:	bf00      	nop
 800dd98:	3708      	adds	r7, #8
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b082      	sub	sp, #8
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ddac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2201      	movs	r2, #1
 800ddbc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2210      	movs	r2, #16
 800ddc4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	3389      	adds	r3, #137	; 0x89
 800ddd4:	2203      	movs	r2, #3
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7ff ff3d 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800ddde:	bf00      	nop
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b082      	sub	sp, #8
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	460b      	mov	r3, r1
 800ddf0:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ddf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2204      	movs	r2, #4
 800de08:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2210      	movs	r2, #16
 800de10:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	78fa      	ldrb	r2, [r7, #3]
 800de20:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	3389      	adds	r3, #137	; 0x89
 800de28:	2204      	movs	r2, #4
 800de2a:	4619      	mov	r1, r3
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f7ff ff13 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800de32:	bf00      	nop
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b082      	sub	sp, #8
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800de48:	f023 0302 	bic.w	r3, r3, #2
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2209      	movs	r2, #9
 800de58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2204      	movs	r2, #4
 800de60:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2207      	movs	r2, #7
 800de68:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	7f1a      	ldrb	r2, [r3, #28]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	7f5a      	ldrb	r2, [r3, #29]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	7f9a      	ldrb	r2, [r3, #30]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	7fda      	ldrb	r2, [r3, #31]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f893 2020 	ldrb.w	r2, [r3, #32]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	3389      	adds	r3, #137	; 0x89
 800deb8:	220a      	movs	r2, #10
 800deba:	4619      	mov	r1, r3
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f7ff fecb 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800dec2:	bf00      	nop
 800dec4:	3708      	adds	r7, #8
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}

0800deca <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800deca:	b580      	push	{r7, lr}
 800decc:	b082      	sub	sp, #8
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ded8:	f023 0308 	bic.w	r3, r3, #8
 800dedc:	b29a      	uxth	r2, r3
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2219      	movs	r2, #25
 800dee8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2204      	movs	r2, #4
 800def0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	220a      	movs	r2, #10
 800def8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	7f1a      	ldrb	r2, [r3, #28]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	7f5a      	ldrb	r2, [r3, #29]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	7f9a      	ldrb	r2, [r3, #30]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	7fda      	ldrb	r2, [r3, #31]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f893 2020 	ldrb.w	r2, [r3, #32]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2201      	movs	r2, #1
 800df40:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2200      	movs	r2, #0
 800df48:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	3389      	adds	r3, #137	; 0x89
 800df60:	220d      	movs	r2, #13
 800df62:	4619      	mov	r1, r3
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7ff fe77 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800df6a:	bf00      	nop
 800df6c:	3708      	adds	r7, #8
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800df72:	b590      	push	{r4, r7, lr}
 800df74:	b085      	sub	sp, #20
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
 800df7a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2213      	movs	r2, #19
 800df80:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	220c      	movs	r2, #12
 800df88:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800df8c:	6838      	ldr	r0, [r7, #0]
 800df8e:	f7f2 f93f 	bl	8000210 <strlen>
 800df92:	4603      	mov	r3, r0
 800df94:	b2db      	uxtb	r3, r3
 800df96:	3301      	adds	r3, #1
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	73fb      	strb	r3, [r7, #15]
 800dfa4:	7bfc      	ldrb	r4, [r7, #15]
 800dfa6:	6838      	ldr	r0, [r7, #0]
 800dfa8:	f7f2 f932 	bl	8000210 <strlen>
 800dfac:	4603      	mov	r3, r0
 800dfae:	429c      	cmp	r4, r3
 800dfb0:	d20e      	bcs.n	800dfd0 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800dfb2:	7bfb      	ldrb	r3, [r7, #15]
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	441a      	add	r2, r3
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
 800dfba:	3303      	adds	r3, #3
 800dfbc:	7811      	ldrb	r1, [r2, #0]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	460a      	mov	r2, r1
 800dfc4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800dfc8:	7bfb      	ldrb	r3, [r7, #15]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	73fb      	strb	r3, [r7, #15]
 800dfce:	e7e9      	b.n	800dfa4 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
 800dfd2:	3303      	adds	r3, #3
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800dfe4:	6838      	ldr	r0, [r7, #0]
 800dfe6:	f7f2 f913 	bl	8000210 <strlen>
 800dfea:	4603      	mov	r3, r0
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	3304      	adds	r3, #4
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	461a      	mov	r2, r3
 800dff4:	4621      	mov	r1, r4
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7ff fe2e 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800dffc:	bf00      	nop
 800dffe:	3714      	adds	r7, #20
 800e000:	46bd      	mov	sp, r7
 800e002:	bd90      	pop	{r4, r7, pc}

0800e004 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	220c      	movs	r2, #12
 800e018:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2208      	movs	r2, #8
 800e020:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	22ff      	movs	r2, #255	; 0xff
 800e028:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	22ff      	movs	r2, #255	; 0xff
 800e030:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	22ff      	movs	r2, #255	; 0xff
 800e038:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	22ff      	movs	r2, #255	; 0xff
 800e040:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	22ff      	movs	r2, #255	; 0xff
 800e048:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	221f      	movs	r2, #31
 800e050:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	22ff      	movs	r2, #255	; 0xff
 800e058:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	3389      	adds	r3, #137	; 0x89
 800e068:	220b      	movs	r2, #11
 800e06a:	4619      	mov	r1, r3
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7ff fdf3 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e072:	bf00      	nop
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b082      	sub	sp, #8
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
 800e082:	460b      	mov	r3, r1
 800e084:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2256      	movs	r2, #86	; 0x56
 800e08a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	220c      	movs	r2, #12
 800e092:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2201      	movs	r2, #1
 800e09a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800e09e:	78fb      	ldrb	r3, [r7, #3]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d001      	beq.n	800e0a8 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	e000      	b.n	800e0aa <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	3389      	adds	r3, #137	; 0x89
 800e0b4:	2204      	movs	r2, #4
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7ff fdcd 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e0be:	bf00      	nop
 800e0c0:	3708      	adds	r7, #8
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b082      	sub	sp, #8
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e0d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0d8:	b29a      	uxth	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2204      	movs	r2, #4
 800e0ec:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2205      	movs	r2, #5
 800e0f4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2233      	movs	r2, #51	; 0x33
 800e0fc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	228b      	movs	r2, #139	; 0x8b
 800e104:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	229e      	movs	r2, #158	; 0x9e
 800e10c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2230      	movs	r2, #48	; 0x30
 800e114:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	220a      	movs	r2, #10
 800e11c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	3389      	adds	r3, #137	; 0x89
 800e124:	2208      	movs	r2, #8
 800e126:	4619      	mov	r1, r3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7ff fd95 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e12e:	bf00      	nop
 800e130:	3708      	adds	r7, #8
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}

0800e136 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800e136:	b580      	push	{r7, lr}
 800e138:	b082      	sub	sp, #8
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2202      	movs	r2, #2
 800e142:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2204      	movs	r2, #4
 800e14a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	3389      	adds	r3, #137	; 0x89
 800e15a:	2203      	movs	r2, #3
 800e15c:	4619      	mov	r1, r3
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7ff fd7a 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e164:	bf00      	nop
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	331c      	adds	r3, #28
 800e178:	4619      	mov	r1, r3
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 f804 	bl	800e188 <_ZN3BTD11hci_connectEPh>
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e198:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2205      	movs	r2, #5
 800e1a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2204      	movs	r2, #4
 800e1b0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	220d      	movs	r2, #13
 800e1b8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	781a      	ldrb	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	785a      	ldrb	r2, [r3, #1]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	789a      	ldrb	r2, [r3, #2]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	78da      	ldrb	r2, [r3, #3]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	791a      	ldrb	r2, [r3, #4]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	795a      	ldrb	r2, [r3, #5]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2218      	movs	r2, #24
 800e1fc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	22cc      	movs	r2, #204	; 0xcc
 800e204:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	3389      	adds	r3, #137	; 0x89
 800e234:	2210      	movs	r2, #16
 800e236:	4619      	mov	r1, r3
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f7ff fd0d 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e23e:	bf00      	nop
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800e246:	b590      	push	{r4, r7, lr}
 800e248:	b085      	sub	sp, #20
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	220d      	movs	r2, #13
 800e252:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2204      	movs	r2, #4
 800e25a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2217      	movs	r2, #23
 800e262:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	7f1a      	ldrb	r2, [r3, #28]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	7f5a      	ldrb	r2, [r3, #29]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	7f9a      	ldrb	r2, [r3, #30]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	7fda      	ldrb	r2, [r3, #31]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d03f      	beq.n	800e330 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2206      	movs	r2, #6
 800e2b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d013      	beq.n	800e2ea <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	73fb      	strb	r3, [r7, #15]
 800e2c6:	7bfb      	ldrb	r3, [r7, #15]
 800e2c8:	2b05      	cmp	r3, #5
 800e2ca:	d822      	bhi.n	800e312 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800e2cc:	7bfa      	ldrb	r2, [r7, #15]
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
 800e2d0:	330a      	adds	r3, #10
 800e2d2:	6879      	ldr	r1, [r7, #4]
 800e2d4:	440a      	add	r2, r1
 800e2d6:	7d11      	ldrb	r1, [r2, #20]
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	4413      	add	r3, r2
 800e2dc:	460a      	mov	r2, r1
 800e2de:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e2e2:	7bfb      	ldrb	r3, [r7, #15]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	73fb      	strb	r3, [r7, #15]
 800e2e8:	e7ed      	b.n	800e2c6 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	73bb      	strb	r3, [r7, #14]
 800e2ee:	7bbb      	ldrb	r3, [r7, #14]
 800e2f0:	2b05      	cmp	r3, #5
 800e2f2:	d80e      	bhi.n	800e312 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800e2f4:	7bba      	ldrb	r2, [r7, #14]
 800e2f6:	7bbb      	ldrb	r3, [r7, #14]
 800e2f8:	330a      	adds	r3, #10
 800e2fa:	6879      	ldr	r1, [r7, #4]
 800e2fc:	440a      	add	r2, r1
 800e2fe:	7f11      	ldrb	r1, [r2, #28]
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	4413      	add	r3, r2
 800e304:	460a      	mov	r2, r1
 800e306:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800e30a:	7bbb      	ldrb	r3, [r7, #14]
 800e30c:	3301      	adds	r3, #1
 800e30e:	73bb      	strb	r3, [r7, #14]
 800e310:	e7ed      	b.n	800e2ee <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800e312:	2310      	movs	r3, #16
 800e314:	737b      	strb	r3, [r7, #13]
 800e316:	7b7b      	ldrb	r3, [r7, #13]
 800e318:	2b19      	cmp	r3, #25
 800e31a:	d83c      	bhi.n	800e396 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800e31c:	7b7b      	ldrb	r3, [r7, #13]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	4413      	add	r3, r2
 800e322:	2200      	movs	r2, #0
 800e324:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800e328:	7b7b      	ldrb	r3, [r7, #13]
 800e32a:	3301      	adds	r3, #1
 800e32c:	737b      	strb	r3, [r7, #13]
 800e32e:	e7f2      	b.n	800e316 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	4618      	mov	r0, r3
 800e336:	f7f1 ff6b 	bl	8000210 <strlen>
 800e33a:	4603      	mov	r3, r0
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e344:	2300      	movs	r3, #0
 800e346:	733b      	strb	r3, [r7, #12]
 800e348:	7b3c      	ldrb	r4, [r7, #12]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	691b      	ldr	r3, [r3, #16]
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f1 ff5e 	bl	8000210 <strlen>
 800e354:	4603      	mov	r3, r0
 800e356:	429c      	cmp	r4, r3
 800e358:	d20f      	bcs.n	800e37a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	691a      	ldr	r2, [r3, #16]
 800e35e:	7b3b      	ldrb	r3, [r7, #12]
 800e360:	441a      	add	r2, r3
 800e362:	7b3b      	ldrb	r3, [r7, #12]
 800e364:	330a      	adds	r3, #10
 800e366:	7811      	ldrb	r1, [r2, #0]
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	4413      	add	r3, r2
 800e36c:	460a      	mov	r2, r1
 800e36e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800e372:	7b3b      	ldrb	r3, [r7, #12]
 800e374:	3301      	adds	r3, #1
 800e376:	733b      	strb	r3, [r7, #12]
 800e378:	e7e6      	b.n	800e348 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800e37a:	7b3b      	ldrb	r3, [r7, #12]
 800e37c:	2b0f      	cmp	r3, #15
 800e37e:	d80a      	bhi.n	800e396 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800e380:	7b3b      	ldrb	r3, [r7, #12]
 800e382:	330a      	adds	r3, #10
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	4413      	add	r3, r2
 800e388:	2200      	movs	r2, #0
 800e38a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800e38e:	7b3b      	ldrb	r3, [r7, #12]
 800e390:	3301      	adds	r3, #1
 800e392:	733b      	strb	r3, [r7, #12]
 800e394:	e7f1      	b.n	800e37a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3389      	adds	r3, #137	; 0x89
 800e39a:	221a      	movs	r2, #26
 800e39c:	4619      	mov	r1, r3
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7ff fc5a 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e3a4:	bf00      	nop
 800e3a6:	3714      	adds	r7, #20
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd90      	pop	{r4, r7, pc}

0800e3ac <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	220e      	movs	r2, #14
 800e3b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2204      	movs	r2, #4
 800e3c0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2206      	movs	r2, #6
 800e3c8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	7f1a      	ldrb	r2, [r3, #28]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	7f5a      	ldrb	r2, [r3, #29]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	7f9a      	ldrb	r2, [r3, #30]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	7fda      	ldrb	r2, [r3, #31]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	3389      	adds	r3, #137	; 0x89
 800e410:	2209      	movs	r2, #9
 800e412:	4619      	mov	r1, r3
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7ff fc1f 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e41a:	bf00      	nop
 800e41c:	3708      	adds	r7, #8
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800e422:	b580      	push	{r7, lr}
 800e424:	b082      	sub	sp, #8
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	220c      	movs	r2, #12
 800e42e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2204      	movs	r2, #4
 800e436:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2206      	movs	r2, #6
 800e43e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	7f1a      	ldrb	r2, [r3, #28]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	7f5a      	ldrb	r2, [r3, #29]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	7f9a      	ldrb	r2, [r3, #30]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	7fda      	ldrb	r2, [r3, #31]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	3389      	adds	r3, #137	; 0x89
 800e486:	2209      	movs	r2, #9
 800e488:	4619      	mov	r1, r3
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f7ff fbe4 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e490:	bf00      	nop
 800e492:	3708      	adds	r7, #8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	222b      	movs	r2, #43	; 0x2b
 800e4a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2204      	movs	r2, #4
 800e4ac:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2209      	movs	r2, #9
 800e4b4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	7f1a      	ldrb	r2, [r3, #28]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	7f5a      	ldrb	r2, [r3, #29]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	7f9a      	ldrb	r2, [r3, #30]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	7fda      	ldrb	r2, [r3, #31]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2203      	movs	r2, #3
 800e4fc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	3389      	adds	r3, #137	; 0x89
 800e514:	220c      	movs	r2, #12
 800e516:	4619      	mov	r1, r3
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7ff fb9d 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e51e:	bf00      	nop
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800e526:	b580      	push	{r7, lr}
 800e528:	b082      	sub	sp, #8
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	222c      	movs	r2, #44	; 0x2c
 800e532:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2204      	movs	r2, #4
 800e53a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2206      	movs	r2, #6
 800e542:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	7f1a      	ldrb	r2, [r3, #28]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	7f5a      	ldrb	r2, [r3, #29]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	7f9a      	ldrb	r2, [r3, #30]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	7fda      	ldrb	r2, [r3, #31]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	3389      	adds	r3, #137	; 0x89
 800e58a:	2209      	movs	r2, #9
 800e58c:	4619      	mov	r1, r3
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7ff fb62 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e594:	bf00      	nop
 800e596:	3708      	adds	r7, #8
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2211      	movs	r2, #17
 800e5a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2204      	movs	r2, #4
 800e5b0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2202      	movs	r2, #2
 800e5b8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	8b5b      	ldrh	r3, [r3, #26]
 800e5c0:	b2da      	uxtb	r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	8b5b      	ldrh	r3, [r3, #26]
 800e5cc:	121b      	asrs	r3, r3, #8
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	f003 030f 	and.w	r3, r3, #15
 800e5d4:	b2da      	uxtb	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	3389      	adds	r3, #137	; 0x89
 800e5e0:	2205      	movs	r2, #5
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7ff fb37 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e5ea:	bf00      	nop
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b082      	sub	sp, #8
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e604:	f023 0304 	bic.w	r3, r3, #4
 800e608:	b29a      	uxth	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2206      	movs	r2, #6
 800e614:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2204      	movs	r2, #4
 800e61c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2203      	movs	r2, #3
 800e624:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800e628:	887b      	ldrh	r3, [r7, #2]
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800e632:	887b      	ldrh	r3, [r7, #2]
 800e634:	121b      	asrs	r3, r3, #8
 800e636:	b2db      	uxtb	r3, r3
 800e638:	f003 030f 	and.w	r3, r3, #15
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2213      	movs	r2, #19
 800e648:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	3389      	adds	r3, #137	; 0x89
 800e650:	2206      	movs	r2, #6
 800e652:	4619      	mov	r1, r3
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7ff faff 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e65a:	bf00      	nop
 800e65c:	3708      	adds	r7, #8
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e662:	b580      	push	{r7, lr}
 800e664:	b082      	sub	sp, #8
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2224      	movs	r2, #36	; 0x24
 800e66e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	220c      	movs	r2, #12
 800e676:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2203      	movs	r2, #3
 800e67e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2204      	movs	r2, #4
 800e686:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2208      	movs	r2, #8
 800e68e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2200      	movs	r2, #0
 800e696:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	3389      	adds	r3, #137	; 0x89
 800e69e:	2206      	movs	r2, #6
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f7ff fad8 	bl	800dc58 <_ZN3BTD11HCI_CommandEPht>
}
 800e6a8:	bf00      	nop
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800e6b0:	b5b0      	push	{r4, r5, r7, lr}
 800e6b2:	b08a      	sub	sp, #40	; 0x28
 800e6b4:	af02      	add	r7, sp, #8
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	607a      	str	r2, [r7, #4]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	460b      	mov	r3, r1
 800e6be:	817b      	strh	r3, [r7, #10]
 800e6c0:	4613      	mov	r3, r2
 800e6c2:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800e6c4:	466b      	mov	r3, sp
 800e6c6:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800e6c8:	7a7b      	ldrb	r3, [r7, #9]
 800e6ca:	1ddc      	adds	r4, r3, #7
 800e6cc:	61bc      	str	r4, [r7, #24]
 800e6ce:	4623      	mov	r3, r4
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f04f 0100 	mov.w	r1, #0
 800e6d8:	f04f 0200 	mov.w	r2, #0
 800e6dc:	f04f 0300 	mov.w	r3, #0
 800e6e0:	00cb      	lsls	r3, r1, #3
 800e6e2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e6e6:	00c2      	lsls	r2, r0, #3
 800e6e8:	4623      	mov	r3, r4
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f04f 0100 	mov.w	r1, #0
 800e6f2:	f04f 0200 	mov.w	r2, #0
 800e6f6:	f04f 0300 	mov.w	r3, #0
 800e6fa:	00cb      	lsls	r3, r1, #3
 800e6fc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e700:	00c2      	lsls	r2, r0, #3
 800e702:	4623      	mov	r3, r4
 800e704:	3301      	adds	r3, #1
 800e706:	3307      	adds	r3, #7
 800e708:	08db      	lsrs	r3, r3, #3
 800e70a:	00db      	lsls	r3, r3, #3
 800e70c:	ebad 0d03 	sub.w	sp, sp, r3
 800e710:	ab02      	add	r3, sp, #8
 800e712:	3300      	adds	r3, #0
 800e714:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800e716:	897b      	ldrh	r3, [r7, #10]
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800e71e:	897b      	ldrh	r3, [r7, #10]
 800e720:	121b      	asrs	r3, r3, #8
 800e722:	b25b      	sxtb	r3, r3
 800e724:	f003 030f 	and.w	r3, r3, #15
 800e728:	b25b      	sxtb	r3, r3
 800e72a:	f043 0320 	orr.w	r3, r3, #32
 800e72e:	b25b      	sxtb	r3, r3
 800e730:	b2da      	uxtb	r2, r3
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800e736:	7a7b      	ldrb	r3, [r7, #9]
 800e738:	3304      	adds	r3, #4
 800e73a:	b2da      	uxtb	r2, r3
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800e740:	7a7b      	ldrb	r3, [r7, #9]
 800e742:	3304      	adds	r3, #4
 800e744:	121b      	asrs	r3, r3, #8
 800e746:	b2da      	uxtb	r2, r3
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	7a7a      	ldrb	r2, [r7, #9]
 800e750:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800e752:	7a7b      	ldrb	r3, [r7, #9]
 800e754:	121b      	asrs	r3, r3, #8
 800e756:	b2da      	uxtb	r2, r3
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e762:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e76a:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e76c:	2300      	movs	r3, #0
 800e76e:	83fb      	strh	r3, [r7, #30]
 800e770:	7a7b      	ldrb	r3, [r7, #9]
 800e772:	b29b      	uxth	r3, r3
 800e774:	8bfa      	ldrh	r2, [r7, #30]
 800e776:	429a      	cmp	r2, r3
 800e778:	d20b      	bcs.n	800e792 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800e77a:	8bfb      	ldrh	r3, [r7, #30]
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	441a      	add	r2, r3
 800e780:	8bfb      	ldrh	r3, [r7, #30]
 800e782:	3308      	adds	r3, #8
 800e784:	7811      	ldrb	r1, [r2, #0]
 800e786:	697a      	ldr	r2, [r7, #20]
 800e788:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e78a:	8bfb      	ldrh	r3, [r7, #30]
 800e78c:	3301      	adds	r3, #1
 800e78e:	83fb      	strh	r3, [r7, #30]
 800e790:	e7ee      	b.n	800e770 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800e7a2:	7a7b      	ldrb	r3, [r7, #9]
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	3308      	adds	r3, #8
 800e7a8:	b29c      	uxth	r4, r3
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	4623      	mov	r3, r4
 800e7b0:	f002 fc34 	bl	801101c <_ZN3USB11outTransferEhhtPh>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800e7b8:	7cfb      	ldrb	r3, [r7, #19]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d002      	beq.n	800e7c4 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800e7be:	2064      	movs	r0, #100	; 0x64
 800e7c0:	f7f3 fb70 	bl	8001ea4 <HAL_Delay>
 800e7c4:	46ad      	mov	sp, r5
}
 800e7c6:	bf00      	nop
 800e7c8:	3720      	adds	r7, #32
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bdb0      	pop	{r4, r5, r7, pc}

0800e7ce <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b086      	sub	sp, #24
 800e7d2:	af02      	add	r7, sp, #8
 800e7d4:	60f8      	str	r0, [r7, #12]
 800e7d6:	607b      	str	r3, [r7, #4]
 800e7d8:	460b      	mov	r3, r1
 800e7da:	817b      	strh	r3, [r7, #10]
 800e7dc:	4613      	mov	r3, r2
 800e7de:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2202      	movs	r2, #2
 800e7e4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	7a7a      	ldrb	r2, [r7, #9]
 800e7ec:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2204      	movs	r2, #4
 800e7f4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800e800:	8b3b      	ldrh	r3, [r7, #24]
 800e802:	b2da      	uxtb	r2, r3
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800e80a:	8b3b      	ldrh	r3, [r7, #24]
 800e80c:	121b      	asrs	r3, r3, #8
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	781a      	ldrb	r2, [r3, #0]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	785a      	ldrb	r2, [r3, #1]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e830:	8979      	ldrh	r1, [r7, #10]
 800e832:	2300      	movs	r3, #0
 800e834:	9301      	str	r3, [sp, #4]
 800e836:	2301      	movs	r3, #1
 800e838:	9300      	str	r3, [sp, #0]
 800e83a:	2308      	movs	r3, #8
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f7ff ff37 	bl	800e6b0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e842:	bf00      	nop
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b086      	sub	sp, #24
 800e84e:	af02      	add	r7, sp, #8
 800e850:	60f8      	str	r0, [r7, #12]
 800e852:	607b      	str	r3, [r7, #4]
 800e854:	460b      	mov	r3, r1
 800e856:	817b      	strh	r3, [r7, #10]
 800e858:	4613      	mov	r3, r2
 800e85a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2203      	movs	r2, #3
 800e860:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	7a7a      	ldrb	r2, [r7, #9]
 800e868:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2208      	movs	r2, #8
 800e870:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2200      	movs	r2, #0
 800e878:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	781a      	ldrb	r2, [r3, #0]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	785a      	ldrb	r2, [r3, #1]
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	781a      	ldrb	r2, [r3, #0]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	785a      	ldrb	r2, [r3, #1]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	7f3a      	ldrb	r2, [r7, #28]
 800e8a8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e8ca:	8979      	ldrh	r1, [r7, #10]
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	9301      	str	r3, [sp, #4]
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	230c      	movs	r3, #12
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f7ff feea 	bl	800e6b0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e8dc:	bf00      	nop
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af02      	add	r7, sp, #8
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	607b      	str	r3, [r7, #4]
 800e8ee:	460b      	mov	r3, r1
 800e8f0:	817b      	strh	r3, [r7, #10]
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2204      	movs	r2, #4
 800e8fa:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	7a7a      	ldrb	r2, [r7, #9]
 800e902:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2208      	movs	r2, #8
 800e90a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	781a      	ldrb	r2, [r3, #0]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	785a      	ldrb	r2, [r3, #1]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2200      	movs	r2, #0
 800e936:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2201      	movs	r2, #1
 800e93e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2202      	movs	r2, #2
 800e946:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	22ff      	movs	r2, #255	; 0xff
 800e94e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	22ff      	movs	r2, #255	; 0xff
 800e956:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800e960:	8979      	ldrh	r1, [r7, #10]
 800e962:	2300      	movs	r3, #0
 800e964:	9301      	str	r3, [sp, #4]
 800e966:	2301      	movs	r3, #1
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	230c      	movs	r3, #12
 800e96c:	68f8      	ldr	r0, [r7, #12]
 800e96e:	f7ff fe9f 	bl	800e6b0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e972:	bf00      	nop
 800e974:	3710      	adds	r7, #16
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b086      	sub	sp, #24
 800e97e:	af02      	add	r7, sp, #8
 800e980:	60f8      	str	r0, [r7, #12]
 800e982:	607b      	str	r3, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	817b      	strh	r3, [r7, #10]
 800e988:	4613      	mov	r3, r2
 800e98a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2205      	movs	r2, #5
 800e990:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	7a7a      	ldrb	r2, [r7, #9]
 800e998:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	220a      	movs	r2, #10
 800e9a0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	781a      	ldrb	r2, [r3, #0]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	785a      	ldrb	r2, [r3, #1]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2202      	movs	r2, #2
 800e9ec:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	22a0      	movs	r2, #160	; 0xa0
 800e9f4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2202      	movs	r2, #2
 800e9fc:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ea06:	8979      	ldrh	r1, [r7, #10]
 800ea08:	2300      	movs	r3, #0
 800ea0a:	9301      	str	r3, [sp, #4]
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	230e      	movs	r3, #14
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f7ff fe4c 	bl	800e6b0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ea18:	bf00      	nop
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	af02      	add	r7, sp, #8
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	607b      	str	r3, [r7, #4]
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	817b      	strh	r3, [r7, #10]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2206      	movs	r2, #6
 800ea36:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	7a7a      	ldrb	r2, [r7, #9]
 800ea3e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2204      	movs	r2, #4
 800ea46:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	781a      	ldrb	r2, [r3, #0]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	785a      	ldrb	r2, [r3, #1]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	781a      	ldrb	r2, [r3, #0]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ea70:	69bb      	ldr	r3, [r7, #24]
 800ea72:	785a      	ldrb	r2, [r3, #1]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ea80:	8979      	ldrh	r1, [r7, #10]
 800ea82:	2300      	movs	r3, #0
 800ea84:	9301      	str	r3, [sp, #4]
 800ea86:	2301      	movs	r3, #1
 800ea88:	9300      	str	r3, [sp, #0]
 800ea8a:	2308      	movs	r3, #8
 800ea8c:	68f8      	ldr	r0, [r7, #12]
 800ea8e:	f7ff fe0f 	bl	800e6b0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ea92:	bf00      	nop
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b086      	sub	sp, #24
 800ea9e:	af02      	add	r7, sp, #8
 800eaa0:	60f8      	str	r0, [r7, #12]
 800eaa2:	607b      	str	r3, [r7, #4]
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	817b      	strh	r3, [r7, #10]
 800eaa8:	4613      	mov	r3, r2
 800eaaa:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2207      	movs	r2, #7
 800eab0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	7a7a      	ldrb	r2, [r7, #9]
 800eab8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2204      	movs	r2, #4
 800eac0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2200      	movs	r2, #0
 800eac8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	781a      	ldrb	r2, [r3, #0]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	785a      	ldrb	r2, [r3, #1]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	781a      	ldrb	r2, [r3, #0]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	785a      	ldrb	r2, [r3, #1]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eafa:	8979      	ldrh	r1, [r7, #10]
 800eafc:	2300      	movs	r3, #0
 800eafe:	9301      	str	r3, [sp, #4]
 800eb00:	2301      	movs	r3, #1
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	2308      	movs	r3, #8
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f7ff fdd2 	bl	800e6b0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800eb0c:	bf00      	nop
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af02      	add	r7, sp, #8
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	4608      	mov	r0, r1
 800eb1e:	4611      	mov	r1, r2
 800eb20:	461a      	mov	r2, r3
 800eb22:	4603      	mov	r3, r0
 800eb24:	807b      	strh	r3, [r7, #2]
 800eb26:	460b      	mov	r3, r1
 800eb28:	707b      	strb	r3, [r7, #1]
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	220b      	movs	r2, #11
 800eb32:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	787a      	ldrb	r2, [r7, #1]
 800eb3a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2208      	movs	r2, #8
 800eb42:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	783a      	ldrb	r2, [r7, #0]
 800eb52:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	7c3a      	ldrb	r2, [r7, #16]
 800eb5a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f203 1209 	addw	r2, r3, #265	; 0x109
 800eb94:	8879      	ldrh	r1, [r7, #2]
 800eb96:	2300      	movs	r3, #0
 800eb98:	9301      	str	r3, [sp, #4]
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	230c      	movs	r3, #12
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7ff fd85 	bl	800e6b0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800eba6:	bf00      	nop
 800eba8:	3708      	adds	r7, #8
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}

0800ebae <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b08e      	sub	sp, #56	; 0x38
 800ebb2:	af08      	add	r7, sp, #32
 800ebb4:	6078      	str	r0, [r7, #4]
 800ebb6:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	75fb      	strb	r3, [r7, #23]
 800ebc4:	7dfb      	ldrb	r3, [r7, #23]
 800ebc6:	2b05      	cmp	r3, #5
 800ebc8:	d811      	bhi.n	800ebee <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800ebca:	7dfb      	ldrb	r3, [r7, #23]
 800ebcc:	f1c3 0305 	rsb	r3, r3, #5
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	441a      	add	r2, r3
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
 800ebd8:	3302      	adds	r3, #2
 800ebda:	7812      	ldrb	r2, [r2, #0]
 800ebdc:	f107 0118 	add.w	r1, r7, #24
 800ebe0:	440b      	add	r3, r1
 800ebe2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ebe6:	7dfb      	ldrb	r3, [r7, #23]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	75fb      	strb	r3, [r7, #23]
 800ebec:	e7ea      	b.n	800ebc4 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ebfe:	2300      	movs	r3, #0
 800ec00:	9307      	str	r3, [sp, #28]
 800ec02:	f107 030c 	add.w	r3, r7, #12
 800ec06:	9306      	str	r3, [sp, #24]
 800ec08:	2308      	movs	r3, #8
 800ec0a:	9305      	str	r3, [sp, #20]
 800ec0c:	2308      	movs	r3, #8
 800ec0e:	9304      	str	r3, [sp, #16]
 800ec10:	2300      	movs	r3, #0
 800ec12:	9303      	str	r3, [sp, #12]
 800ec14:	2303      	movs	r3, #3
 800ec16:	9302      	str	r3, [sp, #8]
 800ec18:	23f5      	movs	r3, #245	; 0xf5
 800ec1a:	9301      	str	r3, [sp, #4]
 800ec1c:	2309      	movs	r3, #9
 800ec1e:	9300      	str	r3, [sp, #0]
 800ec20:	2321      	movs	r3, #33	; 0x21
 800ec22:	f002 f81c 	bl	8010c5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ec26:	bf00      	nop
 800ec28:	3718      	adds	r7, #24
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b08e      	sub	sp, #56	; 0x38
 800ec32:	af08      	add	r7, sp, #32
 800ec34:	6078      	str	r0, [r7, #4]
 800ec36:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800ec38:	2305      	movs	r3, #5
 800ec3a:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800ec3c:	2310      	movs	r3, #16
 800ec3e:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800ec40:	2301      	movs	r3, #1
 800ec42:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800ec44:	2302      	movs	r3, #2
 800ec46:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800ec48:	2312      	movs	r3, #18
 800ec4a:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	75fb      	strb	r3, [r7, #23]
 800ec50:	7dfb      	ldrb	r3, [r7, #23]
 800ec52:	2b05      	cmp	r3, #5
 800ec54:	d80e      	bhi.n	800ec74 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800ec56:	7dfb      	ldrb	r3, [r7, #23]
 800ec58:	683a      	ldr	r2, [r7, #0]
 800ec5a:	441a      	add	r2, r3
 800ec5c:	7dfb      	ldrb	r3, [r7, #23]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	7812      	ldrb	r2, [r2, #0]
 800ec62:	f107 0118 	add.w	r1, r7, #24
 800ec66:	440b      	add	r3, r1
 800ec68:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ec6c:	7dfb      	ldrb	r3, [r7, #23]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	75fb      	strb	r3, [r7, #23]
 800ec72:	e7ed      	b.n	800ec50 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ec84:	2300      	movs	r3, #0
 800ec86:	9307      	str	r3, [sp, #28]
 800ec88:	f107 030c 	add.w	r3, r7, #12
 800ec8c:	9306      	str	r3, [sp, #24]
 800ec8e:	230b      	movs	r3, #11
 800ec90:	9305      	str	r3, [sp, #20]
 800ec92:	230b      	movs	r3, #11
 800ec94:	9304      	str	r3, [sp, #16]
 800ec96:	2300      	movs	r3, #0
 800ec98:	9303      	str	r3, [sp, #12]
 800ec9a:	2303      	movs	r3, #3
 800ec9c:	9302      	str	r3, [sp, #8]
 800ec9e:	2305      	movs	r3, #5
 800eca0:	9301      	str	r3, [sp, #4]
 800eca2:	2309      	movs	r3, #9
 800eca4:	9300      	str	r3, [sp, #0]
 800eca6:	2321      	movs	r3, #33	; 0x21
 800eca8:	f001 ffd9 	bl	8010c5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ecac:	bf00      	nop
 800ecae:	3718      	adds	r7, #24
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	4a04      	ldr	r2, [pc, #16]	; (800ecd0 <_ZN13USBReadParserC1Ev+0x1c>)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	601a      	str	r2, [r3, #0]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr
 800ecd0:	080128b0 	.word	0x080128b0

0800ecd4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff ffe7 	bl	800ecb4 <_ZN13USBReadParserC1Ev>
 800ece6:	4a21      	ldr	r2, [pc, #132]	; (800ed6c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	683a      	ldr	r2, [r7, #0]
 800ecf0:	605a      	str	r2, [r3, #4]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	3308      	adds	r3, #8
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7fd fb65 	bl	800c3c6 <_ZN16MultiValueBufferC1Ev>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	3310      	adds	r3, #16
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7fd fb77 	bl	800c3f4 <_ZN20MultiByteValueParserC1Ev>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	3318      	adds	r3, #24
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fd fb9e 	bl	800c44c <_ZN11ByteSkipperC1Ev>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f103 0220 	add.w	r2, r3, #32
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f103 0210 	add.w	r2, r3, #16
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	3308      	adds	r3, #8
 800ed46:	4619      	mov	r1, r3
 800ed48:	4610      	mov	r0, r2
 800ed4a:	f7fd fb67 	bl	800c41c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f103 0218 	add.w	r2, r3, #24
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	3308      	adds	r3, #8
 800ed58:	4619      	mov	r1, r3
 800ed5a:	4610      	mov	r0, r2
 800ed5c:	f7fd fb8a 	bl	800c474 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4618      	mov	r0, r3
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	08012858 	.word	0x08012858

0800ed70 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7ff ff99 	bl	800ecb4 <_ZN13USBReadParserC1Ev>
 800ed82:	4a21      	ldr	r2, [pc, #132]	; (800ee08 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	601a      	str	r2, [r3, #0]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	683a      	ldr	r2, [r7, #0]
 800ed8c:	605a      	str	r2, [r3, #4]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	3308      	adds	r3, #8
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fd fb17 	bl	800c3c6 <_ZN16MultiValueBufferC1Ev>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	3310      	adds	r3, #16
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fd fb29 	bl	800c3f4 <_ZN20MultiByteValueParserC1Ev>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	3318      	adds	r3, #24
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fd fb50 	bl	800c44c <_ZN11ByteSkipperC1Ev>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f103 0220 	add.w	r2, r3, #32
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f103 0210 	add.w	r2, r3, #16
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	3308      	adds	r3, #8
 800ede2:	4619      	mov	r1, r3
 800ede4:	4610      	mov	r0, r2
 800ede6:	f7fd fb19 	bl	800c41c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f103 0218 	add.w	r2, r3, #24
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	3308      	adds	r3, #8
 800edf4:	4619      	mov	r1, r3
 800edf6:	4610      	mov	r0, r2
 800edf8:	f7fd fb3c 	bl	800c474 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4618      	mov	r0, r3
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	0801284c 	.word	0x0801284c

0800ee0c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b086      	sub	sp, #24
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	607a      	str	r2, [r7, #4]
 800ee16:	603b      	str	r3, [r7, #0]
 800ee18:	460b      	mov	r3, r1
 800ee1a:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800ee1c:	897b      	ldrh	r3, [r7, #10]
 800ee1e:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800ee24:	8afb      	ldrh	r3, [r7, #22]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00f      	beq.n	800ee4a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800ee2a:	f107 0216 	add.w	r2, r7, #22
 800ee2e:	f107 0310 	add.w	r3, r7, #16
 800ee32:	4619      	mov	r1, r3
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f000 f82d 	bl	800ee94 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	f083 0301 	eor.w	r3, r3, #1
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d100      	bne.n	800ee48 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800ee46:	e7ed      	b.n	800ee24 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800ee48:	bf00      	nop
}
 800ee4a:	3718      	adds	r7, #24
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b086      	sub	sp, #24
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	607a      	str	r2, [r7, #4]
 800ee5a:	603b      	str	r3, [r7, #0]
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800ee60:	897b      	ldrh	r3, [r7, #10]
 800ee62:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800ee68:	8afb      	ldrh	r3, [r7, #22]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00f      	beq.n	800ee8e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800ee6e:	f107 0216 	add.w	r2, r7, #22
 800ee72:	f107 0310 	add.w	r3, r7, #16
 800ee76:	4619      	mov	r1, r3
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f000 f981 	bl	800f180 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	f083 0301 	eor.w	r3, r3, #1
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d100      	bne.n	800ee8c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800ee8a:	e7ed      	b.n	800ee68 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800ee8c:	bf00      	nop
}
 800ee8e:	3718      	adds	r7, #24
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800ee94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee96:	b089      	sub	sp, #36	; 0x24
 800ee98:	af02      	add	r7, sp, #8
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	3320      	adds	r3, #32
 800eea4:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	3320      	adds	r3, #32
 800eeaa:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eeb2:	2b04      	cmp	r3, #4
 800eeb4:	f200 815e 	bhi.w	800f174 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800eeb8:	a201      	add	r2, pc, #4	; (adr r2, 800eec0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800eeba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eebe:	bf00      	nop
 800eec0:	0800eed5 	.word	0x0800eed5
 800eec4:	0800eef5 	.word	0x0800eef5
 800eec8:	0800ef37 	.word	0x0800ef37
 800eecc:	0800ef4b 	.word	0x0800ef4b
 800eed0:	0800f00f 	.word	0x0800f00f
                case 0:
                        theBuffer.valueSize = 2;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2202      	movs	r2, #2
 800eed8:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f103 0210 	add.w	r2, r3, #16
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	3308      	adds	r3, #8
 800eee4:	4619      	mov	r1, r3
 800eee6:	4610      	mov	r0, r2
 800eee8:	f7fd fa98 	bl	800c41c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	3310      	adds	r3, #16
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	68b9      	ldr	r1, [r7, #8]
 800eefc:	4618      	mov	r0, r3
 800eefe:	f003 fa49 	bl	8012394 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800ef02:	4603      	mov	r3, r0
 800ef04:	f083 0301 	eor.w	r3, r3, #1
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d001      	beq.n	800ef12 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	e131      	b.n	800f176 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ef18:	781a      	ldrb	r2, [r3, #0]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800ef26:	785a      	ldrb	r2, [r3, #1]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2202      	movs	r2, #2
 800ef32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	3320      	adds	r3, #32
 800ef3a:	1c9a      	adds	r2, r3, #2
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2203      	movs	r2, #3
 800ef46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ef50:	3b02      	subs	r3, #2
 800ef52:	2b1f      	cmp	r3, #31
 800ef54:	d847      	bhi.n	800efe6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800ef56:	a201      	add	r2, pc, #4	; (adr r2, 800ef5c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800ef58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef5c:	0800efe7 	.word	0x0800efe7
 800ef60:	0800efe7 	.word	0x0800efe7
 800ef64:	0800efdd 	.word	0x0800efdd
 800ef68:	0800efe7 	.word	0x0800efe7
 800ef6c:	0800efe7 	.word	0x0800efe7
 800ef70:	0800efe7 	.word	0x0800efe7
 800ef74:	0800efe7 	.word	0x0800efe7
 800ef78:	0800efe7 	.word	0x0800efe7
 800ef7c:	0800efe7 	.word	0x0800efe7
 800ef80:	0800efe7 	.word	0x0800efe7
 800ef84:	0800efe7 	.word	0x0800efe7
 800ef88:	0800efe7 	.word	0x0800efe7
 800ef8c:	0800efe7 	.word	0x0800efe7
 800ef90:	0800efe7 	.word	0x0800efe7
 800ef94:	0800efe7 	.word	0x0800efe7
 800ef98:	0800efe7 	.word	0x0800efe7
 800ef9c:	0800efe7 	.word	0x0800efe7
 800efa0:	0800efe7 	.word	0x0800efe7
 800efa4:	0800efe7 	.word	0x0800efe7
 800efa8:	0800efe7 	.word	0x0800efe7
 800efac:	0800efe7 	.word	0x0800efe7
 800efb0:	0800efe7 	.word	0x0800efe7
 800efb4:	0800efe7 	.word	0x0800efe7
 800efb8:	0800efe7 	.word	0x0800efe7
 800efbc:	0800efe7 	.word	0x0800efe7
 800efc0:	0800efe7 	.word	0x0800efe7
 800efc4:	0800efe7 	.word	0x0800efe7
 800efc8:	0800efe7 	.word	0x0800efe7
 800efcc:	0800efe7 	.word	0x0800efe7
 800efd0:	0800efe7 	.word	0x0800efe7
 800efd4:	0800efe7 	.word	0x0800efe7
 800efd8:	0800efe7 	.word	0x0800efe7
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800efe4:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800efec:	3b02      	subs	r3, #2
 800efee:	b2da      	uxtb	r2, r3
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f103 0210 	add.w	r2, r3, #16
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	3308      	adds	r3, #8
 800effe:	4619      	mov	r1, r3
 800f000:	4610      	mov	r0, r2
 800f002:	f7fd fa0b 	bl	800c41c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2204      	movs	r2, #4
 800f00a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f014:	2b05      	cmp	r3, #5
 800f016:	d055      	beq.n	800f0c4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f018:	2b05      	cmp	r3, #5
 800f01a:	f300 8085 	bgt.w	800f128 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f01e:	2b02      	cmp	r3, #2
 800f020:	d002      	beq.n	800f028 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f022:	2b04      	cmp	r3, #4
 800f024:	d015      	beq.n	800f052 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f026:	e07f      	b.n	800f128 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3310      	adds	r3, #16
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	68b9      	ldr	r1, [r7, #8]
 800f030:	4618      	mov	r0, r3
 800f032:	f003 f9af 	bl	8012394 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f036:	4603      	mov	r3, r0
 800f038:	f083 0301 	eor.w	r3, r3, #1
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d001      	beq.n	800f046 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f042:	2300      	movs	r3, #0
 800f044:	e097      	b.n	800f176 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	795a      	ldrb	r2, [r3, #5]
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f050:	e086      	b.n	800f160 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	3310      	adds	r3, #16
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	68b9      	ldr	r1, [r7, #8]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f003 f99a 	bl	8012394 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f060:	4603      	mov	r3, r0
 800f062:	f083 0301 	eor.w	r3, r3, #1
 800f066:	b2db      	uxtb	r3, r3
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d001      	beq.n	800f070 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f06c:	2300      	movs	r3, #0
 800f06e:	e082      	b.n	800f176 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	795b      	ldrb	r3, [r3, #5]
 800f074:	2be0      	cmp	r3, #224	; 0xe0
 800f076:	d16c      	bne.n	800f152 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	799b      	ldrb	r3, [r3, #6]
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d16a      	bne.n	800f156 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f086:	2b00      	cmp	r3, #0
 800f088:	d004      	beq.n	800f094 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	79db      	ldrb	r3, [r3, #7]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d104      	bne.n	800f09c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f092:	e065      	b.n	800f160 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	79db      	ldrb	r3, [r3, #7]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d15e      	bne.n	800f15a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	789a      	ldrb	r2, [r3, #2]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	78da      	ldrb	r2, [r3, #3]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	79da      	ldrb	r2, [r3, #7]
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f0c2:	e04d      	b.n	800f160 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	3310      	adds	r3, #16
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	68b9      	ldr	r1, [r7, #8]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f003 f961 	bl	8012394 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	f083 0301 	eor.w	r3, r3, #1
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d001      	beq.n	800f0e2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	e049      	b.n	800f176 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d038      	beq.n	800f15e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d034      	beq.n	800f15e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	6858      	ldr	r0, [r3, #4]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	681c      	ldr	r4, [r3, #0]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f118:	68fa      	ldr	r2, [r7, #12]
 800f11a:	3220      	adds	r2, #32
 800f11c:	9201      	str	r2, [sp, #4]
 800f11e:	9300      	str	r3, [sp, #0]
 800f120:	4633      	mov	r3, r6
 800f122:	462a      	mov	r2, r5
 800f124:	47a0      	blx	r4
                                        break;
 800f126:	e01a      	b.n	800f15e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f103 0018 	add.w	r0, r3, #24
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f134:	b29b      	uxth	r3, r3
 800f136:	3b02      	subs	r3, #2
 800f138:	b29b      	uxth	r3, r3
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	68b9      	ldr	r1, [r7, #8]
 800f13e:	f7fd f9ac 	bl	800c49a <_ZN11ByteSkipper4SkipEPPhPtt>
 800f142:	4603      	mov	r3, r0
 800f144:	f083 0301 	eor.w	r3, r3, #1
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d008      	beq.n	800f160 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f14e:	2300      	movs	r3, #0
 800f150:	e011      	b.n	800f176 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f152:	bf00      	nop
 800f154:	e004      	b.n	800f160 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f156:	bf00      	nop
 800f158:	e002      	b.n	800f160 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f15a:	bf00      	nop
 800f15c:	e000      	b.n	800f160 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f15e:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f103 0220 	add.w	r2, r3, #32
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2200      	movs	r2, #0
 800f170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800f174:	2301      	movs	r3, #1
}
 800f176:	4618      	mov	r0, r3
 800f178:	371c      	adds	r7, #28
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f17e:	bf00      	nop

0800f180 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800f180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f182:	b089      	sub	sp, #36	; 0x24
 800f184:	af02      	add	r7, sp, #8
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	3320      	adds	r3, #32
 800f190:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	3320      	adds	r3, #32
 800f196:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f19e:	2b04      	cmp	r3, #4
 800f1a0:	f200 815e 	bhi.w	800f460 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800f1a4:	a201      	add	r2, pc, #4	; (adr r2, 800f1ac <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800f1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1aa:	bf00      	nop
 800f1ac:	0800f1c1 	.word	0x0800f1c1
 800f1b0:	0800f1e1 	.word	0x0800f1e1
 800f1b4:	0800f223 	.word	0x0800f223
 800f1b8:	0800f237 	.word	0x0800f237
 800f1bc:	0800f2fb 	.word	0x0800f2fb
                        theBuffer.valueSize = 2;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2202      	movs	r2, #2
 800f1c4:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f103 0210 	add.w	r2, r3, #16
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	3308      	adds	r3, #8
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	4610      	mov	r0, r2
 800f1d4:	f7fd f922 	bl	800c41c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	3310      	adds	r3, #16
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	68b9      	ldr	r1, [r7, #8]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f003 f8d3 	bl	8012394 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	f083 0301 	eor.w	r3, r3, #1
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d001      	beq.n	800f1fe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	e131      	b.n	800f462 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f204:	781a      	ldrb	r2, [r3, #0]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800f212:	785a      	ldrb	r2, [r3, #1]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2202      	movs	r2, #2
 800f21e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	3320      	adds	r3, #32
 800f226:	1c9a      	adds	r2, r3, #2
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2203      	movs	r2, #3
 800f232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f23c:	3b02      	subs	r3, #2
 800f23e:	2b1f      	cmp	r3, #31
 800f240:	d847      	bhi.n	800f2d2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800f242:	a201      	add	r2, pc, #4	; (adr r2, 800f248 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800f244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f248:	0800f2d3 	.word	0x0800f2d3
 800f24c:	0800f2d3 	.word	0x0800f2d3
 800f250:	0800f2c9 	.word	0x0800f2c9
 800f254:	0800f2d3 	.word	0x0800f2d3
 800f258:	0800f2d3 	.word	0x0800f2d3
 800f25c:	0800f2d3 	.word	0x0800f2d3
 800f260:	0800f2d3 	.word	0x0800f2d3
 800f264:	0800f2d3 	.word	0x0800f2d3
 800f268:	0800f2d3 	.word	0x0800f2d3
 800f26c:	0800f2d3 	.word	0x0800f2d3
 800f270:	0800f2d3 	.word	0x0800f2d3
 800f274:	0800f2d3 	.word	0x0800f2d3
 800f278:	0800f2d3 	.word	0x0800f2d3
 800f27c:	0800f2d3 	.word	0x0800f2d3
 800f280:	0800f2d3 	.word	0x0800f2d3
 800f284:	0800f2d3 	.word	0x0800f2d3
 800f288:	0800f2d3 	.word	0x0800f2d3
 800f28c:	0800f2d3 	.word	0x0800f2d3
 800f290:	0800f2d3 	.word	0x0800f2d3
 800f294:	0800f2d3 	.word	0x0800f2d3
 800f298:	0800f2d3 	.word	0x0800f2d3
 800f29c:	0800f2d3 	.word	0x0800f2d3
 800f2a0:	0800f2d3 	.word	0x0800f2d3
 800f2a4:	0800f2d3 	.word	0x0800f2d3
 800f2a8:	0800f2d3 	.word	0x0800f2d3
 800f2ac:	0800f2d3 	.word	0x0800f2d3
 800f2b0:	0800f2d3 	.word	0x0800f2d3
 800f2b4:	0800f2d3 	.word	0x0800f2d3
 800f2b8:	0800f2d3 	.word	0x0800f2d3
 800f2bc:	0800f2d3 	.word	0x0800f2d3
 800f2c0:	0800f2d3 	.word	0x0800f2d3
 800f2c4:	0800f2d3 	.word	0x0800f2d3
                                        isGoodInterface = false;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800f2d0:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f2d8:	3b02      	subs	r3, #2
 800f2da:	b2da      	uxtb	r2, r3
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f103 0210 	add.w	r2, r3, #16
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	3308      	adds	r3, #8
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	4610      	mov	r0, r2
 800f2ee:	f7fd f895 	bl	800c41c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2204      	movs	r2, #4
 800f2f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f300:	2b05      	cmp	r3, #5
 800f302:	d055      	beq.n	800f3b0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800f304:	2b05      	cmp	r3, #5
 800f306:	f300 8085 	bgt.w	800f414 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800f30a:	2b02      	cmp	r3, #2
 800f30c:	d002      	beq.n	800f314 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800f30e:	2b04      	cmp	r3, #4
 800f310:	d015      	beq.n	800f33e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800f312:	e07f      	b.n	800f414 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	3310      	adds	r3, #16
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	68b9      	ldr	r1, [r7, #8]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f003 f839 	bl	8012394 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f322:	4603      	mov	r3, r0
 800f324:	f083 0301 	eor.w	r3, r3, #1
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d001      	beq.n	800f332 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800f32e:	2300      	movs	r3, #0
 800f330:	e097      	b.n	800f462 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	795a      	ldrb	r2, [r3, #5]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800f33c:	e086      	b.n	800f44c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	3310      	adds	r3, #16
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	68b9      	ldr	r1, [r7, #8]
 800f346:	4618      	mov	r0, r3
 800f348:	f003 f824 	bl	8012394 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f34c:	4603      	mov	r3, r0
 800f34e:	f083 0301 	eor.w	r3, r3, #1
 800f352:	b2db      	uxtb	r3, r3
 800f354:	2b00      	cmp	r3, #0
 800f356:	d001      	beq.n	800f35c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800f358:	2300      	movs	r3, #0
 800f35a:	e082      	b.n	800f462 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	795b      	ldrb	r3, [r3, #5]
 800f360:	2bff      	cmp	r3, #255	; 0xff
 800f362:	d16c      	bne.n	800f43e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	799b      	ldrb	r3, [r3, #6]
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d16a      	bne.n	800f442 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f372:	2b00      	cmp	r3, #0
 800f374:	d004      	beq.n	800f380 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	79db      	ldrb	r3, [r3, #7]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d104      	bne.n	800f388 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800f37e:	e065      	b.n	800f44c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	79db      	ldrb	r3, [r3, #7]
 800f384:	2b01      	cmp	r3, #1
 800f386:	d15e      	bne.n	800f446 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	789a      	ldrb	r2, [r3, #2]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	78da      	ldrb	r2, [r3, #3]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	79da      	ldrb	r2, [r3, #7]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800f3ae:	e04d      	b.n	800f44c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	3310      	adds	r3, #16
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	68b9      	ldr	r1, [r7, #8]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f002 ffeb 	bl	8012394 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	f083 0301 	eor.w	r3, r3, #1
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	e049      	b.n	800f462 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d038      	beq.n	800f44a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d034      	beq.n	800f44a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6858      	ldr	r0, [r3, #4]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	681c      	ldr	r4, [r3, #0]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f404:	68fa      	ldr	r2, [r7, #12]
 800f406:	3220      	adds	r2, #32
 800f408:	9201      	str	r2, [sp, #4]
 800f40a:	9300      	str	r3, [sp, #0]
 800f40c:	4633      	mov	r3, r6
 800f40e:	462a      	mov	r2, r5
 800f410:	47a0      	blx	r4
                                        break;
 800f412:	e01a      	b.n	800f44a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f103 0018 	add.w	r0, r3, #24
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f420:	b29b      	uxth	r3, r3
 800f422:	3b02      	subs	r3, #2
 800f424:	b29b      	uxth	r3, r3
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	68b9      	ldr	r1, [r7, #8]
 800f42a:	f7fd f836 	bl	800c49a <_ZN11ByteSkipper4SkipEPPhPtt>
 800f42e:	4603      	mov	r3, r0
 800f430:	f083 0301 	eor.w	r3, r3, #1
 800f434:	b2db      	uxtb	r3, r3
 800f436:	2b00      	cmp	r3, #0
 800f438:	d008      	beq.n	800f44c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800f43a:	2300      	movs	r3, #0
 800f43c:	e011      	b.n	800f462 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800f43e:	bf00      	nop
 800f440:	e004      	b.n	800f44c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800f442:	bf00      	nop
 800f444:	e002      	b.n	800f44c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800f446:	bf00      	nop
 800f448:	e000      	b.n	800f44c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800f44a:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f103 0220 	add.w	r2, r3, #32
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2200      	movs	r2, #0
 800f45c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800f460:	2301      	movs	r3, #1
}
 800f462:	4618      	mov	r0, r3
 800f464:	371c      	adds	r7, #28
 800f466:	46bd      	mov	sp, r7
 800f468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f46a:	bf00      	nop

0800f46c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800f46c:	b480      	push	{r7}
 800f46e:	b085      	sub	sp, #20
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f476:	2300      	movs	r3, #0
 800f478:	73fb      	strb	r3, [r7, #15]
 800f47a:	7bfb      	ldrb	r3, [r7, #15]
 800f47c:	2b03      	cmp	r3, #3
 800f47e:	d815      	bhi.n	800f4ac <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800f480:	7bfb      	ldrb	r3, [r7, #15]
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	3318      	adds	r3, #24
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	4413      	add	r3, r2
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d109      	bne.n	800f4a4 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800f490:	7bfb      	ldrb	r3, [r7, #15]
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	3318      	adds	r3, #24
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	4413      	add	r3, r2
 800f49a:	683a      	ldr	r2, [r7, #0]
 800f49c:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800f49e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4a2:	e005      	b.n	800f4b0 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f4a4:	7bfb      	ldrb	r3, [r7, #15]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	73fb      	strb	r3, [r7, #15]
 800f4aa:	e7e6      	b.n	800f47a <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800f4ac:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3714      	adds	r7, #20
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ba:	4770      	bx	lr

0800f4bc <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	6039      	str	r1, [r7, #0]
 800f4c6:	4a0a      	ldr	r2, [pc, #40]	; (800f4f0 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	683a      	ldr	r2, [r7, #0]
 800f4d0:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d005      	beq.n	800f4e6 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	689b      	ldr	r3, [r3, #8]
 800f4de:	6879      	ldr	r1, [r7, #4]
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7ff ffc3 	bl	800f46c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	08012914 	.word	0x08012914

0800f4f4 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800f4f4:	b480      	push	{r7}
 800f4f6:	b085      	sub	sp, #20
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	4613      	mov	r3, r2
 800f500:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	461a      	mov	r2, r3
 800f508:	88fb      	ldrh	r3, [r7, #6]
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d10b      	bne.n	800f528 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	3301      	adds	r3, #1
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	461a      	mov	r2, r3
 800f518:	88fb      	ldrh	r3, [r7, #6]
 800f51a:	121b      	asrs	r3, r3, #8
 800f51c:	f043 0320 	orr.w	r3, r3, #32
 800f520:	429a      	cmp	r2, r3
 800f522:	d101      	bne.n	800f528 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800f524:	2301      	movs	r3, #1
 800f526:	e000      	b.n	800f52a <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800f528:	2300      	movs	r3, #0
        }
 800f52a:	4618      	mov	r0, r3
 800f52c:	3714      	adds	r7, #20
 800f52e:	46bd      	mov	sp, r7
 800f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f534:	4770      	bx	lr

0800f536 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800f536:	b480      	push	{r7}
 800f538:	b085      	sub	sp, #20
 800f53a:	af00      	add	r7, sp, #0
 800f53c:	60f8      	str	r0, [r7, #12]
 800f53e:	460b      	mov	r3, r1
 800f540:	607a      	str	r2, [r7, #4]
 800f542:	72fb      	strb	r3, [r7, #11]
                return;
 800f544:	bf00      	nop
        };
 800f546:	3714      	adds	r7, #20
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800f550:	b480      	push	{r7}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
                return;
 800f558:	bf00      	nop
        };
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
                return;
 800f56c:	bf00      	nop
        }
 800f56e:	370c      	adds	r7, #12
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr

0800f578 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800f578:	b580      	push	{r7, lr}
 800f57a:	b086      	sub	sp, #24
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	603b      	str	r3, [r7, #0]
 800f584:	4613      	mov	r3, r2
 800f586:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	68b9      	ldr	r1, [r7, #8]
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7ff ff95 	bl	800f4bc <_ZN16BluetoothServiceC1EP3BTD>
 800f592:	4a1f      	ldr	r2, [pc, #124]	; (800f610 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	601a      	str	r2, [r3, #0]
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2200      	movs	r2, #0
 800f59c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	75fb      	strb	r3, [r7, #23]
 800f5a4:	7dfb      	ldrb	r3, [r7, #23]
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d809      	bhi.n	800f5be <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800f5aa:	7dfa      	ldrb	r2, [r7, #23]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	3208      	adds	r2, #8
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800f5b6:	7dfb      	ldrb	r3, [r7, #23]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	75fb      	strb	r3, [r7, #23]
 800f5bc:	e7f2      	b.n	800f5a4 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	79fa      	ldrb	r2, [r7, #7]
 800f5c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	689b      	ldr	r3, [r3, #8]
 800f5cc:	683a      	ldr	r2, [r7, #0]
 800f5ce:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2250      	movs	r2, #80	; 0x50
 800f5d4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2270      	movs	r2, #112	; 0x70
 800f5e4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2271      	movs	r2, #113	; 0x71
 800f5f4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800f600:	68f8      	ldr	r0, [r7, #12]
 800f602:	f000 f807 	bl	800f614 <_ZN5BTHID5ResetEv>
}
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	4618      	mov	r0, r3
 800f60a:	3718      	adds	r7, #24
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	080128e8 	.word	0x080128e8

0800f614 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
        connected = false;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2200      	movs	r2, #0
 800f626:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2200      	movs	r2, #0
 800f62e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2200      	movs	r2, #0
 800f636:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	220a      	movs	r2, #10
 800f63c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2200      	movs	r2, #0
 800f642:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	3320      	adds	r3, #32
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	4798      	blx	r3
}
 800f652:	bf00      	nop
 800f654:	3708      	adds	r7, #8
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}

0800f65a <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800f65a:	b590      	push	{r4, r7, lr}
 800f65c:	b085      	sub	sp, #20
 800f65e:	af02      	add	r7, sp, #8
 800f660:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d014      	beq.n	800f696 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6898      	ldr	r0, [r3, #8]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	8999      	ldrh	r1, [r3, #12]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	7d1b      	ldrb	r3, [r3, #20]
 800f678:	3301      	adds	r3, #1
 800f67a:	b2da      	uxtb	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	751a      	strb	r2, [r3, #20]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	7d1a      	ldrb	r2, [r3, #20]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f103 041b 	add.w	r4, r3, #27
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	336f      	adds	r3, #111	; 0x6f
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	4623      	mov	r3, r4
 800f692:	f7ff f9c5 	bl	800ea20 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6898      	ldr	r0, [r3, #8]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	8999      	ldrh	r1, [r3, #12]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	7d1b      	ldrb	r3, [r3, #20]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	b2da      	uxtb	r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	751a      	strb	r2, [r3, #20]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	7d1a      	ldrb	r2, [r3, #20]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f103 0418 	add.w	r4, r3, #24
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	336d      	adds	r3, #109	; 0x6d
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	4623      	mov	r3, r4
 800f6bc:	f7ff f9b0 	bl	800ea20 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	3308      	adds	r3, #8
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	220e      	movs	r2, #14
 800f6d0:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2209      	movs	r2, #9
 800f6d6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800f6da:	bf00      	nop
 800f6dc:	370c      	adds	r7, #12
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd90      	pop	{r4, r7, pc}

0800f6e2 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800f6e2:	b590      	push	{r4, r7, lr}
 800f6e4:	b087      	sub	sp, #28
 800f6e6:	af02      	add	r7, sp, #8
 800f6e8:	6078      	str	r0, [r7, #4]
 800f6ea:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	7d5b      	ldrb	r3, [r3, #21]
 800f6f0:	f083 0301 	eor.w	r3, r3, #1
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d023      	beq.n	800f742 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	3308      	adds	r3, #8
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	2b02      	cmp	r3, #2
 800f702:	d11e      	bne.n	800f742 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	330c      	adds	r3, #12
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	461a      	mov	r2, r3
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	330d      	adds	r3, #13
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	021b      	lsls	r3, r3, #8
 800f714:	4313      	orrs	r3, r2
 800f716:	2b01      	cmp	r3, #1
 800f718:	d113      	bne.n	800f742 <_ZN5BTHID7ACLDataEPh+0x60>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	689b      	ldr	r3, [r3, #8]
 800f71e:	7a9b      	ldrb	r3, [r3, #10]
 800f720:	f083 0301 	eor.w	r3, r3, #1
 800f724:	b2db      	uxtb	r3, r3
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00b      	beq.n	800f742 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	2201      	movs	r2, #1
 800f730:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	8b5a      	ldrh	r2, [r3, #26]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	220a      	movs	r2, #10
 800f740:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	7a5b      	ldrb	r3, [r3, #9]
 800f748:	f083 0301 	eor.w	r3, r3, #1
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d03a      	beq.n	800f7c8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	689b      	ldr	r3, [r3, #8]
 800f756:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d034      	beq.n	800f7c8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	7d5b      	ldrb	r3, [r3, #21]
 800f762:	f083 0301 	eor.w	r3, r3, #1
 800f766:	b2db      	uxtb	r3, r3
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d02d      	beq.n	800f7c8 <_ZN5BTHID7ACLDataEPh+0xe6>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f772:	f083 0301 	eor.w	r3, r3, #1
 800f776:	b2db      	uxtb	r3, r3
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d025      	beq.n	800f7c8 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	3308      	adds	r3, #8
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	2b02      	cmp	r3, #2
 800f784:	d120      	bne.n	800f7c8 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	330c      	adds	r3, #12
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	461a      	mov	r2, r3
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	330d      	adds	r3, #13
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	021b      	lsls	r3, r3, #8
 800f796:	4313      	orrs	r3, r2
 800f798:	2b11      	cmp	r3, #17
 800f79a:	d115      	bne.n	800f7c8 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	689b      	ldr	r3, [r3, #8]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	689b      	ldr	r3, [r3, #8]
 800f7ba:	8b5a      	ldrh	r2, [r3, #26]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	899b      	ldrh	r3, [r3, #12]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	6839      	ldr	r1, [r7, #0]
 800f7d2:	f7ff fe8f 	bl	800f4f4 <_ZN16BluetoothService14checkHciHandleEPht>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f000 83d9 	beq.w	800ff90 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	3306      	adds	r3, #6
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	3307      	adds	r3, #7
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	021b      	lsls	r3, r3, #8
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	f040 829b 	bne.w	800fd2c <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	3308      	adds	r3, #8
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	f000 83c1 	beq.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	3308      	adds	r3, #8
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	2b03      	cmp	r3, #3
 800f80a:	f040 808d 	bne.w	800f928 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	3310      	adds	r3, #16
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	461a      	mov	r2, r3
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	3311      	adds	r3, #17
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	021b      	lsls	r3, r3, #8
 800f81e:	4313      	orrs	r3, r2
 800f820:	2b00      	cmp	r3, #0
 800f822:	f040 83af 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	3312      	adds	r3, #18
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	461a      	mov	r2, r3
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	3313      	adds	r3, #19
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	021b      	lsls	r3, r3, #8
 800f836:	4313      	orrs	r3, r2
 800f838:	2b00      	cmp	r3, #0
 800f83a:	f040 83a3 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	330e      	adds	r3, #14
 800f842:	781a      	ldrb	r2, [r3, #0]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d124      	bne.n	800f898 <_ZN5BTHID7ACLDataEPh+0x1b6>
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	330f      	adds	r3, #15
 800f852:	781a      	ldrb	r2, [r3, #0]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d11c      	bne.n	800f898 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	7a5a      	ldrb	r2, [r3, #9]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	7b1a      	ldrb	r2, [r3, #12]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	7b5a      	ldrb	r2, [r3, #13]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	7d1b      	ldrb	r3, [r3, #20]
 800f87a:	3301      	adds	r3, #1
 800f87c:	b2da      	uxtb	r2, r3
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6898      	ldr	r0, [r3, #8]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	8999      	ldrh	r1, [r3, #12]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	7d1a      	ldrb	r2, [r3, #20]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	331b      	adds	r3, #27
 800f892:	f7ff f827 	bl	800e8e4 <_ZN3BTD20l2cap_config_requestEthPh>
 800f896:	e375      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	330e      	adds	r3, #14
 800f89c:	781a      	ldrb	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d11a      	bne.n	800f8de <_ZN5BTHID7ACLDataEPh+0x1fc>
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	330f      	adds	r3, #15
 800f8ac:	781a      	ldrb	r2, [r3, #0]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d112      	bne.n	800f8de <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	7a5a      	ldrb	r2, [r3, #9]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	7b1a      	ldrb	r2, [r3, #12]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	7b5a      	ldrb	r2, [r3, #13]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	691b      	ldr	r3, [r3, #16]
 800f8d4:	f043 0204 	orr.w	r2, r3, #4
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	611a      	str	r2, [r3, #16]
 800f8dc:	e352      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	330e      	adds	r3, #14
 800f8e2:	781a      	ldrb	r2, [r3, #0]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	f040 834a 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	330f      	adds	r3, #15
 800f8f4:	781a      	ldrb	r2, [r3, #0]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	f040 8341 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	7a5a      	ldrb	r2, [r3, #9]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	7b1a      	ldrb	r2, [r3, #12]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	7b5a      	ldrb	r2, [r3, #13]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	691b      	ldr	r3, [r3, #16]
 800f91e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	611a      	str	r2, [r3, #16]
 800f926:	e32d      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	3308      	adds	r3, #8
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	2b02      	cmp	r3, #2
 800f930:	d15a      	bne.n	800f9e8 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	330c      	adds	r3, #12
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	461a      	mov	r2, r3
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	330d      	adds	r3, #13
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	021b      	lsls	r3, r3, #8
 800f942:	4313      	orrs	r3, r2
 800f944:	2b01      	cmp	r3, #1
 800f946:	d112      	bne.n	800f96e <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	7a5a      	ldrb	r2, [r3, #9]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	7b9a      	ldrb	r2, [r3, #14]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	7bda      	ldrb	r2, [r3, #15]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	691b      	ldr	r3, [r3, #16]
 800f964:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	611a      	str	r2, [r3, #16]
 800f96c:	e30a      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	330c      	adds	r3, #12
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	461a      	mov	r2, r3
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	330d      	adds	r3, #13
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	021b      	lsls	r3, r3, #8
 800f97e:	4313      	orrs	r3, r2
 800f980:	2b11      	cmp	r3, #17
 800f982:	d112      	bne.n	800f9aa <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	7a5a      	ldrb	r2, [r3, #9]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	7b9a      	ldrb	r2, [r3, #14]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	7bda      	ldrb	r2, [r3, #15]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	691b      	ldr	r3, [r3, #16]
 800f9a0:	f043 0201 	orr.w	r2, r3, #1
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	611a      	str	r2, [r3, #16]
 800f9a8:	e2ec      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	330c      	adds	r3, #12
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	330d      	adds	r3, #13
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	021b      	lsls	r3, r3, #8
 800f9ba:	4313      	orrs	r3, r2
 800f9bc:	2b13      	cmp	r3, #19
 800f9be:	f040 82e1 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	7a5a      	ldrb	r2, [r3, #9]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	7b9a      	ldrb	r2, [r3, #14]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	7bda      	ldrb	r2, [r3, #15]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	691b      	ldr	r3, [r3, #16]
 800f9de:	f043 0210 	orr.w	r2, r3, #16
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	611a      	str	r2, [r3, #16]
 800f9e6:	e2cd      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	3308      	adds	r3, #8
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	2b05      	cmp	r3, #5
 800f9f0:	d15e      	bne.n	800fab0 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	3310      	adds	r3, #16
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	3311      	adds	r3, #17
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	021b      	lsls	r3, r3, #8
 800fa02:	4313      	orrs	r3, r2
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	f040 82bd 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	330c      	adds	r3, #12
 800fa0e:	781a      	ldrb	r2, [r3, #0]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d112      	bne.n	800fa40 <_ZN5BTHID7ACLDataEPh+0x35e>
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	330d      	adds	r3, #13
 800fa1e:	781a      	ldrb	r2, [r3, #0]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d10a      	bne.n	800fa40 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	7a5a      	ldrb	r2, [r3, #9]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	691b      	ldr	r3, [r3, #16]
 800fa36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	611a      	str	r2, [r3, #16]
 800fa3e:	e2a1      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	330c      	adds	r3, #12
 800fa44:	781a      	ldrb	r2, [r3, #0]
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d112      	bne.n	800fa76 <_ZN5BTHID7ACLDataEPh+0x394>
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	330d      	adds	r3, #13
 800fa54:	781a      	ldrb	r2, [r3, #0]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d10a      	bne.n	800fa76 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	7a5a      	ldrb	r2, [r3, #9]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	691b      	ldr	r3, [r3, #16]
 800fa6c:	f043 0202 	orr.w	r2, r3, #2
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	611a      	str	r2, [r3, #16]
 800fa74:	e286      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	330c      	adds	r3, #12
 800fa7a:	781a      	ldrb	r2, [r3, #0]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fa82:	429a      	cmp	r2, r3
 800fa84:	f040 827e 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	330d      	adds	r3, #13
 800fa8c:	781a      	ldrb	r2, [r3, #0]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fa94:	429a      	cmp	r2, r3
 800fa96:	f040 8275 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	7a5a      	ldrb	r2, [r3, #9]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	691b      	ldr	r3, [r3, #16]
 800faa6:	f043 0220 	orr.w	r2, r3, #32
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	611a      	str	r2, [r3, #16]
 800faae:	e269      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	3308      	adds	r3, #8
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	2b04      	cmp	r3, #4
 800fab8:	d155      	bne.n	800fb66 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	330c      	adds	r3, #12
 800fabe:	781a      	ldrb	r2, [r3, #0]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d113      	bne.n	800faf2 <_ZN5BTHID7ACLDataEPh+0x410>
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	330d      	adds	r3, #13
 800face:	781a      	ldrb	r2, [r3, #0]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d10b      	bne.n	800faf2 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6898      	ldr	r0, [r3, #8]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	8999      	ldrh	r1, [r3, #12]
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	3309      	adds	r3, #9
 800fae6:	781a      	ldrb	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	331b      	adds	r3, #27
 800faec:	f7fe ff45 	bl	800e97a <_ZN3BTD21l2cap_config_responseEthPh>
 800faf0:	e248      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	330c      	adds	r3, #12
 800faf6:	781a      	ldrb	r2, [r3, #0]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d113      	bne.n	800fb2a <_ZN5BTHID7ACLDataEPh+0x448>
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	330d      	adds	r3, #13
 800fb06:	781a      	ldrb	r2, [r3, #0]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d10b      	bne.n	800fb2a <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6898      	ldr	r0, [r3, #8]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	8999      	ldrh	r1, [r3, #12]
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	3309      	adds	r3, #9
 800fb1e:	781a      	ldrb	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	3316      	adds	r3, #22
 800fb24:	f7fe ff29 	bl	800e97a <_ZN3BTD21l2cap_config_responseEthPh>
 800fb28:	e22c      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	330c      	adds	r3, #12
 800fb2e:	781a      	ldrb	r2, [r3, #0]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fb36:	429a      	cmp	r2, r3
 800fb38:	f040 8224 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	330d      	adds	r3, #13
 800fb40:	781a      	ldrb	r2, [r3, #0]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	f040 821b 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6898      	ldr	r0, [r3, #8]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	8999      	ldrh	r1, [r3, #12]
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	3309      	adds	r3, #9
 800fb5a:	781a      	ldrb	r2, [r3, #0]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	3318      	adds	r3, #24
 800fb60:	f7fe ff0b 	bl	800e97a <_ZN3BTD21l2cap_config_responseEthPh>
 800fb64:	e20e      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	3308      	adds	r3, #8
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	2b06      	cmp	r3, #6
 800fb6e:	d170      	bne.n	800fc52 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	330c      	adds	r3, #12
 800fb74:	781a      	ldrb	r2, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d112      	bne.n	800fba6 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	330d      	adds	r3, #13
 800fb84:	781a      	ldrb	r2, [r3, #0]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d10a      	bne.n	800fba6 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	7a5a      	ldrb	r2, [r3, #9]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	691b      	ldr	r3, [r3, #16]
 800fb9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	611a      	str	r2, [r3, #16]
 800fba4:	e1ee      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	330c      	adds	r3, #12
 800fbaa:	781a      	ldrb	r2, [r3, #0]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d121      	bne.n	800fbfa <_ZN5BTHID7ACLDataEPh+0x518>
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	330d      	adds	r3, #13
 800fbba:	781a      	ldrb	r2, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d119      	bne.n	800fbfa <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	7a5a      	ldrb	r2, [r3, #9]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6898      	ldr	r0, [r3, #8]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	8999      	ldrh	r1, [r3, #12]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	7d1a      	ldrb	r2, [r3, #20]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	3316      	adds	r3, #22
 800fbe4:	9300      	str	r3, [sp, #0]
 800fbe6:	4623      	mov	r3, r4
 800fbe8:	f7fe ff57 	bl	800ea9a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	3308      	adds	r3, #8
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	4798      	blx	r3
 800fbf8:	e1c4      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	330c      	adds	r3, #12
 800fbfe:	781a      	ldrb	r2, [r3, #0]
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fc06:	429a      	cmp	r2, r3
 800fc08:	f040 81bc 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	330d      	adds	r3, #13
 800fc10:	781a      	ldrb	r2, [r3, #0]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	f040 81b3 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	7a5a      	ldrb	r2, [r3, #9]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6898      	ldr	r0, [r3, #8]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	8999      	ldrh	r1, [r3, #12]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	7d1a      	ldrb	r2, [r3, #20]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	3318      	adds	r3, #24
 800fc3c:	9300      	str	r3, [sp, #0]
 800fc3e:	4623      	mov	r3, r4
 800fc40:	f7fe ff2b 	bl	800ea9a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	3308      	adds	r3, #8
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	4798      	blx	r3
 800fc50:	e198      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	3308      	adds	r3, #8
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	2b07      	cmp	r3, #7
 800fc5a:	d14c      	bne.n	800fcf6 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	330c      	adds	r3, #12
 800fc60:	781a      	ldrb	r2, [r3, #0]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	7edb      	ldrb	r3, [r3, #27]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d111      	bne.n	800fc8e <_ZN5BTHID7ACLDataEPh+0x5ac>
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	330d      	adds	r3, #13
 800fc6e:	781a      	ldrb	r2, [r3, #0]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	7f1b      	ldrb	r3, [r3, #28]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d10a      	bne.n	800fc8e <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	7a5a      	ldrb	r2, [r3, #9]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	691b      	ldr	r3, [r3, #16]
 800fc84:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	611a      	str	r2, [r3, #16]
 800fc8c:	e17a      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	330c      	adds	r3, #12
 800fc92:	781a      	ldrb	r2, [r3, #0]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	7d9b      	ldrb	r3, [r3, #22]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d111      	bne.n	800fcc0 <_ZN5BTHID7ACLDataEPh+0x5de>
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	330d      	adds	r3, #13
 800fca0:	781a      	ldrb	r2, [r3, #0]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	7ddb      	ldrb	r3, [r3, #23]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d10a      	bne.n	800fcc0 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	7a5a      	ldrb	r2, [r3, #9]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	691b      	ldr	r3, [r3, #16]
 800fcb6:	f043 0208 	orr.w	r2, r3, #8
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	611a      	str	r2, [r3, #16]
 800fcbe:	e161      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	330c      	adds	r3, #12
 800fcc4:	781a      	ldrb	r2, [r3, #0]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	7e1b      	ldrb	r3, [r3, #24]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	f040 815a 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	330d      	adds	r3, #13
 800fcd4:	781a      	ldrb	r2, [r3, #0]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	7e5b      	ldrb	r3, [r3, #25]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	f040 8152 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	7a5a      	ldrb	r2, [r3, #9]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	691b      	ldr	r3, [r3, #16]
 800fcec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	611a      	str	r2, [r3, #16]
 800fcf4:	e146      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	3308      	adds	r3, #8
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	2b0a      	cmp	r3, #10
 800fcfe:	f040 8141 	bne.w	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	7a5a      	ldrb	r2, [r3, #9]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6898      	ldr	r0, [r3, #8]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	8999      	ldrh	r1, [r3, #12]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	7d1a      	ldrb	r2, [r3, #20]
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	330c      	adds	r3, #12
 800fd1a:	781c      	ldrb	r4, [r3, #0]
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	330d      	adds	r3, #13
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	4623      	mov	r3, r4
 800fd26:	f7fe fef5 	bl	800eb14 <_ZN3BTD26l2cap_information_responseEthhh>
 800fd2a:	e12b      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	3306      	adds	r3, #6
 800fd30:	781a      	ldrb	r2, [r3, #0]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	f040 8087 	bne.w	800fe4c <_ZN5BTHID7ACLDataEPh+0x76a>
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	3307      	adds	r3, #7
 800fd42:	781a      	ldrb	r2, [r3, #0]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d17e      	bne.n	800fe4c <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	3308      	adds	r3, #8
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	2b02      	cmp	r3, #2
 800fd56:	d131      	bne.n	800fdbc <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2203      	movs	r2, #3
 800fd5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	7a5a      	ldrb	r2, [r3, #9]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	7a9a      	ldrb	r2, [r3, #10]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2200      	movs	r2, #0
 800fd78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2205      	movs	r2, #5
 800fd80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2200      	movs	r2, #0
 800fd88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2200      	movs	r2, #0
 800fd98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	3328      	adds	r3, #40	; 0x28
 800fdb0:	220a      	movs	r2, #10
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 fb6d 	bl	8010494 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fdba:	e0e0      	b.n	800ff7e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	3308      	adds	r3, #8
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	2b04      	cmp	r3, #4
 800fdc4:	d131      	bne.n	800fe2a <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2205      	movs	r2, #5
 800fdca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	7a5a      	ldrb	r2, [r3, #9]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	7a9a      	ldrb	r2, [r3, #10]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2200      	movs	r2, #0
 800fde6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2205      	movs	r2, #5
 800fdee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2202      	movs	r2, #2
 800fdfe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2235      	movs	r2, #53	; 0x35
 800fe06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2200      	movs	r2, #0
 800fe16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	3328      	adds	r3, #40	; 0x28
 800fe1e:	220a      	movs	r2, #10
 800fe20:	4619      	mov	r1, r3
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 fb36 	bl	8010494 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fe28:	e0a9      	b.n	800ff7e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	3308      	adds	r3, #8
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	2b06      	cmp	r3, #6
 800fe32:	f040 80a4 	bne.w	800ff7e <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	3309      	adds	r3, #9
 800fe3a:	7819      	ldrb	r1, [r3, #0]
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	330a      	adds	r3, #10
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	461a      	mov	r2, r3
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 fb3f 	bl	80104c8 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800fe4a:	e098      	b.n	800ff7e <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	3306      	adds	r3, #6
 800fe50:	781a      	ldrb	r2, [r3, #0]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d162      	bne.n	800ff22 <_ZN5BTHID7ACLDataEPh+0x840>
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	3307      	adds	r3, #7
 800fe60:	781a      	ldrb	r2, [r3, #0]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d15a      	bne.n	800ff22 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	3308      	adds	r3, #8
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	2ba1      	cmp	r3, #161	; 0xa1
 800fe74:	f040 8085 	bne.w	800ff82 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800fe78:	f7f2 f808 	bl	8001e8c <HAL_GetTick>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	3305      	adds	r3, #5
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	021b      	lsls	r3, r3, #8
 800fe8a:	b21a      	sxth	r2, r3
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	3304      	adds	r3, #4
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	b21b      	sxth	r3, r3
 800fe94:	4313      	orrs	r3, r2
 800fe96:	b21b      	sxth	r3, r3
 800fe98:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	3314      	adds	r3, #20
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	89fa      	ldrh	r2, [r7, #14]
 800fea4:	b2d2      	uxtb	r2, r2
 800fea6:	3a01      	subs	r2, #1
 800fea8:	b2d1      	uxtb	r1, r2
 800feaa:	683a      	ldr	r2, [r7, #0]
 800feac:	3209      	adds	r2, #9
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	3309      	adds	r3, #9
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d002      	beq.n	800fec2 <_ZN5BTHID7ACLDataEPh+0x7e0>
 800febc:	2b02      	cmp	r3, #2
 800febe:	d016      	beq.n	800feee <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800fec0:	e05f      	b.n	800ff82 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6a1b      	ldr	r3, [r3, #32]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d027      	beq.n	800ff1a <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6a18      	ldr	r0, [r3, #32]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6a1b      	ldr	r3, [r3, #32]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	681c      	ldr	r4, [r3, #0]
 800fed6:	89fb      	ldrh	r3, [r7, #14]
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	3b02      	subs	r3, #2
 800fedc:	b2da      	uxtb	r2, r3
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	330a      	adds	r3, #10
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	4613      	mov	r3, r2
 800fee6:	2200      	movs	r2, #0
 800fee8:	6879      	ldr	r1, [r7, #4]
 800feea:	47a0      	blx	r4
                                                break;
 800feec:	e015      	b.n	800ff1a <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d013      	beq.n	800ff1e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	681c      	ldr	r4, [r3, #0]
 800ff02:	89fb      	ldrh	r3, [r7, #14]
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	3b02      	subs	r3, #2
 800ff08:	b2da      	uxtb	r2, r3
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	330a      	adds	r3, #10
 800ff0e:	9300      	str	r3, [sp, #0]
 800ff10:	4613      	mov	r3, r2
 800ff12:	2200      	movs	r2, #0
 800ff14:	6879      	ldr	r1, [r7, #4]
 800ff16:	47a0      	blx	r4
                                                break;
 800ff18:	e001      	b.n	800ff1e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 800ff1a:	bf00      	nop
 800ff1c:	e031      	b.n	800ff82 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 800ff1e:	bf00      	nop
                        }
 800ff20:	e02f      	b.n	800ff82 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	3306      	adds	r3, #6
 800ff26:	781a      	ldrb	r2, [r3, #0]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d128      	bne.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	3307      	adds	r3, #7
 800ff36:	781a      	ldrb	r2, [r3, #0]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d120      	bne.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	3308      	adds	r3, #8
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	2ba3      	cmp	r3, #163	; 0xa3
 800ff4a:	d11b      	bne.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	3305      	adds	r3, #5
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	021b      	lsls	r3, r3, #8
 800ff54:	b21a      	sxth	r2, r3
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	3304      	adds	r3, #4
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	b21b      	sxth	r3, r3
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	b21b      	sxth	r3, r3
 800ff62:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	3318      	adds	r3, #24
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	89ba      	ldrh	r2, [r7, #12]
 800ff6e:	b2d2      	uxtb	r2, r2
 800ff70:	3a01      	subs	r2, #1
 800ff72:	b2d1      	uxtb	r1, r2
 800ff74:	683a      	ldr	r2, [r7, #0]
 800ff76:	3209      	adds	r2, #9
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	4798      	blx	r3
 800ff7c:	e002      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800ff7e:	bf00      	nop
 800ff80:	e000      	b.n	800ff84 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 800ff82:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f000 f807 	bl	800ff98 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f000 f8b4 	bl	80100f8 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800ff90:	bf00      	nop
 800ff92:	3714      	adds	r7, #20
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd90      	pop	{r4, r7, pc}

0800ff98 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800ff98:	b5b0      	push	{r4, r5, r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af02      	add	r7, sp, #8
 800ff9e:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	7e9b      	ldrb	r3, [r3, #26]
 800ffa4:	2b0e      	cmp	r3, #14
 800ffa6:	f000 8084 	beq.w	80100b2 <_ZN5BTHID8SDP_taskEv+0x11a>
 800ffaa:	2b0e      	cmp	r3, #14
 800ffac:	f300 809f 	bgt.w	80100ee <_ZN5BTHID8SDP_taskEv+0x156>
 800ffb0:	2b0a      	cmp	r3, #10
 800ffb2:	d002      	beq.n	800ffba <_ZN5BTHID8SDP_taskEv+0x22>
 800ffb4:	2b0b      	cmp	r3, #11
 800ffb6:	d068      	beq.n	801008a <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800ffb8:	e099      	b.n	80100ee <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	691b      	ldr	r3, [r3, #16]
 800ffbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d041      	beq.n	801004a <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	691b      	ldr	r3, [r3, #16]
 800ffca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6898      	ldr	r0, [r3, #8]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	8999      	ldrh	r1, [r3, #12]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	7d1a      	ldrb	r2, [r3, #20]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	331b      	adds	r3, #27
 800ffe8:	2501      	movs	r5, #1
 800ffea:	9501      	str	r5, [sp, #4]
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	4623      	mov	r3, r4
 800fff0:	f7fe fc2b 	bl	800e84a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800fff4:	2001      	movs	r0, #1
 800fff6:	f7f1 ff55 	bl	8001ea4 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6898      	ldr	r0, [r3, #8]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	8999      	ldrh	r1, [r3, #12]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	7d1a      	ldrb	r2, [r3, #20]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	331b      	adds	r3, #27
 8010010:	2500      	movs	r5, #0
 8010012:	9501      	str	r5, [sp, #4]
 8010014:	9300      	str	r3, [sp, #0]
 8010016:	4623      	mov	r3, r4
 8010018:	f7fe fc17 	bl	800e84a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	7d1b      	ldrb	r3, [r3, #20]
 8010020:	3301      	adds	r3, #1
 8010022:	b2da      	uxtb	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8010028:	2001      	movs	r0, #1
 801002a:	f7f1 ff3b 	bl	8001ea4 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6898      	ldr	r0, [r3, #8]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	8999      	ldrh	r1, [r3, #12]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	7d1a      	ldrb	r2, [r3, #20]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	331b      	adds	r3, #27
 801003e:	f7fe fc51 	bl	800e8e4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	220b      	movs	r2, #11
 8010046:	769a      	strb	r2, [r3, #26]
                        break;
 8010048:	e04c      	b.n	80100e4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	691b      	ldr	r3, [r3, #16]
 801004e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010052:	2b00      	cmp	r3, #0
 8010054:	d046      	beq.n	80100e4 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	691b      	ldr	r3, [r3, #16]
 801005a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6898      	ldr	r0, [r3, #8]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	8999      	ldrh	r1, [r3, #12]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	7d1a      	ldrb	r2, [r3, #20]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	331b      	adds	r3, #27
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	4623      	mov	r3, r4
 8010084:	f7fe fd09 	bl	800ea9a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8010088:	e02c      	b.n	80100e4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	691b      	ldr	r3, [r3, #16]
 801008e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010092:	2b00      	cmp	r3, #0
 8010094:	d028      	beq.n	80100e8 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	691b      	ldr	r3, [r3, #16]
 801009a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2201      	movs	r2, #1
 80100a6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	220a      	movs	r2, #10
 80100ae:	769a      	strb	r2, [r3, #26]
                        break;
 80100b0:	e01a      	b.n	80100e8 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	691b      	ldr	r3, [r3, #16]
 80100b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d016      	beq.n	80100ec <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	689a      	ldr	r2, [r3, #8]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	899b      	ldrh	r3, [r3, #12]
 80100c6:	4619      	mov	r1, r3
 80100c8:	4610      	mov	r0, r2
 80100ca:	f7fe fa92 	bl	800e5f2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100d4:	819a      	strh	r2, [r3, #12]
                                Reset();
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	3308      	adds	r3, #8
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	4798      	blx	r3
                        break;
 80100e2:	e003      	b.n	80100ec <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 80100e4:	bf00      	nop
 80100e6:	e002      	b.n	80100ee <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80100e8:	bf00      	nop
 80100ea:	e000      	b.n	80100ee <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80100ec:	bf00      	nop
}
 80100ee:	bf00      	nop
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080100f8 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 80100f8:	b5b0      	push	{r4, r5, r7, lr}
 80100fa:	b084      	sub	sp, #16
 80100fc:	af02      	add	r7, sp, #8
 80100fe:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8010106:	3b01      	subs	r3, #1
 8010108:	2b08      	cmp	r3, #8
 801010a:	f200 812c 	bhi.w	8010366 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 801010e:	a201      	add	r2, pc, #4	; (adr r2, 8010114 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 8010110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010114:	08010345 	.word	0x08010345
 8010118:	080101df 	.word	0x080101df
 801011c:	08010217 	.word	0x08010217
 8010120:	08010139 	.word	0x08010139
 8010124:	08010311 	.word	0x08010311
 8010128:	08010157 	.word	0x08010157
 801012c:	0801025f 	.word	0x0801025f
 8010130:	08010295 	.word	0x08010295
 8010134:	080102d1 	.word	0x080102d1
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	691b      	ldr	r3, [r3, #16]
 801013c:	f003 0302 	and.w	r3, r3, #2
 8010140:	2b00      	cmp	r3, #0
 8010142:	f000 8101 	beq.w	8010348 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f000 f9f9 	bl	801053e <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2206      	movs	r2, #6
 8010150:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010154:	e0f8      	b.n	8010348 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	691b      	ldr	r3, [r3, #16]
 801015a:	f003 0310 	and.w	r3, r3, #16
 801015e:	2b00      	cmp	r3, #0
 8010160:	f000 80f4 	beq.w	801034c <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6898      	ldr	r0, [r3, #8]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	8999      	ldrh	r1, [r3, #12]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	7d1a      	ldrb	r2, [r3, #20]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	3318      	adds	r3, #24
 801017a:	2501      	movs	r5, #1
 801017c:	9501      	str	r5, [sp, #4]
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	4623      	mov	r3, r4
 8010182:	f7fe fb62 	bl	800e84a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010186:	2001      	movs	r0, #1
 8010188:	f7f1 fe8c 	bl	8001ea4 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6898      	ldr	r0, [r3, #8]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	8999      	ldrh	r1, [r3, #12]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	7d1a      	ldrb	r2, [r3, #20]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	3318      	adds	r3, #24
 80101a2:	2500      	movs	r5, #0
 80101a4:	9501      	str	r5, [sp, #4]
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	4623      	mov	r3, r4
 80101aa:	f7fe fb4e 	bl	800e84a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	7d1b      	ldrb	r3, [r3, #20]
 80101b2:	3301      	adds	r3, #1
 80101b4:	b2da      	uxtb	r2, r3
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80101ba:	2001      	movs	r0, #1
 80101bc:	f7f1 fe72 	bl	8001ea4 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6898      	ldr	r0, [r3, #8]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	8999      	ldrh	r1, [r3, #12]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	7d1a      	ldrb	r2, [r3, #20]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	3318      	adds	r3, #24
 80101d0:	f7fe fb88 	bl	800e8e4 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2208      	movs	r2, #8
 80101d8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80101dc:	e0b6      	b.n	801034c <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	691b      	ldr	r3, [r3, #16]
 80101e2:	f003 0304 	and.w	r3, r3, #4
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	f000 80b2 	beq.w	8010350 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	7d1b      	ldrb	r3, [r3, #20]
 80101f0:	3301      	adds	r3, #1
 80101f2:	b2da      	uxtb	r2, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6898      	ldr	r0, [r3, #8]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	8999      	ldrh	r1, [r3, #12]
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	7d1a      	ldrb	r2, [r3, #20]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	3316      	adds	r3, #22
 8010208:	f7fe fb6c 	bl	800e8e4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2203      	movs	r2, #3
 8010210:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010214:	e09c      	b.n	8010350 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	f003 0302 	and.w	r3, r3, #2
 801021e:	2b00      	cmp	r3, #0
 8010220:	f000 8098 	beq.w	8010354 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 f98a 	bl	801053e <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 801022a:	2001      	movs	r0, #1
 801022c:	f7f1 fe3a 	bl	8001ea4 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	7d1b      	ldrb	r3, [r3, #20]
 8010234:	3301      	adds	r3, #1
 8010236:	b2da      	uxtb	r2, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6898      	ldr	r0, [r3, #8]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	8999      	ldrh	r1, [r3, #12]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	7d1a      	ldrb	r2, [r3, #20]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	336d      	adds	r3, #109	; 0x6d
 801024c:	2413      	movs	r4, #19
 801024e:	9400      	str	r4, [sp, #0]
 8010250:	f7fe fabd 	bl	800e7ce <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2207      	movs	r2, #7
 8010258:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801025c:	e07a      	b.n	8010354 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	691b      	ldr	r3, [r3, #16]
 8010262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010266:	2b00      	cmp	r3, #0
 8010268:	d076      	beq.n	8010358 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	7d1b      	ldrb	r3, [r3, #20]
 801026e:	3301      	adds	r3, #1
 8010270:	b2da      	uxtb	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6898      	ldr	r0, [r3, #8]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	8999      	ldrh	r1, [r3, #12]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	7d1a      	ldrb	r2, [r3, #20]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	3318      	adds	r3, #24
 8010286:	f7fe fb2d 	bl	800e8e4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2208      	movs	r2, #8
 801028e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010292:	e061      	b.n	8010358 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	691b      	ldr	r3, [r3, #16]
 8010298:	f003 0320 	and.w	r3, r3, #32
 801029c:	2b00      	cmp	r3, #0
 801029e:	d05d      	beq.n	801035c <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	689b      	ldr	r3, [r3, #8]
 80102a4:	2200      	movs	r2, #0
 80102a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	689b      	ldr	r3, [r3, #8]
 80102ae:	2200      	movs	r2, #0
 80102b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2201      	movs	r2, #1
 80102b8:	755a      	strb	r2, [r3, #21]
                                onInit();
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	3310      	adds	r3, #16
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2201      	movs	r2, #1
 80102ca:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80102ce:	e045      	b.n	801035c <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	691b      	ldr	r3, [r3, #16]
 80102d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d041      	beq.n	8010360 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	7d1b      	ldrb	r3, [r3, #20]
 80102e0:	3301      	adds	r3, #1
 80102e2:	b2da      	uxtb	r2, r3
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6898      	ldr	r0, [r3, #8]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	8999      	ldrh	r1, [r3, #12]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	7d1a      	ldrb	r2, [r3, #20]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f103 0416 	add.w	r4, r3, #22
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	336b      	adds	r3, #107	; 0x6b
 80102fe:	9300      	str	r3, [sp, #0]
 8010300:	4623      	mov	r3, r4
 8010302:	f7fe fb8d 	bl	800ea20 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2205      	movs	r2, #5
 801030a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801030e:	e027      	b.n	8010360 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	691b      	ldr	r3, [r3, #16]
 8010314:	f003 0308 	and.w	r3, r3, #8
 8010318:	2b00      	cmp	r3, #0
 801031a:	d023      	beq.n	8010364 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	689a      	ldr	r2, [r3, #8]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	899b      	ldrh	r3, [r3, #12]
 8010324:	4619      	mov	r1, r3
 8010326:	4610      	mov	r0, r2
 8010328:	f7fe f963 	bl	800e5f2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010332:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2200      	movs	r2, #0
 8010338:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8010342:	e00f      	b.n	8010364 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 8010344:	bf00      	nop
 8010346:	e00e      	b.n	8010366 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010348:	bf00      	nop
 801034a:	e00c      	b.n	8010366 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801034c:	bf00      	nop
 801034e:	e00a      	b.n	8010366 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010350:	bf00      	nop
 8010352:	e008      	b.n	8010366 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010354:	bf00      	nop
 8010356:	e006      	b.n	8010366 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010358:	bf00      	nop
 801035a:	e004      	b.n	8010366 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801035c:	bf00      	nop
 801035e:	e002      	b.n	8010366 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010360:	bf00      	nop
 8010362:	e000      	b.n	8010366 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8010364:	bf00      	nop
        }
}
 8010366:	bf00      	nop
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bdb0      	pop	{r4, r5, r7, pc}
 801036e:	bf00      	nop

08010370 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 8010370:	b5b0      	push	{r4, r5, r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af02      	add	r7, sp, #8
 8010376:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801037e:	2b00      	cmp	r3, #0
 8010380:	f040 8084 	bne.w	801048c <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801038c:	2b00      	cmp	r3, #0
 801038e:	d03a      	beq.n	8010406 <_ZN5BTHID3RunEv+0x96>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	689b      	ldr	r3, [r3, #8]
 8010394:	7a5b      	ldrb	r3, [r3, #9]
 8010396:	f083 0301 	eor.w	r3, r3, #1
 801039a:	b2db      	uxtb	r3, r3
 801039c:	2b00      	cmp	r3, #0
 801039e:	d032      	beq.n	8010406 <_ZN5BTHID3RunEv+0x96>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	7d5b      	ldrb	r3, [r3, #21]
 80103a4:	f083 0301 	eor.w	r3, r3, #1
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d02b      	beq.n	8010406 <_ZN5BTHID3RunEv+0x96>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80103b4:	f083 0301 	eor.w	r3, r3, #1
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d023      	beq.n	8010406 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	689b      	ldr	r3, [r3, #8]
 80103c2:	2201      	movs	r2, #1
 80103c4:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2201      	movs	r2, #1
 80103ca:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	689b      	ldr	r3, [r3, #8]
 80103d2:	8b5a      	ldrh	r2, [r3, #26]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2200      	movs	r2, #0
 80103dc:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2200      	movs	r2, #0
 80103e2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6898      	ldr	r0, [r3, #8]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	8999      	ldrh	r1, [r3, #12]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	7d1a      	ldrb	r2, [r3, #20]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	336b      	adds	r3, #107	; 0x6b
 80103f4:	2411      	movs	r4, #17
 80103f6:	9400      	str	r4, [sp, #0]
 80103f8:	f7fe f9e9 	bl	800e7ce <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2202      	movs	r2, #2
 8010400:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 8010404:	e041      	b.n	801048a <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	691b      	ldr	r3, [r3, #16]
 801040a:	f003 0301 	and.w	r3, r3, #1
 801040e:	2b00      	cmp	r3, #0
 8010410:	d03b      	beq.n	801048a <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6898      	ldr	r0, [r3, #8]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	8999      	ldrh	r1, [r3, #12]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	7d1a      	ldrb	r2, [r3, #20]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	3316      	adds	r3, #22
 8010428:	2501      	movs	r5, #1
 801042a:	9501      	str	r5, [sp, #4]
 801042c:	9300      	str	r3, [sp, #0]
 801042e:	4623      	mov	r3, r4
 8010430:	f7fe fa0b 	bl	800e84a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8010434:	2001      	movs	r0, #1
 8010436:	f7f1 fd35 	bl	8001ea4 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6898      	ldr	r0, [r3, #8]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	8999      	ldrh	r1, [r3, #12]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	7d1a      	ldrb	r2, [r3, #20]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	3316      	adds	r3, #22
 8010450:	2500      	movs	r5, #0
 8010452:	9501      	str	r5, [sp, #4]
 8010454:	9300      	str	r3, [sp, #0]
 8010456:	4623      	mov	r3, r4
 8010458:	f7fe f9f7 	bl	800e84a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	7d1b      	ldrb	r3, [r3, #20]
 8010460:	3301      	adds	r3, #1
 8010462:	b2da      	uxtb	r2, r3
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8010468:	2001      	movs	r0, #1
 801046a:	f7f1 fd1b 	bl	8001ea4 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6898      	ldr	r0, [r3, #8]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	8999      	ldrh	r1, [r3, #12]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	7d1a      	ldrb	r2, [r3, #20]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	3316      	adds	r3, #22
 801047e:	f7fe fa31 	bl	800e8e4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2204      	movs	r2, #4
 8010486:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 801048a:	bf00      	nop
        }
}
 801048c:	bf00      	nop
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bdb0      	pop	{r4, r5, r7, pc}

08010494 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 8010494:	b590      	push	{r4, r7, lr}
 8010496:	b087      	sub	sp, #28
 8010498:	af02      	add	r7, sp, #8
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	4613      	mov	r3, r2
 80104a0:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	6898      	ldr	r0, [r3, #8]
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	8999      	ldrh	r1, [r3, #12]
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	7edb      	ldrb	r3, [r3, #27]
 80104ae:	68fa      	ldr	r2, [r7, #12]
 80104b0:	7f12      	ldrb	r2, [r2, #28]
 80104b2:	79fc      	ldrb	r4, [r7, #7]
 80104b4:	9201      	str	r2, [sp, #4]
 80104b6:	9300      	str	r3, [sp, #0]
 80104b8:	4623      	mov	r3, r4
 80104ba:	68ba      	ldr	r2, [r7, #8]
 80104bc:	f7fe f8f8 	bl	800e6b0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80104c0:	bf00      	nop
 80104c2:	3714      	adds	r7, #20
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd90      	pop	{r4, r7, pc}

080104c8 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	460b      	mov	r3, r1
 80104d2:	70fb      	strb	r3, [r7, #3]
 80104d4:	4613      	mov	r3, r2
 80104d6:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2207      	movs	r2, #7
 80104dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	78fa      	ldrb	r2, [r7, #3]
 80104e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	78ba      	ldrb	r2, [r7, #2]
 80104ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2200      	movs	r2, #0
 80104f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2205      	movs	r2, #5
 80104fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2200      	movs	r2, #0
 8010504:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2202      	movs	r2, #2
 801050c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2235      	movs	r2, #53	; 0x35
 8010514:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2200      	movs	r2, #0
 8010524:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	3328      	adds	r3, #40	; 0x28
 801052c:	220a      	movs	r2, #10
 801052e:	4619      	mov	r1, r3
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f7ff ffaf 	bl	8010494 <_ZN5BTHID11SDP_CommandEPhh>
}
 8010536:	bf00      	nop
 8010538:	3708      	adds	r7, #8
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}

0801053e <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 801053e:	b590      	push	{r4, r7, lr}
 8010540:	b087      	sub	sp, #28
 8010542:	af02      	add	r7, sp, #8
 8010544:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801054c:	2b00      	cmp	r3, #0
 801054e:	d008      	beq.n	8010562 <_ZN5BTHID11setProtocolEv+0x24>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010556:	2b01      	cmp	r3, #1
 8010558:	d003      	beq.n	8010562 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2200      	movs	r2, #0
 801055e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010568:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801056c:	b2db      	uxtb	r3, r3
 801056e:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6898      	ldr	r0, [r3, #8]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	8999      	ldrh	r1, [r3, #12]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	7d9b      	ldrb	r3, [r3, #22]
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	7dd2      	ldrb	r2, [r2, #23]
 8010580:	f107 040f 	add.w	r4, r7, #15
 8010584:	9201      	str	r2, [sp, #4]
 8010586:	9300      	str	r3, [sp, #0]
 8010588:	2301      	movs	r3, #1
 801058a:	4622      	mov	r2, r4
 801058c:	f7fe f890 	bl	800e6b0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010590:	bf00      	nop
 8010592:	3714      	adds	r7, #20
 8010594:	46bd      	mov	sp, r7
 8010596:	bd90      	pop	{r4, r7, pc}

08010598 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 8010598:	b480      	push	{r7}
 801059a:	b083      	sub	sp, #12
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	460b      	mov	r3, r1
 80105a2:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 80105a4:	78fb      	ldrb	r3, [r7, #3]
 80105a6:	2b03      	cmp	r3, #3
 80105a8:	d86e      	bhi.n	8010688 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 80105aa:	a201      	add	r2, pc, #4	; (adr r2, 80105b0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 80105ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105b0:	080105c1 	.word	0x080105c1
 80105b4:	080105f3 	.word	0x080105f3
 80105b8:	08010625 	.word	0x08010625
 80105bc:	08010657 	.word	0x08010657
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	7a1b      	ldrb	r3, [r3, #8]
 80105c4:	f003 030f 	and.w	r3, r3, #15
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	2b07      	cmp	r3, #7
 80105cc:	d00d      	beq.n	80105ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	7a1b      	ldrb	r3, [r3, #8]
 80105d2:	f003 030f 	and.w	r3, r3, #15
 80105d6:	b2db      	uxtb	r3, r3
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d006      	beq.n	80105ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	7a1b      	ldrb	r3, [r3, #8]
 80105e0:	f003 030f 	and.w	r3, r3, #15
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d101      	bne.n	80105ee <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 80105ea:	2301      	movs	r3, #1
 80105ec:	e04d      	b.n	801068a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80105ee:	2300      	movs	r3, #0
 80105f0:	e04b      	b.n	801068a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	7a1b      	ldrb	r3, [r3, #8]
 80105f6:	f003 030f 	and.w	r3, r3, #15
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d00d      	beq.n	801061c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	7a1b      	ldrb	r3, [r3, #8]
 8010604:	f003 030f 	and.w	r3, r3, #15
 8010608:	b2db      	uxtb	r3, r3
 801060a:	2b02      	cmp	r3, #2
 801060c:	d006      	beq.n	801061c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	7a1b      	ldrb	r3, [r3, #8]
 8010612:	f003 030f 	and.w	r3, r3, #15
 8010616:	b2db      	uxtb	r3, r3
 8010618:	2b03      	cmp	r3, #3
 801061a:	d101      	bne.n	8010620 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 801061c:	2301      	movs	r3, #1
 801061e:	e034      	b.n	801068a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010620:	2300      	movs	r3, #0
 8010622:	e032      	b.n	801068a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	7a1b      	ldrb	r3, [r3, #8]
 8010628:	f003 030f 	and.w	r3, r3, #15
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b03      	cmp	r3, #3
 8010630:	d00d      	beq.n	801064e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	7a1b      	ldrb	r3, [r3, #8]
 8010636:	f003 030f 	and.w	r3, r3, #15
 801063a:	b2db      	uxtb	r3, r3
 801063c:	2b04      	cmp	r3, #4
 801063e:	d006      	beq.n	801064e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	7a1b      	ldrb	r3, [r3, #8]
 8010644:	f003 030f 	and.w	r3, r3, #15
 8010648:	b2db      	uxtb	r3, r3
 801064a:	2b05      	cmp	r3, #5
 801064c:	d101      	bne.n	8010652 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 801064e:	2301      	movs	r3, #1
 8010650:	e01b      	b.n	801068a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010652:	2300      	movs	r3, #0
 8010654:	e019      	b.n	801068a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	7a1b      	ldrb	r3, [r3, #8]
 801065a:	f003 030f 	and.w	r3, r3, #15
 801065e:	b2db      	uxtb	r3, r3
 8010660:	2b05      	cmp	r3, #5
 8010662:	d00d      	beq.n	8010680 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	7a1b      	ldrb	r3, [r3, #8]
 8010668:	f003 030f 	and.w	r3, r3, #15
 801066c:	b2db      	uxtb	r3, r3
 801066e:	2b06      	cmp	r3, #6
 8010670:	d006      	beq.n	8010680 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	7a1b      	ldrb	r3, [r3, #8]
 8010676:	f003 030f 	and.w	r3, r3, #15
 801067a:	b2db      	uxtb	r3, r3
 801067c:	2b07      	cmp	r3, #7
 801067e:	d101      	bne.n	8010684 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 8010680:	2301      	movs	r3, #1
 8010682:	e002      	b.n	801068a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8010684:	2300      	movs	r3, #0
 8010686:	e000      	b.n	801068a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8010688:	2300      	movs	r3, #0
        }
}
 801068a:	4618      	mov	r0, r3
 801068c:	370c      	adds	r7, #12
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr
 8010696:	bf00      	nop

08010698 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	460b      	mov	r3, r1
 80106a2:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 80106a4:	78fb      	ldrb	r3, [r7, #3]
 80106a6:	2b03      	cmp	r3, #3
 80106a8:	d806      	bhi.n	80106b8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 80106aa:	78fb      	ldrb	r3, [r7, #3]
 80106ac:	4619      	mov	r1, r3
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f7ff ff72 	bl	8010598 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80106b4:	4603      	mov	r3, r0
 80106b6:	e011      	b.n	80106dc <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	689b      	ldr	r3, [r3, #8]
 80106bc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80106c0:	4619      	mov	r1, r3
 80106c2:	78fb      	ldrb	r3, [r7, #3]
 80106c4:	4a07      	ldr	r2, [pc, #28]	; (80106e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 80106c6:	4413      	add	r3, r2
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	fa21 f303 	lsr.w	r3, r1, r3
 80106ce:	f003 0301 	and.w	r3, r3, #1
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	bf14      	ite	ne
 80106d6:	2301      	movne	r3, #1
 80106d8:	2300      	moveq	r3, #0
 80106da:	b2db      	uxtb	r3, r3
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	08012928 	.word	0x08012928

080106e8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 80106e8:	b480      	push	{r7}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	460b      	mov	r3, r1
 80106f2:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 80106f4:	78fb      	ldrb	r3, [r7, #3]
 80106f6:	4a1b      	ldr	r2, [pc, #108]	; (8010764 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 80106f8:	4413      	add	r3, r2
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	461a      	mov	r2, r3
 80106fe:	2301      	movs	r3, #1
 8010700:	4093      	lsls	r3, r2
 8010702:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801070a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801070e:	021b      	lsls	r3, r3, #8
 8010710:	4313      	orrs	r3, r2
 8010712:	461a      	mov	r2, r3
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	4013      	ands	r3, r2
 8010718:	2b00      	cmp	r3, #0
 801071a:	bf14      	ite	ne
 801071c:	2301      	movne	r3, #1
 801071e:	2300      	moveq	r3, #0
 8010720:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8010728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801072c:	021b      	lsls	r3, r3, #8
 801072e:	4313      	orrs	r3, r2
 8010730:	461a      	mov	r2, r3
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	43db      	mvns	r3, r3
 8010736:	4013      	ands	r3, r2
 8010738:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	b2d1      	uxtb	r1, r2
 8010740:	2000      	movs	r0, #0
 8010742:	4301      	orrs	r1, r0
 8010744:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8010748:	0a12      	lsrs	r2, r2, #8
 801074a:	b292      	uxth	r2, r2
 801074c:	2100      	movs	r1, #0
 801074e:	430a      	orrs	r2, r1
 8010750:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8010754:	7afb      	ldrb	r3, [r7, #11]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3714      	adds	r7, #20
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop
 8010764:	08012928 	.word	0x08012928

08010768 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	460b      	mov	r3, r1
 8010772:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 8010774:	78fb      	ldrb	r3, [r7, #3]
 8010776:	2b08      	cmp	r3, #8
 8010778:	d102      	bne.n	8010780 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	7adb      	ldrb	r3, [r3, #11]
 801077e:	e006      	b.n	801078e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 8010780:	78fb      	ldrb	r3, [r7, #3]
 8010782:	2b09      	cmp	r3, #9
 8010784:	d102      	bne.n	801078c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	7b1b      	ldrb	r3, [r3, #12]
 801078a:	e000      	b.n	801078e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 801078c:	2300      	movs	r3, #0
}
 801078e:	4618      	mov	r0, r3
 8010790:	370c      	adds	r7, #12
 8010792:	46bd      	mov	sp, r7
 8010794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010798:	4770      	bx	lr

0801079a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 801079a:	b480      	push	{r7}
 801079c:	b083      	sub	sp, #12
 801079e:	af00      	add	r7, sp, #0
 80107a0:	6078      	str	r0, [r7, #4]
 80107a2:	460b      	mov	r3, r1
 80107a4:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 80107a6:	78fb      	ldrb	r3, [r7, #3]
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	4413      	add	r3, r2
 80107ac:	791b      	ldrb	r3, [r3, #4]
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	370c      	adds	r7, #12
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr

080107ba <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b086      	sub	sp, #24
 80107be:	af00      	add	r7, sp, #0
 80107c0:	60f8      	str	r0, [r7, #12]
 80107c2:	460b      	mov	r3, r1
 80107c4:	607a      	str	r2, [r7, #4]
 80107c6:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 80107c8:	7afb      	ldrb	r3, [r7, #11]
 80107ca:	2b01      	cmp	r3, #1
 80107cc:	f240 80a6 	bls.w	801091c <_ZN9PS4Parser5ParseEhPh+0x162>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f000 80a2 	beq.w	801091c <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d10e      	bne.n	80107fe <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	1d18      	adds	r0, r3, #4
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	1c59      	adds	r1, r3, #1
 80107e8:	7afb      	ldrb	r3, [r7, #11]
 80107ea:	3b01      	subs	r3, #1
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	2b3c      	cmp	r3, #60	; 0x3c
 80107f0:	bf28      	it	cs
 80107f2:	233c      	movcs	r3, #60	; 0x3c
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	461a      	mov	r2, r3
 80107f8:	f001 fe56 	bl	80124a8 <memcpy>
 80107fc:	e016      	b.n	801082c <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	2b11      	cmp	r3, #17
 8010804:	f040 8098 	bne.w	8010938 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 8010808:	7afb      	ldrb	r3, [r7, #11]
 801080a:	2b03      	cmp	r3, #3
 801080c:	f240 8096 	bls.w	801093c <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	1d18      	adds	r0, r3, #4
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	1cd9      	adds	r1, r3, #3
 8010818:	7afb      	ldrb	r3, [r7, #11]
 801081a:	3b03      	subs	r3, #3
 801081c:	b2db      	uxtb	r3, r3
 801081e:	2b3c      	cmp	r3, #60	; 0x3c
 8010820:	bf28      	it	cs
 8010822:	233c      	movcs	r3, #60	; 0x3c
 8010824:	b2db      	uxtb	r3, r3
 8010826:	461a      	mov	r2, r3
 8010828:	f001 fe3e 	bl	80124a8 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	689b      	ldr	r3, [r3, #8]
 8010830:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010838:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801083c:	429a      	cmp	r2, r3
 801083e:	d06d      	beq.n	801091c <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	689b      	ldr	r3, [r3, #8]
 8010844:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010848:	461a      	mov	r2, r3
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801084e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8010852:	43db      	mvns	r3, r3
 8010854:	4013      	ands	r3, r2
 8010856:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	b2d1      	uxtb	r1, r2
 801085e:	2000      	movs	r0, #0
 8010860:	4301      	orrs	r1, r0
 8010862:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8010866:	0a12      	lsrs	r2, r2, #8
 8010868:	b292      	uxth	r2, r2
 801086a:	2100      	movs	r1, #0
 801086c:	430a      	orrs	r2, r1
 801086e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	689b      	ldr	r3, [r3, #8]
 8010876:	f3c3 0117 	ubfx	r1, r3, #0, #24
 801087a:	68fa      	ldr	r2, [r7, #12]
 801087c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801087e:	f361 0317 	bfi	r3, r1, #0, #24
 8010882:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8010884:	2300      	movs	r3, #0
 8010886:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8010888:	2100      	movs	r1, #0
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f7ff fe84 	bl	8010598 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d003      	beq.n	801089e <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 8010896:	7dfb      	ldrb	r3, [r7, #23]
 8010898:	f043 0301 	orr.w	r3, r3, #1
 801089c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 801089e:	2101      	movs	r1, #1
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f7ff fe79 	bl	8010598 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d003      	beq.n	80108b4 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 80108ac:	7dfb      	ldrb	r3, [r7, #23]
 80108ae:	f043 0302 	orr.w	r3, r3, #2
 80108b2:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 80108b4:	2102      	movs	r1, #2
 80108b6:	68f8      	ldr	r0, [r7, #12]
 80108b8:	f7ff fe6e 	bl	8010598 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d003      	beq.n	80108ca <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 80108c2:	7dfb      	ldrb	r3, [r7, #23]
 80108c4:	f043 0304 	orr.w	r3, r3, #4
 80108c8:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 80108ca:	2103      	movs	r1, #3
 80108cc:	68f8      	ldr	r0, [r7, #12]
 80108ce:	f7ff fe63 	bl	8010598 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80108d2:	4603      	mov	r3, r0
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d003      	beq.n	80108e0 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 80108d8:	7dfb      	ldrb	r3, [r7, #23]
 80108da:	f043 0308 	orr.w	r3, r3, #8
 80108de:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80108e6:	7dfa      	ldrb	r2, [r7, #23]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d017      	beq.n	801091c <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80108f2:	b25b      	sxtb	r3, r3
 80108f4:	43db      	mvns	r3, r3
 80108f6:	b25a      	sxtb	r2, r3
 80108f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80108fc:	4013      	ands	r3, r2
 80108fe:	b25b      	sxtb	r3, r3
 8010900:	f003 030f 	and.w	r3, r3, #15
 8010904:	b2d9      	uxtb	r1, r3
 8010906:	68fa      	ldr	r2, [r7, #12]
 8010908:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 801090c:	f361 0303 	bfi	r3, r1, #0, #4
 8010910:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	7dfa      	ldrb	r2, [r7, #23]
 8010918:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00b      	beq.n	801093e <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	68fa      	ldr	r2, [r7, #12]
 801092e:	3246      	adds	r2, #70	; 0x46
 8010930:	4611      	mov	r1, r2
 8010932:	68f8      	ldr	r0, [r7, #12]
 8010934:	4798      	blx	r3
 8010936:	e002      	b.n	801093e <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8010938:	bf00      	nop
 801093a:	e000      	b.n	801093e <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 801093c:	bf00      	nop
}
 801093e:	3718      	adds	r7, #24
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8010944:	b480      	push	{r7}
 8010946:	b085      	sub	sp, #20
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 801094c:	2300      	movs	r3, #0
 801094e:	73fb      	strb	r3, [r7, #15]
 8010950:	7bfb      	ldrb	r3, [r7, #15]
 8010952:	2b03      	cmp	r3, #3
 8010954:	d808      	bhi.n	8010968 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8010956:	7bfb      	ldrb	r3, [r7, #15]
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	4413      	add	r3, r2
 801095c:	227f      	movs	r2, #127	; 0x7f
 801095e:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8010960:	7bfb      	ldrb	r3, [r7, #15]
 8010962:	3301      	adds	r3, #1
 8010964:	73fb      	strb	r3, [r7, #15]
 8010966:	e7f3      	b.n	8010950 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8010968:	687a      	ldr	r2, [r7, #4]
 801096a:	6893      	ldr	r3, [r2, #8]
 801096c:	f36f 0317 	bfc	r3, #0, #24
 8010970:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010976:	f36f 0317 	bfc	r3, #0, #24
 801097a:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 801097c:	2300      	movs	r3, #0
 801097e:	73fb      	strb	r3, [r7, #15]
 8010980:	7bfb      	ldrb	r3, [r7, #15]
 8010982:	2b01      	cmp	r3, #1
 8010984:	d808      	bhi.n	8010998 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8010986:	7bfb      	ldrb	r3, [r7, #15]
 8010988:	687a      	ldr	r2, [r7, #4]
 801098a:	4413      	add	r3, r2
 801098c:	2200      	movs	r2, #0
 801098e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8010990:	7bfb      	ldrb	r3, [r7, #15]
 8010992:	3301      	adds	r3, #1
 8010994:	73fb      	strb	r3, [r7, #15]
 8010996:	e7f3      	b.n	8010980 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8010998:	2300      	movs	r3, #0
 801099a:	73fb      	strb	r3, [r7, #15]
 801099c:	7bfb      	ldrb	r3, [r7, #15]
 801099e:	2b02      	cmp	r3, #2
 80109a0:	d81b      	bhi.n	80109da <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 80109a2:	2300      	movs	r3, #0
 80109a4:	73bb      	strb	r3, [r7, #14]
 80109a6:	7bbb      	ldrb	r3, [r7, #14]
 80109a8:	2b01      	cmp	r3, #1
 80109aa:	d812      	bhi.n	80109d2 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 80109ac:	7bfa      	ldrb	r2, [r7, #15]
 80109ae:	7bbb      	ldrb	r3, [r7, #14]
 80109b0:	6879      	ldr	r1, [r7, #4]
 80109b2:	0098      	lsls	r0, r3, #2
 80109b4:	4613      	mov	r3, r2
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	4413      	add	r3, r2
 80109ba:	4403      	add	r3, r0
 80109bc:	440b      	add	r3, r1
 80109be:	f103 0220 	add.w	r2, r3, #32
 80109c2:	7993      	ldrb	r3, [r2, #6]
 80109c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109c8:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 80109ca:	7bbb      	ldrb	r3, [r7, #14]
 80109cc:	3301      	adds	r3, #1
 80109ce:	73bb      	strb	r3, [r7, #14]
 80109d0:	e7e9      	b.n	80109a6 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 80109d2:	7bfb      	ldrb	r3, [r7, #15]
 80109d4:	3301      	adds	r3, #1
 80109d6:	73fb      	strb	r3, [r7, #15]
 80109d8:	e7e0      	b.n	801099c <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 80109da:	687a      	ldr	r2, [r7, #4]
 80109dc:	7a13      	ldrb	r3, [r2, #8]
 80109de:	2108      	movs	r1, #8
 80109e0:	f361 0303 	bfi	r3, r1, #0, #4
 80109e4:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 80109ec:	2108      	movs	r1, #8
 80109ee:	f361 0303 	bfi	r3, r1, #0, #4
 80109f2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 80109fc:	f36f 0303 	bfc	r3, #0, #4
 8010a00:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2200      	movs	r2, #0
 8010a08:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2200      	movs	r2, #0
 8010a44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2200      	movs	r2, #0
 8010a58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8010a5c:	bf00      	nop
 8010a5e:	3714      	adds	r7, #20
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr

08010a68 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	2180      	movs	r1, #128	; 0x80
 8010a6e:	4803      	ldr	r0, [pc, #12]	; (8010a7c <_ZN2P95IsSetEv+0x14>)
 8010a70:	f7f1 fcb2 	bl	80023d8 <HAL_GPIO_ReadPin>
 8010a74:	4603      	mov	r3, r0
 8010a76:	4618      	mov	r0, r3
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	40020800 	.word	0x40020800

08010a80 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f001 f9bb 	bl	8011e04 <_ZN8MAX3421eI3P102P9EC1Ev>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f001 f9d3 	bl	8011e3c <_ZN15AddressPoolImplILh16EEC1Ev>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8010a9e:	4b05      	ldr	r3, [pc, #20]	; (8010ab4 <_ZN3USBC1Ev+0x34>)
 8010aa0:	2211      	movs	r2, #17
 8010aa2:	701a      	strb	r2, [r3, #0]
        init();
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f000 f807 	bl	8010ab8 <_ZN3USB4initEv>
}
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4618      	mov	r0, r3
 8010aae:	3708      	adds	r7, #8
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	20004f51 	.word	0x20004f51

08010ab8 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8010ac8:	bf00      	nop
 8010aca:	370c      	adds	r7, #12
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr

08010ad4 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b086      	sub	sp, #24
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	460b      	mov	r3, r1
 8010ade:	70fb      	strb	r3, [r7, #3]
 8010ae0:	4613      	mov	r3, r2
 8010ae2:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	78fa      	ldrb	r2, [r7, #3]
 8010ae8:	4611      	mov	r1, r2
 8010aea:	4618      	mov	r0, r3
 8010aec:	f001 f9e0 	bl	8011eb0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010af0:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d003      	beq.n	8010b00 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d101      	bne.n	8010b04 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8010b00:	2300      	movs	r3, #0
 8010b02:	e018      	b.n	8010b36 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	74fb      	strb	r3, [r7, #19]
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	795b      	ldrb	r3, [r3, #5]
 8010b12:	7cfa      	ldrb	r2, [r7, #19]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d20d      	bcs.n	8010b34 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	78ba      	ldrb	r2, [r7, #2]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d101      	bne.n	8010b26 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	e007      	b.n	8010b36 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	3303      	adds	r3, #3
 8010b2a:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8010b2c:	7cfb      	ldrb	r3, [r7, #19]
 8010b2e:	3301      	adds	r3, #1
 8010b30:	74fb      	strb	r3, [r7, #19]
 8010b32:	e7ec      	b.n	8010b0e <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3718      	adds	r7, #24
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b086      	sub	sp, #24
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	60f8      	str	r0, [r7, #12]
 8010b46:	607b      	str	r3, [r7, #4]
 8010b48:	460b      	mov	r3, r1
 8010b4a:	72fb      	strb	r3, [r7, #11]
 8010b4c:	4613      	mov	r3, r2
 8010b4e:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d101      	bne.n	8010b5a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8010b56:	23d8      	movs	r3, #216	; 0xd8
 8010b58:	e015      	b.n	8010b86 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	7afa      	ldrb	r2, [r7, #11]
 8010b5e:	4611      	mov	r1, r2
 8010b60:	4618      	mov	r0, r3
 8010b62:	f001 f9a5 	bl	8011eb0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010b66:	6178      	str	r0, [r7, #20]

        if(!p)
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d101      	bne.n	8010b72 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010b6e:	23d6      	movs	r3, #214	; 0xd6
 8010b70:	e009      	b.n	8010b86 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	7afa      	ldrb	r2, [r7, #11]
 8010b76:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	7aba      	ldrb	r2, [r7, #10]
 8010b82:	715a      	strb	r2, [r3, #5]

        return 0;
 8010b84:	2300      	movs	r3, #0
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3718      	adds	r7, #24
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b086      	sub	sp, #24
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	60f8      	str	r0, [r7, #12]
 8010b96:	607b      	str	r3, [r7, #4]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	72fb      	strb	r3, [r7, #11]
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	7afa      	ldrb	r2, [r7, #11]
 8010ba4:	4611      	mov	r1, r2
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f001 f982 	bl	8011eb0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8010bac:	6178      	str	r0, [r7, #20]

        if(!p)
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d101      	bne.n	8010bb8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010bb4:	23d6      	movs	r3, #214	; 0xd6
 8010bb6:	e04e      	b.n	8010c56 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d101      	bne.n	8010bc4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8010bc0:	23d7      	movs	r3, #215	; 0xd7
 8010bc2:	e048      	b.n	8010c56 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8010bc4:	7aba      	ldrb	r2, [r7, #10]
 8010bc6:	7afb      	ldrb	r3, [r7, #11]
 8010bc8:	4619      	mov	r1, r3
 8010bca:	68f8      	ldr	r0, [r7, #12]
 8010bcc:	f7ff ff82 	bl	8010ad4 <_ZN3USB14getEpInfoEntryEhh>
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d101      	bne.n	8010be2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8010bde:	23db      	movs	r3, #219	; 0xdb
 8010be0:	e039      	b.n	8010c56 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	789b      	ldrb	r3, [r3, #2]
 8010be8:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	2b0f      	cmp	r3, #15
 8010bf0:	bf28      	it	cs
 8010bf2:	230f      	movcs	r3, #15
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	4093      	lsls	r3, r2
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	6a3b      	ldr	r3, [r7, #32]
 8010c00:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8010c02:	6a3b      	ldr	r3, [r7, #32]
 8010c04:	881b      	ldrh	r3, [r3, #0]
 8010c06:	3b01      	subs	r3, #1
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	6a3b      	ldr	r3, [r7, #32]
 8010c0c:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8010c0e:	7afb      	ldrb	r3, [r7, #11]
 8010c10:	461a      	mov	r2, r3
 8010c12:	21e0      	movs	r1, #224	; 0xe0
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f7f0 fe15 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8010c1a:	21d8      	movs	r1, #216	; 0xd8
 8010c1c:	68f8      	ldr	r0, [r7, #12]
 8010c1e:	f7f0 fe63 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010c22:	4603      	mov	r3, r0
 8010c24:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	799b      	ldrb	r3, [r3, #6]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d009      	beq.n	8010c42 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8010c34:	7cfb      	ldrb	r3, [r7, #19]
 8010c36:	4313      	orrs	r3, r2
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	f043 0302 	orr.w	r3, r3, #2
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	e003      	b.n	8010c4a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8010c42:	7cfb      	ldrb	r3, [r7, #19]
 8010c44:	f023 0306 	bic.w	r3, r3, #6
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	21d8      	movs	r1, #216	; 0xd8
 8010c4e:	68f8      	ldr	r0, [r7, #12]
 8010c50:	f7f0 fdf8 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8010c54:	2300      	movs	r3, #0
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3718      	adds	r7, #24
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8010c5e:	b590      	push	{r4, r7, lr}
 8010c60:	b08b      	sub	sp, #44	; 0x2c
 8010c62:	af02      	add	r7, sp, #8
 8010c64:	6078      	str	r0, [r7, #4]
 8010c66:	4608      	mov	r0, r1
 8010c68:	4611      	mov	r1, r2
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	70fb      	strb	r3, [r7, #3]
 8010c70:	460b      	mov	r3, r1
 8010c72:	70bb      	strb	r3, [r7, #2]
 8010c74:	4613      	mov	r3, r2
 8010c76:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8010c78:	2300      	movs	r3, #0
 8010c7a:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8010c80:	2300      	movs	r3, #0
 8010c82:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010c84:	f107 000c 	add.w	r0, r7, #12
 8010c88:	78ba      	ldrb	r2, [r7, #2]
 8010c8a:	78f9      	ldrb	r1, [r7, #3]
 8010c8c:	f107 030a 	add.w	r3, r7, #10
 8010c90:	9300      	str	r3, [sp, #0]
 8010c92:	4603      	mov	r3, r0
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f7ff ff7a 	bl	8010b8e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 8010c9e:	7ffb      	ldrb	r3, [r7, #31]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d001      	beq.n	8010ca8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8010ca4:	7ffb      	ldrb	r3, [r7, #31]
 8010ca6:	e0ae      	b.n	8010e06 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8010ca8:	787b      	ldrb	r3, [r7, #1]
 8010caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	bfcc      	ite	gt
 8010cb2:	2301      	movgt	r3, #1
 8010cb4:	2300      	movle	r3, #0
 8010cb6:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8010cb8:	787b      	ldrb	r3, [r7, #1]
 8010cba:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8010cbc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010cc0:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8010cc2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010cc6:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8010cc8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010ccc:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8010cce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cd0:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8010cd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010cd6:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8010cd8:	f107 0310 	add.w	r3, r7, #16
 8010cdc:	2208      	movs	r2, #8
 8010cde:	2120      	movs	r1, #32
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f001 f90b 	bl	8011efc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8010ce6:	897b      	ldrh	r3, [r7, #10]
 8010ce8:	78ba      	ldrb	r2, [r7, #2]
 8010cea:	2110      	movs	r1, #16
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f000 faf2 	bl	80112d6 <_ZN3USB11dispatchPktEhht>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8010cf6:	7ffb      	ldrb	r3, [r7, #31]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d001      	beq.n	8010d00 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8010cfc:	7ffb      	ldrb	r3, [r7, #31]
 8010cfe:	e082      	b.n	8010e06 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8010d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d072      	beq.n	8010dec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8010d06:	7efb      	ldrb	r3, [r7, #27]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d057      	beq.n	8010dbc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8010d0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d10:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8010d12:	68fa      	ldr	r2, [r7, #12]
 8010d14:	7893      	ldrb	r3, [r2, #2]
 8010d16:	f043 0302 	orr.w	r3, r3, #2
 8010d1a:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8010d1c:	8bbb      	ldrh	r3, [r7, #28]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d05f      	beq.n	8010de2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8010d22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010d26:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8010d28:	68f9      	ldr	r1, [r7, #12]
 8010d2a:	897a      	ldrh	r2, [r7, #10]
 8010d2c:	f107 0008 	add.w	r0, r7, #8
 8010d30:	2300      	movs	r3, #0
 8010d32:	9301      	str	r3, [sp, #4]
 8010d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d36:	9300      	str	r3, [sp, #0]
 8010d38:	4603      	mov	r3, r0
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f000 f8a6 	bl	8010e8c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010d40:	4603      	mov	r3, r0
 8010d42:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8010d44:	7ffb      	ldrb	r3, [r7, #31]
 8010d46:	2b06      	cmp	r3, #6
 8010d48:	d114      	bne.n	8010d74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8010d4a:	21f8      	movs	r1, #248	; 0xf8
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f7f0 fdcb 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010d52:	4603      	mov	r3, r0
 8010d54:	f003 0320 	and.w	r3, r3, #32
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	bf0c      	ite	eq
 8010d5c:	2301      	moveq	r3, #1
 8010d5e:	2300      	movne	r3, #0
 8010d60:	b2db      	uxtb	r3, r3
 8010d62:	68fa      	ldr	r2, [r7, #12]
 8010d64:	f003 0301 	and.w	r3, r3, #1
 8010d68:	b2d9      	uxtb	r1, r3
 8010d6a:	7893      	ldrb	r3, [r2, #2]
 8010d6c:	f361 0341 	bfi	r3, r1, #1, #1
 8010d70:	7093      	strb	r3, [r2, #2]
 8010d72:	e7d3      	b.n	8010d1c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8010d74:	7ffb      	ldrb	r3, [r7, #31]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d001      	beq.n	8010d7e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8010d7a:	7ffb      	ldrb	r3, [r7, #31]
 8010d7c:	e043      	b.n	8010e06 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 8010d7e:	7ffb      	ldrb	r3, [r7, #31]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d111      	bne.n	8010da8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8010d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d00e      	beq.n	8010da8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 8010d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	681c      	ldr	r4, [r3, #0]
 8010d90:	8939      	ldrh	r1, [r7, #8]
 8010d92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010d96:	8bbb      	ldrh	r3, [r7, #28]
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	833b      	strh	r3, [r7, #24]
 8010d9e:	f107 0318 	add.w	r3, r7, #24
 8010da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010da4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010da6:	47a0      	blx	r4

                                left -= read;
 8010da8:	893b      	ldrh	r3, [r7, #8]
 8010daa:	8bba      	ldrh	r2, [r7, #28]
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8010db0:	893b      	ldrh	r3, [r7, #8]
 8010db2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d812      	bhi.n	8010de0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 8010dba:	e7af      	b.n	8010d1c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 8010dbc:	68fa      	ldr	r2, [r7, #12]
 8010dbe:	7893      	ldrb	r3, [r2, #2]
 8010dc0:	f043 0301 	orr.w	r3, r3, #1
 8010dc4:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8010dc6:	68f9      	ldr	r1, [r7, #12]
 8010dc8:	897a      	ldrh	r2, [r7, #10]
 8010dca:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8010dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dd0:	9300      	str	r3, [sp, #0]
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 f953 	bl	8011080 <_ZN3USB11OutTransferEP6EpInfottPh>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	77fb      	strb	r3, [r7, #31]
 8010dde:	e000      	b.n	8010de2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8010de0:	bf00      	nop
                }
                if(rcode) //return error
 8010de2:	7ffb      	ldrb	r3, [r7, #31]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d001      	beq.n	8010dec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8010de8:	7ffb      	ldrb	r3, [r7, #31]
 8010dea:	e00c      	b.n	8010e06 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 8010dec:	7efb      	ldrb	r3, [r7, #27]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d001      	beq.n	8010df6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8010df2:	21a0      	movs	r1, #160	; 0xa0
 8010df4:	e000      	b.n	8010df8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8010df6:	2180      	movs	r1, #128	; 0x80
 8010df8:	897b      	ldrh	r3, [r7, #10]
 8010dfa:	78ba      	ldrb	r2, [r7, #2]
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f000 fa6a 	bl	80112d6 <_ZN3USB11dispatchPktEhht>
 8010e02:	4603      	mov	r3, r0
 8010e04:	bf00      	nop
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3724      	adds	r7, #36	; 0x24
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd90      	pop	{r4, r7, pc}

08010e0e <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b08a      	sub	sp, #40	; 0x28
 8010e12:	af02      	add	r7, sp, #8
 8010e14:	60f8      	str	r0, [r7, #12]
 8010e16:	607b      	str	r3, [r7, #4]
 8010e18:	460b      	mov	r3, r1
 8010e1a:	72fb      	strb	r3, [r7, #11]
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 8010e20:	2300      	movs	r3, #0
 8010e22:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 8010e24:	2300      	movs	r3, #0
 8010e26:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8010e28:	f107 0018 	add.w	r0, r7, #24
 8010e2c:	7aba      	ldrb	r2, [r7, #10]
 8010e2e:	7af9      	ldrb	r1, [r7, #11]
 8010e30:	f107 0316 	add.w	r3, r7, #22
 8010e34:	9300      	str	r3, [sp, #0]
 8010e36:	4603      	mov	r3, r0
 8010e38:	68f8      	ldr	r0, [r7, #12]
 8010e3a:	f7ff fea8 	bl	8010b8e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8010e42:	7ffb      	ldrb	r3, [r7, #31]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d010      	beq.n	8010e6a <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8010e48:	7ffb      	ldrb	r3, [r7, #31]
 8010e4a:	2181      	movs	r1, #129	; 0x81
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f001 f883 	bl	8011f58 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8010e52:	7afb      	ldrb	r3, [r7, #11]
 8010e54:	2181      	movs	r1, #129	; 0x81
 8010e56:	4618      	mov	r0, r3
 8010e58:	f001 f87e 	bl	8011f58 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 8010e5c:	7abb      	ldrb	r3, [r7, #10]
 8010e5e:	2181      	movs	r1, #129	; 0x81
 8010e60:	4618      	mov	r0, r3
 8010e62:	f001 f879 	bl	8011f58 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 8010e66:	7ffb      	ldrb	r3, [r7, #31]
 8010e68:	e00c      	b.n	8010e84 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 8010e6a:	69b9      	ldr	r1, [r7, #24]
 8010e6c:	8afa      	ldrh	r2, [r7, #22]
 8010e6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010e72:	9301      	str	r3, [sp, #4]
 8010e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e76:	9300      	str	r3, [sp, #0]
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	f000 f806 	bl	8010e8c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8010e80:	4603      	mov	r3, r0
 8010e82:	bf00      	nop
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3720      	adds	r7, #32
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}

08010e8c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b086      	sub	sp, #24
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	60f8      	str	r0, [r7, #12]
 8010e94:	60b9      	str	r1, [r7, #8]
 8010e96:	603b      	str	r3, [r7, #0]
 8010e98:	4613      	mov	r3, r2
 8010e9a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	881b      	ldrh	r3, [r3, #0]
 8010ea4:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	785b      	ldrb	r3, [r3, #1]
 8010eaa:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	789b      	ldrb	r3, [r3, #2]
 8010eb6:	f003 0302 	and.w	r3, r3, #2
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d001      	beq.n	8010ec4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8010ec0:	2320      	movs	r3, #32
 8010ec2:	e000      	b.n	8010ec6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8010ec4:	2310      	movs	r3, #16
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	21e8      	movs	r1, #232	; 0xe8
 8010eca:	68f8      	ldr	r0, [r7, #12]
 8010ecc:	f7f0 fcba 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	781a      	ldrb	r2, [r3, #0]
 8010ed4:	88fb      	ldrh	r3, [r7, #6]
 8010ed6:	2100      	movs	r1, #0
 8010ed8:	68f8      	ldr	r0, [r7, #12]
 8010eda:	f000 f9fc 	bl	80112d6 <_ZN3USB11dispatchPktEhht>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
 8010ee4:	2b06      	cmp	r3, #6
 8010ee6:	d123      	bne.n	8010f30 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8010ee8:	21f8      	movs	r1, #248	; 0xf8
 8010eea:	68f8      	ldr	r0, [r7, #12]
 8010eec:	f7f0 fcfc 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	f003 0310 	and.w	r3, r3, #16
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	bf0c      	ite	eq
 8010efa:	2301      	moveq	r3, #1
 8010efc:	2300      	movne	r3, #0
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	f003 0301 	and.w	r3, r3, #1
 8010f04:	b2d9      	uxtb	r1, r3
 8010f06:	68ba      	ldr	r2, [r7, #8]
 8010f08:	7893      	ldrb	r3, [r2, #2]
 8010f0a:	f361 0341 	bfi	r3, r1, #1, #1
 8010f0e:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	789b      	ldrb	r3, [r3, #2]
 8010f14:	f003 0302 	and.w	r3, r3, #2
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d001      	beq.n	8010f22 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 8010f1e:	2320      	movs	r3, #32
 8010f20:	e000      	b.n	8010f24 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 8010f22:	2310      	movs	r3, #16
 8010f24:	461a      	mov	r2, r3
 8010f26:	21e8      	movs	r1, #232	; 0xe8
 8010f28:	68f8      	ldr	r0, [r7, #12]
 8010f2a:	f7f0 fc8b 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 8010f2e:	e06e      	b.n	801100e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 8010f30:	7dfb      	ldrb	r3, [r7, #23]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d16c      	bne.n	8011010 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8010f36:	21c8      	movs	r1, #200	; 0xc8
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	f7f0 fcd5 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	f003 0304 	and.w	r3, r3, #4
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	bf0c      	ite	eq
 8010f48:	2301      	moveq	r3, #1
 8010f4a:	2300      	movne	r3, #0
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d002      	beq.n	8010f58 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8010f52:	23f0      	movs	r3, #240	; 0xf0
 8010f54:	75fb      	strb	r3, [r7, #23]
                        break;
 8010f56:	e05c      	b.n	8011012 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8010f58:	2130      	movs	r1, #48	; 0x30
 8010f5a:	68f8      	ldr	r0, [r7, #12]
 8010f5c:	f7f0 fcc4 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010f60:	4603      	mov	r3, r0
 8010f62:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8010f64:	7dba      	ldrb	r2, [r7, #22]
 8010f66:	8a7b      	ldrh	r3, [r7, #18]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	dd01      	ble.n	8010f70 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 8010f6c:	8a7b      	ldrh	r3, [r7, #18]
 8010f6e:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	8a7a      	ldrh	r2, [r7, #18]
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8010f80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	da01      	bge.n	8010f8c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 8010f8c:	7dba      	ldrb	r2, [r7, #22]
 8010f8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010f92:	4293      	cmp	r3, r2
 8010f94:	bfa8      	it	ge
 8010f96:	4613      	movge	r3, r2
 8010f98:	b2da      	uxtb	r2, r3
 8010f9a:	6a3b      	ldr	r3, [r7, #32]
 8010f9c:	2108      	movs	r1, #8
 8010f9e:	68f8      	ldr	r0, [r7, #12]
 8010fa0:	f000 ffe6 	bl	8011f70 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8010fa4:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8010fa6:	2204      	movs	r2, #4
 8010fa8:	21c8      	movs	r1, #200	; 0xc8
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	f7f0 fc4a 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	881a      	ldrh	r2, [r3, #0]
 8010fb4:	7dbb      	ldrb	r3, [r7, #22]
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	4413      	add	r3, r2
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8010fc0:	7dba      	ldrb	r2, [r7, #22]
 8010fc2:	7c7b      	ldrb	r3, [r7, #17]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d304      	bcc.n	8010fd2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	881b      	ldrh	r3, [r3, #0]
 8010fcc:	8a7a      	ldrh	r2, [r7, #18]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d813      	bhi.n	8010ffa <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8010fd2:	21f8      	movs	r1, #248	; 0xf8
 8010fd4:	68f8      	ldr	r0, [r7, #12]
 8010fd6:	f7f0 fc87 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	f003 0310 	and.w	r3, r3, #16
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d001      	beq.n	8010fe8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8010fe4:	2101      	movs	r1, #1
 8010fe6:	e000      	b.n	8010fea <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8010fe8:	2100      	movs	r1, #0
 8010fea:	68ba      	ldr	r2, [r7, #8]
 8010fec:	7893      	ldrb	r3, [r2, #2]
 8010fee:	f361 0341 	bfi	r3, r1, #1, #1
 8010ff2:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	75fb      	strb	r3, [r7, #23]
                        break;
 8010ff8:	e00b      	b.n	8011012 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 8010ffa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f43f af66 	beq.w	8010ed0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8011004:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011008:	4618      	mov	r0, r3
 801100a:	f7f0 ff4b 	bl	8001ea4 <HAL_Delay>
        } //while( 1 )
 801100e:	e75f      	b.n	8010ed0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8011010:	bf00      	nop
        return ( rcode);
 8011012:	7dfb      	ldrb	r3, [r7, #23]
}
 8011014:	4618      	mov	r0, r3
 8011016:	3718      	adds	r7, #24
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 801101c:	b580      	push	{r7, lr}
 801101e:	b088      	sub	sp, #32
 8011020:	af02      	add	r7, sp, #8
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	4608      	mov	r0, r1
 8011026:	4611      	mov	r1, r2
 8011028:	461a      	mov	r2, r3
 801102a:	4603      	mov	r3, r0
 801102c:	70fb      	strb	r3, [r7, #3]
 801102e:	460b      	mov	r3, r1
 8011030:	70bb      	strb	r3, [r7, #2]
 8011032:	4613      	mov	r3, r2
 8011034:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8011036:	2300      	movs	r3, #0
 8011038:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 801103a:	2300      	movs	r3, #0
 801103c:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 801103e:	f107 0010 	add.w	r0, r7, #16
 8011042:	78ba      	ldrb	r2, [r7, #2]
 8011044:	78f9      	ldrb	r1, [r7, #3]
 8011046:	f107 030e 	add.w	r3, r7, #14
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	4603      	mov	r3, r0
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f7ff fd9d 	bl	8010b8e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8011054:	4603      	mov	r3, r0
 8011056:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8011058:	7dfb      	ldrb	r3, [r7, #23]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d001      	beq.n	8011062 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 801105e:	7dfb      	ldrb	r3, [r7, #23]
 8011060:	e00a      	b.n	8011078 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8011062:	6939      	ldr	r1, [r7, #16]
 8011064:	89fa      	ldrh	r2, [r7, #14]
 8011066:	8838      	ldrh	r0, [r7, #0]
 8011068:	6a3b      	ldr	r3, [r7, #32]
 801106a:	9300      	str	r3, [sp, #0]
 801106c:	4603      	mov	r3, r0
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 f806 	bl	8011080 <_ZN3USB11OutTransferEP6EpInfottPh>
 8011074:	4603      	mov	r3, r0
 8011076:	bf00      	nop
}
 8011078:	4618      	mov	r0, r3
 801107a:	3718      	adds	r7, #24
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8011080:	b580      	push	{r7, lr}
 8011082:	b08a      	sub	sp, #40	; 0x28
 8011084:	af00      	add	r7, sp, #0
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	4611      	mov	r1, r2
 801108c:	461a      	mov	r2, r3
 801108e:	460b      	mov	r3, r1
 8011090:	80fb      	strh	r3, [r7, #6]
 8011092:	4613      	mov	r3, r2
 8011094:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8011096:	2300      	movs	r3, #0
 8011098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 801109c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109e:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 80110a0:	88bb      	ldrh	r3, [r7, #4]
 80110a2:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	785b      	ldrb	r3, [r3, #1]
 80110a8:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 80110aa:	7efb      	ldrb	r3, [r7, #27]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d002      	beq.n	80110b6 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 80110b0:	7efb      	ldrb	r3, [r7, #27]
 80110b2:	2b40      	cmp	r3, #64	; 0x40
 80110b4:	d901      	bls.n	80110ba <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 80110b6:	23da      	movs	r3, #218	; 0xda
 80110b8:	e109      	b.n	80112ce <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80110ba:	f7f0 fee7 	bl	8001e8c <HAL_GetTick>
 80110be:	4603      	mov	r3, r0
 80110c0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80110c4:	3308      	adds	r3, #8
 80110c6:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	789b      	ldrb	r3, [r3, #2]
 80110cc:	f003 0301 	and.w	r3, r3, #1
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d001      	beq.n	80110da <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 80110d6:	2380      	movs	r3, #128	; 0x80
 80110d8:	e000      	b.n	80110dc <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 80110da:	2340      	movs	r3, #64	; 0x40
 80110dc:	461a      	mov	r2, r3
 80110de:	21e8      	movs	r1, #232	; 0xe8
 80110e0:	68f8      	ldr	r0, [r7, #12]
 80110e2:	f7f0 fbaf 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 80110e6:	8bbb      	ldrh	r3, [r7, #28]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f000 80da 	beq.w	80112a2 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 80110ee:	2300      	movs	r3, #0
 80110f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 80110f4:	2300      	movs	r3, #0
 80110f6:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 80110f8:	7efb      	ldrb	r3, [r7, #27]
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	8bba      	ldrh	r2, [r7, #28]
 80110fe:	4293      	cmp	r3, r2
 8011100:	bf28      	it	cs
 8011102:	4613      	movcs	r3, r2
 8011104:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 8011106:	8a7b      	ldrh	r3, [r7, #18]
 8011108:	b2da      	uxtb	r2, r3
 801110a:	6a3b      	ldr	r3, [r7, #32]
 801110c:	2110      	movs	r1, #16
 801110e:	68f8      	ldr	r0, [r7, #12]
 8011110:	f000 fef4 	bl	8011efc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 8011114:	8a7b      	ldrh	r3, [r7, #18]
 8011116:	b2db      	uxtb	r3, r3
 8011118:	461a      	mov	r2, r3
 801111a:	2138      	movs	r1, #56	; 0x38
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	f7f0 fb91 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	f043 0320 	orr.w	r3, r3, #32
 801112a:	b2db      	uxtb	r3, r3
 801112c:	461a      	mov	r2, r3
 801112e:	21f0      	movs	r1, #240	; 0xf0
 8011130:	68f8      	ldr	r0, [r7, #12]
 8011132:	f7f0 fb87 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8011136:	21c8      	movs	r1, #200	; 0xc8
 8011138:	68f8      	ldr	r0, [r7, #12]
 801113a:	f7f0 fbd5 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801113e:	4603      	mov	r3, r0
 8011140:	b25b      	sxtb	r3, r3
 8011142:	43db      	mvns	r3, r3
 8011144:	b2db      	uxtb	r3, r3
 8011146:	09db      	lsrs	r3, r3, #7
 8011148:	b2db      	uxtb	r3, r3
 801114a:	2b00      	cmp	r3, #0
 801114c:	d000      	beq.n	8011150 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 801114e:	e7f2      	b.n	8011136 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8011150:	2280      	movs	r2, #128	; 0x80
 8011152:	21c8      	movs	r1, #200	; 0xc8
 8011154:	68f8      	ldr	r0, [r7, #12]
 8011156:	f7f0 fb75 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 801115a:	21f8      	movs	r1, #248	; 0xf8
 801115c:	68f8      	ldr	r0, [r7, #12]
 801115e:	f7f0 fbc3 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011162:	4603      	mov	r3, r0
 8011164:	f003 030f 	and.w	r3, r3, #15
 8011168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801116c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011170:	2b00      	cmp	r3, #0
 8011172:	d008      	beq.n	8011186 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8011174:	f7f0 fe8a 	bl	8001e8c <HAL_GetTick>
 8011178:	4602      	mov	r2, r0
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	1ad3      	subs	r3, r2, r3
 801117e:	2b00      	cmp	r3, #0
 8011180:	da01      	bge.n	8011186 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8011182:	2301      	movs	r3, #1
 8011184:	e000      	b.n	8011188 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8011186:	2300      	movs	r3, #0
 8011188:	2b00      	cmp	r3, #0
 801118a:	f000 8081 	beq.w	8011290 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801118e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011192:	2b0e      	cmp	r3, #14
 8011194:	d012      	beq.n	80111bc <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8011196:	2b0e      	cmp	r3, #14
 8011198:	f300 8085 	bgt.w	80112a6 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 801119c:	2b04      	cmp	r3, #4
 801119e:	d002      	beq.n	80111a6 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 80111a0:	2b06      	cmp	r3, #6
 80111a2:	d015      	beq.n	80111d0 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 80111a4:	e07f      	b.n	80112a6 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 80111a6:	8bfb      	ldrh	r3, [r7, #30]
 80111a8:	3301      	adds	r3, #1
 80111aa:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 80111ac:	88fb      	ldrh	r3, [r7, #6]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d032      	beq.n	8011218 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 80111b2:	8bfa      	ldrh	r2, [r7, #30]
 80111b4:	88fb      	ldrh	r3, [r7, #6]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d12e      	bne.n	8011218 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 80111ba:	e075      	b.n	80112a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 80111bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111c0:	3301      	adds	r3, #1
 80111c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 80111c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111ca:	2b03      	cmp	r3, #3
 80111cc:	d126      	bne.n	801121c <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 80111ce:	e06b      	b.n	80112a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 80111d0:	21f8      	movs	r1, #248	; 0xf8
 80111d2:	68f8      	ldr	r0, [r7, #12]
 80111d4:	f7f0 fb88 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80111d8:	4603      	mov	r3, r0
 80111da:	f003 0320 	and.w	r3, r3, #32
 80111de:	2b00      	cmp	r3, #0
 80111e0:	bf0c      	ite	eq
 80111e2:	2301      	moveq	r3, #1
 80111e4:	2300      	movne	r3, #0
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	f003 0301 	and.w	r3, r3, #1
 80111ec:	b2d9      	uxtb	r1, r3
 80111ee:	68ba      	ldr	r2, [r7, #8]
 80111f0:	7893      	ldrb	r3, [r2, #2]
 80111f2:	f361 0300 	bfi	r3, r1, #0, #1
 80111f6:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	789b      	ldrb	r3, [r3, #2]
 80111fc:	f003 0301 	and.w	r3, r3, #1
 8011200:	b2db      	uxtb	r3, r3
 8011202:	2b00      	cmp	r3, #0
 8011204:	d001      	beq.n	801120a <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 8011206:	2380      	movs	r3, #128	; 0x80
 8011208:	e000      	b.n	801120c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 801120a:	2340      	movs	r3, #64	; 0x40
 801120c:	461a      	mov	r2, r3
 801120e:	21e8      	movs	r1, #232	; 0xe8
 8011210:	68f8      	ldr	r0, [r7, #12]
 8011212:	f7f0 fb17 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 8011216:	e002      	b.n	801121e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8011218:	bf00      	nop
 801121a:	e000      	b.n	801121e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 801121c:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 801121e:	2200      	movs	r2, #0
 8011220:	2138      	movs	r1, #56	; 0x38
 8011222:	68f8      	ldr	r0, [r7, #12]
 8011224:	f7f0 fb0e 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 8011228:	6a3b      	ldr	r3, [r7, #32]
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	461a      	mov	r2, r3
 801122e:	2110      	movs	r1, #16
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	f7f0 fb07 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 8011236:	8a7b      	ldrh	r3, [r7, #18]
 8011238:	b2db      	uxtb	r3, r3
 801123a:	461a      	mov	r2, r3
 801123c:	2138      	movs	r1, #56	; 0x38
 801123e:	68f8      	ldr	r0, [r7, #12]
 8011240:	f7f0 fb00 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	f043 0320 	orr.w	r3, r3, #32
 801124c:	b2db      	uxtb	r3, r3
 801124e:	461a      	mov	r2, r3
 8011250:	21f0      	movs	r1, #240	; 0xf0
 8011252:	68f8      	ldr	r0, [r7, #12]
 8011254:	f7f0 faf6 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8011258:	21c8      	movs	r1, #200	; 0xc8
 801125a:	68f8      	ldr	r0, [r7, #12]
 801125c:	f7f0 fb44 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011260:	4603      	mov	r3, r0
 8011262:	b25b      	sxtb	r3, r3
 8011264:	43db      	mvns	r3, r3
 8011266:	b2db      	uxtb	r3, r3
 8011268:	09db      	lsrs	r3, r3, #7
 801126a:	b2db      	uxtb	r3, r3
 801126c:	2b00      	cmp	r3, #0
 801126e:	d000      	beq.n	8011272 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8011270:	e7f2      	b.n	8011258 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8011272:	2280      	movs	r2, #128	; 0x80
 8011274:	21c8      	movs	r1, #200	; 0xc8
 8011276:	68f8      	ldr	r0, [r7, #12]
 8011278:	f7f0 fae4 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 801127c:	21f8      	movs	r1, #248	; 0xf8
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f7f0 fb32 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011284:	4603      	mov	r3, r0
 8011286:	f003 030f 	and.w	r3, r3, #15
 801128a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801128e:	e76d      	b.n	801116c <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 8011290:	8bba      	ldrh	r2, [r7, #28]
 8011292:	8a7b      	ldrh	r3, [r7, #18]
 8011294:	1ad3      	subs	r3, r2, r3
 8011296:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8011298:	8a7b      	ldrh	r3, [r7, #18]
 801129a:	6a3a      	ldr	r2, [r7, #32]
 801129c:	4413      	add	r3, r2
 801129e:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 80112a0:	e721      	b.n	80110e6 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 80112a2:	bf00      	nop
 80112a4:	e000      	b.n	80112a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 80112a6:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 80112a8:	21f8      	movs	r1, #248	; 0xf8
 80112aa:	68f8      	ldr	r0, [r7, #12]
 80112ac:	f7f0 fb1c 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80112b0:	4603      	mov	r3, r0
 80112b2:	f003 0320 	and.w	r3, r3, #32
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d001      	beq.n	80112be <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 80112ba:	2101      	movs	r1, #1
 80112bc:	e000      	b.n	80112c0 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 80112be:	2100      	movs	r1, #0
 80112c0:	68ba      	ldr	r2, [r7, #8]
 80112c2:	7893      	ldrb	r3, [r2, #2]
 80112c4:	f361 0300 	bfi	r3, r1, #0, #1
 80112c8:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 80112ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3728      	adds	r7, #40	; 0x28
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b086      	sub	sp, #24
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
 80112de:	4608      	mov	r0, r1
 80112e0:	4611      	mov	r1, r2
 80112e2:	461a      	mov	r2, r3
 80112e4:	4603      	mov	r3, r0
 80112e6:	70fb      	strb	r3, [r7, #3]
 80112e8:	460b      	mov	r3, r1
 80112ea:	70bb      	strb	r3, [r7, #2]
 80112ec:	4613      	mov	r3, r2
 80112ee:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80112f0:	f7f0 fdcc 	bl	8001e8c <HAL_GetTick>
 80112f4:	4603      	mov	r3, r0
 80112f6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80112fa:	3308      	adds	r3, #8
 80112fc:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 80112fe:	2300      	movs	r3, #0
 8011300:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 8011302:	2300      	movs	r3, #0
 8011304:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 8011306:	2300      	movs	r3, #0
 8011308:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 801130a:	f7f0 fdbf 	bl	8001e8c <HAL_GetTick>
 801130e:	4602      	mov	r2, r0
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	1ad3      	subs	r3, r2, r3
 8011314:	0fdb      	lsrs	r3, r3, #31
 8011316:	b2db      	uxtb	r3, r3
 8011318:	2b00      	cmp	r3, #0
 801131a:	d04c      	beq.n	80113b6 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 801131c:	78fa      	ldrb	r2, [r7, #3]
 801131e:	78bb      	ldrb	r3, [r7, #2]
 8011320:	4313      	orrs	r3, r2
 8011322:	b2db      	uxtb	r3, r3
 8011324:	461a      	mov	r2, r3
 8011326:	21f0      	movs	r1, #240	; 0xf0
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f7f0 fa8b 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 801132e:	23ff      	movs	r3, #255	; 0xff
 8011330:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 8011332:	f7f0 fdab 	bl	8001e8c <HAL_GetTick>
 8011336:	4602      	mov	r2, r0
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	0fdb      	lsrs	r3, r3, #31
 801133e:	b2db      	uxtb	r3, r3
 8011340:	2b00      	cmp	r3, #0
 8011342:	d010      	beq.n	8011366 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 8011344:	21c8      	movs	r1, #200	; 0xc8
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f7f0 face 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801134c:	4603      	mov	r3, r0
 801134e:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 8011350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011354:	2b00      	cmp	r3, #0
 8011356:	daec      	bge.n	8011332 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 8011358:	2280      	movs	r2, #128	; 0x80
 801135a:	21c8      	movs	r1, #200	; 0xc8
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7f0 fa71 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 8011362:	2300      	movs	r3, #0
 8011364:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 8011366:	21f8      	movs	r1, #248	; 0xf8
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f7f0 fabd 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801136e:	4603      	mov	r3, r0
 8011370:	f003 030f 	and.w	r3, r3, #15
 8011374:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8011376:	7dfb      	ldrb	r3, [r7, #23]
 8011378:	2b04      	cmp	r3, #4
 801137a:	d002      	beq.n	8011382 <_ZN3USB11dispatchPktEhht+0xac>
 801137c:	2b0e      	cmp	r3, #14
 801137e:	d00c      	beq.n	801139a <_ZN3USB11dispatchPktEhht+0xc4>
 8011380:	e013      	b.n	80113aa <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8011382:	8abb      	ldrh	r3, [r7, #20]
 8011384:	3301      	adds	r3, #1
 8011386:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8011388:	883b      	ldrh	r3, [r7, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00f      	beq.n	80113ae <_ZN3USB11dispatchPktEhht+0xd8>
 801138e:	8aba      	ldrh	r2, [r7, #20]
 8011390:	883b      	ldrh	r3, [r7, #0]
 8011392:	429a      	cmp	r2, r3
 8011394:	d10b      	bne.n	80113ae <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8011396:	7dfb      	ldrb	r3, [r7, #23]
 8011398:	e00e      	b.n	80113b8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 801139a:	7dbb      	ldrb	r3, [r7, #22]
 801139c:	3301      	adds	r3, #1
 801139e:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 80113a0:	7dbb      	ldrb	r3, [r7, #22]
 80113a2:	2b03      	cmp	r3, #3
 80113a4:	d105      	bne.n	80113b2 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 80113a6:	7dfb      	ldrb	r3, [r7, #23]
 80113a8:	e006      	b.n	80113b8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 80113aa:	7dfb      	ldrb	r3, [r7, #23]
 80113ac:	e004      	b.n	80113b8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 80113ae:	bf00      	nop
 80113b0:	e7ab      	b.n	801130a <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 80113b2:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80113b4:	e7a9      	b.n	801130a <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 80113b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3718      	adds	r7, #24
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 80113c8:	2300      	movs	r3, #0
 80113ca:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f000 fdfd 	bl	8011fcc <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 fe12 	bl	8011ffc <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 80113d8:	4603      	mov	r3, r0
 80113da:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 80113dc:	7b3b      	ldrb	r3, [r7, #12]
 80113de:	2b03      	cmp	r3, #3
 80113e0:	d82e      	bhi.n	8011440 <_ZN3USB4TaskEv+0x80>
 80113e2:	a201      	add	r2, pc, #4	; (adr r2, 80113e8 <_ZN3USB4TaskEv+0x28>)
 80113e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e8:	08011405 	.word	0x08011405
 80113ec:	080113f9 	.word	0x080113f9
 80113f0:	08011421 	.word	0x08011421
 80113f4:	0801141d 	.word	0x0801141d
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 80113f8:	4bbf      	ldr	r3, [pc, #764]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 80113fa:	2213      	movs	r2, #19
 80113fc:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80113fe:	2300      	movs	r3, #0
 8011400:	73fb      	strb	r3, [r7, #15]
                        break;
 8011402:	e01d      	b.n	8011440 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 8011404:	4bbc      	ldr	r3, [pc, #752]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801140c:	2b10      	cmp	r3, #16
 801140e:	d002      	beq.n	8011416 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 8011410:	4bb9      	ldr	r3, [pc, #740]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 8011412:	2211      	movs	r2, #17
 8011414:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8011416:	2300      	movs	r3, #0
 8011418:	73fb      	strb	r3, [r7, #15]
                        break;
 801141a:	e011      	b.n	8011440 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 801141c:	2301      	movs	r3, #1
 801141e:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 8011420:	4bb5      	ldr	r3, [pc, #724]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011428:	2b10      	cmp	r3, #16
 801142a:	d108      	bne.n	801143e <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 801142c:	f7f0 fd2e 	bl	8001e8c <HAL_GetTick>
 8011430:	4603      	mov	r3, r0
 8011432:	33c8      	adds	r3, #200	; 0xc8
 8011434:	4ab1      	ldr	r2, [pc, #708]	; (80116fc <_ZN3USB4TaskEv+0x33c>)
 8011436:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8011438:	4baf      	ldr	r3, [pc, #700]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 801143a:	2220      	movs	r2, #32
 801143c:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 801143e:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8011440:	2300      	movs	r3, #0
 8011442:	73bb      	strb	r3, [r7, #14]
 8011444:	7bbb      	ldrb	r3, [r7, #14]
 8011446:	2b0f      	cmp	r3, #15
 8011448:	d81b      	bhi.n	8011482 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 801144a:	7bba      	ldrb	r2, [r7, #14]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	321e      	adds	r2, #30
 8011450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d010      	beq.n	801147a <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 8011458:	7bba      	ldrb	r2, [r7, #14]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	321e      	adds	r2, #30
 801145e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011462:	7bba      	ldrb	r2, [r7, #14]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	321e      	adds	r2, #30
 8011468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	330c      	adds	r3, #12
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	4608      	mov	r0, r1
 8011474:	4798      	blx	r3
 8011476:	4603      	mov	r3, r0
 8011478:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801147a:	7bbb      	ldrb	r3, [r7, #14]
 801147c:	3301      	adds	r3, #1
 801147e:	73bb      	strb	r3, [r7, #14]
 8011480:	e7e0      	b.n	8011444 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8011482:	4b9d      	ldr	r3, [pc, #628]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	2ba0      	cmp	r3, #160	; 0xa0
 8011488:	f000 8123 	beq.w	80116d2 <_ZN3USB4TaskEv+0x312>
 801148c:	2ba0      	cmp	r3, #160	; 0xa0
 801148e:	f300 812f 	bgt.w	80116f0 <_ZN3USB4TaskEv+0x330>
 8011492:	2b90      	cmp	r3, #144	; 0x90
 8011494:	f000 811f 	beq.w	80116d6 <_ZN3USB4TaskEv+0x316>
 8011498:	2b90      	cmp	r3, #144	; 0x90
 801149a:	f300 8129 	bgt.w	80116f0 <_ZN3USB4TaskEv+0x330>
 801149e:	2b80      	cmp	r3, #128	; 0x80
 80114a0:	f000 80fe 	beq.w	80116a0 <_ZN3USB4TaskEv+0x2e0>
 80114a4:	2b80      	cmp	r3, #128	; 0x80
 80114a6:	f300 8123 	bgt.w	80116f0 <_ZN3USB4TaskEv+0x330>
 80114aa:	2b51      	cmp	r3, #81	; 0x51
 80114ac:	f000 80ea 	beq.w	8011684 <_ZN3USB4TaskEv+0x2c4>
 80114b0:	2b51      	cmp	r3, #81	; 0x51
 80114b2:	f300 811d 	bgt.w	80116f0 <_ZN3USB4TaskEv+0x330>
 80114b6:	2b40      	cmp	r3, #64	; 0x40
 80114b8:	dc6a      	bgt.n	8011590 <_ZN3USB4TaskEv+0x1d0>
 80114ba:	2b11      	cmp	r3, #17
 80114bc:	f2c0 8118 	blt.w	80116f0 <_ZN3USB4TaskEv+0x330>
 80114c0:	3b11      	subs	r3, #17
 80114c2:	2b2f      	cmp	r3, #47	; 0x2f
 80114c4:	f200 8114 	bhi.w	80116f0 <_ZN3USB4TaskEv+0x330>
 80114c8:	a201      	add	r2, pc, #4	; (adr r2, 80114d0 <_ZN3USB4TaskEv+0x110>)
 80114ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ce:	bf00      	nop
 80114d0:	08011597 	.word	0x08011597
 80114d4:	080116db 	.word	0x080116db
 80114d8:	080116db 	.word	0x080116db
 80114dc:	080116f1 	.word	0x080116f1
 80114e0:	080116f1 	.word	0x080116f1
 80114e4:	080116f1 	.word	0x080116f1
 80114e8:	080116f1 	.word	0x080116f1
 80114ec:	080116f1 	.word	0x080116f1
 80114f0:	080116f1 	.word	0x080116f1
 80114f4:	080116f1 	.word	0x080116f1
 80114f8:	080116f1 	.word	0x080116f1
 80114fc:	080116f1 	.word	0x080116f1
 8011500:	080116f1 	.word	0x080116f1
 8011504:	080116f1 	.word	0x080116f1
 8011508:	080116f1 	.word	0x080116f1
 801150c:	080115e7 	.word	0x080115e7
 8011510:	080116f1 	.word	0x080116f1
 8011514:	080116f1 	.word	0x080116f1
 8011518:	080116f1 	.word	0x080116f1
 801151c:	080116f1 	.word	0x080116f1
 8011520:	080116f1 	.word	0x080116f1
 8011524:	080116f1 	.word	0x080116f1
 8011528:	080116f1 	.word	0x080116f1
 801152c:	080116f1 	.word	0x080116f1
 8011530:	080116f1 	.word	0x080116f1
 8011534:	080116f1 	.word	0x080116f1
 8011538:	080116f1 	.word	0x080116f1
 801153c:	080116f1 	.word	0x080116f1
 8011540:	080116f1 	.word	0x080116f1
 8011544:	080116f1 	.word	0x080116f1
 8011548:	080116f1 	.word	0x080116f1
 801154c:	08011603 	.word	0x08011603
 8011550:	080116f1 	.word	0x080116f1
 8011554:	080116f1 	.word	0x080116f1
 8011558:	080116f1 	.word	0x080116f1
 801155c:	080116f1 	.word	0x080116f1
 8011560:	080116f1 	.word	0x080116f1
 8011564:	080116f1 	.word	0x080116f1
 8011568:	080116f1 	.word	0x080116f1
 801156c:	080116f1 	.word	0x080116f1
 8011570:	080116f1 	.word	0x080116f1
 8011574:	080116f1 	.word	0x080116f1
 8011578:	080116f1 	.word	0x080116f1
 801157c:	080116f1 	.word	0x080116f1
 8011580:	080116f1 	.word	0x080116f1
 8011584:	080116f1 	.word	0x080116f1
 8011588:	080116f1 	.word	0x080116f1
 801158c:	08011615 	.word	0x08011615
 8011590:	2b50      	cmp	r3, #80	; 0x50
 8011592:	d05f      	beq.n	8011654 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8011594:	e0ac      	b.n	80116f0 <_ZN3USB4TaskEv+0x330>
                        init();
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f7ff fa8e 	bl	8010ab8 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801159c:	2300      	movs	r3, #0
 801159e:	737b      	strb	r3, [r7, #13]
 80115a0:	7b7b      	ldrb	r3, [r7, #13]
 80115a2:	2b0f      	cmp	r3, #15
 80115a4:	d81b      	bhi.n	80115de <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 80115a6:	7b7a      	ldrb	r2, [r7, #13]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	321e      	adds	r2, #30
 80115ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d010      	beq.n	80115d6 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 80115b4:	7b7a      	ldrb	r2, [r7, #13]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	321e      	adds	r2, #30
 80115ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115be:	7b7a      	ldrb	r2, [r7, #13]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	321e      	adds	r2, #30
 80115c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	3308      	adds	r3, #8
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	4608      	mov	r0, r1
 80115d0:	4798      	blx	r3
 80115d2:	4603      	mov	r3, r0
 80115d4:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80115d6:	7b7b      	ldrb	r3, [r7, #13]
 80115d8:	3301      	adds	r3, #1
 80115da:	737b      	strb	r3, [r7, #13]
 80115dc:	e7e0      	b.n	80115a0 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 80115de:	4b46      	ldr	r3, [pc, #280]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 80115e0:	2212      	movs	r2, #18
 80115e2:	701a      	strb	r2, [r3, #0]
                        break;
 80115e4:	e084      	b.n	80116f0 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 80115e6:	f7f0 fc51 	bl	8001e8c <HAL_GetTick>
 80115ea:	4602      	mov	r2, r0
 80115ec:	4b43      	ldr	r3, [pc, #268]	; (80116fc <_ZN3USB4TaskEv+0x33c>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	1ad3      	subs	r3, r2, r3
 80115f2:	43db      	mvns	r3, r3
 80115f4:	0fdb      	lsrs	r3, r3, #31
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d070      	beq.n	80116de <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 80115fc:	4b3e      	ldr	r3, [pc, #248]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 80115fe:	2230      	movs	r2, #48	; 0x30
 8011600:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8011602:	2201      	movs	r2, #1
 8011604:	21e8      	movs	r1, #232	; 0xe8
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7f0 f91c 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 801160c:	4b3a      	ldr	r3, [pc, #232]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 801160e:	2240      	movs	r2, #64	; 0x40
 8011610:	701a      	strb	r2, [r3, #0]
                        break;
 8011612:	e06d      	b.n	80116f0 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 8011614:	21e8      	movs	r1, #232	; 0xe8
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f7f0 f966 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801161c:	4603      	mov	r3, r0
 801161e:	f003 0301 	and.w	r3, r3, #1
 8011622:	2b00      	cmp	r3, #0
 8011624:	bf0c      	ite	eq
 8011626:	2301      	moveq	r3, #1
 8011628:	2300      	movne	r3, #0
 801162a:	b2db      	uxtb	r3, r3
 801162c:	2b00      	cmp	r3, #0
 801162e:	d058      	beq.n	80116e2 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 8011630:	21d8      	movs	r1, #216	; 0xd8
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f7f0 f958 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011638:	4603      	mov	r3, r0
 801163a:	f043 0308 	orr.w	r3, r3, #8
 801163e:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 8011640:	7b3b      	ldrb	r3, [r7, #12]
 8011642:	461a      	mov	r2, r3
 8011644:	21d8      	movs	r1, #216	; 0xd8
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f7f0 f8fc 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 801164c:	4b2a      	ldr	r3, [pc, #168]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 801164e:	2250      	movs	r2, #80	; 0x50
 8011650:	701a      	strb	r2, [r3, #0]
                        break;
 8011652:	e046      	b.n	80116e2 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 8011654:	21c8      	movs	r1, #200	; 0xc8
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f7f0 f946 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801165c:	4603      	mov	r3, r0
 801165e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011662:	2b00      	cmp	r3, #0
 8011664:	bf14      	ite	ne
 8011666:	2301      	movne	r3, #1
 8011668:	2300      	moveq	r3, #0
 801166a:	b2db      	uxtb	r3, r3
 801166c:	2b00      	cmp	r3, #0
 801166e:	d03a      	beq.n	80116e6 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 8011670:	4b21      	ldr	r3, [pc, #132]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 8011672:	2251      	movs	r2, #81	; 0x51
 8011674:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8011676:	f7f0 fc09 	bl	8001e8c <HAL_GetTick>
 801167a:	4603      	mov	r3, r0
 801167c:	3314      	adds	r3, #20
 801167e:	4a1f      	ldr	r2, [pc, #124]	; (80116fc <_ZN3USB4TaskEv+0x33c>)
 8011680:	6013      	str	r3, [r2, #0]
                        break;
 8011682:	e030      	b.n	80116e6 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8011684:	f7f0 fc02 	bl	8001e8c <HAL_GetTick>
 8011688:	4602      	mov	r2, r0
 801168a:	4b1c      	ldr	r3, [pc, #112]	; (80116fc <_ZN3USB4TaskEv+0x33c>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	1ad3      	subs	r3, r2, r3
 8011690:	43db      	mvns	r3, r3
 8011692:	0fdb      	lsrs	r3, r3, #31
 8011694:	b2db      	uxtb	r3, r3
 8011696:	2b00      	cmp	r3, #0
 8011698:	d027      	beq.n	80116ea <_ZN3USB4TaskEv+0x32a>
 801169a:	4b17      	ldr	r3, [pc, #92]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 801169c:	2280      	movs	r2, #128	; 0x80
 801169e:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 80116a0:	7bfb      	ldrb	r3, [r7, #15]
 80116a2:	2200      	movs	r2, #0
 80116a4:	2100      	movs	r1, #0
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f000 f920 	bl	80118ec <_ZN3USB11ConfiguringEhhb>
 80116ac:	4603      	mov	r3, r0
 80116ae:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 80116b0:	7afb      	ldrb	r3, [r7, #11]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d009      	beq.n	80116ca <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 80116b6:	7afb      	ldrb	r3, [r7, #11]
 80116b8:	2bd2      	cmp	r3, #210	; 0xd2
 80116ba:	d018      	beq.n	80116ee <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 80116bc:	4a10      	ldr	r2, [pc, #64]	; (8011700 <_ZN3USB4TaskEv+0x340>)
 80116be:	7afb      	ldrb	r3, [r7, #11]
 80116c0:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 80116c2:	4b0d      	ldr	r3, [pc, #52]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 80116c4:	22a0      	movs	r2, #160	; 0xa0
 80116c6:	701a      	strb	r2, [r3, #0]
                        break;
 80116c8:	e011      	b.n	80116ee <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 80116ca:	4b0b      	ldr	r3, [pc, #44]	; (80116f8 <_ZN3USB4TaskEv+0x338>)
 80116cc:	2290      	movs	r2, #144	; 0x90
 80116ce:	701a      	strb	r2, [r3, #0]
                        break;
 80116d0:	e00d      	b.n	80116ee <_ZN3USB4TaskEv+0x32e>
                        break;
 80116d2:	bf00      	nop
 80116d4:	e00c      	b.n	80116f0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116d6:	bf00      	nop
 80116d8:	e00a      	b.n	80116f0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116da:	bf00      	nop
 80116dc:	e008      	b.n	80116f0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80116de:	bf00      	nop
 80116e0:	e006      	b.n	80116f0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116e2:	bf00      	nop
 80116e4:	e004      	b.n	80116f0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116e6:	bf00      	nop
 80116e8:	e002      	b.n	80116f0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80116ea:	bf00      	nop
 80116ec:	e000      	b.n	80116f0 <_ZN3USB4TaskEv+0x330>
                        break;
 80116ee:	bf00      	nop
}
 80116f0:	bf00      	nop
 80116f2:	3710      	adds	r7, #16
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	20004f51 	.word	0x20004f51
 80116fc:	20004f54 	.word	0x20004f54
 8011700:	20004f50 	.word	0x20004f50

08011704 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 8011704:	b580      	push	{r7, lr}
 8011706:	b086      	sub	sp, #24
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	4608      	mov	r0, r1
 801170e:	4611      	mov	r1, r2
 8011710:	461a      	mov	r2, r3
 8011712:	4603      	mov	r3, r0
 8011714:	70fb      	strb	r3, [r7, #3]
 8011716:	460b      	mov	r3, r1
 8011718:	70bb      	strb	r3, [r7, #2]
 801171a:	4613      	mov	r3, r2
 801171c:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 801171e:	2300      	movs	r3, #0
 8011720:	617b      	str	r3, [r7, #20]
 8011722:	2300      	movs	r3, #0
 8011724:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2100      	movs	r1, #0
 801172a:	4618      	mov	r0, r3
 801172c:	f000 fbc0 	bl	8011eb0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011730:	6178      	str	r0, [r7, #20]

        if(!p0)
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d101      	bne.n	801173c <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011738:	23d6      	movs	r3, #214	; 0xd6
 801173a:	e03a      	b.n	80117b2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d101      	bne.n	8011748 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8011744:	23d7      	movs	r3, #215	; 0xd7
 8011746:	e034      	b.n	80117b2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	787a      	ldrb	r2, [r7, #1]
 801174c:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	78bb      	ldrb	r3, [r7, #2]
 8011752:	78f9      	ldrb	r1, [r7, #3]
 8011754:	2200      	movs	r2, #0
 8011756:	f000 fc5f 	bl	8012018 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 801175a:	4603      	mov	r3, r0
 801175c:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 801175e:	7bfb      	ldrb	r3, [r7, #15]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d101      	bne.n	8011768 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8011764:	23d4      	movs	r3, #212	; 0xd4
 8011766:	e024      	b.n	80117b2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	7bfa      	ldrb	r2, [r7, #15]
 801176c:	4611      	mov	r1, r2
 801176e:	4618      	mov	r0, r3
 8011770:	f000 fb9e 	bl	8011eb0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011774:	6138      	str	r0, [r7, #16]

        if(!p)
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d101      	bne.n	8011780 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 801177c:	23d6      	movs	r3, #214	; 0xd6
 801177e:	e018      	b.n	80117b2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	787a      	ldrb	r2, [r7, #1]
 8011784:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8011786:	7bfb      	ldrb	r3, [r7, #15]
 8011788:	2200      	movs	r2, #0
 801178a:	2100      	movs	r1, #0
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f000 fae3 	bl	8011d58 <_ZN3USB7setAddrEhhh>
 8011792:	4603      	mov	r3, r0
 8011794:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8011796:	7bbb      	ldrb	r3, [r7, #14]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d009      	beq.n	80117b0 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	7bfa      	ldrb	r2, [r7, #15]
 80117a0:	4611      	mov	r1, r2
 80117a2:	4618      	mov	r0, r3
 80117a4:	f000 fcd0 	bl	8012148 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 80117a8:	2300      	movs	r3, #0
 80117aa:	73fb      	strb	r3, [r7, #15]
                return rcode;
 80117ac:	7bbb      	ldrb	r3, [r7, #14]
 80117ae:	e000      	b.n	80117b2 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 80117b0:	2300      	movs	r3, #0
};
 80117b2:	4618      	mov	r0, r3
 80117b4:	3718      	adds	r7, #24
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}

080117ba <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 80117ba:	b590      	push	{r4, r7, lr}
 80117bc:	b085      	sub	sp, #20
 80117be:	af00      	add	r7, sp, #0
 80117c0:	6078      	str	r0, [r7, #4]
 80117c2:	4608      	mov	r0, r1
 80117c4:	4611      	mov	r1, r2
 80117c6:	461a      	mov	r2, r3
 80117c8:	4603      	mov	r3, r0
 80117ca:	70fb      	strb	r3, [r7, #3]
 80117cc:	460b      	mov	r3, r1
 80117ce:	70bb      	strb	r3, [r7, #2]
 80117d0:	4613      	mov	r3, r2
 80117d2:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 80117d4:	2300      	movs	r3, #0
 80117d6:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 80117d8:	78fa      	ldrb	r2, [r7, #3]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	321e      	adds	r2, #30
 80117de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80117e2:	78fa      	ldrb	r2, [r7, #3]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	321e      	adds	r2, #30
 80117e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	3304      	adds	r3, #4
 80117f0:	681c      	ldr	r4, [r3, #0]
 80117f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80117f6:	787a      	ldrb	r2, [r7, #1]
 80117f8:	78b9      	ldrb	r1, [r7, #2]
 80117fa:	47a0      	blx	r4
 80117fc:	4603      	mov	r3, r0
 80117fe:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8011800:	7bbb      	ldrb	r3, [r7, #14]
 8011802:	2be0      	cmp	r3, #224	; 0xe0
 8011804:	d11c      	bne.n	8011840 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8011806:	78bb      	ldrb	r3, [r7, #2]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d108      	bne.n	801181e <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 801180c:	2201      	movs	r2, #1
 801180e:	21e8      	movs	r1, #232	; 0xe8
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f7f0 f817 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8011816:	2066      	movs	r0, #102	; 0x66
 8011818:	f7f0 fb44 	bl	8001ea4 <HAL_Delay>
 801181c:	e022      	b.n	8011864 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 801181e:	78ba      	ldrb	r2, [r7, #2]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	321e      	adds	r2, #30
 8011824:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011828:	78ba      	ldrb	r2, [r7, #2]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	321e      	adds	r2, #30
 801182e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	3314      	adds	r3, #20
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	787a      	ldrb	r2, [r7, #1]
 801183a:	4611      	mov	r1, r2
 801183c:	4798      	blx	r3
 801183e:	e011      	b.n	8011864 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8011840:	7bbb      	ldrb	r3, [r7, #14]
 8011842:	2b0d      	cmp	r3, #13
 8011844:	d109      	bne.n	801185a <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8011846:	7bfb      	ldrb	r3, [r7, #15]
 8011848:	2b02      	cmp	r3, #2
 801184a:	d806      	bhi.n	801185a <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 801184c:	2064      	movs	r0, #100	; 0x64
 801184e:	f7f0 fb29 	bl	8001ea4 <HAL_Delay>
                retries++;
 8011852:	7bfb      	ldrb	r3, [r7, #15]
 8011854:	3301      	adds	r3, #1
 8011856:	73fb      	strb	r3, [r7, #15]
                goto again;
 8011858:	e7be      	b.n	80117d8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 801185a:	7bbb      	ldrb	r3, [r7, #14]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d001      	beq.n	8011864 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8011860:	7bbb      	ldrb	r3, [r7, #14]
 8011862:	e03f      	b.n	80118e4 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8011864:	78fa      	ldrb	r2, [r7, #3]
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	321e      	adds	r2, #30
 801186a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801186e:	78fa      	ldrb	r2, [r7, #3]
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	321e      	adds	r2, #30
 8011874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	681c      	ldr	r4, [r3, #0]
 801187c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011880:	787a      	ldrb	r2, [r7, #1]
 8011882:	78b9      	ldrb	r1, [r7, #2]
 8011884:	47a0      	blx	r4
 8011886:	4603      	mov	r3, r0
 8011888:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 801188a:	7bbb      	ldrb	r3, [r7, #14]
 801188c:	2b0d      	cmp	r3, #13
 801188e:	d109      	bne.n	80118a4 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8011890:	7bfb      	ldrb	r3, [r7, #15]
 8011892:	2b02      	cmp	r3, #2
 8011894:	d806      	bhi.n	80118a4 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8011896:	2064      	movs	r0, #100	; 0x64
 8011898:	f7f0 fb04 	bl	8001ea4 <HAL_Delay>
                retries++;
 801189c:	7bfb      	ldrb	r3, [r7, #15]
 801189e:	3301      	adds	r3, #1
 80118a0:	73fb      	strb	r3, [r7, #15]
                goto again;
 80118a2:	e799      	b.n	80117d8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 80118a4:	7bbb      	ldrb	r3, [r7, #14]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d01b      	beq.n	80118e2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 80118aa:	78bb      	ldrb	r3, [r7, #2]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d108      	bne.n	80118c2 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80118b0:	2201      	movs	r2, #1
 80118b2:	21e8      	movs	r1, #232	; 0xe8
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f7ef ffc5 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 80118ba:	2066      	movs	r0, #102	; 0x66
 80118bc:	f7f0 faf2 	bl	8001ea4 <HAL_Delay>
 80118c0:	e00f      	b.n	80118e2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 80118c2:	78ba      	ldrb	r2, [r7, #2]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	321e      	adds	r2, #30
 80118c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80118cc:	78ba      	ldrb	r2, [r7, #2]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	321e      	adds	r2, #30
 80118d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	3314      	adds	r3, #20
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	787a      	ldrb	r2, [r7, #1]
 80118de:	4611      	mov	r1, r2
 80118e0:	4798      	blx	r3
                }
        }
        return rcode;
 80118e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3714      	adds	r7, #20
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd90      	pop	{r4, r7, pc}

080118ec <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b090      	sub	sp, #64	; 0x40
 80118f0:	af02      	add	r7, sp, #8
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	4608      	mov	r0, r1
 80118f6:	4611      	mov	r1, r2
 80118f8:	461a      	mov	r2, r3
 80118fa:	4603      	mov	r3, r0
 80118fc:	70fb      	strb	r3, [r7, #3]
 80118fe:	460b      	mov	r3, r1
 8011900:	70bb      	strb	r3, [r7, #2]
 8011902:	4613      	mov	r3, r2
 8011904:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8011906:	2300      	movs	r3, #0
 8011908:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 801190c:	f107 030c 	add.w	r3, r7, #12
 8011910:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8011912:	2300      	movs	r3, #0
 8011914:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8011916:	2300      	movs	r3, #0
 8011918:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 801191a:	2300      	movs	r3, #0
 801191c:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 801191e:	2308      	movs	r3, #8
 8011920:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8011922:	7abb      	ldrb	r3, [r7, #10]
 8011924:	f36f 0300 	bfc	r3, #0, #1
 8011928:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 801192a:	7abb      	ldrb	r3, [r7, #10]
 801192c:	f36f 0341 	bfc	r3, #1, #1
 8011930:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8011932:	7abb      	ldrb	r3, [r7, #10]
 8011934:	220f      	movs	r2, #15
 8011936:	f362 0387 	bfi	r3, r2, #2, #6
 801193a:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f7fa fd13 	bl	800c368 <_ZN3USB14GetAddressPoolEv>
 8011942:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8011944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	2100      	movs	r1, #0
 801194c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801194e:	4798      	blx	r3
 8011950:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8011952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011954:	2b00      	cmp	r3, #0
 8011956:	d101      	bne.n	801195c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011958:	23d6      	movs	r3, #214	; 0xd6
 801195a:	e15c      	b.n	8011c16 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 801195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8011962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011964:	f107 0208 	add.w	r2, r7, #8
 8011968:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 801196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196c:	787a      	ldrb	r2, [r7, #1]
 801196e:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8011970:	f107 030c 	add.w	r3, r7, #12
 8011974:	9300      	str	r3, [sp, #0]
 8011976:	2312      	movs	r3, #18
 8011978:	2200      	movs	r2, #0
 801197a:	2100      	movs	r1, #0
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f000 f94e 	bl	8011c1e <_ZN3USB11getDevDescrEhhtPh>
 8011982:	4603      	mov	r3, r0
 8011984:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8011988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801198c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 801198e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011992:	2b00      	cmp	r3, #0
 8011994:	d002      	beq.n	801199c <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8011996:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801199a:	e13c      	b.n	8011c16 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 801199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199e:	7a1a      	ldrb	r2, [r3, #8]
 80119a0:	7a5b      	ldrb	r3, [r3, #9]
 80119a2:	021b      	lsls	r3, r3, #8
 80119a4:	4313      	orrs	r3, r2
 80119a6:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 80119a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119aa:	7a9a      	ldrb	r2, [r3, #10]
 80119ac:	7adb      	ldrb	r3, [r3, #11]
 80119ae:	021b      	lsls	r3, r3, #8
 80119b0:	4313      	orrs	r3, r2
 80119b2:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 80119b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b6:	791b      	ldrb	r3, [r3, #4]
 80119b8:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 80119ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119bc:	795b      	ldrb	r3, [r3, #5]
 80119be:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 80119c0:	2300      	movs	r3, #0
 80119c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119ca:	2b0f      	cmp	r3, #15
 80119cc:	f200 8081 	bhi.w	8011ad2 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 80119d0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	321e      	adds	r2, #30
 80119d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d06e      	beq.n	8011abe <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 80119e0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	321e      	adds	r2, #30
 80119e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80119ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	321e      	adds	r2, #30
 80119f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	3310      	adds	r3, #16
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	4608      	mov	r0, r1
 8011a00:	4798      	blx	r3
 8011a02:	4603      	mov	r3, r0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	bf14      	ite	ne
 8011a08:	2301      	movne	r3, #1
 8011a0a:	2300      	moveq	r3, #0
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d157      	bne.n	8011ac2 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8011a12:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	321e      	adds	r2, #30
 8011a1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a1e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	321e      	adds	r2, #30
 8011a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	3320      	adds	r3, #32
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	7fba      	ldrb	r2, [r7, #30]
 8011a32:	4611      	mov	r1, r2
 8011a34:	4798      	blx	r3
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d02b      	beq.n	8011a94 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011a3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	321e      	adds	r2, #30
 8011a44:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a48:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	321e      	adds	r2, #30
 8011a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	3318      	adds	r3, #24
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	8c3a      	ldrh	r2, [r7, #32]
 8011a5c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011a5e:	4798      	blx	r3
 8011a60:	4603      	mov	r3, r0
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d114      	bne.n	8011a90 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8011a66:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	321e      	adds	r2, #30
 8011a6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011a72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	321e      	adds	r2, #30
 8011a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	331c      	adds	r3, #28
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	7ffa      	ldrb	r2, [r7, #31]
 8011a86:	4611      	mov	r1, r2
 8011a88:	4798      	blx	r3
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d001      	beq.n	8011a94 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8011a90:	2301      	movs	r3, #1
 8011a92:	e000      	b.n	8011a96 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8011a94:	2300      	movs	r3, #0
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d014      	beq.n	8011ac4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011a9a:	78b8      	ldrb	r0, [r7, #2]
 8011a9c:	78fa      	ldrb	r2, [r7, #3]
 8011a9e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011aa2:	787b      	ldrb	r3, [r7, #1]
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f7ff fe86 	bl	80117ba <_ZN3USB13AttemptConfigEhhhb>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8011ab4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011ab8:	2bd1      	cmp	r3, #209	; 0xd1
 8011aba:	d109      	bne.n	8011ad0 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8011abc:	e002      	b.n	8011ac4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8011abe:	bf00      	nop
 8011ac0:	e000      	b.n	8011ac4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011ac2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011ac4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ac8:	3301      	adds	r3, #1
 8011aca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ace:	e77a      	b.n	80119c6 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8011ad0:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8011ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ad6:	2b0f      	cmp	r3, #15
 8011ad8:	d802      	bhi.n	8011ae0 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8011ada:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011ade:	e09a      	b.n	8011c16 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ae6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011aea:	2b0f      	cmp	r3, #15
 8011aec:	f200 8088 	bhi.w	8011c00 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8011af0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	321e      	adds	r2, #30
 8011af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d074      	beq.n	8011bea <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011b00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	321e      	adds	r2, #30
 8011b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b0c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	321e      	adds	r2, #30
 8011b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	3310      	adds	r3, #16
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	4608      	mov	r0, r1
 8011b20:	4798      	blx	r3
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	bf14      	ite	ne
 8011b28:	2301      	movne	r3, #1
 8011b2a:	2300      	moveq	r3, #0
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d15d      	bne.n	8011bee <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011b32:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	321e      	adds	r2, #30
 8011b3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b3e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	321e      	adds	r2, #30
 8011b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	3320      	adds	r3, #32
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	7fba      	ldrb	r2, [r7, #30]
 8011b52:	4611      	mov	r1, r2
 8011b54:	4798      	blx	r3
 8011b56:	4603      	mov	r3, r0
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d02b      	beq.n	8011bb4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011b5c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	321e      	adds	r2, #30
 8011b64:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b68:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	321e      	adds	r2, #30
 8011b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	3318      	adds	r3, #24
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	8c3a      	ldrh	r2, [r7, #32]
 8011b7c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8011b7e:	4798      	blx	r3
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d114      	bne.n	8011bb0 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8011b86:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	321e      	adds	r2, #30
 8011b8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b92:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	321e      	adds	r2, #30
 8011b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	331c      	adds	r3, #28
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	7ffa      	ldrb	r2, [r7, #31]
 8011ba6:	4611      	mov	r1, r2
 8011ba8:	4798      	blx	r3
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d001      	beq.n	8011bb4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	e000      	b.n	8011bb6 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d11b      	bne.n	8011bf2 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8011bba:	78b8      	ldrb	r0, [r7, #2]
 8011bbc:	78fa      	ldrb	r2, [r7, #3]
 8011bbe:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8011bc2:	787b      	ldrb	r3, [r7, #1]
 8011bc4:	9300      	str	r3, [sp, #0]
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f7ff fdf6 	bl	80117ba <_ZN3USB13AttemptConfigEhhhb>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8011bd4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011bd8:	2bd1      	cmp	r3, #209	; 0xd1
 8011bda:	d00b      	beq.n	8011bf4 <_ZN3USB11ConfiguringEhhb+0x308>
 8011bdc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011be0:	2bd9      	cmp	r3, #217	; 0xd9
 8011be2:	d007      	beq.n	8011bf4 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8011be4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011be8:	e015      	b.n	8011c16 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8011bea:	bf00      	nop
 8011bec:	e002      	b.n	8011bf4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8011bee:	bf00      	nop
 8011bf0:	e000      	b.n	8011bf4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8011bf2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8011bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011bfe:	e772      	b.n	8011ae6 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8011c00:	787b      	ldrb	r3, [r7, #1]
 8011c02:	78ba      	ldrb	r2, [r7, #2]
 8011c04:	78f9      	ldrb	r1, [r7, #3]
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f7ff fd7c 	bl	8011704 <_ZN3USB17DefaultAddressingEhhb>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8011c12:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3738      	adds	r7, #56	; 0x38
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}

08011c1e <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b08a      	sub	sp, #40	; 0x28
 8011c22:	af08      	add	r7, sp, #32
 8011c24:	6078      	str	r0, [r7, #4]
 8011c26:	4608      	mov	r0, r1
 8011c28:	4611      	mov	r1, r2
 8011c2a:	461a      	mov	r2, r3
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	70fb      	strb	r3, [r7, #3]
 8011c30:	460b      	mov	r3, r1
 8011c32:	70bb      	strb	r3, [r7, #2]
 8011c34:	4613      	mov	r3, r2
 8011c36:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011c38:	78ba      	ldrb	r2, [r7, #2]
 8011c3a:	78f9      	ldrb	r1, [r7, #3]
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	9307      	str	r3, [sp, #28]
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	9306      	str	r3, [sp, #24]
 8011c44:	883b      	ldrh	r3, [r7, #0]
 8011c46:	9305      	str	r3, [sp, #20]
 8011c48:	883b      	ldrh	r3, [r7, #0]
 8011c4a:	9304      	str	r3, [sp, #16]
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	9303      	str	r3, [sp, #12]
 8011c50:	2301      	movs	r3, #1
 8011c52:	9302      	str	r3, [sp, #8]
 8011c54:	2300      	movs	r3, #0
 8011c56:	9301      	str	r3, [sp, #4]
 8011c58:	2306      	movs	r3, #6
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	2380      	movs	r3, #128	; 0x80
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f7fe fffd 	bl	8010c5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011c64:	4603      	mov	r3, r0
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3708      	adds	r7, #8
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}

08011c6e <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8011c6e:	b580      	push	{r7, lr}
 8011c70:	b08a      	sub	sp, #40	; 0x28
 8011c72:	af08      	add	r7, sp, #32
 8011c74:	6078      	str	r0, [r7, #4]
 8011c76:	4608      	mov	r0, r1
 8011c78:	4611      	mov	r1, r2
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	70fb      	strb	r3, [r7, #3]
 8011c80:	460b      	mov	r3, r1
 8011c82:	70bb      	strb	r3, [r7, #2]
 8011c84:	4613      	mov	r3, r2
 8011c86:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8011c88:	78ba      	ldrb	r2, [r7, #2]
 8011c8a:	78f9      	ldrb	r1, [r7, #3]
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	9307      	str	r3, [sp, #28]
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	9306      	str	r3, [sp, #24]
 8011c94:	883b      	ldrh	r3, [r7, #0]
 8011c96:	9305      	str	r3, [sp, #20]
 8011c98:	883b      	ldrh	r3, [r7, #0]
 8011c9a:	9304      	str	r3, [sp, #16]
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	9303      	str	r3, [sp, #12]
 8011ca0:	2302      	movs	r3, #2
 8011ca2:	9302      	str	r3, [sp, #8]
 8011ca4:	7c3b      	ldrb	r3, [r7, #16]
 8011ca6:	9301      	str	r3, [sp, #4]
 8011ca8:	2306      	movs	r3, #6
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	2380      	movs	r3, #128	; 0x80
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f7fe ffd5 	bl	8010c5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011cb4:	4603      	mov	r3, r0
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3708      	adds	r7, #8
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b09e      	sub	sp, #120	; 0x78
 8011cc2:	af08      	add	r7, sp, #32
 8011cc4:	6078      	str	r0, [r7, #4]
 8011cc6:	4608      	mov	r0, r1
 8011cc8:	4611      	mov	r1, r2
 8011cca:	461a      	mov	r2, r3
 8011ccc:	4603      	mov	r3, r0
 8011cce:	70fb      	strb	r3, [r7, #3]
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	70bb      	strb	r3, [r7, #2]
 8011cd4:	4613      	mov	r3, r2
 8011cd6:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8011cd8:	2340      	movs	r3, #64	; 0x40
 8011cda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8011cde:	f107 030c 	add.w	r3, r7, #12
 8011ce2:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8011ce4:	78ba      	ldrb	r2, [r7, #2]
 8011ce6:	78f9      	ldrb	r1, [r7, #3]
 8011ce8:	f107 030c 	add.w	r3, r7, #12
 8011cec:	9301      	str	r3, [sp, #4]
 8011cee:	787b      	ldrb	r3, [r7, #1]
 8011cf0:	9300      	str	r3, [sp, #0]
 8011cf2:	2309      	movs	r3, #9
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7ff ffba 	bl	8011c6e <_ZN3USB12getConfDescrEhhthPh>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8011d00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d002      	beq.n	8011d0e <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8011d08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011d0c:	e020      	b.n	8011d50 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8011d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d10:	789a      	ldrb	r2, [r3, #2]
 8011d12:	78db      	ldrb	r3, [r3, #3]
 8011d14:	021b      	lsls	r3, r3, #8
 8011d16:	4313      	orrs	r3, r2
 8011d18:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8011d1c:	78ba      	ldrb	r2, [r7, #2]
 8011d1e:	78f9      	ldrb	r1, [r7, #3]
 8011d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d22:	9307      	str	r3, [sp, #28]
 8011d24:	f107 030c 	add.w	r3, r7, #12
 8011d28:	9306      	str	r3, [sp, #24]
 8011d2a:	2340      	movs	r3, #64	; 0x40
 8011d2c:	9305      	str	r3, [sp, #20]
 8011d2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8011d32:	9304      	str	r3, [sp, #16]
 8011d34:	2300      	movs	r3, #0
 8011d36:	9303      	str	r3, [sp, #12]
 8011d38:	2302      	movs	r3, #2
 8011d3a:	9302      	str	r3, [sp, #8]
 8011d3c:	787b      	ldrb	r3, [r7, #1]
 8011d3e:	9301      	str	r3, [sp, #4]
 8011d40:	2306      	movs	r3, #6
 8011d42:	9300      	str	r3, [sp, #0]
 8011d44:	2380      	movs	r3, #128	; 0x80
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	f7fe ff89 	bl	8010c5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	bf00      	nop
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3758      	adds	r7, #88	; 0x58
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b08c      	sub	sp, #48	; 0x30
 8011d5c:	af08      	add	r7, sp, #32
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	4608      	mov	r0, r1
 8011d62:	4611      	mov	r1, r2
 8011d64:	461a      	mov	r2, r3
 8011d66:	4603      	mov	r3, r0
 8011d68:	70fb      	strb	r3, [r7, #3]
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	70bb      	strb	r3, [r7, #2]
 8011d6e:	4613      	mov	r3, r2
 8011d70:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8011d72:	78ba      	ldrb	r2, [r7, #2]
 8011d74:	78f9      	ldrb	r1, [r7, #3]
 8011d76:	2300      	movs	r3, #0
 8011d78:	9307      	str	r3, [sp, #28]
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	9306      	str	r3, [sp, #24]
 8011d7e:	2300      	movs	r3, #0
 8011d80:	9305      	str	r3, [sp, #20]
 8011d82:	2300      	movs	r3, #0
 8011d84:	9304      	str	r3, [sp, #16]
 8011d86:	2300      	movs	r3, #0
 8011d88:	9303      	str	r3, [sp, #12]
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	9302      	str	r3, [sp, #8]
 8011d8e:	787b      	ldrb	r3, [r7, #1]
 8011d90:	9301      	str	r3, [sp, #4]
 8011d92:	2305      	movs	r3, #5
 8011d94:	9300      	str	r3, [sp, #0]
 8011d96:	2300      	movs	r3, #0
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f7fe ff60 	bl	8010c5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8011da2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011da6:	f7f0 f87d 	bl	8001ea4 <HAL_Delay>
        return rcode;
 8011daa:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	3710      	adds	r7, #16
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b08a      	sub	sp, #40	; 0x28
 8011db8:	af08      	add	r7, sp, #32
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	4608      	mov	r0, r1
 8011dbe:	4611      	mov	r1, r2
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	70fb      	strb	r3, [r7, #3]
 8011dc6:	460b      	mov	r3, r1
 8011dc8:	70bb      	strb	r3, [r7, #2]
 8011dca:	4613      	mov	r3, r2
 8011dcc:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 8011dce:	78ba      	ldrb	r2, [r7, #2]
 8011dd0:	78f9      	ldrb	r1, [r7, #3]
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	9307      	str	r3, [sp, #28]
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	9306      	str	r3, [sp, #24]
 8011dda:	2300      	movs	r3, #0
 8011ddc:	9305      	str	r3, [sp, #20]
 8011dde:	2300      	movs	r3, #0
 8011de0:	9304      	str	r3, [sp, #16]
 8011de2:	2300      	movs	r3, #0
 8011de4:	9303      	str	r3, [sp, #12]
 8011de6:	2300      	movs	r3, #0
 8011de8:	9302      	str	r3, [sp, #8]
 8011dea:	787b      	ldrb	r3, [r7, #1]
 8011dec:	9301      	str	r3, [sp, #4]
 8011dee:	2309      	movs	r3, #9
 8011df0:	9300      	str	r3, [sp, #0]
 8011df2:	2300      	movs	r3, #0
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f7fe ff32 	bl	8010c5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8011dfa:	4603      	mov	r3, r0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3708      	adds	r7, #8
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
};
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	4618      	mov	r0, r3
 8011e10:	370c      	adds	r7, #12
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr
	...

08011e1c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 8011e1c:	b480      	push	{r7}
 8011e1e:	b083      	sub	sp, #12
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	4a04      	ldr	r2, [pc, #16]	; (8011e38 <_ZN11AddressPoolC1Ev+0x1c>)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	601a      	str	r2, [r3, #0]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	370c      	adds	r7, #12
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr
 8011e38:	08012958 	.word	0x08012958

08011e3c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7ff ffe8 	bl	8011e1c <_ZN11AddressPoolC1Ev>
 8011e4c:	4a17      	ldr	r2, [pc, #92]	; (8011eac <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	601a      	str	r2, [r3, #0]
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	2200      	movs	r2, #0
 8011e56:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8011e58:	2100      	movs	r1, #0
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f000 f990 	bl	8012180 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2200      	movs	r2, #0
 8011e64:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	1d1a      	adds	r2, r3, #4
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2200      	movs	r2, #0
 8011e72:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2208      	movs	r2, #8
 8011e78:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8011e7a:	687a      	ldr	r2, [r7, #4]
 8011e7c:	7993      	ldrb	r3, [r2, #6]
 8011e7e:	f36f 0300 	bfc	r3, #0, #1
 8011e82:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	7993      	ldrb	r3, [r2, #6]
 8011e88:	f36f 0341 	bfc	r3, #1, #1
 8011e8c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	7993      	ldrb	r3, [r2, #6]
 8011e92:	210f      	movs	r1, #15
 8011e94:	f361 0387 	bfi	r3, r1, #2, #6
 8011e98:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f000 f9a1 	bl	80121e2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	08012944 	.word	0x08012944

08011eb0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	460b      	mov	r3, r1
 8011eba:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8011ebc:	78fb      	ldrb	r3, [r7, #3]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d102      	bne.n	8011ec8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	3308      	adds	r3, #8
 8011ec6:	e014      	b.n	8011ef2 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8011ec8:	78fb      	ldrb	r3, [r7, #3]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f000 f9a1 	bl	8012214 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8011ed6:	7bfb      	ldrb	r3, [r7, #15]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d008      	beq.n	8011eee <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f103 0108 	add.w	r1, r3, #8
 8011ee2:	7bfa      	ldrb	r2, [r7, #15]
 8011ee4:	4613      	mov	r3, r2
 8011ee6:	00db      	lsls	r3, r3, #3
 8011ee8:	1a9b      	subs	r3, r3, r2
 8011eea:	440b      	add	r3, r1
 8011eec:	e000      	b.n	8011ef0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 8011eee:	2300      	movs	r3, #0
 8011ef0:	bf00      	nop
        };
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3710      	adds	r7, #16
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
	...

08011efc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b086      	sub	sp, #24
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	60f8      	str	r0, [r7, #12]
 8011f04:	607b      	str	r3, [r7, #4]
 8011f06:	460b      	mov	r3, r1
 8011f08:	72fb      	strb	r3, [r7, #11]
 8011f0a:	4613      	mov	r3, r2
 8011f0c:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011f0e:	f7ee fcf9 	bl	8000904 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8011f12:	7afb      	ldrb	r3, [r7, #11]
 8011f14:	f043 0302 	orr.w	r3, r3, #2
 8011f18:	b2db      	uxtb	r3, r3
 8011f1a:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 8011f1c:	f107 0117 	add.w	r1, r7, #23
 8011f20:	f04f 33ff 	mov.w	r3, #4294967295
 8011f24:	2201      	movs	r2, #1
 8011f26:	480b      	ldr	r0, [pc, #44]	; (8011f54 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011f28:	f7f2 fd8d 	bl	8004a46 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8011f2c:	7abb      	ldrb	r3, [r7, #10]
 8011f2e:	b29a      	uxth	r2, r3
 8011f30:	f04f 33ff 	mov.w	r3, #4294967295
 8011f34:	6879      	ldr	r1, [r7, #4]
 8011f36:	4807      	ldr	r0, [pc, #28]	; (8011f54 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8011f38:	f7f2 fd85 	bl	8004a46 <HAL_SPI_Transmit>
        data_p += nbytes;
 8011f3c:	7abb      	ldrb	r3, [r7, #10]
 8011f3e:	687a      	ldr	r2, [r7, #4]
 8011f40:	4413      	add	r3, r2
 8011f42:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8011f44:	f7ee fcd2 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 8011f48:	687b      	ldr	r3, [r7, #4]
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3718      	adds	r7, #24
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	200002a8 	.word	0x200002a8

08011f58 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8011f58:	b480      	push	{r7}
 8011f5a:	b083      	sub	sp, #12
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	4603      	mov	r3, r0
 8011f60:	6039      	str	r1, [r7, #0]
 8011f62:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8011f64:	bf00      	nop
 8011f66:	370c      	adds	r7, #12
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr

08011f70 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b084      	sub	sp, #16
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	60f8      	str	r0, [r7, #12]
 8011f78:	607b      	str	r3, [r7, #4]
 8011f7a:	460b      	mov	r3, r1
 8011f7c:	72fb      	strb	r3, [r7, #11]
 8011f7e:	4613      	mov	r3, r2
 8011f80:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8011f82:	f7ee fcbf 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8011f86:	f107 010b 	add.w	r1, r7, #11
 8011f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f8e:	2201      	movs	r2, #1
 8011f90:	480d      	ldr	r0, [pc, #52]	; (8011fc8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8011f92:	f7f2 fd58 	bl	8004a46 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8011f96:	7abb      	ldrb	r3, [r7, #10]
 8011f98:	461a      	mov	r2, r3
 8011f9a:	2100      	movs	r1, #0
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f000 fa91 	bl	80124c4 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8011fa2:	7abb      	ldrb	r3, [r7, #10]
 8011fa4:	b29a      	uxth	r2, r3
 8011fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8011faa:	6879      	ldr	r1, [r7, #4]
 8011fac:	4806      	ldr	r0, [pc, #24]	; (8011fc8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8011fae:	f7f2 fe86 	bl	8004cbe <HAL_SPI_Receive>
        data_p += nbytes;
 8011fb2:	7abb      	ldrb	r3, [r7, #10]
 8011fb4:	687a      	ldr	r2, [r7, #4]
 8011fb6:	4413      	add	r3, r2
 8011fb8:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8011fba:	f7ee fc97 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 8011fbe:	687b      	ldr	r3, [r7, #4]
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3710      	adds	r7, #16
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	200002a8 	.word	0x200002a8

08011fcc <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8011fd8:	f7fe fd46 	bl	8010a68 <_ZN2P95IsSetEv>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8011fe0:	7bbb      	ldrb	r3, [r7, #14]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d104      	bne.n	8011ff0 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 f937 	bl	801225a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 8011fec:	4603      	mov	r3, r0
 8011fee:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8011ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3710      	adds	r7, #16
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}
	...

08011ffc <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
                return vbusState;
 8012004:	4b03      	ldr	r3, [pc, #12]	; (8012014 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8012006:	781b      	ldrb	r3, [r3, #0]
        };
 8012008:	4618      	mov	r0, r3
 801200a:	370c      	adds	r7, #12
 801200c:	46bd      	mov	sp, r7
 801200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012012:	4770      	bx	lr
 8012014:	20000624 	.word	0x20000624

08012018 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8012018:	b580      	push	{r7, lr}
 801201a:	b084      	sub	sp, #16
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	4608      	mov	r0, r1
 8012022:	4611      	mov	r1, r2
 8012024:	461a      	mov	r2, r3
 8012026:	4603      	mov	r3, r0
 8012028:	70fb      	strb	r3, [r7, #3]
 801202a:	460b      	mov	r3, r1
 801202c:	70bb      	strb	r3, [r7, #2]
 801202e:	4613      	mov	r3, r2
 8012030:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8012032:	78fb      	ldrb	r3, [r7, #3]
 8012034:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8012036:	7b3b      	ldrb	r3, [r7, #12]
 8012038:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801203c:	b2db      	uxtb	r3, r3
 801203e:	2b00      	cmp	r3, #0
 8012040:	d102      	bne.n	8012048 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8012042:	787b      	ldrb	r3, [r7, #1]
 8012044:	2b07      	cmp	r3, #7
 8012046:	d901      	bls.n	801204c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8012048:	2300      	movs	r3, #0
 801204a:	e079      	b.n	8012140 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 801204c:	78bb      	ldrb	r3, [r7, #2]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d005      	beq.n	801205e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	79db      	ldrb	r3, [r3, #7]
 8012056:	2b07      	cmp	r3, #7
 8012058:	d101      	bne.n	801205e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 801205a:	2300      	movs	r3, #0
 801205c:	e070      	b.n	8012140 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 801205e:	2100      	movs	r1, #0
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f000 f8d7 	bl	8012214 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8012066:	4603      	mov	r3, r0
 8012068:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 801206a:	7bfb      	ldrb	r3, [r7, #15]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d101      	bne.n	8012074 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8012070:	2300      	movs	r3, #0
 8012072:	e065      	b.n	8012140 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8012074:	7b3b      	ldrb	r3, [r7, #12]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d124      	bne.n	80120c4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 801207a:	78bb      	ldrb	r3, [r7, #2]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00f      	beq.n	80120a0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8012080:	7bfa      	ldrb	r2, [r7, #15]
 8012082:	6879      	ldr	r1, [r7, #4]
 8012084:	4613      	mov	r3, r2
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	1a9b      	subs	r3, r3, r2
 801208a:	440b      	add	r3, r1
 801208c:	330c      	adds	r3, #12
 801208e:	2241      	movs	r2, #65	; 0x41
 8012090:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	79db      	ldrb	r3, [r3, #7]
 8012096:	3301      	adds	r3, #1
 8012098:	b2da      	uxtb	r2, r3
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	71da      	strb	r2, [r3, #7]
 801209e:	e008      	b.n	80120b2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 80120a0:	7bfa      	ldrb	r2, [r7, #15]
 80120a2:	6879      	ldr	r1, [r7, #4]
 80120a4:	4613      	mov	r3, r2
 80120a6:	00db      	lsls	r3, r3, #3
 80120a8:	1a9b      	subs	r3, r3, r2
 80120aa:	440b      	add	r3, r1
 80120ac:	330c      	adds	r3, #12
 80120ae:	2201      	movs	r2, #1
 80120b0:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 80120b2:	7bfa      	ldrb	r2, [r7, #15]
 80120b4:	6879      	ldr	r1, [r7, #4]
 80120b6:	4613      	mov	r3, r2
 80120b8:	00db      	lsls	r3, r3, #3
 80120ba:	1a9b      	subs	r3, r3, r2
 80120bc:	440b      	add	r3, r1
 80120be:	330c      	adds	r3, #12
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	e03d      	b.n	8012140 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 80120c4:	2300      	movs	r3, #0
 80120c6:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 80120c8:	7b3b      	ldrb	r3, [r7, #12]
 80120ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80120ce:	b2da      	uxtb	r2, r3
 80120d0:	7a3b      	ldrb	r3, [r7, #8]
 80120d2:	f362 03c5 	bfi	r3, r2, #3, #3
 80120d6:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 80120d8:	78bb      	ldrb	r3, [r7, #2]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d013      	beq.n	8012106 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 80120de:	7a3b      	ldrb	r3, [r7, #8]
 80120e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120e4:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	79db      	ldrb	r3, [r3, #7]
 80120ea:	3301      	adds	r3, #1
 80120ec:	b2da      	uxtb	r2, r3
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	71da      	strb	r2, [r3, #7]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	79db      	ldrb	r3, [r3, #7]
 80120f6:	f003 0307 	and.w	r3, r3, #7
 80120fa:	b2da      	uxtb	r2, r3
 80120fc:	7a3b      	ldrb	r3, [r7, #8]
 80120fe:	f362 0302 	bfi	r3, r2, #0, #3
 8012102:	723b      	strb	r3, [r7, #8]
 8012104:	e00b      	b.n	801211e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 8012106:	7a3b      	ldrb	r3, [r7, #8]
 8012108:	f36f 1386 	bfc	r3, #6, #1
 801210c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 801210e:	787b      	ldrb	r3, [r7, #1]
 8012110:	f003 0307 	and.w	r3, r3, #7
 8012114:	b2da      	uxtb	r2, r3
 8012116:	7a3b      	ldrb	r3, [r7, #8]
 8012118:	f362 0302 	bfi	r3, r2, #0, #3
 801211c:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 801211e:	7bfa      	ldrb	r2, [r7, #15]
 8012120:	6879      	ldr	r1, [r7, #4]
 8012122:	4613      	mov	r3, r2
 8012124:	00db      	lsls	r3, r3, #3
 8012126:	1a9b      	subs	r3, r3, r2
 8012128:	440b      	add	r3, r1
 801212a:	330c      	adds	r3, #12
 801212c:	7a3a      	ldrb	r2, [r7, #8]
 801212e:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 8012130:	7bfa      	ldrb	r2, [r7, #15]
 8012132:	6879      	ldr	r1, [r7, #4]
 8012134:	4613      	mov	r3, r2
 8012136:	00db      	lsls	r3, r3, #3
 8012138:	1a9b      	subs	r3, r3, r2
 801213a:	440b      	add	r3, r1
 801213c:	330c      	adds	r3, #12
 801213e:	781b      	ldrb	r3, [r3, #0]
        };
 8012140:	4618      	mov	r0, r3
 8012142:	3710      	adds	r7, #16
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	460b      	mov	r3, r1
 8012152:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8012154:	78fb      	ldrb	r3, [r7, #3]
 8012156:	2b41      	cmp	r3, #65	; 0x41
 8012158:	d103      	bne.n	8012162 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f000 f841 	bl	80121e2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8012160:	e00b      	b.n	801217a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8012162:	78fb      	ldrb	r3, [r7, #3]
 8012164:	4619      	mov	r1, r3
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f000 f854 	bl	8012214 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801216c:	4603      	mov	r3, r0
 801216e:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8012170:	7bfb      	ldrb	r3, [r7, #15]
 8012172:	4619      	mov	r1, r3
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f000 f893 	bl	80122a0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 801217a:	3710      	adds	r7, #16
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8012180:	b480      	push	{r7}
 8012182:	b083      	sub	sp, #12
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	460b      	mov	r3, r1
 801218a:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 801218c:	78fa      	ldrb	r2, [r7, #3]
 801218e:	6879      	ldr	r1, [r7, #4]
 8012190:	4613      	mov	r3, r2
 8012192:	00db      	lsls	r3, r3, #3
 8012194:	1a9b      	subs	r3, r3, r2
 8012196:	440b      	add	r3, r1
 8012198:	330c      	adds	r3, #12
 801219a:	2200      	movs	r2, #0
 801219c:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 801219e:	78fa      	ldrb	r2, [r7, #3]
 80121a0:	6879      	ldr	r1, [r7, #4]
 80121a2:	4613      	mov	r3, r2
 80121a4:	00db      	lsls	r3, r3, #3
 80121a6:	1a9b      	subs	r3, r3, r2
 80121a8:	440b      	add	r3, r1
 80121aa:	330d      	adds	r3, #13
 80121ac:	2201      	movs	r2, #1
 80121ae:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 80121b0:	78fa      	ldrb	r2, [r7, #3]
 80121b2:	6879      	ldr	r1, [r7, #4]
 80121b4:	4613      	mov	r3, r2
 80121b6:	00db      	lsls	r3, r3, #3
 80121b8:	1a9b      	subs	r3, r3, r2
 80121ba:	440b      	add	r3, r1
 80121bc:	330e      	adds	r3, #14
 80121be:	2200      	movs	r2, #0
 80121c0:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 80121c2:	78fa      	ldrb	r2, [r7, #3]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	1d19      	adds	r1, r3, #4
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	4613      	mov	r3, r2
 80121cc:	00db      	lsls	r3, r3, #3
 80121ce:	1a9b      	subs	r3, r3, r2
 80121d0:	4403      	add	r3, r0
 80121d2:	3308      	adds	r3, #8
 80121d4:	6019      	str	r1, [r3, #0]
        };
 80121d6:	bf00      	nop
 80121d8:	370c      	adds	r7, #12
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr

080121e2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 80121e2:	b580      	push	{r7, lr}
 80121e4:	b084      	sub	sp, #16
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80121ea:	2301      	movs	r3, #1
 80121ec:	73fb      	strb	r3, [r7, #15]
 80121ee:	7bfb      	ldrb	r3, [r7, #15]
 80121f0:	2b0f      	cmp	r3, #15
 80121f2:	d808      	bhi.n	8012206 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 80121f4:	7bfb      	ldrb	r3, [r7, #15]
 80121f6:	4619      	mov	r1, r3
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f7ff ffc1 	bl	8012180 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80121fe:	7bfb      	ldrb	r3, [r7, #15]
 8012200:	3301      	adds	r3, #1
 8012202:	73fb      	strb	r3, [r7, #15]
 8012204:	e7f3      	b.n	80121ee <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2200      	movs	r2, #0
 801220a:	71da      	strb	r2, [r3, #7]
        };
 801220c:	bf00      	nop
 801220e:	3710      	adds	r7, #16
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}

08012214 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 8012214:	b480      	push	{r7}
 8012216:	b085      	sub	sp, #20
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	460b      	mov	r3, r1
 801221e:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8012220:	2301      	movs	r3, #1
 8012222:	73fb      	strb	r3, [r7, #15]
 8012224:	7bfb      	ldrb	r3, [r7, #15]
 8012226:	2b0f      	cmp	r3, #15
 8012228:	d810      	bhi.n	801224c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 801222a:	7bfa      	ldrb	r2, [r7, #15]
 801222c:	6879      	ldr	r1, [r7, #4]
 801222e:	4613      	mov	r3, r2
 8012230:	00db      	lsls	r3, r3, #3
 8012232:	1a9b      	subs	r3, r3, r2
 8012234:	440b      	add	r3, r1
 8012236:	330c      	adds	r3, #12
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	78fa      	ldrb	r2, [r7, #3]
 801223c:	429a      	cmp	r2, r3
 801223e:	d101      	bne.n	8012244 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8012240:	7bfb      	ldrb	r3, [r7, #15]
 8012242:	e004      	b.n	801224e <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8012244:	7bfb      	ldrb	r3, [r7, #15]
 8012246:	3301      	adds	r3, #1
 8012248:	73fb      	strb	r3, [r7, #15]
 801224a:	e7eb      	b.n	8012224 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 801224c:	2300      	movs	r3, #0
        };
 801224e:	4618      	mov	r0, r3
 8012250:	3714      	adds	r7, #20
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr

0801225a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 801225a:	b580      	push	{r7, lr}
 801225c:	b084      	sub	sp, #16
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8012262:	2300      	movs	r3, #0
 8012264:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8012266:	21c8      	movs	r1, #200	; 0xc8
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f7ef fb3d 	bl	80018e8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801226e:	4603      	mov	r3, r0
 8012270:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8012272:	7bbb      	ldrb	r3, [r7, #14]
 8012274:	f003 0320 	and.w	r3, r3, #32
 8012278:	2b00      	cmp	r3, #0
 801227a:	d006      	beq.n	801228a <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7ef fb55 	bl	800192c <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8012282:	7bfb      	ldrb	r3, [r7, #15]
 8012284:	f043 0320 	orr.w	r3, r3, #32
 8012288:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801228a:	7bfb      	ldrb	r3, [r7, #15]
 801228c:	461a      	mov	r2, r3
 801228e:	21c8      	movs	r1, #200	; 0xc8
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7ef fad7 	bl	8001844 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 8012296:	7bfb      	ldrb	r3, [r7, #15]
}
 8012298:	4618      	mov	r0, r3
 801229a:	3710      	adds	r7, #16
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b084      	sub	sp, #16
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	460b      	mov	r3, r1
 80122aa:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 80122ac:	78fb      	ldrb	r3, [r7, #3]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d03a      	beq.n	8012328 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 80122b2:	78fa      	ldrb	r2, [r7, #3]
 80122b4:	6879      	ldr	r1, [r7, #4]
 80122b6:	4613      	mov	r3, r2
 80122b8:	00db      	lsls	r3, r3, #3
 80122ba:	1a9b      	subs	r3, r3, r2
 80122bc:	440b      	add	r3, r1
 80122be:	330c      	adds	r3, #12
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 80122c4:	7b3b      	ldrb	r3, [r7, #12]
 80122c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d025      	beq.n	801231c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80122d0:	2301      	movs	r3, #1
 80122d2:	73fb      	strb	r3, [r7, #15]
 80122d4:	7bfb      	ldrb	r3, [r7, #15]
 80122d6:	461a      	mov	r2, r3
 80122d8:	7b39      	ldrb	r1, [r7, #12]
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f000 f828 	bl	8012330 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 80122e0:	4603      	mov	r3, r0
 80122e2:	73fb      	strb	r3, [r7, #15]
 80122e4:	7bfb      	ldrb	r3, [r7, #15]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	bf14      	ite	ne
 80122ea:	2301      	movne	r3, #1
 80122ec:	2300      	moveq	r3, #0
 80122ee:	b2db      	uxtb	r3, r3
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d005      	beq.n	8012300 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 80122f4:	7bfb      	ldrb	r3, [r7, #15]
 80122f6:	4619      	mov	r1, r3
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f7ff ffd1 	bl	80122a0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80122fe:	e7e9      	b.n	80122d4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	79db      	ldrb	r3, [r3, #7]
 8012304:	7b3a      	ldrb	r2, [r7, #12]
 8012306:	f3c2 0202 	ubfx	r2, r2, #0, #3
 801230a:	b2d2      	uxtb	r2, r2
 801230c:	4293      	cmp	r3, r2
 801230e:	d105      	bne.n	801231c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	79db      	ldrb	r3, [r3, #7]
 8012314:	3b01      	subs	r3, #1
 8012316:	b2da      	uxtb	r2, r3
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 801231c:	78fb      	ldrb	r3, [r7, #3]
 801231e:	4619      	mov	r1, r3
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f7ff ff2d 	bl	8012180 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 8012326:	e000      	b.n	801232a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 8012328:	bf00      	nop
        }
 801232a:	3710      	adds	r7, #16
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 8012330:	b480      	push	{r7}
 8012332:	b085      	sub	sp, #20
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	7039      	strb	r1, [r7, #0]
 801233a:	4613      	mov	r3, r2
 801233c:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801233e:	78fb      	ldrb	r3, [r7, #3]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d004      	beq.n	801234e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8012344:	78fb      	ldrb	r3, [r7, #3]
 8012346:	2b0f      	cmp	r3, #15
 8012348:	d801      	bhi.n	801234e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 801234a:	78fb      	ldrb	r3, [r7, #3]
 801234c:	e000      	b.n	8012350 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 801234e:	2301      	movs	r3, #1
 8012350:	73fb      	strb	r3, [r7, #15]
 8012352:	7bfb      	ldrb	r3, [r7, #15]
 8012354:	2b0f      	cmp	r3, #15
 8012356:	d816      	bhi.n	8012386 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8012358:	7bfa      	ldrb	r2, [r7, #15]
 801235a:	6879      	ldr	r1, [r7, #4]
 801235c:	4613      	mov	r3, r2
 801235e:	00db      	lsls	r3, r3, #3
 8012360:	1a9b      	subs	r3, r3, r2
 8012362:	440b      	add	r3, r1
 8012364:	3308      	adds	r3, #8
 8012366:	791b      	ldrb	r3, [r3, #4]
 8012368:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801236c:	b2da      	uxtb	r2, r3
 801236e:	783b      	ldrb	r3, [r7, #0]
 8012370:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012374:	b2db      	uxtb	r3, r3
 8012376:	429a      	cmp	r2, r3
 8012378:	d101      	bne.n	801237e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 801237a:	7bfb      	ldrb	r3, [r7, #15]
 801237c:	e004      	b.n	8012388 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801237e:	7bfb      	ldrb	r3, [r7, #15]
 8012380:	3301      	adds	r3, #1
 8012382:	73fb      	strb	r3, [r7, #15]
 8012384:	e7e5      	b.n	8012352 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8012386:	2300      	movs	r3, #0
        };
 8012388:	4618      	mov	r0, r3
 801238a:	3714      	adds	r7, #20
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8012394:	b480      	push	{r7}
 8012396:	b085      	sub	sp, #20
 8012398:	af00      	add	r7, sp, #0
 801239a:	60f8      	str	r0, [r7, #12]
 801239c:	60b9      	str	r1, [r7, #8]
 801239e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d101      	bne.n	80123ac <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 80123a8:	2300      	movs	r3, #0
 80123aa:	e031      	b.n	8012410 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	791b      	ldrb	r3, [r3, #4]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d022      	beq.n	80123fa <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	881b      	ldrh	r3, [r3, #0]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d01e      	beq.n	80123fa <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	68f9      	ldr	r1, [r7, #12]
 80123c6:	7949      	ldrb	r1, [r1, #5]
 80123c8:	4608      	mov	r0, r1
 80123ca:	68f9      	ldr	r1, [r7, #12]
 80123cc:	7909      	ldrb	r1, [r1, #4]
 80123ce:	1a41      	subs	r1, r0, r1
 80123d0:	440b      	add	r3, r1
 80123d2:	7812      	ldrb	r2, [r2, #0]
 80123d4:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	791b      	ldrb	r3, [r3, #4]
 80123da:	3b01      	subs	r3, #1
 80123dc:	b2da      	uxtb	r2, r3
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	711a      	strb	r2, [r3, #4]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	881b      	ldrh	r3, [r3, #0]
 80123e6:	3b01      	subs	r3, #1
 80123e8:	b29a      	uxth	r2, r3
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	801a      	strh	r2, [r3, #0]
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	1c5a      	adds	r2, r3, #1
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	601a      	str	r2, [r3, #0]
 80123f8:	e7d8      	b.n	80123ac <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	791b      	ldrb	r3, [r3, #4]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d001      	beq.n	8012406 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 8012402:	2300      	movs	r3, #0
 8012404:	e004      	b.n	8012410 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	795a      	ldrb	r2, [r3, #5]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	711a      	strb	r2, [r3, #4]
        return true;
 801240e:	2301      	movs	r3, #1
}
 8012410:	4618      	mov	r0, r3
 8012412:	3714      	adds	r7, #20
 8012414:	46bd      	mov	sp, r7
 8012416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241a:	4770      	bx	lr

0801241c <__cxa_pure_virtual>:
 801241c:	b508      	push	{r3, lr}
 801241e:	f000 f80d 	bl	801243c <_ZSt9terminatev>

08012422 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012422:	b508      	push	{r3, lr}
 8012424:	4780      	blx	r0
 8012426:	f000 f80e 	bl	8012446 <abort>
	...

0801242c <_ZSt13get_terminatev>:
 801242c:	4b02      	ldr	r3, [pc, #8]	; (8012438 <_ZSt13get_terminatev+0xc>)
 801242e:	6818      	ldr	r0, [r3, #0]
 8012430:	f3bf 8f5b 	dmb	ish
 8012434:	4770      	bx	lr
 8012436:	bf00      	nop
 8012438:	20000110 	.word	0x20000110

0801243c <_ZSt9terminatev>:
 801243c:	b508      	push	{r3, lr}
 801243e:	f7ff fff5 	bl	801242c <_ZSt13get_terminatev>
 8012442:	f7ff ffee 	bl	8012422 <_ZN10__cxxabiv111__terminateEPFvvE>

08012446 <abort>:
 8012446:	b508      	push	{r3, lr}
 8012448:	2006      	movs	r0, #6
 801244a:	f000 f86b 	bl	8012524 <raise>
 801244e:	2001      	movs	r0, #1
 8012450:	f7ef fc9c 	bl	8001d8c <_exit>

08012454 <__errno>:
 8012454:	4b01      	ldr	r3, [pc, #4]	; (801245c <__errno+0x8>)
 8012456:	6818      	ldr	r0, [r3, #0]
 8012458:	4770      	bx	lr
 801245a:	bf00      	nop
 801245c:	20000114 	.word	0x20000114

08012460 <__libc_init_array>:
 8012460:	b570      	push	{r4, r5, r6, lr}
 8012462:	4d0d      	ldr	r5, [pc, #52]	; (8012498 <__libc_init_array+0x38>)
 8012464:	4c0d      	ldr	r4, [pc, #52]	; (801249c <__libc_init_array+0x3c>)
 8012466:	1b64      	subs	r4, r4, r5
 8012468:	10a4      	asrs	r4, r4, #2
 801246a:	2600      	movs	r6, #0
 801246c:	42a6      	cmp	r6, r4
 801246e:	d109      	bne.n	8012484 <__libc_init_array+0x24>
 8012470:	4d0b      	ldr	r5, [pc, #44]	; (80124a0 <__libc_init_array+0x40>)
 8012472:	4c0c      	ldr	r4, [pc, #48]	; (80124a4 <__libc_init_array+0x44>)
 8012474:	f000 f884 	bl	8012580 <_init>
 8012478:	1b64      	subs	r4, r4, r5
 801247a:	10a4      	asrs	r4, r4, #2
 801247c:	2600      	movs	r6, #0
 801247e:	42a6      	cmp	r6, r4
 8012480:	d105      	bne.n	801248e <__libc_init_array+0x2e>
 8012482:	bd70      	pop	{r4, r5, r6, pc}
 8012484:	f855 3b04 	ldr.w	r3, [r5], #4
 8012488:	4798      	blx	r3
 801248a:	3601      	adds	r6, #1
 801248c:	e7ee      	b.n	801246c <__libc_init_array+0xc>
 801248e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012492:	4798      	blx	r3
 8012494:	3601      	adds	r6, #1
 8012496:	e7f2      	b.n	801247e <__libc_init_array+0x1e>
 8012498:	080129cc 	.word	0x080129cc
 801249c:	080129cc 	.word	0x080129cc
 80124a0:	080129cc 	.word	0x080129cc
 80124a4:	080129d4 	.word	0x080129d4

080124a8 <memcpy>:
 80124a8:	440a      	add	r2, r1
 80124aa:	4291      	cmp	r1, r2
 80124ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80124b0:	d100      	bne.n	80124b4 <memcpy+0xc>
 80124b2:	4770      	bx	lr
 80124b4:	b510      	push	{r4, lr}
 80124b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80124be:	4291      	cmp	r1, r2
 80124c0:	d1f9      	bne.n	80124b6 <memcpy+0xe>
 80124c2:	bd10      	pop	{r4, pc}

080124c4 <memset>:
 80124c4:	4402      	add	r2, r0
 80124c6:	4603      	mov	r3, r0
 80124c8:	4293      	cmp	r3, r2
 80124ca:	d100      	bne.n	80124ce <memset+0xa>
 80124cc:	4770      	bx	lr
 80124ce:	f803 1b01 	strb.w	r1, [r3], #1
 80124d2:	e7f9      	b.n	80124c8 <memset+0x4>

080124d4 <_raise_r>:
 80124d4:	291f      	cmp	r1, #31
 80124d6:	b538      	push	{r3, r4, r5, lr}
 80124d8:	4604      	mov	r4, r0
 80124da:	460d      	mov	r5, r1
 80124dc:	d904      	bls.n	80124e8 <_raise_r+0x14>
 80124de:	2316      	movs	r3, #22
 80124e0:	6003      	str	r3, [r0, #0]
 80124e2:	f04f 30ff 	mov.w	r0, #4294967295
 80124e6:	bd38      	pop	{r3, r4, r5, pc}
 80124e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80124ea:	b112      	cbz	r2, 80124f2 <_raise_r+0x1e>
 80124ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124f0:	b94b      	cbnz	r3, 8012506 <_raise_r+0x32>
 80124f2:	4620      	mov	r0, r4
 80124f4:	f000 f830 	bl	8012558 <_getpid_r>
 80124f8:	462a      	mov	r2, r5
 80124fa:	4601      	mov	r1, r0
 80124fc:	4620      	mov	r0, r4
 80124fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012502:	f000 b817 	b.w	8012534 <_kill_r>
 8012506:	2b01      	cmp	r3, #1
 8012508:	d00a      	beq.n	8012520 <_raise_r+0x4c>
 801250a:	1c59      	adds	r1, r3, #1
 801250c:	d103      	bne.n	8012516 <_raise_r+0x42>
 801250e:	2316      	movs	r3, #22
 8012510:	6003      	str	r3, [r0, #0]
 8012512:	2001      	movs	r0, #1
 8012514:	e7e7      	b.n	80124e6 <_raise_r+0x12>
 8012516:	2400      	movs	r4, #0
 8012518:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801251c:	4628      	mov	r0, r5
 801251e:	4798      	blx	r3
 8012520:	2000      	movs	r0, #0
 8012522:	e7e0      	b.n	80124e6 <_raise_r+0x12>

08012524 <raise>:
 8012524:	4b02      	ldr	r3, [pc, #8]	; (8012530 <raise+0xc>)
 8012526:	4601      	mov	r1, r0
 8012528:	6818      	ldr	r0, [r3, #0]
 801252a:	f7ff bfd3 	b.w	80124d4 <_raise_r>
 801252e:	bf00      	nop
 8012530:	20000114 	.word	0x20000114

08012534 <_kill_r>:
 8012534:	b538      	push	{r3, r4, r5, lr}
 8012536:	4d07      	ldr	r5, [pc, #28]	; (8012554 <_kill_r+0x20>)
 8012538:	2300      	movs	r3, #0
 801253a:	4604      	mov	r4, r0
 801253c:	4608      	mov	r0, r1
 801253e:	4611      	mov	r1, r2
 8012540:	602b      	str	r3, [r5, #0]
 8012542:	f7ef fc13 	bl	8001d6c <_kill>
 8012546:	1c43      	adds	r3, r0, #1
 8012548:	d102      	bne.n	8012550 <_kill_r+0x1c>
 801254a:	682b      	ldr	r3, [r5, #0]
 801254c:	b103      	cbz	r3, 8012550 <_kill_r+0x1c>
 801254e:	6023      	str	r3, [r4, #0]
 8012550:	bd38      	pop	{r3, r4, r5, pc}
 8012552:	bf00      	nop
 8012554:	20005920 	.word	0x20005920

08012558 <_getpid_r>:
 8012558:	f7ef bc00 	b.w	8001d5c <_getpid>

0801255c <strncmp>:
 801255c:	b510      	push	{r4, lr}
 801255e:	b16a      	cbz	r2, 801257c <strncmp+0x20>
 8012560:	3901      	subs	r1, #1
 8012562:	1884      	adds	r4, r0, r2
 8012564:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012568:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801256c:	4293      	cmp	r3, r2
 801256e:	d103      	bne.n	8012578 <strncmp+0x1c>
 8012570:	42a0      	cmp	r0, r4
 8012572:	d001      	beq.n	8012578 <strncmp+0x1c>
 8012574:	2b00      	cmp	r3, #0
 8012576:	d1f5      	bne.n	8012564 <strncmp+0x8>
 8012578:	1a98      	subs	r0, r3, r2
 801257a:	bd10      	pop	{r4, pc}
 801257c:	4610      	mov	r0, r2
 801257e:	e7fc      	b.n	801257a <strncmp+0x1e>

08012580 <_init>:
 8012580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012582:	bf00      	nop
 8012584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012586:	bc08      	pop	{r3}
 8012588:	469e      	mov	lr, r3
 801258a:	4770      	bx	lr

0801258c <_fini>:
 801258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801258e:	bf00      	nop
 8012590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012592:	bc08      	pop	{r3}
 8012594:	469e      	mov	lr, r3
 8012596:	4770      	bx	lr
