
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001552c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000214c  080156fc  080156fc  000256fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017848  08017848  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  08017848  08017848  00027848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017850  08017850  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017850  08017850  00027850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017858  08017858  00027858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0801785c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ebc  20000188  080179e4  00030188  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006044  080179e4  00036044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00072862  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a8d6  00000000  00000000  000a2a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002de8  00000000  00000000  000ad2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c10  00000000  00000000  000b00d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff7b  00000000  00000000  000b2ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037d32  00000000  00000000  000e2c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9f81  00000000  00000000  0011a995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00214916  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c76c  00000000  00000000  0021496c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000188 	.word	0x20000188
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080156e4 	.word	0x080156e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000018c 	.word	0x2000018c
 800020c:	080156e4 	.word	0x080156e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f000 f805 	bl	8000618 <_ZN5Print5printEli>
 800060e:	4603      	mov	r3, r0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d109      	bne.n	800063e <_ZN5Print5printEli+0x26>
    return write(n);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	e029      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d11d      	bne.n	8000680 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	da12      	bge.n	8000670 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800064a:	212d      	movs	r1, #45	; 0x2d
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffc1 	bl	80005d4 <_ZN5Print5printEc>
 8000652:	4603      	mov	r3, r0
 8000654:	617b      	str	r3, [r7, #20]
      n = -n;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	425b      	negs	r3, r3
 800065a:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	220a      	movs	r2, #10
 8000660:	4619      	mov	r1, r3
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f000 f819 	bl	800069a <_ZN5Print11printNumberEmh>
 8000668:	4602      	mov	r2, r0
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4413      	add	r3, r2
 800066e:	e010      	b.n	8000692 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	220a      	movs	r2, #10
 8000674:	4619      	mov	r1, r3
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f000 f80f 	bl	800069a <_ZN5Print11printNumberEmh>
 800067c:	4603      	mov	r3, r0
 800067e:	e008      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f000 f806 	bl	800069a <_ZN5Print11printNumberEmh>
 800068e:	4603      	mov	r3, r0
 8000690:	bf00      	nop
  }
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b090      	sub	sp, #64	; 0x40
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	3320      	adds	r3, #32
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d801      	bhi.n	80006c0 <_ZN5Print11printNumberEmh+0x26>
 80006bc:	230a      	movs	r3, #10
 80006be:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	79f9      	ldrb	r1, [r7, #7]
 80006d8:	fb11 f303 	smulbb	r3, r1, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d804      	bhi.n	80006f6 <_ZN5Print11printNumberEmh+0x5c>
 80006ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006f0:	3330      	adds	r3, #48	; 0x30
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	e003      	b.n	80006fe <_ZN5Print11printNumberEmh+0x64>
 80006f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006fa:	3337      	adds	r3, #55	; 0x37
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000700:	3a01      	subs	r2, #1
 8000702:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000706:	7013      	strb	r3, [r2, #0]
  } while(n);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d000      	beq.n	8000710 <_ZN5Print11printNumberEmh+0x76>
  do {
 800070e:	e7d7      	b.n	80006c0 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f7ff ff00 	bl	8000518 <_ZN5Print5writeEPKc>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3740      	adds	r7, #64	; 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1cf9      	adds	r1, r7, #3
 8000738:	2201      	movs	r2, #1
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	4798      	blx	r3
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6918      	ldr	r0, [r3, #16]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	b29a      	uxth	r2, r3
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	6979      	ldr	r1, [r7, #20]
 8000766:	f006 fd7a 	bl	800725e <HAL_UART_Transmit>
	return size;
 800076a:	687b      	ldr	r3, [r7, #4]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6918      	ldr	r0, [r3, #16]
 8000780:	f107 010f 	add.w	r1, r7, #15
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	2201      	movs	r2, #1
 800078a:	f006 fdfa 	bl	8007382 <HAL_UART_Receive>
	return data;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	return -1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <eeprom_read_byte>:
  * @brief  Function reads a byte from emulated eeprom (flash)
  * @param  pos : address to read
  * @retval byte : data read from eeprom
  */
uint8_t eeprom_read_byte(const uint32_t pos)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    /* with actual EEPROM, pos is a relative address */
    data = *(__IO uint8_t *)(DATA_EEPROM_BASE + pos);
  }
  return (uint8_t)data;
#else
  eeprom_buffer_fill();
 80007e4:	f000 f83e 	bl	8000864 <eeprom_buffer_fill>
  return eeprom_buffered_read_byte(pos);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 f817 	bl	800081c <eeprom_buffered_read_byte>
 80007ee:	4603      	mov	r3, r0
#endif /* _EEPROM_BASE */
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <eeprom_write_byte>:
  * @param  pos : address to write
  * @param  value : value to write
  * @retval none
  */
void eeprom_write_byte(uint32_t pos, uint8_t value)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
      HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, (pos + DATA_EEPROM_BASE), (uint32_t)value);
      HAL_FLASHEx_DATAEEPROM_Lock();
    }
  }
#else
  eeprom_buffered_write_byte(pos, value);
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	4619      	mov	r1, r3
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f817 	bl	800083c <eeprom_buffered_write_byte>
  eeprom_buffer_flush();
 800080e:	f000 f83b 	bl	8000888 <eeprom_buffer_flush>
#endif /* _EEPROM_BASE */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <eeprom_buffered_read_byte>:
  * @brief  Function reads a byte from the eeprom buffer
  * @param  pos : address to read
  * @retval byte : data read from eeprom
  */
uint8_t eeprom_buffered_read_byte(const uint32_t pos)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  return eeprom_buffer[pos];
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <eeprom_buffered_read_byte+0x1c>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	200001a8 	.word	0x200001a8

0800083c <eeprom_buffered_write_byte>:
  * @param  pos : address to write
  * @param  value : value to write
  * @retval none
  */
void eeprom_buffered_write_byte(uint32_t pos, uint8_t value)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
  eeprom_buffer[pos] = value;
 8000848:	4a05      	ldr	r2, [pc, #20]	; (8000860 <eeprom_buffered_write_byte+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	78fa      	ldrb	r2, [r7, #3]
 8000850:	701a      	strb	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	200001a8 	.word	0x200001a8

08000864 <eeprom_buffer_fill>:
  * @brief  This function copies the data from flash into the buffer
  * @param  none
  * @retval none
  */
void eeprom_buffer_fill(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  memcpy(eeprom_buffer, (uint8_t *)(FLASH_BASE_ADDRESS), E2END + 1);
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <eeprom_buffer_fill+0x1c>)
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <eeprom_buffer_fill+0x20>)
 800086c:	4610      	mov	r0, r2
 800086e:	4619      	mov	r1, r3
 8000870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000874:	461a      	mov	r2, r3
 8000876:	f014 fec9 	bl	801560c <memcpy>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001a8 	.word	0x200001a8
 8000884:	0807fe00 	.word	0x0807fe00

08000888 <eeprom_buffer_flush>:
  * @brief  This function writes the buffer content into the flash
  * @param  none
  * @retval none
  */
void eeprom_buffer_flush(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t offset = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t address = FLASH_BASE_ADDRESS;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <eeprom_buffer_flush+0x8c>)
 8000894:	623b      	str	r3, [r7, #32]
  uint32_t address_end = FLASH_BASE_ADDRESS + E2END;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <eeprom_buffer_flush+0x90>)
 8000898:	61fb      	str	r3, [r7, #28]
      }
    }
    HAL_FLASH_Lock();
  }
#else
  uint32_t SectorError = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
#if defined(STM32H7xx)
  uint64_t data[4] = {0x0000};
#else
  uint32_t data = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
#endif

  /* ERASING page */
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
#if defined(STM32H7xx)
  EraseInitStruct.Banks = FLASH_BANK_NUMBER;
#endif
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
  EraseInitStruct.Sector = FLASH_DATA_SECTOR;
 80008aa:	2307      	movs	r3, #7
 80008ac:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]

  HAL_FLASH_Unlock();
 80008b2:	f002 f909 	bl	8002ac8 <HAL_FLASH_Unlock>

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK) {
 80008b6:	1d3a      	adds	r2, r7, #4
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fa74 	bl	8002dac <HAL_FLASHEx_Erase>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d11e      	bne.n	8000908 <eeprom_buffer_flush+0x80>
    while (address <= address_end) {
 80008ca:	e019      	b.n	8000900 <eeprom_buffer_flush+0x78>
      memcpy(&data, eeprom_buffer + offset, 8 * sizeof(uint32_t));
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, address, (uint32_t)data) == HAL_OK) {
        address += 32;
        offset += 32;
#else
      memcpy(&data, eeprom_buffer + offset, sizeof(uint32_t));
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <eeprom_buffer_flush+0x94>)
 80008d0:	4413      	add	r3, r2
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	603b      	str	r3, [r7, #0]
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) == HAL_OK) {
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	6a39      	ldr	r1, [r7, #32]
 80008e0:	2002      	movs	r0, #2
 80008e2:	f002 f89d 	bl	8002a20 <HAL_FLASH_Program>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d106      	bne.n	80008fa <eeprom_buffer_flush+0x72>
        address += 4;
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	3304      	adds	r3, #4
 80008f0:	623b      	str	r3, [r7, #32]
        offset += 4;
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	3304      	adds	r3, #4
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
 80008f8:	e002      	b.n	8000900 <eeprom_buffer_flush+0x78>
#endif
      } else {
        address = address_end + 1;
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3301      	adds	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
    while (address <= address_end) {
 8000900:	6a3a      	ldr	r2, [r7, #32]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	429a      	cmp	r2, r3
 8000906:	d9e1      	bls.n	80008cc <eeprom_buffer_flush+0x44>
      }
    }
  }
  HAL_FLASH_Lock();
 8000908:	f002 f900 	bl	8002b0c <HAL_FLASH_Lock>
#endif
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	0807fe00 	.word	0x0807fe00
 8000918:	0807ffff 	.word	0x0807ffff
 800091c:	200001a8 	.word	0x200001a8

08000920 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <_ZN5PrintC1Ev+0x24>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	080167a4 	.word	0x080167a4

08000948 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ffe4 	bl	8000920 <_ZN5PrintC1Ev>
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <_ZN6StreamC1Ev+0x28>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	0801693c 	.word	0x0801693c

08000974 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ffe1 	bl	8000948 <_ZN6StreamC1Ev>
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	611a      	str	r2, [r3, #16]
	};
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	080167b4 	.word	0x080167b4

080009a0 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <_ZN2P910SetDirReadEv+0x24>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <_ZN2P910SetDirReadEv+0x24>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <_ZN2P910SetDirReadEv+0x24>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	4903      	ldr	r1, [pc, #12]	; (80009c4 <_ZN2P910SetDirReadEv+0x24>)
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <_ZN2P910SetDirReadEv+0x28>)
 80009ba:	f002 fb19 	bl	8002ff0 <HAL_GPIO_Init>
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200003a8 	.word	0x200003a8
 80009c8:	40020800 	.word	0x40020800

080009cc <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	2201      	movs	r2, #1
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <_ZN3P103SetEv+0x14>)
 80009d6:	f002 fcb7 	bl	8003348 <HAL_GPIO_WritePin>
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40020400 	.word	0x40020400

080009e4 <_ZN3P105ClearEv>:
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	2200      	movs	r2, #0
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <_ZN3P105ClearEv+0x14>)
 80009ee:	f002 fcab 	bl	8003348 <HAL_GPIO_WritePin>
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40020400 	.word	0x40020400

080009fc <_ZN3P1011SetDirWriteEv>:
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <_ZN3P1011SetDirWriteEv+0x28>)
 8000a02:	2240      	movs	r2, #64	; 0x40
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <_ZN3P1011SetDirWriteEv+0x28>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <_ZN3P1011SetDirWriteEv+0x28>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <_ZN3P1011SetDirWriteEv+0x28>)
 8000a14:	2203      	movs	r2, #3
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	4902      	ldr	r1, [pc, #8]	; (8000a24 <_ZN3P1011SetDirWriteEv+0x28>)
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <_ZN3P1011SetDirWriteEv+0x2c>)
 8000a1c:	f002 fae8 	bl	8002ff0 <HAL_GPIO_Init>
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200003bc 	.word	0x200003bc
 8000a28:	40020400 	.word	0x40020400

08000a2c <_ZN3BTD11pairWithHIDEv>:

        /** True if an Xbox One S Controller is Connecting. */
        bool incomingXboxOneS;
 
        /** Call this function to pair with a HID device */
        void pairWithHID() {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2206      	movs	r2, #6
 8000a46:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
        };
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d004      	beq.n	8000a70 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ffde 	bl	8000a2c <_ZN3BTD11pairWithHIDEv>
        };
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	4798      	blx	r3
                OnInitBTHID();
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	331c      	adds	r3, #28
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	4798      	blx	r3
        };
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8000aa2:	b480      	push	{r7}
 8000aa4:	b085      	sub	sp, #20
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	72fb      	strb	r3, [r7, #11]
                return;
 8000ab0:	bf00      	nop
        }
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_ZN9PS4ParserC1Ev+0x20>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
                Reset();
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f012 fd00 	bl	80134d0 <_ZN9PS4Parser5ResetEv>
        };
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08016930 	.word	0x08016930

08000ae0 <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 f81c 	bl	8000b2a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	2b20      	cmp	r3, #32
 8000b0a:	d105      	bne.n	8000b18 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 8000b0c:	22ff      	movs	r2, #255	; 0xff
 8000b0e:	2100      	movs	r1, #0
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 f80a 	bl	8000b2a <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000b16:	e004      	b.n	8000b22 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	21ff      	movs	r1, #255	; 0xff
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 f804 	bl	8000b2a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	70fb      	strb	r3, [r7, #3]
 8000b36:	4613      	mov	r3, r2
 8000b38:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	78fa      	ldrb	r2, [r7, #3]
 8000b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	78ba      	ldrb	r2, [r7, #2]
 8000b46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	4608      	mov	r0, r1
 8000b68:	4611      	mov	r1, r2
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	70fb      	strb	r3, [r7, #3]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70bb      	strb	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	78fa      	ldrb	r2, [r7, #3]
 8000b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	78ba      	ldrb	r2, [r7, #2]
 8000b84:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	787a      	ldrb	r2, [r7, #1]
 8000b8c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2201      	movs	r2, #1
 8000b94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	141b      	asrs	r3, r3, #16
 8000bb2:	b2d9      	uxtb	r1, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	121b      	asrs	r3, r3, #8
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffcd 	bl	8000b5e <_ZN9PS4Parser6setLedEhhh>
        };
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	f011 f9a8 	bl	8011f38 <_ZN5BTHIDC1EP3BTDbPKc>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3378      	adds	r3, #120	; 0x78
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff65 	bl	8000abc <_ZN9PS4ParserC1Ev>
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3378      	adds	r3, #120	; 0x78
 8000c02:	4618      	mov	r0, r3
 8000c04:	f012 fc64 	bl	80134d0 <_ZN9PS4Parser5ResetEv>
        };
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	080168f4 	.word	0x080168f4
 8000c18:	08016924 	.word	0x08016924

08000c1c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3378      	adds	r3, #120	; 0x78
 8000c46:	7af9      	ldrb	r1, [r7, #11]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f012 fb66 	bl	801331c <_ZN9PS4Parser5ParseEhPh>
        };
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3378      	adds	r3, #120	; 0x78
 8000c64:	4618      	mov	r0, r3
 8000c66:	f012 fc33 	bl	80134d0 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 f855 	bl	8000d1a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d105      	bne.n	8000c84 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3378      	adds	r3, #120	; 0x78
 8000c7c:	21ff      	movs	r1, #255	; 0xff
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff90 	bl	8000ba4 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3378      	adds	r3, #120	; 0x78
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f012 fc19 	bl	80134d0 <_ZN9PS4Parser5ResetEv>
        };
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b096      	sub	sp, #88	; 0x58
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	224f      	movs	r2, #79	; 0x4f
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f014 fcb5 	bl	8015628 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000cbe:	2352      	movs	r3, #82	; 0x52
 8000cc0:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000cc2:	2311      	movs	r3, #17
 8000cc4:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000cca:	23ff      	movs	r3, #255	; 0xff
 8000ccc:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	785b      	ldrb	r3, [r3, #1]
 8000cd2:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	78db      	ldrb	r3, [r3, #3]
 8000ce4:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	791b      	ldrb	r3, [r3, #4]
 8000cea:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	795b      	ldrb	r3, [r3, #5]
 8000cf0:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	799b      	ldrb	r3, [r3, #6]
 8000cf6:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	224f      	movs	r2, #79	; 0x4f
 8000d04:	4619      	mov	r1, r3
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 f81a 	bl	8000d40 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000d0c:	bf00      	nop
 8000d0e:	3758      	adds	r7, #88	; 0x58
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000d14:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000d18:	e7c5      	b.n	8000ca6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000d1a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000d22:	2343      	movs	r3, #67	; 0x43
 8000d24:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000d26:	2302      	movs	r3, #2
 8000d28:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	2202      	movs	r2, #2
 8000d30:	4619      	mov	r1, r3
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 f804 	bl	8000d40 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6898      	ldr	r0, [r3, #8]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	8999      	ldrh	r1, [r3, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	7d9b      	ldrb	r3, [r3, #22]
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	7dd2      	ldrb	r2, [r2, #23]
 8000d5e:	79fc      	ldrb	r4, [r7, #7]
 8000d60:	9201      	str	r2, [sp, #4]
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	4623      	mov	r3, r4
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f010 f920 	bl	8010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd90      	pop	{r4, r7, pc}

08000d74 <_ZN14XBOXONESParserC1Ev>:

/** This class parses all the data sent by the Xbox One S controller */
class XBOXONESParser {
public:
        /** Constructor for the XBOXONESParser class. */
        XBOXONESParser() {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <_ZN14XBOXONESParserC1Ev+0x20>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
                Reset();
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f014 fa58 	bl	8015238 <_ZN14XBOXONESParser5ResetEv>
        };
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	080168e8 	.word	0x080168e8

08000d98 <_ZN10XBOXONESBTC1EP3BTDb>:
        /**
         * Constructor for the XBOXONESBT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         */
        XBOXONESBT(BTD *p, bool pair = false) :
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	4613      	mov	r3, r2
 8000da4:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair) {
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	79fa      	ldrb	r2, [r7, #7]
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <_ZN10XBOXONESBTC1EP3BTDb+0x50>)
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	f011 f8c3 	bl	8011f38 <_ZN5BTHIDC1EP3BTDbPKc>
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3378      	adds	r3, #120	; 0x78
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ffdc 	bl	8000d74 <_ZN14XBOXONESParserC1Ev>
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <_ZN10XBOXONESBTC1EP3BTDb+0x54>)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <_ZN10XBOXONESBTC1EP3BTDb+0x58>)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	679a      	str	r2, [r3, #120]	; 0x78
                XBOXONESParser::Reset();
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3378      	adds	r3, #120	; 0x78
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f014 fa33 	bl	8015238 <_ZN14XBOXONESParser5ResetEv>
                pBtd->useSimplePairing = true; // The Xbox One S controller only works via simple pairing
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        };
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	080156fc 	.word	0x080156fc
 8000dec:	080168ac 	.word	0x080168ac
 8000df0:	080168dc 	.word	0x080168dc

08000df4 <_ZN10XBOXONESBT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	72fb      	strb	r3, [r7, #11]
                XBOXONESParser::Parse(len, buf);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3378      	adds	r3, #120	; 0x78
 8000e06:	7af9      	ldrb	r1, [r7, #11]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f014 f91e 	bl	801504c <_ZN14XBOXONESParser5ParseEhPh>
        };
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_ZN10XBOXONESBT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
                XBOXONESParser::Reset();
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3378      	adds	r3, #120	; 0x78
 8000e24:	4618      	mov	r0, r3
 8000e26:	f014 fa07 	bl	8015238 <_ZN14XBOXONESParser5ResetEv>
        };
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_ZN10XBOXONESBT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
                XBOXONESParser::Reset();
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3378      	adds	r3, #120	; 0x78
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f014 f9fa 	bl	8015238 <_ZN14XBOXONESParser5ResetEv>
        };
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <_ZN10XBOXONESBT16sendOutputReportEPhh>:
        /**@}*/

        /** @name XBOXONESParser implementation */
        virtual void sendOutputReport(uint8_t *data, uint8_t nbytes) {
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	4613      	mov	r3, r2
 8000e58:	71fb      	strb	r3, [r7, #7]
                buf[0] = 0xA2; // HID BT DATA (0xA0) | Report Type (Output 0x02)
                buf[1] = 0x03; // Report ID
                memcpy(buf + 2, data, nbytes);

                // Send the Bluetooth DATA output report on the interrupt channel
                pBtd->L2CAP_Command(hci_handle, buf, sizeof(buf), interrupt_scid[0], interrupt_scid[1]);
 8000e5a:	466b      	mov	r3, sp
 8000e5c:	461e      	mov	r6, r3
                uint8_t buf[nbytes + 2];
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	1c5c      	adds	r4, r3, #1
 8000e62:	617c      	str	r4, [r7, #20]
 8000e64:	4623      	mov	r3, r4
 8000e66:	3301      	adds	r3, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f04f 0100 	mov.w	r1, #0
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	00cb      	lsls	r3, r1, #3
 8000e78:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e7c:	00c2      	lsls	r2, r0, #3
 8000e7e:	4623      	mov	r3, r4
 8000e80:	3301      	adds	r3, #1
 8000e82:	4618      	mov	r0, r3
 8000e84:	f04f 0100 	mov.w	r1, #0
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	00cb      	lsls	r3, r1, #3
 8000e92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e96:	00c2      	lsls	r2, r0, #3
 8000e98:	4623      	mov	r3, r4
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	3307      	adds	r3, #7
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ea6:	ab02      	add	r3, sp, #8
 8000ea8:	3300      	adds	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
                buf[0] = 0xA2; // HID BT DATA (0xA0) | Report Type (Output 0x02)
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	22a2      	movs	r2, #162	; 0xa2
 8000eb0:	701a      	strb	r2, [r3, #0]
                buf[1] = 0x03; // Report ID
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	705a      	strb	r2, [r3, #1]
                memcpy(buf + 2, data, nbytes);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	3302      	adds	r3, #2
 8000ebc:	79fa      	ldrb	r2, [r7, #7]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f014 fba3 	bl	801560c <memcpy>
                pBtd->L2CAP_Command(hci_handle, buf, sizeof(buf), interrupt_scid[0], interrupt_scid[1]);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6898      	ldr	r0, [r3, #8]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	8999      	ldrh	r1, [r3, #12]
 8000ece:	693d      	ldr	r5, [r7, #16]
 8000ed0:	b2e3      	uxtb	r3, r4
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b2dc      	uxtb	r4, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	7e1b      	ldrb	r3, [r3, #24]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	7e52      	ldrb	r2, [r2, #25]
 8000ede:	9201      	str	r2, [sp, #4]
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	4623      	mov	r3, r4
 8000ee4:	462a      	mov	r2, r5
 8000ee6:	f010 f861 	bl	8010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>
 8000eea:	46b5      	mov	sp, r6
        };
 8000eec:	bf00      	nop
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ef4 <_ZThn120_N10XBOXONESBT16sendOutputReportEPhh>:
        virtual void sendOutputReport(uint8_t *data, uint8_t nbytes) {
 8000ef4:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000ef8:	e7a8      	b.n	8000e4c <_ZN10XBOXONESBT16sendOutputReportEPhh>
	...

08000efc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
    {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f00:	f001 fc46 	bl	8002790 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f04:	f000 f8e6 	bl	80010d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f08:	f000 fa44 	bl	8001394 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000f0c:	f000 fa14 	bl	8001338 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000f10:	f000 f9d6 	bl	80012c0 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000f14:	f00c fc0a 	bl	800d72c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000f18:	f000 f974 	bl	8001204 <_ZL13MX_TIM14_Initv>
  MX_I2C1_Init();
 8000f1c:	f000 f99c 	bl	8001258 <_ZL12MX_I2C1_Initv>

  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* For the USB Host Shield Library*/
  SPI_Handle = hspi1;
 8000f20:	4a4a      	ldr	r2, [pc, #296]	; (800104c <main+0x150>)
 8000f22:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <main+0x154>)
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	2358      	movs	r3, #88	; 0x58
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f014 fb6e 	bl	801560c <memcpy>
  UART_Handle = huart2;
 8000f30:	4a48      	ldr	r2, [pc, #288]	; (8001054 <main+0x158>)
 8000f32:	4b49      	ldr	r3, [pc, #292]	; (8001058 <main+0x15c>)
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	2344      	movs	r3, #68	; 0x44
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	f014 fb66 	bl	801560c <memcpy>
  //ssd1306_TestFPS();
  /* The Primary Timer, since using freeRTOS, not using systick */
  HAL_TIM_Base_Start_IT(&htim14);
 8000f40:	4846      	ldr	r0, [pc, #280]	; (800105c <main+0x160>)
 8000f42:	f005 feeb 	bl	8006d1c <HAL_TIM_Base_Start_IT>

  /* Verify our CPU Frequency
   * We should get a 500ms delay here */
  Serial.print(F("\r\nCPU Frequency is: "));
 8000f46:	4946      	ldr	r1, [pc, #280]	; (8001060 <main+0x164>)
 8000f48:	4846      	ldr	r0, [pc, #280]	; (8001064 <main+0x168>)
 8000f4a:	f7ff fb27 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq() / 1000000;
 8000f4e:	f004 f90d 	bl	800516c <HAL_RCC_GetHCLKFreq>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a44      	ldr	r2, [pc, #272]	; (8001068 <main+0x16c>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0c9b      	lsrs	r3, r3, #18
 8000f5c:	4a43      	ldr	r2, [pc, #268]	; (800106c <main+0x170>)
 8000f5e:	6013      	str	r3, [r2, #0]
  Serial.print((int) cpu_freq);
 8000f60:	4b42      	ldr	r3, [pc, #264]	; (800106c <main+0x170>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	220a      	movs	r2, #10
 8000f66:	4619      	mov	r1, r3
 8000f68:	483e      	ldr	r0, [pc, #248]	; (8001064 <main+0x168>)
 8000f6a:	f7ff fb45 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print("MHz");
 8000f6e:	4940      	ldr	r1, [pc, #256]	; (8001070 <main+0x174>)
 8000f70:	483c      	ldr	r0, [pc, #240]	; (8001064 <main+0x168>)
 8000f72:	f7ff fb21 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000f76:	493f      	ldr	r1, [pc, #252]	; (8001074 <main+0x178>)
 8000f78:	483a      	ldr	r0, [pc, #232]	; (8001064 <main+0x168>)
 8000f7a:	f7ff fb1d 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <main+0x160>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	4b3c      	ldr	r3, [pc, #240]	; (8001078 <main+0x17c>)
 8000f88:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500);
 8000f8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8e:	f001 fc41 	bl	8002814 <HAL_Delay>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <main+0x160>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <main+0x17c>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b35      	ldr	r3, [pc, #212]	; (8001078 <main+0x17c>)
 8000fa4:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000fa6:	4935      	ldr	r1, [pc, #212]	; (800107c <main+0x180>)
 8000fa8:	482e      	ldr	r0, [pc, #184]	; (8001064 <main+0x168>)
 8000faa:	f7ff fb05 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int) timer_val / 10);
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <main+0x17c>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	4a33      	ldr	r2, [pc, #204]	; (8001080 <main+0x184>)
 8000fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	220a      	movs	r2, #10
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4828      	ldr	r0, [pc, #160]	; (8001064 <main+0x168>)
 8000fc2:	f7ff fb19 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print(" ms");
 8000fc6:	492f      	ldr	r1, [pc, #188]	; (8001084 <main+0x188>)
 8000fc8:	4826      	ldr	r0, [pc, #152]	; (8001064 <main+0x168>)
 8000fca:	f7ff faf5 	bl	80005b8 <_ZN5Print5printEPKc>

//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;
  Serial.print((int) hal_gettick);
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <main+0x18c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	220a      	movs	r2, #10
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4823      	ldr	r0, [pc, #140]	; (8001064 <main+0x168>)
 8000fd8:	f7ff fb0e 	bl	80005f8 <_ZN5Print5printEii>

  /* USER CODE END 2 */
  /* Init scheduler */

  ssd1306_Init();
 8000fdc:	f007 ffe0 	bl	8008fa0 <ssd1306_Init>
  osKernelInitialize();
 8000fe0:	f009 fe56 	bl	800ac90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000fe4:	4a29      	ldr	r2, [pc, #164]	; (800108c <main+0x190>)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4829      	ldr	r0, [pc, #164]	; (8001090 <main+0x194>)
 8000fea:	f009 fe9b 	bl	800ad24 <osThreadNew>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a28      	ldr	r2, [pc, #160]	; (8001094 <main+0x198>)
 8000ff2:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000ff4:	4a28      	ldr	r2, [pc, #160]	; (8001098 <main+0x19c>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4828      	ldr	r0, [pc, #160]	; (800109c <main+0x1a0>)
 8000ffa:	f009 fe93 	bl	800ad24 <osThreadNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <main+0x1a4>)
 8001002:	6013      	str	r3, [r2, #0]

  /* creation of controllerJoin */
  controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <main+0x1a8>)
 8001006:	2100      	movs	r1, #0
 8001008:	4827      	ldr	r0, [pc, #156]	; (80010a8 <main+0x1ac>)
 800100a:	f009 fe8b 	bl	800ad24 <osThreadNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a26      	ldr	r2, [pc, #152]	; (80010ac <main+0x1b0>)
 8001012:	6013      	str	r3, [r2, #0]

  /* creation of buttonPress */
  buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <main+0x1b4>)
 8001016:	2100      	movs	r1, #0
 8001018:	4826      	ldr	r0, [pc, #152]	; (80010b4 <main+0x1b8>)
 800101a:	f009 fe83 	bl	800ad24 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a25      	ldr	r2, [pc, #148]	; (80010b8 <main+0x1bc>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of updateLCD */
  updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 8001024:	4a25      	ldr	r2, [pc, #148]	; (80010bc <main+0x1c0>)
 8001026:	2100      	movs	r1, #0
 8001028:	4825      	ldr	r0, [pc, #148]	; (80010c0 <main+0x1c4>)
 800102a:	f009 fe7b 	bl	800ad24 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a24      	ldr	r2, [pc, #144]	; (80010c4 <main+0x1c8>)
 8001032:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* creation of getLatencies, Used to Meaesure latencies of tasks*/
  getLatencies = osThreadNew(StartGetLatencies, NULL, &getLatencies_attributes);
 8001034:	4a24      	ldr	r2, [pc, #144]	; (80010c8 <main+0x1cc>)
 8001036:	2100      	movs	r1, #0
 8001038:	4824      	ldr	r0, [pc, #144]	; (80010cc <main+0x1d0>)
 800103a:	f009 fe73 	bl	800ad24 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <main+0x1d4>)
 8001042:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001044:	f009 fe48 	bl	800acd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001048:	e7fe      	b.n	8001048 <main+0x14c>
 800104a:	bf00      	nop
 800104c:	20000528 	.word	0x20000528
 8001050:	2000042c 	.word	0x2000042c
 8001054:	20000580 	.word	0x20000580
 8001058:	20000484 	.word	0x20000484
 800105c:	200004c8 	.word	0x200004c8
 8001060:	0801574c 	.word	0x0801574c
 8001064:	200005c4 	.word	0x200005c4
 8001068:	431bde83 	.word	0x431bde83
 800106c:	20000930 	.word	0x20000930
 8001070:	08015764 	.word	0x08015764
 8001074:	08015768 	.word	0x08015768
 8001078:	20000934 	.word	0x20000934
 800107c:	08015770 	.word	0x08015770
 8001080:	cccccccd 	.word	0xcccccccd
 8001084:	08015784 	.word	0x08015784
 8001088:	20000938 	.word	0x20000938
 800108c:	080167cc 	.word	0x080167cc
 8001090:	08001585 	.word	0x08001585
 8001094:	20000510 	.word	0x20000510
 8001098:	080167f0 	.word	0x080167f0
 800109c:	08001c91 	.word	0x08001c91
 80010a0:	20000514 	.word	0x20000514
 80010a4:	08016814 	.word	0x08016814
 80010a8:	08001ce1 	.word	0x08001ce1
 80010ac:	20000518 	.word	0x20000518
 80010b0:	08016838 	.word	0x08016838
 80010b4:	08001d39 	.word	0x08001d39
 80010b8:	2000051c 	.word	0x2000051c
 80010bc:	0801685c 	.word	0x0801685c
 80010c0:	08001de5 	.word	0x08001de5
 80010c4:	20000520 	.word	0x20000520
 80010c8:	08016880 	.word	0x08016880
 80010cc:	08001521 	.word	0x08001521
 80010d0:	20000524 	.word	0x20000524

080010d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
    {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ac      	sub	sp, #176	; 0xb0
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010de:	2234      	movs	r2, #52	; 0x34
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f014 faa0 	bl	8015628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	225c      	movs	r2, #92	; 0x5c
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f014 fa91 	bl	8015628 <memset>

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <SystemClock_Config+0x128>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a3b      	ldr	r2, [pc, #236]	; (80011fc <SystemClock_Config+0x128>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b39      	ldr	r3, [pc, #228]	; (80011fc <SystemClock_Config+0x128>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b36      	ldr	r3, [pc, #216]	; (8001200 <SystemClock_Config+0x12c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a35      	ldr	r2, [pc, #212]	; (8001200 <SystemClock_Config+0x12c>)
 800112c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <SystemClock_Config+0x12c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113e:	2301      	movs	r3, #1
 8001140:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001146:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001150:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001158:	2304      	movs	r3, #4
 800115a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800115e:	23a8      	movs	r3, #168	; 0xa8
 8001160:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800116a:	2307      	movs	r3, #7
 800116c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800117a:	4618      	mov	r0, r3
 800117c:	f004 fd38 	bl	8005bf0 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	bf14      	ite	ne
 8001186:	2301      	movne	r3, #1
 8001188:	2300      	moveq	r3, #0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0xc0>
      {
    Error_Handler();
 8001190:	f000 ff5c 	bl	800204c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001194:	230f      	movs	r3, #15
 8001196:	66bb      	str	r3, [r7, #104]	; 0x68
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001198:	2302      	movs	r3, #2
 800119a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011b0:	2105      	movs	r1, #5
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fef4 	bl	8004fa0 <HAL_RCC_ClockConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf14      	ite	ne
 80011be:	2301      	movne	r3, #1
 80011c0:	2300      	moveq	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0xf8>
      {
    Error_Handler();
 80011c8:	f000 ff40 	bl	800204c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80011d2:	2300      	movs	r3, #0
 80011d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 f82c 	bl	8005238 <HAL_RCCEx_PeriphCLKConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf14      	ite	ne
 80011e6:	2301      	movne	r3, #1
 80011e8:	2300      	moveq	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x120>
      {
    Error_Handler();
 80011f0:	f000 ff2c 	bl	800204c <Error_Handler>
  }
}
 80011f4:	bf00      	nop
 80011f6:	37b0      	adds	r7, #176	; 0xb0
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000

08001204 <_ZL13MX_TIM14_Initv>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
    {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <_ZL13MX_TIM14_Initv+0x4c>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <_ZL13MX_TIM14_Initv+0x50>)
 800120c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168 / 2) * 100 - 1;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <_ZL13MX_TIM14_Initv+0x4c>)
 8001210:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001214:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <_ZL13MX_TIM14_Initv+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000 - 1;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <_ZL13MX_TIM14_Initv+0x4c>)
 800121e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001222:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <_ZL13MX_TIM14_Initv+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <_ZL13MX_TIM14_Initv+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <_ZL13MX_TIM14_Initv+0x4c>)
 8001232:	f005 fd23 	bl	8006c7c <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <_ZL13MX_TIM14_Initv+0x46>
      {
    Error_Handler();
 8001246:	f000 ff01 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200004c8 	.word	0x200004c8
 8001254:	40002000 	.word	0x40002000

08001258 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
    {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <_ZL12MX_I2C1_Initv+0x60>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001264:	4a15      	ldr	r2, [pc, #84]	; (80012bc <_ZL12MX_I2C1_Initv+0x64>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001296:	f002 f871 	bl	800337c <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	bf14      	ite	ne
 80012a0:	2301      	movne	r3, #1
 80012a2:	2300      	moveq	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <_ZL12MX_I2C1_Initv+0x56>
      {
    Error_Handler();
 80012aa:	f000 fecf 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200003d8 	.word	0x200003d8
 80012b8:	40005400 	.word	0x40005400
 80012bc:	000186a0 	.word	0x000186a0

080012c0 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
    {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 80012c6:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <_ZL12MX_SPI1_Initv+0x74>)
 80012c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 80012cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 80012ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 80012f4:	2218      	movs	r2, #24
 80012f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 8001306:	2200      	movs	r2, #0
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 800130c:	220a      	movs	r2, #10
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001310:	4807      	ldr	r0, [pc, #28]	; (8001330 <_ZL12MX_SPI1_Initv+0x70>)
 8001312:	f004 ff0b 	bl	800612c <HAL_SPI_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf14      	ite	ne
 800131c:	2301      	movne	r3, #1
 800131e:	2300      	moveq	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <_ZL12MX_SPI1_Initv+0x6a>
      {
    Error_Handler();
 8001326:	f000 fe91 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000042c 	.word	0x2000042c
 8001334:	40013000 	.word	0x40013000

08001338 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
    {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_ZL19MX_USART2_UART_Initv+0x54>)
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001340:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001348:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_ZL19MX_USART2_UART_Initv+0x54>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <_ZL19MX_USART2_UART_Initv+0x54>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_ZL19MX_USART2_UART_Initv+0x54>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800136e:	4807      	ldr	r0, [pc, #28]	; (800138c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001370:	f005 ff28 	bl	80071c4 <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <_ZL19MX_USART2_UART_Initv+0x50>
      {
    Error_Handler();
 8001384:	f000 fe62 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000484 	.word	0x20000484
 8001390:	40004400 	.word	0x40004400

08001394 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
    {
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a35      	ldr	r2, [pc, #212]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b33      	ldr	r3, [pc, #204]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a2e      	ldr	r2, [pc, #184]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b28      	ldr	r3, [pc, #160]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a27      	ldr	r2, [pc, #156]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a20      	ldr	r2, [pc, #128]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <_ZL12MX_GPIO_Initv+0xf4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800141a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <_ZL12MX_GPIO_Initv+0xf8>)
 8001422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4818      	ldr	r0, [pc, #96]	; (8001490 <_ZL12MX_GPIO_Initv+0xfc>)
 8001430:	f001 fdde 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143e:	2301      	movs	r3, #1
 8001440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4812      	ldr	r0, [pc, #72]	; (8001494 <_ZL12MX_GPIO_Initv+0x100>)
 800144a:	f001 fdd1 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800144e:	2310      	movs	r3, #16
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001456:	2301      	movs	r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <_ZL12MX_GPIO_Initv+0x104>)
 8001462:	f001 fdc5 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001470:	2301      	movs	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <_ZL12MX_GPIO_Initv+0x104>)
 800147c:	f001 fdb8 	bl	8002ff0 <HAL_GPIO_Init>
}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	10210000 	.word	0x10210000
 8001490:	40020800 	.word	0x40020800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400

0800149c <_Z23ProcessKeyCodeInContexth>:

/* USER CODE BEGIN 4 */
void ProcessKeyCodeInContext(uint8_t keyCode)
    {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  /*Updates the display_no
   * We could also just call display funcitons directly here, but since we have extra processing speed
   * Let's play with freeRTOS */
  if (display_no == 0) { /* This is the status screen, show if controller or not connected */
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10d      	bne.n	80014ca <_Z23ProcessKeyCodeInContexth+0x2e>
    if (keyCode == BACK_BTN)
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d103      	bne.n	80014bc <_Z23ProcessKeyCodeInContexth+0x20>
      display_no = 1;
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e01e      	b.n	80014fa <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d11b      	bne.n	80014fa <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 1;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e017      	b.n	80014fa <_Z23ProcessKeyCodeInContexth+0x5e>
  } else if (display_no == 1) { /* Pair Controller Screen */
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d113      	bne.n	80014fa <_Z23ProcessKeyCodeInContexth+0x5e>
    if (keyCode == BACK_BTN)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d103      	bne.n	80014e0 <_Z23ProcessKeyCodeInContexth+0x44>
      display_no = 0;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e00c      	b.n	80014fa <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d103      	bne.n	80014ee <_Z23ProcessKeyCodeInContexth+0x52>
      display_no = 0;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	e005      	b.n	80014fa <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == SELECT_BTN) {
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d102      	bne.n	80014fa <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 7; /* Only get to the pair status screen from here */
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014f6:	2207      	movs	r2, #7
 80014f8:	701a      	strb	r2, [r3, #0]
  } else if (display_no == 2) {

  }
//  Serial.print("\r\nDisplay no is: ");
//  Serial.print(display_no);
  display_run_once = 0;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_Z23ProcessKeyCodeInContexth+0x7c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
  display_force_update = 1;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <_Z23ProcessKeyCodeInContexth+0x80>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2000093c 	.word	0x2000093c
 8001518:	20000940 	.word	0x20000940
 800151c:	2000093f 	.word	0x2000093f

08001520 <_Z17StartGetLatenciesPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartGetLatencies(void *argument)
    {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetLatencies */
  /* Infinite loop */
  for (;;)
      {
#if rtos_delay_view //this is just used to measure the delay of StartGetBT task
    if (timer_val_getBT >= 7) {
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <_Z17StartGetLatenciesPv+0x50>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	2b06      	cmp	r3, #6
 800152e:	d90a      	bls.n	8001546 <_Z17StartGetLatenciesPv+0x26>
      Serial.print("\r\nWarning High CPU/BT Latency, getBT latency is: ");
 8001530:	4910      	ldr	r1, [pc, #64]	; (8001574 <_Z17StartGetLatenciesPv+0x54>)
 8001532:	4811      	ldr	r0, [pc, #68]	; (8001578 <_Z17StartGetLatenciesPv+0x58>)
 8001534:	f7ff f840 	bl	80005b8 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getBT);
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <_Z17StartGetLatenciesPv+0x50>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	220a      	movs	r2, #10
 800153e:	4619      	mov	r1, r3
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <_Z17StartGetLatenciesPv+0x58>)
 8001542:	f7ff f859 	bl	80005f8 <_ZN5Print5printEii>
    }
    if (timer_val_getUSB >= 4) {
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <_Z17StartGetLatenciesPv+0x5c>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d90a      	bls.n	8001564 <_Z17StartGetLatenciesPv+0x44>
      Serial.print("\r\nWarning High CPU/USB Latency, getUSB latency is: ");
 800154e:	490c      	ldr	r1, [pc, #48]	; (8001580 <_Z17StartGetLatenciesPv+0x60>)
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <_Z17StartGetLatenciesPv+0x58>)
 8001552:	f7ff f831 	bl	80005b8 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getUSB);
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <_Z17StartGetLatenciesPv+0x5c>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	220a      	movs	r2, #10
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <_Z17StartGetLatenciesPv+0x58>)
 8001560:	f7ff f84a 	bl	80005f8 <_ZN5Print5printEii>
    //Serial.print(" ");
//    Serial.print(rumble_brequest_sent);
    //Serial.print("\r\nController Idle Time: ");
//    Serial.print(button_press_idle);
#endif
    osDelay(1000);
 8001564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001568:	f009 fc6e 	bl	800ae48 <osDelay>
    if (timer_val_getBT >= 7) {
 800156c:	e7dc      	b.n	8001528 <_Z17StartGetLatenciesPv+0x8>
 800156e:	bf00      	nop
 8001570:	20000942 	.word	0x20000942
 8001574:	08015788 	.word	0x08015788
 8001578:	200005c4 	.word	0x200005c4
 800157c:	20000944 	.word	0x20000944
 8001580:	080157bc 	.word	0x080157bc

08001584 <_Z10StartGetBTPv>:
  /* USER CODE END StartGetLatencies */
}
/* USER CODE END 4 */

void StartGetBT(void *argument)
    {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 800158c:	48ae      	ldr	r0, [pc, #696]	; (8001848 <_Z10StartGetBTPv+0x2c4>)
 800158e:	f000 fd6b 	bl	8002068 <_ZN8MAX3421eI3P102P9E4InitEv>
 8001592:	4603      	mov	r3, r0
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d004      	beq.n	80015ae <_Z10StartGetBTPv+0x2a>
    Serial.print(F("\r\nOSC did not start"));
 80015a4:	49a9      	ldr	r1, [pc, #676]	; (800184c <_Z10StartGetBTPv+0x2c8>)
 80015a6:	48aa      	ldr	r0, [pc, #680]	; (8001850 <_Z10StartGetBTPv+0x2cc>)
 80015a8:	f7fe fff8 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
    while (1)
 80015ac:	e7fe      	b.n	80015ac <_Z10StartGetBTPv+0x28>
      ; // Halt
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 80015ae:	49a9      	ldr	r1, [pc, #676]	; (8001854 <_Z10StartGetBTPv+0x2d0>)
 80015b0:	48a7      	ldr	r0, [pc, #668]	; (8001850 <_Z10StartGetBTPv+0x2cc>)
 80015b2:	f7fe fff3 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 80015b6:	4ba8      	ldr	r3, [pc, #672]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 80015bc:	4ba6      	ldr	r3, [pc, #664]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 80015c2:	4ba5      	ldr	r3, [pc, #660]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 80015c8:	4ba3      	ldr	r3, [pc, #652]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 80015ce:	4ba2      	ldr	r3, [pc, #648]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 80015d4:	4ba0      	ldr	r3, [pc, #640]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 80015da:	4a9f      	ldr	r2, [pc, #636]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80015dc:	7993      	ldrb	r3, [r2, #6]
 80015de:	f36f 0300 	bfc	r3, #0, #1
 80015e2:	7193      	strb	r3, [r2, #6]

  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 80015e4:	4b9d      	ldr	r3, [pc, #628]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 80015ea:	4b9c      	ldr	r3, [pc, #624]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 80015ec:	2214      	movs	r2, #20
 80015ee:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 80015f0:	4b9a      	ldr	r3, [pc, #616]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 80015f6:	4b99      	ldr	r3, [pc, #612]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 80015fc:	4b97      	ldr	r3, [pc, #604]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 8001602:	4b96      	ldr	r3, [pc, #600]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001604:	2200      	movs	r2, #0
 8001606:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 8001608:	4b94      	ldr	r3, [pc, #592]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 800160a:	2200      	movs	r2, #0
 800160c:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 800160e:	4b93      	ldr	r3, [pc, #588]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001610:	2200      	movs	r2, #0
 8001612:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 8001614:	4b91      	ldr	r3, [pc, #580]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001616:	2200      	movs	r2, #0
 8001618:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 800161a:	4b90      	ldr	r3, [pc, #576]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 800161c:	2200      	movs	r2, #0
 800161e:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 8001620:	4b8e      	ldr	r3, [pc, #568]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001622:	2200      	movs	r2, #0
 8001624:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 8001626:	4b8d      	ldr	r3, [pc, #564]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001628:	2200      	movs	r2, #0
 800162a:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 800162c:	4b8b      	ldr	r3, [pc, #556]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 800162e:	2200      	movs	r2, #0
 8001630:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 8001632:	4b8a      	ldr	r3, [pc, #552]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001634:	2200      	movs	r2, #0
 8001636:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 8001638:	4b88      	ldr	r3, [pc, #544]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 800163a:	2200      	movs	r2, #0
 800163c:	825a      	strh	r2, [r3, #18]
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}
#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 800163e:	4b88      	ldr	r3, [pc, #544]	; (8001860 <_Z10StartGetBTPv+0x2dc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b87      	ldr	r3, [pc, #540]	; (8001864 <_Z10StartGetBTPv+0x2e0>)
 8001648:	801a      	strh	r2, [r3, #0]
#endif
    Usb.Task();
 800164a:	487f      	ldr	r0, [pc, #508]	; (8001848 <_Z10StartGetBTPv+0x2c4>)
 800164c:	f012 fca0 	bl	8013f90 <_ZN3USB4TaskEv>
    if (PS4.connected()) {
 8001650:	4885      	ldr	r0, [pc, #532]	; (8001868 <_Z10StartGetBTPv+0x2e4>)
 8001652:	f7ff fae3 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 82c2 	beq.w	8001be2 <_Z10StartGetBTPv+0x65e>
      ps4_connected = 1;
 800165e:	4b83      	ldr	r3, [pc, #524]	; (800186c <_Z10StartGetBTPv+0x2e8>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
      LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8001664:	2100      	movs	r1, #0
 8001666:	4882      	ldr	r0, [pc, #520]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 8001668:	f011 fe47 	bl	80132fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	4b80      	ldr	r3, [pc, #512]	; (8001874 <_Z10StartGetBTPv+0x2f0>)
 8001672:	701a      	strb	r2, [r3, #0]
      LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8001674:	2101      	movs	r1, #1
 8001676:	487e      	ldr	r0, [pc, #504]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 8001678:	f011 fe3f 	bl	80132fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <_Z10StartGetBTPv+0x2f4>)
 8001682:	701a      	strb	r2, [r3, #0]
      RightHatX_val = PS4.getAnalogHat(RightHatX);
 8001684:	2102      	movs	r1, #2
 8001686:	487a      	ldr	r0, [pc, #488]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 8001688:	f011 fe37 	bl	80132fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800168c:	4603      	mov	r3, r0
 800168e:	461a      	mov	r2, r3
 8001690:	4b7a      	ldr	r3, [pc, #488]	; (800187c <_Z10StartGetBTPv+0x2f8>)
 8001692:	701a      	strb	r2, [r3, #0]
      RightHatY_val = PS4.getAnalogHat(RightHatY);
 8001694:	2103      	movs	r1, #3
 8001696:	4876      	ldr	r0, [pc, #472]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 8001698:	f011 fe2f 	bl	80132fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b77      	ldr	r3, [pc, #476]	; (8001880 <_Z10StartGetBTPv+0x2fc>)
 80016a2:	701a      	strb	r2, [r3, #0]
				gameHID.Joy2Y = 0;
				xboxHID.rightStickX = 0;
				xboxHID.rightStickY = 0;
			}
#elif !deadzone_enable
      gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 80016a4:	2100      	movs	r1, #0
 80016a6:	4872      	ldr	r0, [pc, #456]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 80016a8:	f011 fe27 	bl	80132fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80016ac:	4603      	mov	r3, r0
 80016ae:	3b80      	subs	r3, #128	; 0x80
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	4b68      	ldr	r3, [pc, #416]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80016b6:	709a      	strb	r2, [r3, #2]
      gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 80016b8:	2101      	movs	r1, #1
 80016ba:	486d      	ldr	r0, [pc, #436]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 80016bc:	f011 fe1d 	bl	80132fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80016c0:	4603      	mov	r3, r0
 80016c2:	3b80      	subs	r3, #128	; 0x80
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	b25a      	sxtb	r2, r3
 80016c8:	4b63      	ldr	r3, [pc, #396]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80016ca:	70da      	strb	r2, [r3, #3]
      xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 80016cc:	4b62      	ldr	r3, [pc, #392]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80016ce:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	4b61      	ldr	r3, [pc, #388]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 80016d8:	819a      	strh	r2, [r3, #12]
      xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 80016da:	4b5f      	ldr	r3, [pc, #380]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80016dc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 80016e6:	81da      	strh	r2, [r3, #14]
      /* The Y axis by default is inverted on the Xbox */
      xboxHID.leftStickY = -xboxHID.leftStickY - 128;
 80016e8:	4b5c      	ldr	r3, [pc, #368]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 80016ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	4b58      	ldr	r3, [pc, #352]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 80016fc:	81da      	strh	r2, [r3, #14]

      gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 80016fe:	2102      	movs	r1, #2
 8001700:	485b      	ldr	r0, [pc, #364]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 8001702:	f011 fdfa 	bl	80132fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001706:	4603      	mov	r3, r0
 8001708:	3b80      	subs	r3, #128	; 0x80
 800170a:	b2db      	uxtb	r3, r3
 800170c:	b25a      	sxtb	r2, r3
 800170e:	4b52      	ldr	r3, [pc, #328]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 8001710:	711a      	strb	r2, [r3, #4]
      gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8001712:	2103      	movs	r1, #3
 8001714:	4856      	ldr	r0, [pc, #344]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 8001716:	f011 fdf0 	bl	80132fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800171a:	4603      	mov	r3, r0
 800171c:	3b80      	subs	r3, #128	; 0x80
 800171e:	b2db      	uxtb	r3, r3
 8001720:	b25a      	sxtb	r2, r3
 8001722:	4b4d      	ldr	r3, [pc, #308]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 8001724:	715a      	strb	r2, [r3, #5]
      xboxHID.rightStickX = gameHID.Joy2X << 8;
 8001726:	4b4c      	ldr	r3, [pc, #304]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 8001728:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b21a      	sxth	r2, r3
 8001730:	4b4a      	ldr	r3, [pc, #296]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001732:	821a      	strh	r2, [r3, #16]
      xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001734:	4b48      	ldr	r3, [pc, #288]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 8001736:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	b21a      	sxth	r2, r3
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001740:	825a      	strh	r2, [r3, #18]

      /* The Y axis by default is inverted on the Xbox */
      xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 8001742:	4b46      	ldr	r3, [pc, #280]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001744:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001748:	b29a      	uxth	r2, r3
 800174a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800174e:	1a9b      	subs	r3, r3, r2
 8001750:	b29b      	uxth	r3, r3
 8001752:	b21a      	sxth	r2, r3
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001756:	825a      	strh	r2, [r3, #18]
#endif
      xboxHID.L = PS4.getAnalogButton(L2);
 8001758:	2108      	movs	r1, #8
 800175a:	4845      	ldr	r0, [pc, #276]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 800175c:	f011 fdb4 	bl	80132c8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	4b3d      	ldr	r3, [pc, #244]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001766:	729a      	strb	r2, [r3, #10]
      xboxHID.R = PS4.getAnalogButton(R2);
 8001768:	2109      	movs	r1, #9
 800176a:	4841      	ldr	r0, [pc, #260]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 800176c:	f011 fdac 	bl	80132c8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001776:	72da      	strb	r2, [r3, #11]
      gameHID.Joy_LT = xboxHID.L - 128;
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 800177a:	7a9b      	ldrb	r3, [r3, #10]
 800177c:	3b80      	subs	r3, #128	; 0x80
 800177e:	b2db      	uxtb	r3, r3
 8001780:	b25a      	sxtb	r2, r3
 8001782:	4b35      	ldr	r3, [pc, #212]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 8001784:	701a      	strb	r2, [r3, #0]
      gameHID.Joy_RT = xboxHID.R - 128;
 8001786:	4b35      	ldr	r3, [pc, #212]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001788:	7adb      	ldrb	r3, [r3, #11]
 800178a:	3b80      	subs	r3, #128	; 0x80
 800178c:	b2db      	uxtb	r3, r3
 800178e:	b25a      	sxtb	r2, r3
 8001790:	4b31      	ldr	r3, [pc, #196]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 8001792:	705a      	strb	r2, [r3, #1]

      if (PS4.getButtonClick(PS)) {
 8001794:	2110      	movs	r1, #16
 8001796:	4836      	ldr	r0, [pc, #216]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 8001798:	f011 fd56 	bl	8013248 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <_Z10StartGetBTPv+0x230>
        PS4.disconnect();
 80017a2:	4831      	ldr	r0, [pc, #196]	; (8001868 <_Z10StartGetBTPv+0x2e4>)
 80017a4:	f010 fc39 	bl	801201a <_ZN5BTHID10disconnectEv>
        display_run_once = 0;
 80017a8:	4b36      	ldr	r3, [pc, #216]	; (8001884 <_Z10StartGetBTPv+0x300>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
        rumble_once = 0;
 80017ae:	4b36      	ldr	r3, [pc, #216]	; (8001888 <_Z10StartGetBTPv+0x304>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
      }

      if (PS4.getButtonPress(TRIANGLE)) {
 80017b4:	210c      	movs	r1, #12
 80017b6:	482e      	ldr	r0, [pc, #184]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 80017b8:	f011 fd1e 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00b      	beq.n	80017da <_Z10StartGetBTPv+0x256>
        gameHID.ps4ButtonsTag.button_triangle = 1;
 80017c2:	4a25      	ldr	r2, [pc, #148]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80017c4:	79d3      	ldrb	r3, [r2, #7]
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0xFF;
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 80017ce:	22ff      	movs	r2, #255	; 0xff
 80017d0:	71da      	strb	r2, [r3, #7]
        button_press_idle = 0;
 80017d2:	4b2e      	ldr	r3, [pc, #184]	; (800188c <_Z10StartGetBTPv+0x308>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e007      	b.n	80017ea <_Z10StartGetBTPv+0x266>
      } else {
        gameHID.ps4ButtonsTag.button_triangle = 0;
 80017da:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80017dc:	79d3      	ldrb	r3, [r2, #7]
 80017de:	f36f 0300 	bfc	r3, #0, #1
 80017e2:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	71da      	strb	r2, [r3, #7]
      }

      if (PS4.getButtonPress(CIRCLE)) {
 80017ea:	210d      	movs	r1, #13
 80017ec:	4820      	ldr	r0, [pc, #128]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 80017ee:	f011 fd03 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00b      	beq.n	8001810 <_Z10StartGetBTPv+0x28c>
        gameHID.ps4ButtonsTag.button_circle = 1;
 80017f8:	4a17      	ldr	r2, [pc, #92]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 80017fa:	7993      	ldrb	r3, [r2, #6]
 80017fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001800:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0xFF;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 8001804:	22ff      	movs	r2, #255	; 0xff
 8001806:	715a      	strb	r2, [r3, #5]
        button_press_idle = 0;
 8001808:	4b20      	ldr	r3, [pc, #128]	; (800188c <_Z10StartGetBTPv+0x308>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e007      	b.n	8001820 <_Z10StartGetBTPv+0x29c>
      } else {
        gameHID.ps4ButtonsTag.button_circle = 0;
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 8001812:	7993      	ldrb	r3, [r2, #6]
 8001814:	f36f 13c7 	bfc	r3, #7, #1
 8001818:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 800181c:	2200      	movs	r2, #0
 800181e:	715a      	strb	r2, [r3, #5]
      }

      if (PS4.getButtonPress(CROSS)) {
 8001820:	210e      	movs	r1, #14
 8001822:	4813      	ldr	r0, [pc, #76]	; (8001870 <_Z10StartGetBTPv+0x2ec>)
 8001824:	f011 fce8 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d030      	beq.n	8001890 <_Z10StartGetBTPv+0x30c>
        gameHID.ps4ButtonsTag.button_cross = 1;
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <_Z10StartGetBTPv+0x2d4>)
 8001830:	7993      	ldrb	r3, [r2, #6]
 8001832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001836:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0xFF;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <_Z10StartGetBTPv+0x2d8>)
 800183a:	22ff      	movs	r2, #255	; 0xff
 800183c:	711a      	strb	r2, [r3, #4]
        button_press_idle = 0;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <_Z10StartGetBTPv+0x308>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e02c      	b.n	80018a0 <_Z10StartGetBTPv+0x31c>
 8001846:	bf00      	nop
 8001848:	200005d8 	.word	0x200005d8
 800184c:	080157f0 	.word	0x080157f0
 8001850:	200005c4 	.word	0x200005c4
 8001854:	08015804 	.word	0x08015804
 8001858:	20000948 	.word	0x20000948
 800185c:	20000950 	.word	0x20000950
 8001860:	200004c8 	.word	0x200004c8
 8001864:	20000942 	.word	0x20000942
 8001868:	200007c4 	.word	0x200007c4
 800186c:	2000092a 	.word	0x2000092a
 8001870:	2000083c 	.word	0x2000083c
 8001874:	2000092b 	.word	0x2000092b
 8001878:	2000092c 	.word	0x2000092c
 800187c:	2000092d 	.word	0x2000092d
 8001880:	2000092e 	.word	0x2000092e
 8001884:	20000940 	.word	0x20000940
 8001888:	20000929 	.word	0x20000929
 800188c:	20000968 	.word	0x20000968
      } else {
        gameHID.ps4ButtonsTag.button_cross = 0;
 8001890:	4aac      	ldr	r2, [pc, #688]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001892:	7993      	ldrb	r3, [r2, #6]
 8001894:	f36f 1386 	bfc	r3, #6, #1
 8001898:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0;
 800189a:	4bab      	ldr	r3, [pc, #684]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 800189c:	2200      	movs	r2, #0
 800189e:	711a      	strb	r2, [r3, #4]
      }

      if (PS4.getButtonPress(SQUARE)) {
 80018a0:	210f      	movs	r1, #15
 80018a2:	48aa      	ldr	r0, [pc, #680]	; (8001b4c <_Z10StartGetBTPv+0x5c8>)
 80018a4:	f011 fca8 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <_Z10StartGetBTPv+0x342>
        gameHID.ps4ButtonsTag.button_square = 1;
 80018ae:	4aa5      	ldr	r2, [pc, #660]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 80018b0:	79d3      	ldrb	r3, [r2, #7]
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0xFF;
 80018b8:	4ba3      	ldr	r3, [pc, #652]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 80018ba:	22ff      	movs	r2, #255	; 0xff
 80018bc:	719a      	strb	r2, [r3, #6]
        button_press_idle = 0;
 80018be:	4ba4      	ldr	r3, [pc, #656]	; (8001b50 <_Z10StartGetBTPv+0x5cc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e007      	b.n	80018d6 <_Z10StartGetBTPv+0x352>
      } else {
        gameHID.ps4ButtonsTag.button_square = 0;
 80018c6:	4a9f      	ldr	r2, [pc, #636]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 80018c8:	79d3      	ldrb	r3, [r2, #7]
 80018ca:	f36f 0341 	bfc	r3, #1, #1
 80018ce:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0;
 80018d0:	4b9d      	ldr	r3, [pc, #628]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	719a      	strb	r2, [r3, #6]
      }

      if (PS4.getButtonPress(UP)) {
 80018d6:	2100      	movs	r1, #0
 80018d8:	489c      	ldr	r0, [pc, #624]	; (8001b4c <_Z10StartGetBTPv+0x5c8>)
 80018da:	f011 fc8d 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00c      	beq.n	80018fe <_Z10StartGetBTPv+0x37a>
        gameHID.ps4ButtonsTag.button_dpad_up = 1;
 80018e4:	4a97      	ldr	r2, [pc, #604]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 80018e6:	79d3      	ldrb	r3, [r2, #7]
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DUP;
 80018ee:	4b96      	ldr	r3, [pc, #600]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 80018f0:	789b      	ldrb	r3, [r3, #2]
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b93      	ldr	r3, [pc, #588]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 80018fa:	709a      	strb	r2, [r3, #2]
 80018fc:	e00b      	b.n	8001916 <_Z10StartGetBTPv+0x392>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_up = 0;
 80018fe:	4a91      	ldr	r2, [pc, #580]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001900:	79d3      	ldrb	r3, [r2, #7]
 8001902:	f36f 0382 	bfc	r3, #2, #1
 8001906:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 8001908:	4b8f      	ldr	r3, [pc, #572]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 800190a:	789b      	ldrb	r3, [r3, #2]
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b8d      	ldr	r3, [pc, #564]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001914:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(RIGHT)) {
 8001916:	2101      	movs	r1, #1
 8001918:	488c      	ldr	r0, [pc, #560]	; (8001b4c <_Z10StartGetBTPv+0x5c8>)
 800191a:	f011 fc6d 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00c      	beq.n	800193e <_Z10StartGetBTPv+0x3ba>
        gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8001924:	4a87      	ldr	r2, [pc, #540]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001926:	79d3      	ldrb	r3, [r2, #7]
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DRIGHT;
 800192e:	4b86      	ldr	r3, [pc, #536]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001930:	789b      	ldrb	r3, [r3, #2]
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b83      	ldr	r3, [pc, #524]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 800193a:	709a      	strb	r2, [r3, #2]
 800193c:	e00b      	b.n	8001956 <_Z10StartGetBTPv+0x3d2>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_right = 0;
 800193e:	4a81      	ldr	r2, [pc, #516]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001940:	79d3      	ldrb	r3, [r2, #7]
 8001942:	f36f 03c3 	bfc	r3, #3, #1
 8001946:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 8001948:	4b7f      	ldr	r3, [pc, #508]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 800194a:	789b      	ldrb	r3, [r3, #2]
 800194c:	f023 0308 	bic.w	r3, r3, #8
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b7d      	ldr	r3, [pc, #500]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001954:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(DOWN)) {
 8001956:	2102      	movs	r1, #2
 8001958:	487c      	ldr	r0, [pc, #496]	; (8001b4c <_Z10StartGetBTPv+0x5c8>)
 800195a:	f011 fc4d 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00c      	beq.n	800197e <_Z10StartGetBTPv+0x3fa>
        gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8001964:	4a77      	ldr	r2, [pc, #476]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001966:	79d3      	ldrb	r3, [r2, #7]
 8001968:	f043 0320 	orr.w	r3, r3, #32
 800196c:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DDOWN;
 800196e:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001970:	789b      	ldrb	r3, [r3, #2]
 8001972:	f043 0302 	orr.w	r3, r3, #2
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 800197a:	709a      	strb	r2, [r3, #2]
 800197c:	e00b      	b.n	8001996 <_Z10StartGetBTPv+0x412>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_down = 0;
 800197e:	4a71      	ldr	r2, [pc, #452]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001980:	79d3      	ldrb	r3, [r2, #7]
 8001982:	f36f 1345 	bfc	r3, #5, #1
 8001986:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 8001988:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 800198a:	789b      	ldrb	r3, [r3, #2]
 800198c:	f023 0302 	bic.w	r3, r3, #2
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4b6d      	ldr	r3, [pc, #436]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001994:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(LEFT)) {
 8001996:	2103      	movs	r1, #3
 8001998:	486c      	ldr	r0, [pc, #432]	; (8001b4c <_Z10StartGetBTPv+0x5c8>)
 800199a:	f011 fc2d 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00c      	beq.n	80019be <_Z10StartGetBTPv+0x43a>
        gameHID.ps4ButtonsTag.button_dpad_left = 1;
 80019a4:	4a67      	ldr	r2, [pc, #412]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 80019a6:	79d3      	ldrb	r3, [r2, #7]
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DLEFT;
 80019ae:	4b66      	ldr	r3, [pc, #408]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 80019b0:	789b      	ldrb	r3, [r3, #2]
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b63      	ldr	r3, [pc, #396]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 80019ba:	709a      	strb	r2, [r3, #2]
 80019bc:	e00b      	b.n	80019d6 <_Z10StartGetBTPv+0x452>

      } else {
        gameHID.ps4ButtonsTag.button_dpad_left = 0;
 80019be:	4a61      	ldr	r2, [pc, #388]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 80019c0:	79d3      	ldrb	r3, [r2, #7]
 80019c2:	f36f 1304 	bfc	r3, #4, #1
 80019c6:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 80019c8:	4b5f      	ldr	r3, [pc, #380]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 80019ca:	789b      	ldrb	r3, [r3, #2]
 80019cc:	f023 0304 	bic.w	r3, r3, #4
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 80019d4:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(L1)) {
 80019d6:	210a      	movs	r1, #10
 80019d8:	485c      	ldr	r0, [pc, #368]	; (8001b4c <_Z10StartGetBTPv+0x5c8>)
 80019da:	f011 fc0d 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00b      	beq.n	80019fc <_Z10StartGetBTPv+0x478>
        gameHID.ps4ButtonsTag.button_left_trigger = 1;
 80019e4:	4a57      	ldr	r2, [pc, #348]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 80019e6:	7993      	ldrb	r3, [r2, #6]
 80019e8:	f043 0320 	orr.w	r3, r3, #32
 80019ec:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0xFF;
 80019ee:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 80019f0:	22ff      	movs	r2, #255	; 0xff
 80019f2:	725a      	strb	r2, [r3, #9]
        button_press_idle = 0;
 80019f4:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <_Z10StartGetBTPv+0x5cc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e007      	b.n	8001a0c <_Z10StartGetBTPv+0x488>

      } else {
        gameHID.ps4ButtonsTag.button_left_trigger = 0;
 80019fc:	4a51      	ldr	r2, [pc, #324]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 80019fe:	7993      	ldrb	r3, [r2, #6]
 8001a00:	f36f 1345 	bfc	r3, #5, #1
 8001a04:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0;
 8001a06:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	725a      	strb	r2, [r3, #9]
      }

      if (PS4.getButtonPress(L3)) {
 8001a0c:	2106      	movs	r1, #6
 8001a0e:	484f      	ldr	r0, [pc, #316]	; (8001b4c <_Z10StartGetBTPv+0x5c8>)
 8001a10:	f011 fbf2 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00f      	beq.n	8001a3a <_Z10StartGetBTPv+0x4b6>
        gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001a1c:	79d3      	ldrb	r3, [r2, #7]
 8001a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a22:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_LS_BTN;
 8001a24:	4b48      	ldr	r3, [pc, #288]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001a26:	789b      	ldrb	r3, [r3, #2]
 8001a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001a30:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <_Z10StartGetBTPv+0x5cc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e00b      	b.n	8001a52 <_Z10StartGetBTPv+0x4ce>
      } else {
        gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001a3a:	4a42      	ldr	r2, [pc, #264]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001a3c:	79d3      	ldrb	r3, [r2, #7]
 8001a3e:	f36f 1386 	bfc	r3, #6, #1
 8001a42:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001a46:	789b      	ldrb	r3, [r3, #2]
 8001a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001a50:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(R1)) {
 8001a52:	210b      	movs	r1, #11
 8001a54:	483d      	ldr	r0, [pc, #244]	; (8001b4c <_Z10StartGetBTPv+0x5c8>)
 8001a56:	f011 fbcf 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <_Z10StartGetBTPv+0x4f4>
        gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8001a60:	4a38      	ldr	r2, [pc, #224]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001a62:	7993      	ldrb	r3, [r2, #6]
 8001a64:	f043 0310 	orr.w	r3, r3, #16
 8001a68:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0xFF;
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001a6c:	22ff      	movs	r2, #255	; 0xff
 8001a6e:	721a      	strb	r2, [r3, #8]
        button_press_idle = 0;
 8001a70:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <_Z10StartGetBTPv+0x5cc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e007      	b.n	8001a88 <_Z10StartGetBTPv+0x504>
      } else {
        gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8001a78:	4a32      	ldr	r2, [pc, #200]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001a7a:	7993      	ldrb	r3, [r2, #6]
 8001a7c:	f36f 1304 	bfc	r3, #4, #1
 8001a80:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0;
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	721a      	strb	r2, [r3, #8]
      }

      if (PS4.getButtonPress(R3)) {
 8001a88:	2107      	movs	r1, #7
 8001a8a:	4830      	ldr	r0, [pc, #192]	; (8001b4c <_Z10StartGetBTPv+0x5c8>)
 8001a8c:	f011 fbb4 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00f      	beq.n	8001ab6 <_Z10StartGetBTPv+0x532>
        gameHID.ps4ButtonsTag.button_right_thumb = 1;
 8001a96:	4a2b      	ldr	r2, [pc, #172]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001a98:	79d3      	ldrb	r3, [r2, #7]
 8001a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9e:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_RS_BTN;
 8001aa0:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001aa2:	789b      	ldrb	r3, [r3, #2]
 8001aa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001aac:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001aae:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <_Z10StartGetBTPv+0x5cc>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e00b      	b.n	8001ace <_Z10StartGetBTPv+0x54a>
      } else {
        gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8001ab6:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001ab8:	79d3      	ldrb	r3, [r2, #7]
 8001aba:	f36f 13c7 	bfc	r3, #7, #1
 8001abe:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001ac2:	789b      	ldrb	r3, [r3, #2]
 8001ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001acc:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(SHARE)) {
 8001ace:	2104      	movs	r1, #4
 8001ad0:	481e      	ldr	r0, [pc, #120]	; (8001b4c <_Z10StartGetBTPv+0x5c8>)
 8001ad2:	f011 fb91 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00f      	beq.n	8001afc <_Z10StartGetBTPv+0x578>
        gameHID.ps4ButtonsTag.button_share = 1;
 8001adc:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001ade:	7993      	ldrb	r3, [r2, #6]
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_BACK_BTN;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001ae8:	789b      	ldrb	r3, [r3, #2]
 8001aea:	f043 0320 	orr.w	r3, r3, #32
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001af2:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <_Z10StartGetBTPv+0x5cc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	e00b      	b.n	8001b14 <_Z10StartGetBTPv+0x590>
      } else {
        gameHID.ps4ButtonsTag.button_share = 0;
 8001afc:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001afe:	7993      	ldrb	r3, [r2, #6]
 8001b00:	f36f 03c3 	bfc	r3, #3, #1
 8001b04:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001b08:	789b      	ldrb	r3, [r3, #2]
 8001b0a:	f023 0320 	bic.w	r3, r3, #32
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001b12:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(OPTIONS)) {
 8001b14:	2105      	movs	r1, #5
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <_Z10StartGetBTPv+0x5c8>)
 8001b18:	f011 fb6e 	bl	80131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d018      	beq.n	8001b54 <_Z10StartGetBTPv+0x5d0>
        gameHID.ps4ButtonsTag.button_start = 1;
 8001b22:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <_Z10StartGetBTPv+0x5c0>)
 8001b24:	7993      	ldrb	r3, [r2, #6]
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_START_BTN;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001b2e:	789b      	ldrb	r3, [r3, #2]
 8001b30:	f043 0310 	orr.w	r3, r3, #16
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <_Z10StartGetBTPv+0x5c4>)
 8001b38:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <_Z10StartGetBTPv+0x5cc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e014      	b.n	8001b6c <_Z10StartGetBTPv+0x5e8>
 8001b42:	bf00      	nop
 8001b44:	20000948 	.word	0x20000948
 8001b48:	20000950 	.word	0x20000950
 8001b4c:	2000083c 	.word	0x2000083c
 8001b50:	20000968 	.word	0x20000968
      } else {
        gameHID.ps4ButtonsTag.button_start = 0;
 8001b54:	4a3b      	ldr	r2, [pc, #236]	; (8001c44 <_Z10StartGetBTPv+0x6c0>)
 8001b56:	7993      	ldrb	r3, [r2, #6]
 8001b58:	f36f 0382 	bfc	r3, #2, #1
 8001b5c:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <_Z10StartGetBTPv+0x6c4>)
 8001b60:	789b      	ldrb	r3, [r3, #2]
 8001b62:	f023 0310 	bic.w	r3, r3, #16
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <_Z10StartGetBTPv+0x6c4>)
 8001b6a:	709a      	strb	r2, [r3, #2]
      }

      /*We don't want to spam the PS4 controller with rumble updates
       * If we do not do this, latency increases greatly */
      new_rumble_val_L = rx_buf[3];
 8001b6c:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <_Z10StartGetBTPv+0x6c8>)
 8001b6e:	78da      	ldrb	r2, [r3, #3]
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <_Z10StartGetBTPv+0x6cc>)
 8001b72:	701a      	strb	r2, [r3, #0]
      new_rumble_val_R = rx_buf[5];
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <_Z10StartGetBTPv+0x6c8>)
 8001b76:	795a      	ldrb	r2, [r3, #5]
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <_Z10StartGetBTPv+0x6d0>)
 8001b7a:	701a      	strb	r2, [r3, #0]

      if (new_rumble_val_L != old_rumble_val_L || new_rumble_val_R != old_rumble_val_R) {
 8001b7c:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <_Z10StartGetBTPv+0x6cc>)
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <_Z10StartGetBTPv+0x6d4>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d105      	bne.n	8001b94 <_Z10StartGetBTPv+0x610>
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <_Z10StartGetBTPv+0x6d0>)
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <_Z10StartGetBTPv+0x6d8>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d00f      	beq.n	8001bb4 <_Z10StartGetBTPv+0x630>
        PS4.setRumbleOn(new_rumble_val_L, new_rumble_val_R);
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <_Z10StartGetBTPv+0x6cc>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4a2e      	ldr	r2, [pc, #184]	; (8001c54 <_Z10StartGetBTPv+0x6d0>)
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4830      	ldr	r0, [pc, #192]	; (8001c60 <_Z10StartGetBTPv+0x6dc>)
 8001ba0:	f7fe ffc3 	bl	8000b2a <_ZN9PS4Parser11setRumbleOnEhh>
        old_rumble_val_L = new_rumble_val_L;
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <_Z10StartGetBTPv+0x6cc>)
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <_Z10StartGetBTPv+0x6d4>)
 8001baa:	701a      	strb	r2, [r3, #0]
        old_rumble_val_R = new_rumble_val_R;
 8001bac:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <_Z10StartGetBTPv+0x6d0>)
 8001bae:	781a      	ldrb	r2, [r3, #0]
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <_Z10StartGetBTPv+0x6d8>)
 8001bb2:	701a      	strb	r2, [r3, #0]
      }
      /* After roughly 5+minutes of idle time, disconnect controller
       * Not the best solution since the rate the counter increases is based on BT Latency */
      if (button_press_idle > 400000) {
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <_Z10StartGetBTPv+0x6e0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <_Z10StartGetBTPv+0x6e4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d90b      	bls.n	8001bd6 <_Z10StartGetBTPv+0x652>
        PS4.disconnect();
 8001bbe:	482b      	ldr	r0, [pc, #172]	; (8001c6c <_Z10StartGetBTPv+0x6e8>)
 8001bc0:	f010 fa2b 	bl	801201a <_ZN5BTHID10disconnectEv>
        rumble_once = 0;
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <_Z10StartGetBTPv+0x6ec>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
        button_press_idle = 0;
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <_Z10StartGetBTPv+0x6e0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
        display_run_once = 0;
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <_Z10StartGetBTPv+0x6f0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
      }
      button_press_idle++;
 8001bd6:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <_Z10StartGetBTPv+0x6e0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <_Z10StartGetBTPv+0x6e0>)
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e021      	b.n	8001c26 <_Z10StartGetBTPv+0x6a2>

    } else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be6:	4824      	ldr	r0, [pc, #144]	; (8001c78 <_Z10StartGetBTPv+0x6f4>)
 8001be8:	f001 fb96 	bl	8003318 <HAL_GPIO_ReadPin>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2301      	moveq	r3, #1
 8001bf4:	2300      	movne	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d011      	beq.n	8001c20 <_Z10StartGetBTPv+0x69c>
      if (!buttonPressed) {
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <_Z10StartGetBTPv+0x6f8>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	f083 0301 	eor.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <_Z10StartGetBTPv+0x694>
        Serial.print(F("\r\nButton Pressed"));
 8001c0a:	491d      	ldr	r1, [pc, #116]	; (8001c80 <_Z10StartGetBTPv+0x6fc>)
 8001c0c:	481d      	ldr	r0, [pc, #116]	; (8001c84 <_Z10StartGetBTPv+0x700>)
 8001c0e:	f7fe fcc5 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
        PS4.pair(); // Start paring routine if user button was just pressed
 8001c12:	4816      	ldr	r0, [pc, #88]	; (8001c6c <_Z10StartGetBTPv+0x6e8>)
 8001c14:	f7fe ff1f 	bl	8000a56 <_ZN5BTHID4pairEv>
      }
      buttonPressed = true;
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <_Z10StartGetBTPv+0x6f8>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e002      	b.n	8001c26 <_Z10StartGetBTPv+0x6a2>
    } else
      buttonPressed = false;
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <_Z10StartGetBTPv+0x6f8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getBT;
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <_Z10StartGetBTPv+0x704>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <_Z10StartGetBTPv+0x708>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <_Z10StartGetBTPv+0x708>)
 8001c38:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(1);
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f009 f904 	bl	800ae48 <osDelay>
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 8001c40:	e4fd      	b.n	800163e <_Z10StartGetBTPv+0xba>
 8001c42:	bf00      	nop
 8001c44:	20000948 	.word	0x20000948
 8001c48:	20000950 	.word	0x20000950
 8001c4c:	200003d0 	.word	0x200003d0
 8001c50:	20000966 	.word	0x20000966
 8001c54:	20000967 	.word	0x20000967
 8001c58:	20000964 	.word	0x20000964
 8001c5c:	20000965 	.word	0x20000965
 8001c60:	2000083c 	.word	0x2000083c
 8001c64:	20000968 	.word	0x20000968
 8001c68:	00061a80 	.word	0x00061a80
 8001c6c:	200007c4 	.word	0x200007c4
 8001c70:	20000929 	.word	0x20000929
 8001c74:	20000940 	.word	0x20000940
 8001c78:	40020800 	.word	0x40020800
 8001c7c:	20000928 	.word	0x20000928
 8001c80:	08015824 	.word	0x08015824
 8001c84:	200005c4 	.word	0x200005c4
 8001c88:	200004c8 	.word	0x200004c8
 8001c8c:	20000942 	.word	0x20000942

08001c90 <_Z12StartSendUSBPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
    {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
  MX_USB_DEVICE_Init();
 8001c98:	f00b fd48 	bl	800d72c <MX_USB_DEVICE_Init>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
#endif

#if OG_XBOX_SETUP
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <_Z12StartSendUSBPv+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <_Z12StartSendUSBPv+0x44>)
 8001ca6:	801a      	strh	r2, [r3, #0]
#endif
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001ca8:	2214      	movs	r2, #20
 8001caa:	490b      	ldr	r1, [pc, #44]	; (8001cd8 <_Z12StartSendUSBPv+0x48>)
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <_Z12StartSendUSBPv+0x4c>)
 8001cae:	f007 fd67 	bl	8009780 <USBD_HID_SendReport>
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getUSB;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <_Z12StartSendUSBPv+0x40>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <_Z12StartSendUSBPv+0x44>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <_Z12StartSendUSBPv+0x44>)
 8001cc4:	801a      	strh	r2, [r3, #0]
#endif
#endif
    osDelay(1);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f009 f8be 	bl	800ae48 <osDelay>
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8001ccc:	e7e6      	b.n	8001c9c <_Z12StartSendUSBPv+0xc>
 8001cce:	bf00      	nop
 8001cd0:	200004c8 	.word	0x200004c8
 8001cd4:	20000944 	.word	0x20000944
 8001cd8:	20000950 	.word	0x20000950
 8001cdc:	20005768 	.word	0x20005768

08001ce0 <_Z19StartControllerJoinPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
    {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for (;;)
      {
    if (PS4.connected() && !rumble_once) {
 8001ce8:	4810      	ldr	r0, [pc, #64]	; (8001d2c <_Z19StartControllerJoinPv+0x4c>)
 8001cea:	f7fe ff97 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <_Z19StartControllerJoinPv+0x20>
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <_Z19StartControllerJoinPv+0x50>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <_Z19StartControllerJoinPv+0x20>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <_Z19StartControllerJoinPv+0x22>
 8001d00:	2300      	movs	r3, #0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <_Z19StartControllerJoinPv+0x42>
      PS4.setRumbleOn(RumbleLow);
 8001d06:	2120      	movs	r1, #32
 8001d08:	480a      	ldr	r0, [pc, #40]	; (8001d34 <_Z19StartControllerJoinPv+0x54>)
 8001d0a:	f7fe fef6 	bl	8000afa <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
      osDelay(500);
 8001d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d12:	f009 f899 	bl	800ae48 <osDelay>
      PS4.setRumbleOff();
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <_Z19StartControllerJoinPv+0x54>)
 8001d18:	f7fe fee2 	bl	8000ae0 <_ZN9PS4Parser12setRumbleOffEv>
      rumble_once = 1;
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <_Z19StartControllerJoinPv+0x50>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
    }
    osDelay(300);
 8001d22:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d26:	f009 f88f 	bl	800ae48 <osDelay>
    if (PS4.connected() && !rumble_once) {
 8001d2a:	e7dd      	b.n	8001ce8 <_Z19StartControllerJoinPv+0x8>
 8001d2c:	200007c4 	.word	0x200007c4
 8001d30:	20000929 	.word	0x20000929
 8001d34:	2000083c 	.word	0x2000083c

08001d38 <_Z16StartButtonPressPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonPress */
void StartButtonPress(void *argument)
    {
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPress */
  /* Infinite loop */
  for (;;)
      {
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d44:	4820      	ldr	r0, [pc, #128]	; (8001dc8 <_Z16StartButtonPressPv+0x90>)
 8001d46:	f001 fae7 	bl	8003318 <HAL_GPIO_ReadPin>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d54:	481d      	ldr	r0, [pc, #116]	; (8001dcc <_Z16StartButtonPressPv+0x94>)
 8001d56:	f001 fadf 	bl	8003318 <HAL_GPIO_ReadPin>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	005b      	lsls	r3, r3, #1
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001d5e:	b25b      	sxtb	r3, r3
 8001d60:	4323      	orrs	r3, r4
 8001d62:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(FORWARD_BTN_GPIO) << 0);
 8001d64:	2110      	movs	r1, #16
 8001d66:	4819      	ldr	r0, [pc, #100]	; (8001dcc <_Z16StartButtonPressPv+0x94>)
 8001d68:	f001 fad6 	bl	8003318 <HAL_GPIO_ReadPin>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	b25b      	sxtb	r3, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001d70:	4323      	orrs	r3, r4
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	b2da      	uxtb	r2, r3
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <_Z16StartButtonPressPv+0x98>)
 8001d78:	701a      	strb	r2, [r3, #0]

    if (BUTTON_PRESSED) {
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <_Z16StartButtonPressPv+0x98>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b07      	cmp	r3, #7
 8001d80:	d018      	beq.n	8001db4 <_Z16StartButtonPressPv+0x7c>
      if (buttonDebounced == 1) {  // you only get here if the same button combination has been pressed for 100mS
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <_Z16StartButtonPressPv+0x9c>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d110      	bne.n	8001dac <_Z16StartButtonPressPv+0x74>
        if (buttonProcessed == 0) { // here's where we do the real work on the keyboard, and ensure we only do it once/keypress
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <_Z16StartButtonPressPv+0xa0>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <_Z16StartButtonPressPv+0x88>
          buttonProcessed = 1;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_Z16StartButtonPressPv+0xa0>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
          ProcessKeyCodeInContext(keyCode);
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <_Z16StartButtonPressPv+0x98>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fb7d 	bl	800149c <_Z23ProcessKeyCodeInContexth>
          Serial.print("Button Pressed\n");
 8001da2:	490e      	ldr	r1, [pc, #56]	; (8001ddc <_Z16StartButtonPressPv+0xa4>)
 8001da4:	480e      	ldr	r0, [pc, #56]	; (8001de0 <_Z16StartButtonPressPv+0xa8>)
 8001da6:	f7fe fc07 	bl	80005b8 <_ZN5Print5printEPKc>
 8001daa:	e009      	b.n	8001dc0 <_Z16StartButtonPressPv+0x88>
        }
      } else {
        buttonDebounced = true;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <_Z16StartButtonPressPv+0x9c>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e005      	b.n	8001dc0 <_Z16StartButtonPressPv+0x88>
      }
    } else {
      buttonDebounced = false;
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <_Z16StartButtonPressPv+0x9c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
      buttonProcessed = false;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <_Z16StartButtonPressPv+0xa0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
    }
//  	Serial.print("\r\n");
//  	Serial.print(keyCode);
    osDelay(100);
 8001dc0:	2064      	movs	r0, #100	; 0x64
 8001dc2:	f009 f841 	bl	800ae48 <osDelay>
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001dc6:	e7bb      	b.n	8001d40 <_Z16StartButtonPressPv+0x8>
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	2000093d 	.word	0x2000093d
 8001dd8:	2000093e 	.word	0x2000093e
 8001ddc:	08015838 	.word	0x08015838
 8001de0:	200005c4 	.word	0x200005c4

08001de4 <_Z14StartUpdateLCDPv>:
 * @brief Function implementing the updateLCD thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  //ssd1306_TestAll();
  //ssd1306_Fill(Black_);
  //ssd1306_UpdateScreen();
  for (;;) {
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14);
 8001dec:	4b7e      	ldr	r3, [pc, #504]	; (8001fe8 <_Z14StartUpdateLCDPv+0x204>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b7d      	ldr	r3, [pc, #500]	; (8001fec <_Z14StartUpdateLCDPv+0x208>)
 8001df6:	801a      	strh	r2, [r3, #0]
#endif
    if (display_run_once == 0) {
 8001df8:	4b7d      	ldr	r3, [pc, #500]	; (8001ff0 <_Z14StartUpdateLCDPv+0x20c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 80e4 	bne.w	8001fca <_Z14StartUpdateLCDPv+0x1e6>
      ssd1306_Fill(Black_);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f007 f936 	bl	8009074 <ssd1306_Fill>
      ssd1306_UpdateScreen();
 8001e08:	f007 f958 	bl	80090bc <ssd1306_UpdateScreen>
      switch (display_no) {
 8001e0c:	4b79      	ldr	r3, [pc, #484]	; (8001ff4 <_Z14StartUpdateLCDPv+0x210>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b07      	cmp	r3, #7
 8001e12:	f000 80a8 	beq.w	8001f66 <_Z14StartUpdateLCDPv+0x182>
 8001e16:	2b07      	cmp	r3, #7
 8001e18:	f300 80d7 	bgt.w	8001fca <_Z14StartUpdateLCDPv+0x1e6>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <_Z14StartUpdateLCDPv+0x44>
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	f000 808a 	beq.w	8001f3a <_Z14StartUpdateLCDPv+0x156>
 8001e26:	e0d0      	b.n	8001fca <_Z14StartUpdateLCDPv+0x1e6>
        case 0: {
          Serial.print("\nInside case 0\n");
 8001e28:	4973      	ldr	r1, [pc, #460]	; (8001ff8 <_Z14StartUpdateLCDPv+0x214>)
 8001e2a:	4874      	ldr	r0, [pc, #464]	; (8001ffc <_Z14StartUpdateLCDPv+0x218>)
 8001e2c:	f7fe fbc4 	bl	80005b8 <_ZN5Print5printEPKc>
          uint8_t alternate_print = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
          if (!PS4.connected()) {
 8001e34:	4872      	ldr	r0, [pc, #456]	; (8002000 <_Z14StartUpdateLCDPv+0x21c>)
 8001e36:	f7fe fef1 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f083 0301 	eor.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d017      	beq.n	8001e76 <_Z14StartUpdateLCDPv+0x92>
            ssd1306_SetCursor((128 - 11 * 3) / 2, 0);
 8001e46:	2100      	movs	r1, #0
 8001e48:	202f      	movs	r0, #47	; 0x2f
 8001e4a:	f007 fa6d 	bl	8009328 <ssd1306_SetCursor>
            ssd1306_WriteString("Not", Font_11x18, White_);
 8001e4e:	4a6d      	ldr	r2, [pc, #436]	; (8002004 <_Z14StartUpdateLCDPv+0x220>)
 8001e50:	2301      	movs	r3, #1
 8001e52:	ca06      	ldmia	r2, {r1, r2}
 8001e54:	486c      	ldr	r0, [pc, #432]	; (8002008 <_Z14StartUpdateLCDPv+0x224>)
 8001e56:	f007 fa41 	bl	80092dc <ssd1306_WriteString>
            display_force_update = 0;
 8001e5a:	4b6c      	ldr	r3, [pc, #432]	; (800200c <_Z14StartUpdateLCDPv+0x228>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 8001e60:	211a      	movs	r1, #26
 8001e62:	200e      	movs	r0, #14
 8001e64:	f007 fa60 	bl	8009328 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 8001e68:	4a66      	ldr	r2, [pc, #408]	; (8002004 <_Z14StartUpdateLCDPv+0x220>)
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	ca06      	ldmia	r2, {r1, r2}
 8001e6e:	4868      	ldr	r0, [pc, #416]	; (8002010 <_Z14StartUpdateLCDPv+0x22c>)
 8001e70:	f007 fa34 	bl	80092dc <ssd1306_WriteString>
 8001e74:	e017      	b.n	8001ea6 <_Z14StartUpdateLCDPv+0xc2>
          } else if (PS4.connected()) {
 8001e76:	4862      	ldr	r0, [pc, #392]	; (8002000 <_Z14StartUpdateLCDPv+0x21c>)
 8001e78:	f7fe fed0 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d011      	beq.n	8001ea6 <_Z14StartUpdateLCDPv+0xc2>
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 8001e82:	211a      	movs	r1, #26
 8001e84:	200e      	movs	r0, #14
 8001e86:	f007 fa4f 	bl	8009328 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 8001e8a:	4a5e      	ldr	r2, [pc, #376]	; (8002004 <_Z14StartUpdateLCDPv+0x220>)
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	ca06      	ldmia	r2, {r1, r2}
 8001e90:	485f      	ldr	r0, [pc, #380]	; (8002010 <_Z14StartUpdateLCDPv+0x22c>)
 8001e92:	f007 fa23 	bl	80092dc <ssd1306_WriteString>
            alternate_print = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
            display_run_once = 1;
 8001e9a:	4b55      	ldr	r3, [pc, #340]	; (8001ff0 <_Z14StartUpdateLCDPv+0x20c>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
            display_force_update = 0;
 8001ea0:	4b5a      	ldr	r3, [pc, #360]	; (800200c <_Z14StartUpdateLCDPv+0x228>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
          }
          ssd1306_UpdateScreen();
 8001ea6:	f007 f909 	bl	80090bc <ssd1306_UpdateScreen>
          Serial.print("\nInside case 0-1\n");
 8001eaa:	495a      	ldr	r1, [pc, #360]	; (8002014 <_Z14StartUpdateLCDPv+0x230>)
 8001eac:	4853      	ldr	r0, [pc, #332]	; (8001ffc <_Z14StartUpdateLCDPv+0x218>)
 8001eae:	f7fe fb83 	bl	80005b8 <_ZN5Print5printEPKc>
          while (!PS4.connected() && display_force_update == 0) {
 8001eb2:	4853      	ldr	r0, [pc, #332]	; (8002000 <_Z14StartUpdateLCDPv+0x21c>)
 8001eb4:	f7fe feb2 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <_Z14StartUpdateLCDPv+0xec>
 8001ec4:	4b51      	ldr	r3, [pc, #324]	; (800200c <_Z14StartUpdateLCDPv+0x228>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <_Z14StartUpdateLCDPv+0xec>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <_Z14StartUpdateLCDPv+0xee>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <_Z14StartUpdateLCDPv+0xfa>
            osDelay(100);
 8001ed6:	2064      	movs	r0, #100	; 0x64
 8001ed8:	f008 ffb6 	bl	800ae48 <osDelay>
          while (!PS4.connected() && display_force_update == 0) {
 8001edc:	e7e9      	b.n	8001eb2 <_Z14StartUpdateLCDPv+0xce>
          }
          /* If the user presses a Button, interrupt and show next screen */
          if (display_force_update == 1) {
 8001ede:	4b4b      	ldr	r3, [pc, #300]	; (800200c <_Z14StartUpdateLCDPv+0x228>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d106      	bne.n	8001ef4 <_Z14StartUpdateLCDPv+0x110>
            display_force_update = 0;
 8001ee6:	4b49      	ldr	r3, [pc, #292]	; (800200c <_Z14StartUpdateLCDPv+0x228>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
            display_run_once = 0;
 8001eec:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <_Z14StartUpdateLCDPv+0x20c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
            break;
 8001ef2:	e06a      	b.n	8001fca <_Z14StartUpdateLCDPv+0x1e6>
          }
          /* When the controller is finally paired, update current screen
           * Only runs if the first PS4.connected() above does not run*/
          if (PS4.connected() && alternate_print) {
 8001ef4:	4842      	ldr	r0, [pc, #264]	; (8002000 <_Z14StartUpdateLCDPv+0x21c>)
 8001ef6:	f7fe fe91 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <_Z14StartUpdateLCDPv+0x126>
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <_Z14StartUpdateLCDPv+0x126>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <_Z14StartUpdateLCDPv+0x128>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d05b      	beq.n	8001fc8 <_Z14StartUpdateLCDPv+0x1e4>
            ssd1306_Fill(Black_);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f007 f8af 	bl	8009074 <ssd1306_Fill>
            ssd1306_UpdateScreen();
 8001f16:	f007 f8d1 	bl	80090bc <ssd1306_UpdateScreen>
            //				    ssd1306_SetCursor(25,0);
            //				    ssd1306_WriteString("Status:", Font_11x18, White_);
            ssd1306_SetCursor((128 - 11 * 10) / 2, 26);
 8001f1a:	211a      	movs	r1, #26
 8001f1c:	2009      	movs	r0, #9
 8001f1e:	f007 fa03 	bl	8009328 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected!", Font_11x18, White_);
 8001f22:	4a38      	ldr	r2, [pc, #224]	; (8002004 <_Z14StartUpdateLCDPv+0x220>)
 8001f24:	2301      	movs	r3, #1
 8001f26:	ca06      	ldmia	r2, {r1, r2}
 8001f28:	483b      	ldr	r0, [pc, #236]	; (8002018 <_Z14StartUpdateLCDPv+0x234>)
 8001f2a:	f007 f9d7 	bl	80092dc <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8001f2e:	f007 f8c5 	bl	80090bc <ssd1306_UpdateScreen>
            display_run_once = 1;
 8001f32:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <_Z14StartUpdateLCDPv+0x20c>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
          }
          break;
 8001f38:	e046      	b.n	8001fc8 <_Z14StartUpdateLCDPv+0x1e4>
        }

        case 1:
          display_run_once = 1;
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <_Z14StartUpdateLCDPv+0x20c>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 8001f40:	4b32      	ldr	r3, [pc, #200]	; (800200c <_Z14StartUpdateLCDPv+0x228>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f007 f894 	bl	8009074 <ssd1306_Fill>
          ssd1306_SetCursor((128 - 11 * 5) / 2, 0);
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2024      	movs	r0, #36	; 0x24
 8001f50:	f007 f9ea 	bl	8009328 <ssd1306_SetCursor>
          ssd1306_WriteString("Pair?", Font_11x18, White_);
 8001f54:	4a2b      	ldr	r2, [pc, #172]	; (8002004 <_Z14StartUpdateLCDPv+0x220>)
 8001f56:	2301      	movs	r3, #1
 8001f58:	ca06      	ldmia	r2, {r1, r2}
 8001f5a:	4830      	ldr	r0, [pc, #192]	; (800201c <_Z14StartUpdateLCDPv+0x238>)
 8001f5c:	f007 f9be 	bl	80092dc <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8001f60:	f007 f8ac 	bl	80090bc <ssd1306_UpdateScreen>
          break;
 8001f64:	e031      	b.n	8001fca <_Z14StartUpdateLCDPv+0x1e6>

        case 7:
          Serial.print("Hi");
 8001f66:	492e      	ldr	r1, [pc, #184]	; (8002020 <_Z14StartUpdateLCDPv+0x23c>)
 8001f68:	4824      	ldr	r0, [pc, #144]	; (8001ffc <_Z14StartUpdateLCDPv+0x218>)
 8001f6a:	f7fe fb25 	bl	80005b8 <_ZN5Print5printEPKc>
          display_run_once = 1;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <_Z14StartUpdateLCDPv+0x20c>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <_Z14StartUpdateLCDPv+0x228>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f007 f87a 	bl	8009074 <ssd1306_Fill>
          ssd1306_UpdateScreen();
 8001f80:	f007 f89c 	bl	80090bc <ssd1306_UpdateScreen>
          ssd1306_SetCursor((128 - 11 * 10) / 2, 0);
 8001f84:	2100      	movs	r1, #0
 8001f86:	2009      	movs	r0, #9
 8001f88:	f007 f9ce 	bl	8009328 <ssd1306_SetCursor>
          ssd1306_WriteString("Pairing...", Font_11x18, White_);
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <_Z14StartUpdateLCDPv+0x220>)
 8001f8e:	2301      	movs	r3, #1
 8001f90:	ca06      	ldmia	r2, {r1, r2}
 8001f92:	4824      	ldr	r0, [pc, #144]	; (8002024 <_Z14StartUpdateLCDPv+0x240>)
 8001f94:	f007 f9a2 	bl	80092dc <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8001f98:	f007 f890 	bl	80090bc <ssd1306_UpdateScreen>

          PS4.pair();
 8001f9c:	4818      	ldr	r0, [pc, #96]	; (8002000 <_Z14StartUpdateLCDPv+0x21c>)
 8001f9e:	f7fe fd5a 	bl	8000a56 <_ZN5BTHID4pairEv>
          while (PS4.connected() == 0) {
 8001fa2:	4817      	ldr	r0, [pc, #92]	; (8002000 <_Z14StartUpdateLCDPv+0x21c>)
 8001fa4:	f7fe fe3a 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf0c      	ite	eq
 8001fae:	2301      	moveq	r3, #1
 8001fb0:	2300      	movne	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d000      	beq.n	8001fba <_Z14StartUpdateLCDPv+0x1d6>
 8001fb8:	e7f3      	b.n	8001fa2 <_Z14StartUpdateLCDPv+0x1be>

          }

          display_no = 0;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <_Z14StartUpdateLCDPv+0x210>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
          display_run_once = 0;
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <_Z14StartUpdateLCDPv+0x20c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]

          //ssd1306_SetCursor((128 - 11 * 10) / 2, 26);
          //ssd1306_WriteString("Paired!", Font_11x18, White_);
          //ssd1306_UpdateScreen();
          break;
 8001fc6:	e000      	b.n	8001fca <_Z14StartUpdateLCDPv+0x1e6>
          break;
 8001fc8:	bf00      	nop
      }
    }
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_LCD;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_Z14StartUpdateLCDPv+0x204>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <_Z14StartUpdateLCDPv+0x208>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <_Z14StartUpdateLCDPv+0x208>)
 8001fdc:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(100);
 8001fde:	2064      	movs	r0, #100	; 0x64
 8001fe0:	f008 ff32 	bl	800ae48 <osDelay>
  }
 8001fe4:	e702      	b.n	8001dec <_Z14StartUpdateLCDPv+0x8>
 8001fe6:	bf00      	nop
 8001fe8:	200004c8 	.word	0x200004c8
 8001fec:	20000946 	.word	0x20000946
 8001ff0:	20000940 	.word	0x20000940
 8001ff4:	2000093c 	.word	0x2000093c
 8001ff8:	08015848 	.word	0x08015848
 8001ffc:	200005c4 	.word	0x200005c4
 8002000:	200007c4 	.word	0x200007c4
 8002004:	20000010 	.word	0x20000010
 8002008:	08015858 	.word	0x08015858
 800200c:	2000093f 	.word	0x2000093f
 8002010:	0801585c 	.word	0x0801585c
 8002014:	08015868 	.word	0x08015868
 8002018:	0801587c 	.word	0x0801587c
 800201c:	08015888 	.word	0x08015888
 8002020:	08015890 	.word	0x08015890
 8002024:	08015894 	.word	0x08015894

08002028 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END StartUpdateLCD */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800203a:	f000 fbcb 	bl	80027d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40001c00 	.word	0x40001c00

0800204c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
    {
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  Serial.print("\r\nSomething went wrong!");
 8002050:	4903      	ldr	r1, [pc, #12]	; (8002060 <Error_Handler+0x14>)
 8002052:	4804      	ldr	r0, [pc, #16]	; (8002064 <Error_Handler+0x18>)
 8002054:	f7fe fab0 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800205c:	e7fe      	b.n	800205c <Error_Handler+0x10>
 800205e:	bf00      	nop
 8002060:	080158a0 	.word	0x080158a0
 8002064:	200005c4 	.word	0x200005c4

08002068 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8002070:	f7fe fcc4 	bl	80009fc <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8002074:	f7fe fcaa 	bl	80009cc <_ZN3P103SetEv>
        spi::init();
 8002078:	f000 f845 	bl	8002106 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 800207c:	f7fe fc90 	bl	80009a0 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8002080:	2218      	movs	r2, #24
 8002082:	2188      	movs	r1, #136	; 0x88
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f845 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f864 	bl	8002158 <_ZN8MAX3421eI3P102P9E5resetEv>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf0c      	ite	eq
 8002096:	2301      	moveq	r3, #1
 8002098:	2300      	movne	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
 80020a4:	e02b      	b.n	80020fe <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 80020a6:	22c1      	movs	r2, #193	; 0xc1
 80020a8:	21d8      	movs	r1, #216	; 0xd8
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f832 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 80020b0:	2260      	movs	r2, #96	; 0x60
 80020b2:	21d0      	movs	r1, #208	; 0xd0
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f82d 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 80020ba:	2204      	movs	r2, #4
 80020bc:	21e8      	movs	r1, #232	; 0xe8
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f828 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 80020c4:	21e8      	movs	r1, #232	; 0xe8
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f876 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf0c      	ite	eq
 80020d6:	2301      	moveq	r3, #1
 80020d8:	2300      	movne	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d000      	beq.n	80020e2 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 80020e0:	e7f0      	b.n	80020c4 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f88a 	bl	80021fc <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 80020e8:	2220      	movs	r2, #32
 80020ea:	21c8      	movs	r1, #200	; 0xc8
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f811 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 80020f2:	2201      	movs	r2, #1
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f80c 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
        }
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	70fb      	strb	r3, [r7, #3]
 8002120:	4613      	mov	r3, r2
 8002122:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8002124:	f7fe fc5e 	bl	80009e4 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	b2db      	uxtb	r3, r3
 8002130:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8002132:	78bb      	ldrb	r3, [r7, #2]
 8002134:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8002136:	f107 010c 	add.w	r1, r7, #12
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	2202      	movs	r2, #2
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8002142:	f004 f87c 	bl	800623e <HAL_SPI_Transmit>
        SPI_SS::Set();
 8002146:	f7fe fc41 	bl	80009cc <_ZN3P103SetEv>
        return;
 800214a:	bf00      	nop
};
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000528 	.word	0x20000528

08002158 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8002164:	2220      	movs	r2, #32
 8002166:	2178      	movs	r1, #120	; 0x78
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ffd3 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 800216e:	2200      	movs	r2, #0
 8002170:	2178      	movs	r1, #120	; 0x78
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffce 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8002178:	89fb      	ldrh	r3, [r7, #14]
 800217a:	3301      	adds	r3, #1
 800217c:	81fb      	strh	r3, [r7, #14]
 800217e:	89fb      	ldrh	r3, [r7, #14]
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf14      	ite	ne
 8002184:	2301      	movne	r3, #1
 8002186:	2300      	moveq	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00f      	beq.n	80021ae <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 800218e:	2168      	movs	r1, #104	; 0x68
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f811 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002196:	4603      	mov	r3, r0
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d100      	bne.n	80021ac <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 80021aa:	e7e5      	b.n	8002178 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 80021ac:	bf00      	nop
        return ( i);
 80021ae:	89fb      	ldrh	r3, [r7, #14]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 80021c4:	f7fe fc0e 	bl	80009e4 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 80021c8:	1cf9      	adds	r1, r7, #3
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	2201      	movs	r2, #1
 80021d0:	4809      	ldr	r0, [pc, #36]	; (80021f8 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80021d2:	f004 f834 	bl	800623e <HAL_SPI_Transmit>
        uint8_t rv = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 80021da:	f107 010f 	add.w	r1, r7, #15
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	2201      	movs	r2, #1
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80021e6:	f004 f966 	bl	80064b6 <HAL_SPI_Receive>
        SPI_SS::Set();
 80021ea:	f7fe fbef 	bl	80009cc <_ZN3P103SetEv>
        return (rv);
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000528 	.word	0x20000528

080021fc <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8002204:	21f8      	movs	r1, #248	; 0xf8
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffd6 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800220c:	4603      	mov	r3, r0
 800220e:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002216:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	2bc0      	cmp	r3, #192	; 0xc0
 800221c:	d04a      	beq.n	80022b4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 800221e:	2bc0      	cmp	r3, #192	; 0xc0
 8002220:	dc55      	bgt.n	80022ce <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8002222:	2b80      	cmp	r3, #128	; 0x80
 8002224:	d006      	beq.n	8002234 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8002226:	2b80      	cmp	r3, #128	; 0x80
 8002228:	dc51      	bgt.n	80022ce <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d046      	beq.n	80022bc <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 800222e:	2b40      	cmp	r3, #64	; 0x40
 8002230:	d020      	beq.n	8002274 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 8002232:	e04c      	b.n	80022ce <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8002234:	21d8      	movs	r1, #216	; 0xd8
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffbe 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800223c:	4603      	mov	r3, r0
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8002250:	22c9      	movs	r2, #201	; 0xc9
 8002252:	21d8      	movs	r1, #216	; 0xd8
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff5d 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 800225a:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800225c:	2202      	movs	r2, #2
 800225e:	701a      	strb	r2, [r3, #0]
                        break;
 8002260:	e035      	b.n	80022ce <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8002262:	22cb      	movs	r2, #203	; 0xcb
 8002264:	21d8      	movs	r1, #216	; 0xd8
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ff54 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800226e:	2203      	movs	r2, #3
 8002270:	701a      	strb	r2, [r3, #0]
                        break;
 8002272:	e02c      	b.n	80022ce <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8002274:	21d8      	movs	r1, #216	; 0xd8
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ff9e 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800227c:	4603      	mov	r3, r0
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf0c      	ite	eq
 8002286:	2301      	moveq	r3, #1
 8002288:	2300      	movne	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8002290:	22cb      	movs	r2, #203	; 0xcb
 8002292:	21d8      	movs	r1, #216	; 0xd8
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff3d 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800229c:	2203      	movs	r2, #3
 800229e:	701a      	strb	r2, [r3, #0]
                        break;
 80022a0:	e015      	b.n	80022ce <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80022a2:	22c9      	movs	r2, #201	; 0xc9
 80022a4:	21d8      	movs	r1, #216	; 0xd8
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ff34 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80022ae:	2202      	movs	r2, #2
 80022b0:	701a      	strb	r2, [r3, #0]
                        break;
 80022b2:	e00c      	b.n	80022ce <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
                        break;
 80022ba:	e008      	b.n	80022ce <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 80022bc:	22d1      	movs	r2, #209	; 0xd1
 80022be:	21d8      	movs	r1, #216	; 0xd8
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff27 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
                        break;
 80022cc:	bf00      	nop
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000096c 	.word	0x2000096c

080022dc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d11a      	bne.n	8002322 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d115      	bne.n	8002322 <_Z41__static_initialization_and_destruction_0ii+0x46>
SerialClass Serial(&huart2);
 80022f6:	490d      	ldr	r1, [pc, #52]	; (800232c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80022f8:	480d      	ldr	r0, [pc, #52]	; (8002330 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80022fa:	f7fe fb3b 	bl	8000974 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80022fe:	480d      	ldr	r0, [pc, #52]	; (8002334 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002300:	f011 f984 	bl	801360c <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8002304:	490b      	ldr	r1, [pc, #44]	; (8002334 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002306:	480c      	ldr	r0, [pc, #48]	; (8002338 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002308:	f00c f918 	bl	800e53c <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800230e:	2200      	movs	r2, #0
 8002310:	4909      	ldr	r1, [pc, #36]	; (8002338 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002312:	480b      	ldr	r0, [pc, #44]	; (8002340 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002314:	f7fe fc5a 	bl	8000bcc <_ZN5PS4BTC1EP3BTDbPKc>
XBOXONESBT XboxOneS(&Btd);
 8002318:	2200      	movs	r2, #0
 800231a:	4907      	ldr	r1, [pc, #28]	; (8002338 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800231c:	4809      	ldr	r0, [pc, #36]	; (8002344 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800231e:	f7fe fd3b 	bl	8000d98 <_ZN10XBOXONESBTC1EP3BTDb>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000484 	.word	0x20000484
 8002330:	200005c4 	.word	0x200005c4
 8002334:	200005d8 	.word	0x200005d8
 8002338:	20000694 	.word	0x20000694
 800233c:	080156fc 	.word	0x080156fc
 8002340:	200007c4 	.word	0x200007c4
 8002344:	2000088c 	.word	0x2000088c

08002348 <_GLOBAL__sub_I_rx_buf>:
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
 800234c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002350:	2001      	movs	r0, #1
 8002352:	f7ff ffc3 	bl	80022dc <_Z41__static_initialization_and_destruction_0ii>
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_MspInit+0x54>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a11      	ldr	r2, [pc, #68]	; (80023ac <HAL_MspInit+0x54>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_MspInit+0x54>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_MspInit+0x54>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_MspInit+0x54>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_MspInit+0x54>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	210f      	movs	r1, #15
 800239a:	f06f 0001 	mvn.w	r0, #1
 800239e:	f000 fb15 	bl	80029cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a19      	ldr	r2, [pc, #100]	; (8002434 <HAL_I2C_MspInit+0x84>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d12c      	bne.n	800242c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_I2C_MspInit+0x88>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_I2C_MspInit+0x88>)
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_I2C_MspInit+0x88>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023f4:	2312      	movs	r3, #18
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f8:	2301      	movs	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002400:	2304      	movs	r3, #4
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	480c      	ldr	r0, [pc, #48]	; (800243c <HAL_I2C_MspInit+0x8c>)
 800240c:	f000 fdf0 	bl	8002ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_I2C_MspInit+0x88>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	4a07      	ldr	r2, [pc, #28]	; (8002438 <HAL_I2C_MspInit+0x88>)
 800241a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800241e:	6413      	str	r3, [r2, #64]	; 0x40
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_I2C_MspInit+0x88>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800242c:	bf00      	nop
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40005400 	.word	0x40005400
 8002438:	40023800 	.word	0x40023800
 800243c:	40020400 	.word	0x40020400

08002440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_SPI_MspInit+0x84>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d12b      	bne.n	80024ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_SPI_MspInit+0x88>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <HAL_SPI_MspInit+0x88>)
 800246c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_SPI_MspInit+0x88>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_SPI_MspInit+0x88>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a10      	ldr	r2, [pc, #64]	; (80024c8 <HAL_SPI_MspInit+0x88>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_SPI_MspInit+0x88>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800249a:	23e0      	movs	r3, #224	; 0xe0
 800249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024aa:	2305      	movs	r3, #5
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	4805      	ldr	r0, [pc, #20]	; (80024cc <HAL_SPI_MspInit+0x8c>)
 80024b6:	f000 fd9b 	bl	8002ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024ba:	bf00      	nop
 80024bc:	3728      	adds	r7, #40	; 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40013000 	.word	0x40013000
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40020000 	.word	0x40020000

080024d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <HAL_TIM_Base_MspInit+0x48>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d115      	bne.n	800250e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_TIM_Base_MspInit+0x4c>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <HAL_TIM_Base_MspInit+0x4c>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_TIM_Base_MspInit+0x4c>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2105      	movs	r1, #5
 8002502:	202d      	movs	r0, #45	; 0x2d
 8002504:	f000 fa62 	bl	80029cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002508:	202d      	movs	r0, #45	; 0x2d
 800250a:	f000 fa7b 	bl	8002a04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40002000 	.word	0x40002000
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <HAL_UART_MspInit+0x84>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d12b      	bne.n	800259a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <HAL_UART_MspInit+0x88>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <HAL_UART_MspInit+0x88>)
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_UART_MspInit+0x88>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_UART_MspInit+0x88>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <HAL_UART_MspInit+0x88>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_UART_MspInit+0x88>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800257a:	230c      	movs	r3, #12
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800258a:	2307      	movs	r3, #7
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	4805      	ldr	r0, [pc, #20]	; (80025ac <HAL_UART_MspInit+0x8c>)
 8002596:	f000 fd2b 	bl	8002ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40004400 	.word	0x40004400
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020000 	.word	0x40020000

080025b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	; 0x30
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80025c0:	2200      	movs	r2, #0
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	202c      	movs	r0, #44	; 0x2c
 80025c6:	f000 fa01 	bl	80029cc <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80025ca:	202c      	movs	r0, #44	; 0x2c
 80025cc:	f000 fa1a 	bl	8002a04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <HAL_InitTick+0xa4>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <HAL_InitTick+0xa4>)
 80025da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025de:	6413      	str	r3, [r2, #64]	; 0x40
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_InitTick+0xa4>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025ec:	f107 0210 	add.w	r2, r7, #16
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 fdec 	bl	80051d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80025fc:	f002 fdc2 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 8002600:	4603      	mov	r3, r0
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	4a13      	ldr	r2, [pc, #76]	; (8002658 <HAL_InitTick+0xa8>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0c9b      	lsrs	r3, r3, #18
 8002610:	3b01      	subs	r3, #1
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_InitTick+0xac>)
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <HAL_InitTick+0xb0>)
 8002618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_InitTick+0xac>)
 800261c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002620:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8002622:	4a0e      	ldr	r2, [pc, #56]	; (800265c <HAL_InitTick+0xac>)
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_InitTick+0xac>)
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_InitTick+0xac>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8002634:	4809      	ldr	r0, [pc, #36]	; (800265c <HAL_InitTick+0xac>)
 8002636:	f004 fb21 	bl	8006c7c <HAL_TIM_Base_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d104      	bne.n	800264a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8002640:	4806      	ldr	r0, [pc, #24]	; (800265c <HAL_InitTick+0xac>)
 8002642:	f004 fb6b 	bl	8006d1c <HAL_TIM_Base_Start_IT>
 8002646:	4603      	mov	r3, r0
 8002648:	e000      	b.n	800264c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	3730      	adds	r7, #48	; 0x30
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40023800 	.word	0x40023800
 8002658:	431bde83 	.word	0x431bde83
 800265c:	200056bc 	.word	0x200056bc
 8002660:	40001c00 	.word	0x40001c00

08002664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <NMI_Handler+0x4>

0800266a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <HardFault_Handler+0x4>

08002670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <MemManage_Handler+0x4>

08002676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267a:	e7fe      	b.n	800267a <BusFault_Handler+0x4>

0800267c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <UsageFault_Handler+0x4>

08002682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002696:	f004 fbb1 	bl	8006dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200056bc 	.word	0x200056bc

080026a4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80026aa:	f004 fba7 	bl	8006dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200004c8 	.word	0x200004c8

080026b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <OTG_FS_IRQHandler+0x10>)
 80026be:	f001 fc0f 	bl	8003ee0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20005c38 	.word	0x20005c38

080026cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	return 1;
 80026d0:	2301      	movs	r3, #1
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_kill>:

int _kill(int pid, int sig)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026e6:	f012 ff67 	bl	80155b8 <__errno>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2216      	movs	r2, #22
 80026ee:	601a      	str	r2, [r3, #0]
	return -1;
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_exit>:

void _exit (int status)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002704:	f04f 31ff 	mov.w	r1, #4294967295
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ffe7 	bl	80026dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800270e:	e7fe      	b.n	800270e <_exit+0x12>

08002710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <SystemInit+0x28>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	4a07      	ldr	r2, [pc, #28]	; (8002738 <SystemInit+0x28>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <SystemInit+0x28>)
 8002726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800272a:	609a      	str	r2, [r3, #8]
#endif
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800273c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002774 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002740:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002742:	e003      	b.n	800274c <LoopCopyDataInit>

08002744 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002746:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002748:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800274a:	3104      	adds	r1, #4

0800274c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800274c:	480b      	ldr	r0, [pc, #44]	; (800277c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002750:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002752:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002754:	d3f6      	bcc.n	8002744 <CopyDataInit>
  ldr  r2, =_sbss
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002758:	e002      	b.n	8002760 <LoopFillZerobss>

0800275a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800275a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800275c:	f842 3b04 	str.w	r3, [r2], #4

08002760 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002762:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002764:	d3f9      	bcc.n	800275a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002766:	f7ff ffd3 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800276a:	f012 ff2b 	bl	80155c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800276e:	f7fe fbc5 	bl	8000efc <main>
  bx  lr    
 8002772:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002774:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002778:	0801785c 	.word	0x0801785c
  ldr  r0, =_sdata
 800277c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002780:	20000188 	.word	0x20000188
  ldr  r2, =_sbss
 8002784:	20000188 	.word	0x20000188
  ldr  r3, = _ebss
 8002788:	20006044 	.word	0x20006044

0800278c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800278c:	e7fe      	b.n	800278c <ADC_IRQHandler>
	...

08002790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <HAL_Init+0x40>)
 800279a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <HAL_Init+0x40>)
 80027a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <HAL_Init+0x40>)
 80027b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b8:	2003      	movs	r0, #3
 80027ba:	f000 f8fc 	bl	80029b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027be:	2000      	movs	r0, #0
 80027c0:	f7ff fef6 	bl	80025b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c4:	f7ff fdc8 	bl	8002358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023c00 	.word	0x40023c00

080027d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x20>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x24>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_IncTick+0x24>)
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	2000000c 	.word	0x2000000c
 80027f8:	20005704 	.word	0x20005704

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_GetTick+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20005704 	.word	0x20005704

08002814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff ffee 	bl	80027fc <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d005      	beq.n	800283a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_Delay+0x44>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800283a:	bf00      	nop
 800283c:	f7ff ffde 	bl	80027fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d8f7      	bhi.n	800283c <HAL_Delay+0x28>
  {
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000000c 	.word	0x2000000c

0800285c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002878:	4013      	ands	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288e:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	60d3      	str	r3, [r2, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <__NVIC_GetPriorityGrouping+0x18>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	f003 0307 	and.w	r3, r3, #7
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	db0b      	blt.n	80028ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	4907      	ldr	r1, [pc, #28]	; (80028f8 <__NVIC_EnableIRQ+0x38>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2001      	movs	r0, #1
 80028e2:	fa00 f202 	lsl.w	r2, r0, r2
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100

080028fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	db0a      	blt.n	8002926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	490c      	ldr	r1, [pc, #48]	; (8002948 <__NVIC_SetPriority+0x4c>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	440b      	add	r3, r1
 8002920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002924:	e00a      	b.n	800293c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4908      	ldr	r1, [pc, #32]	; (800294c <__NVIC_SetPriority+0x50>)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3b04      	subs	r3, #4
 8002934:	0112      	lsls	r2, r2, #4
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	440b      	add	r3, r1
 800293a:	761a      	strb	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000e100 	.word	0xe000e100
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f1c3 0307 	rsb	r3, r3, #7
 800296a:	2b04      	cmp	r3, #4
 800296c:	bf28      	it	cs
 800296e:	2304      	movcs	r3, #4
 8002970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3304      	adds	r3, #4
 8002976:	2b06      	cmp	r3, #6
 8002978:	d902      	bls.n	8002980 <NVIC_EncodePriority+0x30>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3b03      	subs	r3, #3
 800297e:	e000      	b.n	8002982 <NVIC_EncodePriority+0x32>
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43d9      	mvns	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	4313      	orrs	r3, r2
         );
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ff4c 	bl	800285c <__NVIC_SetPriorityGrouping>
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029de:	f7ff ff61 	bl	80028a4 <__NVIC_GetPriorityGrouping>
 80029e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	6978      	ldr	r0, [r7, #20]
 80029ea:	f7ff ffb1 	bl	8002950 <NVIC_EncodePriority>
 80029ee:	4602      	mov	r2, r0
 80029f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff80 	bl	80028fc <__NVIC_SetPriority>
}
 80029fc:	bf00      	nop
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff54 	bl	80028c0 <__NVIC_EnableIRQ>
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a32:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_FLASH_Program+0xa0>)
 8002a34:	7e1b      	ldrb	r3, [r3, #24]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_FLASH_Program+0x1e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e03b      	b.n	8002ab6 <HAL_FLASH_Program+0x96>
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_FLASH_Program+0xa0>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a48:	f000 f870 	bl	8002b2c <FLASH_WaitForLastOperation>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d12b      	bne.n	8002aae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002a5c:	783b      	ldrb	r3, [r7, #0]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	68b8      	ldr	r0, [r7, #8]
 8002a62:	f000 f91b 	bl	8002c9c <FLASH_Program_Byte>
 8002a66:	e016      	b.n	8002a96 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d105      	bne.n	8002a7a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002a6e:	883b      	ldrh	r3, [r7, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	68b8      	ldr	r0, [r7, #8]
 8002a74:	f000 f8ee 	bl	8002c54 <FLASH_Program_HalfWord>
 8002a78:	e00d      	b.n	8002a96 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d105      	bne.n	8002a8c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4619      	mov	r1, r3
 8002a84:	68b8      	ldr	r0, [r7, #8]
 8002a86:	f000 f8c3 	bl	8002c10 <FLASH_Program_Word>
 8002a8a:	e004      	b.n	8002a96 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a90:	68b8      	ldr	r0, [r7, #8]
 8002a92:	f000 f88b 	bl	8002bac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a9a:	f000 f847 	bl	8002b2c <FLASH_WaitForLastOperation>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_FLASH_Program+0xa4>)
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <HAL_FLASH_Program+0xa4>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <HAL_FLASH_Program+0xa0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20005708 	.word	0x20005708
 8002ac4:	40023c00 	.word	0x40023c00

08002ac8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_FLASH_Unlock+0x38>)
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da0b      	bge.n	8002af2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_FLASH_Unlock+0x38>)
 8002adc:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <HAL_FLASH_Unlock+0x3c>)
 8002ade:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_FLASH_Unlock+0x38>)
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <HAL_FLASH_Unlock+0x40>)
 8002ae4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_FLASH_Unlock+0x38>)
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	da01      	bge.n	8002af2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002af2:	79fb      	ldrb	r3, [r7, #7]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40023c00 	.word	0x40023c00
 8002b04:	45670123 	.word	0x45670123
 8002b08:	cdef89ab 	.word	0xcdef89ab

08002b0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_FLASH_Lock+0x1c>)
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <HAL_FLASH_Lock+0x1c>)
 8002b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b1a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40023c00 	.word	0x40023c00

08002b2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <FLASH_WaitForLastOperation+0x78>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b3e:	f7ff fe5d 	bl	80027fc <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002b44:	e010      	b.n	8002b68 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d00c      	beq.n	8002b68 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <FLASH_WaitForLastOperation+0x38>
 8002b54:	f7ff fe52 	bl	80027fc <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d201      	bcs.n	8002b68 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e019      	b.n	8002b9c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <FLASH_WaitForLastOperation+0x7c>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e8      	bne.n	8002b46 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <FLASH_WaitForLastOperation+0x7c>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <FLASH_WaitForLastOperation+0x7c>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <FLASH_WaitForLastOperation+0x7c>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002b92:	f000 f8a5 	bl	8002ce0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
  
}  
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20005708 	.word	0x20005708
 8002ba8:	40023c00 	.word	0x40023c00

08002bac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <FLASH_Program_DoubleWord+0x60>)
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <FLASH_Program_DoubleWord+0x60>)
 8002bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <FLASH_Program_DoubleWord+0x60>)
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <FLASH_Program_DoubleWord+0x60>)
 8002bca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <FLASH_Program_DoubleWord+0x60>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <FLASH_Program_DoubleWord+0x60>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002be2:	f3bf 8f6f 	isb	sy
}
 8002be6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	000a      	movs	r2, r1
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	68f9      	ldr	r1, [r7, #12]
 8002bfa:	3104      	adds	r1, #4
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40023c00 	.word	0x40023c00

08002c10 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <FLASH_Program_Word+0x40>)
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <FLASH_Program_Word+0x40>)
 8002c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <FLASH_Program_Word+0x40>)
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <FLASH_Program_Word+0x40>)
 8002c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <FLASH_Program_Word+0x40>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <FLASH_Program_Word+0x40>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	601a      	str	r2, [r3, #0]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40023c00 	.word	0x40023c00

08002c54 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <FLASH_Program_HalfWord+0x44>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <FLASH_Program_HalfWord+0x44>)
 8002c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <FLASH_Program_HalfWord+0x44>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <FLASH_Program_HalfWord+0x44>)
 8002c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <FLASH_Program_HalfWord+0x44>)
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <FLASH_Program_HalfWord+0x44>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	801a      	strh	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <FLASH_Program_Byte+0x40>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	4a0b      	ldr	r2, [pc, #44]	; (8002cdc <FLASH_Program_Byte+0x40>)
 8002cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <FLASH_Program_Byte+0x40>)
 8002cb6:	4a09      	ldr	r2, [pc, #36]	; (8002cdc <FLASH_Program_Byte+0x40>)
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002cbc:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <FLASH_Program_Byte+0x40>)
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <FLASH_Program_Byte+0x40>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	701a      	strb	r2, [r3, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00

08002ce0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f043 0310 	orr.w	r3, r3, #16
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002cfa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002cfc:	4b29      	ldr	r3, [pc, #164]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002cfe:	2210      	movs	r2, #16
 8002d00:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f043 0308 	orr.w	r3, r3, #8
 8002d16:	4a24      	ldr	r2, [pc, #144]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002d18:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002d1a:	4b22      	ldr	r3, [pc, #136]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002d20:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002d36:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002d3a:	2240      	movs	r2, #64	; 0x40
 8002d3c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002d54:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d009      	beq.n	8002d7c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	4a0d      	ldr	r2, [pc, #52]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002d72:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d7a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f043 0320 	orr.w	r3, r3, #32
 8002d90:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <FLASH_SetErrorCode+0xc8>)
 8002d92:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <FLASH_SetErrorCode+0xc4>)
 8002d96:	2202      	movs	r2, #2
 8002d98:	60da      	str	r2, [r3, #12]
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40023c00 	.word	0x40023c00
 8002da8:	20005708 	.word	0x20005708

08002dac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_FLASHEx_Erase+0xd8>)
 8002dc0:	7e1b      	ldrb	r3, [r3, #24]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_FLASHEx_Erase+0x1e>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e058      	b.n	8002e7c <HAL_FLASHEx_Erase+0xd0>
 8002dca:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <HAL_FLASHEx_Erase+0xd8>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dd4:	f7ff feaa 	bl	8002b2c <FLASH_WaitForLastOperation>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d148      	bne.n	8002e74 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d115      	bne.n	8002e1e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f000 f844 	bl	8002e8c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e08:	f7ff fe90 	bl	8002b2c <FLASH_WaitForLastOperation>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_FLASHEx_Erase+0xdc>)
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <HAL_FLASHEx_Erase+0xdc>)
 8002e16:	f023 0304 	bic.w	r3, r3, #4
 8002e1a:	6113      	str	r3, [r2, #16]
 8002e1c:	e028      	b.n	8002e70 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	e01c      	b.n	8002e60 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	68b8      	ldr	r0, [r7, #8]
 8002e30:	f000 f850 	bl	8002ed4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e38:	f7ff fe78 	bl	8002b2c <FLASH_WaitForLastOperation>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_FLASHEx_Erase+0xdc>)
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	4a10      	ldr	r2, [pc, #64]	; (8002e88 <HAL_FLASHEx_Erase+0xdc>)
 8002e46:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002e4a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	601a      	str	r2, [r3, #0]
          break;
 8002e58:	e00a      	b.n	8002e70 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4413      	add	r3, r2
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d3da      	bcc.n	8002e26 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002e70:	f000 f878 	bl	8002f64 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_FLASHEx_Erase+0xd8>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	761a      	strb	r2, [r3, #24]

  return status;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20005708 	.word	0x20005708
 8002e88:	40023c00 	.word	0x40023c00

08002e8c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	6039      	str	r1, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e98:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <FLASH_MassErase+0x44>)
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <FLASH_MassErase+0x44>)
 8002e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <FLASH_MassErase+0x44>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <FLASH_MassErase+0x44>)
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <FLASH_MassErase+0x44>)
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <FLASH_MassErase+0x44>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6113      	str	r3, [r2, #16]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40023c00 	.word	0x40023c00

08002ed4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e010      	b.n	8002f12 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d103      	bne.n	8002efe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	e009      	b.n	8002f12 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d103      	bne.n	8002f0c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e002      	b.n	8002f12 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002f0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f12:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <FLASH_Erase_Sector+0x8c>)
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <FLASH_Erase_Sector+0x8c>)
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <FLASH_Erase_Sector+0x8c>)
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	490f      	ldr	r1, [pc, #60]	; (8002f60 <FLASH_Erase_Sector+0x8c>)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <FLASH_Erase_Sector+0x8c>)
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	4a0c      	ldr	r2, [pc, #48]	; (8002f60 <FLASH_Erase_Sector+0x8c>)
 8002f30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <FLASH_Erase_Sector+0x8c>)
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <FLASH_Erase_Sector+0x8c>)
 8002f42:	f043 0302 	orr.w	r3, r3, #2
 8002f46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <FLASH_Erase_Sector+0x8c>)
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <FLASH_Erase_Sector+0x8c>)
 8002f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f52:	6113      	str	r3, [r2, #16]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40023c00 	.word	0x40023c00

08002f64 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002f7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f7e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002f80:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002f86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a16      	ldr	r2, [pc, #88]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f96:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a13      	ldr	r2, [pc, #76]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d017      	beq.n	8002fe0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002fc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a07      	ldr	r2, [pc, #28]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fd2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a04      	ldr	r2, [pc, #16]	; (8002fec <FLASH_FlushCaches+0x88>)
 8002fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fde:	6013      	str	r3, [r2, #0]
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40023c00 	.word	0x40023c00

08002ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e165      	b.n	80032d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800300c:	2201      	movs	r2, #1
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	429a      	cmp	r2, r3
 8003026:	f040 8154 	bne.w	80032d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d005      	beq.n	8003042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303e:	2b02      	cmp	r3, #2
 8003040:	d130      	bne.n	80030a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003078:	2201      	movs	r2, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 0201 	and.w	r2, r3, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d017      	beq.n	80030e0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d123      	bne.n	8003134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	08da      	lsrs	r2, r3, #3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3208      	adds	r2, #8
 80030f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	220f      	movs	r2, #15
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	08da      	lsrs	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3208      	adds	r2, #8
 800312e:	69b9      	ldr	r1, [r7, #24]
 8003130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0203 	and.w	r2, r3, #3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80ae 	beq.w	80032d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <HAL_GPIO_Init+0x300>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	4a5c      	ldr	r2, [pc, #368]	; (80032f0 <HAL_GPIO_Init+0x300>)
 8003180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003184:	6453      	str	r3, [r2, #68]	; 0x44
 8003186:	4b5a      	ldr	r3, [pc, #360]	; (80032f0 <HAL_GPIO_Init+0x300>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003192:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_GPIO_Init+0x304>)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	220f      	movs	r2, #15
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4f      	ldr	r2, [pc, #316]	; (80032f8 <HAL_GPIO_Init+0x308>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d025      	beq.n	800320a <HAL_GPIO_Init+0x21a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4e      	ldr	r2, [pc, #312]	; (80032fc <HAL_GPIO_Init+0x30c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01f      	beq.n	8003206 <HAL_GPIO_Init+0x216>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4d      	ldr	r2, [pc, #308]	; (8003300 <HAL_GPIO_Init+0x310>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d019      	beq.n	8003202 <HAL_GPIO_Init+0x212>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4c      	ldr	r2, [pc, #304]	; (8003304 <HAL_GPIO_Init+0x314>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_GPIO_Init+0x20e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a4b      	ldr	r2, [pc, #300]	; (8003308 <HAL_GPIO_Init+0x318>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00d      	beq.n	80031fa <HAL_GPIO_Init+0x20a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a4a      	ldr	r2, [pc, #296]	; (800330c <HAL_GPIO_Init+0x31c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x206>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a49      	ldr	r2, [pc, #292]	; (8003310 <HAL_GPIO_Init+0x320>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_GPIO_Init+0x202>
 80031ee:	2306      	movs	r3, #6
 80031f0:	e00c      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031f2:	2307      	movs	r3, #7
 80031f4:	e00a      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031f6:	2305      	movs	r3, #5
 80031f8:	e008      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031fa:	2304      	movs	r3, #4
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x21c>
 80031fe:	2303      	movs	r3, #3
 8003200:	e004      	b.n	800320c <HAL_GPIO_Init+0x21c>
 8003202:	2302      	movs	r3, #2
 8003204:	e002      	b.n	800320c <HAL_GPIO_Init+0x21c>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x21c>
 800320a:	2300      	movs	r3, #0
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f002 0203 	and.w	r2, r2, #3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4093      	lsls	r3, r2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800321c:	4935      	ldr	r1, [pc, #212]	; (80032f4 <HAL_GPIO_Init+0x304>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322a:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_GPIO_Init+0x324>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800324e:	4a31      	ldr	r2, [pc, #196]	; (8003314 <HAL_GPIO_Init+0x324>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003254:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_GPIO_Init+0x324>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_GPIO_Init+0x324>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_GPIO_Init+0x324>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032a2:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_GPIO_Init+0x324>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_GPIO_Init+0x324>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032cc:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_GPIO_Init+0x324>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	f67f ae96 	bls.w	800300c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3724      	adds	r7, #36	; 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40020000 	.word	0x40020000
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40021400 	.word	0x40021400
 8003310:	40021800 	.word	0x40021800
 8003314:	40013c00 	.word	0x40013c00

08003318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	887b      	ldrh	r3, [r7, #2]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	e001      	b.n	800333a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800333a:	7bfb      	ldrb	r3, [r7, #15]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
 8003354:	4613      	mov	r3, r2
 8003356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003358:	787b      	ldrb	r3, [r7, #1]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003364:	e003      	b.n	800336e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	041a      	lsls	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	619a      	str	r2, [r3, #24]
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e12b      	b.n	80035e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff f804 	bl	80023b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	; 0x24
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033e0:	f001 fed0 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 80033e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4a81      	ldr	r2, [pc, #516]	; (80035f0 <HAL_I2C_Init+0x274>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d807      	bhi.n	8003400 <HAL_I2C_Init+0x84>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4a80      	ldr	r2, [pc, #512]	; (80035f4 <HAL_I2C_Init+0x278>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	bf94      	ite	ls
 80033f8:	2301      	movls	r3, #1
 80033fa:	2300      	movhi	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e006      	b.n	800340e <HAL_I2C_Init+0x92>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a7d      	ldr	r2, [pc, #500]	; (80035f8 <HAL_I2C_Init+0x27c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	bf94      	ite	ls
 8003408:	2301      	movls	r3, #1
 800340a:	2300      	movhi	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0e7      	b.n	80035e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a78      	ldr	r2, [pc, #480]	; (80035fc <HAL_I2C_Init+0x280>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0c9b      	lsrs	r3, r3, #18
 8003420:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a6a      	ldr	r2, [pc, #424]	; (80035f0 <HAL_I2C_Init+0x274>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d802      	bhi.n	8003450 <HAL_I2C_Init+0xd4>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3301      	adds	r3, #1
 800344e:	e009      	b.n	8003464 <HAL_I2C_Init+0xe8>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	4a69      	ldr	r2, [pc, #420]	; (8003600 <HAL_I2C_Init+0x284>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	3301      	adds	r3, #1
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	430b      	orrs	r3, r1
 800346a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	495c      	ldr	r1, [pc, #368]	; (80035f0 <HAL_I2C_Init+0x274>)
 8003480:	428b      	cmp	r3, r1
 8003482:	d819      	bhi.n	80034b8 <HAL_I2C_Init+0x13c>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1e59      	subs	r1, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003492:	1c59      	adds	r1, r3, #1
 8003494:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003498:	400b      	ands	r3, r1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_I2C_Init+0x138>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1e59      	subs	r1, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ac:	3301      	adds	r3, #1
 80034ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b2:	e051      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 80034b4:	2304      	movs	r3, #4
 80034b6:	e04f      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d111      	bne.n	80034e4 <HAL_I2C_Init+0x168>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e58      	subs	r0, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	440b      	add	r3, r1
 80034ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d2:	3301      	adds	r3, #1
 80034d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e012      	b.n	800350a <HAL_I2C_Init+0x18e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e58      	subs	r0, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	0099      	lsls	r1, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Init+0x196>
 800350e:	2301      	movs	r3, #1
 8003510:	e022      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10e      	bne.n	8003538 <HAL_I2C_Init+0x1bc>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1e58      	subs	r0, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6859      	ldr	r1, [r3, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	440b      	add	r3, r1
 8003528:	fbb0 f3f3 	udiv	r3, r0, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003536:	e00f      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1e58      	subs	r0, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	0099      	lsls	r1, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	fbb0 f3f3 	udiv	r3, r0, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	6809      	ldr	r1, [r1, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6911      	ldr	r1, [r2, #16]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68d2      	ldr	r2, [r2, #12]
 8003592:	4311      	orrs	r1, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	430b      	orrs	r3, r1
 800359a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	000186a0 	.word	0x000186a0
 80035f4:	001e847f 	.word	0x001e847f
 80035f8:	003d08ff 	.word	0x003d08ff
 80035fc:	431bde83 	.word	0x431bde83
 8003600:	10624dd3 	.word	0x10624dd3

08003604 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	4608      	mov	r0, r1
 800360e:	4611      	mov	r1, r2
 8003610:	461a      	mov	r2, r3
 8003612:	4603      	mov	r3, r0
 8003614:	817b      	strh	r3, [r7, #10]
 8003616:	460b      	mov	r3, r1
 8003618:	813b      	strh	r3, [r7, #8]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800361e:	f7ff f8ed 	bl	80027fc <HAL_GetTick>
 8003622:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b20      	cmp	r3, #32
 800362e:	f040 80d9 	bne.w	80037e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	2319      	movs	r3, #25
 8003638:	2201      	movs	r2, #1
 800363a:	496d      	ldr	r1, [pc, #436]	; (80037f0 <HAL_I2C_Mem_Write+0x1ec>)
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f971 	bl	8003924 <I2C_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
 800364a:	e0cc      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_I2C_Mem_Write+0x56>
 8003656:	2302      	movs	r3, #2
 8003658:	e0c5      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d007      	beq.n	8003680 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800368e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2221      	movs	r2, #33	; 0x21
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2240      	movs	r2, #64	; 0x40
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a4d      	ldr	r2, [pc, #308]	; (80037f4 <HAL_I2C_Mem_Write+0x1f0>)
 80036c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036c2:	88f8      	ldrh	r0, [r7, #6]
 80036c4:	893a      	ldrh	r2, [r7, #8]
 80036c6:	8979      	ldrh	r1, [r7, #10]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	4603      	mov	r3, r0
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f890 	bl	80037f8 <I2C_RequestMemoryWrite>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d052      	beq.n	8003784 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e081      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f9f2 	bl	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d107      	bne.n	800370a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003708:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06b      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d11b      	bne.n	8003784 <HAL_I2C_Mem_Write+0x180>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	d017      	beq.n	8003784 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1aa      	bne.n	80036e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f9de 	bl	8003b52 <I2C_WaitOnBTFFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00d      	beq.n	80037b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d107      	bne.n	80037b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e016      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	e000      	b.n	80037e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
  }
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	00100002 	.word	0x00100002
 80037f4:	ffff0000 	.word	0xffff0000

080037f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	461a      	mov	r2, r3
 8003806:	4603      	mov	r3, r0
 8003808:	817b      	strh	r3, [r7, #10]
 800380a:	460b      	mov	r3, r1
 800380c:	813b      	strh	r3, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003820:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	2200      	movs	r2, #0
 800382a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f878 	bl	8003924 <I2C_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003848:	d103      	bne.n	8003852 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e05f      	b.n	8003916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003856:	897b      	ldrh	r3, [r7, #10]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003864:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	492d      	ldr	r1, [pc, #180]	; (8003920 <I2C_RequestMemoryWrite+0x128>)
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f8b0 	bl	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e04c      	b.n	8003916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003894:	6a39      	ldr	r1, [r7, #32]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f91a 	bl	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d107      	bne.n	80038ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e02b      	b.n	8003916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d105      	bne.n	80038d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038c4:	893b      	ldrh	r3, [r7, #8]
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	611a      	str	r2, [r3, #16]
 80038ce:	e021      	b.n	8003914 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038d0:	893b      	ldrh	r3, [r7, #8]
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	6a39      	ldr	r1, [r7, #32]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f8f4 	bl	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d107      	bne.n	8003906 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003904:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e005      	b.n	8003916 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800390a:	893b      	ldrh	r3, [r7, #8]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	00010002 	.word	0x00010002

08003924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003934:	e025      	b.n	8003982 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d021      	beq.n	8003982 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fe ff5d 	bl	80027fc <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d116      	bne.n	8003982 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e023      	b.n	80039ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d10d      	bne.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	43da      	mvns	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4013      	ands	r3, r2
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf0c      	ite	eq
 800399e:	2301      	moveq	r3, #1
 80039a0:	2300      	movne	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	e00c      	b.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4013      	ands	r3, r2
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf0c      	ite	eq
 80039ba:	2301      	moveq	r3, #1
 80039bc:	2300      	movne	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d0b6      	beq.n	8003936 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e0:	e051      	b.n	8003a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f0:	d123      	bne.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f043 0204 	orr.w	r2, r3, #4
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e046      	b.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d021      	beq.n	8003a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fe fedb 	bl	80027fc <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d116      	bne.n	8003a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e020      	b.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d10c      	bne.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bf14      	ite	ne
 8003aa2:	2301      	movne	r3, #1
 8003aa4:	2300      	moveq	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	e00b      	b.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	43da      	mvns	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d18d      	bne.n	80039e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003adc:	e02d      	b.n	8003b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f878 	bl	8003bd4 <I2C_IsAcknowledgeFailed>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e02d      	b.n	8003b4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d021      	beq.n	8003b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7fe fe81 	bl	80027fc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d116      	bne.n	8003b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f043 0220 	orr.w	r2, r3, #32
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e007      	b.n	8003b4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b44:	2b80      	cmp	r3, #128	; 0x80
 8003b46:	d1ca      	bne.n	8003ade <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b5e:	e02d      	b.n	8003bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f837 	bl	8003bd4 <I2C_IsAcknowledgeFailed>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e02d      	b.n	8003bcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b76:	d021      	beq.n	8003bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b78:	f7fe fe40 	bl	80027fc <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d302      	bcc.n	8003b8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d116      	bne.n	8003bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e007      	b.n	8003bcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d1ca      	bne.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	d11b      	bne.n	8003c24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f043 0204 	orr.w	r2, r3, #4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c34:	b08f      	sub	sp, #60	; 0x3c
 8003c36:	af0a      	add	r7, sp, #40	; 0x28
 8003c38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e116      	b.n	8003e72 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f009 fea4 	bl	800d9ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2203      	movs	r2, #3
 8003c68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f003 ff47 	bl	8007b16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	687e      	ldr	r6, [r7, #4]
 8003c90:	466d      	mov	r5, sp
 8003c92:	f106 0410 	add.w	r4, r6, #16
 8003c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ca2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ca6:	1d33      	adds	r3, r6, #4
 8003ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003caa:	6838      	ldr	r0, [r7, #0]
 8003cac:	f003 fe1e 	bl	80078ec <USB_CoreInit>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0d7      	b.n	8003e72 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 ff35 	bl	8007b38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
 8003cd2:	e04a      	b.n	8003d6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	333d      	adds	r3, #61	; 0x3d
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	333c      	adds	r3, #60	; 0x3c
 8003cf8:	7bfa      	ldrb	r2, [r7, #15]
 8003cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	b298      	uxth	r0, r3
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3342      	adds	r3, #66	; 0x42
 8003d10:	4602      	mov	r2, r0
 8003d12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d14:	7bfa      	ldrb	r2, [r7, #15]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	333f      	adds	r3, #63	; 0x3f
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d28:	7bfa      	ldrb	r2, [r7, #15]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	3344      	adds	r3, #68	; 0x44
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	3348      	adds	r3, #72	; 0x48
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d50:	7bfa      	ldrb	r2, [r7, #15]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3350      	adds	r3, #80	; 0x50
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	3301      	adds	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
 8003d6a:	7bfa      	ldrb	r2, [r7, #15]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d3af      	bcc.n	8003cd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]
 8003d78:	e044      	b.n	8003e04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d7a:	7bfa      	ldrb	r2, [r7, #15]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003da6:	7bfa      	ldrb	r2, [r7, #15]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003de8:	7bfa      	ldrb	r2, [r7, #15]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	3301      	adds	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d3b5      	bcc.n	8003d7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	687e      	ldr	r6, [r7, #4]
 8003e16:	466d      	mov	r5, sp
 8003e18:	f106 0410 	add.w	r4, r6, #16
 8003e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e28:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e2c:	1d33      	adds	r3, r6, #4
 8003e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e30:	6838      	ldr	r0, [r7, #0]
 8003e32:	f003 feab 	bl	8007b8c <USB_DevInit>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e014      	b.n	8003e72 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d102      	bne.n	8003e66 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f001 f879 	bl	8004f58 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f004 fee6 	bl	8008c3c <USB_DevDisconnect>

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_PCD_Start+0x1c>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e020      	b.n	8003ed8 <HAL_PCD_Start+0x5e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d109      	bne.n	8003eba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d005      	beq.n	8003eba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f003 fe18 	bl	8007af4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f004 fe96 	bl	8008bfa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ee0:	b590      	push	{r4, r7, lr}
 8003ee2:	b08d      	sub	sp, #52	; 0x34
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f004 ff54 	bl	8008da4 <USB_GetMode>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f040 83ca 	bne.w	8004698 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f004 feb8 	bl	8008c7e <USB_ReadInterrupts>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 83c0 	beq.w	8004696 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f004 feaf 	bl	8008c7e <USB_ReadInterrupts>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d107      	bne.n	8003f3a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f002 0202 	and.w	r2, r2, #2
 8003f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f004 fe9d 	bl	8008c7e <USB_ReadInterrupts>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d161      	bne.n	8004012 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699a      	ldr	r2, [r3, #24]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0210 	bic.w	r2, r2, #16
 8003f5c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f003 020f 	and.w	r2, r3, #15
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	0c5b      	lsrs	r3, r3, #17
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d124      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d035      	beq.n	8004002 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	6a38      	ldr	r0, [r7, #32]
 8003faa:	f004 fd03 	bl	80089b4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fba:	441a      	add	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fcc:	441a      	add	r2, r3
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	619a      	str	r2, [r3, #24]
 8003fd2:	e016      	b.n	8004002 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	0c5b      	lsrs	r3, r3, #17
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	2b06      	cmp	r3, #6
 8003fde:	d110      	bne.n	8004002 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6a38      	ldr	r0, [r7, #32]
 8003fec:	f004 fce2 	bl	80089b4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ffc:	441a      	add	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0210 	orr.w	r2, r2, #16
 8004010:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f004 fe31 	bl	8008c7e <USB_ReadInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004022:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004026:	d16e      	bne.n	8004106 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f004 fe37 	bl	8008ca4 <USB_ReadDevAllOutEpInterrupt>
 8004036:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004038:	e062      	b.n	8004100 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d057      	beq.n	80040f4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f004 fe5c 	bl	8008d0c <USB_ReadDevOutEPInterrupt>
 8004054:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00c      	beq.n	800407a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	461a      	mov	r2, r3
 800406e:	2301      	movs	r3, #1
 8004070:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004072:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fdc5 	bl	8004c04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	461a      	mov	r2, r3
 8004092:	2308      	movs	r3, #8
 8004094:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004096:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 febf 	bl	8004e1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b4:	461a      	mov	r2, r3
 80040b6:	2310      	movs	r3, #16
 80040b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	461a      	mov	r2, r3
 80040d2:	2320      	movs	r3, #32
 80040d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	461a      	mov	r2, r3
 80040ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	3301      	adds	r3, #1
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d199      	bne.n	800403a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f004 fdb7 	bl	8008c7e <USB_ReadInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004116:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800411a:	f040 80c0 	bne.w	800429e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f004 fdd8 	bl	8008cd8 <USB_ReadDevAllInEpInterrupt>
 8004128:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800412e:	e0b2      	b.n	8004296 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80a7 	beq.w	800428a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f004 fdfe 	bl	8008d48 <USB_ReadDevInEPInterrupt>
 800414c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d057      	beq.n	8004208 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	2201      	movs	r2, #1
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	43db      	mvns	r3, r3
 8004172:	69f9      	ldr	r1, [r7, #28]
 8004174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004178:	4013      	ands	r3, r2
 800417a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	461a      	mov	r2, r3
 800418a:	2301      	movs	r3, #1
 800418c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d132      	bne.n	80041fc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	3348      	adds	r3, #72	; 0x48
 80041a6:	6819      	ldr	r1, [r3, #0]
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4403      	add	r3, r0
 80041b6:	3344      	adds	r3, #68	; 0x44
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4419      	add	r1, r3
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4403      	add	r3, r0
 80041ca:	3348      	adds	r3, #72	; 0x48
 80041cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d113      	bne.n	80041fc <HAL_PCD_IRQHandler+0x31c>
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	3350      	adds	r3, #80	; 0x50
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d108      	bne.n	80041fc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041f4:	461a      	mov	r2, r3
 80041f6:	2101      	movs	r1, #1
 80041f8:	f004 fe06 	bl	8008e08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	4619      	mov	r1, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f009 fc53 	bl	800daae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421e:	461a      	mov	r2, r3
 8004220:	2308      	movs	r3, #8
 8004222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423a:	461a      	mov	r2, r3
 800423c:	2310      	movs	r3, #16
 800423e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004256:	461a      	mov	r2, r3
 8004258:	2340      	movs	r3, #64	; 0x40
 800425a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004272:	461a      	mov	r2, r3
 8004274:	2302      	movs	r3, #2
 8004276:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fc30 	bl	8004aea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	3301      	adds	r3, #1
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	2b00      	cmp	r3, #0
 800429a:	f47f af49 	bne.w	8004130 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f004 fceb 	bl	8008c7e <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b2:	d122      	bne.n	80042fa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d108      	bne.n	80042e4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042da:	2100      	movs	r1, #0
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f009 fe23 	bl	800df28 <HAL_PCDEx_LPM_Callback>
 80042e2:	e002      	b.n	80042ea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f009 fc59 	bl	800db9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80042f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f004 fcbd 	bl	8008c7e <USB_ReadInterrupts>
 8004304:	4603      	mov	r3, r0
 8004306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430e:	d112      	bne.n	8004336 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d102      	bne.n	8004326 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f009 fc15 	bl	800db50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004334:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f004 fc9f 	bl	8008c7e <USB_ReadInterrupts>
 8004340:	4603      	mov	r3, r0
 8004342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800434a:	d121      	bne.n	8004390 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800435a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d111      	bne.n	800438a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	f003 020f 	and.w	r2, r3, #15
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004380:	2101      	movs	r1, #1
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f009 fdd0 	bl	800df28 <HAL_PCDEx_LPM_Callback>
 8004388:	e002      	b.n	8004390 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f009 fbe0 	bl	800db50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f004 fc72 	bl	8008c7e <USB_ReadInterrupts>
 800439a:	4603      	mov	r3, r0
 800439c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a4:	f040 80c7 	bne.w	8004536 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2110      	movs	r1, #16
 80043c2:	4618      	mov	r0, r3
 80043c4:	f003 fd40 	bl	8007e48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c8:	2300      	movs	r3, #0
 80043ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043cc:	e056      	b.n	800447c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	461a      	mov	r2, r3
 80043dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f2:	0151      	lsls	r1, r2, #5
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	440a      	add	r2, r1
 80043f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004400:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004412:	0151      	lsls	r1, r2, #5
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	440a      	add	r2, r1
 8004418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004420:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	461a      	mov	r2, r3
 8004430:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004434:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004450:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004454:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004466:	0151      	lsls	r1, r2, #5
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	440a      	add	r2, r1
 800446c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004470:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004474:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004478:	3301      	adds	r3, #1
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004482:	429a      	cmp	r2, r3
 8004484:	d3a3      	bcc.n	80043ce <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004494:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004498:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d016      	beq.n	80044d0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044b2:	f043 030b 	orr.w	r3, r3, #11
 80044b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044c8:	f043 030b 	orr.w	r3, r3, #11
 80044cc:	6453      	str	r3, [r2, #68]	; 0x44
 80044ce:	e015      	b.n	80044fc <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80044e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f6:	f043 030b 	orr.w	r3, r3, #11
 80044fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800450a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800450e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004520:	461a      	mov	r2, r3
 8004522:	f004 fc71 	bl	8008e08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f004 fb9f 	bl	8008c7e <USB_ReadInterrupts>
 8004540:	4603      	mov	r3, r0
 8004542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454a:	d124      	bne.n	8004596 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f004 fc35 	bl	8008dc0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f003 fcd5 	bl	8007f0a <USB_GetDevSpeed>
 8004560:	4603      	mov	r3, r0
 8004562:	461a      	mov	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681c      	ldr	r4, [r3, #0]
 800456c:	f000 fdfe 	bl	800516c <HAL_RCC_GetHCLKFreq>
 8004570:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004576:	b2db      	uxtb	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	4620      	mov	r0, r4
 800457c:	f003 fa18 	bl	80079b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f009 fabc 	bl	800dafe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004594:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f004 fb6f 	bl	8008c7e <USB_ReadInterrupts>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d10a      	bne.n	80045c0 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f009 fa99 	bl	800dae2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f002 0208 	and.w	r2, r2, #8
 80045be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f004 fb5a 	bl	8008c7e <USB_ReadInterrupts>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d4:	d10f      	bne.n	80045f6 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f009 fafb 	bl	800dbdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80045f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f004 fb3f 	bl	8008c7e <USB_ReadInterrupts>
 8004600:	4603      	mov	r3, r0
 8004602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800460a:	d10f      	bne.n	800462c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	b2db      	uxtb	r3, r3
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f009 face 	bl	800dbb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800462a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f004 fb24 	bl	8008c7e <USB_ReadInterrupts>
 8004636:	4603      	mov	r3, r0
 8004638:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800463c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004640:	d10a      	bne.n	8004658 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f009 fadc 	bl	800dc00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f004 fb0e 	bl	8008c7e <USB_ReadInterrupts>
 8004662:	4603      	mov	r3, r0
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b04      	cmp	r3, #4
 800466a:	d115      	bne.n	8004698 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f009 facc 	bl	800dc1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	430a      	orrs	r2, r1
 8004692:	605a      	str	r2, [r3, #4]
 8004694:	e000      	b.n	8004698 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004696:	bf00      	nop
    }
  }
}
 8004698:	3734      	adds	r7, #52	; 0x34
 800469a:	46bd      	mov	sp, r7
 800469c:	bd90      	pop	{r4, r7, pc}

0800469e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_PCD_SetAddress+0x1a>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e013      	b.n	80046e0 <HAL_PCD_SetAddress+0x42>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	78fa      	ldrb	r2, [r7, #3]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f004 fa6c 	bl	8008bae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	4608      	mov	r0, r1
 80046f2:	4611      	mov	r1, r2
 80046f4:	461a      	mov	r2, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	70fb      	strb	r3, [r7, #3]
 80046fa:	460b      	mov	r3, r1
 80046fc:	803b      	strh	r3, [r7, #0]
 80046fe:	4613      	mov	r3, r2
 8004700:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800470a:	2b00      	cmp	r3, #0
 800470c:	da0f      	bge.n	800472e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	f003 020f 	and.w	r2, r3, #15
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	3338      	adds	r3, #56	; 0x38
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	3304      	adds	r3, #4
 8004724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	705a      	strb	r2, [r3, #1]
 800472c:	e00f      	b.n	800474e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	f003 020f 	and.w	r2, r3, #15
 8004734:	4613      	mov	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	4413      	add	r3, r2
 8004744:	3304      	adds	r3, #4
 8004746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800475a:	883a      	ldrh	r2, [r7, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	78ba      	ldrb	r2, [r7, #2]
 8004764:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	785b      	ldrb	r3, [r3, #1]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004778:	78bb      	ldrb	r3, [r7, #2]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d102      	bne.n	8004784 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_PCD_EP_Open+0xaa>
 800478e:	2302      	movs	r3, #2
 8004790:	e00e      	b.n	80047b0 <HAL_PCD_EP_Open+0xc8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f003 fbd7 	bl	8007f54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80047ae:	7afb      	ldrb	r3, [r7, #11]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	da0f      	bge.n	80047ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	f003 020f 	and.w	r2, r3, #15
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	3338      	adds	r3, #56	; 0x38
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	3304      	adds	r3, #4
 80047e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	705a      	strb	r2, [r3, #1]
 80047ea:	e00f      	b.n	800480c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	f003 020f 	and.w	r2, r3, #15
 80047f2:	4613      	mov	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	3304      	adds	r3, #4
 8004804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	b2da      	uxtb	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_PCD_EP_Close+0x6e>
 8004822:	2302      	movs	r3, #2
 8004824:	e00e      	b.n	8004844 <HAL_PCD_EP_Close+0x8c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	4618      	mov	r0, r3
 8004836:	f003 fc15 	bl	8008064 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	460b      	mov	r3, r1
 800485a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800485c:	7afb      	ldrb	r3, [r7, #11]
 800485e:	f003 020f 	and.w	r2, r3, #15
 8004862:	4613      	mov	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	3304      	adds	r3, #4
 8004874:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2200      	movs	r2, #0
 800488c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800488e:	7afb      	ldrb	r3, [r7, #11]
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	b2da      	uxtb	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d102      	bne.n	80048a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048a8:	7afb      	ldrb	r3, [r7, #11]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	6979      	ldr	r1, [r7, #20]
 80048c0:	f003 fef0 	bl	80086a4 <USB_EP0StartXfer>
 80048c4:	e008      	b.n	80048d8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	6979      	ldr	r1, [r7, #20]
 80048d4:	f003 fca2 	bl	800821c <USB_EPStartXfer>
  }

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b086      	sub	sp, #24
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	460b      	mov	r3, r1
 80048f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048f2:	7afb      	ldrb	r3, [r7, #11]
 80048f4:	f003 020f 	and.w	r2, r3, #15
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	3338      	adds	r3, #56	; 0x38
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	3304      	adds	r3, #4
 8004908:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2200      	movs	r2, #0
 800491a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2201      	movs	r2, #1
 8004920:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004922:	7afb      	ldrb	r3, [r7, #11]
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	b2da      	uxtb	r2, r3
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d102      	bne.n	800493c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800493c:	7afb      	ldrb	r3, [r7, #11]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	6979      	ldr	r1, [r7, #20]
 8004954:	f003 fea6 	bl	80086a4 <USB_EP0StartXfer>
 8004958:	e008      	b.n	800496c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	6979      	ldr	r1, [r7, #20]
 8004968:	f003 fc58 	bl	800821c <USB_EPStartXfer>
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	f003 020f 	and.w	r2, r3, #15
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	429a      	cmp	r2, r3
 800498e:	d901      	bls.n	8004994 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e050      	b.n	8004a36 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004998:	2b00      	cmp	r3, #0
 800499a:	da0f      	bge.n	80049bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	3338      	adds	r3, #56	; 0x38
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	3304      	adds	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	705a      	strb	r2, [r3, #1]
 80049ba:	e00d      	b.n	80049d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	4613      	mov	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4413      	add	r3, r2
 80049ce:	3304      	adds	r3, #4
 80049d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_PCD_EP_SetStall+0x82>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e01e      	b.n	8004a36 <HAL_PCD_EP_SetStall+0xc0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68f9      	ldr	r1, [r7, #12]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f003 fffd 	bl	8008a06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	b2d9      	uxtb	r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a26:	461a      	mov	r2, r3
 8004a28:	f004 f9ee 	bl	8008e08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	f003 020f 	and.w	r2, r3, #15
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d901      	bls.n	8004a5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e042      	b.n	8004ae2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	da0f      	bge.n	8004a84 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	f003 020f 	and.w	r2, r3, #15
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	3338      	adds	r3, #56	; 0x38
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	3304      	adds	r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	705a      	strb	r2, [r3, #1]
 8004a82:	e00f      	b.n	8004aa4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	f003 020f 	and.w	r2, r3, #15
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_PCD_EP_ClrStall+0x86>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e00e      	b.n	8004ae2 <HAL_PCD_EP_ClrStall+0xa4>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68f9      	ldr	r1, [r7, #12]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f004 f805 	bl	8008ae2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b08a      	sub	sp, #40	; 0x28
 8004aee:	af02      	add	r7, sp, #8
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	3338      	adds	r3, #56	; 0x38
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	3304      	adds	r3, #4
 8004b10:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d901      	bls.n	8004b22 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e06c      	b.n	8004bfc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d902      	bls.n	8004b3e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3303      	adds	r3, #3
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b46:	e02b      	b.n	8004ba0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d902      	bls.n	8004b64 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	3303      	adds	r3, #3
 8004b68:	089b      	lsrs	r3, r3, #2
 8004b6a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68d9      	ldr	r1, [r3, #12]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	4603      	mov	r3, r0
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f003 fee1 	bl	800894a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	441a      	add	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	699a      	ldr	r2, [r3, #24]
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	441a      	add	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d809      	bhi.n	8004bca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d203      	bcs.n	8004bca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1be      	bne.n	8004b48 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	695a      	ldr	r2, [r3, #20]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d811      	bhi.n	8004bfa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	2201      	movs	r2, #1
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	6939      	ldr	r1, [r7, #16]
 8004bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	333c      	adds	r3, #60	; 0x3c
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	f040 80a0 	bne.w	8004d7c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d015      	beq.n	8004c72 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a72      	ldr	r2, [pc, #456]	; (8004e14 <PCD_EP_OutXfrComplete_int+0x210>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	f240 80dd 	bls.w	8004e0a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 80d7 	beq.w	8004e0a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6e:	6093      	str	r3, [r2, #8]
 8004c70:	e0cb      	b.n	8004e0a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	6093      	str	r3, [r2, #8]
 8004c8e:	e0bc      	b.n	8004e0a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 80b7 	bne.w	8004e0a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4a5d      	ldr	r2, [pc, #372]	; (8004e14 <PCD_EP_OutXfrComplete_int+0x210>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d90f      	bls.n	8004cc4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc0:	6093      	str	r3, [r2, #8]
 8004cc2:	e0a2      	b.n	8004e0a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004cd6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	0159      	lsls	r1, r3, #5
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	440b      	add	r3, r1
 8004ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004cea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4403      	add	r3, r0
 8004cfa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004cfe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d12:	6819      	ldr	r1, [r3, #0]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4403      	add	r3, r0
 8004d22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4419      	add	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4403      	add	r3, r0
 8004d38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d3c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d114      	bne.n	8004d6e <PCD_EP_OutXfrComplete_int+0x16a>
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d108      	bne.n	8004d6e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d66:	461a      	mov	r2, r3
 8004d68:	2101      	movs	r1, #1
 8004d6a:	f004 f84d 	bl	8008e08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f008 fe7f 	bl	800da78 <HAL_PCD_DataOutStageCallback>
 8004d7a:	e046      	b.n	8004e0a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a26      	ldr	r2, [pc, #152]	; (8004e18 <PCD_EP_OutXfrComplete_int+0x214>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d124      	bne.n	8004dce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da0:	6093      	str	r3, [r2, #8]
 8004da2:	e032      	b.n	8004e0a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f008 fe56 	bl	800da78 <HAL_PCD_DataOutStageCallback>
 8004dcc:	e01d      	b.n	8004e0a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d114      	bne.n	8004dfe <PCD_EP_OutXfrComplete_int+0x1fa>
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d108      	bne.n	8004dfe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004df6:	461a      	mov	r2, r3
 8004df8:	2100      	movs	r1, #0
 8004dfa:	f004 f805 	bl	8008e08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f008 fe37 	bl	800da78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	4f54300a 	.word	0x4f54300a
 8004e18:	4f54310a 	.word	0x4f54310a

08004e1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	333c      	adds	r3, #60	; 0x3c
 8004e34:	3304      	adds	r3, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d90e      	bls.n	8004e70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f008 fdef 	bl	800da54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d90c      	bls.n	8004e98 <PCD_EP_OutSetupPacket_int+0x7c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d108      	bne.n	8004e98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e90:	461a      	mov	r2, r3
 8004e92:	2101      	movs	r1, #1
 8004e94:	f003 ffb8 	bl	8008e08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	4f54300a 	.word	0x4f54300a

08004ea8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d107      	bne.n	8004ed6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ec6:	883b      	ldrh	r3, [r7, #0]
 8004ec8:	0419      	lsls	r1, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ed4:	e028      	b.n	8004f28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	73fb      	strb	r3, [r7, #15]
 8004ee8:	e00d      	b.n	8004f06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	3340      	adds	r3, #64	; 0x40
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4413      	add	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	3301      	adds	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
 8004f06:	7bfa      	ldrb	r2, [r7, #15]
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d3ec      	bcc.n	8004eea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f10:	883b      	ldrh	r3, [r7, #0]
 8004f12:	0418      	lsls	r0, r3, #16
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6819      	ldr	r1, [r3, #0]
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	4302      	orrs	r2, r0
 8004f20:	3340      	adds	r3, #64	; 0x40
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	887a      	ldrh	r2, [r7, #2]
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	f043 0303 	orr.w	r3, r3, #3
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0cc      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb4:	4b68      	ldr	r3, [pc, #416]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d90c      	bls.n	8004fdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc2:	4b65      	ldr	r3, [pc, #404]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fca:	4b63      	ldr	r3, [pc, #396]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0b8      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d020      	beq.n	800502a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff4:	4b59      	ldr	r3, [pc, #356]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4a58      	ldr	r2, [pc, #352]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ffe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800500c:	4b53      	ldr	r3, [pc, #332]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a52      	ldr	r2, [pc, #328]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005016:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005018:	4b50      	ldr	r3, [pc, #320]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	494d      	ldr	r1, [pc, #308]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d044      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d107      	bne.n	800504e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503e:	4b47      	ldr	r3, [pc, #284]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d119      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e07f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d003      	beq.n	800505e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505a:	2b03      	cmp	r3, #3
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505e:	4b3f      	ldr	r3, [pc, #252]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e06f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506e:	4b3b      	ldr	r3, [pc, #236]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e067      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507e:	4b37      	ldr	r3, [pc, #220]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 0203 	bic.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4934      	ldr	r1, [pc, #208]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	4313      	orrs	r3, r2
 800508e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005090:	f7fd fbb4 	bl	80027fc <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005096:	e00a      	b.n	80050ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005098:	f7fd fbb0 	bl	80027fc <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e04f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 020c 	and.w	r2, r3, #12
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1eb      	bne.n	8005098 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050c0:	4b25      	ldr	r3, [pc, #148]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d20c      	bcs.n	80050e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b22      	ldr	r3, [pc, #136]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b20      	ldr	r3, [pc, #128]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e032      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4916      	ldr	r1, [pc, #88]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005112:	4b12      	ldr	r3, [pc, #72]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	490e      	ldr	r1, [pc, #56]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005126:	f000 fbb1 	bl	800588c <HAL_RCC_GetSysClockFreq>
 800512a:	4602      	mov	r2, r0
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	490a      	ldr	r1, [pc, #40]	; (8005160 <HAL_RCC_ClockConfig+0x1c0>)
 8005138:	5ccb      	ldrb	r3, [r1, r3]
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	4a09      	ldr	r2, [pc, #36]	; (8005164 <HAL_RCC_ClockConfig+0x1c4>)
 8005140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_RCC_ClockConfig+0x1c8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fd fa32 	bl	80025b0 <HAL_InitTick>

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40023c00 	.word	0x40023c00
 800515c:	40023800 	.word	0x40023800
 8005160:	08016954 	.word	0x08016954
 8005164:	20000004 	.word	0x20000004
 8005168:	20000008 	.word	0x20000008

0800516c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005170:	4b03      	ldr	r3, [pc, #12]	; (8005180 <HAL_RCC_GetHCLKFreq+0x14>)
 8005172:	681b      	ldr	r3, [r3, #0]
}
 8005174:	4618      	mov	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	20000004 	.word	0x20000004

08005184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005188:	f7ff fff0 	bl	800516c <HAL_RCC_GetHCLKFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	0a9b      	lsrs	r3, r3, #10
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	4903      	ldr	r1, [pc, #12]	; (80051a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40023800 	.word	0x40023800
 80051a8:	08016964 	.word	0x08016964

080051ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051b0:	f7ff ffdc 	bl	800516c <HAL_RCC_GetHCLKFreq>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	0b5b      	lsrs	r3, r3, #13
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	4903      	ldr	r1, [pc, #12]	; (80051d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051c2:	5ccb      	ldrb	r3, [r1, r3]
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40023800 	.word	0x40023800
 80051d0:	08016964 	.word	0x08016964

080051d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	220f      	movs	r2, #15
 80051e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051e4:	4b12      	ldr	r3, [pc, #72]	; (8005230 <HAL_RCC_GetClockConfig+0x5c>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 0203 	and.w	r2, r3, #3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <HAL_RCC_GetClockConfig+0x5c>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051fc:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <HAL_RCC_GetClockConfig+0x5c>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005208:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_RCC_GetClockConfig+0x5c>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	08db      	lsrs	r3, r3, #3
 800520e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005216:	4b07      	ldr	r3, [pc, #28]	; (8005234 <HAL_RCC_GetClockConfig+0x60>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 020f 	and.w	r2, r3, #15
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	601a      	str	r2, [r3, #0]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800
 8005234:	40023c00 	.word	0x40023c00

08005238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08c      	sub	sp, #48	; 0x30
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d010      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005270:	4b6f      	ldr	r3, [pc, #444]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005276:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	496c      	ldr	r1, [pc, #432]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800528e:	2301      	movs	r3, #1
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d010      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800529e:	4b64      	ldr	r3, [pc, #400]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ac:	4960      	ldr	r1, [pc, #384]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80052bc:	2301      	movs	r3, #1
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d017      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052cc:	4b58      	ldr	r3, [pc, #352]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	4955      	ldr	r1, [pc, #340]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ea:	d101      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80052ec:	2301      	movs	r3, #1
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80052f8:	2301      	movs	r3, #1
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d017      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005308:	4b49      	ldr	r3, [pc, #292]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800530a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800530e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	4946      	ldr	r1, [pc, #280]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005326:	d101      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005328:	2301      	movs	r3, #1
 800532a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005334:	2301      	movs	r3, #1
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 808a 	beq.w	800545a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	4b39      	ldr	r3, [pc, #228]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	4a38      	ldr	r2, [pc, #224]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005354:	6413      	str	r3, [r2, #64]	; 0x40
 8005356:	4b36      	ldr	r3, [pc, #216]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005362:	4b34      	ldr	r3, [pc, #208]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a33      	ldr	r2, [pc, #204]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800536c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800536e:	f7fd fa45 	bl	80027fc <HAL_GetTick>
 8005372:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005376:	f7fd fa41 	bl	80027fc <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e278      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005388:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f0      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005394:	4b26      	ldr	r3, [pc, #152]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d02f      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ac:	6a3a      	ldr	r2, [r7, #32]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d028      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053b2:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053bc:	4b1e      	ldr	r3, [pc, #120]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80053be:	2201      	movs	r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053c2:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053ce:	4b18      	ldr	r3, [pc, #96]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d114      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053da:	f7fd fa0f 	bl	80027fc <HAL_GetTick>
 80053de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e0:	e00a      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e2:	f7fd fa0b 	bl	80027fc <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e240      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0ee      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005410:	d114      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005426:	4902      	ldr	r1, [pc, #8]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005428:	4313      	orrs	r3, r2
 800542a:	608b      	str	r3, [r1, #8]
 800542c:	e00c      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800
 8005434:	40007000 	.word	0x40007000
 8005438:	42470e40 	.word	0x42470e40
 800543c:	4b4a      	ldr	r3, [pc, #296]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	4a49      	ldr	r2, [pc, #292]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005442:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005446:	6093      	str	r3, [r2, #8]
 8005448:	4b47      	ldr	r3, [pc, #284]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800544a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005454:	4944      	ldr	r1, [pc, #272]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005456:	4313      	orrs	r3, r2
 8005458:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800546c:	4b3f      	ldr	r3, [pc, #252]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800546e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800547c:	4b3a      	ldr	r3, [pc, #232]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005482:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548a:	4937      	ldr	r1, [pc, #220]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800549e:	4b32      	ldr	r3, [pc, #200]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ac:	492e      	ldr	r1, [pc, #184]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d011      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054c0:	4b29      	ldr	r3, [pc, #164]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	4926      	ldr	r1, [pc, #152]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054de:	d101      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80054e0:	2301      	movs	r3, #1
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80054f0:	4b1d      	ldr	r3, [pc, #116]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	491a      	ldr	r1, [pc, #104]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550e:	2b00      	cmp	r3, #0
 8005510:	d011      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005518:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005520:	4911      	ldr	r1, [pc, #68]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005530:	d101      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005532:	2301      	movs	r3, #1
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d005      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005544:	f040 80ff 	bne.w	8005746 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005548:	4b09      	ldr	r3, [pc, #36]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800554e:	f7fd f955 	bl	80027fc <HAL_GetTick>
 8005552:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005554:	e00e      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005556:	f7fd f951 	bl	80027fc <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d907      	bls.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e188      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005568:	40023800 	.word	0x40023800
 800556c:	424711e0 	.word	0x424711e0
 8005570:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005574:	4b7e      	ldr	r3, [pc, #504]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ea      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	2b00      	cmp	r3, #0
 8005592:	d009      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800559c:	2b00      	cmp	r3, #0
 800559e:	d028      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d124      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80055a8:	4b71      	ldr	r3, [pc, #452]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ae:	0c1b      	lsrs	r3, r3, #16
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	3301      	adds	r3, #1
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055ba:	4b6d      	ldr	r3, [pc, #436]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c0:	0e1b      	lsrs	r3, r3, #24
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	019b      	lsls	r3, r3, #6
 80055d2:	431a      	orrs	r2, r3
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	3b01      	subs	r3, #1
 80055da:	041b      	lsls	r3, r3, #16
 80055dc:	431a      	orrs	r2, r3
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	061b      	lsls	r3, r3, #24
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	071b      	lsls	r3, r3, #28
 80055ea:	4961      	ldr	r1, [pc, #388]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005610:	2b00      	cmp	r3, #0
 8005612:	d035      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800561c:	d130      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800561e:	4b54      	ldr	r3, [pc, #336]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	3301      	adds	r3, #1
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005630:	4b4f      	ldr	r3, [pc, #316]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005636:	0f1b      	lsrs	r3, r3, #28
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	019b      	lsls	r3, r3, #6
 8005648:	431a      	orrs	r2, r3
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	3b01      	subs	r3, #1
 8005650:	041b      	lsls	r3, r3, #16
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	061b      	lsls	r3, r3, #24
 800565a:	431a      	orrs	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	071b      	lsls	r3, r3, #28
 8005660:	4943      	ldr	r1, [pc, #268]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005668:	4b41      	ldr	r3, [pc, #260]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800566a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566e:	f023 021f 	bic.w	r2, r3, #31
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	3b01      	subs	r3, #1
 8005678:	493d      	ldr	r1, [pc, #244]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005688:	2b00      	cmp	r3, #0
 800568a:	d029      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005694:	d124      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005696:	4b36      	ldr	r3, [pc, #216]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	3301      	adds	r3, #1
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056a8:	4b31      	ldr	r3, [pc, #196]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ae:	0f1b      	lsrs	r3, r3, #28
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	019b      	lsls	r3, r3, #6
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	3b01      	subs	r3, #1
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	431a      	orrs	r2, r3
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	431a      	orrs	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	071b      	lsls	r3, r3, #28
 80056d8:	4925      	ldr	r1, [pc, #148]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d016      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	019b      	lsls	r3, r3, #6
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	085b      	lsrs	r3, r3, #1
 80056fe:	3b01      	subs	r3, #1
 8005700:	041b      	lsls	r3, r3, #16
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	061b      	lsls	r3, r3, #24
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	071b      	lsls	r3, r3, #28
 8005712:	4917      	ldr	r1, [pc, #92]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800571a:	4b16      	ldr	r3, [pc, #88]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800571c:	2201      	movs	r2, #1
 800571e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005720:	f7fd f86c 	bl	80027fc <HAL_GetTick>
 8005724:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005726:	e008      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005728:	f7fd f868 	bl	80027fc <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e09f      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800573a:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	2b01      	cmp	r3, #1
 800574a:	f040 8095 	bne.w	8005878 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800574e:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005754:	f7fd f852 	bl	80027fc <HAL_GetTick>
 8005758:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800575a:	e00f      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800575c:	f7fd f84e 	bl	80027fc <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d908      	bls.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e085      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800576e:	bf00      	nop
 8005770:	40023800 	.word	0x40023800
 8005774:	42470068 	.word	0x42470068
 8005778:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800577c:	4b41      	ldr	r3, [pc, #260]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005788:	d0e8      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d02b      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d127      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80057b2:	4b34      	ldr	r3, [pc, #208]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	3301      	adds	r3, #1
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	019b      	lsls	r3, r3, #6
 80057ce:	431a      	orrs	r2, r3
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	3b01      	subs	r3, #1
 80057d6:	041b      	lsls	r3, r3, #16
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	061b      	lsls	r3, r3, #24
 80057e0:	4928      	ldr	r1, [pc, #160]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057e8:	4b26      	ldr	r3, [pc, #152]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	3b01      	subs	r3, #1
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	4922      	ldr	r1, [pc, #136]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01d      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005816:	d118      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005818:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	0e1b      	lsrs	r3, r3, #24
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	019b      	lsls	r3, r3, #6
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	3b01      	subs	r3, #1
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	061b      	lsls	r3, r3, #24
 8005842:	4910      	ldr	r1, [pc, #64]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800584a:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800584c:	2201      	movs	r2, #1
 800584e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005850:	f7fc ffd4 	bl	80027fc <HAL_GetTick>
 8005854:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005856:	e008      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005858:	f7fc ffd0 	bl	80027fc <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e007      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005876:	d1ef      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3730      	adds	r7, #48	; 0x30
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40023800 	.word	0x40023800
 8005888:	42470070 	.word	0x42470070

0800588c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800588c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005890:	b088      	sub	sp, #32
 8005892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058a8:	4bce      	ldr	r3, [pc, #824]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x358>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 030c 	and.w	r3, r3, #12
 80058b0:	2b0c      	cmp	r3, #12
 80058b2:	f200 818d 	bhi.w	8005bd0 <HAL_RCC_GetSysClockFreq+0x344>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <HAL_RCC_GetSysClockFreq+0x30>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058f1 	.word	0x080058f1
 80058c0:	08005bd1 	.word	0x08005bd1
 80058c4:	08005bd1 	.word	0x08005bd1
 80058c8:	08005bd1 	.word	0x08005bd1
 80058cc:	080058f7 	.word	0x080058f7
 80058d0:	08005bd1 	.word	0x08005bd1
 80058d4:	08005bd1 	.word	0x08005bd1
 80058d8:	08005bd1 	.word	0x08005bd1
 80058dc:	080058fd 	.word	0x080058fd
 80058e0:	08005bd1 	.word	0x08005bd1
 80058e4:	08005bd1 	.word	0x08005bd1
 80058e8:	08005bd1 	.word	0x08005bd1
 80058ec:	08005a71 	.word	0x08005a71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058f0:	4bbd      	ldr	r3, [pc, #756]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80058f2:	61bb      	str	r3, [r7, #24]
       break;
 80058f4:	e16f      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058f6:	4bbd      	ldr	r3, [pc, #756]	; (8005bec <HAL_RCC_GetSysClockFreq+0x360>)
 80058f8:	61bb      	str	r3, [r7, #24]
      break;
 80058fa:	e16c      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058fc:	4bb9      	ldr	r3, [pc, #740]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x358>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005904:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005906:	4bb7      	ldr	r3, [pc, #732]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d053      	beq.n	80059ba <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005912:	4bb4      	ldr	r3, [pc, #720]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	099b      	lsrs	r3, r3, #6
 8005918:	461a      	mov	r2, r3
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	ea02 0400 	and.w	r4, r2, r0
 800592a:	603c      	str	r4, [r7, #0]
 800592c:	400b      	ands	r3, r1
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005934:	4620      	mov	r0, r4
 8005936:	4629      	mov	r1, r5
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	014b      	lsls	r3, r1, #5
 8005942:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005946:	0142      	lsls	r2, r0, #5
 8005948:	4610      	mov	r0, r2
 800594a:	4619      	mov	r1, r3
 800594c:	4623      	mov	r3, r4
 800594e:	1ac0      	subs	r0, r0, r3
 8005950:	462b      	mov	r3, r5
 8005952:	eb61 0103 	sbc.w	r1, r1, r3
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	018b      	lsls	r3, r1, #6
 8005960:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005964:	0182      	lsls	r2, r0, #6
 8005966:	1a12      	subs	r2, r2, r0
 8005968:	eb63 0301 	sbc.w	r3, r3, r1
 800596c:	f04f 0000 	mov.w	r0, #0
 8005970:	f04f 0100 	mov.w	r1, #0
 8005974:	00d9      	lsls	r1, r3, #3
 8005976:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800597a:	00d0      	lsls	r0, r2, #3
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4621      	mov	r1, r4
 8005982:	1852      	adds	r2, r2, r1
 8005984:	4629      	mov	r1, r5
 8005986:	eb43 0101 	adc.w	r1, r3, r1
 800598a:	460b      	mov	r3, r1
 800598c:	f04f 0000 	mov.w	r0, #0
 8005990:	f04f 0100 	mov.w	r1, #0
 8005994:	0259      	lsls	r1, r3, #9
 8005996:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800599a:	0250      	lsls	r0, r2, #9
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4610      	mov	r0, r2
 80059a2:	4619      	mov	r1, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	f7fa fc38 	bl	8000220 <__aeabi_uldivmod>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4613      	mov	r3, r2
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	e04c      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ba:	4b8a      	ldr	r3, [pc, #552]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x358>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	099b      	lsrs	r3, r3, #6
 80059c0:	461a      	mov	r2, r3
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059ca:	f04f 0100 	mov.w	r1, #0
 80059ce:	ea02 0a00 	and.w	sl, r2, r0
 80059d2:	ea03 0b01 	and.w	fp, r3, r1
 80059d6:	4650      	mov	r0, sl
 80059d8:	4659      	mov	r1, fp
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	014b      	lsls	r3, r1, #5
 80059e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059e8:	0142      	lsls	r2, r0, #5
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	ebb0 000a 	subs.w	r0, r0, sl
 80059f2:	eb61 010b 	sbc.w	r1, r1, fp
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	018b      	lsls	r3, r1, #6
 8005a00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a04:	0182      	lsls	r2, r0, #6
 8005a06:	1a12      	subs	r2, r2, r0
 8005a08:	eb63 0301 	sbc.w	r3, r3, r1
 8005a0c:	f04f 0000 	mov.w	r0, #0
 8005a10:	f04f 0100 	mov.w	r1, #0
 8005a14:	00d9      	lsls	r1, r3, #3
 8005a16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a1a:	00d0      	lsls	r0, r2, #3
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	eb12 020a 	adds.w	r2, r2, sl
 8005a24:	eb43 030b 	adc.w	r3, r3, fp
 8005a28:	f04f 0000 	mov.w	r0, #0
 8005a2c:	f04f 0100 	mov.w	r1, #0
 8005a30:	0299      	lsls	r1, r3, #10
 8005a32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a36:	0290      	lsls	r0, r2, #10
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	4619      	mov	r1, r3
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	f7fa fbea 	bl	8000220 <__aeabi_uldivmod>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4613      	mov	r3, r2
 8005a52:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a54:	4b63      	ldr	r3, [pc, #396]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005a64:	69fa      	ldr	r2, [r7, #28]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	61bb      	str	r3, [r7, #24]
      break;
 8005a6e:	e0b2      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a70:	4b5c      	ldr	r3, [pc, #368]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a78:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a7a:	4b5a      	ldr	r3, [pc, #360]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d04d      	beq.n	8005b22 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a86:	4b57      	ldr	r3, [pc, #348]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	099b      	lsrs	r3, r3, #6
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a96:	f04f 0100 	mov.w	r1, #0
 8005a9a:	ea02 0800 	and.w	r8, r2, r0
 8005a9e:	ea03 0901 	and.w	r9, r3, r1
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	014b      	lsls	r3, r1, #5
 8005ab0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ab4:	0142      	lsls	r2, r0, #5
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4619      	mov	r1, r3
 8005aba:	ebb0 0008 	subs.w	r0, r0, r8
 8005abe:	eb61 0109 	sbc.w	r1, r1, r9
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	018b      	lsls	r3, r1, #6
 8005acc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ad0:	0182      	lsls	r2, r0, #6
 8005ad2:	1a12      	subs	r2, r2, r0
 8005ad4:	eb63 0301 	sbc.w	r3, r3, r1
 8005ad8:	f04f 0000 	mov.w	r0, #0
 8005adc:	f04f 0100 	mov.w	r1, #0
 8005ae0:	00d9      	lsls	r1, r3, #3
 8005ae2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ae6:	00d0      	lsls	r0, r2, #3
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	eb12 0208 	adds.w	r2, r2, r8
 8005af0:	eb43 0309 	adc.w	r3, r3, r9
 8005af4:	f04f 0000 	mov.w	r0, #0
 8005af8:	f04f 0100 	mov.w	r1, #0
 8005afc:	0259      	lsls	r1, r3, #9
 8005afe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b02:	0250      	lsls	r0, r2, #9
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	f7fa fb84 	bl	8000220 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e04a      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b22:	4b30      	ldr	r3, [pc, #192]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	099b      	lsrs	r3, r3, #6
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f04f 0300 	mov.w	r3, #0
 8005b2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b32:	f04f 0100 	mov.w	r1, #0
 8005b36:	ea02 0400 	and.w	r4, r2, r0
 8005b3a:	ea03 0501 	and.w	r5, r3, r1
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	014b      	lsls	r3, r1, #5
 8005b4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b50:	0142      	lsls	r2, r0, #5
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	1b00      	subs	r0, r0, r4
 8005b58:	eb61 0105 	sbc.w	r1, r1, r5
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	018b      	lsls	r3, r1, #6
 8005b66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b6a:	0182      	lsls	r2, r0, #6
 8005b6c:	1a12      	subs	r2, r2, r0
 8005b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f04f 0100 	mov.w	r1, #0
 8005b7a:	00d9      	lsls	r1, r3, #3
 8005b7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b80:	00d0      	lsls	r0, r2, #3
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	1912      	adds	r2, r2, r4
 8005b88:	eb45 0303 	adc.w	r3, r5, r3
 8005b8c:	f04f 0000 	mov.w	r0, #0
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	0299      	lsls	r1, r3, #10
 8005b96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b9a:	0290      	lsls	r0, r2, #10
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	f7fa fb38 	bl	8000220 <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	0f1b      	lsrs	r3, r3, #28
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	61bb      	str	r3, [r7, #24]
      break;
 8005bce:	e002      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005bd2:	61bb      	str	r3, [r7, #24]
      break;
 8005bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005be2:	bf00      	nop
 8005be4:	40023800 	.word	0x40023800
 8005be8:	00f42400 	.word	0x00f42400
 8005bec:	007a1200 	.word	0x007a1200

08005bf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e28d      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8083 	beq.w	8005d16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c10:	4b94      	ldr	r3, [pc, #592]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 030c 	and.w	r3, r3, #12
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d019      	beq.n	8005c50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c1c:	4b91      	ldr	r3, [pc, #580]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d106      	bne.n	8005c36 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c28:	4b8e      	ldr	r3, [pc, #568]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c34:	d00c      	beq.n	8005c50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c36:	4b8b      	ldr	r3, [pc, #556]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c3e:	2b0c      	cmp	r3, #12
 8005c40:	d112      	bne.n	8005c68 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c42:	4b88      	ldr	r3, [pc, #544]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c4e:	d10b      	bne.n	8005c68 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c50:	4b84      	ldr	r3, [pc, #528]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d05b      	beq.n	8005d14 <HAL_RCC_OscConfig+0x124>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d157      	bne.n	8005d14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e25a      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d106      	bne.n	8005c80 <HAL_RCC_OscConfig+0x90>
 8005c72:	4b7c      	ldr	r3, [pc, #496]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a7b      	ldr	r2, [pc, #492]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e01d      	b.n	8005cbc <HAL_RCC_OscConfig+0xcc>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c88:	d10c      	bne.n	8005ca4 <HAL_RCC_OscConfig+0xb4>
 8005c8a:	4b76      	ldr	r3, [pc, #472]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a75      	ldr	r2, [pc, #468]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	4b73      	ldr	r3, [pc, #460]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a72      	ldr	r2, [pc, #456]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e00b      	b.n	8005cbc <HAL_RCC_OscConfig+0xcc>
 8005ca4:	4b6f      	ldr	r3, [pc, #444]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a6e      	ldr	r2, [pc, #440]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b6c      	ldr	r3, [pc, #432]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a6b      	ldr	r2, [pc, #428]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d013      	beq.n	8005cec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fc fd9a 	bl	80027fc <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ccc:	f7fc fd96 	bl	80027fc <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	; 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e21f      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cde:	4b61      	ldr	r3, [pc, #388]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0xdc>
 8005cea:	e014      	b.n	8005d16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fc fd86 	bl	80027fc <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf4:	f7fc fd82 	bl	80027fc <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b64      	cmp	r3, #100	; 0x64
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e20b      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d06:	4b57      	ldr	r3, [pc, #348]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x104>
 8005d12:	e000      	b.n	8005d16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d06f      	beq.n	8005e02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d22:	4b50      	ldr	r3, [pc, #320]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d017      	beq.n	8005d5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d2e:	4b4d      	ldr	r3, [pc, #308]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d105      	bne.n	8005d46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d3a:	4b4a      	ldr	r3, [pc, #296]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d46:	4b47      	ldr	r3, [pc, #284]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d4e:	2b0c      	cmp	r3, #12
 8005d50:	d11c      	bne.n	8005d8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d52:	4b44      	ldr	r3, [pc, #272]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d116      	bne.n	8005d8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5e:	4b41      	ldr	r3, [pc, #260]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <HAL_RCC_OscConfig+0x186>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d001      	beq.n	8005d76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e1d3      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d76:	4b3b      	ldr	r3, [pc, #236]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4937      	ldr	r1, [pc, #220]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8a:	e03a      	b.n	8005e02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d020      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d94:	4b34      	ldr	r3, [pc, #208]	; (8005e68 <HAL_RCC_OscConfig+0x278>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9a:	f7fc fd2f 	bl	80027fc <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da2:	f7fc fd2b 	bl	80027fc <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e1b4      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db4:	4b2b      	ldr	r3, [pc, #172]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc0:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	4925      	ldr	r1, [pc, #148]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	600b      	str	r3, [r1, #0]
 8005dd4:	e015      	b.n	8005e02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dd6:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <HAL_RCC_OscConfig+0x278>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ddc:	f7fc fd0e 	bl	80027fc <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de4:	f7fc fd0a 	bl	80027fc <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e193      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df6:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f0      	bne.n	8005de4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d036      	beq.n	8005e7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d016      	beq.n	8005e44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e16:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1c:	f7fc fcee 	bl	80027fc <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e24:	f7fc fcea 	bl	80027fc <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e173      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <HAL_RCC_OscConfig+0x274>)
 8005e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCC_OscConfig+0x234>
 8005e42:	e01b      	b.n	8005e7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <HAL_RCC_OscConfig+0x27c>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e4a:	f7fc fcd7 	bl	80027fc <HAL_GetTick>
 8005e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e50:	e00e      	b.n	8005e70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e52:	f7fc fcd3 	bl	80027fc <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d907      	bls.n	8005e70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e15c      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
 8005e64:	40023800 	.word	0x40023800
 8005e68:	42470000 	.word	0x42470000
 8005e6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e70:	4b8a      	ldr	r3, [pc, #552]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1ea      	bne.n	8005e52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8097 	beq.w	8005fb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e8e:	4b83      	ldr	r3, [pc, #524]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10f      	bne.n	8005eba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	4b7f      	ldr	r3, [pc, #508]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	4a7e      	ldr	r2, [pc, #504]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eaa:	4b7c      	ldr	r3, [pc, #496]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb2:	60bb      	str	r3, [r7, #8]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eba:	4b79      	ldr	r3, [pc, #484]	; (80060a0 <HAL_RCC_OscConfig+0x4b0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d118      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ec6:	4b76      	ldr	r3, [pc, #472]	; (80060a0 <HAL_RCC_OscConfig+0x4b0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a75      	ldr	r2, [pc, #468]	; (80060a0 <HAL_RCC_OscConfig+0x4b0>)
 8005ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ed2:	f7fc fc93 	bl	80027fc <HAL_GetTick>
 8005ed6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eda:	f7fc fc8f 	bl	80027fc <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e118      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eec:	4b6c      	ldr	r3, [pc, #432]	; (80060a0 <HAL_RCC_OscConfig+0x4b0>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0f0      	beq.n	8005eda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d106      	bne.n	8005f0e <HAL_RCC_OscConfig+0x31e>
 8005f00:	4b66      	ldr	r3, [pc, #408]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f04:	4a65      	ldr	r2, [pc, #404]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f06:	f043 0301 	orr.w	r3, r3, #1
 8005f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f0c:	e01c      	b.n	8005f48 <HAL_RCC_OscConfig+0x358>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d10c      	bne.n	8005f30 <HAL_RCC_OscConfig+0x340>
 8005f16:	4b61      	ldr	r3, [pc, #388]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	4a60      	ldr	r2, [pc, #384]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f1c:	f043 0304 	orr.w	r3, r3, #4
 8005f20:	6713      	str	r3, [r2, #112]	; 0x70
 8005f22:	4b5e      	ldr	r3, [pc, #376]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	4a5d      	ldr	r2, [pc, #372]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2e:	e00b      	b.n	8005f48 <HAL_RCC_OscConfig+0x358>
 8005f30:	4b5a      	ldr	r3, [pc, #360]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f34:	4a59      	ldr	r2, [pc, #356]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3c:	4b57      	ldr	r3, [pc, #348]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	4a56      	ldr	r2, [pc, #344]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f42:	f023 0304 	bic.w	r3, r3, #4
 8005f46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d015      	beq.n	8005f7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f50:	f7fc fc54 	bl	80027fc <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f56:	e00a      	b.n	8005f6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f58:	f7fc fc50 	bl	80027fc <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e0d7      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f6e:	4b4b      	ldr	r3, [pc, #300]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0ee      	beq.n	8005f58 <HAL_RCC_OscConfig+0x368>
 8005f7a:	e014      	b.n	8005fa6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7c:	f7fc fc3e 	bl	80027fc <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f82:	e00a      	b.n	8005f9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f84:	f7fc fc3a 	bl	80027fc <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e0c1      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f9a:	4b40      	ldr	r3, [pc, #256]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1ee      	bne.n	8005f84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d105      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fac:	4b3b      	ldr	r3, [pc, #236]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	4a3a      	ldr	r2, [pc, #232]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80ad 	beq.w	800611c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fc2:	4b36      	ldr	r3, [pc, #216]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 030c 	and.w	r3, r3, #12
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d060      	beq.n	8006090 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d145      	bne.n	8006062 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd6:	4b33      	ldr	r3, [pc, #204]	; (80060a4 <HAL_RCC_OscConfig+0x4b4>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7fc fc0e 	bl	80027fc <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe4:	f7fc fc0a 	bl	80027fc <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e093      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff6:	4b29      	ldr	r3, [pc, #164]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69da      	ldr	r2, [r3, #28]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	019b      	lsls	r3, r3, #6
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	085b      	lsrs	r3, r3, #1
 800601a:	3b01      	subs	r3, #1
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	061b      	lsls	r3, r3, #24
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	071b      	lsls	r3, r3, #28
 800602e:	491b      	ldr	r1, [pc, #108]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8006030:	4313      	orrs	r3, r2
 8006032:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006034:	4b1b      	ldr	r3, [pc, #108]	; (80060a4 <HAL_RCC_OscConfig+0x4b4>)
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603a:	f7fc fbdf 	bl	80027fc <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006042:	f7fc fbdb 	bl	80027fc <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e064      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006054:	4b11      	ldr	r3, [pc, #68]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f0      	beq.n	8006042 <HAL_RCC_OscConfig+0x452>
 8006060:	e05c      	b.n	800611c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006062:	4b10      	ldr	r3, [pc, #64]	; (80060a4 <HAL_RCC_OscConfig+0x4b4>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006068:	f7fc fbc8 	bl	80027fc <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006070:	f7fc fbc4 	bl	80027fc <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e04d      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006082:	4b06      	ldr	r3, [pc, #24]	; (800609c <HAL_RCC_OscConfig+0x4ac>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0x480>
 800608e:	e045      	b.n	800611c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d107      	bne.n	80060a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e040      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
 800609c:	40023800 	.word	0x40023800
 80060a0:	40007000 	.word	0x40007000
 80060a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060a8:	4b1f      	ldr	r3, [pc, #124]	; (8006128 <HAL_RCC_OscConfig+0x538>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d030      	beq.n	8006118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d129      	bne.n	8006118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d122      	bne.n	8006118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060d8:	4013      	ands	r3, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d119      	bne.n	8006118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	085b      	lsrs	r3, r3, #1
 80060f0:	3b01      	subs	r3, #1
 80060f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d10f      	bne.n	8006118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006104:	429a      	cmp	r2, r3
 8006106:	d107      	bne.n	8006118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006114:	429a      	cmp	r2, r3
 8006116:	d001      	beq.n	800611c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800

0800612c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e07b      	b.n	8006236 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d108      	bne.n	8006158 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800614e:	d009      	beq.n	8006164 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	61da      	str	r2, [r3, #28]
 8006156:	e005      	b.n	8006164 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fc f95e 	bl	8002440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800619a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	ea42 0103 	orr.w	r1, r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	f003 0104 	and.w	r1, r3, #4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	f003 0210 	and.w	r2, r3, #16
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006224:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b088      	sub	sp, #32
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_SPI_Transmit+0x22>
 800625c:	2302      	movs	r3, #2
 800625e:	e126      	b.n	80064ae <HAL_SPI_Transmit+0x270>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006268:	f7fc fac8 	bl	80027fc <HAL_GetTick>
 800626c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b01      	cmp	r3, #1
 800627c:	d002      	beq.n	8006284 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800627e:	2302      	movs	r3, #2
 8006280:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006282:	e10b      	b.n	800649c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_SPI_Transmit+0x52>
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006294:	e102      	b.n	800649c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2203      	movs	r2, #3
 800629a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	88fa      	ldrh	r2, [r7, #6]
 80062ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	88fa      	ldrh	r2, [r7, #6]
 80062b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062dc:	d10f      	bne.n	80062fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	d007      	beq.n	800631c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800631a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006324:	d14b      	bne.n	80063be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_SPI_Transmit+0xf6>
 800632e:	8afb      	ldrh	r3, [r7, #22]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d13e      	bne.n	80063b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006338:	881a      	ldrh	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	1c9a      	adds	r2, r3, #2
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006358:	e02b      	b.n	80063b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b02      	cmp	r3, #2
 8006366:	d112      	bne.n	800638e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	881a      	ldrh	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	1c9a      	adds	r2, r3, #2
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	86da      	strh	r2, [r3, #54]	; 0x36
 800638c:	e011      	b.n	80063b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800638e:	f7fc fa35 	bl	80027fc <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d803      	bhi.n	80063a6 <HAL_SPI_Transmit+0x168>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d102      	bne.n	80063ac <HAL_SPI_Transmit+0x16e>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063b0:	e074      	b.n	800649c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1ce      	bne.n	800635a <HAL_SPI_Transmit+0x11c>
 80063bc:	e04c      	b.n	8006458 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_SPI_Transmit+0x18e>
 80063c6:	8afb      	ldrh	r3, [r7, #22]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d140      	bne.n	800644e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	330c      	adds	r3, #12
 80063d6:	7812      	ldrb	r2, [r2, #0]
 80063d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063f2:	e02c      	b.n	800644e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d113      	bne.n	800642a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	330c      	adds	r3, #12
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	86da      	strh	r2, [r3, #54]	; 0x36
 8006428:	e011      	b.n	800644e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800642a:	f7fc f9e7 	bl	80027fc <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d803      	bhi.n	8006442 <HAL_SPI_Transmit+0x204>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d102      	bne.n	8006448 <HAL_SPI_Transmit+0x20a>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800644c:	e026      	b.n	800649c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1cd      	bne.n	80063f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fbcb 	bl	8006bf8 <SPI_EndRxTxTransaction>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e000      	b.n	800649c <HAL_SPI_Transmit+0x25e>
  }

error:
 800649a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3720      	adds	r7, #32
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b088      	sub	sp, #32
 80064ba:	af02      	add	r7, sp, #8
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	603b      	str	r3, [r7, #0]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064d2:	d112      	bne.n	80064fa <HAL_SPI_Receive+0x44>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10e      	bne.n	80064fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2204      	movs	r2, #4
 80064e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064e4:	88fa      	ldrh	r2, [r7, #6]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	4613      	mov	r3, r2
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 f8f1 	bl	80066d8 <HAL_SPI_TransmitReceive>
 80064f6:	4603      	mov	r3, r0
 80064f8:	e0ea      	b.n	80066d0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_SPI_Receive+0x52>
 8006504:	2302      	movs	r3, #2
 8006506:	e0e3      	b.n	80066d0 <HAL_SPI_Receive+0x21a>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006510:	f7fc f974 	bl	80027fc <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b01      	cmp	r3, #1
 8006520:	d002      	beq.n	8006528 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006522:	2302      	movs	r3, #2
 8006524:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006526:	e0ca      	b.n	80066be <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_SPI_Receive+0x7e>
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006538:	e0c1      	b.n	80066be <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2204      	movs	r2, #4
 800653e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	88fa      	ldrh	r2, [r7, #6]
 8006552:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	88fa      	ldrh	r2, [r7, #6]
 8006558:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006580:	d10f      	bne.n	80065a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006590:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b40      	cmp	r3, #64	; 0x40
 80065ae:	d007      	beq.n	80065c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d162      	bne.n	800668e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80065c8:	e02e      	b.n	8006628 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d115      	bne.n	8006604 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f103 020c 	add.w	r2, r3, #12
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	7812      	ldrb	r2, [r2, #0]
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006602:	e011      	b.n	8006628 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006604:	f7fc f8fa 	bl	80027fc <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d803      	bhi.n	800661c <HAL_SPI_Receive+0x166>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661a:	d102      	bne.n	8006622 <HAL_SPI_Receive+0x16c>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d102      	bne.n	8006628 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006626:	e04a      	b.n	80066be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1cb      	bne.n	80065ca <HAL_SPI_Receive+0x114>
 8006632:	e031      	b.n	8006698 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d113      	bne.n	800666a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	b292      	uxth	r2, r2
 800664e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	1c9a      	adds	r2, r3, #2
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006668:	e011      	b.n	800668e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800666a:	f7fc f8c7 	bl	80027fc <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d803      	bhi.n	8006682 <HAL_SPI_Receive+0x1cc>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006680:	d102      	bne.n	8006688 <HAL_SPI_Receive+0x1d2>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d102      	bne.n	800668e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800668c:	e017      	b.n	80066be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1cd      	bne.n	8006634 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 fa45 	bl	8006b2c <SPI_EndRxTransaction>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	75fb      	strb	r3, [r7, #23]
 80066ba:	e000      	b.n	80066be <HAL_SPI_Receive+0x208>
  }

error :
 80066bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08c      	sub	sp, #48	; 0x30
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066e6:	2301      	movs	r3, #1
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <HAL_SPI_TransmitReceive+0x26>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e18a      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x33c>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006706:	f7fc f879 	bl	80027fc <HAL_GetTick>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800671c:	887b      	ldrh	r3, [r7, #2]
 800671e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006724:	2b01      	cmp	r3, #1
 8006726:	d00f      	beq.n	8006748 <HAL_SPI_TransmitReceive+0x70>
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800672e:	d107      	bne.n	8006740 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d103      	bne.n	8006740 <HAL_SPI_TransmitReceive+0x68>
 8006738:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800673c:	2b04      	cmp	r3, #4
 800673e:	d003      	beq.n	8006748 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006740:	2302      	movs	r3, #2
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006746:	e15b      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <HAL_SPI_TransmitReceive+0x82>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <HAL_SPI_TransmitReceive+0x82>
 8006754:	887b      	ldrh	r3, [r7, #2]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d103      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006760:	e14e      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b04      	cmp	r3, #4
 800676c:	d003      	beq.n	8006776 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2205      	movs	r2, #5
 8006772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	887a      	ldrh	r2, [r7, #2]
 8006786:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	887a      	ldrh	r2, [r7, #2]
 800678c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	887a      	ldrh	r2, [r7, #2]
 8006798:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	887a      	ldrh	r2, [r7, #2]
 800679e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d007      	beq.n	80067ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d2:	d178      	bne.n	80068c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <HAL_SPI_TransmitReceive+0x10a>
 80067dc:	8b7b      	ldrh	r3, [r7, #26]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d166      	bne.n	80068b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	881a      	ldrh	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	1c9a      	adds	r2, r3, #2
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006806:	e053      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b02      	cmp	r3, #2
 8006814:	d11b      	bne.n	800684e <HAL_SPI_TransmitReceive+0x176>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d016      	beq.n	800684e <HAL_SPI_TransmitReceive+0x176>
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	2b01      	cmp	r3, #1
 8006824:	d113      	bne.n	800684e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	881a      	ldrh	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	1c9a      	adds	r2, r3, #2
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	d119      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x1b8>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d014      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	b292      	uxth	r2, r2
 8006872:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	1c9a      	adds	r2, r3, #2
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800688c:	2301      	movs	r3, #1
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006890:	f7fb ffb4 	bl	80027fc <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800689c:	429a      	cmp	r2, r3
 800689e:	d807      	bhi.n	80068b0 <HAL_SPI_TransmitReceive+0x1d8>
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d003      	beq.n	80068b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80068ae:	e0a7      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1a6      	bne.n	8006808 <HAL_SPI_TransmitReceive+0x130>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068be:	b29b      	uxth	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1a1      	bne.n	8006808 <HAL_SPI_TransmitReceive+0x130>
 80068c4:	e07c      	b.n	80069c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_SPI_TransmitReceive+0x1fc>
 80068ce:	8b7b      	ldrh	r3, [r7, #26]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d16b      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	7812      	ldrb	r2, [r2, #0]
 80068e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068fa:	e057      	b.n	80069ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b02      	cmp	r3, #2
 8006908:	d11c      	bne.n	8006944 <HAL_SPI_TransmitReceive+0x26c>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d017      	beq.n	8006944 <HAL_SPI_TransmitReceive+0x26c>
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	2b01      	cmp	r3, #1
 8006918:	d114      	bne.n	8006944 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	330c      	adds	r3, #12
 8006924:	7812      	ldrb	r2, [r2, #0]
 8006926:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006936:	b29b      	uxth	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d119      	bne.n	8006986 <HAL_SPI_TransmitReceive+0x2ae>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d014      	beq.n	8006986 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006978:	b29b      	uxth	r3, r3
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006982:	2301      	movs	r3, #1
 8006984:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006986:	f7fb ff39 	bl	80027fc <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006992:	429a      	cmp	r2, r3
 8006994:	d803      	bhi.n	800699e <HAL_SPI_TransmitReceive+0x2c6>
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699c:	d102      	bne.n	80069a4 <HAL_SPI_TransmitReceive+0x2cc>
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d103      	bne.n	80069ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069aa:	e029      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1a2      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x224>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d19d      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 f917 	bl	8006bf8 <SPI_EndRxTxTransaction>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d006      	beq.n	80069de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2220      	movs	r2, #32
 80069da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80069dc:	e010      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10b      	bne.n	80069fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069e6:	2300      	movs	r3, #0
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	e000      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80069fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3730      	adds	r7, #48	; 0x30
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	603b      	str	r3, [r7, #0]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a2c:	f7fb fee6 	bl	80027fc <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	1a9b      	subs	r3, r3, r2
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	4413      	add	r3, r2
 8006a3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a3c:	f7fb fede 	bl	80027fc <HAL_GetTick>
 8006a40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a42:	4b39      	ldr	r3, [pc, #228]	; (8006b28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	015b      	lsls	r3, r3, #5
 8006a48:	0d1b      	lsrs	r3, r3, #20
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	fb02 f303 	mul.w	r3, r2, r3
 8006a50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a52:	e054      	b.n	8006afe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d050      	beq.n	8006afe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a5c:	f7fb fece 	bl	80027fc <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d902      	bls.n	8006a72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d13d      	bne.n	8006aee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a8a:	d111      	bne.n	8006ab0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a94:	d004      	beq.n	8006aa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a9e:	d107      	bne.n	8006ab0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab8:	d10f      	bne.n	8006ada <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ad8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e017      	b.n	8006b1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4013      	ands	r3, r2
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	bf0c      	ite	eq
 8006b0e:	2301      	moveq	r3, #1
 8006b10:	2300      	movne	r3, #0
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d19b      	bne.n	8006a54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000004 	.word	0x20000004

08006b2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b40:	d111      	bne.n	8006b66 <SPI_EndRxTransaction+0x3a>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4a:	d004      	beq.n	8006b56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b54:	d107      	bne.n	8006b66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b6e:	d12a      	bne.n	8006bc6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b78:	d012      	beq.n	8006ba0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2200      	movs	r2, #0
 8006b82:	2180      	movs	r1, #128	; 0x80
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7ff ff49 	bl	8006a1c <SPI_WaitFlagStateUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d02d      	beq.n	8006bec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b94:	f043 0220 	orr.w	r2, r3, #32
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e026      	b.n	8006bee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2101      	movs	r1, #1
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7ff ff36 	bl	8006a1c <SPI_WaitFlagStateUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01a      	beq.n	8006bec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	f043 0220 	orr.w	r2, r3, #32
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e013      	b.n	8006bee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2101      	movs	r1, #1
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f7ff ff23 	bl	8006a1c <SPI_WaitFlagStateUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d007      	beq.n	8006bec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be0:	f043 0220 	orr.w	r2, r3, #32
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e000      	b.n	8006bee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c04:	4b1b      	ldr	r3, [pc, #108]	; (8006c74 <SPI_EndRxTxTransaction+0x7c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a1b      	ldr	r2, [pc, #108]	; (8006c78 <SPI_EndRxTxTransaction+0x80>)
 8006c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0e:	0d5b      	lsrs	r3, r3, #21
 8006c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c14:	fb02 f303 	mul.w	r3, r2, r3
 8006c18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c22:	d112      	bne.n	8006c4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2180      	movs	r1, #128	; 0x80
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff fef4 	bl	8006a1c <SPI_WaitFlagStateUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d016      	beq.n	8006c68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3e:	f043 0220 	orr.w	r2, r3, #32
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e00f      	b.n	8006c6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00a      	beq.n	8006c66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c60:	2b80      	cmp	r3, #128	; 0x80
 8006c62:	d0f2      	beq.n	8006c4a <SPI_EndRxTxTransaction+0x52>
 8006c64:	e000      	b.n	8006c68 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c66:	bf00      	nop
  }

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000004 	.word	0x20000004
 8006c78:	165e9f81 	.word	0x165e9f81

08006c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e041      	b.n	8006d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fb fc14 	bl	80024d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f000 f9ce 	bl	800705c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d001      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e04e      	b.n	8006dd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a23      	ldr	r2, [pc, #140]	; (8006de0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d022      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x80>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5e:	d01d      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x80>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1f      	ldr	r2, [pc, #124]	; (8006de4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d018      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x80>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1e      	ldr	r2, [pc, #120]	; (8006de8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d013      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x80>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1c      	ldr	r2, [pc, #112]	; (8006dec <HAL_TIM_Base_Start_IT+0xd0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00e      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x80>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d009      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x80>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d004      	beq.n	8006d9c <HAL_TIM_Base_Start_IT+0x80>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d111      	bne.n	8006dc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b06      	cmp	r3, #6
 8006dac:	d010      	beq.n	8006dd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0201 	orr.w	r2, r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dbe:	e007      	b.n	8006dd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0201 	orr.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40010000 	.word	0x40010000
 8006de4:	40000400 	.word	0x40000400
 8006de8:	40000800 	.word	0x40000800
 8006dec:	40000c00 	.word	0x40000c00
 8006df0:	40010400 	.word	0x40010400
 8006df4:	40014000 	.word	0x40014000
 8006df8:	40001800 	.word	0x40001800

08006dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d122      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d11b      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f06f 0202 	mvn.w	r2, #2
 8006e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f8ee 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006e44:	e005      	b.n	8006e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f8e0 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f8f1 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d122      	bne.n	8006eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d11b      	bne.n	8006eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0204 	mvn.w	r2, #4
 8006e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2202      	movs	r2, #2
 8006e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f8c4 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006e98:	e005      	b.n	8006ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f8b6 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f8c7 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d122      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d11b      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0208 	mvn.w	r2, #8
 8006ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2204      	movs	r2, #4
 8006ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f89a 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006eec:	e005      	b.n	8006efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f88c 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f89d 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b10      	cmp	r3, #16
 8006f0c:	d122      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b10      	cmp	r3, #16
 8006f1a:	d11b      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0210 	mvn.w	r2, #16
 8006f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f870 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006f40:	e005      	b.n	8006f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f862 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f873 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d10e      	bne.n	8006f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d107      	bne.n	8006f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0201 	mvn.w	r2, #1
 8006f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fb f854 	bl	8002028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d10e      	bne.n	8006fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f98:	2b80      	cmp	r3, #128	; 0x80
 8006f9a:	d107      	bne.n	8006fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f902 	bl	80071b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b40      	cmp	r3, #64	; 0x40
 8006fb8:	d10e      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc4:	2b40      	cmp	r3, #64	; 0x40
 8006fc6:	d107      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f838 	bl	8007048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0320 	and.w	r3, r3, #32
 8006fe2:	2b20      	cmp	r3, #32
 8006fe4:	d10e      	bne.n	8007004 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 0320 	and.w	r3, r3, #32
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	d107      	bne.n	8007004 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0220 	mvn.w	r2, #32
 8006ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f8cc 	bl	800719c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a40      	ldr	r2, [pc, #256]	; (8007170 <TIM_Base_SetConfig+0x114>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d013      	beq.n	800709c <TIM_Base_SetConfig+0x40>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707a:	d00f      	beq.n	800709c <TIM_Base_SetConfig+0x40>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a3d      	ldr	r2, [pc, #244]	; (8007174 <TIM_Base_SetConfig+0x118>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00b      	beq.n	800709c <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a3c      	ldr	r2, [pc, #240]	; (8007178 <TIM_Base_SetConfig+0x11c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d007      	beq.n	800709c <TIM_Base_SetConfig+0x40>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a3b      	ldr	r2, [pc, #236]	; (800717c <TIM_Base_SetConfig+0x120>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_Base_SetConfig+0x40>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a3a      	ldr	r2, [pc, #232]	; (8007180 <TIM_Base_SetConfig+0x124>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d108      	bne.n	80070ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a2f      	ldr	r2, [pc, #188]	; (8007170 <TIM_Base_SetConfig+0x114>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d02b      	beq.n	800710e <TIM_Base_SetConfig+0xb2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070bc:	d027      	beq.n	800710e <TIM_Base_SetConfig+0xb2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a2c      	ldr	r2, [pc, #176]	; (8007174 <TIM_Base_SetConfig+0x118>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d023      	beq.n	800710e <TIM_Base_SetConfig+0xb2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a2b      	ldr	r2, [pc, #172]	; (8007178 <TIM_Base_SetConfig+0x11c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01f      	beq.n	800710e <TIM_Base_SetConfig+0xb2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a2a      	ldr	r2, [pc, #168]	; (800717c <TIM_Base_SetConfig+0x120>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d01b      	beq.n	800710e <TIM_Base_SetConfig+0xb2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a29      	ldr	r2, [pc, #164]	; (8007180 <TIM_Base_SetConfig+0x124>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d017      	beq.n	800710e <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a28      	ldr	r2, [pc, #160]	; (8007184 <TIM_Base_SetConfig+0x128>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d013      	beq.n	800710e <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a27      	ldr	r2, [pc, #156]	; (8007188 <TIM_Base_SetConfig+0x12c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00f      	beq.n	800710e <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a26      	ldr	r2, [pc, #152]	; (800718c <TIM_Base_SetConfig+0x130>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00b      	beq.n	800710e <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a25      	ldr	r2, [pc, #148]	; (8007190 <TIM_Base_SetConfig+0x134>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d007      	beq.n	800710e <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a24      	ldr	r2, [pc, #144]	; (8007194 <TIM_Base_SetConfig+0x138>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d003      	beq.n	800710e <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a23      	ldr	r2, [pc, #140]	; (8007198 <TIM_Base_SetConfig+0x13c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d108      	bne.n	8007120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a0a      	ldr	r2, [pc, #40]	; (8007170 <TIM_Base_SetConfig+0x114>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_Base_SetConfig+0xf8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a0c      	ldr	r2, [pc, #48]	; (8007180 <TIM_Base_SetConfig+0x124>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d103      	bne.n	800715c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	615a      	str	r2, [r3, #20]
}
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40010000 	.word	0x40010000
 8007174:	40000400 	.word	0x40000400
 8007178:	40000800 	.word	0x40000800
 800717c:	40000c00 	.word	0x40000c00
 8007180:	40010400 	.word	0x40010400
 8007184:	40014000 	.word	0x40014000
 8007188:	40014400 	.word	0x40014400
 800718c:	40014800 	.word	0x40014800
 8007190:	40001800 	.word	0x40001800
 8007194:	40001c00 	.word	0x40001c00
 8007198:	40002000 	.word	0x40002000

0800719c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e03f      	b.n	8007256 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d106      	bne.n	80071f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fb f998 	bl	8002520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2224      	movs	r2, #36	; 0x24
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f9a7 	bl	800755c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800721c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	695a      	ldr	r2, [r3, #20]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800722c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800723c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b08a      	sub	sp, #40	; 0x28
 8007262:	af02      	add	r7, sp, #8
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	603b      	str	r3, [r7, #0]
 800726a:	4613      	mov	r3, r2
 800726c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b20      	cmp	r3, #32
 800727c:	d17c      	bne.n	8007378 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_UART_Transmit+0x2c>
 8007284:	88fb      	ldrh	r3, [r7, #6]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e075      	b.n	800737a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_UART_Transmit+0x3e>
 8007298:	2302      	movs	r3, #2
 800729a:	e06e      	b.n	800737a <HAL_UART_Transmit+0x11c>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2221      	movs	r2, #33	; 0x21
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072b2:	f7fb faa3 	bl	80027fc <HAL_GetTick>
 80072b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	88fa      	ldrh	r2, [r7, #6]
 80072bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	88fa      	ldrh	r2, [r7, #6]
 80072c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072cc:	d108      	bne.n	80072e0 <HAL_UART_Transmit+0x82>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d104      	bne.n	80072e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	e003      	b.n	80072e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80072f0:	e02a      	b.n	8007348 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2200      	movs	r2, #0
 80072fa:	2180      	movs	r1, #128	; 0x80
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 f8e2 	bl	80074c6 <UART_WaitOnFlagUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e036      	b.n	800737a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10b      	bne.n	800732a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007320:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	3302      	adds	r3, #2
 8007326:	61bb      	str	r3, [r7, #24]
 8007328:	e007      	b.n	800733a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	3301      	adds	r3, #1
 8007338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1cf      	bne.n	80072f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2200      	movs	r2, #0
 800735a:	2140      	movs	r1, #64	; 0x40
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f8b2 	bl	80074c6 <UART_WaitOnFlagUntilTimeout>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e006      	b.n	800737a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2220      	movs	r2, #32
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	e000      	b.n	800737a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007378:	2302      	movs	r3, #2
  }
}
 800737a:	4618      	mov	r0, r3
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b08a      	sub	sp, #40	; 0x28
 8007386:	af02      	add	r7, sp, #8
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	4613      	mov	r3, r2
 8007390:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b20      	cmp	r3, #32
 80073a0:	f040 808c 	bne.w	80074bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <HAL_UART_Receive+0x2e>
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e084      	b.n	80074be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_UART_Receive+0x40>
 80073be:	2302      	movs	r3, #2
 80073c0:	e07d      	b.n	80074be <HAL_UART_Receive+0x13c>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2222      	movs	r2, #34	; 0x22
 80073d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073de:	f7fb fa0d 	bl	80027fc <HAL_GetTick>
 80073e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	88fa      	ldrh	r2, [r7, #6]
 80073e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	88fa      	ldrh	r2, [r7, #6]
 80073ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f8:	d108      	bne.n	800740c <HAL_UART_Receive+0x8a>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	e003      	b.n	8007414 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007410:	2300      	movs	r3, #0
 8007412:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800741c:	e043      	b.n	80074a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2200      	movs	r2, #0
 8007426:	2120      	movs	r1, #32
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f84c 	bl	80074c6 <UART_WaitOnFlagUntilTimeout>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e042      	b.n	80074be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10c      	bne.n	8007458 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	b29b      	uxth	r3, r3
 8007446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744a:	b29a      	uxth	r2, r3
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	3302      	adds	r3, #2
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e01f      	b.n	8007498 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007460:	d007      	beq.n	8007472 <HAL_UART_Receive+0xf0>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10a      	bne.n	8007480 <HAL_UART_Receive+0xfe>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	b2da      	uxtb	r2, r3
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	701a      	strb	r2, [r3, #0]
 800747e:	e008      	b.n	8007492 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748c:	b2da      	uxtb	r2, r3
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	3301      	adds	r3, #1
 8007496:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1b6      	bne.n	800741e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e000      	b.n	80074be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80074bc:	2302      	movs	r3, #2
  }
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3720      	adds	r7, #32
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	60f8      	str	r0, [r7, #12]
 80074ce:	60b9      	str	r1, [r7, #8]
 80074d0:	603b      	str	r3, [r7, #0]
 80074d2:	4613      	mov	r3, r2
 80074d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d6:	e02c      	b.n	8007532 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074de:	d028      	beq.n	8007532 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80074e6:	f7fb f989 	bl	80027fc <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d21d      	bcs.n	8007532 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007504:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695a      	ldr	r2, [r3, #20]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2220      	movs	r2, #32
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2220      	movs	r2, #32
 8007522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e00f      	b.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4013      	ands	r3, r2
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	429a      	cmp	r2, r3
 8007540:	bf0c      	ite	eq
 8007542:	2301      	moveq	r3, #1
 8007544:	2300      	movne	r3, #0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	461a      	mov	r2, r3
 800754a:	79fb      	ldrb	r3, [r7, #7]
 800754c:	429a      	cmp	r2, r3
 800754e:	d0c3      	beq.n	80074d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	b09f      	sub	sp, #124	; 0x7c
 8007562:	af00      	add	r7, sp, #0
 8007564:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007572:	68d9      	ldr	r1, [r3, #12]
 8007574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	ea40 0301 	orr.w	r3, r0, r1
 800757c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800757e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007580:	689a      	ldr	r2, [r3, #8]
 8007582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	431a      	orrs	r2, r3
 8007588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	431a      	orrs	r2, r3
 800758e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	4313      	orrs	r3, r2
 8007594:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075a0:	f021 010c 	bic.w	r1, r1, #12
 80075a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075aa:	430b      	orrs	r3, r1
 80075ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ba:	6999      	ldr	r1, [r3, #24]
 80075bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	ea40 0301 	orr.w	r3, r0, r1
 80075c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	4bc5      	ldr	r3, [pc, #788]	; (80078e0 <UART_SetConfig+0x384>)
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d004      	beq.n	80075da <UART_SetConfig+0x7e>
 80075d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	4bc3      	ldr	r3, [pc, #780]	; (80078e4 <UART_SetConfig+0x388>)
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d103      	bne.n	80075e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075da:	f7fd fde7 	bl	80051ac <HAL_RCC_GetPCLK2Freq>
 80075de:	6778      	str	r0, [r7, #116]	; 0x74
 80075e0:	e002      	b.n	80075e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075e2:	f7fd fdcf 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 80075e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f0:	f040 80b6 	bne.w	8007760 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075f6:	461c      	mov	r4, r3
 80075f8:	f04f 0500 	mov.w	r5, #0
 80075fc:	4622      	mov	r2, r4
 80075fe:	462b      	mov	r3, r5
 8007600:	1891      	adds	r1, r2, r2
 8007602:	6439      	str	r1, [r7, #64]	; 0x40
 8007604:	415b      	adcs	r3, r3
 8007606:	647b      	str	r3, [r7, #68]	; 0x44
 8007608:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800760c:	1912      	adds	r2, r2, r4
 800760e:	eb45 0303 	adc.w	r3, r5, r3
 8007612:	f04f 0000 	mov.w	r0, #0
 8007616:	f04f 0100 	mov.w	r1, #0
 800761a:	00d9      	lsls	r1, r3, #3
 800761c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007620:	00d0      	lsls	r0, r2, #3
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	1911      	adds	r1, r2, r4
 8007628:	6639      	str	r1, [r7, #96]	; 0x60
 800762a:	416b      	adcs	r3, r5
 800762c:	667b      	str	r3, [r7, #100]	; 0x64
 800762e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	461a      	mov	r2, r3
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	1891      	adds	r1, r2, r2
 800763a:	63b9      	str	r1, [r7, #56]	; 0x38
 800763c:	415b      	adcs	r3, r3
 800763e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007644:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007648:	f7f8 fdea 	bl	8000220 <__aeabi_uldivmod>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4ba5      	ldr	r3, [pc, #660]	; (80078e8 <UART_SetConfig+0x38c>)
 8007652:	fba3 2302 	umull	r2, r3, r3, r2
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	011e      	lsls	r6, r3, #4
 800765a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800765c:	461c      	mov	r4, r3
 800765e:	f04f 0500 	mov.w	r5, #0
 8007662:	4622      	mov	r2, r4
 8007664:	462b      	mov	r3, r5
 8007666:	1891      	adds	r1, r2, r2
 8007668:	6339      	str	r1, [r7, #48]	; 0x30
 800766a:	415b      	adcs	r3, r3
 800766c:	637b      	str	r3, [r7, #52]	; 0x34
 800766e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007672:	1912      	adds	r2, r2, r4
 8007674:	eb45 0303 	adc.w	r3, r5, r3
 8007678:	f04f 0000 	mov.w	r0, #0
 800767c:	f04f 0100 	mov.w	r1, #0
 8007680:	00d9      	lsls	r1, r3, #3
 8007682:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007686:	00d0      	lsls	r0, r2, #3
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	1911      	adds	r1, r2, r4
 800768e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007690:	416b      	adcs	r3, r5
 8007692:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	461a      	mov	r2, r3
 800769a:	f04f 0300 	mov.w	r3, #0
 800769e:	1891      	adds	r1, r2, r2
 80076a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80076a2:	415b      	adcs	r3, r3
 80076a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80076ae:	f7f8 fdb7 	bl	8000220 <__aeabi_uldivmod>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4b8c      	ldr	r3, [pc, #560]	; (80078e8 <UART_SetConfig+0x38c>)
 80076b8:	fba3 1302 	umull	r1, r3, r3, r2
 80076bc:	095b      	lsrs	r3, r3, #5
 80076be:	2164      	movs	r1, #100	; 0x64
 80076c0:	fb01 f303 	mul.w	r3, r1, r3
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	3332      	adds	r3, #50	; 0x32
 80076ca:	4a87      	ldr	r2, [pc, #540]	; (80078e8 <UART_SetConfig+0x38c>)
 80076cc:	fba2 2303 	umull	r2, r3, r2, r3
 80076d0:	095b      	lsrs	r3, r3, #5
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076d8:	441e      	add	r6, r3
 80076da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076dc:	4618      	mov	r0, r3
 80076de:	f04f 0100 	mov.w	r1, #0
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	1894      	adds	r4, r2, r2
 80076e8:	623c      	str	r4, [r7, #32]
 80076ea:	415b      	adcs	r3, r3
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
 80076ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076f2:	1812      	adds	r2, r2, r0
 80076f4:	eb41 0303 	adc.w	r3, r1, r3
 80076f8:	f04f 0400 	mov.w	r4, #0
 80076fc:	f04f 0500 	mov.w	r5, #0
 8007700:	00dd      	lsls	r5, r3, #3
 8007702:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007706:	00d4      	lsls	r4, r2, #3
 8007708:	4622      	mov	r2, r4
 800770a:	462b      	mov	r3, r5
 800770c:	1814      	adds	r4, r2, r0
 800770e:	653c      	str	r4, [r7, #80]	; 0x50
 8007710:	414b      	adcs	r3, r1
 8007712:	657b      	str	r3, [r7, #84]	; 0x54
 8007714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	461a      	mov	r2, r3
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	1891      	adds	r1, r2, r2
 8007720:	61b9      	str	r1, [r7, #24]
 8007722:	415b      	adcs	r3, r3
 8007724:	61fb      	str	r3, [r7, #28]
 8007726:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800772a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800772e:	f7f8 fd77 	bl	8000220 <__aeabi_uldivmod>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4b6c      	ldr	r3, [pc, #432]	; (80078e8 <UART_SetConfig+0x38c>)
 8007738:	fba3 1302 	umull	r1, r3, r3, r2
 800773c:	095b      	lsrs	r3, r3, #5
 800773e:	2164      	movs	r1, #100	; 0x64
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	3332      	adds	r3, #50	; 0x32
 800774a:	4a67      	ldr	r2, [pc, #412]	; (80078e8 <UART_SetConfig+0x38c>)
 800774c:	fba2 2303 	umull	r2, r3, r2, r3
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	f003 0207 	and.w	r2, r3, #7
 8007756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4432      	add	r2, r6
 800775c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800775e:	e0b9      	b.n	80078d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007762:	461c      	mov	r4, r3
 8007764:	f04f 0500 	mov.w	r5, #0
 8007768:	4622      	mov	r2, r4
 800776a:	462b      	mov	r3, r5
 800776c:	1891      	adds	r1, r2, r2
 800776e:	6139      	str	r1, [r7, #16]
 8007770:	415b      	adcs	r3, r3
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007778:	1912      	adds	r2, r2, r4
 800777a:	eb45 0303 	adc.w	r3, r5, r3
 800777e:	f04f 0000 	mov.w	r0, #0
 8007782:	f04f 0100 	mov.w	r1, #0
 8007786:	00d9      	lsls	r1, r3, #3
 8007788:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800778c:	00d0      	lsls	r0, r2, #3
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	eb12 0804 	adds.w	r8, r2, r4
 8007796:	eb43 0905 	adc.w	r9, r3, r5
 800779a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	4618      	mov	r0, r3
 80077a0:	f04f 0100 	mov.w	r1, #0
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	008b      	lsls	r3, r1, #2
 80077ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077b2:	0082      	lsls	r2, r0, #2
 80077b4:	4640      	mov	r0, r8
 80077b6:	4649      	mov	r1, r9
 80077b8:	f7f8 fd32 	bl	8000220 <__aeabi_uldivmod>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4b49      	ldr	r3, [pc, #292]	; (80078e8 <UART_SetConfig+0x38c>)
 80077c2:	fba3 2302 	umull	r2, r3, r3, r2
 80077c6:	095b      	lsrs	r3, r3, #5
 80077c8:	011e      	lsls	r6, r3, #4
 80077ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077cc:	4618      	mov	r0, r3
 80077ce:	f04f 0100 	mov.w	r1, #0
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	1894      	adds	r4, r2, r2
 80077d8:	60bc      	str	r4, [r7, #8]
 80077da:	415b      	adcs	r3, r3
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077e2:	1812      	adds	r2, r2, r0
 80077e4:	eb41 0303 	adc.w	r3, r1, r3
 80077e8:	f04f 0400 	mov.w	r4, #0
 80077ec:	f04f 0500 	mov.w	r5, #0
 80077f0:	00dd      	lsls	r5, r3, #3
 80077f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80077f6:	00d4      	lsls	r4, r2, #3
 80077f8:	4622      	mov	r2, r4
 80077fa:	462b      	mov	r3, r5
 80077fc:	1814      	adds	r4, r2, r0
 80077fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8007800:	414b      	adcs	r3, r1
 8007802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	4618      	mov	r0, r3
 800780a:	f04f 0100 	mov.w	r1, #0
 800780e:	f04f 0200 	mov.w	r2, #0
 8007812:	f04f 0300 	mov.w	r3, #0
 8007816:	008b      	lsls	r3, r1, #2
 8007818:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800781c:	0082      	lsls	r2, r0, #2
 800781e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007822:	f7f8 fcfd 	bl	8000220 <__aeabi_uldivmod>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4b2f      	ldr	r3, [pc, #188]	; (80078e8 <UART_SetConfig+0x38c>)
 800782c:	fba3 1302 	umull	r1, r3, r3, r2
 8007830:	095b      	lsrs	r3, r3, #5
 8007832:	2164      	movs	r1, #100	; 0x64
 8007834:	fb01 f303 	mul.w	r3, r1, r3
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	3332      	adds	r3, #50	; 0x32
 800783e:	4a2a      	ldr	r2, [pc, #168]	; (80078e8 <UART_SetConfig+0x38c>)
 8007840:	fba2 2303 	umull	r2, r3, r2, r3
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800784a:	441e      	add	r6, r3
 800784c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800784e:	4618      	mov	r0, r3
 8007850:	f04f 0100 	mov.w	r1, #0
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	1894      	adds	r4, r2, r2
 800785a:	603c      	str	r4, [r7, #0]
 800785c:	415b      	adcs	r3, r3
 800785e:	607b      	str	r3, [r7, #4]
 8007860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007864:	1812      	adds	r2, r2, r0
 8007866:	eb41 0303 	adc.w	r3, r1, r3
 800786a:	f04f 0400 	mov.w	r4, #0
 800786e:	f04f 0500 	mov.w	r5, #0
 8007872:	00dd      	lsls	r5, r3, #3
 8007874:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007878:	00d4      	lsls	r4, r2, #3
 800787a:	4622      	mov	r2, r4
 800787c:	462b      	mov	r3, r5
 800787e:	eb12 0a00 	adds.w	sl, r2, r0
 8007882:	eb43 0b01 	adc.w	fp, r3, r1
 8007886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	4618      	mov	r0, r3
 800788c:	f04f 0100 	mov.w	r1, #0
 8007890:	f04f 0200 	mov.w	r2, #0
 8007894:	f04f 0300 	mov.w	r3, #0
 8007898:	008b      	lsls	r3, r1, #2
 800789a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800789e:	0082      	lsls	r2, r0, #2
 80078a0:	4650      	mov	r0, sl
 80078a2:	4659      	mov	r1, fp
 80078a4:	f7f8 fcbc 	bl	8000220 <__aeabi_uldivmod>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <UART_SetConfig+0x38c>)
 80078ae:	fba3 1302 	umull	r1, r3, r3, r2
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	2164      	movs	r1, #100	; 0x64
 80078b6:	fb01 f303 	mul.w	r3, r1, r3
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	3332      	adds	r3, #50	; 0x32
 80078c0:	4a09      	ldr	r2, [pc, #36]	; (80078e8 <UART_SetConfig+0x38c>)
 80078c2:	fba2 2303 	umull	r2, r3, r2, r3
 80078c6:	095b      	lsrs	r3, r3, #5
 80078c8:	f003 020f 	and.w	r2, r3, #15
 80078cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4432      	add	r2, r6
 80078d2:	609a      	str	r2, [r3, #8]
}
 80078d4:	bf00      	nop
 80078d6:	377c      	adds	r7, #124	; 0x7c
 80078d8:	46bd      	mov	sp, r7
 80078da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078de:	bf00      	nop
 80078e0:	40011000 	.word	0x40011000
 80078e4:	40011400 	.word	0x40011400
 80078e8:	51eb851f 	.word	0x51eb851f

080078ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078ec:	b084      	sub	sp, #16
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	f107 001c 	add.w	r0, r7, #28
 80078fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007900:	2b01      	cmp	r3, #1
 8007902:	d122      	bne.n	800794a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800792c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800792e:	2b01      	cmp	r3, #1
 8007930:	d105      	bne.n	800793e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 fac0 	bl	8008ec4 <USB_CoreReset>
 8007944:	4603      	mov	r3, r0
 8007946:	73fb      	strb	r3, [r7, #15]
 8007948:	e01a      	b.n	8007980 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 fab4 	bl	8008ec4 <USB_CoreReset>
 800795c:	4603      	mov	r3, r0
 800795e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d106      	bne.n	8007974 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	639a      	str	r2, [r3, #56]	; 0x38
 8007972:	e005      	b.n	8007980 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	2b01      	cmp	r3, #1
 8007984:	d10b      	bne.n	800799e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f043 0206 	orr.w	r2, r3, #6
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f043 0220 	orr.w	r2, r3, #32
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800799e:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079aa:	b004      	add	sp, #16
 80079ac:	4770      	bx	lr
	...

080079b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	4613      	mov	r3, r2
 80079bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d165      	bne.n	8007a90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4a41      	ldr	r2, [pc, #260]	; (8007acc <USB_SetTurnaroundTime+0x11c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d906      	bls.n	80079da <USB_SetTurnaroundTime+0x2a>
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	4a40      	ldr	r2, [pc, #256]	; (8007ad0 <USB_SetTurnaroundTime+0x120>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d202      	bcs.n	80079da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80079d4:	230f      	movs	r3, #15
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	e062      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	4a3c      	ldr	r2, [pc, #240]	; (8007ad0 <USB_SetTurnaroundTime+0x120>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d306      	bcc.n	80079f0 <USB_SetTurnaroundTime+0x40>
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	4a3b      	ldr	r2, [pc, #236]	; (8007ad4 <USB_SetTurnaroundTime+0x124>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d202      	bcs.n	80079f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80079ea:	230e      	movs	r3, #14
 80079ec:	617b      	str	r3, [r7, #20]
 80079ee:	e057      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	4a38      	ldr	r2, [pc, #224]	; (8007ad4 <USB_SetTurnaroundTime+0x124>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d306      	bcc.n	8007a06 <USB_SetTurnaroundTime+0x56>
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4a37      	ldr	r2, [pc, #220]	; (8007ad8 <USB_SetTurnaroundTime+0x128>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d202      	bcs.n	8007a06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007a00:	230d      	movs	r3, #13
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	e04c      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	4a33      	ldr	r2, [pc, #204]	; (8007ad8 <USB_SetTurnaroundTime+0x128>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d306      	bcc.n	8007a1c <USB_SetTurnaroundTime+0x6c>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	4a32      	ldr	r2, [pc, #200]	; (8007adc <USB_SetTurnaroundTime+0x12c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d802      	bhi.n	8007a1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007a16:	230c      	movs	r3, #12
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	e041      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	4a2f      	ldr	r2, [pc, #188]	; (8007adc <USB_SetTurnaroundTime+0x12c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d906      	bls.n	8007a32 <USB_SetTurnaroundTime+0x82>
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4a2e      	ldr	r2, [pc, #184]	; (8007ae0 <USB_SetTurnaroundTime+0x130>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d802      	bhi.n	8007a32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a2c:	230b      	movs	r3, #11
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	e036      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	4a2a      	ldr	r2, [pc, #168]	; (8007ae0 <USB_SetTurnaroundTime+0x130>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d906      	bls.n	8007a48 <USB_SetTurnaroundTime+0x98>
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	4a29      	ldr	r2, [pc, #164]	; (8007ae4 <USB_SetTurnaroundTime+0x134>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d802      	bhi.n	8007a48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a42:	230a      	movs	r3, #10
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	e02b      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	4a26      	ldr	r2, [pc, #152]	; (8007ae4 <USB_SetTurnaroundTime+0x134>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d906      	bls.n	8007a5e <USB_SetTurnaroundTime+0xae>
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4a25      	ldr	r2, [pc, #148]	; (8007ae8 <USB_SetTurnaroundTime+0x138>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d202      	bcs.n	8007a5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a58:	2309      	movs	r3, #9
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	e020      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	4a21      	ldr	r2, [pc, #132]	; (8007ae8 <USB_SetTurnaroundTime+0x138>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d306      	bcc.n	8007a74 <USB_SetTurnaroundTime+0xc4>
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	4a20      	ldr	r2, [pc, #128]	; (8007aec <USB_SetTurnaroundTime+0x13c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d802      	bhi.n	8007a74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a6e:	2308      	movs	r3, #8
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	e015      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4a1d      	ldr	r2, [pc, #116]	; (8007aec <USB_SetTurnaroundTime+0x13c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d906      	bls.n	8007a8a <USB_SetTurnaroundTime+0xda>
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4a1c      	ldr	r2, [pc, #112]	; (8007af0 <USB_SetTurnaroundTime+0x140>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d202      	bcs.n	8007a8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a84:	2307      	movs	r3, #7
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	e00a      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a8a:	2306      	movs	r3, #6
 8007a8c:	617b      	str	r3, [r7, #20]
 8007a8e:	e007      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007a96:	2309      	movs	r3, #9
 8007a98:	617b      	str	r3, [r7, #20]
 8007a9a:	e001      	b.n	8007aa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a9c:	2309      	movs	r3, #9
 8007a9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	029b      	lsls	r3, r3, #10
 8007ab4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	00d8acbf 	.word	0x00d8acbf
 8007ad0:	00e4e1c0 	.word	0x00e4e1c0
 8007ad4:	00f42400 	.word	0x00f42400
 8007ad8:	01067380 	.word	0x01067380
 8007adc:	011a499f 	.word	0x011a499f
 8007ae0:	01312cff 	.word	0x01312cff
 8007ae4:	014ca43f 	.word	0x014ca43f
 8007ae8:	016e3600 	.word	0x016e3600
 8007aec:	01a6ab1f 	.word	0x01a6ab1f
 8007af0:	01e84800 	.word	0x01e84800

08007af4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f043 0201 	orr.w	r2, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f023 0201 	bic.w	r2, r3, #1
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d106      	bne.n	8007b64 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	60da      	str	r2, [r3, #12]
 8007b62:	e00b      	b.n	8007b7c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60da      	str	r2, [r3, #12]
 8007b76:	e001      	b.n	8007b7c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e003      	b.n	8007b84 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007b7c:	2032      	movs	r0, #50	; 0x32
 8007b7e:	f7fa fe49 	bl	8002814 <HAL_Delay>

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b086      	sub	sp, #24
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	e009      	b.n	8007bc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	3340      	adds	r3, #64	; 0x40
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	613b      	str	r3, [r7, #16]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	2b0e      	cmp	r3, #14
 8007bc4:	d9f2      	bls.n	8007bac <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d11c      	bne.n	8007c06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bda:	f043 0302 	orr.w	r3, r3, #2
 8007bde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	e005      	b.n	8007c12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c18:	461a      	mov	r2, r3
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c24:	4619      	mov	r1, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	680b      	ldr	r3, [r1, #0]
 8007c30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d10c      	bne.n	8007c52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d104      	bne.n	8007c48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c3e:	2100      	movs	r1, #0
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f949 	bl	8007ed8 <USB_SetDevSpeed>
 8007c46:	e008      	b.n	8007c5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c48:	2101      	movs	r1, #1
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f944 	bl	8007ed8 <USB_SetDevSpeed>
 8007c50:	e003      	b.n	8007c5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c52:	2103      	movs	r1, #3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f93f 	bl	8007ed8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c5a:	2110      	movs	r1, #16
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f8f3 	bl	8007e48 <USB_FlushTxFifo>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f911 	bl	8007e94 <USB_FlushRxFifo>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c82:	461a      	mov	r2, r3
 8007c84:	2300      	movs	r3, #0
 8007c86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8e:	461a      	mov	r2, r3
 8007c90:	2300      	movs	r3, #0
 8007c92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	e043      	b.n	8007d2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cbc:	d118      	bne.n	8007cf0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	e013      	b.n	8007d02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e008      	b.n	8007d02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0e:	461a      	mov	r2, r3
 8007d10:	2300      	movs	r3, #0
 8007d12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d20:	461a      	mov	r2, r3
 8007d22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d3b7      	bcc.n	8007ca6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d36:	2300      	movs	r3, #0
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	e043      	b.n	8007dc4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d52:	d118      	bne.n	8007d86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10a      	bne.n	8007d70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d66:	461a      	mov	r2, r3
 8007d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	e013      	b.n	8007d98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	e008      	b.n	8007d98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d92:	461a      	mov	r2, r3
 8007d94:	2300      	movs	r3, #0
 8007d96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da4:	461a      	mov	r2, r3
 8007da6:	2300      	movs	r3, #0
 8007da8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db6:	461a      	mov	r2, r3
 8007db8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d3b7      	bcc.n	8007d3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007dec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d105      	bne.n	8007e00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f043 0210 	orr.w	r2, r3, #16
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699a      	ldr	r2, [r3, #24]
 8007e04:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <USB_DevInit+0x2b8>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d005      	beq.n	8007e1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	f043 0208 	orr.w	r2, r3, #8
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d107      	bne.n	8007e34 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e2c:	f043 0304 	orr.w	r3, r3, #4
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e40:	b004      	add	sp, #16
 8007e42:	4770      	bx	lr
 8007e44:	803c3800 	.word	0x803c3800

08007e48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	019b      	lsls	r3, r3, #6
 8007e5a:	f043 0220 	orr.w	r2, r3, #32
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <USB_FlushTxFifo+0x48>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d901      	bls.n	8007e74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e006      	b.n	8007e82 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d0f0      	beq.n	8007e62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	00030d40 	.word	0x00030d40

08007e94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2210      	movs	r2, #16
 8007ea4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4a09      	ldr	r2, [pc, #36]	; (8007ed4 <USB_FlushRxFifo+0x40>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d901      	bls.n	8007eb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e006      	b.n	8007ec6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f003 0310 	and.w	r3, r3, #16
 8007ec0:	2b10      	cmp	r3, #16
 8007ec2:	d0f0      	beq.n	8007ea6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	00030d40 	.word	0x00030d40

08007ed8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	68f9      	ldr	r1, [r7, #12]
 8007ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b087      	sub	sp, #28
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 0306 	and.w	r3, r3, #6
 8007f22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d102      	bne.n	8007f30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	75fb      	strb	r3, [r7, #23]
 8007f2e:	e00a      	b.n	8007f46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d002      	beq.n	8007f3c <USB_GetDevSpeed+0x32>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b06      	cmp	r3, #6
 8007f3a:	d102      	bne.n	8007f42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	75fb      	strb	r3, [r7, #23]
 8007f40:	e001      	b.n	8007f46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f42:	230f      	movs	r3, #15
 8007f44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	371c      	adds	r7, #28
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d13a      	bne.n	8007fe6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f76:	69da      	ldr	r2, [r3, #28]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	f003 030f 	and.w	r3, r3, #15
 8007f80:	2101      	movs	r1, #1
 8007f82:	fa01 f303 	lsl.w	r3, r1, r3
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	68f9      	ldr	r1, [r7, #12]
 8007f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d155      	bne.n	8008054 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	78db      	ldrb	r3, [r3, #3]
 8007fc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	059b      	lsls	r3, r3, #22
 8007fca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	0151      	lsls	r1, r2, #5
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	e036      	b.n	8008054 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fec:	69da      	ldr	r2, [r3, #28]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	f003 030f 	and.w	r3, r3, #15
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ffc:	041b      	lsls	r3, r3, #16
 8007ffe:	68f9      	ldr	r1, [r7, #12]
 8008000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008004:	4313      	orrs	r3, r2
 8008006:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d11a      	bne.n	8008054 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	78db      	ldrb	r3, [r3, #3]
 8008038:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800803a:	430b      	orrs	r3, r1
 800803c:	4313      	orrs	r3, r2
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	0151      	lsls	r1, r2, #5
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	440a      	add	r2, r1
 8008046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800804a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800804e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008052:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d161      	bne.n	8008144 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008096:	d11f      	bne.n	80080d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	0151      	lsls	r1, r2, #5
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	440a      	add	r2, r1
 80080ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	2101      	movs	r1, #1
 80080ea:	fa01 f303 	lsl.w	r3, r1, r3
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	43db      	mvns	r3, r3
 80080f2:	68f9      	ldr	r1, [r7, #12]
 80080f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080f8:	4013      	ands	r3, r2
 80080fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008102:	69da      	ldr	r2, [r3, #28]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	2101      	movs	r1, #1
 800810e:	fa01 f303 	lsl.w	r3, r1, r3
 8008112:	b29b      	uxth	r3, r3
 8008114:	43db      	mvns	r3, r3
 8008116:	68f9      	ldr	r1, [r7, #12]
 8008118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800811c:	4013      	ands	r3, r2
 800811e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	0159      	lsls	r1, r3, #5
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	440b      	add	r3, r1
 8008136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813a:	4619      	mov	r1, r3
 800813c:	4b35      	ldr	r3, [pc, #212]	; (8008214 <USB_DeactivateEndpoint+0x1b0>)
 800813e:	4013      	ands	r3, r2
 8008140:	600b      	str	r3, [r1, #0]
 8008142:	e060      	b.n	8008206 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800815a:	d11f      	bne.n	800819c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	0151      	lsls	r1, r2, #5
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	440a      	add	r2, r1
 8008172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800817a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	0151      	lsls	r1, r2, #5
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	440a      	add	r2, r1
 8008192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800819a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	2101      	movs	r1, #1
 80081ae:	fa01 f303 	lsl.w	r3, r1, r3
 80081b2:	041b      	lsls	r3, r3, #16
 80081b4:	43db      	mvns	r3, r3
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081bc:	4013      	ands	r3, r2
 80081be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c6:	69da      	ldr	r2, [r3, #28]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	f003 030f 	and.w	r3, r3, #15
 80081d0:	2101      	movs	r1, #1
 80081d2:	fa01 f303 	lsl.w	r3, r1, r3
 80081d6:	041b      	lsls	r3, r3, #16
 80081d8:	43db      	mvns	r3, r3
 80081da:	68f9      	ldr	r1, [r7, #12]
 80081dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081e0:	4013      	ands	r3, r2
 80081e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	0159      	lsls	r1, r3, #5
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	440b      	add	r3, r1
 80081fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fe:	4619      	mov	r1, r3
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <USB_DeactivateEndpoint+0x1b4>)
 8008202:	4013      	ands	r3, r2
 8008204:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3714      	adds	r7, #20
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	ec337800 	.word	0xec337800
 8008218:	eff37800 	.word	0xeff37800

0800821c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08a      	sub	sp, #40	; 0x28
 8008220:	af02      	add	r7, sp, #8
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	4613      	mov	r3, r2
 8008228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	785b      	ldrb	r3, [r3, #1]
 8008238:	2b01      	cmp	r3, #1
 800823a:	f040 815c 	bne.w	80084f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d132      	bne.n	80082ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	0151      	lsls	r1, r2, #5
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	440a      	add	r2, r1
 800825c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	0151      	lsls	r1, r2, #5
 800827c:	69fa      	ldr	r2, [r7, #28]
 800827e:	440a      	add	r2, r1
 8008280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	0151      	lsls	r1, r2, #5
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	440a      	add	r2, r1
 80082a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a4:	0cdb      	lsrs	r3, r3, #19
 80082a6:	04db      	lsls	r3, r3, #19
 80082a8:	6113      	str	r3, [r2, #16]
 80082aa:	e074      	b.n	8008396 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	0151      	lsls	r1, r2, #5
 80082be:	69fa      	ldr	r2, [r7, #28]
 80082c0:	440a      	add	r2, r1
 80082c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c6:	0cdb      	lsrs	r3, r3, #19
 80082c8:	04db      	lsls	r3, r3, #19
 80082ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	0151      	lsls	r1, r2, #5
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	440a      	add	r2, r1
 80082e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fc:	691a      	ldr	r2, [r3, #16]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6959      	ldr	r1, [r3, #20]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	440b      	add	r3, r1
 8008308:	1e59      	subs	r1, r3, #1
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008312:	04d9      	lsls	r1, r3, #19
 8008314:	4b9d      	ldr	r3, [pc, #628]	; (800858c <USB_EPStartXfer+0x370>)
 8008316:	400b      	ands	r3, r1
 8008318:	69b9      	ldr	r1, [r7, #24]
 800831a:	0148      	lsls	r0, r1, #5
 800831c:	69f9      	ldr	r1, [r7, #28]
 800831e:	4401      	add	r1, r0
 8008320:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008324:	4313      	orrs	r3, r2
 8008326:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008334:	691a      	ldr	r2, [r3, #16]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800833e:	69b9      	ldr	r1, [r7, #24]
 8008340:	0148      	lsls	r0, r1, #5
 8008342:	69f9      	ldr	r1, [r7, #28]
 8008344:	4401      	add	r1, r0
 8008346:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800834a:	4313      	orrs	r3, r2
 800834c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	78db      	ldrb	r3, [r3, #3]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d11f      	bne.n	8008396 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	0151      	lsls	r1, r2, #5
 8008368:	69fa      	ldr	r2, [r7, #28]
 800836a:	440a      	add	r2, r1
 800836c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008370:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008374:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008394:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d14b      	bne.n	8008434 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d009      	beq.n	80083b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b0:	461a      	mov	r2, r3
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	78db      	ldrb	r3, [r3, #3]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d128      	bne.n	8008412 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d110      	bne.n	80083f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	0151      	lsls	r1, r2, #5
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	440a      	add	r2, r1
 80083e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	e00f      	b.n	8008412 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	69fa      	ldr	r2, [r7, #28]
 8008406:	440a      	add	r2, r1
 8008408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800840c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008410:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	0151      	lsls	r1, r2, #5
 8008424:	69fa      	ldr	r2, [r7, #28]
 8008426:	440a      	add	r2, r1
 8008428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	e12f      	b.n	8008694 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	0151      	lsls	r1, r2, #5
 8008446:	69fa      	ldr	r2, [r7, #28]
 8008448:	440a      	add	r2, r1
 800844a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800844e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008452:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	78db      	ldrb	r3, [r3, #3]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d015      	beq.n	8008488 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 8117 	beq.w	8008694 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	f003 030f 	and.w	r3, r3, #15
 8008476:	2101      	movs	r1, #1
 8008478:	fa01 f303 	lsl.w	r3, r1, r3
 800847c:	69f9      	ldr	r1, [r7, #28]
 800847e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008482:	4313      	orrs	r3, r2
 8008484:	634b      	str	r3, [r1, #52]	; 0x34
 8008486:	e105      	b.n	8008694 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008494:	2b00      	cmp	r3, #0
 8008496:	d110      	bne.n	80084ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	0151      	lsls	r1, r2, #5
 80084aa:	69fa      	ldr	r2, [r7, #28]
 80084ac:	440a      	add	r2, r1
 80084ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	e00f      	b.n	80084da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	0151      	lsls	r1, r2, #5
 80084cc:	69fa      	ldr	r2, [r7, #28]
 80084ce:	440a      	add	r2, r1
 80084d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	68d9      	ldr	r1, [r3, #12]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	781a      	ldrb	r2, [r3, #0]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	b298      	uxth	r0, r3
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	4603      	mov	r3, r0
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 fa2b 	bl	800894a <USB_WritePacket>
 80084f4:	e0ce      	b.n	8008694 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	440a      	add	r2, r1
 800850c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008510:	0cdb      	lsrs	r3, r3, #19
 8008512:	04db      	lsls	r3, r3, #19
 8008514:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	0151      	lsls	r1, r2, #5
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	440a      	add	r2, r1
 800852c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008530:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008534:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008538:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d126      	bne.n	8008590 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008558:	69b9      	ldr	r1, [r7, #24]
 800855a:	0148      	lsls	r0, r1, #5
 800855c:	69f9      	ldr	r1, [r7, #28]
 800855e:	4401      	add	r1, r0
 8008560:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008564:	4313      	orrs	r3, r2
 8008566:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	440a      	add	r2, r1
 800857e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008586:	6113      	str	r3, [r2, #16]
 8008588:	e036      	b.n	80085f8 <USB_EPStartXfer+0x3dc>
 800858a:	bf00      	nop
 800858c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	695a      	ldr	r2, [r3, #20]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	4413      	add	r3, r2
 800859a:	1e5a      	subs	r2, r3, #1
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b2:	691a      	ldr	r2, [r3, #16]
 80085b4:	8afb      	ldrh	r3, [r7, #22]
 80085b6:	04d9      	lsls	r1, r3, #19
 80085b8:	4b39      	ldr	r3, [pc, #228]	; (80086a0 <USB_EPStartXfer+0x484>)
 80085ba:	400b      	ands	r3, r1
 80085bc:	69b9      	ldr	r1, [r7, #24]
 80085be:	0148      	lsls	r0, r1, #5
 80085c0:	69f9      	ldr	r1, [r7, #28]
 80085c2:	4401      	add	r1, r0
 80085c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085c8:	4313      	orrs	r3, r2
 80085ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d8:	691a      	ldr	r2, [r3, #16]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	8af9      	ldrh	r1, [r7, #22]
 80085e0:	fb01 f303 	mul.w	r3, r1, r3
 80085e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085e8:	69b9      	ldr	r1, [r7, #24]
 80085ea:	0148      	lsls	r0, r1, #5
 80085ec:	69f9      	ldr	r1, [r7, #28]
 80085ee:	4401      	add	r1, r0
 80085f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085f4:	4313      	orrs	r3, r2
 80085f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80085f8:	79fb      	ldrb	r3, [r7, #7]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d10d      	bne.n	800861a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d009      	beq.n	800861a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	68d9      	ldr	r1, [r3, #12]
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	4413      	add	r3, r2
 8008612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008616:	460a      	mov	r2, r1
 8008618:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	78db      	ldrb	r3, [r3, #3]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d128      	bne.n	8008674 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800862e:	2b00      	cmp	r3, #0
 8008630:	d110      	bne.n	8008654 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	0151      	lsls	r1, r2, #5
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	440a      	add	r2, r1
 8008648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800864c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	e00f      	b.n	8008674 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	440a      	add	r2, r1
 800866a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800866e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008672:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	0151      	lsls	r1, r2, #5
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	440a      	add	r2, r1
 800868a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3720      	adds	r7, #32
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	1ff80000 	.word	0x1ff80000

080086a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	f040 80cd 	bne.w	8008860 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d132      	bne.n	8008734 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	440a      	add	r2, r1
 8008708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800870c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008710:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	0151      	lsls	r1, r2, #5
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	440a      	add	r2, r1
 8008728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800872c:	0cdb      	lsrs	r3, r3, #19
 800872e:	04db      	lsls	r3, r3, #19
 8008730:	6113      	str	r3, [r2, #16]
 8008732:	e04e      	b.n	80087d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	0151      	lsls	r1, r2, #5
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	440a      	add	r2, r1
 800874a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800874e:	0cdb      	lsrs	r3, r3, #19
 8008750:	04db      	lsls	r3, r3, #19
 8008752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	0151      	lsls	r1, r2, #5
 8008766:	697a      	ldr	r2, [r7, #20]
 8008768:	440a      	add	r2, r1
 800876a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800876e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008772:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008776:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	695a      	ldr	r2, [r3, #20]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	429a      	cmp	r2, r3
 8008782:	d903      	bls.n	800878c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	0151      	lsls	r1, r2, #5
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	440a      	add	r2, r1
 80087a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b8:	691a      	ldr	r2, [r3, #16]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087c2:	6939      	ldr	r1, [r7, #16]
 80087c4:	0148      	lsls	r0, r1, #5
 80087c6:	6979      	ldr	r1, [r7, #20]
 80087c8:	4401      	add	r1, r0
 80087ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087ce:	4313      	orrs	r3, r2
 80087d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d11e      	bne.n	8008816 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ec:	461a      	mov	r2, r3
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	0151      	lsls	r1, r2, #5
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	440a      	add	r2, r1
 800880a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800880e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	e092      	b.n	800893c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	0151      	lsls	r1, r2, #5
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	440a      	add	r2, r1
 800882c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008830:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008834:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d07e      	beq.n	800893c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	f003 030f 	and.w	r3, r3, #15
 800884e:	2101      	movs	r1, #1
 8008850:	fa01 f303 	lsl.w	r3, r1, r3
 8008854:	6979      	ldr	r1, [r7, #20]
 8008856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800885a:	4313      	orrs	r3, r2
 800885c:	634b      	str	r3, [r1, #52]	; 0x34
 800885e:	e06d      	b.n	800893c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	0151      	lsls	r1, r2, #5
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	440a      	add	r2, r1
 8008876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800887a:	0cdb      	lsrs	r3, r3, #19
 800887c:	04db      	lsls	r3, r3, #19
 800887e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	0151      	lsls	r1, r2, #5
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	440a      	add	r2, r1
 8008896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800889e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d003      	beq.n	80088b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	0151      	lsls	r1, r2, #5
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	440a      	add	r2, r1
 80088ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e0:	691a      	ldr	r2, [r3, #16]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088ea:	6939      	ldr	r1, [r7, #16]
 80088ec:	0148      	lsls	r0, r1, #5
 80088ee:	6979      	ldr	r1, [r7, #20]
 80088f0:	4401      	add	r1, r0
 80088f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088f6:	4313      	orrs	r3, r2
 80088f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d10d      	bne.n	800891c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d009      	beq.n	800891c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	68d9      	ldr	r1, [r3, #12]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008918:	460a      	mov	r2, r1
 800891a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	0151      	lsls	r1, r2, #5
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	440a      	add	r2, r1
 8008932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008936:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800893a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800894a:	b480      	push	{r7}
 800894c:	b089      	sub	sp, #36	; 0x24
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	4611      	mov	r1, r2
 8008956:	461a      	mov	r2, r3
 8008958:	460b      	mov	r3, r1
 800895a:	71fb      	strb	r3, [r7, #7]
 800895c:	4613      	mov	r3, r2
 800895e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008968:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800896c:	2b00      	cmp	r3, #0
 800896e:	d11a      	bne.n	80089a6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008970:	88bb      	ldrh	r3, [r7, #4]
 8008972:	3303      	adds	r3, #3
 8008974:	089b      	lsrs	r3, r3, #2
 8008976:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008978:	2300      	movs	r3, #0
 800897a:	61bb      	str	r3, [r7, #24]
 800897c:	e00f      	b.n	800899e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	031a      	lsls	r2, r3, #12
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	4413      	add	r3, r2
 8008986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898a:	461a      	mov	r2, r3
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	3304      	adds	r3, #4
 8008996:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	3301      	adds	r3, #1
 800899c:	61bb      	str	r3, [r7, #24]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d3eb      	bcc.n	800897e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3724      	adds	r7, #36	; 0x24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b089      	sub	sp, #36	; 0x24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4613      	mov	r3, r2
 80089c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80089ca:	88fb      	ldrh	r3, [r7, #6]
 80089cc:	3303      	adds	r3, #3
 80089ce:	089b      	lsrs	r3, r3, #2
 80089d0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80089d2:	2300      	movs	r3, #0
 80089d4:	61bb      	str	r3, [r7, #24]
 80089d6:	e00b      	b.n	80089f0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	3304      	adds	r3, #4
 80089e8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	3301      	adds	r3, #1
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d3ef      	bcc.n	80089d8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80089f8:	69fb      	ldr	r3, [r7, #28]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3724      	adds	r7, #36	; 0x24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b085      	sub	sp, #20
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	785b      	ldrb	r3, [r3, #1]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d12c      	bne.n	8008a7c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	db12      	blt.n	8008a5a <USB_EPSetStall+0x54>
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00f      	beq.n	8008a5a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a58:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	0151      	lsls	r1, r2, #5
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	440a      	add	r2, r1
 8008a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	e02b      	b.n	8008ad4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	db12      	blt.n	8008ab4 <USB_EPSetStall+0xae>
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00f      	beq.n	8008ab4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ab2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	0151      	lsls	r1, r2, #5
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	440a      	add	r2, r1
 8008aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	785b      	ldrb	r3, [r3, #1]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d128      	bne.n	8008b50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	0151      	lsls	r1, r2, #5
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	440a      	add	r2, r1
 8008b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	78db      	ldrb	r3, [r3, #3]
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d003      	beq.n	8008b2e <USB_EPClearStall+0x4c>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	78db      	ldrb	r3, [r3, #3]
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d138      	bne.n	8008ba0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	e027      	b.n	8008ba0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	0151      	lsls	r1, r2, #5
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	440a      	add	r2, r1
 8008b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	78db      	ldrb	r3, [r3, #3]
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d003      	beq.n	8008b80 <USB_EPClearStall+0x9e>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	78db      	ldrb	r3, [r3, #3]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d10f      	bne.n	8008ba0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bcc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008bd0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	78fb      	ldrb	r3, [r7, #3]
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008be2:	68f9      	ldr	r1, [r7, #12]
 8008be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008be8:	4313      	orrs	r3, r2
 8008bea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c14:	f023 0303 	bic.w	r3, r3, #3
 8008c18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c28:	f023 0302 	bic.w	r3, r3, #2
 8008c2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c56:	f023 0303 	bic.w	r3, r3, #3
 8008c5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c6a:	f043 0302 	orr.w	r3, r3, #2
 8008c6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4013      	ands	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c96:	68fb      	ldr	r3, [r7, #12]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	0c1b      	lsrs	r3, r3, #16
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	b29b      	uxth	r3, r3
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	4013      	ands	r3, r2
 8008d38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d6c:	78fb      	ldrb	r3, [r7, #3]
 8008d6e:	f003 030f 	and.w	r3, r3, #15
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	fa22 f303 	lsr.w	r3, r2, r3
 8008d78:	01db      	lsls	r3, r3, #7
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4013      	ands	r3, r2
 8008d94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d96:	68bb      	ldr	r3, [r7, #8]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	371c      	adds	r7, #28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	f003 0301 	and.w	r3, r3, #1
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008dde:	f023 0307 	bic.w	r3, r3, #7
 8008de2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008df6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
	...

08008e08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	460b      	mov	r3, r1
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	333c      	adds	r3, #60	; 0x3c
 8008e1e:	3304      	adds	r3, #4
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	4a26      	ldr	r2, [pc, #152]	; (8008ec0 <USB_EP0_OutStart+0xb8>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d90a      	bls.n	8008e42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e3c:	d101      	bne.n	8008e42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e037      	b.n	8008eb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e48:	461a      	mov	r2, r3
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e70:	f043 0318 	orr.w	r3, r3, #24
 8008e74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008e88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e8a:	7afb      	ldrb	r3, [r7, #11]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d10f      	bne.n	8008eb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e96:	461a      	mov	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008eae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	371c      	adds	r7, #28
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	4f54300a 	.word	0x4f54300a

08008ec4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	60fb      	str	r3, [r7, #12]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	4a13      	ldr	r2, [pc, #76]	; (8008f28 <USB_CoreReset+0x64>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d901      	bls.n	8008ee2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e01b      	b.n	8008f1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	daf2      	bge.n	8008ed0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f043 0201 	orr.w	r2, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4a09      	ldr	r2, [pc, #36]	; (8008f28 <USB_CoreReset+0x64>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d901      	bls.n	8008f0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e006      	b.n	8008f1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d0f0      	beq.n	8008efa <USB_CoreReset+0x36>

  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	00030d40 	.word	0x00030d40

08008f2c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8008f30:	bf00      	nop
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
	...

08008f3c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af04      	add	r7, sp, #16
 8008f42:	4603      	mov	r3, r0
 8008f44:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008f46:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4a:	9302      	str	r3, [sp, #8]
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	9301      	str	r3, [sp, #4]
 8008f50:	1dfb      	adds	r3, r7, #7
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	2301      	movs	r3, #1
 8008f56:	2200      	movs	r2, #0
 8008f58:	2178      	movs	r1, #120	; 0x78
 8008f5a:	4803      	ldr	r0, [pc, #12]	; (8008f68 <ssd1306_WriteCommand+0x2c>)
 8008f5c:	f7fa fb52 	bl	8003604 <HAL_I2C_Mem_Write>
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	200003d8 	.word	0x200003d8

08008f6c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af04      	add	r7, sp, #16
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f7e:	9202      	str	r2, [sp, #8]
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	2301      	movs	r3, #1
 8008f88:	2240      	movs	r2, #64	; 0x40
 8008f8a:	2178      	movs	r1, #120	; 0x78
 8008f8c:	4803      	ldr	r0, [pc, #12]	; (8008f9c <ssd1306_WriteData+0x30>)
 8008f8e:	f7fa fb39 	bl	8003604 <HAL_I2C_Mem_Write>
}
 8008f92:	bf00      	nop
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	200003d8 	.word	0x200003d8

08008fa0 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8008fa4:	f7ff ffc2 	bl	8008f2c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8008fa8:	2064      	movs	r0, #100	; 0x64
 8008faa:	f7f9 fc33 	bl	8002814 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8008fae:	2000      	movs	r0, #0
 8008fb0:	f000 f9e6 	bl	8009380 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8008fb4:	2020      	movs	r0, #32
 8008fb6:	f7ff ffc1 	bl	8008f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f7ff ffbe 	bl	8008f3c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8008fc0:	20b0      	movs	r0, #176	; 0xb0
 8008fc2:	f7ff ffbb 	bl	8008f3c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8008fc6:	20c8      	movs	r0, #200	; 0xc8
 8008fc8:	f7ff ffb8 	bl	8008f3c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8008fcc:	2000      	movs	r0, #0
 8008fce:	f7ff ffb5 	bl	8008f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8008fd2:	2010      	movs	r0, #16
 8008fd4:	f7ff ffb2 	bl	8008f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8008fd8:	2040      	movs	r0, #64	; 0x40
 8008fda:	f7ff ffaf 	bl	8008f3c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8008fde:	20ff      	movs	r0, #255	; 0xff
 8008fe0:	f000 f9ba 	bl	8009358 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8008fe4:	20a1      	movs	r0, #161	; 0xa1
 8008fe6:	f7ff ffa9 	bl	8008f3c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8008fea:	20a6      	movs	r0, #166	; 0xa6
 8008fec:	f7ff ffa6 	bl	8008f3c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008ff0:	20a8      	movs	r0, #168	; 0xa8
 8008ff2:	f7ff ffa3 	bl	8008f3c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8008ff6:	203f      	movs	r0, #63	; 0x3f
 8008ff8:	f7ff ffa0 	bl	8008f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008ffc:	20a4      	movs	r0, #164	; 0xa4
 8008ffe:	f7ff ff9d 	bl	8008f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8009002:	20d3      	movs	r0, #211	; 0xd3
 8009004:	f7ff ff9a 	bl	8008f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8009008:	2000      	movs	r0, #0
 800900a:	f7ff ff97 	bl	8008f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800900e:	20d5      	movs	r0, #213	; 0xd5
 8009010:	f7ff ff94 	bl	8008f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8009014:	20f0      	movs	r0, #240	; 0xf0
 8009016:	f7ff ff91 	bl	8008f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800901a:	20d9      	movs	r0, #217	; 0xd9
 800901c:	f7ff ff8e 	bl	8008f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8009020:	2022      	movs	r0, #34	; 0x22
 8009022:	f7ff ff8b 	bl	8008f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8009026:	20da      	movs	r0, #218	; 0xda
 8009028:	f7ff ff88 	bl	8008f3c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800902c:	2012      	movs	r0, #18
 800902e:	f7ff ff85 	bl	8008f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8009032:	20db      	movs	r0, #219	; 0xdb
 8009034:	f7ff ff82 	bl	8008f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8009038:	2020      	movs	r0, #32
 800903a:	f7ff ff7f 	bl	8008f3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800903e:	208d      	movs	r0, #141	; 0x8d
 8009040:	f7ff ff7c 	bl	8008f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8009044:	2014      	movs	r0, #20
 8009046:	f7ff ff79 	bl	8008f3c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800904a:	2001      	movs	r0, #1
 800904c:	f000 f998 	bl	8009380 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black_);
 8009050:	2000      	movs	r0, #0
 8009052:	f000 f80f 	bl	8009074 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8009056:	f000 f831 	bl	80090bc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800905a:	4b05      	ldr	r3, [pc, #20]	; (8009070 <ssd1306_Init+0xd0>)
 800905c:	2200      	movs	r2, #0
 800905e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8009060:	4b03      	ldr	r3, [pc, #12]	; (8009070 <ssd1306_Init+0xd0>)
 8009062:	2200      	movs	r2, #0
 8009064:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8009066:	4b02      	ldr	r3, [pc, #8]	; (8009070 <ssd1306_Init+0xd0>)
 8009068:	2201      	movs	r2, #1
 800906a:	715a      	strb	r2, [r3, #5]
}
 800906c:	bf00      	nop
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20000d70 	.word	0x20000d70

08009074 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]
 8009082:	e00d      	b.n	80090a0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black_) ? 0x00 : 0xFF;
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <ssd1306_Fill+0x1a>
 800908a:	2100      	movs	r1, #0
 800908c:	e000      	b.n	8009090 <ssd1306_Fill+0x1c>
 800908e:	21ff      	movs	r1, #255	; 0xff
 8009090:	4a09      	ldr	r2, [pc, #36]	; (80090b8 <ssd1306_Fill+0x44>)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	4413      	add	r3, r2
 8009096:	460a      	mov	r2, r1
 8009098:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3301      	adds	r3, #1
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090a6:	d3ed      	bcc.n	8009084 <ssd1306_Fill+0x10>
    }
}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	20000970 	.word	0x20000970

080090bc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80090c2:	2300      	movs	r3, #0
 80090c4:	71fb      	strb	r3, [r7, #7]
 80090c6:	e016      	b.n	80090f6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	3b50      	subs	r3, #80	; 0x50
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff ff34 	bl	8008f3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80090d4:	2000      	movs	r0, #0
 80090d6:	f7ff ff31 	bl	8008f3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80090da:	2010      	movs	r0, #16
 80090dc:	f7ff ff2e 	bl	8008f3c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	01db      	lsls	r3, r3, #7
 80090e4:	4a08      	ldr	r2, [pc, #32]	; (8009108 <ssd1306_UpdateScreen+0x4c>)
 80090e6:	4413      	add	r3, r2
 80090e8:	2180      	movs	r1, #128	; 0x80
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff ff3e 	bl	8008f6c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80090f0:	79fb      	ldrb	r3, [r7, #7]
 80090f2:	3301      	adds	r3, #1
 80090f4:	71fb      	strb	r3, [r7, #7]
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	2b07      	cmp	r3, #7
 80090fa:	d9e5      	bls.n	80090c8 <ssd1306_UpdateScreen+0xc>
    }
}
 80090fc:	bf00      	nop
 80090fe:	bf00      	nop
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20000970 	.word	0x20000970

0800910c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	71fb      	strb	r3, [r7, #7]
 8009116:	460b      	mov	r3, r1
 8009118:	71bb      	strb	r3, [r7, #6]
 800911a:	4613      	mov	r3, r2
 800911c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800911e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009122:	2b00      	cmp	r3, #0
 8009124:	db48      	blt.n	80091b8 <ssd1306_DrawPixel+0xac>
 8009126:	79bb      	ldrb	r3, [r7, #6]
 8009128:	2b3f      	cmp	r3, #63	; 0x3f
 800912a:	d845      	bhi.n	80091b8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800912c:	4b25      	ldr	r3, [pc, #148]	; (80091c4 <ssd1306_DrawPixel+0xb8>)
 800912e:	791b      	ldrb	r3, [r3, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d006      	beq.n	8009142 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8009134:	797b      	ldrb	r3, [r7, #5]
 8009136:	2b00      	cmp	r3, #0
 8009138:	bf0c      	ite	eq
 800913a:	2301      	moveq	r3, #1
 800913c:	2300      	movne	r3, #0
 800913e:	b2db      	uxtb	r3, r3
 8009140:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White_) {
 8009142:	797b      	ldrb	r3, [r7, #5]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d11a      	bne.n	800917e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8009148:	79fa      	ldrb	r2, [r7, #7]
 800914a:	79bb      	ldrb	r3, [r7, #6]
 800914c:	08db      	lsrs	r3, r3, #3
 800914e:	b2d8      	uxtb	r0, r3
 8009150:	4603      	mov	r3, r0
 8009152:	01db      	lsls	r3, r3, #7
 8009154:	4413      	add	r3, r2
 8009156:	4a1c      	ldr	r2, [pc, #112]	; (80091c8 <ssd1306_DrawPixel+0xbc>)
 8009158:	5cd3      	ldrb	r3, [r2, r3]
 800915a:	b25a      	sxtb	r2, r3
 800915c:	79bb      	ldrb	r3, [r7, #6]
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	2101      	movs	r1, #1
 8009164:	fa01 f303 	lsl.w	r3, r1, r3
 8009168:	b25b      	sxtb	r3, r3
 800916a:	4313      	orrs	r3, r2
 800916c:	b259      	sxtb	r1, r3
 800916e:	79fa      	ldrb	r2, [r7, #7]
 8009170:	4603      	mov	r3, r0
 8009172:	01db      	lsls	r3, r3, #7
 8009174:	4413      	add	r3, r2
 8009176:	b2c9      	uxtb	r1, r1
 8009178:	4a13      	ldr	r2, [pc, #76]	; (80091c8 <ssd1306_DrawPixel+0xbc>)
 800917a:	54d1      	strb	r1, [r2, r3]
 800917c:	e01d      	b.n	80091ba <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800917e:	79fa      	ldrb	r2, [r7, #7]
 8009180:	79bb      	ldrb	r3, [r7, #6]
 8009182:	08db      	lsrs	r3, r3, #3
 8009184:	b2d8      	uxtb	r0, r3
 8009186:	4603      	mov	r3, r0
 8009188:	01db      	lsls	r3, r3, #7
 800918a:	4413      	add	r3, r2
 800918c:	4a0e      	ldr	r2, [pc, #56]	; (80091c8 <ssd1306_DrawPixel+0xbc>)
 800918e:	5cd3      	ldrb	r3, [r2, r3]
 8009190:	b25a      	sxtb	r2, r3
 8009192:	79bb      	ldrb	r3, [r7, #6]
 8009194:	f003 0307 	and.w	r3, r3, #7
 8009198:	2101      	movs	r1, #1
 800919a:	fa01 f303 	lsl.w	r3, r1, r3
 800919e:	b25b      	sxtb	r3, r3
 80091a0:	43db      	mvns	r3, r3
 80091a2:	b25b      	sxtb	r3, r3
 80091a4:	4013      	ands	r3, r2
 80091a6:	b259      	sxtb	r1, r3
 80091a8:	79fa      	ldrb	r2, [r7, #7]
 80091aa:	4603      	mov	r3, r0
 80091ac:	01db      	lsls	r3, r3, #7
 80091ae:	4413      	add	r3, r2
 80091b0:	b2c9      	uxtb	r1, r1
 80091b2:	4a05      	ldr	r2, [pc, #20]	; (80091c8 <ssd1306_DrawPixel+0xbc>)
 80091b4:	54d1      	strb	r1, [r2, r3]
 80091b6:	e000      	b.n	80091ba <ssd1306_DrawPixel+0xae>
        return;
 80091b8:	bf00      	nop
    }
}
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	20000d70 	.word	0x20000d70
 80091c8:	20000970 	.word	0x20000970

080091cc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black_ or White_
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80091cc:	b590      	push	{r4, r7, lr}
 80091ce:	b089      	sub	sp, #36	; 0x24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4604      	mov	r4, r0
 80091d4:	1d38      	adds	r0, r7, #4
 80091d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80091da:	461a      	mov	r2, r3
 80091dc:	4623      	mov	r3, r4
 80091de:	73fb      	strb	r3, [r7, #15]
 80091e0:	4613      	mov	r3, r2
 80091e2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	2b1f      	cmp	r3, #31
 80091e8:	d902      	bls.n	80091f0 <ssd1306_WriteChar+0x24>
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	2b7e      	cmp	r3, #126	; 0x7e
 80091ee:	d901      	bls.n	80091f4 <ssd1306_WriteChar+0x28>
        return 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	e06d      	b.n	80092d0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80091f4:	4b38      	ldr	r3, [pc, #224]	; (80092d8 <ssd1306_WriteChar+0x10c>)
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	793b      	ldrb	r3, [r7, #4]
 80091fc:	4413      	add	r3, r2
 80091fe:	2b80      	cmp	r3, #128	; 0x80
 8009200:	dc06      	bgt.n	8009210 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8009202:	4b35      	ldr	r3, [pc, #212]	; (80092d8 <ssd1306_WriteChar+0x10c>)
 8009204:	885b      	ldrh	r3, [r3, #2]
 8009206:	461a      	mov	r2, r3
 8009208:	797b      	ldrb	r3, [r7, #5]
 800920a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800920c:	2b40      	cmp	r3, #64	; 0x40
 800920e:	dd01      	ble.n	8009214 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8009210:	2300      	movs	r3, #0
 8009212:	e05d      	b.n	80092d0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8009214:	2300      	movs	r3, #0
 8009216:	61fb      	str	r3, [r7, #28]
 8009218:	e04c      	b.n	80092b4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	3b20      	subs	r3, #32
 8009220:	7979      	ldrb	r1, [r7, #5]
 8009222:	fb01 f303 	mul.w	r3, r1, r3
 8009226:	4619      	mov	r1, r3
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	440b      	add	r3, r1
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	4413      	add	r3, r2
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8009234:	2300      	movs	r3, #0
 8009236:	61bb      	str	r3, [r7, #24]
 8009238:	e034      	b.n	80092a4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	fa02 f303 	lsl.w	r3, r2, r3
 8009242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d012      	beq.n	8009270 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800924a:	4b23      	ldr	r3, [pc, #140]	; (80092d8 <ssd1306_WriteChar+0x10c>)
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	b2da      	uxtb	r2, r3
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	4413      	add	r3, r2
 8009256:	b2d8      	uxtb	r0, r3
 8009258:	4b1f      	ldr	r3, [pc, #124]	; (80092d8 <ssd1306_WriteChar+0x10c>)
 800925a:	885b      	ldrh	r3, [r3, #2]
 800925c:	b2da      	uxtb	r2, r3
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	b2db      	uxtb	r3, r3
 8009262:	4413      	add	r3, r2
 8009264:	b2db      	uxtb	r3, r3
 8009266:	7bba      	ldrb	r2, [r7, #14]
 8009268:	4619      	mov	r1, r3
 800926a:	f7ff ff4f 	bl	800910c <ssd1306_DrawPixel>
 800926e:	e016      	b.n	800929e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8009270:	4b19      	ldr	r3, [pc, #100]	; (80092d8 <ssd1306_WriteChar+0x10c>)
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b2da      	uxtb	r2, r3
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	b2db      	uxtb	r3, r3
 800927a:	4413      	add	r3, r2
 800927c:	b2d8      	uxtb	r0, r3
 800927e:	4b16      	ldr	r3, [pc, #88]	; (80092d8 <ssd1306_WriteChar+0x10c>)
 8009280:	885b      	ldrh	r3, [r3, #2]
 8009282:	b2da      	uxtb	r2, r3
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	4413      	add	r3, r2
 800928a:	b2d9      	uxtb	r1, r3
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	2b00      	cmp	r3, #0
 8009290:	bf0c      	ite	eq
 8009292:	2301      	moveq	r3, #1
 8009294:	2300      	movne	r3, #0
 8009296:	b2db      	uxtb	r3, r3
 8009298:	461a      	mov	r2, r3
 800929a:	f7ff ff37 	bl	800910c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	3301      	adds	r3, #1
 80092a2:	61bb      	str	r3, [r7, #24]
 80092a4:	793b      	ldrb	r3, [r7, #4]
 80092a6:	461a      	mov	r2, r3
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d3c5      	bcc.n	800923a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	3301      	adds	r3, #1
 80092b2:	61fb      	str	r3, [r7, #28]
 80092b4:	797b      	ldrb	r3, [r7, #5]
 80092b6:	461a      	mov	r2, r3
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d3ad      	bcc.n	800921a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80092be:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <ssd1306_WriteChar+0x10c>)
 80092c0:	881a      	ldrh	r2, [r3, #0]
 80092c2:	793b      	ldrb	r3, [r7, #4]
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	4413      	add	r3, r2
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	4b03      	ldr	r3, [pc, #12]	; (80092d8 <ssd1306_WriteChar+0x10c>)
 80092cc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3724      	adds	r7, #36	; 0x24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd90      	pop	{r4, r7, pc}
 80092d8:	20000d70 	.word	0x20000d70

080092dc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	1d38      	adds	r0, r7, #4
 80092e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80092ea:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80092ec:	e012      	b.n	8009314 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	7818      	ldrb	r0, [r3, #0]
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	1d3a      	adds	r2, r7, #4
 80092f6:	ca06      	ldmia	r2, {r1, r2}
 80092f8:	f7ff ff68 	bl	80091cc <ssd1306_WriteChar>
 80092fc:	4603      	mov	r3, r0
 80092fe:	461a      	mov	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	429a      	cmp	r2, r3
 8009306:	d002      	beq.n	800930e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	e008      	b.n	8009320 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3301      	adds	r3, #1
 8009312:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e8      	bne.n	80092ee <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	781b      	ldrb	r3, [r3, #0]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	460a      	mov	r2, r1
 8009332:	71fb      	strb	r3, [r7, #7]
 8009334:	4613      	mov	r3, r2
 8009336:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8009338:	79fb      	ldrb	r3, [r7, #7]
 800933a:	b29a      	uxth	r2, r3
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <ssd1306_SetCursor+0x2c>)
 800933e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8009340:	79bb      	ldrb	r3, [r7, #6]
 8009342:	b29a      	uxth	r2, r3
 8009344:	4b03      	ldr	r3, [pc, #12]	; (8009354 <ssd1306_SetCursor+0x2c>)
 8009346:	805a      	strh	r2, [r3, #2]
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	20000d70 	.word	0x20000d70

08009358 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8009362:	2381      	movs	r3, #129	; 0x81
 8009364:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff fde7 	bl	8008f3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff fde3 	bl	8008f3c <ssd1306_WriteCommand>
}
 8009376:	bf00      	nop
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d005      	beq.n	800939c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8009390:	23af      	movs	r3, #175	; 0xaf
 8009392:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8009394:	4b08      	ldr	r3, [pc, #32]	; (80093b8 <ssd1306_SetDisplayOn+0x38>)
 8009396:	2201      	movs	r2, #1
 8009398:	719a      	strb	r2, [r3, #6]
 800939a:	e004      	b.n	80093a6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800939c:	23ae      	movs	r3, #174	; 0xae
 800939e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <ssd1306_SetDisplayOn+0x38>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff fdc7 	bl	8008f3c <ssd1306_WriteCommand>
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20000d70 	.word	0x20000d70

080093bc <USBD_HID_Init>:
  * @retval status
  */
/* We have to add the dataout/ep_out function here to get USB pipe data out
 * This is only used with XBCD or THPS 2, every other XBOX game sends rumble through control requests */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80093c8:	2010      	movs	r0, #16
 80093ca:	f004 fdfb 	bl	800dfc4 <USBD_static_malloc>
 80093ce:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d105      	bne.n	80093e2 <USBD_HID_Init+0x26>
  {
	  //usb_failed = 1;
    pdev->pClassData = NULL;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80093de:	2302      	movs	r3, #2
 80093e0:	e033      	b.n	800944a <USBD_HID_Init+0x8e>
  }

  pdev->pClassData = (void *)hhid;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7c1b      	ldrb	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d107      	bne.n	8009402 <USBD_HID_Init+0x46>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2207      	movs	r2, #7
 80093f6:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2207      	movs	r2, #7
 80093fc:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
 8009400:	e006      	b.n	8009410 <USBD_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2204      	movs	r2, #4
 8009406:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2204      	movs	r2, #4
 800940c:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009410:	2320      	movs	r3, #32
 8009412:	2203      	movs	r2, #3
 8009414:	2181      	movs	r1, #129	; 0x81
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f004 fc75 	bl	800dd06 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8009422:	2306      	movs	r3, #6
 8009424:	2203      	movs	r2, #3
 8009426:	2102      	movs	r1, #2
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f004 fc6c 	bl	800dd06 <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  (void)USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR,(uint8_t*)rx_buf, HID_EPOUT_SIZE);
 8009436:	2306      	movs	r3, #6
 8009438:	4a06      	ldr	r2, [pc, #24]	; (8009454 <USBD_HID_Init+0x98>)
 800943a:	2102      	movs	r1, #2
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f004 fd51 	bl	800dee4 <USBD_LL_PrepareReceive>

  hhid->state = HID_IDLE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	731a      	strb	r2, [r3, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();

  /* Prepare Out endpoint to receive 1st packet */

  return (uint8_t)USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	200003d0 	.word	0x200003d0

08009458 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8009464:	2181      	movs	r1, #129	; 0x81
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f004 fc73 	bl	800dd52 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, HID_EPOUT_ADDR);
 8009478:	2102      	movs	r1, #2
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f004 fc69 	bl	800dd52 <USBD_LL_CloseEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009496:	2b00      	cmp	r3, #0
 8009498:	d009      	beq.n	80094ae <USBD_HID_DeInit+0x56>
  {
    (void)USBD_free(pdev->pClassData);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094a0:	4618      	mov	r0, r3
 80094a2:	f004 fd9d 	bl	800dfe0 <USBD_static_free>
    pdev->pClassData = NULL;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b088      	sub	sp, #32
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094c8:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d104      	bne.n	80094e2 <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 80094d8:	4b9f      	ldr	r3, [pc, #636]	; (8009758 <USBD_HID_Setup+0x2a0>)
 80094da:	2201      	movs	r2, #1
 80094dc:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 80094de:	2303      	movs	r3, #3
 80094e0:	e136      	b.n	8009750 <USBD_HID_Setup+0x298>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094ea:	2b40      	cmp	r3, #64	; 0x40
 80094ec:	f000 80e1 	beq.w	80096b2 <USBD_HID_Setup+0x1fa>
 80094f0:	2b40      	cmp	r3, #64	; 0x40
 80094f2:	f200 8124 	bhi.w	800973e <USBD_HID_Setup+0x286>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d058      	beq.n	80095ac <USBD_HID_Setup+0xf4>
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	f040 811f 	bne.w	800973e <USBD_HID_Setup+0x286>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	785b      	ldrb	r3, [r3, #1]
 8009504:	3b02      	subs	r3, #2
 8009506:	2b09      	cmp	r3, #9
 8009508:	d848      	bhi.n	800959c <USBD_HID_Setup+0xe4>
 800950a:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <USBD_HID_Setup+0x58>)
 800950c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009510:	08009567 	.word	0x08009567
 8009514:	08009547 	.word	0x08009547
 8009518:	0800959d 	.word	0x0800959d
 800951c:	0800959d 	.word	0x0800959d
 8009520:	0800959d 	.word	0x0800959d
 8009524:	0800959d 	.word	0x0800959d
 8009528:	0800959d 	.word	0x0800959d
 800952c:	08009577 	.word	0x08009577
 8009530:	08009555 	.word	0x08009555
 8009534:	08009539 	.word	0x08009539
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	885b      	ldrh	r3, [r3, #2]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	461a      	mov	r2, r3
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	601a      	str	r2, [r3, #0]
          break;
 8009544:	e031      	b.n	80095aa <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	2201      	movs	r2, #1
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f001 fada 	bl	800ab06 <USBD_CtlSendData>
          break;
 8009552:	e02a      	b.n	80095aa <USBD_HID_Setup+0xf2>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	885b      	ldrh	r3, [r3, #2]
 8009558:	0a1b      	lsrs	r3, r3, #8
 800955a:	b29b      	uxth	r3, r3
 800955c:	b2db      	uxtb	r3, r3
 800955e:	461a      	mov	r2, r3
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	605a      	str	r2, [r3, #4]
          break;
 8009564:	e021      	b.n	80095aa <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	3304      	adds	r3, #4
 800956a:	2201      	movs	r2, #1
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 fac9 	bl	800ab06 <USBD_CtlSendData>
          break;
 8009574:	e019      	b.n	80095aa <USBD_HID_Setup+0xf2>

        /*We need to get Control request data for the rumble data from the XBOX, we have to add this ourselves */
        case HID_REQ_SET_REPORT:
          rumble_flag = 1;
 8009576:	4b79      	ldr	r3, [pc, #484]	; (800975c <USBD_HID_Setup+0x2a4>)
 8009578:	2201      	movs	r2, #1
 800957a:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_ID = (uint8_t)(req->wValue);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	885b      	ldrh	r3, [r3, #2]
 8009580:	b2da      	uxtb	r2, r3
 8009582:	4b77      	ldr	r3, [pc, #476]	; (8009760 <USBD_HID_Setup+0x2a8>)
 8009584:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_LENGTH = (uint8_t)(req->wLength);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	88db      	ldrh	r3, [r3, #6]
 800958a:	b2da      	uxtb	r2, r3
 800958c:	4b75      	ldr	r3, [pc, #468]	; (8009764 <USBD_HID_Setup+0x2ac>)
 800958e:	701a      	strb	r2, [r3, #0]
          USBD_CtlPrepareRx (pdev, ctl_report_buf, HID_EPOUT_SIZE);
 8009590:	2206      	movs	r2, #6
 8009592:	4975      	ldr	r1, [pc, #468]	; (8009768 <USBD_HID_Setup+0x2b0>)
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f001 fae2 	bl	800ab5e <USBD_CtlPrepareRx>
          break;
 800959a:	e006      	b.n	80095aa <USBD_HID_Setup+0xf2>
//                            (uint8_t *)&Report_buf,
//                            8);
//          break;

        default:
          USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 fa40 	bl	800aa24 <USBD_CtlError>
          ret = USBD_FAIL;
 80095a4:	2303      	movs	r3, #3
 80095a6:	77fb      	strb	r3, [r7, #31]
          break;
 80095a8:	bf00      	nop
      }
      break;
 80095aa:	e0d0      	b.n	800974e <USBD_HID_Setup+0x296>
    case USB_REQ_TYPE_STANDARD:

      switch (req->bRequest)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	785b      	ldrb	r3, [r3, #1]
 80095b0:	2b0b      	cmp	r3, #11
 80095b2:	d875      	bhi.n	80096a0 <USBD_HID_Setup+0x1e8>
 80095b4:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <USBD_HID_Setup+0x104>)
 80095b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ba:	bf00      	nop
 80095bc:	080095ed 	.word	0x080095ed
 80095c0:	080096af 	.word	0x080096af
 80095c4:	080096a1 	.word	0x080096a1
 80095c8:	080096a1 	.word	0x080096a1
 80095cc:	080096a1 	.word	0x080096a1
 80095d0:	080096a1 	.word	0x080096a1
 80095d4:	08009617 	.word	0x08009617
 80095d8:	080096a1 	.word	0x080096a1
 80095dc:	080096a1 	.word	0x080096a1
 80095e0:	080096a1 	.word	0x080096a1
 80095e4:	0800964f 	.word	0x0800964f
 80095e8:	08009679 	.word	0x08009679
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d107      	bne.n	8009608 <USBD_HID_Setup+0x150>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80095f8:	f107 030e 	add.w	r3, r7, #14
 80095fc:	2202      	movs	r2, #2
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 fa80 	bl	800ab06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009606:	e053      	b.n	80096b0 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 fa0a 	bl	800aa24 <USBD_CtlError>
            ret = USBD_FAIL;
 8009610:	2303      	movs	r3, #3
 8009612:	77fb      	strb	r3, [r7, #31]
          break;
 8009614:	e04c      	b.n	80096b0 <USBD_HID_Setup+0x1f8>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	885b      	ldrh	r3, [r3, #2]
 800961a:	0a1b      	lsrs	r3, r3, #8
 800961c:	b29b      	uxth	r3, r3
 800961e:	2b21      	cmp	r3, #33	; 0x21
 8009620:	d10e      	bne.n	8009640 <USBD_HID_Setup+0x188>
          {
            pbuf = USBD_HID_Desc;
 8009622:	4b52      	ldr	r3, [pc, #328]	; (800976c <USBD_HID_Setup+0x2b4>)
 8009624:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	88db      	ldrh	r3, [r3, #6]
 800962a:	2b12      	cmp	r3, #18
 800962c:	bf28      	it	cs
 800962e:	2312      	movcs	r3, #18
 8009630:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009632:	8afb      	ldrh	r3, [r7, #22]
 8009634:	461a      	mov	r2, r3
 8009636:	6939      	ldr	r1, [r7, #16]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f001 fa64 	bl	800ab06 <USBD_CtlSendData>
          break;
 800963e:	e037      	b.n	80096b0 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 f9ee 	bl	800aa24 <USBD_CtlError>
            ret = USBD_FAIL;
 8009648:	2303      	movs	r3, #3
 800964a:	77fb      	strb	r3, [r7, #31]
            break;
 800964c:	e030      	b.n	80096b0 <USBD_HID_Setup+0x1f8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b03      	cmp	r3, #3
 8009658:	d107      	bne.n	800966a <USBD_HID_Setup+0x1b2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	3308      	adds	r3, #8
 800965e:	2201      	movs	r2, #1
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 fa4f 	bl	800ab06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009668:	e022      	b.n	80096b0 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 f9d9 	bl	800aa24 <USBD_CtlError>
            ret = USBD_FAIL;
 8009672:	2303      	movs	r3, #3
 8009674:	77fb      	strb	r3, [r7, #31]
          break;
 8009676:	e01b      	b.n	80096b0 <USBD_HID_Setup+0x1f8>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b03      	cmp	r3, #3
 8009682:	d106      	bne.n	8009692 <USBD_HID_Setup+0x1da>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	885b      	ldrh	r3, [r3, #2]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	461a      	mov	r2, r3
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009690:	e00e      	b.n	80096b0 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f001 f9c5 	bl	800aa24 <USBD_CtlError>
            ret = USBD_FAIL;
 800969a:	2303      	movs	r3, #3
 800969c:	77fb      	strb	r3, [r7, #31]
          break;
 800969e:	e007      	b.n	80096b0 <USBD_HID_Setup+0x1f8>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f001 f9be 	bl	800aa24 <USBD_CtlError>
          ret = USBD_FAIL;
 80096a8:	2303      	movs	r3, #3
 80096aa:	77fb      	strb	r3, [r7, #31]
          break;
 80096ac:	e000      	b.n	80096b0 <USBD_HID_Setup+0x1f8>
          break;
 80096ae:	bf00      	nop
      }
      break;
 80096b0:	e04d      	b.n	800974e <USBD_HID_Setup+0x296>
    /*This is for the og XBOX, this is the custom vendor request
     * We intercept these and return either the controller's capabilities
     * This is equivalent to the USB HID Descriptor which would normally be used for most devices */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 80096b2:	4b2f      	ldr	r3, [pc, #188]	; (8009770 <USBD_HID_Setup+0x2b8>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	3301      	adds	r3, #1
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	4b2d      	ldr	r3, [pc, #180]	; (8009770 <USBD_HID_Setup+0x2b8>)
 80096bc:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	785b      	ldrb	r3, [r3, #1]
 80096c2:	2b06      	cmp	r3, #6
 80096c4:	d10f      	bne.n	80096e6 <USBD_HID_Setup+0x22e>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	885b      	ldrh	r3, [r3, #2]
 80096ca:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 80096ce:	d10a      	bne.n	80096e6 <USBD_HID_Setup+0x22e>
    		len = 16;
 80096d0:	2310      	movs	r3, #16
 80096d2:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 80096d4:	4b25      	ldr	r3, [pc, #148]	; (800976c <USBD_HID_Setup+0x2b4>)
 80096d6:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 80096d8:	8afb      	ldrh	r3, [r7, #22]
 80096da:	461a      	mov	r2, r3
 80096dc:	6939      	ldr	r1, [r7, #16]
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f001 fa11 	bl	800ab06 <USBD_CtlSendData>
 80096e4:	e02a      	b.n	800973c <USBD_HID_Setup+0x284>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	785b      	ldrb	r3, [r3, #1]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d10f      	bne.n	800970e <USBD_HID_Setup+0x256>
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	885b      	ldrh	r3, [r3, #2]
 80096f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096f6:	d10a      	bne.n	800970e <USBD_HID_Setup+0x256>
    		len = 20;
 80096f8:	2314      	movs	r3, #20
 80096fa:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 80096fc:	4b1d      	ldr	r3, [pc, #116]	; (8009774 <USBD_HID_Setup+0x2bc>)
 80096fe:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8009700:	8afb      	ldrh	r3, [r7, #22]
 8009702:	461a      	mov	r2, r3
 8009704:	6939      	ldr	r1, [r7, #16]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 f9fd 	bl	800ab06 <USBD_CtlSendData>
 800970c:	e016      	b.n	800973c <USBD_HID_Setup+0x284>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	785b      	ldrb	r3, [r3, #1]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d11a      	bne.n	800974c <USBD_HID_Setup+0x294>
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	885b      	ldrh	r3, [r3, #2]
 800971a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800971e:	d115      	bne.n	800974c <USBD_HID_Setup+0x294>
    		rumble_brequest_sent = 1;
 8009720:	4b15      	ldr	r3, [pc, #84]	; (8009778 <USBD_HID_Setup+0x2c0>)
 8009722:	2201      	movs	r2, #1
 8009724:	701a      	strb	r2, [r3, #0]
    		len = 6;
 8009726:	2306      	movs	r3, #6
 8009728:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 800972a:	4b14      	ldr	r3, [pc, #80]	; (800977c <USBD_HID_Setup+0x2c4>)
 800972c:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 800972e:	8afb      	ldrh	r3, [r7, #22]
 8009730:	461a      	mov	r2, r3
 8009732:	6939      	ldr	r1, [r7, #16]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 f9e6 	bl	800ab06 <USBD_CtlSendData>
    	}
    break;
 800973a:	e007      	b.n	800974c <USBD_HID_Setup+0x294>
 800973c:	e006      	b.n	800974c <USBD_HID_Setup+0x294>

    default:
      USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f001 f96f 	bl	800aa24 <USBD_CtlError>
      ret = USBD_FAIL;
 8009746:	2303      	movs	r3, #3
 8009748:	77fb      	strb	r3, [r7, #31]
      break;
 800974a:	e000      	b.n	800974e <USBD_HID_Setup+0x296>
    break;
 800974c:	bf00      	nop
  }

  return (uint8_t)ret;
 800974e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3720      	adds	r7, #32
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20000d7a 	.word	0x20000d7a
 800975c:	20000d86 	.word	0x20000d86
 8009760:	20000d7c 	.word	0x20000d7c
 8009764:	20000d7d 	.word	0x20000d7d
 8009768:	20000d80 	.word	0x20000d80
 800976c:	20000090 	.word	0x20000090
 8009770:	20000d78 	.word	0x20000d78
 8009774:	200000ac 	.word	0x200000ac
 8009778:	20000d7b 	.word	0x20000d7b
 800977c:	200000c0 	.word	0x200000c0

08009780 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009794:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 800979c:	2303      	movs	r3, #3
 800979e:	e013      	b.n	80097c8 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	d10c      	bne.n	80097c6 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	7b1b      	ldrb	r3, [r3, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d108      	bne.n	80097c6 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2201      	movs	r2, #1
 80097b8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80097ba:	88fb      	ldrh	r3, [r7, #6]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	2181      	movs	r1, #129	; 0x81
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f004 fb6e 	bl	800dea2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2220      	movs	r2, #32
 80097dc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80097de:	4b03      	ldr	r3, [pc, #12]	; (80097ec <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	20000050 	.word	0x20000050

080097f0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 80097f8:	bf00      	nop
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
	...

08009808 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2220      	movs	r2, #32
 8009814:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8009816:	4b03      	ldr	r3, [pc, #12]	; (8009824 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	20000070 	.word	0x20000070

08009828 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800983a:	2200      	movs	r2, #0
 800983c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <USBD_HID_DataOut>:
/* DataOut will only run for THPS 2 or activating rumble in XBCD on a PC */
static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	70fb      	strb	r3, [r7, #3]
	dataout_ran++;
 8009858:	4b08      	ldr	r3, [pc, #32]	; (800987c <USBD_HID_DataOut+0x30>)
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	3301      	adds	r3, #1
 800985e:	b2da      	uxtb	r2, r3
 8009860:	4b06      	ldr	r3, [pc, #24]	; (800987c <USBD_HID_DataOut+0x30>)
 8009862:	701a      	strb	r2, [r3, #0]
	USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, (uint8_t*) (rx_buf), HID_EPOUT_SIZE);
 8009864:	2306      	movs	r3, #6
 8009866:	4a06      	ldr	r2, [pc, #24]	; (8009880 <USBD_HID_DataOut+0x34>)
 8009868:	2102      	movs	r1, #2
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f004 fb3a 	bl	800dee4 <USBD_LL_PrepareReceive>
	return USBD_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	20000d79 	.word	0x20000d79
 8009880:	200003d0 	.word	0x200003d0

08009884 <USBD_HID_EP0_RxReady>:
  * @retval status
  */
/*This is to put the rumble data from the USB control requests into rx_buf so we can read that in main
 * This is the standard way XBOX sends rumble data, this different from a PC which would send data through USB Out Pipe */
static uint8_t USBD_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	if (rumble_flag) {
 800988c:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <USBD_HID_EP0_RxReady+0x4c>)
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d015      	beq.n	80098c0 <USBD_HID_EP0_RxReady+0x3c>
		rumble_flag = 0;
 8009894:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <USBD_HID_EP0_RxReady+0x4c>)
 8009896:	2200      	movs	r2, #0
 8009898:	701a      	strb	r2, [r3, #0]
		if (USBD_HID_Report_LENGTH == HID_EPOUT_SIZE) {
 800989a:	4b0e      	ldr	r3, [pc, #56]	; (80098d4 <USBD_HID_EP0_RxReady+0x50>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b06      	cmp	r3, #6
 80098a0:	d10e      	bne.n	80098c0 <USBD_HID_EP0_RxReady+0x3c>
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
 80098a6:	e008      	b.n	80098ba <USBD_HID_EP0_RxReady+0x36>
				rx_buf[i] = ctl_report_buf[i];
 80098a8:	7bfa      	ldrb	r2, [r7, #15]
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	490a      	ldr	r1, [pc, #40]	; (80098d8 <USBD_HID_EP0_RxReady+0x54>)
 80098ae:	5c89      	ldrb	r1, [r1, r2]
 80098b0:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <USBD_HID_EP0_RxReady+0x58>)
 80098b2:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	3301      	adds	r3, #1
 80098b8:	73fb      	strb	r3, [r7, #15]
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	2b05      	cmp	r3, #5
 80098be:	d9f3      	bls.n	80098a8 <USBD_HID_EP0_RxReady+0x24>
			}
		}
	}
	return (uint8_t) USBD_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	20000d86 	.word	0x20000d86
 80098d4:	20000d7d 	.word	0x20000d7d
 80098d8:	20000d80 	.word	0x20000d80
 80098dc:	200003d0 	.word	0x200003d0

080098e0 <USBD_HID_EP0_TxSent>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_HID_EP0_TxSent(USBD_HandleTypeDef *pdev)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
//    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
//                                                              hhid->Report_buf[1]);
//    hhid->IsReportAvailable = 0U;
//  }

  return (uint8_t)USBD_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
	...

080098f8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	220a      	movs	r2, #10
 8009904:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8009906:	4b03      	ldr	r3, [pc, #12]	; (8009914 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	200000a0 	.word	0x200000a0

08009918 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	4613      	mov	r3, r2
 8009924:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800992c:	2303      	movs	r3, #3
 800992e:	e01f      	b.n	8009970 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	79fa      	ldrb	r2, [r7, #7]
 8009962:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f004 f967 	bl	800dc38 <USBD_LL_Init>
 800996a:	4603      	mov	r3, r0
 800996c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800996e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009982:	2300      	movs	r3, #0
 8009984:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800998c:	2303      	movs	r3, #3
 800998e:	e016      	b.n	80099be <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	f107 020e 	add.w	r2, r7, #14
 80099b0:	4610      	mov	r0, r2
 80099b2:	4798      	blx	r3
 80099b4:	4602      	mov	r2, r0
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b082      	sub	sp, #8
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f004 f97e 	bl	800dcd0 <USBD_LL_Start>
 80099d4:	4603      	mov	r3, r0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80099de:	b480      	push	{r7}
 80099e0:	b083      	sub	sp, #12
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009a00:	2303      	movs	r3, #3
 8009a02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d009      	beq.n	8009a22 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	78fa      	ldrb	r2, [r7, #3]
 8009a18:	4611      	mov	r1, r2
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	4798      	blx	r3
 8009a1e:	4603      	mov	r3, r0
 8009a20:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d007      	beq.n	8009a52 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	78fa      	ldrb	r2, [r7, #3]
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	4798      	blx	r3
  }

  return USBD_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 ff9e 	bl	800a9b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a90:	f003 031f 	and.w	r3, r3, #31
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d01a      	beq.n	8009ace <USBD_LL_SetupStage+0x72>
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d822      	bhi.n	8009ae2 <USBD_LL_SetupStage+0x86>
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <USBD_LL_SetupStage+0x4a>
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d00a      	beq.n	8009aba <USBD_LL_SetupStage+0x5e>
 8009aa4:	e01d      	b.n	8009ae2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fa62 	bl	8009f78 <USBD_StdDevReq>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab8:	e020      	b.n	8009afc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fad4 	bl	800a070 <USBD_StdItfReq>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73fb      	strb	r3, [r7, #15]
      break;
 8009acc:	e016      	b.n	8009afc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fb13 	bl	800a102 <USBD_StdEPReq>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73fb      	strb	r3, [r7, #15]
      break;
 8009ae0:	e00c      	b.n	8009afc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ae8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f004 f94d 	bl	800dd90 <USBD_LL_StallEP>
 8009af6:	4603      	mov	r3, r0
 8009af8:	73fb      	strb	r3, [r7, #15]
      break;
 8009afa:	bf00      	nop
  }

  return ret;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b086      	sub	sp, #24
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	607a      	str	r2, [r7, #4]
 8009b12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009b14:	7afb      	ldrb	r3, [r7, #11]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d138      	bne.n	8009b8c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d14a      	bne.n	8009bc2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	689a      	ldr	r2, [r3, #8]
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d913      	bls.n	8009b60 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	689a      	ldr	r2, [r3, #8]
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	1ad2      	subs	r2, r2, r3
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	bf28      	it	cs
 8009b52:	4613      	movcs	r3, r2
 8009b54:	461a      	mov	r2, r3
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f001 f81d 	bl	800ab98 <USBD_CtlContinueRx>
 8009b5e:	e030      	b.n	8009bc2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	d10b      	bne.n	8009b84 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d005      	beq.n	8009b84 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f001 f818 	bl	800abba <USBD_CtlSendStatus>
 8009b8a:	e01a      	b.n	8009bc2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b03      	cmp	r3, #3
 8009b96:	d114      	bne.n	8009bc2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00e      	beq.n	8009bc2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	7afa      	ldrb	r2, [r7, #11]
 8009bae:	4611      	mov	r1, r2
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	4798      	blx	r3
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	e000      	b.n	8009bc4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3718      	adds	r7, #24
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009bda:	7afb      	ldrb	r3, [r7, #11]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d16b      	bne.n	8009cb8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3314      	adds	r3, #20
 8009be4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d156      	bne.n	8009c9e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	689a      	ldr	r2, [r3, #8]
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d914      	bls.n	8009c26 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	689a      	ldr	r2, [r3, #8]
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	1ad2      	subs	r2, r2, r3
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	6879      	ldr	r1, [r7, #4]
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 ff92 	bl	800ab3c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f004 f960 	bl	800dee4 <USBD_LL_PrepareReceive>
 8009c24:	e03b      	b.n	8009c9e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	68da      	ldr	r2, [r3, #12]
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d11c      	bne.n	8009c6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d316      	bcc.n	8009c6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d20f      	bcs.n	8009c6c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2100      	movs	r1, #0
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 ff73 	bl	800ab3c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c5e:	2300      	movs	r3, #0
 8009c60:	2200      	movs	r2, #0
 8009c62:	2100      	movs	r1, #0
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f004 f93d 	bl	800dee4 <USBD_LL_PrepareReceive>
 8009c6a:	e018      	b.n	8009c9e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d10b      	bne.n	8009c90 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d005      	beq.n	8009c90 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c90:	2180      	movs	r1, #128	; 0x80
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f004 f87c 	bl	800dd90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 ffa1 	bl	800abe0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d122      	bne.n	8009cee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff fe98 	bl	80099de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009cb6:	e01a      	b.n	8009cee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b03      	cmp	r3, #3
 8009cc2:	d114      	bne.n	8009cee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00e      	beq.n	8009cee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd6:	695b      	ldr	r3, [r3, #20]
 8009cd8:	7afa      	ldrb	r2, [r7, #11]
 8009cda:	4611      	mov	r1, r2
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	4798      	blx	r3
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	e000      	b.n	8009cf0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e02f      	b.n	8009d8c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00f      	beq.n	8009d56 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d009      	beq.n	8009d56 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	6852      	ldr	r2, [r2, #4]
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	4611      	mov	r1, r2
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d56:	2340      	movs	r3, #64	; 0x40
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f003 ffd2 	bl	800dd06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2240      	movs	r2, #64	; 0x40
 8009d6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d72:	2340      	movs	r3, #64	; 0x40
 8009d74:	2200      	movs	r2, #0
 8009d76:	2180      	movs	r1, #128	; 0x80
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f003 ffc4 	bl	800dd06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2240      	movs	r2, #64	; 0x40
 8009d88:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	78fa      	ldrb	r2, [r7, #3]
 8009da4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2204      	movs	r2, #4
 8009dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d106      	bne.n	8009e02 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e012      	b.n	8009e4c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d10b      	bne.n	8009e4a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d005      	beq.n	8009e4a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	e014      	b.n	8009e98 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	d10d      	bne.n	8009e96 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d007      	beq.n	8009e96 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	78fa      	ldrb	r2, [r7, #3]
 8009e90:	4611      	mov	r1, r2
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	e014      	b.n	8009ee4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d10d      	bne.n	8009ee2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d007      	beq.n	8009ee2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	78fa      	ldrb	r2, [r7, #3]
 8009edc:	4611      	mov	r1, r2
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b082      	sub	sp, #8
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d009      	beq.n	8009f30 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	6852      	ldr	r2, [r2, #4]
 8009f28:	b2d2      	uxtb	r2, r2
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	4798      	blx	r3
  }

  return USBD_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b087      	sub	sp, #28
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009f58:	8a3b      	ldrh	r3, [r7, #16]
 8009f5a:	021b      	lsls	r3, r3, #8
 8009f5c:	b21a      	sxth	r2, r3
 8009f5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	b21b      	sxth	r3, r3
 8009f66:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009f68:	89fb      	ldrh	r3, [r7, #14]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	371c      	adds	r7, #28
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
	...

08009f78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]

	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	4798      	blx	r3
 8009f94:	4603      	mov	r3, r0
 8009f96:	73fb      	strb	r3, [r7, #15]

	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fa0:	2b40      	cmp	r3, #64	; 0x40
 8009fa2:	d005      	beq.n	8009fb0 <USBD_StdDevReq+0x38>
 8009fa4:	2b40      	cmp	r3, #64	; 0x40
 8009fa6:	d854      	bhi.n	800a052 <USBD_StdDevReq+0xda>
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <USBD_StdDevReq+0x4c>
 8009fac:	2b20      	cmp	r3, #32
 8009fae:	d150      	bne.n	800a052 <USBD_StdDevReq+0xda>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	4798      	blx	r3
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73fb      	strb	r3, [r7, #15]
		  break;
 8009fc2:	e04e      	b.n	800a062 <USBD_StdDevReq+0xea>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	2b09      	cmp	r3, #9
 8009fca:	d83c      	bhi.n	800a046 <USBD_StdDevReq+0xce>
 8009fcc:	a201      	add	r2, pc, #4	; (adr r2, 8009fd4 <USBD_StdDevReq+0x5c>)
 8009fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd2:	bf00      	nop
 8009fd4:	0800a029 	.word	0x0800a029
 8009fd8:	0800a03d 	.word	0x0800a03d
 8009fdc:	0800a047 	.word	0x0800a047
 8009fe0:	0800a033 	.word	0x0800a033
 8009fe4:	0800a047 	.word	0x0800a047
 8009fe8:	0800a007 	.word	0x0800a007
 8009fec:	08009ffd 	.word	0x08009ffd
 8009ff0:	0800a047 	.word	0x0800a047
 8009ff4:	0800a01f 	.word	0x0800a01f
 8009ff8:	0800a011 	.word	0x0800a011
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f9e2 	bl	800a3c8 <USBD_GetDescriptor>
			  break;
 800a004:	e024      	b.n	800a050 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fb47 	bl	800a69c <USBD_SetAddress>
			  break;
 800a00e:	e01f      	b.n	800a050 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fb86 	bl	800a724 <USBD_SetConfig>
 800a018:	4603      	mov	r3, r0
 800a01a:	73fb      	strb	r3, [r7, #15]
			  break;
 800a01c:	e018      	b.n	800a050 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fc25 	bl	800a870 <USBD_GetConfig>
			  break;
 800a026:	e013      	b.n	800a050 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fc56 	bl	800a8dc <USBD_GetStatus>
			  break;
 800a030:	e00e      	b.n	800a050 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fc85 	bl	800a944 <USBD_SetFeature>
			  break;
 800a03a:	e009      	b.n	800a050 <USBD_StdDevReq+0xd8>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fc94 	bl	800a96c <USBD_ClrFeature>
			  break;
 800a044:	e004      	b.n	800a050 <USBD_StdDevReq+0xd8>

			default:
			  USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fceb 	bl	800aa24 <USBD_CtlError>
			  break;
 800a04e:	bf00      	nop
		  }
		  break;
 800a050:	e007      	b.n	800a062 <USBD_StdDevReq+0xea>

		default:
		  unknown_bmrequest = 1;
 800a052:	4b06      	ldr	r3, [pc, #24]	; (800a06c <USBD_StdDevReq+0xf4>)
 800a054:	2201      	movs	r2, #1
 800a056:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fce2 	bl	800aa24 <USBD_CtlError>
		  break;
 800a060:	bf00      	nop
	  }

  return ret;
 800a062:	7bfb      	ldrb	r3, [r7, #15]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	20000d87 	.word	0x20000d87

0800a070 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a086:	2b40      	cmp	r3, #64	; 0x40
 800a088:	d005      	beq.n	800a096 <USBD_StdItfReq+0x26>
 800a08a:	2b40      	cmp	r3, #64	; 0x40
 800a08c:	d82f      	bhi.n	800a0ee <USBD_StdItfReq+0x7e>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <USBD_StdItfReq+0x26>
 800a092:	2b20      	cmp	r3, #32
 800a094:	d12b      	bne.n	800a0ee <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d81d      	bhi.n	800a0e0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	889b      	ldrh	r3, [r3, #4]
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d813      	bhi.n	800a0d6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	4798      	blx	r3
 800a0bc:	4603      	mov	r3, r0
 800a0be:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	88db      	ldrh	r3, [r3, #6]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d110      	bne.n	800a0ea <USBD_StdItfReq+0x7a>
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10d      	bne.n	800a0ea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fd73 	bl	800abba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a0d4:	e009      	b.n	800a0ea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fca3 	bl	800aa24 <USBD_CtlError>
          break;
 800a0de:	e004      	b.n	800a0ea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fc9e 	bl	800aa24 <USBD_CtlError>
          break;
 800a0e8:	e000      	b.n	800a0ec <USBD_StdItfReq+0x7c>
          break;
 800a0ea:	bf00      	nop
      }
      break;
 800a0ec:	e004      	b.n	800a0f8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fc97 	bl	800aa24 <USBD_CtlError>
      break;
 800a0f6:	bf00      	nop
  }

  return ret;
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	889b      	ldrh	r3, [r3, #4]
 800a114:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a11e:	2b40      	cmp	r3, #64	; 0x40
 800a120:	d007      	beq.n	800a132 <USBD_StdEPReq+0x30>
 800a122:	2b40      	cmp	r3, #64	; 0x40
 800a124:	f200 8145 	bhi.w	800a3b2 <USBD_StdEPReq+0x2b0>
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00c      	beq.n	800a146 <USBD_StdEPReq+0x44>
 800a12c:	2b20      	cmp	r3, #32
 800a12e:	f040 8140 	bne.w	800a3b2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	4798      	blx	r3
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]
      break;
 800a144:	e13a      	b.n	800a3bc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	785b      	ldrb	r3, [r3, #1]
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d007      	beq.n	800a15e <USBD_StdEPReq+0x5c>
 800a14e:	2b03      	cmp	r3, #3
 800a150:	f300 8129 	bgt.w	800a3a6 <USBD_StdEPReq+0x2a4>
 800a154:	2b00      	cmp	r3, #0
 800a156:	d07f      	beq.n	800a258 <USBD_StdEPReq+0x156>
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d03c      	beq.n	800a1d6 <USBD_StdEPReq+0xd4>
 800a15c:	e123      	b.n	800a3a6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b02      	cmp	r3, #2
 800a168:	d002      	beq.n	800a170 <USBD_StdEPReq+0x6e>
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d016      	beq.n	800a19c <USBD_StdEPReq+0x9a>
 800a16e:	e02c      	b.n	800a1ca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a170:	7bbb      	ldrb	r3, [r7, #14]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00d      	beq.n	800a192 <USBD_StdEPReq+0x90>
 800a176:	7bbb      	ldrb	r3, [r7, #14]
 800a178:	2b80      	cmp	r3, #128	; 0x80
 800a17a:	d00a      	beq.n	800a192 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f003 fe05 	bl	800dd90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a186:	2180      	movs	r1, #128	; 0x80
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f003 fe01 	bl	800dd90 <USBD_LL_StallEP>
 800a18e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a190:	e020      	b.n	800a1d4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fc45 	bl	800aa24 <USBD_CtlError>
              break;
 800a19a:	e01b      	b.n	800a1d4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	885b      	ldrh	r3, [r3, #2]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10e      	bne.n	800a1c2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00b      	beq.n	800a1c2 <USBD_StdEPReq+0xc0>
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
 800a1ac:	2b80      	cmp	r3, #128	; 0x80
 800a1ae:	d008      	beq.n	800a1c2 <USBD_StdEPReq+0xc0>
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	88db      	ldrh	r3, [r3, #6]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d104      	bne.n	800a1c2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1b8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f003 fde7 	bl	800dd90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fcf9 	bl	800abba <USBD_CtlSendStatus>

              break;
 800a1c8:	e004      	b.n	800a1d4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fc29 	bl	800aa24 <USBD_CtlError>
              break;
 800a1d2:	bf00      	nop
          }
          break;
 800a1d4:	e0ec      	b.n	800a3b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d002      	beq.n	800a1e8 <USBD_StdEPReq+0xe6>
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d016      	beq.n	800a214 <USBD_StdEPReq+0x112>
 800a1e6:	e030      	b.n	800a24a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00d      	beq.n	800a20a <USBD_StdEPReq+0x108>
 800a1ee:	7bbb      	ldrb	r3, [r7, #14]
 800a1f0:	2b80      	cmp	r3, #128	; 0x80
 800a1f2:	d00a      	beq.n	800a20a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1f4:	7bbb      	ldrb	r3, [r7, #14]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f003 fdc9 	bl	800dd90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1fe:	2180      	movs	r1, #128	; 0x80
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f003 fdc5 	bl	800dd90 <USBD_LL_StallEP>
 800a206:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a208:	e025      	b.n	800a256 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fc09 	bl	800aa24 <USBD_CtlError>
              break;
 800a212:	e020      	b.n	800a256 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	885b      	ldrh	r3, [r3, #2]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d11b      	bne.n	800a254 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a21c:	7bbb      	ldrb	r3, [r7, #14]
 800a21e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a222:	2b00      	cmp	r3, #0
 800a224:	d004      	beq.n	800a230 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a226:	7bbb      	ldrb	r3, [r7, #14]
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f003 fdcf 	bl	800ddce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fcc2 	bl	800abba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	4798      	blx	r3
 800a244:	4603      	mov	r3, r0
 800a246:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a248:	e004      	b.n	800a254 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a24a:	6839      	ldr	r1, [r7, #0]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fbe9 	bl	800aa24 <USBD_CtlError>
              break;
 800a252:	e000      	b.n	800a256 <USBD_StdEPReq+0x154>
              break;
 800a254:	bf00      	nop
          }
          break;
 800a256:	e0ab      	b.n	800a3b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b02      	cmp	r3, #2
 800a262:	d002      	beq.n	800a26a <USBD_StdEPReq+0x168>
 800a264:	2b03      	cmp	r3, #3
 800a266:	d032      	beq.n	800a2ce <USBD_StdEPReq+0x1cc>
 800a268:	e097      	b.n	800a39a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d007      	beq.n	800a280 <USBD_StdEPReq+0x17e>
 800a270:	7bbb      	ldrb	r3, [r7, #14]
 800a272:	2b80      	cmp	r3, #128	; 0x80
 800a274:	d004      	beq.n	800a280 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fbd3 	bl	800aa24 <USBD_CtlError>
                break;
 800a27e:	e091      	b.n	800a3a4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a284:	2b00      	cmp	r3, #0
 800a286:	da0b      	bge.n	800a2a0 <USBD_StdEPReq+0x19e>
 800a288:	7bbb      	ldrb	r3, [r7, #14]
 800a28a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a28e:	4613      	mov	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	3310      	adds	r3, #16
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	4413      	add	r3, r2
 800a29c:	3304      	adds	r3, #4
 800a29e:	e00b      	b.n	800a2b8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
 800a2a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fc1d 	bl	800ab06 <USBD_CtlSendData>
              break;
 800a2cc:	e06a      	b.n	800a3a4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a2ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	da11      	bge.n	800a2fa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a2d6:	7bbb      	ldrb	r3, [r7, #14]
 800a2d8:	f003 020f 	and.w	r2, r3, #15
 800a2dc:	6879      	ldr	r1, [r7, #4]
 800a2de:	4613      	mov	r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	440b      	add	r3, r1
 800a2e8:	3324      	adds	r3, #36	; 0x24
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d117      	bne.n	800a320 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fb96 	bl	800aa24 <USBD_CtlError>
                  break;
 800a2f8:	e054      	b.n	800a3a4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a2fa:	7bbb      	ldrb	r3, [r7, #14]
 800a2fc:	f003 020f 	and.w	r2, r3, #15
 800a300:	6879      	ldr	r1, [r7, #4]
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	440b      	add	r3, r1
 800a30c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d104      	bne.n	800a320 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fb83 	bl	800aa24 <USBD_CtlError>
                  break;
 800a31e:	e041      	b.n	800a3a4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a324:	2b00      	cmp	r3, #0
 800a326:	da0b      	bge.n	800a340 <USBD_StdEPReq+0x23e>
 800a328:	7bbb      	ldrb	r3, [r7, #14]
 800a32a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a32e:	4613      	mov	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	3310      	adds	r3, #16
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	4413      	add	r3, r2
 800a33c:	3304      	adds	r3, #4
 800a33e:	e00b      	b.n	800a358 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a340:	7bbb      	ldrb	r3, [r7, #14]
 800a342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a346:	4613      	mov	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	4413      	add	r3, r2
 800a356:	3304      	adds	r3, #4
 800a358:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a35a:	7bbb      	ldrb	r3, [r7, #14]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d002      	beq.n	800a366 <USBD_StdEPReq+0x264>
 800a360:	7bbb      	ldrb	r3, [r7, #14]
 800a362:	2b80      	cmp	r3, #128	; 0x80
 800a364:	d103      	bne.n	800a36e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2200      	movs	r2, #0
 800a36a:	601a      	str	r2, [r3, #0]
 800a36c:	e00e      	b.n	800a38c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a36e:	7bbb      	ldrb	r3, [r7, #14]
 800a370:	4619      	mov	r1, r3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f003 fd4a 	bl	800de0c <USBD_LL_IsStallEP>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2201      	movs	r2, #1
 800a382:	601a      	str	r2, [r3, #0]
 800a384:	e002      	b.n	800a38c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2202      	movs	r2, #2
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fbb7 	bl	800ab06 <USBD_CtlSendData>
              break;
 800a398:	e004      	b.n	800a3a4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fb41 	bl	800aa24 <USBD_CtlError>
              break;
 800a3a2:	bf00      	nop
          }
          break;
 800a3a4:	e004      	b.n	800a3b0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fb3b 	bl	800aa24 <USBD_CtlError>
          break;
 800a3ae:	bf00      	nop
      }
      break;
 800a3b0:	e004      	b.n	800a3bc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fb35 	bl	800aa24 <USBD_CtlError>
      break;
 800a3ba:	bf00      	nop
  }

  return ret;
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	885b      	ldrh	r3, [r3, #2]
 800a3e2:	0a1b      	lsrs	r3, r3, #8
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	2b06      	cmp	r3, #6
 800a3ea:	f200 8128 	bhi.w	800a63e <USBD_GetDescriptor+0x276>
 800a3ee:	a201      	add	r2, pc, #4	; (adr r2, 800a3f4 <USBD_GetDescriptor+0x2c>)
 800a3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f4:	0800a411 	.word	0x0800a411
 800a3f8:	0800a429 	.word	0x0800a429
 800a3fc:	0800a469 	.word	0x0800a469
 800a400:	0800a63f 	.word	0x0800a63f
 800a404:	0800a63f 	.word	0x0800a63f
 800a408:	0800a5df 	.word	0x0800a5df
 800a40c:	0800a60b 	.word	0x0800a60b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	7c12      	ldrb	r2, [r2, #16]
 800a41c:	f107 0108 	add.w	r1, r7, #8
 800a420:	4610      	mov	r0, r2
 800a422:	4798      	blx	r3
 800a424:	60f8      	str	r0, [r7, #12]
      break;
 800a426:	e112      	b.n	800a64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	7c1b      	ldrb	r3, [r3, #16]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10d      	bne.n	800a44c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a438:	f107 0208 	add.w	r2, r7, #8
 800a43c:	4610      	mov	r0, r2
 800a43e:	4798      	blx	r3
 800a440:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	3301      	adds	r3, #1
 800a446:	2202      	movs	r2, #2
 800a448:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a44a:	e100      	b.n	800a64e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a454:	f107 0208 	add.w	r2, r7, #8
 800a458:	4610      	mov	r0, r2
 800a45a:	4798      	blx	r3
 800a45c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3301      	adds	r3, #1
 800a462:	2202      	movs	r2, #2
 800a464:	701a      	strb	r2, [r3, #0]
      break;
 800a466:	e0f2      	b.n	800a64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	885b      	ldrh	r3, [r3, #2]
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b05      	cmp	r3, #5
 800a470:	f200 80ac 	bhi.w	800a5cc <USBD_GetDescriptor+0x204>
 800a474:	a201      	add	r2, pc, #4	; (adr r2, 800a47c <USBD_GetDescriptor+0xb4>)
 800a476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47a:	bf00      	nop
 800a47c:	0800a495 	.word	0x0800a495
 800a480:	0800a4c9 	.word	0x0800a4c9
 800a484:	0800a4fd 	.word	0x0800a4fd
 800a488:	0800a531 	.word	0x0800a531
 800a48c:	0800a565 	.word	0x0800a565
 800a490:	0800a599 	.word	0x0800a599
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00b      	beq.n	800a4b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	7c12      	ldrb	r2, [r2, #16]
 800a4ac:	f107 0108 	add.w	r1, r7, #8
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4798      	blx	r3
 800a4b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4b6:	e091      	b.n	800a5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fab2 	bl	800aa24 <USBD_CtlError>
            err++;
 800a4c0:	7afb      	ldrb	r3, [r7, #11]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a4c6:	e089      	b.n	800a5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00b      	beq.n	800a4ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	7c12      	ldrb	r2, [r2, #16]
 800a4e0:	f107 0108 	add.w	r1, r7, #8
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	4798      	blx	r3
 800a4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ea:	e077      	b.n	800a5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fa98 	bl	800aa24 <USBD_CtlError>
            err++;
 800a4f4:	7afb      	ldrb	r3, [r7, #11]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4fa:	e06f      	b.n	800a5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00b      	beq.n	800a520 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	7c12      	ldrb	r2, [r2, #16]
 800a514:	f107 0108 	add.w	r1, r7, #8
 800a518:	4610      	mov	r0, r2
 800a51a:	4798      	blx	r3
 800a51c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a51e:	e05d      	b.n	800a5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fa7e 	bl	800aa24 <USBD_CtlError>
            err++;
 800a528:	7afb      	ldrb	r3, [r7, #11]
 800a52a:	3301      	adds	r3, #1
 800a52c:	72fb      	strb	r3, [r7, #11]
          break;
 800a52e:	e055      	b.n	800a5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00b      	beq.n	800a554 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	7c12      	ldrb	r2, [r2, #16]
 800a548:	f107 0108 	add.w	r1, r7, #8
 800a54c:	4610      	mov	r0, r2
 800a54e:	4798      	blx	r3
 800a550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a552:	e043      	b.n	800a5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fa64 	bl	800aa24 <USBD_CtlError>
            err++;
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	3301      	adds	r3, #1
 800a560:	72fb      	strb	r3, [r7, #11]
          break;
 800a562:	e03b      	b.n	800a5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00b      	beq.n	800a588 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a576:	695b      	ldr	r3, [r3, #20]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	7c12      	ldrb	r2, [r2, #16]
 800a57c:	f107 0108 	add.w	r1, r7, #8
 800a580:	4610      	mov	r0, r2
 800a582:	4798      	blx	r3
 800a584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a586:	e029      	b.n	800a5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fa4a 	bl	800aa24 <USBD_CtlError>
            err++;
 800a590:	7afb      	ldrb	r3, [r7, #11]
 800a592:	3301      	adds	r3, #1
 800a594:	72fb      	strb	r3, [r7, #11]
          break;
 800a596:	e021      	b.n	800a5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00b      	beq.n	800a5bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5aa:	699b      	ldr	r3, [r3, #24]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	7c12      	ldrb	r2, [r2, #16]
 800a5b0:	f107 0108 	add.w	r1, r7, #8
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	4798      	blx	r3
 800a5b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5ba:	e00f      	b.n	800a5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5bc:	6839      	ldr	r1, [r7, #0]
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fa30 	bl	800aa24 <USBD_CtlError>
            err++;
 800a5c4:	7afb      	ldrb	r3, [r7, #11]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a5ca:	e007      	b.n	800a5dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fa28 	bl	800aa24 <USBD_CtlError>
          err++;
 800a5d4:	7afb      	ldrb	r3, [r7, #11]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a5da:	bf00      	nop
      }
      break;
 800a5dc:	e037      	b.n	800a64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	7c1b      	ldrb	r3, [r3, #16]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d109      	bne.n	800a5fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ee:	f107 0208 	add.w	r2, r7, #8
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	4798      	blx	r3
 800a5f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5f8:	e029      	b.n	800a64e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fa11 	bl	800aa24 <USBD_CtlError>
        err++;
 800a602:	7afb      	ldrb	r3, [r7, #11]
 800a604:	3301      	adds	r3, #1
 800a606:	72fb      	strb	r3, [r7, #11]
      break;
 800a608:	e021      	b.n	800a64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	7c1b      	ldrb	r3, [r3, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10d      	bne.n	800a62e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61a:	f107 0208 	add.w	r2, r7, #8
 800a61e:	4610      	mov	r0, r2
 800a620:	4798      	blx	r3
 800a622:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3301      	adds	r3, #1
 800a628:	2207      	movs	r2, #7
 800a62a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a62c:	e00f      	b.n	800a64e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f9f7 	bl	800aa24 <USBD_CtlError>
        err++;
 800a636:	7afb      	ldrb	r3, [r7, #11]
 800a638:	3301      	adds	r3, #1
 800a63a:	72fb      	strb	r3, [r7, #11]
      break;
 800a63c:	e007      	b.n	800a64e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f9ef 	bl	800aa24 <USBD_CtlError>
      err++;
 800a646:	7afb      	ldrb	r3, [r7, #11]
 800a648:	3301      	adds	r3, #1
 800a64a:	72fb      	strb	r3, [r7, #11]
      break;
 800a64c:	bf00      	nop
  }

  if (err != 0U)
 800a64e:	7afb      	ldrb	r3, [r7, #11]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d11e      	bne.n	800a692 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	88db      	ldrh	r3, [r3, #6]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d016      	beq.n	800a68a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a65c:	893b      	ldrh	r3, [r7, #8]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00e      	beq.n	800a680 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	88da      	ldrh	r2, [r3, #6]
 800a666:	893b      	ldrh	r3, [r7, #8]
 800a668:	4293      	cmp	r3, r2
 800a66a:	bf28      	it	cs
 800a66c:	4613      	movcs	r3, r2
 800a66e:	b29b      	uxth	r3, r3
 800a670:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a672:	893b      	ldrh	r3, [r7, #8]
 800a674:	461a      	mov	r2, r3
 800a676:	68f9      	ldr	r1, [r7, #12]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 fa44 	bl	800ab06 <USBD_CtlSendData>
 800a67e:	e009      	b.n	800a694 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f9ce 	bl	800aa24 <USBD_CtlError>
 800a688:	e004      	b.n	800a694 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fa95 	bl	800abba <USBD_CtlSendStatus>
 800a690:	e000      	b.n	800a694 <USBD_GetDescriptor+0x2cc>
    return;
 800a692:	bf00      	nop
  }
}
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop

0800a69c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	889b      	ldrh	r3, [r3, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d131      	bne.n	800a712 <USBD_SetAddress+0x76>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	88db      	ldrh	r3, [r3, #6]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d12d      	bne.n	800a712 <USBD_SetAddress+0x76>
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	885b      	ldrh	r3, [r3, #2]
 800a6ba:	2b7f      	cmp	r3, #127	; 0x7f
 800a6bc:	d829      	bhi.n	800a712 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	885b      	ldrh	r3, [r3, #2]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d104      	bne.n	800a6e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 f9a3 	bl	800aa24 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6de:	e01d      	b.n	800a71c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	7bfa      	ldrb	r2, [r7, #15]
 800a6e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f003 fbb9 	bl	800de64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fa61 	bl	800abba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d004      	beq.n	800a708 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2202      	movs	r2, #2
 800a702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a706:	e009      	b.n	800a71c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a710:	e004      	b.n	800a71c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a712:	6839      	ldr	r1, [r7, #0]
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f985 	bl	800aa24 <USBD_CtlError>
  }
}
 800a71a:	bf00      	nop
 800a71c:	bf00      	nop
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	885b      	ldrh	r3, [r3, #2]
 800a736:	b2da      	uxtb	r2, r3
 800a738:	4b4c      	ldr	r3, [pc, #304]	; (800a86c <USBD_SetConfig+0x148>)
 800a73a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a73c:	4b4b      	ldr	r3, [pc, #300]	; (800a86c <USBD_SetConfig+0x148>)
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d905      	bls.n	800a750 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a744:	6839      	ldr	r1, [r7, #0]
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f96c 	bl	800aa24 <USBD_CtlError>
    return USBD_FAIL;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e088      	b.n	800a862 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a756:	b2db      	uxtb	r3, r3
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d002      	beq.n	800a762 <USBD_SetConfig+0x3e>
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d025      	beq.n	800a7ac <USBD_SetConfig+0x88>
 800a760:	e071      	b.n	800a846 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a762:	4b42      	ldr	r3, [pc, #264]	; (800a86c <USBD_SetConfig+0x148>)
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d01c      	beq.n	800a7a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a76a:	4b40      	ldr	r3, [pc, #256]	; (800a86c <USBD_SetConfig+0x148>)
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a774:	4b3d      	ldr	r3, [pc, #244]	; (800a86c <USBD_SetConfig+0x148>)
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	4619      	mov	r1, r3
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f7ff f93a 	bl	80099f4 <USBD_SetClassConfig>
 800a780:	4603      	mov	r3, r0
 800a782:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d004      	beq.n	800a794 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f949 	bl	800aa24 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a792:	e065      	b.n	800a860 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fa10 	bl	800abba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2203      	movs	r2, #3
 800a79e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a7a2:	e05d      	b.n	800a860 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fa08 	bl	800abba <USBD_CtlSendStatus>
      break;
 800a7aa:	e059      	b.n	800a860 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a7ac:	4b2f      	ldr	r3, [pc, #188]	; (800a86c <USBD_SetConfig+0x148>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d112      	bne.n	800a7da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a7bc:	4b2b      	ldr	r3, [pc, #172]	; (800a86c <USBD_SetConfig+0x148>)
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7c6:	4b29      	ldr	r3, [pc, #164]	; (800a86c <USBD_SetConfig+0x148>)
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff f92d 	bl	8009a2c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f9f1 	bl	800abba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7d8:	e042      	b.n	800a860 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a7da:	4b24      	ldr	r3, [pc, #144]	; (800a86c <USBD_SetConfig+0x148>)
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d02a      	beq.n	800a83e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff f91b 	bl	8009a2c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a7f6:	4b1d      	ldr	r3, [pc, #116]	; (800a86c <USBD_SetConfig+0x148>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a800:	4b1a      	ldr	r3, [pc, #104]	; (800a86c <USBD_SetConfig+0x148>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	4619      	mov	r1, r3
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7ff f8f4 	bl	80099f4 <USBD_SetClassConfig>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00f      	beq.n	800a836 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a816:	6839      	ldr	r1, [r7, #0]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f903 	bl	800aa24 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7ff f900 	bl	8009a2c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2202      	movs	r2, #2
 800a830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a834:	e014      	b.n	800a860 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f9bf 	bl	800abba <USBD_CtlSendStatus>
      break;
 800a83c:	e010      	b.n	800a860 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f9bb 	bl	800abba <USBD_CtlSendStatus>
      break;
 800a844:	e00c      	b.n	800a860 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f8eb 	bl	800aa24 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a84e:	4b07      	ldr	r3, [pc, #28]	; (800a86c <USBD_SetConfig+0x148>)
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f7ff f8e9 	bl	8009a2c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a85a:	2303      	movs	r3, #3
 800a85c:	73fb      	strb	r3, [r7, #15]
      break;
 800a85e:	bf00      	nop
  }

  return ret;
 800a860:	7bfb      	ldrb	r3, [r7, #15]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	20000d88 	.word	0x20000d88

0800a870 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	88db      	ldrh	r3, [r3, #6]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d004      	beq.n	800a88c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f8cd 	bl	800aa24 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a88a:	e023      	b.n	800a8d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b02      	cmp	r3, #2
 800a896:	dc02      	bgt.n	800a89e <USBD_GetConfig+0x2e>
 800a898:	2b00      	cmp	r3, #0
 800a89a:	dc03      	bgt.n	800a8a4 <USBD_GetConfig+0x34>
 800a89c:	e015      	b.n	800a8ca <USBD_GetConfig+0x5a>
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d00b      	beq.n	800a8ba <USBD_GetConfig+0x4a>
 800a8a2:	e012      	b.n	800a8ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3308      	adds	r3, #8
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f927 	bl	800ab06 <USBD_CtlSendData>
        break;
 800a8b8:	e00c      	b.n	800a8d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3304      	adds	r3, #4
 800a8be:	2201      	movs	r2, #1
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f91f 	bl	800ab06 <USBD_CtlSendData>
        break;
 800a8c8:	e004      	b.n	800a8d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f8a9 	bl	800aa24 <USBD_CtlError>
        break;
 800a8d2:	bf00      	nop
}
 800a8d4:	bf00      	nop
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d81e      	bhi.n	800a932 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	88db      	ldrh	r3, [r3, #6]
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d004      	beq.n	800a906 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a8fc:	6839      	ldr	r1, [r7, #0]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f890 	bl	800aa24 <USBD_CtlError>
        break;
 800a904:	e01a      	b.n	800a93c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a912:	2b00      	cmp	r3, #0
 800a914:	d005      	beq.n	800a922 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	f043 0202 	orr.w	r2, r3, #2
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	330c      	adds	r3, #12
 800a926:	2202      	movs	r2, #2
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f8eb 	bl	800ab06 <USBD_CtlSendData>
      break;
 800a930:	e004      	b.n	800a93c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f875 	bl	800aa24 <USBD_CtlError>
      break;
 800a93a:	bf00      	nop
  }
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	885b      	ldrh	r3, [r3, #2]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d106      	bne.n	800a964 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f92b 	bl	800abba <USBD_CtlSendStatus>
  }
}
 800a964:	bf00      	nop
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	3b01      	subs	r3, #1
 800a980:	2b02      	cmp	r3, #2
 800a982:	d80b      	bhi.n	800a99c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	885b      	ldrh	r3, [r3, #2]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d10c      	bne.n	800a9a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f910 	bl	800abba <USBD_CtlSendStatus>
      }
      break;
 800a99a:	e004      	b.n	800a9a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f840 	bl	800aa24 <USBD_CtlError>
      break;
 800a9a4:	e000      	b.n	800a9a8 <USBD_ClrFeature+0x3c>
      break;
 800a9a6:	bf00      	nop
  }
}
 800a9a8:	bf00      	nop
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	781a      	ldrb	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	781a      	ldrb	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f7ff faad 	bl	8009f3a <SWAPBYTE>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f7ff faa0 	bl	8009f3a <SWAPBYTE>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3301      	adds	r3, #1
 800aa06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f7ff fa93 	bl	8009f3a <SWAPBYTE>
 800aa14:	4603      	mov	r3, r0
 800aa16:	461a      	mov	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	80da      	strh	r2, [r3, #6]
}
 800aa1c:	bf00      	nop
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa2e:	2180      	movs	r1, #128	; 0x80
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f003 f9ad 	bl	800dd90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa36:	2100      	movs	r1, #0
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f003 f9a9 	bl	800dd90 <USBD_LL_StallEP>
}
 800aa3e:	bf00      	nop
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b086      	sub	sp, #24
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d036      	beq.n	800aaca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aa60:	6938      	ldr	r0, [r7, #16]
 800aa62:	f000 f836 	bl	800aad2 <USBD_GetLen>
 800aa66:	4603      	mov	r3, r0
 800aa68:	3301      	adds	r3, #1
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aa74:	7dfb      	ldrb	r3, [r7, #23]
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	4413      	add	r3, r2
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	7812      	ldrb	r2, [r2, #0]
 800aa7e:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
 800aa82:	3301      	adds	r3, #1
 800aa84:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	2203      	movs	r2, #3
 800aa8e:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa90:	7dfb      	ldrb	r3, [r7, #23]
 800aa92:	3301      	adds	r3, #1
 800aa94:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aa96:	e013      	b.n	800aac0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aa98:	7dfb      	ldrb	r3, [r7, #23]
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	7812      	ldrb	r2, [r2, #0]
 800aaa2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	613b      	str	r3, [r7, #16]
    idx++;
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	3301      	adds	r3, #1
 800aaae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aab0:	7dfb      	ldrb	r3, [r7, #23]
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	4413      	add	r3, r2
 800aab6:	2200      	movs	r2, #0
 800aab8:	701a      	strb	r2, [r3, #0]
    idx++;
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	3301      	adds	r3, #1
 800aabe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1e7      	bne.n	800aa98 <USBD_GetString+0x52>
 800aac8:	e000      	b.n	800aacc <USBD_GetString+0x86>
    return;
 800aaca:	bf00      	nop
  }
}
 800aacc:	3718      	adds	r7, #24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b085      	sub	sp, #20
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aada:	2300      	movs	r3, #0
 800aadc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aae2:	e005      	b.n	800aaf0 <USBD_GetLen+0x1e>
  {
    len++;
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	3301      	adds	r3, #1
 800aae8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	3301      	adds	r3, #1
 800aaee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1f5      	bne.n	800aae4 <USBD_GetLen+0x12>
  }

  return len;
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b084      	sub	sp, #16
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	60f8      	str	r0, [r7, #12]
 800ab0e:	60b9      	str	r1, [r7, #8]
 800ab10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2202      	movs	r2, #2
 800ab16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f003 f9b8 	bl	800dea2 <USBD_LL_Transmit>

  return USBD_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f003 f9a7 	bl	800dea2 <USBD_LL_Transmit>

  return USBD_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2203      	movs	r2, #3
 800ab6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	2100      	movs	r1, #0
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f003 f9ab 	bl	800dee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	2100      	movs	r1, #0
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f003 f99a 	bl	800dee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b082      	sub	sp, #8
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2204      	movs	r2, #4
 800abc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800abca:	2300      	movs	r3, #0
 800abcc:	2200      	movs	r2, #0
 800abce:	2100      	movs	r1, #0
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f003 f966 	bl	800dea2 <USBD_LL_Transmit>

  return USBD_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2205      	movs	r2, #5
 800abec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abf0:	2300      	movs	r3, #0
 800abf2:	2200      	movs	r2, #0
 800abf4:	2100      	movs	r1, #0
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f003 f974 	bl	800dee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
	...

0800ac08 <__NVIC_SetPriority>:
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	6039      	str	r1, [r7, #0]
 800ac12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	db0a      	blt.n	800ac32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	490c      	ldr	r1, [pc, #48]	; (800ac54 <__NVIC_SetPriority+0x4c>)
 800ac22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac26:	0112      	lsls	r2, r2, #4
 800ac28:	b2d2      	uxtb	r2, r2
 800ac2a:	440b      	add	r3, r1
 800ac2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac30:	e00a      	b.n	800ac48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	4908      	ldr	r1, [pc, #32]	; (800ac58 <__NVIC_SetPriority+0x50>)
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	f003 030f 	and.w	r3, r3, #15
 800ac3e:	3b04      	subs	r3, #4
 800ac40:	0112      	lsls	r2, r2, #4
 800ac42:	b2d2      	uxtb	r2, r2
 800ac44:	440b      	add	r3, r1
 800ac46:	761a      	strb	r2, [r3, #24]
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	e000e100 	.word	0xe000e100
 800ac58:	e000ed00 	.word	0xe000ed00

0800ac5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ac60:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <SysTick_Handler+0x1c>)
 800ac62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ac64:	f001 fcfe 	bl	800c664 <xTaskGetSchedulerState>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d001      	beq.n	800ac72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ac6e:	f002 fae3 	bl	800d238 <xPortSysTickHandler>
  }
}
 800ac72:	bf00      	nop
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	e000e010 	.word	0xe000e010

0800ac7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ac80:	2100      	movs	r1, #0
 800ac82:	f06f 0004 	mvn.w	r0, #4
 800ac86:	f7ff ffbf 	bl	800ac08 <__NVIC_SetPriority>
#endif
}
 800ac8a:	bf00      	nop
 800ac8c:	bd80      	pop	{r7, pc}
	...

0800ac90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac96:	f3ef 8305 	mrs	r3, IPSR
 800ac9a:	603b      	str	r3, [r7, #0]
  return(result);
 800ac9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aca2:	f06f 0305 	mvn.w	r3, #5
 800aca6:	607b      	str	r3, [r7, #4]
 800aca8:	e00c      	b.n	800acc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800acaa:	4b0a      	ldr	r3, [pc, #40]	; (800acd4 <osKernelInitialize+0x44>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d105      	bne.n	800acbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800acb2:	4b08      	ldr	r3, [pc, #32]	; (800acd4 <osKernelInitialize+0x44>)
 800acb4:	2201      	movs	r2, #1
 800acb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800acb8:	2300      	movs	r3, #0
 800acba:	607b      	str	r3, [r7, #4]
 800acbc:	e002      	b.n	800acc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800acbe:	f04f 33ff 	mov.w	r3, #4294967295
 800acc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800acc4:	687b      	ldr	r3, [r7, #4]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	20000d8c 	.word	0x20000d8c

0800acd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acde:	f3ef 8305 	mrs	r3, IPSR
 800ace2:	603b      	str	r3, [r7, #0]
  return(result);
 800ace4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800acea:	f06f 0305 	mvn.w	r3, #5
 800acee:	607b      	str	r3, [r7, #4]
 800acf0:	e010      	b.n	800ad14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800acf2:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <osKernelStart+0x48>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d109      	bne.n	800ad0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800acfa:	f7ff ffbf 	bl	800ac7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800acfe:	4b08      	ldr	r3, [pc, #32]	; (800ad20 <osKernelStart+0x48>)
 800ad00:	2202      	movs	r2, #2
 800ad02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad04:	f001 f866 	bl	800bdd4 <vTaskStartScheduler>
      stat = osOK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	607b      	str	r3, [r7, #4]
 800ad0c:	e002      	b.n	800ad14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ad0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad14:	687b      	ldr	r3, [r7, #4]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20000d8c 	.word	0x20000d8c

0800ad24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08e      	sub	sp, #56	; 0x38
 800ad28:	af04      	add	r7, sp, #16
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad30:	2300      	movs	r3, #0
 800ad32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad34:	f3ef 8305 	mrs	r3, IPSR
 800ad38:	617b      	str	r3, [r7, #20]
  return(result);
 800ad3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d17e      	bne.n	800ae3e <osThreadNew+0x11a>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d07b      	beq.n	800ae3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ad46:	2380      	movs	r3, #128	; 0x80
 800ad48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ad4a:	2318      	movs	r3, #24
 800ad4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ad52:	f04f 33ff 	mov.w	r3, #4294967295
 800ad56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d045      	beq.n	800adea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d002      	beq.n	800ad6c <osThreadNew+0x48>
        name = attr->name;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	699b      	ldr	r3, [r3, #24]
 800ad78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d008      	beq.n	800ad92 <osThreadNew+0x6e>
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	2b38      	cmp	r3, #56	; 0x38
 800ad84:	d805      	bhi.n	800ad92 <osThreadNew+0x6e>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <osThreadNew+0x72>
        return (NULL);
 800ad92:	2300      	movs	r3, #0
 800ad94:	e054      	b.n	800ae40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	695b      	ldr	r3, [r3, #20]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	695b      	ldr	r3, [r3, #20]
 800ada2:	089b      	lsrs	r3, r3, #2
 800ada4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00e      	beq.n	800adcc <osThreadNew+0xa8>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	2b5b      	cmp	r3, #91	; 0x5b
 800adb4:	d90a      	bls.n	800adcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d006      	beq.n	800adcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d002      	beq.n	800adcc <osThreadNew+0xa8>
        mem = 1;
 800adc6:	2301      	movs	r3, #1
 800adc8:	61bb      	str	r3, [r7, #24]
 800adca:	e010      	b.n	800adee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10c      	bne.n	800adee <osThreadNew+0xca>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d108      	bne.n	800adee <osThreadNew+0xca>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d104      	bne.n	800adee <osThreadNew+0xca>
          mem = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	61bb      	str	r3, [r7, #24]
 800ade8:	e001      	b.n	800adee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d110      	bne.n	800ae16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800adfc:	9202      	str	r2, [sp, #8]
 800adfe:	9301      	str	r3, [sp, #4]
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	6a3a      	ldr	r2, [r7, #32]
 800ae08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 fe0c 	bl	800ba28 <xTaskCreateStatic>
 800ae10:	4603      	mov	r3, r0
 800ae12:	613b      	str	r3, [r7, #16]
 800ae14:	e013      	b.n	800ae3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d110      	bne.n	800ae3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	f107 0310 	add.w	r3, r7, #16
 800ae24:	9301      	str	r3, [sp, #4]
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f000 fe57 	bl	800bae2 <xTaskCreate>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d001      	beq.n	800ae3e <osThreadNew+0x11a>
            hTask = NULL;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ae3e:	693b      	ldr	r3, [r7, #16]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3728      	adds	r7, #40	; 0x28
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae50:	f3ef 8305 	mrs	r3, IPSR
 800ae54:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d003      	beq.n	800ae64 <osDelay+0x1c>
    stat = osErrorISR;
 800ae5c:	f06f 0305 	mvn.w	r3, #5
 800ae60:	60fb      	str	r3, [r7, #12]
 800ae62:	e007      	b.n	800ae74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d002      	beq.n	800ae74 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 ff7c 	bl	800bd6c <vTaskDelay>
    }
  }

  return (stat);
 800ae74:	68fb      	ldr	r3, [r7, #12]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
	...

0800ae80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	4a07      	ldr	r2, [pc, #28]	; (800aeac <vApplicationGetIdleTaskMemory+0x2c>)
 800ae90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	4a06      	ldr	r2, [pc, #24]	; (800aeb0 <vApplicationGetIdleTaskMemory+0x30>)
 800ae96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2280      	movs	r2, #128	; 0x80
 800ae9c:	601a      	str	r2, [r3, #0]
}
 800ae9e:	bf00      	nop
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	20000d90 	.word	0x20000d90
 800aeb0:	20000dec 	.word	0x20000dec

0800aeb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4a07      	ldr	r2, [pc, #28]	; (800aee0 <vApplicationGetTimerTaskMemory+0x2c>)
 800aec4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	4a06      	ldr	r2, [pc, #24]	; (800aee4 <vApplicationGetTimerTaskMemory+0x30>)
 800aeca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aed2:	601a      	str	r2, [r3, #0]
}
 800aed4:	bf00      	nop
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	20000fec 	.word	0x20000fec
 800aee4:	20001048 	.word	0x20001048

0800aee8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f103 0208 	add.w	r2, r3, #8
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f04f 32ff 	mov.w	r2, #4294967295
 800af00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f103 0208 	add.w	r2, r3, #8
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f103 0208 	add.w	r2, r3, #8
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af36:	bf00      	nop
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af42:	b480      	push	{r7}
 800af44:	b085      	sub	sp, #20
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	601a      	str	r2, [r3, #0]
}
 800af7e:	bf00      	nop
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af8a:	b480      	push	{r7}
 800af8c:	b085      	sub	sp, #20
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa0:	d103      	bne.n	800afaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	e00c      	b.n	800afc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	3308      	adds	r3, #8
 800afae:	60fb      	str	r3, [r7, #12]
 800afb0:	e002      	b.n	800afb8 <vListInsert+0x2e>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d2f6      	bcs.n	800afb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	601a      	str	r2, [r3, #0]
}
 800aff0:	bf00      	nop
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	6892      	ldr	r2, [r2, #8]
 800b012:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	6852      	ldr	r2, [r2, #4]
 800b01c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	d103      	bne.n	800b030 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	1e5a      	subs	r2, r3, #1
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10a      	bne.n	800b07a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b076:	bf00      	nop
 800b078:	e7fe      	b.n	800b078 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b07a:	f002 f84b 	bl	800d114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b086:	68f9      	ldr	r1, [r7, #12]
 800b088:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b08a:	fb01 f303 	mul.w	r3, r1, r3
 800b08e:	441a      	add	r2, r3
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	68f9      	ldr	r1, [r7, #12]
 800b0ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b0b0:	fb01 f303 	mul.w	r3, r1, r3
 800b0b4:	441a      	add	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	22ff      	movs	r2, #255	; 0xff
 800b0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	22ff      	movs	r2, #255	; 0xff
 800b0c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d114      	bne.n	800b0fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d01a      	beq.n	800b10e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	3310      	adds	r3, #16
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f001 f903 	bl	800c2e8 <xTaskRemoveFromEventList>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d012      	beq.n	800b10e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b0e8:	4b0c      	ldr	r3, [pc, #48]	; (800b11c <xQueueGenericReset+0xcc>)
 800b0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	e009      	b.n	800b10e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3310      	adds	r3, #16
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff fef2 	bl	800aee8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	3324      	adds	r3, #36	; 0x24
 800b108:	4618      	mov	r0, r3
 800b10a:	f7ff feed 	bl	800aee8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b10e:	f002 f831 	bl	800d174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b112:	2301      	movs	r3, #1
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	e000ed04 	.word	0xe000ed04

0800b120 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08e      	sub	sp, #56	; 0x38
 800b124:	af02      	add	r7, sp, #8
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10a      	bne.n	800b14a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b146:	bf00      	nop
 800b148:	e7fe      	b.n	800b148 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10a      	bne.n	800b166 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <xQueueGenericCreateStatic+0x52>
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <xQueueGenericCreateStatic+0x56>
 800b172:	2301      	movs	r3, #1
 800b174:	e000      	b.n	800b178 <xQueueGenericCreateStatic+0x58>
 800b176:	2300      	movs	r3, #0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10a      	bne.n	800b192 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b180:	f383 8811 	msr	BASEPRI, r3
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	623b      	str	r3, [r7, #32]
}
 800b18e:	bf00      	nop
 800b190:	e7fe      	b.n	800b190 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d102      	bne.n	800b19e <xQueueGenericCreateStatic+0x7e>
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <xQueueGenericCreateStatic+0x82>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e000      	b.n	800b1a4 <xQueueGenericCreateStatic+0x84>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10a      	bne.n	800b1be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ac:	f383 8811 	msr	BASEPRI, r3
 800b1b0:	f3bf 8f6f 	isb	sy
 800b1b4:	f3bf 8f4f 	dsb	sy
 800b1b8:	61fb      	str	r3, [r7, #28]
}
 800b1ba:	bf00      	nop
 800b1bc:	e7fe      	b.n	800b1bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b1be:	2350      	movs	r3, #80	; 0x50
 800b1c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	2b50      	cmp	r3, #80	; 0x50
 800b1c6:	d00a      	beq.n	800b1de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1cc:	f383 8811 	msr	BASEPRI, r3
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	61bb      	str	r3, [r7, #24]
}
 800b1da:	bf00      	nop
 800b1dc:	e7fe      	b.n	800b1dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b1de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00d      	beq.n	800b206 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 f805 	bl	800b210 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b208:	4618      	mov	r0, r3
 800b20a:	3730      	adds	r7, #48	; 0x30
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
 800b21c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d103      	bne.n	800b22c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	e002      	b.n	800b232 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b23e:	2101      	movs	r1, #1
 800b240:	69b8      	ldr	r0, [r7, #24]
 800b242:	f7ff ff05 	bl	800b050 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	78fa      	ldrb	r2, [r7, #3]
 800b24a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b24e:	bf00      	nop
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
	...

0800b258 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08e      	sub	sp, #56	; 0x38
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
 800b264:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b266:	2300      	movs	r3, #0
 800b268:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10a      	bne.n	800b28a <xQueueGenericSend+0x32>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b286:	bf00      	nop
 800b288:	e7fe      	b.n	800b288 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d103      	bne.n	800b298 <xQueueGenericSend+0x40>
 800b290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <xQueueGenericSend+0x44>
 800b298:	2301      	movs	r3, #1
 800b29a:	e000      	b.n	800b29e <xQueueGenericSend+0x46>
 800b29c:	2300      	movs	r3, #0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10a      	bne.n	800b2b8 <xQueueGenericSend+0x60>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2b4:	bf00      	nop
 800b2b6:	e7fe      	b.n	800b2b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d103      	bne.n	800b2c6 <xQueueGenericSend+0x6e>
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d101      	bne.n	800b2ca <xQueueGenericSend+0x72>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e000      	b.n	800b2cc <xQueueGenericSend+0x74>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10a      	bne.n	800b2e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	623b      	str	r3, [r7, #32]
}
 800b2e2:	bf00      	nop
 800b2e4:	e7fe      	b.n	800b2e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2e6:	f001 f9bd 	bl	800c664 <xTaskGetSchedulerState>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d102      	bne.n	800b2f6 <xQueueGenericSend+0x9e>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <xQueueGenericSend+0xa2>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e000      	b.n	800b2fc <xQueueGenericSend+0xa4>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d10a      	bne.n	800b316 <xQueueGenericSend+0xbe>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	61fb      	str	r3, [r7, #28]
}
 800b312:	bf00      	nop
 800b314:	e7fe      	b.n	800b314 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b316:	f001 fefd 	bl	800d114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b322:	429a      	cmp	r2, r3
 800b324:	d302      	bcc.n	800b32c <xQueueGenericSend+0xd4>
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d129      	bne.n	800b380 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	68b9      	ldr	r1, [r7, #8]
 800b330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b332:	f000 fa0b 	bl	800b74c <prvCopyDataToQueue>
 800b336:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d010      	beq.n	800b362 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	3324      	adds	r3, #36	; 0x24
 800b344:	4618      	mov	r0, r3
 800b346:	f000 ffcf 	bl	800c2e8 <xTaskRemoveFromEventList>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d013      	beq.n	800b378 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b350:	4b3f      	ldr	r3, [pc, #252]	; (800b450 <xQueueGenericSend+0x1f8>)
 800b352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	e00a      	b.n	800b378 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b364:	2b00      	cmp	r3, #0
 800b366:	d007      	beq.n	800b378 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b368:	4b39      	ldr	r3, [pc, #228]	; (800b450 <xQueueGenericSend+0x1f8>)
 800b36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b36e:	601a      	str	r2, [r3, #0]
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b378:	f001 fefc 	bl	800d174 <vPortExitCritical>
				return pdPASS;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e063      	b.n	800b448 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d103      	bne.n	800b38e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b386:	f001 fef5 	bl	800d174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b38a:	2300      	movs	r3, #0
 800b38c:	e05c      	b.n	800b448 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b390:	2b00      	cmp	r3, #0
 800b392:	d106      	bne.n	800b3a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b394:	f107 0314 	add.w	r3, r7, #20
 800b398:	4618      	mov	r0, r3
 800b39a:	f001 f809 	bl	800c3b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3a2:	f001 fee7 	bl	800d174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3a6:	f000 fd7b 	bl	800bea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3aa:	f001 feb3 	bl	800d114 <vPortEnterCritical>
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3b4:	b25b      	sxtb	r3, r3
 800b3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ba:	d103      	bne.n	800b3c4 <xQueueGenericSend+0x16c>
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3ca:	b25b      	sxtb	r3, r3
 800b3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d0:	d103      	bne.n	800b3da <xQueueGenericSend+0x182>
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3da:	f001 fecb 	bl	800d174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3de:	1d3a      	adds	r2, r7, #4
 800b3e0:	f107 0314 	add.w	r3, r7, #20
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f000 fff8 	bl	800c3dc <xTaskCheckForTimeOut>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d124      	bne.n	800b43c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b3f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3f4:	f000 faa2 	bl	800b93c <prvIsQueueFull>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d018      	beq.n	800b430 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b400:	3310      	adds	r3, #16
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	4611      	mov	r1, r2
 800b406:	4618      	mov	r0, r3
 800b408:	f000 ff1e 	bl	800c248 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b40c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b40e:	f000 fa2d 	bl	800b86c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b412:	f000 fd53 	bl	800bebc <xTaskResumeAll>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f47f af7c 	bne.w	800b316 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b41e:	4b0c      	ldr	r3, [pc, #48]	; (800b450 <xQueueGenericSend+0x1f8>)
 800b420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b424:	601a      	str	r2, [r3, #0]
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	e772      	b.n	800b316 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b432:	f000 fa1b 	bl	800b86c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b436:	f000 fd41 	bl	800bebc <xTaskResumeAll>
 800b43a:	e76c      	b.n	800b316 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b43c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b43e:	f000 fa15 	bl	800b86c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b442:	f000 fd3b 	bl	800bebc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b446:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3738      	adds	r7, #56	; 0x38
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	e000ed04 	.word	0xe000ed04

0800b454 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b090      	sub	sp, #64	; 0x40
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
 800b460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10a      	bne.n	800b482 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b47e:	bf00      	nop
 800b480:	e7fe      	b.n	800b480 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d103      	bne.n	800b490 <xQueueGenericSendFromISR+0x3c>
 800b488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d101      	bne.n	800b494 <xQueueGenericSendFromISR+0x40>
 800b490:	2301      	movs	r3, #1
 800b492:	e000      	b.n	800b496 <xQueueGenericSendFromISR+0x42>
 800b494:	2300      	movs	r3, #0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10a      	bne.n	800b4b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4ac:	bf00      	nop
 800b4ae:	e7fe      	b.n	800b4ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	d103      	bne.n	800b4be <xQueueGenericSendFromISR+0x6a>
 800b4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d101      	bne.n	800b4c2 <xQueueGenericSendFromISR+0x6e>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e000      	b.n	800b4c4 <xQueueGenericSendFromISR+0x70>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10a      	bne.n	800b4de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	623b      	str	r3, [r7, #32]
}
 800b4da:	bf00      	nop
 800b4dc:	e7fe      	b.n	800b4dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4de:	f001 fefb 	bl	800d2d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b4e2:	f3ef 8211 	mrs	r2, BASEPRI
 800b4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	61fa      	str	r2, [r7, #28]
 800b4f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b4fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b506:	429a      	cmp	r2, r3
 800b508:	d302      	bcc.n	800b510 <xQueueGenericSendFromISR+0xbc>
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d12f      	bne.n	800b570 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	68b9      	ldr	r1, [r7, #8]
 800b524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b526:	f000 f911 	bl	800b74c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b52a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b532:	d112      	bne.n	800b55a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d016      	beq.n	800b56a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53e:	3324      	adds	r3, #36	; 0x24
 800b540:	4618      	mov	r0, r3
 800b542:	f000 fed1 	bl	800c2e8 <xTaskRemoveFromEventList>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00e      	beq.n	800b56a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00b      	beq.n	800b56a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2201      	movs	r2, #1
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	e007      	b.n	800b56a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b55a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b55e:	3301      	adds	r3, #1
 800b560:	b2db      	uxtb	r3, r3
 800b562:	b25a      	sxtb	r2, r3
 800b564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b56a:	2301      	movs	r3, #1
 800b56c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b56e:	e001      	b.n	800b574 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b570:	2300      	movs	r3, #0
 800b572:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b576:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b57e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b582:	4618      	mov	r0, r3
 800b584:	3740      	adds	r7, #64	; 0x40
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
	...

0800b58c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b08c      	sub	sp, #48	; 0x30
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b598:	2300      	movs	r3, #0
 800b59a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10a      	bne.n	800b5bc <xQueueReceive+0x30>
	__asm volatile
 800b5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	623b      	str	r3, [r7, #32]
}
 800b5b8:	bf00      	nop
 800b5ba:	e7fe      	b.n	800b5ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d103      	bne.n	800b5ca <xQueueReceive+0x3e>
 800b5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <xQueueReceive+0x42>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e000      	b.n	800b5d0 <xQueueReceive+0x44>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10a      	bne.n	800b5ea <xQueueReceive+0x5e>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	61fb      	str	r3, [r7, #28]
}
 800b5e6:	bf00      	nop
 800b5e8:	e7fe      	b.n	800b5e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5ea:	f001 f83b 	bl	800c664 <xTaskGetSchedulerState>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d102      	bne.n	800b5fa <xQueueReceive+0x6e>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d101      	bne.n	800b5fe <xQueueReceive+0x72>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e000      	b.n	800b600 <xQueueReceive+0x74>
 800b5fe:	2300      	movs	r3, #0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10a      	bne.n	800b61a <xQueueReceive+0x8e>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	61bb      	str	r3, [r7, #24]
}
 800b616:	bf00      	nop
 800b618:	e7fe      	b.n	800b618 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b61a:	f001 fd7b 	bl	800d114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b622:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b626:	2b00      	cmp	r3, #0
 800b628:	d01f      	beq.n	800b66a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b62a:	68b9      	ldr	r1, [r7, #8]
 800b62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b62e:	f000 f8f7 	bl	800b820 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b634:	1e5a      	subs	r2, r3, #1
 800b636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b638:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00f      	beq.n	800b662 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b644:	3310      	adds	r3, #16
 800b646:	4618      	mov	r0, r3
 800b648:	f000 fe4e 	bl	800c2e8 <xTaskRemoveFromEventList>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d007      	beq.n	800b662 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b652:	4b3d      	ldr	r3, [pc, #244]	; (800b748 <xQueueReceive+0x1bc>)
 800b654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b662:	f001 fd87 	bl	800d174 <vPortExitCritical>
				return pdPASS;
 800b666:	2301      	movs	r3, #1
 800b668:	e069      	b.n	800b73e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d103      	bne.n	800b678 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b670:	f001 fd80 	bl	800d174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b674:	2300      	movs	r3, #0
 800b676:	e062      	b.n	800b73e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d106      	bne.n	800b68c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b67e:	f107 0310 	add.w	r3, r7, #16
 800b682:	4618      	mov	r0, r3
 800b684:	f000 fe94 	bl	800c3b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b688:	2301      	movs	r3, #1
 800b68a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b68c:	f001 fd72 	bl	800d174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b690:	f000 fc06 	bl	800bea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b694:	f001 fd3e 	bl	800d114 <vPortEnterCritical>
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b69e:	b25b      	sxtb	r3, r3
 800b6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a4:	d103      	bne.n	800b6ae <xQueueReceive+0x122>
 800b6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6b4:	b25b      	sxtb	r3, r3
 800b6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ba:	d103      	bne.n	800b6c4 <xQueueReceive+0x138>
 800b6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6c4:	f001 fd56 	bl	800d174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6c8:	1d3a      	adds	r2, r7, #4
 800b6ca:	f107 0310 	add.w	r3, r7, #16
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 fe83 	bl	800c3dc <xTaskCheckForTimeOut>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d123      	bne.n	800b724 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6de:	f000 f917 	bl	800b910 <prvIsQueueEmpty>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d017      	beq.n	800b718 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ea:	3324      	adds	r3, #36	; 0x24
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	4611      	mov	r1, r2
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fda9 	bl	800c248 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b6f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6f8:	f000 f8b8 	bl	800b86c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b6fc:	f000 fbde 	bl	800bebc <xTaskResumeAll>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d189      	bne.n	800b61a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b706:	4b10      	ldr	r3, [pc, #64]	; (800b748 <xQueueReceive+0x1bc>)
 800b708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	e780      	b.n	800b61a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b71a:	f000 f8a7 	bl	800b86c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b71e:	f000 fbcd 	bl	800bebc <xTaskResumeAll>
 800b722:	e77a      	b.n	800b61a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b726:	f000 f8a1 	bl	800b86c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b72a:	f000 fbc7 	bl	800bebc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b72e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b730:	f000 f8ee 	bl	800b910 <prvIsQueueEmpty>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	f43f af6f 	beq.w	800b61a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b73c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3730      	adds	r7, #48	; 0x30
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	e000ed04 	.word	0xe000ed04

0800b74c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b758:	2300      	movs	r3, #0
 800b75a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b760:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10d      	bne.n	800b786 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d14d      	bne.n	800b80e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	4618      	mov	r0, r3
 800b778:	f000 ff92 	bl	800c6a0 <xTaskPriorityDisinherit>
 800b77c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2200      	movs	r2, #0
 800b782:	609a      	str	r2, [r3, #8]
 800b784:	e043      	b.n	800b80e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d119      	bne.n	800b7c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6858      	ldr	r0, [r3, #4]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b794:	461a      	mov	r2, r3
 800b796:	68b9      	ldr	r1, [r7, #8]
 800b798:	f009 ff38 	bl	801560c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a4:	441a      	add	r2, r3
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d32b      	bcc.n	800b80e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	605a      	str	r2, [r3, #4]
 800b7be:	e026      	b.n	800b80e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	68d8      	ldr	r0, [r3, #12]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	68b9      	ldr	r1, [r7, #8]
 800b7cc:	f009 ff1e 	bl	801560c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	68da      	ldr	r2, [r3, #12]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d8:	425b      	negs	r3, r3
 800b7da:	441a      	add	r2, r3
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	68da      	ldr	r2, [r3, #12]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d207      	bcs.n	800b7fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	689a      	ldr	r2, [r3, #8]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f4:	425b      	negs	r3, r3
 800b7f6:	441a      	add	r2, r3
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d105      	bne.n	800b80e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d002      	beq.n	800b80e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	3b01      	subs	r3, #1
 800b80c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	1c5a      	adds	r2, r3, #1
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b816:	697b      	ldr	r3, [r7, #20]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d018      	beq.n	800b864 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	68da      	ldr	r2, [r3, #12]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83a:	441a      	add	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	68da      	ldr	r2, [r3, #12]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d303      	bcc.n	800b854 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	68d9      	ldr	r1, [r3, #12]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b85c:	461a      	mov	r2, r3
 800b85e:	6838      	ldr	r0, [r7, #0]
 800b860:	f009 fed4 	bl	801560c <memcpy>
	}
}
 800b864:	bf00      	nop
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b874:	f001 fc4e 	bl	800d114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b87e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b880:	e011      	b.n	800b8a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b886:	2b00      	cmp	r3, #0
 800b888:	d012      	beq.n	800b8b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	3324      	adds	r3, #36	; 0x24
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 fd2a 	bl	800c2e8 <xTaskRemoveFromEventList>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d001      	beq.n	800b89e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b89a:	f000 fe01 	bl	800c4a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b89e:	7bfb      	ldrb	r3, [r7, #15]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	dce9      	bgt.n	800b882 <prvUnlockQueue+0x16>
 800b8ae:	e000      	b.n	800b8b2 <prvUnlockQueue+0x46>
					break;
 800b8b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	22ff      	movs	r2, #255	; 0xff
 800b8b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b8ba:	f001 fc5b 	bl	800d174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b8be:	f001 fc29 	bl	800d114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b8ca:	e011      	b.n	800b8f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d012      	beq.n	800b8fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3310      	adds	r3, #16
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 fd05 	bl	800c2e8 <xTaskRemoveFromEventList>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b8e4:	f000 fddc 	bl	800c4a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b8f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	dce9      	bgt.n	800b8cc <prvUnlockQueue+0x60>
 800b8f8:	e000      	b.n	800b8fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b8fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	22ff      	movs	r2, #255	; 0xff
 800b900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b904:	f001 fc36 	bl	800d174 <vPortExitCritical>
}
 800b908:	bf00      	nop
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b918:	f001 fbfc 	bl	800d114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b920:	2b00      	cmp	r3, #0
 800b922:	d102      	bne.n	800b92a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b924:	2301      	movs	r3, #1
 800b926:	60fb      	str	r3, [r7, #12]
 800b928:	e001      	b.n	800b92e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b92e:	f001 fc21 	bl	800d174 <vPortExitCritical>

	return xReturn;
 800b932:	68fb      	ldr	r3, [r7, #12]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b944:	f001 fbe6 	bl	800d114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b950:	429a      	cmp	r2, r3
 800b952:	d102      	bne.n	800b95a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b954:	2301      	movs	r3, #1
 800b956:	60fb      	str	r3, [r7, #12]
 800b958:	e001      	b.n	800b95e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b95a:	2300      	movs	r3, #0
 800b95c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b95e:	f001 fc09 	bl	800d174 <vPortExitCritical>

	return xReturn;
 800b962:	68fb      	ldr	r3, [r7, #12]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b976:	2300      	movs	r3, #0
 800b978:	60fb      	str	r3, [r7, #12]
 800b97a:	e014      	b.n	800b9a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b97c:	4a0f      	ldr	r2, [pc, #60]	; (800b9bc <vQueueAddToRegistry+0x50>)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10b      	bne.n	800b9a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b988:	490c      	ldr	r1, [pc, #48]	; (800b9bc <vQueueAddToRegistry+0x50>)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b992:	4a0a      	ldr	r2, [pc, #40]	; (800b9bc <vQueueAddToRegistry+0x50>)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	00db      	lsls	r3, r3, #3
 800b998:	4413      	add	r3, r2
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b99e:	e006      	b.n	800b9ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	60fb      	str	r3, [r7, #12]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b07      	cmp	r3, #7
 800b9aa:	d9e7      	bls.n	800b97c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b9ac:	bf00      	nop
 800b9ae:	bf00      	nop
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	20005728 	.word	0x20005728

0800b9c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b9d0:	f001 fba0 	bl	800d114 <vPortEnterCritical>
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9da:	b25b      	sxtb	r3, r3
 800b9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e0:	d103      	bne.n	800b9ea <vQueueWaitForMessageRestricted+0x2a>
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9f0:	b25b      	sxtb	r3, r3
 800b9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f6:	d103      	bne.n	800ba00 <vQueueWaitForMessageRestricted+0x40>
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba00:	f001 fbb8 	bl	800d174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d106      	bne.n	800ba1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	3324      	adds	r3, #36	; 0x24
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	68b9      	ldr	r1, [r7, #8]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f000 fc3b 	bl	800c290 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ba1a:	6978      	ldr	r0, [r7, #20]
 800ba1c:	f7ff ff26 	bl	800b86c <prvUnlockQueue>
	}
 800ba20:	bf00      	nop
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b08e      	sub	sp, #56	; 0x38
 800ba2c:	af04      	add	r7, sp, #16
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
 800ba34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ba36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10a      	bne.n	800ba52 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ba3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba40:	f383 8811 	msr	BASEPRI, r3
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	623b      	str	r3, [r7, #32]
}
 800ba4e:	bf00      	nop
 800ba50:	e7fe      	b.n	800ba50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ba52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10a      	bne.n	800ba6e <xTaskCreateStatic+0x46>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	61fb      	str	r3, [r7, #28]
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ba6e:	235c      	movs	r3, #92	; 0x5c
 800ba70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	2b5c      	cmp	r3, #92	; 0x5c
 800ba76:	d00a      	beq.n	800ba8e <xTaskCreateStatic+0x66>
	__asm volatile
 800ba78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7c:	f383 8811 	msr	BASEPRI, r3
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	61bb      	str	r3, [r7, #24]
}
 800ba8a:	bf00      	nop
 800ba8c:	e7fe      	b.n	800ba8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ba8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ba90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d01e      	beq.n	800bad4 <xTaskCreateStatic+0xac>
 800ba96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d01b      	beq.n	800bad4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baa4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800baa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa8:	2202      	movs	r2, #2
 800baaa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800baae:	2300      	movs	r3, #0
 800bab0:	9303      	str	r3, [sp, #12]
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	9302      	str	r3, [sp, #8]
 800bab6:	f107 0314 	add.w	r3, r7, #20
 800baba:	9301      	str	r3, [sp, #4]
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	68b9      	ldr	r1, [r7, #8]
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f000 f850 	bl	800bb6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bacc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bace:	f000 f8dd 	bl	800bc8c <prvAddNewTaskToReadyList>
 800bad2:	e001      	b.n	800bad8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bad4:	2300      	movs	r3, #0
 800bad6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bad8:	697b      	ldr	r3, [r7, #20]
	}
 800bada:	4618      	mov	r0, r3
 800badc:	3728      	adds	r7, #40	; 0x28
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b08c      	sub	sp, #48	; 0x30
 800bae6:	af04      	add	r7, sp, #16
 800bae8:	60f8      	str	r0, [r7, #12]
 800baea:	60b9      	str	r1, [r7, #8]
 800baec:	603b      	str	r3, [r7, #0]
 800baee:	4613      	mov	r3, r2
 800baf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800baf2:	88fb      	ldrh	r3, [r7, #6]
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4618      	mov	r0, r3
 800baf8:	f001 fc2e 	bl	800d358 <pvPortMalloc>
 800bafc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00e      	beq.n	800bb22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bb04:	205c      	movs	r0, #92	; 0x5c
 800bb06:	f001 fc27 	bl	800d358 <pvPortMalloc>
 800bb0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d003      	beq.n	800bb1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	631a      	str	r2, [r3, #48]	; 0x30
 800bb18:	e005      	b.n	800bb26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bb1a:	6978      	ldr	r0, [r7, #20]
 800bb1c:	f001 fce8 	bl	800d4f0 <vPortFree>
 800bb20:	e001      	b.n	800bb26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d017      	beq.n	800bb5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bb34:	88fa      	ldrh	r2, [r7, #6]
 800bb36:	2300      	movs	r3, #0
 800bb38:	9303      	str	r3, [sp, #12]
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	9302      	str	r3, [sp, #8]
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	9301      	str	r3, [sp, #4]
 800bb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	68b9      	ldr	r1, [r7, #8]
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f000 f80e 	bl	800bb6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb50:	69f8      	ldr	r0, [r7, #28]
 800bb52:	f000 f89b 	bl	800bc8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bb56:	2301      	movs	r3, #1
 800bb58:	61bb      	str	r3, [r7, #24]
 800bb5a:	e002      	b.n	800bb62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bb5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bb62:	69bb      	ldr	r3, [r7, #24]
	}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3720      	adds	r7, #32
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
 800bb78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	461a      	mov	r2, r3
 800bb84:	21a5      	movs	r1, #165	; 0xa5
 800bb86:	f009 fd4f 	bl	8015628 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bb94:	3b01      	subs	r3, #1
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	f023 0307 	bic.w	r3, r3, #7
 800bba2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	f003 0307 	and.w	r3, r3, #7
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00a      	beq.n	800bbc4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	617b      	str	r3, [r7, #20]
}
 800bbc0:	bf00      	nop
 800bbc2:	e7fe      	b.n	800bbc2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d01f      	beq.n	800bc0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbca:	2300      	movs	r3, #0
 800bbcc:	61fb      	str	r3, [r7, #28]
 800bbce:	e012      	b.n	800bbf6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	7819      	ldrb	r1, [r3, #0]
 800bbd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	4413      	add	r3, r2
 800bbde:	3334      	adds	r3, #52	; 0x34
 800bbe0:	460a      	mov	r2, r1
 800bbe2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	4413      	add	r3, r2
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d006      	beq.n	800bbfe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	61fb      	str	r3, [r7, #28]
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	2b0f      	cmp	r3, #15
 800bbfa:	d9e9      	bls.n	800bbd0 <prvInitialiseNewTask+0x64>
 800bbfc:	e000      	b.n	800bc00 <prvInitialiseNewTask+0x94>
			{
				break;
 800bbfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc08:	e003      	b.n	800bc12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	2b37      	cmp	r3, #55	; 0x37
 800bc16:	d901      	bls.n	800bc1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bc18:	2337      	movs	r3, #55	; 0x37
 800bc1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc30:	3304      	adds	r3, #4
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7ff f978 	bl	800af28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	3318      	adds	r3, #24
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff f973 	bl	800af28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	68f9      	ldr	r1, [r7, #12]
 800bc6a:	69b8      	ldr	r0, [r7, #24]
 800bc6c:	f001 f928 	bl	800cec0 <pxPortInitialiseStack>
 800bc70:	4602      	mov	r2, r0
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc82:	bf00      	nop
 800bc84:	3720      	adds	r7, #32
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
	...

0800bc8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bc94:	f001 fa3e 	bl	800d114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bc98:	4b2d      	ldr	r3, [pc, #180]	; (800bd50 <prvAddNewTaskToReadyList+0xc4>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	4a2c      	ldr	r2, [pc, #176]	; (800bd50 <prvAddNewTaskToReadyList+0xc4>)
 800bca0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bca2:	4b2c      	ldr	r3, [pc, #176]	; (800bd54 <prvAddNewTaskToReadyList+0xc8>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d109      	bne.n	800bcbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bcaa:	4a2a      	ldr	r2, [pc, #168]	; (800bd54 <prvAddNewTaskToReadyList+0xc8>)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bcb0:	4b27      	ldr	r3, [pc, #156]	; (800bd50 <prvAddNewTaskToReadyList+0xc4>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d110      	bne.n	800bcda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bcb8:	f000 fc16 	bl	800c4e8 <prvInitialiseTaskLists>
 800bcbc:	e00d      	b.n	800bcda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bcbe:	4b26      	ldr	r3, [pc, #152]	; (800bd58 <prvAddNewTaskToReadyList+0xcc>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d109      	bne.n	800bcda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bcc6:	4b23      	ldr	r3, [pc, #140]	; (800bd54 <prvAddNewTaskToReadyList+0xc8>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d802      	bhi.n	800bcda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bcd4:	4a1f      	ldr	r2, [pc, #124]	; (800bd54 <prvAddNewTaskToReadyList+0xc8>)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bcda:	4b20      	ldr	r3, [pc, #128]	; (800bd5c <prvAddNewTaskToReadyList+0xd0>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	3301      	adds	r3, #1
 800bce0:	4a1e      	ldr	r2, [pc, #120]	; (800bd5c <prvAddNewTaskToReadyList+0xd0>)
 800bce2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bce4:	4b1d      	ldr	r3, [pc, #116]	; (800bd5c <prvAddNewTaskToReadyList+0xd0>)
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf0:	4b1b      	ldr	r3, [pc, #108]	; (800bd60 <prvAddNewTaskToReadyList+0xd4>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d903      	bls.n	800bd00 <prvAddNewTaskToReadyList+0x74>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfc:	4a18      	ldr	r2, [pc, #96]	; (800bd60 <prvAddNewTaskToReadyList+0xd4>)
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd04:	4613      	mov	r3, r2
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	4413      	add	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4a15      	ldr	r2, [pc, #84]	; (800bd64 <prvAddNewTaskToReadyList+0xd8>)
 800bd0e:	441a      	add	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	3304      	adds	r3, #4
 800bd14:	4619      	mov	r1, r3
 800bd16:	4610      	mov	r0, r2
 800bd18:	f7ff f913 	bl	800af42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bd1c:	f001 fa2a 	bl	800d174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bd20:	4b0d      	ldr	r3, [pc, #52]	; (800bd58 <prvAddNewTaskToReadyList+0xcc>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00e      	beq.n	800bd46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bd28:	4b0a      	ldr	r3, [pc, #40]	; (800bd54 <prvAddNewTaskToReadyList+0xc8>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d207      	bcs.n	800bd46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bd36:	4b0c      	ldr	r3, [pc, #48]	; (800bd68 <prvAddNewTaskToReadyList+0xdc>)
 800bd38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd46:	bf00      	nop
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	2000191c 	.word	0x2000191c
 800bd54:	20001448 	.word	0x20001448
 800bd58:	20001928 	.word	0x20001928
 800bd5c:	20001938 	.word	0x20001938
 800bd60:	20001924 	.word	0x20001924
 800bd64:	2000144c 	.word	0x2000144c
 800bd68:	e000ed04 	.word	0xe000ed04

0800bd6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bd74:	2300      	movs	r3, #0
 800bd76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d017      	beq.n	800bdae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bd7e:	4b13      	ldr	r3, [pc, #76]	; (800bdcc <vTaskDelay+0x60>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00a      	beq.n	800bd9c <vTaskDelay+0x30>
	__asm volatile
 800bd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8a:	f383 8811 	msr	BASEPRI, r3
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	f3bf 8f4f 	dsb	sy
 800bd96:	60bb      	str	r3, [r7, #8]
}
 800bd98:	bf00      	nop
 800bd9a:	e7fe      	b.n	800bd9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bd9c:	f000 f880 	bl	800bea0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bda0:	2100      	movs	r1, #0
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fcea 	bl	800c77c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bda8:	f000 f888 	bl	800bebc <xTaskResumeAll>
 800bdac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d107      	bne.n	800bdc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bdb4:	4b06      	ldr	r3, [pc, #24]	; (800bdd0 <vTaskDelay+0x64>)
 800bdb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdba:	601a      	str	r2, [r3, #0]
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	20001944 	.word	0x20001944
 800bdd0:	e000ed04 	.word	0xe000ed04

0800bdd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b08a      	sub	sp, #40	; 0x28
 800bdd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bdda:	2300      	movs	r3, #0
 800bddc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bdde:	2300      	movs	r3, #0
 800bde0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bde2:	463a      	mov	r2, r7
 800bde4:	1d39      	adds	r1, r7, #4
 800bde6:	f107 0308 	add.w	r3, r7, #8
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7ff f848 	bl	800ae80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	9202      	str	r2, [sp, #8]
 800bdf8:	9301      	str	r3, [sp, #4]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	2300      	movs	r3, #0
 800be00:	460a      	mov	r2, r1
 800be02:	4921      	ldr	r1, [pc, #132]	; (800be88 <vTaskStartScheduler+0xb4>)
 800be04:	4821      	ldr	r0, [pc, #132]	; (800be8c <vTaskStartScheduler+0xb8>)
 800be06:	f7ff fe0f 	bl	800ba28 <xTaskCreateStatic>
 800be0a:	4603      	mov	r3, r0
 800be0c:	4a20      	ldr	r2, [pc, #128]	; (800be90 <vTaskStartScheduler+0xbc>)
 800be0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be10:	4b1f      	ldr	r3, [pc, #124]	; (800be90 <vTaskStartScheduler+0xbc>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800be18:	2301      	movs	r3, #1
 800be1a:	617b      	str	r3, [r7, #20]
 800be1c:	e001      	b.n	800be22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800be1e:	2300      	movs	r3, #0
 800be20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2b01      	cmp	r3, #1
 800be26:	d102      	bne.n	800be2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800be28:	f000 fcfc 	bl	800c824 <xTimerCreateTimerTask>
 800be2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b01      	cmp	r3, #1
 800be32:	d116      	bne.n	800be62 <vTaskStartScheduler+0x8e>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	613b      	str	r3, [r7, #16]
}
 800be46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800be48:	4b12      	ldr	r3, [pc, #72]	; (800be94 <vTaskStartScheduler+0xc0>)
 800be4a:	f04f 32ff 	mov.w	r2, #4294967295
 800be4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800be50:	4b11      	ldr	r3, [pc, #68]	; (800be98 <vTaskStartScheduler+0xc4>)
 800be52:	2201      	movs	r2, #1
 800be54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800be56:	4b11      	ldr	r3, [pc, #68]	; (800be9c <vTaskStartScheduler+0xc8>)
 800be58:	2200      	movs	r2, #0
 800be5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800be5c:	f001 f8b8 	bl	800cfd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800be60:	e00e      	b.n	800be80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be68:	d10a      	bne.n	800be80 <vTaskStartScheduler+0xac>
	__asm volatile
 800be6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	60fb      	str	r3, [r7, #12]
}
 800be7c:	bf00      	nop
 800be7e:	e7fe      	b.n	800be7e <vTaskStartScheduler+0xaa>
}
 800be80:	bf00      	nop
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	080158b8 	.word	0x080158b8
 800be8c:	0800c4b9 	.word	0x0800c4b9
 800be90:	20001940 	.word	0x20001940
 800be94:	2000193c 	.word	0x2000193c
 800be98:	20001928 	.word	0x20001928
 800be9c:	20001920 	.word	0x20001920

0800bea0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bea0:	b480      	push	{r7}
 800bea2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bea4:	4b04      	ldr	r3, [pc, #16]	; (800beb8 <vTaskSuspendAll+0x18>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	3301      	adds	r3, #1
 800beaa:	4a03      	ldr	r2, [pc, #12]	; (800beb8 <vTaskSuspendAll+0x18>)
 800beac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800beae:	bf00      	nop
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	20001944 	.word	0x20001944

0800bebc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bec2:	2300      	movs	r3, #0
 800bec4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bec6:	2300      	movs	r3, #0
 800bec8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800beca:	4b42      	ldr	r3, [pc, #264]	; (800bfd4 <xTaskResumeAll+0x118>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10a      	bne.n	800bee8 <xTaskResumeAll+0x2c>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	603b      	str	r3, [r7, #0]
}
 800bee4:	bf00      	nop
 800bee6:	e7fe      	b.n	800bee6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bee8:	f001 f914 	bl	800d114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800beec:	4b39      	ldr	r3, [pc, #228]	; (800bfd4 <xTaskResumeAll+0x118>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	3b01      	subs	r3, #1
 800bef2:	4a38      	ldr	r2, [pc, #224]	; (800bfd4 <xTaskResumeAll+0x118>)
 800bef4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bef6:	4b37      	ldr	r3, [pc, #220]	; (800bfd4 <xTaskResumeAll+0x118>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d162      	bne.n	800bfc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800befe:	4b36      	ldr	r3, [pc, #216]	; (800bfd8 <xTaskResumeAll+0x11c>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d05e      	beq.n	800bfc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf06:	e02f      	b.n	800bf68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf08:	4b34      	ldr	r3, [pc, #208]	; (800bfdc <xTaskResumeAll+0x120>)
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3318      	adds	r3, #24
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7ff f871 	bl	800affc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7ff f86c 	bl	800affc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf28:	4b2d      	ldr	r3, [pc, #180]	; (800bfe0 <xTaskResumeAll+0x124>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d903      	bls.n	800bf38 <xTaskResumeAll+0x7c>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf34:	4a2a      	ldr	r2, [pc, #168]	; (800bfe0 <xTaskResumeAll+0x124>)
 800bf36:	6013      	str	r3, [r2, #0]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4a27      	ldr	r2, [pc, #156]	; (800bfe4 <xTaskResumeAll+0x128>)
 800bf46:	441a      	add	r2, r3
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	4610      	mov	r0, r2
 800bf50:	f7fe fff7 	bl	800af42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf58:	4b23      	ldr	r3, [pc, #140]	; (800bfe8 <xTaskResumeAll+0x12c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d302      	bcc.n	800bf68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bf62:	4b22      	ldr	r3, [pc, #136]	; (800bfec <xTaskResumeAll+0x130>)
 800bf64:	2201      	movs	r2, #1
 800bf66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf68:	4b1c      	ldr	r3, [pc, #112]	; (800bfdc <xTaskResumeAll+0x120>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1cb      	bne.n	800bf08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bf76:	f000 fb55 	bl	800c624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bf7a:	4b1d      	ldr	r3, [pc, #116]	; (800bff0 <xTaskResumeAll+0x134>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d010      	beq.n	800bfa8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bf86:	f000 f847 	bl	800c018 <xTaskIncrementTick>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bf90:	4b16      	ldr	r3, [pc, #88]	; (800bfec <xTaskResumeAll+0x130>)
 800bf92:	2201      	movs	r2, #1
 800bf94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1f1      	bne.n	800bf86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bfa2:	4b13      	ldr	r3, [pc, #76]	; (800bff0 <xTaskResumeAll+0x134>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bfa8:	4b10      	ldr	r3, [pc, #64]	; (800bfec <xTaskResumeAll+0x130>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d009      	beq.n	800bfc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bfb4:	4b0f      	ldr	r3, [pc, #60]	; (800bff4 <xTaskResumeAll+0x138>)
 800bfb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfc4:	f001 f8d6 	bl	800d174 <vPortExitCritical>

	return xAlreadyYielded;
 800bfc8:	68bb      	ldr	r3, [r7, #8]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20001944 	.word	0x20001944
 800bfd8:	2000191c 	.word	0x2000191c
 800bfdc:	200018dc 	.word	0x200018dc
 800bfe0:	20001924 	.word	0x20001924
 800bfe4:	2000144c 	.word	0x2000144c
 800bfe8:	20001448 	.word	0x20001448
 800bfec:	20001930 	.word	0x20001930
 800bff0:	2000192c 	.word	0x2000192c
 800bff4:	e000ed04 	.word	0xe000ed04

0800bff8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bffe:	4b05      	ldr	r3, [pc, #20]	; (800c014 <xTaskGetTickCount+0x1c>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c004:	687b      	ldr	r3, [r7, #4]
}
 800c006:	4618      	mov	r0, r3
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	20001920 	.word	0x20001920

0800c018 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c01e:	2300      	movs	r3, #0
 800c020:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c022:	4b4f      	ldr	r3, [pc, #316]	; (800c160 <xTaskIncrementTick+0x148>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	f040 808f 	bne.w	800c14a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c02c:	4b4d      	ldr	r3, [pc, #308]	; (800c164 <xTaskIncrementTick+0x14c>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3301      	adds	r3, #1
 800c032:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c034:	4a4b      	ldr	r2, [pc, #300]	; (800c164 <xTaskIncrementTick+0x14c>)
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d120      	bne.n	800c082 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c040:	4b49      	ldr	r3, [pc, #292]	; (800c168 <xTaskIncrementTick+0x150>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00a      	beq.n	800c060 <xTaskIncrementTick+0x48>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	603b      	str	r3, [r7, #0]
}
 800c05c:	bf00      	nop
 800c05e:	e7fe      	b.n	800c05e <xTaskIncrementTick+0x46>
 800c060:	4b41      	ldr	r3, [pc, #260]	; (800c168 <xTaskIncrementTick+0x150>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	60fb      	str	r3, [r7, #12]
 800c066:	4b41      	ldr	r3, [pc, #260]	; (800c16c <xTaskIncrementTick+0x154>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a3f      	ldr	r2, [pc, #252]	; (800c168 <xTaskIncrementTick+0x150>)
 800c06c:	6013      	str	r3, [r2, #0]
 800c06e:	4a3f      	ldr	r2, [pc, #252]	; (800c16c <xTaskIncrementTick+0x154>)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6013      	str	r3, [r2, #0]
 800c074:	4b3e      	ldr	r3, [pc, #248]	; (800c170 <xTaskIncrementTick+0x158>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3301      	adds	r3, #1
 800c07a:	4a3d      	ldr	r2, [pc, #244]	; (800c170 <xTaskIncrementTick+0x158>)
 800c07c:	6013      	str	r3, [r2, #0]
 800c07e:	f000 fad1 	bl	800c624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c082:	4b3c      	ldr	r3, [pc, #240]	; (800c174 <xTaskIncrementTick+0x15c>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d349      	bcc.n	800c120 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c08c:	4b36      	ldr	r3, [pc, #216]	; (800c168 <xTaskIncrementTick+0x150>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d104      	bne.n	800c0a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c096:	4b37      	ldr	r3, [pc, #220]	; (800c174 <xTaskIncrementTick+0x15c>)
 800c098:	f04f 32ff 	mov.w	r2, #4294967295
 800c09c:	601a      	str	r2, [r3, #0]
					break;
 800c09e:	e03f      	b.n	800c120 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0a0:	4b31      	ldr	r3, [pc, #196]	; (800c168 <xTaskIncrementTick+0x150>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d203      	bcs.n	800c0c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c0b8:	4a2e      	ldr	r2, [pc, #184]	; (800c174 <xTaskIncrementTick+0x15c>)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c0be:	e02f      	b.n	800c120 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe ff99 	bl	800affc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d004      	beq.n	800c0dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	3318      	adds	r3, #24
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fe ff90 	bl	800affc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e0:	4b25      	ldr	r3, [pc, #148]	; (800c178 <xTaskIncrementTick+0x160>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d903      	bls.n	800c0f0 <xTaskIncrementTick+0xd8>
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ec:	4a22      	ldr	r2, [pc, #136]	; (800c178 <xTaskIncrementTick+0x160>)
 800c0ee:	6013      	str	r3, [r2, #0]
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4a1f      	ldr	r2, [pc, #124]	; (800c17c <xTaskIncrementTick+0x164>)
 800c0fe:	441a      	add	r2, r3
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	3304      	adds	r3, #4
 800c104:	4619      	mov	r1, r3
 800c106:	4610      	mov	r0, r2
 800c108:	f7fe ff1b 	bl	800af42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c110:	4b1b      	ldr	r3, [pc, #108]	; (800c180 <xTaskIncrementTick+0x168>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c116:	429a      	cmp	r2, r3
 800c118:	d3b8      	bcc.n	800c08c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c11a:	2301      	movs	r3, #1
 800c11c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c11e:	e7b5      	b.n	800c08c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c120:	4b17      	ldr	r3, [pc, #92]	; (800c180 <xTaskIncrementTick+0x168>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c126:	4915      	ldr	r1, [pc, #84]	; (800c17c <xTaskIncrementTick+0x164>)
 800c128:	4613      	mov	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	440b      	add	r3, r1
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d901      	bls.n	800c13c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c138:	2301      	movs	r3, #1
 800c13a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c13c:	4b11      	ldr	r3, [pc, #68]	; (800c184 <xTaskIncrementTick+0x16c>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d007      	beq.n	800c154 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c144:	2301      	movs	r3, #1
 800c146:	617b      	str	r3, [r7, #20]
 800c148:	e004      	b.n	800c154 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c14a:	4b0f      	ldr	r3, [pc, #60]	; (800c188 <xTaskIncrementTick+0x170>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	3301      	adds	r3, #1
 800c150:	4a0d      	ldr	r2, [pc, #52]	; (800c188 <xTaskIncrementTick+0x170>)
 800c152:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c154:	697b      	ldr	r3, [r7, #20]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3718      	adds	r7, #24
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	20001944 	.word	0x20001944
 800c164:	20001920 	.word	0x20001920
 800c168:	200018d4 	.word	0x200018d4
 800c16c:	200018d8 	.word	0x200018d8
 800c170:	20001934 	.word	0x20001934
 800c174:	2000193c 	.word	0x2000193c
 800c178:	20001924 	.word	0x20001924
 800c17c:	2000144c 	.word	0x2000144c
 800c180:	20001448 	.word	0x20001448
 800c184:	20001930 	.word	0x20001930
 800c188:	2000192c 	.word	0x2000192c

0800c18c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c192:	4b28      	ldr	r3, [pc, #160]	; (800c234 <vTaskSwitchContext+0xa8>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c19a:	4b27      	ldr	r3, [pc, #156]	; (800c238 <vTaskSwitchContext+0xac>)
 800c19c:	2201      	movs	r2, #1
 800c19e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c1a0:	e041      	b.n	800c226 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c1a2:	4b25      	ldr	r3, [pc, #148]	; (800c238 <vTaskSwitchContext+0xac>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1a8:	4b24      	ldr	r3, [pc, #144]	; (800c23c <vTaskSwitchContext+0xb0>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	60fb      	str	r3, [r7, #12]
 800c1ae:	e010      	b.n	800c1d2 <vTaskSwitchContext+0x46>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10a      	bne.n	800c1cc <vTaskSwitchContext+0x40>
	__asm volatile
 800c1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ba:	f383 8811 	msr	BASEPRI, r3
 800c1be:	f3bf 8f6f 	isb	sy
 800c1c2:	f3bf 8f4f 	dsb	sy
 800c1c6:	607b      	str	r3, [r7, #4]
}
 800c1c8:	bf00      	nop
 800c1ca:	e7fe      	b.n	800c1ca <vTaskSwitchContext+0x3e>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	60fb      	str	r3, [r7, #12]
 800c1d2:	491b      	ldr	r1, [pc, #108]	; (800c240 <vTaskSwitchContext+0xb4>)
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	440b      	add	r3, r1
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0e4      	beq.n	800c1b0 <vTaskSwitchContext+0x24>
 800c1e6:	68fa      	ldr	r2, [r7, #12]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4413      	add	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4a13      	ldr	r2, [pc, #76]	; (800c240 <vTaskSwitchContext+0xb4>)
 800c1f2:	4413      	add	r3, r2
 800c1f4:	60bb      	str	r3, [r7, #8]
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	685a      	ldr	r2, [r3, #4]
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	605a      	str	r2, [r3, #4]
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	3308      	adds	r3, #8
 800c208:	429a      	cmp	r2, r3
 800c20a:	d104      	bne.n	800c216 <vTaskSwitchContext+0x8a>
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	605a      	str	r2, [r3, #4]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	4a09      	ldr	r2, [pc, #36]	; (800c244 <vTaskSwitchContext+0xb8>)
 800c21e:	6013      	str	r3, [r2, #0]
 800c220:	4a06      	ldr	r2, [pc, #24]	; (800c23c <vTaskSwitchContext+0xb0>)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6013      	str	r3, [r2, #0]
}
 800c226:	bf00      	nop
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	20001944 	.word	0x20001944
 800c238:	20001930 	.word	0x20001930
 800c23c:	20001924 	.word	0x20001924
 800c240:	2000144c 	.word	0x2000144c
 800c244:	20001448 	.word	0x20001448

0800c248 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10a      	bne.n	800c26e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	60fb      	str	r3, [r7, #12]
}
 800c26a:	bf00      	nop
 800c26c:	e7fe      	b.n	800c26c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c26e:	4b07      	ldr	r3, [pc, #28]	; (800c28c <vTaskPlaceOnEventList+0x44>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3318      	adds	r3, #24
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f7fe fe87 	bl	800af8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c27c:	2101      	movs	r1, #1
 800c27e:	6838      	ldr	r0, [r7, #0]
 800c280:	f000 fa7c 	bl	800c77c <prvAddCurrentTaskToDelayedList>
}
 800c284:	bf00      	nop
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	20001448 	.word	0x20001448

0800c290 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10a      	bne.n	800c2b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	617b      	str	r3, [r7, #20]
}
 800c2b4:	bf00      	nop
 800c2b6:	e7fe      	b.n	800c2b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2b8:	4b0a      	ldr	r3, [pc, #40]	; (800c2e4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3318      	adds	r3, #24
 800c2be:	4619      	mov	r1, r3
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f7fe fe3e 	bl	800af42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c2d2:	6879      	ldr	r1, [r7, #4]
 800c2d4:	68b8      	ldr	r0, [r7, #8]
 800c2d6:	f000 fa51 	bl	800c77c <prvAddCurrentTaskToDelayedList>
	}
 800c2da:	bf00      	nop
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	20001448 	.word	0x20001448

0800c2e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b086      	sub	sp, #24
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d10a      	bne.n	800c314 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	60fb      	str	r3, [r7, #12]
}
 800c310:	bf00      	nop
 800c312:	e7fe      	b.n	800c312 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	3318      	adds	r3, #24
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fe fe6f 	bl	800affc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c31e:	4b1e      	ldr	r3, [pc, #120]	; (800c398 <xTaskRemoveFromEventList+0xb0>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d11d      	bne.n	800c362 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	3304      	adds	r3, #4
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe fe66 	bl	800affc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c334:	4b19      	ldr	r3, [pc, #100]	; (800c39c <xTaskRemoveFromEventList+0xb4>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d903      	bls.n	800c344 <xTaskRemoveFromEventList+0x5c>
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c340:	4a16      	ldr	r2, [pc, #88]	; (800c39c <xTaskRemoveFromEventList+0xb4>)
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4a13      	ldr	r2, [pc, #76]	; (800c3a0 <xTaskRemoveFromEventList+0xb8>)
 800c352:	441a      	add	r2, r3
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	3304      	adds	r3, #4
 800c358:	4619      	mov	r1, r3
 800c35a:	4610      	mov	r0, r2
 800c35c:	f7fe fdf1 	bl	800af42 <vListInsertEnd>
 800c360:	e005      	b.n	800c36e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	3318      	adds	r3, #24
 800c366:	4619      	mov	r1, r3
 800c368:	480e      	ldr	r0, [pc, #56]	; (800c3a4 <xTaskRemoveFromEventList+0xbc>)
 800c36a:	f7fe fdea 	bl	800af42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c372:	4b0d      	ldr	r3, [pc, #52]	; (800c3a8 <xTaskRemoveFromEventList+0xc0>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c378:	429a      	cmp	r2, r3
 800c37a:	d905      	bls.n	800c388 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c37c:	2301      	movs	r3, #1
 800c37e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c380:	4b0a      	ldr	r3, [pc, #40]	; (800c3ac <xTaskRemoveFromEventList+0xc4>)
 800c382:	2201      	movs	r2, #1
 800c384:	601a      	str	r2, [r3, #0]
 800c386:	e001      	b.n	800c38c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c388:	2300      	movs	r3, #0
 800c38a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c38c:	697b      	ldr	r3, [r7, #20]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3718      	adds	r7, #24
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	20001944 	.word	0x20001944
 800c39c:	20001924 	.word	0x20001924
 800c3a0:	2000144c 	.word	0x2000144c
 800c3a4:	200018dc 	.word	0x200018dc
 800c3a8:	20001448 	.word	0x20001448
 800c3ac:	20001930 	.word	0x20001930

0800c3b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c3b8:	4b06      	ldr	r3, [pc, #24]	; (800c3d4 <vTaskInternalSetTimeOutState+0x24>)
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c3c0:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <vTaskInternalSetTimeOutState+0x28>)
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	605a      	str	r2, [r3, #4]
}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr
 800c3d4:	20001934 	.word	0x20001934
 800c3d8:	20001920 	.word	0x20001920

0800c3dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10a      	bne.n	800c402 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	613b      	str	r3, [r7, #16]
}
 800c3fe:	bf00      	nop
 800c400:	e7fe      	b.n	800c400 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10a      	bne.n	800c41e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	60fb      	str	r3, [r7, #12]
}
 800c41a:	bf00      	nop
 800c41c:	e7fe      	b.n	800c41c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c41e:	f000 fe79 	bl	800d114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c422:	4b1d      	ldr	r3, [pc, #116]	; (800c498 <xTaskCheckForTimeOut+0xbc>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	69ba      	ldr	r2, [r7, #24]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c43a:	d102      	bne.n	800c442 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c43c:	2300      	movs	r3, #0
 800c43e:	61fb      	str	r3, [r7, #28]
 800c440:	e023      	b.n	800c48a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	4b15      	ldr	r3, [pc, #84]	; (800c49c <xTaskCheckForTimeOut+0xc0>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d007      	beq.n	800c45e <xTaskCheckForTimeOut+0x82>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	69ba      	ldr	r2, [r7, #24]
 800c454:	429a      	cmp	r2, r3
 800c456:	d302      	bcc.n	800c45e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c458:	2301      	movs	r3, #1
 800c45a:	61fb      	str	r3, [r7, #28]
 800c45c:	e015      	b.n	800c48a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	697a      	ldr	r2, [r7, #20]
 800c464:	429a      	cmp	r2, r3
 800c466:	d20b      	bcs.n	800c480 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	1ad2      	subs	r2, r2, r3
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7ff ff9b 	bl	800c3b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c47a:	2300      	movs	r3, #0
 800c47c:	61fb      	str	r3, [r7, #28]
 800c47e:	e004      	b.n	800c48a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c486:	2301      	movs	r3, #1
 800c488:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c48a:	f000 fe73 	bl	800d174 <vPortExitCritical>

	return xReturn;
 800c48e:	69fb      	ldr	r3, [r7, #28]
}
 800c490:	4618      	mov	r0, r3
 800c492:	3720      	adds	r7, #32
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	20001920 	.word	0x20001920
 800c49c:	20001934 	.word	0x20001934

0800c4a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c4a4:	4b03      	ldr	r3, [pc, #12]	; (800c4b4 <vTaskMissedYield+0x14>)
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	601a      	str	r2, [r3, #0]
}
 800c4aa:	bf00      	nop
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr
 800c4b4:	20001930 	.word	0x20001930

0800c4b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c4c0:	f000 f852 	bl	800c568 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c4c4:	4b06      	ldr	r3, [pc, #24]	; (800c4e0 <prvIdleTask+0x28>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d9f9      	bls.n	800c4c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c4cc:	4b05      	ldr	r3, [pc, #20]	; (800c4e4 <prvIdleTask+0x2c>)
 800c4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d2:	601a      	str	r2, [r3, #0]
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c4dc:	e7f0      	b.n	800c4c0 <prvIdleTask+0x8>
 800c4de:	bf00      	nop
 800c4e0:	2000144c 	.word	0x2000144c
 800c4e4:	e000ed04 	.word	0xe000ed04

0800c4e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	607b      	str	r3, [r7, #4]
 800c4f2:	e00c      	b.n	800c50e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	4413      	add	r3, r2
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	4a12      	ldr	r2, [pc, #72]	; (800c548 <prvInitialiseTaskLists+0x60>)
 800c500:	4413      	add	r3, r2
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe fcf0 	bl	800aee8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	3301      	adds	r3, #1
 800c50c:	607b      	str	r3, [r7, #4]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b37      	cmp	r3, #55	; 0x37
 800c512:	d9ef      	bls.n	800c4f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c514:	480d      	ldr	r0, [pc, #52]	; (800c54c <prvInitialiseTaskLists+0x64>)
 800c516:	f7fe fce7 	bl	800aee8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c51a:	480d      	ldr	r0, [pc, #52]	; (800c550 <prvInitialiseTaskLists+0x68>)
 800c51c:	f7fe fce4 	bl	800aee8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c520:	480c      	ldr	r0, [pc, #48]	; (800c554 <prvInitialiseTaskLists+0x6c>)
 800c522:	f7fe fce1 	bl	800aee8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c526:	480c      	ldr	r0, [pc, #48]	; (800c558 <prvInitialiseTaskLists+0x70>)
 800c528:	f7fe fcde 	bl	800aee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c52c:	480b      	ldr	r0, [pc, #44]	; (800c55c <prvInitialiseTaskLists+0x74>)
 800c52e:	f7fe fcdb 	bl	800aee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c532:	4b0b      	ldr	r3, [pc, #44]	; (800c560 <prvInitialiseTaskLists+0x78>)
 800c534:	4a05      	ldr	r2, [pc, #20]	; (800c54c <prvInitialiseTaskLists+0x64>)
 800c536:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c538:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <prvInitialiseTaskLists+0x7c>)
 800c53a:	4a05      	ldr	r2, [pc, #20]	; (800c550 <prvInitialiseTaskLists+0x68>)
 800c53c:	601a      	str	r2, [r3, #0]
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	2000144c 	.word	0x2000144c
 800c54c:	200018ac 	.word	0x200018ac
 800c550:	200018c0 	.word	0x200018c0
 800c554:	200018dc 	.word	0x200018dc
 800c558:	200018f0 	.word	0x200018f0
 800c55c:	20001908 	.word	0x20001908
 800c560:	200018d4 	.word	0x200018d4
 800c564:	200018d8 	.word	0x200018d8

0800c568 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c56e:	e019      	b.n	800c5a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c570:	f000 fdd0 	bl	800d114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c574:	4b10      	ldr	r3, [pc, #64]	; (800c5b8 <prvCheckTasksWaitingTermination+0x50>)
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	3304      	adds	r3, #4
 800c580:	4618      	mov	r0, r3
 800c582:	f7fe fd3b 	bl	800affc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c586:	4b0d      	ldr	r3, [pc, #52]	; (800c5bc <prvCheckTasksWaitingTermination+0x54>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	3b01      	subs	r3, #1
 800c58c:	4a0b      	ldr	r2, [pc, #44]	; (800c5bc <prvCheckTasksWaitingTermination+0x54>)
 800c58e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c590:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <prvCheckTasksWaitingTermination+0x58>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	3b01      	subs	r3, #1
 800c596:	4a0a      	ldr	r2, [pc, #40]	; (800c5c0 <prvCheckTasksWaitingTermination+0x58>)
 800c598:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c59a:	f000 fdeb 	bl	800d174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f810 	bl	800c5c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5a4:	4b06      	ldr	r3, [pc, #24]	; (800c5c0 <prvCheckTasksWaitingTermination+0x58>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1e1      	bne.n	800c570 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c5ac:	bf00      	nop
 800c5ae:	bf00      	nop
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	200018f0 	.word	0x200018f0
 800c5bc:	2000191c 	.word	0x2000191c
 800c5c0:	20001904 	.word	0x20001904

0800c5c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d108      	bne.n	800c5e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 ff88 	bl	800d4f0 <vPortFree>
				vPortFree( pxTCB );
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 ff85 	bl	800d4f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c5e6:	e018      	b.n	800c61a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d103      	bne.n	800c5fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 ff7c 	bl	800d4f0 <vPortFree>
	}
 800c5f8:	e00f      	b.n	800c61a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c600:	2b02      	cmp	r3, #2
 800c602:	d00a      	beq.n	800c61a <prvDeleteTCB+0x56>
	__asm volatile
 800c604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	60fb      	str	r3, [r7, #12]
}
 800c616:	bf00      	nop
 800c618:	e7fe      	b.n	800c618 <prvDeleteTCB+0x54>
	}
 800c61a:	bf00      	nop
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
	...

0800c624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c62a:	4b0c      	ldr	r3, [pc, #48]	; (800c65c <prvResetNextTaskUnblockTime+0x38>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d104      	bne.n	800c63e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c634:	4b0a      	ldr	r3, [pc, #40]	; (800c660 <prvResetNextTaskUnblockTime+0x3c>)
 800c636:	f04f 32ff 	mov.w	r2, #4294967295
 800c63a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c63c:	e008      	b.n	800c650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c63e:	4b07      	ldr	r3, [pc, #28]	; (800c65c <prvResetNextTaskUnblockTime+0x38>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	4a04      	ldr	r2, [pc, #16]	; (800c660 <prvResetNextTaskUnblockTime+0x3c>)
 800c64e:	6013      	str	r3, [r2, #0]
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	200018d4 	.word	0x200018d4
 800c660:	2000193c 	.word	0x2000193c

0800c664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c66a:	4b0b      	ldr	r3, [pc, #44]	; (800c698 <xTaskGetSchedulerState+0x34>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d102      	bne.n	800c678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c672:	2301      	movs	r3, #1
 800c674:	607b      	str	r3, [r7, #4]
 800c676:	e008      	b.n	800c68a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c678:	4b08      	ldr	r3, [pc, #32]	; (800c69c <xTaskGetSchedulerState+0x38>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d102      	bne.n	800c686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c680:	2302      	movs	r3, #2
 800c682:	607b      	str	r3, [r7, #4]
 800c684:	e001      	b.n	800c68a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c686:	2300      	movs	r3, #0
 800c688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c68a:	687b      	ldr	r3, [r7, #4]
	}
 800c68c:	4618      	mov	r0, r3
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	20001928 	.word	0x20001928
 800c69c:	20001944 	.word	0x20001944

0800c6a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b086      	sub	sp, #24
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d056      	beq.n	800c764 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c6b6:	4b2e      	ldr	r3, [pc, #184]	; (800c770 <xTaskPriorityDisinherit+0xd0>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	693a      	ldr	r2, [r7, #16]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d00a      	beq.n	800c6d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c4:	f383 8811 	msr	BASEPRI, r3
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	60fb      	str	r3, [r7, #12]
}
 800c6d2:	bf00      	nop
 800c6d4:	e7fe      	b.n	800c6d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d10a      	bne.n	800c6f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	60bb      	str	r3, [r7, #8]
}
 800c6f0:	bf00      	nop
 800c6f2:	e7fe      	b.n	800c6f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f8:	1e5a      	subs	r2, r3, #1
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c706:	429a      	cmp	r2, r3
 800c708:	d02c      	beq.n	800c764 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d128      	bne.n	800c764 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	3304      	adds	r3, #4
 800c716:	4618      	mov	r0, r3
 800c718:	f7fe fc70 	bl	800affc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c728:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c734:	4b0f      	ldr	r3, [pc, #60]	; (800c774 <xTaskPriorityDisinherit+0xd4>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d903      	bls.n	800c744 <xTaskPriorityDisinherit+0xa4>
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c740:	4a0c      	ldr	r2, [pc, #48]	; (800c774 <xTaskPriorityDisinherit+0xd4>)
 800c742:	6013      	str	r3, [r2, #0]
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c748:	4613      	mov	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4413      	add	r3, r2
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	4a09      	ldr	r2, [pc, #36]	; (800c778 <xTaskPriorityDisinherit+0xd8>)
 800c752:	441a      	add	r2, r3
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	3304      	adds	r3, #4
 800c758:	4619      	mov	r1, r3
 800c75a:	4610      	mov	r0, r2
 800c75c:	f7fe fbf1 	bl	800af42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c760:	2301      	movs	r3, #1
 800c762:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c764:	697b      	ldr	r3, [r7, #20]
	}
 800c766:	4618      	mov	r0, r3
 800c768:	3718      	adds	r7, #24
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20001448 	.word	0x20001448
 800c774:	20001924 	.word	0x20001924
 800c778:	2000144c 	.word	0x2000144c

0800c77c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c786:	4b21      	ldr	r3, [pc, #132]	; (800c80c <prvAddCurrentTaskToDelayedList+0x90>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c78c:	4b20      	ldr	r3, [pc, #128]	; (800c810 <prvAddCurrentTaskToDelayedList+0x94>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	3304      	adds	r3, #4
 800c792:	4618      	mov	r0, r3
 800c794:	f7fe fc32 	bl	800affc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c79e:	d10a      	bne.n	800c7b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d007      	beq.n	800c7b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7a6:	4b1a      	ldr	r3, [pc, #104]	; (800c810 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3304      	adds	r3, #4
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	4819      	ldr	r0, [pc, #100]	; (800c814 <prvAddCurrentTaskToDelayedList+0x98>)
 800c7b0:	f7fe fbc7 	bl	800af42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c7b4:	e026      	b.n	800c804 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c7be:	4b14      	ldr	r3, [pc, #80]	; (800c810 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68ba      	ldr	r2, [r7, #8]
 800c7c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7c6:	68ba      	ldr	r2, [r7, #8]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d209      	bcs.n	800c7e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7ce:	4b12      	ldr	r3, [pc, #72]	; (800c818 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	4b0f      	ldr	r3, [pc, #60]	; (800c810 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	4619      	mov	r1, r3
 800c7da:	4610      	mov	r0, r2
 800c7dc:	f7fe fbd5 	bl	800af8a <vListInsert>
}
 800c7e0:	e010      	b.n	800c804 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7e2:	4b0e      	ldr	r3, [pc, #56]	; (800c81c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	4b0a      	ldr	r3, [pc, #40]	; (800c810 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	3304      	adds	r3, #4
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	4610      	mov	r0, r2
 800c7f0:	f7fe fbcb 	bl	800af8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c7f4:	4b0a      	ldr	r3, [pc, #40]	; (800c820 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d202      	bcs.n	800c804 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c7fe:	4a08      	ldr	r2, [pc, #32]	; (800c820 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	6013      	str	r3, [r2, #0]
}
 800c804:	bf00      	nop
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	20001920 	.word	0x20001920
 800c810:	20001448 	.word	0x20001448
 800c814:	20001908 	.word	0x20001908
 800c818:	200018d8 	.word	0x200018d8
 800c81c:	200018d4 	.word	0x200018d4
 800c820:	2000193c 	.word	0x2000193c

0800c824 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b08a      	sub	sp, #40	; 0x28
 800c828:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c82a:	2300      	movs	r3, #0
 800c82c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c82e:	f000 fb07 	bl	800ce40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c832:	4b1c      	ldr	r3, [pc, #112]	; (800c8a4 <xTimerCreateTimerTask+0x80>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d021      	beq.n	800c87e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c83a:	2300      	movs	r3, #0
 800c83c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c83e:	2300      	movs	r3, #0
 800c840:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c842:	1d3a      	adds	r2, r7, #4
 800c844:	f107 0108 	add.w	r1, r7, #8
 800c848:	f107 030c 	add.w	r3, r7, #12
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fe fb31 	bl	800aeb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c852:	6879      	ldr	r1, [r7, #4]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	9202      	str	r2, [sp, #8]
 800c85a:	9301      	str	r3, [sp, #4]
 800c85c:	2302      	movs	r3, #2
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	2300      	movs	r3, #0
 800c862:	460a      	mov	r2, r1
 800c864:	4910      	ldr	r1, [pc, #64]	; (800c8a8 <xTimerCreateTimerTask+0x84>)
 800c866:	4811      	ldr	r0, [pc, #68]	; (800c8ac <xTimerCreateTimerTask+0x88>)
 800c868:	f7ff f8de 	bl	800ba28 <xTaskCreateStatic>
 800c86c:	4603      	mov	r3, r0
 800c86e:	4a10      	ldr	r2, [pc, #64]	; (800c8b0 <xTimerCreateTimerTask+0x8c>)
 800c870:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c872:	4b0f      	ldr	r3, [pc, #60]	; (800c8b0 <xTimerCreateTimerTask+0x8c>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c87a:	2301      	movs	r3, #1
 800c87c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10a      	bne.n	800c89a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	613b      	str	r3, [r7, #16]
}
 800c896:	bf00      	nop
 800c898:	e7fe      	b.n	800c898 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c89a:	697b      	ldr	r3, [r7, #20]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	20001978 	.word	0x20001978
 800c8a8:	080158c0 	.word	0x080158c0
 800c8ac:	0800c9e9 	.word	0x0800c9e9
 800c8b0:	2000197c 	.word	0x2000197c

0800c8b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b08a      	sub	sp, #40	; 0x28
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
 800c8c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d10a      	bne.n	800c8e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d0:	f383 8811 	msr	BASEPRI, r3
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	623b      	str	r3, [r7, #32]
}
 800c8de:	bf00      	nop
 800c8e0:	e7fe      	b.n	800c8e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c8e2:	4b1a      	ldr	r3, [pc, #104]	; (800c94c <xTimerGenericCommand+0x98>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d02a      	beq.n	800c940 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	2b05      	cmp	r3, #5
 800c8fa:	dc18      	bgt.n	800c92e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c8fc:	f7ff feb2 	bl	800c664 <xTaskGetSchedulerState>
 800c900:	4603      	mov	r3, r0
 800c902:	2b02      	cmp	r3, #2
 800c904:	d109      	bne.n	800c91a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c906:	4b11      	ldr	r3, [pc, #68]	; (800c94c <xTimerGenericCommand+0x98>)
 800c908:	6818      	ldr	r0, [r3, #0]
 800c90a:	f107 0110 	add.w	r1, r7, #16
 800c90e:	2300      	movs	r3, #0
 800c910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c912:	f7fe fca1 	bl	800b258 <xQueueGenericSend>
 800c916:	6278      	str	r0, [r7, #36]	; 0x24
 800c918:	e012      	b.n	800c940 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c91a:	4b0c      	ldr	r3, [pc, #48]	; (800c94c <xTimerGenericCommand+0x98>)
 800c91c:	6818      	ldr	r0, [r3, #0]
 800c91e:	f107 0110 	add.w	r1, r7, #16
 800c922:	2300      	movs	r3, #0
 800c924:	2200      	movs	r2, #0
 800c926:	f7fe fc97 	bl	800b258 <xQueueGenericSend>
 800c92a:	6278      	str	r0, [r7, #36]	; 0x24
 800c92c:	e008      	b.n	800c940 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c92e:	4b07      	ldr	r3, [pc, #28]	; (800c94c <xTimerGenericCommand+0x98>)
 800c930:	6818      	ldr	r0, [r3, #0]
 800c932:	f107 0110 	add.w	r1, r7, #16
 800c936:	2300      	movs	r3, #0
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	f7fe fd8b 	bl	800b454 <xQueueGenericSendFromISR>
 800c93e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c942:	4618      	mov	r0, r3
 800c944:	3728      	adds	r7, #40	; 0x28
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	20001978 	.word	0x20001978

0800c950 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b088      	sub	sp, #32
 800c954:	af02      	add	r7, sp, #8
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c95a:	4b22      	ldr	r3, [pc, #136]	; (800c9e4 <prvProcessExpiredTimer+0x94>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	3304      	adds	r3, #4
 800c968:	4618      	mov	r0, r3
 800c96a:	f7fe fb47 	bl	800affc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c974:	f003 0304 	and.w	r3, r3, #4
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d022      	beq.n	800c9c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	699a      	ldr	r2, [r3, #24]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	18d1      	adds	r1, r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	683a      	ldr	r2, [r7, #0]
 800c988:	6978      	ldr	r0, [r7, #20]
 800c98a:	f000 f8d1 	bl	800cb30 <prvInsertTimerInActiveList>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d01f      	beq.n	800c9d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c994:	2300      	movs	r3, #0
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	2300      	movs	r3, #0
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	2100      	movs	r1, #0
 800c99e:	6978      	ldr	r0, [r7, #20]
 800c9a0:	f7ff ff88 	bl	800c8b4 <xTimerGenericCommand>
 800c9a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d113      	bne.n	800c9d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b0:	f383 8811 	msr	BASEPRI, r3
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	f3bf 8f4f 	dsb	sy
 800c9bc:	60fb      	str	r3, [r7, #12]
}
 800c9be:	bf00      	nop
 800c9c0:	e7fe      	b.n	800c9c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9c8:	f023 0301 	bic.w	r3, r3, #1
 800c9cc:	b2da      	uxtb	r2, r3
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	6a1b      	ldr	r3, [r3, #32]
 800c9d8:	6978      	ldr	r0, [r7, #20]
 800c9da:	4798      	blx	r3
}
 800c9dc:	bf00      	nop
 800c9de:	3718      	adds	r7, #24
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	20001970 	.word	0x20001970

0800c9e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c9f0:	f107 0308 	add.w	r3, r7, #8
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 f857 	bl	800caa8 <prvGetNextExpireTime>
 800c9fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	4619      	mov	r1, r3
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f000 f803 	bl	800ca0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ca06:	f000 f8d5 	bl	800cbb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca0a:	e7f1      	b.n	800c9f0 <prvTimerTask+0x8>

0800ca0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ca16:	f7ff fa43 	bl	800bea0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca1a:	f107 0308 	add.w	r3, r7, #8
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 f866 	bl	800caf0 <prvSampleTimeNow>
 800ca24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d130      	bne.n	800ca8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10a      	bne.n	800ca48 <prvProcessTimerOrBlockTask+0x3c>
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d806      	bhi.n	800ca48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ca3a:	f7ff fa3f 	bl	800bebc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ca3e:	68f9      	ldr	r1, [r7, #12]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7ff ff85 	bl	800c950 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ca46:	e024      	b.n	800ca92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d008      	beq.n	800ca60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca4e:	4b13      	ldr	r3, [pc, #76]	; (800ca9c <prvProcessTimerOrBlockTask+0x90>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d101      	bne.n	800ca5c <prvProcessTimerOrBlockTask+0x50>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e000      	b.n	800ca5e <prvProcessTimerOrBlockTask+0x52>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca60:	4b0f      	ldr	r3, [pc, #60]	; (800caa0 <prvProcessTimerOrBlockTask+0x94>)
 800ca62:	6818      	ldr	r0, [r3, #0]
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	683a      	ldr	r2, [r7, #0]
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	f7fe ffa7 	bl	800b9c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca72:	f7ff fa23 	bl	800bebc <xTaskResumeAll>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10a      	bne.n	800ca92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ca7c:	4b09      	ldr	r3, [pc, #36]	; (800caa4 <prvProcessTimerOrBlockTask+0x98>)
 800ca7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	f3bf 8f4f 	dsb	sy
 800ca88:	f3bf 8f6f 	isb	sy
}
 800ca8c:	e001      	b.n	800ca92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ca8e:	f7ff fa15 	bl	800bebc <xTaskResumeAll>
}
 800ca92:	bf00      	nop
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	20001974 	.word	0x20001974
 800caa0:	20001978 	.word	0x20001978
 800caa4:	e000ed04 	.word	0xe000ed04

0800caa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cab0:	4b0e      	ldr	r3, [pc, #56]	; (800caec <prvGetNextExpireTime+0x44>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <prvGetNextExpireTime+0x16>
 800caba:	2201      	movs	r2, #1
 800cabc:	e000      	b.n	800cac0 <prvGetNextExpireTime+0x18>
 800cabe:	2200      	movs	r2, #0
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d105      	bne.n	800cad8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cacc:	4b07      	ldr	r3, [pc, #28]	; (800caec <prvGetNextExpireTime+0x44>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	60fb      	str	r3, [r7, #12]
 800cad6:	e001      	b.n	800cadc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cad8:	2300      	movs	r3, #0
 800cada:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cadc:	68fb      	ldr	r3, [r7, #12]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	20001970 	.word	0x20001970

0800caf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800caf8:	f7ff fa7e 	bl	800bff8 <xTaskGetTickCount>
 800cafc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cafe:	4b0b      	ldr	r3, [pc, #44]	; (800cb2c <prvSampleTimeNow+0x3c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d205      	bcs.n	800cb14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cb08:	f000 f936 	bl	800cd78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	e002      	b.n	800cb1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cb1a:	4a04      	ldr	r2, [pc, #16]	; (800cb2c <prvSampleTimeNow+0x3c>)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cb20:	68fb      	ldr	r3, [r7, #12]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	20001980 	.word	0x20001980

0800cb30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b086      	sub	sp, #24
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
 800cb3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d812      	bhi.n	800cb7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	1ad2      	subs	r2, r2, r3
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	699b      	ldr	r3, [r3, #24]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d302      	bcc.n	800cb6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb64:	2301      	movs	r3, #1
 800cb66:	617b      	str	r3, [r7, #20]
 800cb68:	e01b      	b.n	800cba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb6a:	4b10      	ldr	r3, [pc, #64]	; (800cbac <prvInsertTimerInActiveList+0x7c>)
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	3304      	adds	r3, #4
 800cb72:	4619      	mov	r1, r3
 800cb74:	4610      	mov	r0, r2
 800cb76:	f7fe fa08 	bl	800af8a <vListInsert>
 800cb7a:	e012      	b.n	800cba2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d206      	bcs.n	800cb92 <prvInsertTimerInActiveList+0x62>
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d302      	bcc.n	800cb92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	617b      	str	r3, [r7, #20]
 800cb90:	e007      	b.n	800cba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb92:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <prvInsertTimerInActiveList+0x80>)
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3304      	adds	r3, #4
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	f7fe f9f4 	bl	800af8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cba2:	697b      	ldr	r3, [r7, #20]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3718      	adds	r7, #24
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	20001974 	.word	0x20001974
 800cbb0:	20001970 	.word	0x20001970

0800cbb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08e      	sub	sp, #56	; 0x38
 800cbb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbba:	e0ca      	b.n	800cd52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	da18      	bge.n	800cbf4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cbc2:	1d3b      	adds	r3, r7, #4
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d10a      	bne.n	800cbe4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	61fb      	str	r3, [r7, #28]
}
 800cbe0:	bf00      	nop
 800cbe2:	e7fe      	b.n	800cbe2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbea:	6850      	ldr	r0, [r2, #4]
 800cbec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbee:	6892      	ldr	r2, [r2, #8]
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f2c0 80aa 	blt.w	800cd50 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc02:	695b      	ldr	r3, [r3, #20]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d004      	beq.n	800cc12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0a:	3304      	adds	r3, #4
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7fe f9f5 	bl	800affc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc12:	463b      	mov	r3, r7
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7ff ff6b 	bl	800caf0 <prvSampleTimeNow>
 800cc1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b09      	cmp	r3, #9
 800cc20:	f200 8097 	bhi.w	800cd52 <prvProcessReceivedCommands+0x19e>
 800cc24:	a201      	add	r2, pc, #4	; (adr r2, 800cc2c <prvProcessReceivedCommands+0x78>)
 800cc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2a:	bf00      	nop
 800cc2c:	0800cc55 	.word	0x0800cc55
 800cc30:	0800cc55 	.word	0x0800cc55
 800cc34:	0800cc55 	.word	0x0800cc55
 800cc38:	0800ccc9 	.word	0x0800ccc9
 800cc3c:	0800ccdd 	.word	0x0800ccdd
 800cc40:	0800cd27 	.word	0x0800cd27
 800cc44:	0800cc55 	.word	0x0800cc55
 800cc48:	0800cc55 	.word	0x0800cc55
 800cc4c:	0800ccc9 	.word	0x0800ccc9
 800cc50:	0800ccdd 	.word	0x0800ccdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc5a:	f043 0301 	orr.w	r3, r3, #1
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6a:	699b      	ldr	r3, [r3, #24]
 800cc6c:	18d1      	adds	r1, r2, r3
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc74:	f7ff ff5c 	bl	800cb30 <prvInsertTimerInActiveList>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d069      	beq.n	800cd52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc8c:	f003 0304 	and.w	r3, r3, #4
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d05e      	beq.n	800cd52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc98:	699b      	ldr	r3, [r3, #24]
 800cc9a:	441a      	add	r2, r3
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	2300      	movs	r3, #0
 800cca2:	2100      	movs	r1, #0
 800cca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cca6:	f7ff fe05 	bl	800c8b4 <xTimerGenericCommand>
 800ccaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ccac:	6a3b      	ldr	r3, [r7, #32]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d14f      	bne.n	800cd52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	61bb      	str	r3, [r7, #24]
}
 800ccc4:	bf00      	nop
 800ccc6:	e7fe      	b.n	800ccc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccce:	f023 0301 	bic.w	r3, r3, #1
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ccda:	e03a      	b.n	800cd52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ccdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cce2:	f043 0301 	orr.w	r3, r3, #1
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ccf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf6:	699b      	ldr	r3, [r3, #24]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10a      	bne.n	800cd12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	617b      	str	r3, [r7, #20]
}
 800cd0e:	bf00      	nop
 800cd10:	e7fe      	b.n	800cd10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd14:	699a      	ldr	r2, [r3, #24]
 800cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd18:	18d1      	adds	r1, r2, r3
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd20:	f7ff ff06 	bl	800cb30 <prvInsertTimerInActiveList>
					break;
 800cd24:	e015      	b.n	800cd52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd2c:	f003 0302 	and.w	r3, r3, #2
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d103      	bne.n	800cd3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cd34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd36:	f000 fbdb 	bl	800d4f0 <vPortFree>
 800cd3a:	e00a      	b.n	800cd52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd42:	f023 0301 	bic.w	r3, r3, #1
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cd4e:	e000      	b.n	800cd52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cd50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd52:	4b08      	ldr	r3, [pc, #32]	; (800cd74 <prvProcessReceivedCommands+0x1c0>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	1d39      	adds	r1, r7, #4
 800cd58:	2200      	movs	r2, #0
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fe fc16 	bl	800b58c <xQueueReceive>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f47f af2a 	bne.w	800cbbc <prvProcessReceivedCommands+0x8>
	}
}
 800cd68:	bf00      	nop
 800cd6a:	bf00      	nop
 800cd6c:	3730      	adds	r7, #48	; 0x30
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	20001978 	.word	0x20001978

0800cd78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b088      	sub	sp, #32
 800cd7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd7e:	e048      	b.n	800ce12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd80:	4b2d      	ldr	r3, [pc, #180]	; (800ce38 <prvSwitchTimerLists+0xc0>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd8a:	4b2b      	ldr	r3, [pc, #172]	; (800ce38 <prvSwitchTimerLists+0xc0>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	3304      	adds	r3, #4
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7fe f92f 	bl	800affc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdac:	f003 0304 	and.w	r3, r3, #4
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d02e      	beq.n	800ce12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	699b      	ldr	r3, [r3, #24]
 800cdb8:	693a      	ldr	r2, [r7, #16]
 800cdba:	4413      	add	r3, r2
 800cdbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d90e      	bls.n	800cde4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdd2:	4b19      	ldr	r3, [pc, #100]	; (800ce38 <prvSwitchTimerLists+0xc0>)
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	3304      	adds	r3, #4
 800cdda:	4619      	mov	r1, r3
 800cddc:	4610      	mov	r0, r2
 800cdde:	f7fe f8d4 	bl	800af8a <vListInsert>
 800cde2:	e016      	b.n	800ce12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cde4:	2300      	movs	r3, #0
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	2300      	movs	r3, #0
 800cdea:	693a      	ldr	r2, [r7, #16]
 800cdec:	2100      	movs	r1, #0
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f7ff fd60 	bl	800c8b4 <xTimerGenericCommand>
 800cdf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10a      	bne.n	800ce12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce00:	f383 8811 	msr	BASEPRI, r3
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	603b      	str	r3, [r7, #0]
}
 800ce0e:	bf00      	nop
 800ce10:	e7fe      	b.n	800ce10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce12:	4b09      	ldr	r3, [pc, #36]	; (800ce38 <prvSwitchTimerLists+0xc0>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1b1      	bne.n	800cd80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ce1c:	4b06      	ldr	r3, [pc, #24]	; (800ce38 <prvSwitchTimerLists+0xc0>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ce22:	4b06      	ldr	r3, [pc, #24]	; (800ce3c <prvSwitchTimerLists+0xc4>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a04      	ldr	r2, [pc, #16]	; (800ce38 <prvSwitchTimerLists+0xc0>)
 800ce28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ce2a:	4a04      	ldr	r2, [pc, #16]	; (800ce3c <prvSwitchTimerLists+0xc4>)
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	6013      	str	r3, [r2, #0]
}
 800ce30:	bf00      	nop
 800ce32:	3718      	adds	r7, #24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	20001970 	.word	0x20001970
 800ce3c:	20001974 	.word	0x20001974

0800ce40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ce46:	f000 f965 	bl	800d114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ce4a:	4b15      	ldr	r3, [pc, #84]	; (800cea0 <prvCheckForValidListAndQueue+0x60>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d120      	bne.n	800ce94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce52:	4814      	ldr	r0, [pc, #80]	; (800cea4 <prvCheckForValidListAndQueue+0x64>)
 800ce54:	f7fe f848 	bl	800aee8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce58:	4813      	ldr	r0, [pc, #76]	; (800cea8 <prvCheckForValidListAndQueue+0x68>)
 800ce5a:	f7fe f845 	bl	800aee8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce5e:	4b13      	ldr	r3, [pc, #76]	; (800ceac <prvCheckForValidListAndQueue+0x6c>)
 800ce60:	4a10      	ldr	r2, [pc, #64]	; (800cea4 <prvCheckForValidListAndQueue+0x64>)
 800ce62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ce64:	4b12      	ldr	r3, [pc, #72]	; (800ceb0 <prvCheckForValidListAndQueue+0x70>)
 800ce66:	4a10      	ldr	r2, [pc, #64]	; (800cea8 <prvCheckForValidListAndQueue+0x68>)
 800ce68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	4b11      	ldr	r3, [pc, #68]	; (800ceb4 <prvCheckForValidListAndQueue+0x74>)
 800ce70:	4a11      	ldr	r2, [pc, #68]	; (800ceb8 <prvCheckForValidListAndQueue+0x78>)
 800ce72:	2110      	movs	r1, #16
 800ce74:	200a      	movs	r0, #10
 800ce76:	f7fe f953 	bl	800b120 <xQueueGenericCreateStatic>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	4a08      	ldr	r2, [pc, #32]	; (800cea0 <prvCheckForValidListAndQueue+0x60>)
 800ce7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce80:	4b07      	ldr	r3, [pc, #28]	; (800cea0 <prvCheckForValidListAndQueue+0x60>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d005      	beq.n	800ce94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce88:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <prvCheckForValidListAndQueue+0x60>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	490b      	ldr	r1, [pc, #44]	; (800cebc <prvCheckForValidListAndQueue+0x7c>)
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fe fd6c 	bl	800b96c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce94:	f000 f96e 	bl	800d174 <vPortExitCritical>
}
 800ce98:	bf00      	nop
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	20001978 	.word	0x20001978
 800cea4:	20001948 	.word	0x20001948
 800cea8:	2000195c 	.word	0x2000195c
 800ceac:	20001970 	.word	0x20001970
 800ceb0:	20001974 	.word	0x20001974
 800ceb4:	20001a24 	.word	0x20001a24
 800ceb8:	20001984 	.word	0x20001984
 800cebc:	080158c8 	.word	0x080158c8

0800cec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	3b04      	subs	r3, #4
 800ced0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ced8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	3b04      	subs	r3, #4
 800cede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	f023 0201 	bic.w	r2, r3, #1
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	3b04      	subs	r3, #4
 800ceee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cef0:	4a0c      	ldr	r2, [pc, #48]	; (800cf24 <pxPortInitialiseStack+0x64>)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	3b14      	subs	r3, #20
 800cefa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3b04      	subs	r3, #4
 800cf06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f06f 0202 	mvn.w	r2, #2
 800cf0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	3b20      	subs	r3, #32
 800cf14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf16:	68fb      	ldr	r3, [r7, #12]
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3714      	adds	r7, #20
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr
 800cf24:	0800cf29 	.word	0x0800cf29

0800cf28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf32:	4b12      	ldr	r3, [pc, #72]	; (800cf7c <prvTaskExitError+0x54>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf3a:	d00a      	beq.n	800cf52 <prvTaskExitError+0x2a>
	__asm volatile
 800cf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf40:	f383 8811 	msr	BASEPRI, r3
 800cf44:	f3bf 8f6f 	isb	sy
 800cf48:	f3bf 8f4f 	dsb	sy
 800cf4c:	60fb      	str	r3, [r7, #12]
}
 800cf4e:	bf00      	nop
 800cf50:	e7fe      	b.n	800cf50 <prvTaskExitError+0x28>
	__asm volatile
 800cf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	60bb      	str	r3, [r7, #8]
}
 800cf64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf66:	bf00      	nop
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d0fc      	beq.n	800cf68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf6e:	bf00      	nop
 800cf70:	bf00      	nop
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr
 800cf7c:	200000c8 	.word	0x200000c8

0800cf80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf80:	4b07      	ldr	r3, [pc, #28]	; (800cfa0 <pxCurrentTCBConst2>)
 800cf82:	6819      	ldr	r1, [r3, #0]
 800cf84:	6808      	ldr	r0, [r1, #0]
 800cf86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8a:	f380 8809 	msr	PSP, r0
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f04f 0000 	mov.w	r0, #0
 800cf96:	f380 8811 	msr	BASEPRI, r0
 800cf9a:	4770      	bx	lr
 800cf9c:	f3af 8000 	nop.w

0800cfa0 <pxCurrentTCBConst2>:
 800cfa0:	20001448 	.word	0x20001448
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cfa4:	bf00      	nop
 800cfa6:	bf00      	nop

0800cfa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cfa8:	4808      	ldr	r0, [pc, #32]	; (800cfcc <prvPortStartFirstTask+0x24>)
 800cfaa:	6800      	ldr	r0, [r0, #0]
 800cfac:	6800      	ldr	r0, [r0, #0]
 800cfae:	f380 8808 	msr	MSP, r0
 800cfb2:	f04f 0000 	mov.w	r0, #0
 800cfb6:	f380 8814 	msr	CONTROL, r0
 800cfba:	b662      	cpsie	i
 800cfbc:	b661      	cpsie	f
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	df00      	svc	0
 800cfc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cfca:	bf00      	nop
 800cfcc:	e000ed08 	.word	0xe000ed08

0800cfd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cfd6:	4b46      	ldr	r3, [pc, #280]	; (800d0f0 <xPortStartScheduler+0x120>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a46      	ldr	r2, [pc, #280]	; (800d0f4 <xPortStartScheduler+0x124>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d10a      	bne.n	800cff6 <xPortStartScheduler+0x26>
	__asm volatile
 800cfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe4:	f383 8811 	msr	BASEPRI, r3
 800cfe8:	f3bf 8f6f 	isb	sy
 800cfec:	f3bf 8f4f 	dsb	sy
 800cff0:	613b      	str	r3, [r7, #16]
}
 800cff2:	bf00      	nop
 800cff4:	e7fe      	b.n	800cff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cff6:	4b3e      	ldr	r3, [pc, #248]	; (800d0f0 <xPortStartScheduler+0x120>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a3f      	ldr	r2, [pc, #252]	; (800d0f8 <xPortStartScheduler+0x128>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d10a      	bne.n	800d016 <xPortStartScheduler+0x46>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	60fb      	str	r3, [r7, #12]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d016:	4b39      	ldr	r3, [pc, #228]	; (800d0fc <xPortStartScheduler+0x12c>)
 800d018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	22ff      	movs	r2, #255	; 0xff
 800d026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d030:	78fb      	ldrb	r3, [r7, #3]
 800d032:	b2db      	uxtb	r3, r3
 800d034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	4b31      	ldr	r3, [pc, #196]	; (800d100 <xPortStartScheduler+0x130>)
 800d03c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d03e:	4b31      	ldr	r3, [pc, #196]	; (800d104 <xPortStartScheduler+0x134>)
 800d040:	2207      	movs	r2, #7
 800d042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d044:	e009      	b.n	800d05a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d046:	4b2f      	ldr	r3, [pc, #188]	; (800d104 <xPortStartScheduler+0x134>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	4a2d      	ldr	r2, [pc, #180]	; (800d104 <xPortStartScheduler+0x134>)
 800d04e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d050:	78fb      	ldrb	r3, [r7, #3]
 800d052:	b2db      	uxtb	r3, r3
 800d054:	005b      	lsls	r3, r3, #1
 800d056:	b2db      	uxtb	r3, r3
 800d058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d05a:	78fb      	ldrb	r3, [r7, #3]
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d062:	2b80      	cmp	r3, #128	; 0x80
 800d064:	d0ef      	beq.n	800d046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d066:	4b27      	ldr	r3, [pc, #156]	; (800d104 <xPortStartScheduler+0x134>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f1c3 0307 	rsb	r3, r3, #7
 800d06e:	2b04      	cmp	r3, #4
 800d070:	d00a      	beq.n	800d088 <xPortStartScheduler+0xb8>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	60bb      	str	r3, [r7, #8]
}
 800d084:	bf00      	nop
 800d086:	e7fe      	b.n	800d086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d088:	4b1e      	ldr	r3, [pc, #120]	; (800d104 <xPortStartScheduler+0x134>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	021b      	lsls	r3, r3, #8
 800d08e:	4a1d      	ldr	r2, [pc, #116]	; (800d104 <xPortStartScheduler+0x134>)
 800d090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d092:	4b1c      	ldr	r3, [pc, #112]	; (800d104 <xPortStartScheduler+0x134>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d09a:	4a1a      	ldr	r2, [pc, #104]	; (800d104 <xPortStartScheduler+0x134>)
 800d09c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d0a6:	4b18      	ldr	r3, [pc, #96]	; (800d108 <xPortStartScheduler+0x138>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a17      	ldr	r2, [pc, #92]	; (800d108 <xPortStartScheduler+0x138>)
 800d0ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d0b2:	4b15      	ldr	r3, [pc, #84]	; (800d108 <xPortStartScheduler+0x138>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a14      	ldr	r2, [pc, #80]	; (800d108 <xPortStartScheduler+0x138>)
 800d0b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d0bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d0be:	f000 f8dd 	bl	800d27c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d0c2:	4b12      	ldr	r3, [pc, #72]	; (800d10c <xPortStartScheduler+0x13c>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d0c8:	f000 f8fc 	bl	800d2c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d0cc:	4b10      	ldr	r3, [pc, #64]	; (800d110 <xPortStartScheduler+0x140>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a0f      	ldr	r2, [pc, #60]	; (800d110 <xPortStartScheduler+0x140>)
 800d0d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d0d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d0d8:	f7ff ff66 	bl	800cfa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d0dc:	f7ff f856 	bl	800c18c <vTaskSwitchContext>
	prvTaskExitError();
 800d0e0:	f7ff ff22 	bl	800cf28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3718      	adds	r7, #24
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	e000ed00 	.word	0xe000ed00
 800d0f4:	410fc271 	.word	0x410fc271
 800d0f8:	410fc270 	.word	0x410fc270
 800d0fc:	e000e400 	.word	0xe000e400
 800d100:	20001a74 	.word	0x20001a74
 800d104:	20001a78 	.word	0x20001a78
 800d108:	e000ed20 	.word	0xe000ed20
 800d10c:	200000c8 	.word	0x200000c8
 800d110:	e000ef34 	.word	0xe000ef34

0800d114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
	__asm volatile
 800d11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11e:	f383 8811 	msr	BASEPRI, r3
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	607b      	str	r3, [r7, #4]
}
 800d12c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d12e:	4b0f      	ldr	r3, [pc, #60]	; (800d16c <vPortEnterCritical+0x58>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	3301      	adds	r3, #1
 800d134:	4a0d      	ldr	r2, [pc, #52]	; (800d16c <vPortEnterCritical+0x58>)
 800d136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d138:	4b0c      	ldr	r3, [pc, #48]	; (800d16c <vPortEnterCritical+0x58>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d10f      	bne.n	800d160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d140:	4b0b      	ldr	r3, [pc, #44]	; (800d170 <vPortEnterCritical+0x5c>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	b2db      	uxtb	r3, r3
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00a      	beq.n	800d160 <vPortEnterCritical+0x4c>
	__asm volatile
 800d14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14e:	f383 8811 	msr	BASEPRI, r3
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	603b      	str	r3, [r7, #0]
}
 800d15c:	bf00      	nop
 800d15e:	e7fe      	b.n	800d15e <vPortEnterCritical+0x4a>
	}
}
 800d160:	bf00      	nop
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr
 800d16c:	200000c8 	.word	0x200000c8
 800d170:	e000ed04 	.word	0xe000ed04

0800d174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d17a:	4b12      	ldr	r3, [pc, #72]	; (800d1c4 <vPortExitCritical+0x50>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10a      	bne.n	800d198 <vPortExitCritical+0x24>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	607b      	str	r3, [r7, #4]
}
 800d194:	bf00      	nop
 800d196:	e7fe      	b.n	800d196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d198:	4b0a      	ldr	r3, [pc, #40]	; (800d1c4 <vPortExitCritical+0x50>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	4a09      	ldr	r2, [pc, #36]	; (800d1c4 <vPortExitCritical+0x50>)
 800d1a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d1a2:	4b08      	ldr	r3, [pc, #32]	; (800d1c4 <vPortExitCritical+0x50>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d105      	bne.n	800d1b6 <vPortExitCritical+0x42>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	f383 8811 	msr	BASEPRI, r3
}
 800d1b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1b6:	bf00      	nop
 800d1b8:	370c      	adds	r7, #12
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	200000c8 	.word	0x200000c8
	...

0800d1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d1d0:	f3ef 8009 	mrs	r0, PSP
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	4b15      	ldr	r3, [pc, #84]	; (800d230 <pxCurrentTCBConst>)
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	f01e 0f10 	tst.w	lr, #16
 800d1e0:	bf08      	it	eq
 800d1e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d1e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ea:	6010      	str	r0, [r2, #0]
 800d1ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d1f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d1f4:	f380 8811 	msr	BASEPRI, r0
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f7fe ffc4 	bl	800c18c <vTaskSwitchContext>
 800d204:	f04f 0000 	mov.w	r0, #0
 800d208:	f380 8811 	msr	BASEPRI, r0
 800d20c:	bc09      	pop	{r0, r3}
 800d20e:	6819      	ldr	r1, [r3, #0]
 800d210:	6808      	ldr	r0, [r1, #0]
 800d212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d216:	f01e 0f10 	tst.w	lr, #16
 800d21a:	bf08      	it	eq
 800d21c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d220:	f380 8809 	msr	PSP, r0
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	f3af 8000 	nop.w

0800d230 <pxCurrentTCBConst>:
 800d230:	20001448 	.word	0x20001448
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d234:	bf00      	nop
 800d236:	bf00      	nop

0800d238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	607b      	str	r3, [r7, #4]
}
 800d250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d252:	f7fe fee1 	bl	800c018 <xTaskIncrementTick>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d003      	beq.n	800d264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d25c:	4b06      	ldr	r3, [pc, #24]	; (800d278 <xPortSysTickHandler+0x40>)
 800d25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	2300      	movs	r3, #0
 800d266:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	f383 8811 	msr	BASEPRI, r3
}
 800d26e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	e000ed04 	.word	0xe000ed04

0800d27c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d27c:	b480      	push	{r7}
 800d27e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d280:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <vPortSetupTimerInterrupt+0x34>)
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d286:	4b0b      	ldr	r3, [pc, #44]	; (800d2b4 <vPortSetupTimerInterrupt+0x38>)
 800d288:	2200      	movs	r2, #0
 800d28a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d28c:	4b0a      	ldr	r3, [pc, #40]	; (800d2b8 <vPortSetupTimerInterrupt+0x3c>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a0a      	ldr	r2, [pc, #40]	; (800d2bc <vPortSetupTimerInterrupt+0x40>)
 800d292:	fba2 2303 	umull	r2, r3, r2, r3
 800d296:	099b      	lsrs	r3, r3, #6
 800d298:	4a09      	ldr	r2, [pc, #36]	; (800d2c0 <vPortSetupTimerInterrupt+0x44>)
 800d29a:	3b01      	subs	r3, #1
 800d29c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d29e:	4b04      	ldr	r3, [pc, #16]	; (800d2b0 <vPortSetupTimerInterrupt+0x34>)
 800d2a0:	2207      	movs	r2, #7
 800d2a2:	601a      	str	r2, [r3, #0]
}
 800d2a4:	bf00      	nop
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop
 800d2b0:	e000e010 	.word	0xe000e010
 800d2b4:	e000e018 	.word	0xe000e018
 800d2b8:	20000004 	.word	0x20000004
 800d2bc:	10624dd3 	.word	0x10624dd3
 800d2c0:	e000e014 	.word	0xe000e014

0800d2c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d2c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d2d4 <vPortEnableVFP+0x10>
 800d2c8:	6801      	ldr	r1, [r0, #0]
 800d2ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d2ce:	6001      	str	r1, [r0, #0]
 800d2d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d2d2:	bf00      	nop
 800d2d4:	e000ed88 	.word	0xe000ed88

0800d2d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d2de:	f3ef 8305 	mrs	r3, IPSR
 800d2e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2b0f      	cmp	r3, #15
 800d2e8:	d914      	bls.n	800d314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d2ea:	4a17      	ldr	r2, [pc, #92]	; (800d348 <vPortValidateInterruptPriority+0x70>)
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d2f4:	4b15      	ldr	r3, [pc, #84]	; (800d34c <vPortValidateInterruptPriority+0x74>)
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	7afa      	ldrb	r2, [r7, #11]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d20a      	bcs.n	800d314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	607b      	str	r3, [r7, #4]
}
 800d310:	bf00      	nop
 800d312:	e7fe      	b.n	800d312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d314:	4b0e      	ldr	r3, [pc, #56]	; (800d350 <vPortValidateInterruptPriority+0x78>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d31c:	4b0d      	ldr	r3, [pc, #52]	; (800d354 <vPortValidateInterruptPriority+0x7c>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	d90a      	bls.n	800d33a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	603b      	str	r3, [r7, #0]
}
 800d336:	bf00      	nop
 800d338:	e7fe      	b.n	800d338 <vPortValidateInterruptPriority+0x60>
	}
 800d33a:	bf00      	nop
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	e000e3f0 	.word	0xe000e3f0
 800d34c:	20001a74 	.word	0x20001a74
 800d350:	e000ed0c 	.word	0xe000ed0c
 800d354:	20001a78 	.word	0x20001a78

0800d358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08a      	sub	sp, #40	; 0x28
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d360:	2300      	movs	r3, #0
 800d362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d364:	f7fe fd9c 	bl	800bea0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d368:	4b5b      	ldr	r3, [pc, #364]	; (800d4d8 <pvPortMalloc+0x180>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d370:	f000 f920 	bl	800d5b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d374:	4b59      	ldr	r3, [pc, #356]	; (800d4dc <pvPortMalloc+0x184>)
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4013      	ands	r3, r2
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f040 8093 	bne.w	800d4a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d01d      	beq.n	800d3c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d388:	2208      	movs	r2, #8
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4413      	add	r3, r2
 800d38e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f003 0307 	and.w	r3, r3, #7
 800d396:	2b00      	cmp	r3, #0
 800d398:	d014      	beq.n	800d3c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f023 0307 	bic.w	r3, r3, #7
 800d3a0:	3308      	adds	r3, #8
 800d3a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f003 0307 	and.w	r3, r3, #7
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00a      	beq.n	800d3c4 <pvPortMalloc+0x6c>
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	617b      	str	r3, [r7, #20]
}
 800d3c0:	bf00      	nop
 800d3c2:	e7fe      	b.n	800d3c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d06e      	beq.n	800d4a8 <pvPortMalloc+0x150>
 800d3ca:	4b45      	ldr	r3, [pc, #276]	; (800d4e0 <pvPortMalloc+0x188>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d869      	bhi.n	800d4a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d3d4:	4b43      	ldr	r3, [pc, #268]	; (800d4e4 <pvPortMalloc+0x18c>)
 800d3d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d3d8:	4b42      	ldr	r3, [pc, #264]	; (800d4e4 <pvPortMalloc+0x18c>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3de:	e004      	b.n	800d3ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d903      	bls.n	800d3fc <pvPortMalloc+0xa4>
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1f1      	bne.n	800d3e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d3fc:	4b36      	ldr	r3, [pc, #216]	; (800d4d8 <pvPortMalloc+0x180>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d402:	429a      	cmp	r2, r3
 800d404:	d050      	beq.n	800d4a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d406:	6a3b      	ldr	r3, [r7, #32]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	2208      	movs	r2, #8
 800d40c:	4413      	add	r3, r2
 800d40e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	6a3b      	ldr	r3, [r7, #32]
 800d416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	1ad2      	subs	r2, r2, r3
 800d420:	2308      	movs	r3, #8
 800d422:	005b      	lsls	r3, r3, #1
 800d424:	429a      	cmp	r2, r3
 800d426:	d91f      	bls.n	800d468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4413      	add	r3, r2
 800d42e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	f003 0307 	and.w	r3, r3, #7
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00a      	beq.n	800d450 <pvPortMalloc+0xf8>
	__asm volatile
 800d43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43e:	f383 8811 	msr	BASEPRI, r3
 800d442:	f3bf 8f6f 	isb	sy
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	613b      	str	r3, [r7, #16]
}
 800d44c:	bf00      	nop
 800d44e:	e7fe      	b.n	800d44e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	685a      	ldr	r2, [r3, #4]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	1ad2      	subs	r2, r2, r3
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d462:	69b8      	ldr	r0, [r7, #24]
 800d464:	f000 f908 	bl	800d678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d468:	4b1d      	ldr	r3, [pc, #116]	; (800d4e0 <pvPortMalloc+0x188>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	4a1b      	ldr	r2, [pc, #108]	; (800d4e0 <pvPortMalloc+0x188>)
 800d474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d476:	4b1a      	ldr	r3, [pc, #104]	; (800d4e0 <pvPortMalloc+0x188>)
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	4b1b      	ldr	r3, [pc, #108]	; (800d4e8 <pvPortMalloc+0x190>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d203      	bcs.n	800d48a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d482:	4b17      	ldr	r3, [pc, #92]	; (800d4e0 <pvPortMalloc+0x188>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a18      	ldr	r2, [pc, #96]	; (800d4e8 <pvPortMalloc+0x190>)
 800d488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	685a      	ldr	r2, [r3, #4]
 800d48e:	4b13      	ldr	r3, [pc, #76]	; (800d4dc <pvPortMalloc+0x184>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	431a      	orrs	r2, r3
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	2200      	movs	r2, #0
 800d49c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d49e:	4b13      	ldr	r3, [pc, #76]	; (800d4ec <pvPortMalloc+0x194>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	4a11      	ldr	r2, [pc, #68]	; (800d4ec <pvPortMalloc+0x194>)
 800d4a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d4a8:	f7fe fd08 	bl	800bebc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	f003 0307 	and.w	r3, r3, #7
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00a      	beq.n	800d4cc <pvPortMalloc+0x174>
	__asm volatile
 800d4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	60fb      	str	r3, [r7, #12]
}
 800d4c8:	bf00      	nop
 800d4ca:	e7fe      	b.n	800d4ca <pvPortMalloc+0x172>
	return pvReturn;
 800d4cc:	69fb      	ldr	r3, [r7, #28]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3728      	adds	r7, #40	; 0x28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	20005684 	.word	0x20005684
 800d4dc:	20005698 	.word	0x20005698
 800d4e0:	20005688 	.word	0x20005688
 800d4e4:	2000567c 	.word	0x2000567c
 800d4e8:	2000568c 	.word	0x2000568c
 800d4ec:	20005690 	.word	0x20005690

0800d4f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d04d      	beq.n	800d59e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d502:	2308      	movs	r3, #8
 800d504:	425b      	negs	r3, r3
 800d506:	697a      	ldr	r2, [r7, #20]
 800d508:	4413      	add	r3, r2
 800d50a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	685a      	ldr	r2, [r3, #4]
 800d514:	4b24      	ldr	r3, [pc, #144]	; (800d5a8 <vPortFree+0xb8>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4013      	ands	r3, r2
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10a      	bne.n	800d534 <vPortFree+0x44>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	60fb      	str	r3, [r7, #12]
}
 800d530:	bf00      	nop
 800d532:	e7fe      	b.n	800d532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00a      	beq.n	800d552 <vPortFree+0x62>
	__asm volatile
 800d53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d540:	f383 8811 	msr	BASEPRI, r3
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	60bb      	str	r3, [r7, #8]
}
 800d54e:	bf00      	nop
 800d550:	e7fe      	b.n	800d550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	685a      	ldr	r2, [r3, #4]
 800d556:	4b14      	ldr	r3, [pc, #80]	; (800d5a8 <vPortFree+0xb8>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4013      	ands	r3, r2
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d01e      	beq.n	800d59e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d11a      	bne.n	800d59e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	4b0e      	ldr	r3, [pc, #56]	; (800d5a8 <vPortFree+0xb8>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	43db      	mvns	r3, r3
 800d572:	401a      	ands	r2, r3
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d578:	f7fe fc92 	bl	800bea0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	685a      	ldr	r2, [r3, #4]
 800d580:	4b0a      	ldr	r3, [pc, #40]	; (800d5ac <vPortFree+0xbc>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4413      	add	r3, r2
 800d586:	4a09      	ldr	r2, [pc, #36]	; (800d5ac <vPortFree+0xbc>)
 800d588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d58a:	6938      	ldr	r0, [r7, #16]
 800d58c:	f000 f874 	bl	800d678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d590:	4b07      	ldr	r3, [pc, #28]	; (800d5b0 <vPortFree+0xc0>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3301      	adds	r3, #1
 800d596:	4a06      	ldr	r2, [pc, #24]	; (800d5b0 <vPortFree+0xc0>)
 800d598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d59a:	f7fe fc8f 	bl	800bebc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d59e:	bf00      	nop
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	20005698 	.word	0x20005698
 800d5ac:	20005688 	.word	0x20005688
 800d5b0:	20005694 	.word	0x20005694

0800d5b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d5be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5c0:	4b27      	ldr	r3, [pc, #156]	; (800d660 <prvHeapInit+0xac>)
 800d5c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f003 0307 	and.w	r3, r3, #7
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00c      	beq.n	800d5e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3307      	adds	r3, #7
 800d5d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f023 0307 	bic.w	r3, r3, #7
 800d5da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	4a1f      	ldr	r2, [pc, #124]	; (800d660 <prvHeapInit+0xac>)
 800d5e4:	4413      	add	r3, r2
 800d5e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d5ec:	4a1d      	ldr	r2, [pc, #116]	; (800d664 <prvHeapInit+0xb0>)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d5f2:	4b1c      	ldr	r3, [pc, #112]	; (800d664 <prvHeapInit+0xb0>)
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d600:	2208      	movs	r2, #8
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	1a9b      	subs	r3, r3, r2
 800d606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f023 0307 	bic.w	r3, r3, #7
 800d60e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	4a15      	ldr	r2, [pc, #84]	; (800d668 <prvHeapInit+0xb4>)
 800d614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d616:	4b14      	ldr	r3, [pc, #80]	; (800d668 <prvHeapInit+0xb4>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2200      	movs	r2, #0
 800d61c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d61e:	4b12      	ldr	r3, [pc, #72]	; (800d668 <prvHeapInit+0xb4>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	1ad2      	subs	r2, r2, r3
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d634:	4b0c      	ldr	r3, [pc, #48]	; (800d668 <prvHeapInit+0xb4>)
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	4a0a      	ldr	r2, [pc, #40]	; (800d66c <prvHeapInit+0xb8>)
 800d642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	4a09      	ldr	r2, [pc, #36]	; (800d670 <prvHeapInit+0xbc>)
 800d64a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d64c:	4b09      	ldr	r3, [pc, #36]	; (800d674 <prvHeapInit+0xc0>)
 800d64e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d652:	601a      	str	r2, [r3, #0]
}
 800d654:	bf00      	nop
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	20001a7c 	.word	0x20001a7c
 800d664:	2000567c 	.word	0x2000567c
 800d668:	20005684 	.word	0x20005684
 800d66c:	2000568c 	.word	0x2000568c
 800d670:	20005688 	.word	0x20005688
 800d674:	20005698 	.word	0x20005698

0800d678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d680:	4b28      	ldr	r3, [pc, #160]	; (800d724 <prvInsertBlockIntoFreeList+0xac>)
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	e002      	b.n	800d68c <prvInsertBlockIntoFreeList+0x14>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	60fb      	str	r3, [r7, #12]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	429a      	cmp	r2, r3
 800d694:	d8f7      	bhi.n	800d686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	68ba      	ldr	r2, [r7, #8]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d108      	bne.n	800d6ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	441a      	add	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	441a      	add	r2, r3
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d118      	bne.n	800d700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	4b15      	ldr	r3, [pc, #84]	; (800d728 <prvInsertBlockIntoFreeList+0xb0>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d00d      	beq.n	800d6f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685a      	ldr	r2, [r3, #4]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	441a      	add	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	e008      	b.n	800d708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d6f6:	4b0c      	ldr	r3, [pc, #48]	; (800d728 <prvInsertBlockIntoFreeList+0xb0>)
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	601a      	str	r2, [r3, #0]
 800d6fe:	e003      	b.n	800d708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d002      	beq.n	800d716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d716:	bf00      	nop
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	2000567c 	.word	0x2000567c
 800d728:	20005684 	.word	0x20005684

0800d72c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d730:	2201      	movs	r2, #1
 800d732:	4912      	ldr	r1, [pc, #72]	; (800d77c <MX_USB_DEVICE_Init+0x50>)
 800d734:	4812      	ldr	r0, [pc, #72]	; (800d780 <MX_USB_DEVICE_Init+0x54>)
 800d736:	f7fc f8ef 	bl	8009918 <USBD_Init>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d004      	beq.n	800d74a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800d740:	4b10      	ldr	r3, [pc, #64]	; (800d784 <MX_USB_DEVICE_Init+0x58>)
 800d742:	2201      	movs	r2, #1
 800d744:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800d746:	f7f4 fc81 	bl	800204c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800d74a:	490f      	ldr	r1, [pc, #60]	; (800d788 <MX_USB_DEVICE_Init+0x5c>)
 800d74c:	480c      	ldr	r0, [pc, #48]	; (800d780 <MX_USB_DEVICE_Init+0x54>)
 800d74e:	f7fc f913 	bl	8009978 <USBD_RegisterClass>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d004      	beq.n	800d762 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800d758:	4b0a      	ldr	r3, [pc, #40]	; (800d784 <MX_USB_DEVICE_Init+0x58>)
 800d75a:	2201      	movs	r2, #1
 800d75c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800d75e:	f7f4 fc75 	bl	800204c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d762:	4807      	ldr	r0, [pc, #28]	; (800d780 <MX_USB_DEVICE_Init+0x54>)
 800d764:	f7fc f92f 	bl	80099c6 <USBD_Start>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d004      	beq.n	800d778 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800d76e:	4b05      	ldr	r3, [pc, #20]	; (800d784 <MX_USB_DEVICE_Init+0x58>)
 800d770:	2201      	movs	r2, #1
 800d772:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800d774:	f7f4 fc6a 	bl	800204c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d778:	bf00      	nop
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	200000cc 	.word	0x200000cc
 800d780:	20005768 	.word	0x20005768
 800d784:	2000569c 	.word	0x2000569c
 800d788:	20000018 	.word	0x20000018

0800d78c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	4603      	mov	r3, r0
 800d794:	6039      	str	r1, [r7, #0]
 800d796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	2212      	movs	r2, #18
 800d79c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d79e:	4b03      	ldr	r3, [pc, #12]	; (800d7ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr
 800d7ac:	200000e8 	.word	0x200000e8

0800d7b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	6039      	str	r1, [r7, #0]
 800d7ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	2204      	movs	r2, #4
 800d7c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d7c2:	4b03      	ldr	r3, [pc, #12]	; (800d7d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	200000fc 	.word	0x200000fc

0800d7d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	4603      	mov	r3, r0
 800d7dc:	6039      	str	r1, [r7, #0]
 800d7de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7e0:	79fb      	ldrb	r3, [r7, #7]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d105      	bne.n	800d7f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	4907      	ldr	r1, [pc, #28]	; (800d808 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7ea:	4808      	ldr	r0, [pc, #32]	; (800d80c <USBD_FS_ProductStrDescriptor+0x38>)
 800d7ec:	f7fd f92b 	bl	800aa46 <USBD_GetString>
 800d7f0:	e004      	b.n	800d7fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7f2:	683a      	ldr	r2, [r7, #0]
 800d7f4:	4904      	ldr	r1, [pc, #16]	; (800d808 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7f6:	4805      	ldr	r0, [pc, #20]	; (800d80c <USBD_FS_ProductStrDescriptor+0x38>)
 800d7f8:	f7fd f925 	bl	800aa46 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7fc:	4b02      	ldr	r3, [pc, #8]	; (800d808 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	20005a38 	.word	0x20005a38
 800d80c:	080158d0 	.word	0x080158d0

0800d810 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	4603      	mov	r3, r0
 800d818:	6039      	str	r1, [r7, #0]
 800d81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d81c:	683a      	ldr	r2, [r7, #0]
 800d81e:	4904      	ldr	r1, [pc, #16]	; (800d830 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d820:	4804      	ldr	r0, [pc, #16]	; (800d834 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d822:	f7fd f910 	bl	800aa46 <USBD_GetString>
  return USBD_StrDesc;
 800d826:	4b02      	ldr	r3, [pc, #8]	; (800d830 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	20005a38 	.word	0x20005a38
 800d834:	080158e8 	.word	0x080158e8

0800d838 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	4603      	mov	r3, r0
 800d840:	6039      	str	r1, [r7, #0]
 800d842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	221a      	movs	r2, #26
 800d848:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d84a:	f000 f843 	bl	800d8d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d84e:	4b02      	ldr	r3, [pc, #8]	; (800d858 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	20000100 	.word	0x20000100

0800d85c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	4603      	mov	r3, r0
 800d864:	6039      	str	r1, [r7, #0]
 800d866:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d868:	79fb      	ldrb	r3, [r7, #7]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d105      	bne.n	800d87a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	4907      	ldr	r1, [pc, #28]	; (800d890 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d872:	4808      	ldr	r0, [pc, #32]	; (800d894 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d874:	f7fd f8e7 	bl	800aa46 <USBD_GetString>
 800d878:	e004      	b.n	800d884 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	4904      	ldr	r1, [pc, #16]	; (800d890 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d87e:	4805      	ldr	r0, [pc, #20]	; (800d894 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d880:	f7fd f8e1 	bl	800aa46 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d884:	4b02      	ldr	r3, [pc, #8]	; (800d890 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d886:	4618      	mov	r0, r3
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	20005a38 	.word	0x20005a38
 800d894:	080158fc 	.word	0x080158fc

0800d898 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	4603      	mov	r3, r0
 800d8a0:	6039      	str	r1, [r7, #0]
 800d8a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8a4:	79fb      	ldrb	r3, [r7, #7]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d105      	bne.n	800d8b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	4907      	ldr	r1, [pc, #28]	; (800d8cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8ae:	4808      	ldr	r0, [pc, #32]	; (800d8d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8b0:	f7fd f8c9 	bl	800aa46 <USBD_GetString>
 800d8b4:	e004      	b.n	800d8c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	4904      	ldr	r1, [pc, #16]	; (800d8cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8ba:	4805      	ldr	r0, [pc, #20]	; (800d8d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8bc:	f7fd f8c3 	bl	800aa46 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8c0:	4b02      	ldr	r3, [pc, #8]	; (800d8cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20005a38 	.word	0x20005a38
 800d8d0:	08015908 	.word	0x08015908

0800d8d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8da:	4b0f      	ldr	r3, [pc, #60]	; (800d918 <Get_SerialNum+0x44>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8e0:	4b0e      	ldr	r3, [pc, #56]	; (800d91c <Get_SerialNum+0x48>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8e6:	4b0e      	ldr	r3, [pc, #56]	; (800d920 <Get_SerialNum+0x4c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d009      	beq.n	800d90e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8fa:	2208      	movs	r2, #8
 800d8fc:	4909      	ldr	r1, [pc, #36]	; (800d924 <Get_SerialNum+0x50>)
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f000 f814 	bl	800d92c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d904:	2204      	movs	r2, #4
 800d906:	4908      	ldr	r1, [pc, #32]	; (800d928 <Get_SerialNum+0x54>)
 800d908:	68b8      	ldr	r0, [r7, #8]
 800d90a:	f000 f80f 	bl	800d92c <IntToUnicode>
  }
}
 800d90e:	bf00      	nop
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	1fff7a10 	.word	0x1fff7a10
 800d91c:	1fff7a14 	.word	0x1fff7a14
 800d920:	1fff7a18 	.word	0x1fff7a18
 800d924:	20000102 	.word	0x20000102
 800d928:	20000112 	.word	0x20000112

0800d92c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b087      	sub	sp, #28
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	4613      	mov	r3, r2
 800d938:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d93e:	2300      	movs	r3, #0
 800d940:	75fb      	strb	r3, [r7, #23]
 800d942:	e027      	b.n	800d994 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	0f1b      	lsrs	r3, r3, #28
 800d948:	2b09      	cmp	r3, #9
 800d94a:	d80b      	bhi.n	800d964 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	0f1b      	lsrs	r3, r3, #28
 800d950:	b2da      	uxtb	r2, r3
 800d952:	7dfb      	ldrb	r3, [r7, #23]
 800d954:	005b      	lsls	r3, r3, #1
 800d956:	4619      	mov	r1, r3
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	440b      	add	r3, r1
 800d95c:	3230      	adds	r2, #48	; 0x30
 800d95e:	b2d2      	uxtb	r2, r2
 800d960:	701a      	strb	r2, [r3, #0]
 800d962:	e00a      	b.n	800d97a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	0f1b      	lsrs	r3, r3, #28
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	7dfb      	ldrb	r3, [r7, #23]
 800d96c:	005b      	lsls	r3, r3, #1
 800d96e:	4619      	mov	r1, r3
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	440b      	add	r3, r1
 800d974:	3237      	adds	r2, #55	; 0x37
 800d976:	b2d2      	uxtb	r2, r2
 800d978:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	011b      	lsls	r3, r3, #4
 800d97e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d980:	7dfb      	ldrb	r3, [r7, #23]
 800d982:	005b      	lsls	r3, r3, #1
 800d984:	3301      	adds	r3, #1
 800d986:	68ba      	ldr	r2, [r7, #8]
 800d988:	4413      	add	r3, r2
 800d98a:	2200      	movs	r2, #0
 800d98c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d98e:	7dfb      	ldrb	r3, [r7, #23]
 800d990:	3301      	adds	r3, #1
 800d992:	75fb      	strb	r3, [r7, #23]
 800d994:	7dfa      	ldrb	r2, [r7, #23]
 800d996:	79fb      	ldrb	r3, [r7, #7]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d3d3      	bcc.n	800d944 <IntToUnicode+0x18>
  }
}
 800d99c:	bf00      	nop
 800d99e:	bf00      	nop
 800d9a0:	371c      	adds	r7, #28
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr
	...

0800d9ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b08a      	sub	sp, #40	; 0x28
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9b4:	f107 0314 	add.w	r3, r7, #20
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	601a      	str	r2, [r3, #0]
 800d9bc:	605a      	str	r2, [r3, #4]
 800d9be:	609a      	str	r2, [r3, #8]
 800d9c0:	60da      	str	r2, [r3, #12]
 800d9c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d9cc:	d13a      	bne.n	800da44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	613b      	str	r3, [r7, #16]
 800d9d2:	4b1e      	ldr	r3, [pc, #120]	; (800da4c <HAL_PCD_MspInit+0xa0>)
 800d9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d6:	4a1d      	ldr	r2, [pc, #116]	; (800da4c <HAL_PCD_MspInit+0xa0>)
 800d9d8:	f043 0301 	orr.w	r3, r3, #1
 800d9dc:	6313      	str	r3, [r2, #48]	; 0x30
 800d9de:	4b1b      	ldr	r3, [pc, #108]	; (800da4c <HAL_PCD_MspInit+0xa0>)
 800d9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9e2:	f003 0301 	and.w	r3, r3, #1
 800d9e6:	613b      	str	r3, [r7, #16]
 800d9e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d9ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d9ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d9f8:	2303      	movs	r3, #3
 800d9fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d9fc:	230a      	movs	r3, #10
 800d9fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da00:	f107 0314 	add.w	r3, r7, #20
 800da04:	4619      	mov	r1, r3
 800da06:	4812      	ldr	r0, [pc, #72]	; (800da50 <HAL_PCD_MspInit+0xa4>)
 800da08:	f7f5 faf2 	bl	8002ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800da0c:	4b0f      	ldr	r3, [pc, #60]	; (800da4c <HAL_PCD_MspInit+0xa0>)
 800da0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da10:	4a0e      	ldr	r2, [pc, #56]	; (800da4c <HAL_PCD_MspInit+0xa0>)
 800da12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da16:	6353      	str	r3, [r2, #52]	; 0x34
 800da18:	2300      	movs	r3, #0
 800da1a:	60fb      	str	r3, [r7, #12]
 800da1c:	4b0b      	ldr	r3, [pc, #44]	; (800da4c <HAL_PCD_MspInit+0xa0>)
 800da1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da20:	4a0a      	ldr	r2, [pc, #40]	; (800da4c <HAL_PCD_MspInit+0xa0>)
 800da22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da26:	6453      	str	r3, [r2, #68]	; 0x44
 800da28:	4b08      	ldr	r3, [pc, #32]	; (800da4c <HAL_PCD_MspInit+0xa0>)
 800da2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da30:	60fb      	str	r3, [r7, #12]
 800da32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800da34:	2200      	movs	r2, #0
 800da36:	2105      	movs	r1, #5
 800da38:	2043      	movs	r0, #67	; 0x43
 800da3a:	f7f4 ffc7 	bl	80029cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800da3e:	2043      	movs	r0, #67	; 0x43
 800da40:	f7f4 ffe0 	bl	8002a04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800da44:	bf00      	nop
 800da46:	3728      	adds	r7, #40	; 0x28
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	40023800 	.word	0x40023800
 800da50:	40020000 	.word	0x40020000

0800da54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800da68:	4619      	mov	r1, r3
 800da6a:	4610      	mov	r0, r2
 800da6c:	f7fb fff6 	bl	8009a5c <USBD_LL_SetupStage>
}
 800da70:	bf00      	nop
 800da72:	3708      	adds	r7, #8
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	460b      	mov	r3, r1
 800da82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800da8a:	78fa      	ldrb	r2, [r7, #3]
 800da8c:	6879      	ldr	r1, [r7, #4]
 800da8e:	4613      	mov	r3, r2
 800da90:	00db      	lsls	r3, r3, #3
 800da92:	1a9b      	subs	r3, r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	440b      	add	r3, r1
 800da98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	78fb      	ldrb	r3, [r7, #3]
 800daa0:	4619      	mov	r1, r3
 800daa2:	f7fc f830 	bl	8009b06 <USBD_LL_DataOutStage>
}
 800daa6:	bf00      	nop
 800daa8:	3708      	adds	r7, #8
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b082      	sub	sp, #8
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	460b      	mov	r3, r1
 800dab8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dac0:	78fa      	ldrb	r2, [r7, #3]
 800dac2:	6879      	ldr	r1, [r7, #4]
 800dac4:	4613      	mov	r3, r2
 800dac6:	00db      	lsls	r3, r3, #3
 800dac8:	1a9b      	subs	r3, r3, r2
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	440b      	add	r3, r1
 800dace:	3348      	adds	r3, #72	; 0x48
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	78fb      	ldrb	r3, [r7, #3]
 800dad4:	4619      	mov	r1, r3
 800dad6:	f7fc f879 	bl	8009bcc <USBD_LL_DataInStage>
}
 800dada:	bf00      	nop
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b082      	sub	sp, #8
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fc f98d 	bl	8009e10 <USBD_LL_SOF>
}
 800daf6:	bf00      	nop
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b084      	sub	sp, #16
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db06:	2301      	movs	r3, #1
 800db08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d102      	bne.n	800db18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800db12:	2300      	movs	r3, #0
 800db14:	73fb      	strb	r3, [r7, #15]
 800db16:	e008      	b.n	800db2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	2b02      	cmp	r3, #2
 800db1e:	d102      	bne.n	800db26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800db20:	2301      	movs	r3, #1
 800db22:	73fb      	strb	r3, [r7, #15]
 800db24:	e001      	b.n	800db2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800db26:	f7f4 fa91 	bl	800204c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db30:	7bfa      	ldrb	r2, [r7, #15]
 800db32:	4611      	mov	r1, r2
 800db34:	4618      	mov	r0, r3
 800db36:	f7fc f92d 	bl	8009d94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db40:	4618      	mov	r0, r3
 800db42:	f7fc f8d9 	bl	8009cf8 <USBD_LL_Reset>
}
 800db46:	bf00      	nop
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
	...

0800db50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fc f928 	bl	8009db4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	6812      	ldr	r2, [r2, #0]
 800db72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db76:	f043 0301 	orr.w	r3, r3, #1
 800db7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6a1b      	ldr	r3, [r3, #32]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d005      	beq.n	800db90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db84:	4b04      	ldr	r3, [pc, #16]	; (800db98 <HAL_PCD_SuspendCallback+0x48>)
 800db86:	691b      	ldr	r3, [r3, #16]
 800db88:	4a03      	ldr	r2, [pc, #12]	; (800db98 <HAL_PCD_SuspendCallback+0x48>)
 800db8a:	f043 0306 	orr.w	r3, r3, #6
 800db8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800db90:	bf00      	nop
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	e000ed00 	.word	0xe000ed00

0800db9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fc f918 	bl	8009de0 <USBD_LL_Resume>
}
 800dbb0:	bf00      	nop
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dbca:	78fa      	ldrb	r2, [r7, #3]
 800dbcc:	4611      	mov	r1, r2
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fc f966 	bl	8009ea0 <USBD_LL_IsoOUTIncomplete>
}
 800dbd4:	bf00      	nop
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dbee:	78fa      	ldrb	r2, [r7, #3]
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fc f92e 	bl	8009e54 <USBD_LL_IsoINIncomplete>
}
 800dbf8:	bf00      	nop
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fc f96c 	bl	8009eec <USBD_LL_DevConnected>
}
 800dc14:	bf00      	nop
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7fc f969 	bl	8009f02 <USBD_LL_DevDisconnected>
}
 800dc30:	bf00      	nop
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d13c      	bne.n	800dcc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800dc48:	4a20      	ldr	r2, [pc, #128]	; (800dccc <USBD_LL_Init+0x94>)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	4a1e      	ldr	r2, [pc, #120]	; (800dccc <USBD_LL_Init+0x94>)
 800dc54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc58:	4b1c      	ldr	r3, [pc, #112]	; (800dccc <USBD_LL_Init+0x94>)
 800dc5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dc5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800dc60:	4b1a      	ldr	r3, [pc, #104]	; (800dccc <USBD_LL_Init+0x94>)
 800dc62:	2206      	movs	r2, #6
 800dc64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dc66:	4b19      	ldr	r3, [pc, #100]	; (800dccc <USBD_LL_Init+0x94>)
 800dc68:	2202      	movs	r2, #2
 800dc6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc6c:	4b17      	ldr	r3, [pc, #92]	; (800dccc <USBD_LL_Init+0x94>)
 800dc6e:	2200      	movs	r2, #0
 800dc70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dc72:	4b16      	ldr	r3, [pc, #88]	; (800dccc <USBD_LL_Init+0x94>)
 800dc74:	2202      	movs	r2, #2
 800dc76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc78:	4b14      	ldr	r3, [pc, #80]	; (800dccc <USBD_LL_Init+0x94>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800dc7e:	4b13      	ldr	r3, [pc, #76]	; (800dccc <USBD_LL_Init+0x94>)
 800dc80:	2200      	movs	r2, #0
 800dc82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dc84:	4b11      	ldr	r3, [pc, #68]	; (800dccc <USBD_LL_Init+0x94>)
 800dc86:	2200      	movs	r2, #0
 800dc88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dc8a:	4b10      	ldr	r3, [pc, #64]	; (800dccc <USBD_LL_Init+0x94>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dc90:	4b0e      	ldr	r3, [pc, #56]	; (800dccc <USBD_LL_Init+0x94>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dc96:	480d      	ldr	r0, [pc, #52]	; (800dccc <USBD_LL_Init+0x94>)
 800dc98:	f7f5 ffcb 	bl	8003c32 <HAL_PCD_Init>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dca2:	f7f4 f9d3 	bl	800204c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dca6:	2180      	movs	r1, #128	; 0x80
 800dca8:	4808      	ldr	r0, [pc, #32]	; (800dccc <USBD_LL_Init+0x94>)
 800dcaa:	f7f7 f944 	bl	8004f36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dcae:	2240      	movs	r2, #64	; 0x40
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	4806      	ldr	r0, [pc, #24]	; (800dccc <USBD_LL_Init+0x94>)
 800dcb4:	f7f7 f8f8 	bl	8004ea8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dcb8:	2280      	movs	r2, #128	; 0x80
 800dcba:	2101      	movs	r1, #1
 800dcbc:	4803      	ldr	r0, [pc, #12]	; (800dccc <USBD_LL_Init+0x94>)
 800dcbe:	f7f7 f8f3 	bl	8004ea8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3708      	adds	r7, #8
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	20005c38 	.word	0x20005c38

0800dcd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7f6 f8c7 	bl	8003e7a <HAL_PCD_Start>
 800dcec:	4603      	mov	r3, r0
 800dcee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcf0:	7bfb      	ldrb	r3, [r7, #15]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f000 f97e 	bl	800dff4 <USBD_Get_USB_Status>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3710      	adds	r7, #16
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}

0800dd06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b084      	sub	sp, #16
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
 800dd0e:	4608      	mov	r0, r1
 800dd10:	4611      	mov	r1, r2
 800dd12:	461a      	mov	r2, r3
 800dd14:	4603      	mov	r3, r0
 800dd16:	70fb      	strb	r3, [r7, #3]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	70bb      	strb	r3, [r7, #2]
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd20:	2300      	movs	r3, #0
 800dd22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd24:	2300      	movs	r3, #0
 800dd26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dd2e:	78bb      	ldrb	r3, [r7, #2]
 800dd30:	883a      	ldrh	r2, [r7, #0]
 800dd32:	78f9      	ldrb	r1, [r7, #3]
 800dd34:	f7f6 fcd8 	bl	80046e8 <HAL_PCD_EP_Open>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f000 f958 	bl	800dff4 <USBD_Get_USB_Status>
 800dd44:	4603      	mov	r3, r0
 800dd46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd48:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd62:	2300      	movs	r3, #0
 800dd64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd6c:	78fa      	ldrb	r2, [r7, #3]
 800dd6e:	4611      	mov	r1, r2
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7f6 fd21 	bl	80047b8 <HAL_PCD_EP_Close>
 800dd76:	4603      	mov	r3, r0
 800dd78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd7a:	7bfb      	ldrb	r3, [r7, #15]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 f939 	bl	800dff4 <USBD_Get_USB_Status>
 800dd82:	4603      	mov	r3, r0
 800dd84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd86:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	460b      	mov	r3, r1
 800dd9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dda0:	2300      	movs	r3, #0
 800dda2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ddaa:	78fa      	ldrb	r2, [r7, #3]
 800ddac:	4611      	mov	r1, r2
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7f6 fde1 	bl	8004976 <HAL_PCD_EP_SetStall>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddb8:	7bfb      	ldrb	r3, [r7, #15]
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f000 f91a 	bl	800dff4 <USBD_Get_USB_Status>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b084      	sub	sp, #16
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddda:	2300      	movs	r3, #0
 800dddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddde:	2300      	movs	r3, #0
 800dde0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dde8:	78fa      	ldrb	r2, [r7, #3]
 800ddea:	4611      	mov	r1, r2
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7f6 fe26 	bl	8004a3e <HAL_PCD_EP_ClrStall>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddf6:	7bfb      	ldrb	r3, [r7, #15]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f000 f8fb 	bl	800dff4 <USBD_Get_USB_Status>
 800ddfe:	4603      	mov	r3, r0
 800de00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de02:	7bbb      	ldrb	r3, [r7, #14]
}
 800de04:	4618      	mov	r0, r3
 800de06:	3710      	adds	r7, #16
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	460b      	mov	r3, r1
 800de16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800de1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800de20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800de24:	2b00      	cmp	r3, #0
 800de26:	da0b      	bge.n	800de40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800de28:	78fb      	ldrb	r3, [r7, #3]
 800de2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de2e:	68f9      	ldr	r1, [r7, #12]
 800de30:	4613      	mov	r3, r2
 800de32:	00db      	lsls	r3, r3, #3
 800de34:	1a9b      	subs	r3, r3, r2
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	440b      	add	r3, r1
 800de3a:	333e      	adds	r3, #62	; 0x3e
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	e00b      	b.n	800de58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de40:	78fb      	ldrb	r3, [r7, #3]
 800de42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de46:	68f9      	ldr	r1, [r7, #12]
 800de48:	4613      	mov	r3, r2
 800de4a:	00db      	lsls	r3, r3, #3
 800de4c:	1a9b      	subs	r3, r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	440b      	add	r3, r1
 800de52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3714      	adds	r7, #20
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	460b      	mov	r3, r1
 800de6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de74:	2300      	movs	r3, #0
 800de76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800de7e:	78fa      	ldrb	r2, [r7, #3]
 800de80:	4611      	mov	r1, r2
 800de82:	4618      	mov	r0, r3
 800de84:	f7f6 fc0b 	bl	800469e <HAL_PCD_SetAddress>
 800de88:	4603      	mov	r3, r0
 800de8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 f8b0 	bl	800dff4 <USBD_Get_USB_Status>
 800de94:	4603      	mov	r3, r0
 800de96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de98:	7bbb      	ldrb	r3, [r7, #14]
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b086      	sub	sp, #24
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	60f8      	str	r0, [r7, #12]
 800deaa:	607a      	str	r2, [r7, #4]
 800deac:	603b      	str	r3, [r7, #0]
 800deae:	460b      	mov	r3, r1
 800deb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deb2:	2300      	movs	r3, #0
 800deb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800deb6:	2300      	movs	r3, #0
 800deb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dec0:	7af9      	ldrb	r1, [r7, #11]
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	f7f6 fd0c 	bl	80048e2 <HAL_PCD_EP_Transmit>
 800deca:	4603      	mov	r3, r0
 800decc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dece:	7dfb      	ldrb	r3, [r7, #23]
 800ded0:	4618      	mov	r0, r3
 800ded2:	f000 f88f 	bl	800dff4 <USBD_Get_USB_Status>
 800ded6:	4603      	mov	r3, r0
 800ded8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800deda:	7dbb      	ldrb	r3, [r7, #22]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b086      	sub	sp, #24
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	607a      	str	r2, [r7, #4]
 800deee:	603b      	str	r3, [r7, #0]
 800def0:	460b      	mov	r3, r1
 800def2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df02:	7af9      	ldrb	r1, [r7, #11]
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	f7f6 fca0 	bl	800484c <HAL_PCD_EP_Receive>
 800df0c:	4603      	mov	r3, r0
 800df0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	4618      	mov	r0, r3
 800df14:	f000 f86e 	bl	800dff4 <USBD_Get_USB_Status>
 800df18:	4603      	mov	r3, r0
 800df1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df1c:	7dbb      	ldrb	r3, [r7, #22]
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3718      	adds	r7, #24
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
	...

0800df28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	460b      	mov	r3, r1
 800df32:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800df34:	78fb      	ldrb	r3, [r7, #3]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d002      	beq.n	800df40 <HAL_PCDEx_LPM_Callback+0x18>
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d01f      	beq.n	800df7e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800df3e:	e03b      	b.n	800dfb8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a1b      	ldr	r3, [r3, #32]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d007      	beq.n	800df58 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800df48:	f7f3 f8c4 	bl	80010d4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df4c:	4b1c      	ldr	r3, [pc, #112]	; (800dfc0 <HAL_PCDEx_LPM_Callback+0x98>)
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	4a1b      	ldr	r2, [pc, #108]	; (800dfc0 <HAL_PCDEx_LPM_Callback+0x98>)
 800df52:	f023 0306 	bic.w	r3, r3, #6
 800df56:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	6812      	ldr	r2, [r2, #0]
 800df66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df6a:	f023 0301 	bic.w	r3, r3, #1
 800df6e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df76:	4618      	mov	r0, r3
 800df78:	f7fb ff32 	bl	8009de0 <USBD_LL_Resume>
    break;
 800df7c:	e01c      	b.n	800dfb8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	6812      	ldr	r2, [r2, #0]
 800df8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df90:	f043 0301 	orr.w	r3, r3, #1
 800df94:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fb ff09 	bl	8009db4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a1b      	ldr	r3, [r3, #32]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d005      	beq.n	800dfb6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dfaa:	4b05      	ldr	r3, [pc, #20]	; (800dfc0 <HAL_PCDEx_LPM_Callback+0x98>)
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	4a04      	ldr	r2, [pc, #16]	; (800dfc0 <HAL_PCDEx_LPM_Callback+0x98>)
 800dfb0:	f043 0306 	orr.w	r3, r3, #6
 800dfb4:	6113      	str	r3, [r2, #16]
    break;
 800dfb6:	bf00      	nop
}
 800dfb8:	bf00      	nop
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	e000ed00 	.word	0xe000ed00

0800dfc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dfcc:	4b03      	ldr	r3, [pc, #12]	; (800dfdc <USBD_static_malloc+0x18>)
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	370c      	adds	r7, #12
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop
 800dfdc:	200056a0 	.word	0x200056a0

0800dfe0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]

}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	4603      	mov	r3, r0
 800dffc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e002:	79fb      	ldrb	r3, [r7, #7]
 800e004:	2b03      	cmp	r3, #3
 800e006:	d817      	bhi.n	800e038 <USBD_Get_USB_Status+0x44>
 800e008:	a201      	add	r2, pc, #4	; (adr r2, 800e010 <USBD_Get_USB_Status+0x1c>)
 800e00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00e:	bf00      	nop
 800e010:	0800e021 	.word	0x0800e021
 800e014:	0800e027 	.word	0x0800e027
 800e018:	0800e02d 	.word	0x0800e02d
 800e01c:	0800e033 	.word	0x0800e033
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	73fb      	strb	r3, [r7, #15]
    break;
 800e024:	e00b      	b.n	800e03e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e026:	2303      	movs	r3, #3
 800e028:	73fb      	strb	r3, [r7, #15]
    break;
 800e02a:	e008      	b.n	800e03e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e02c:	2301      	movs	r3, #1
 800e02e:	73fb      	strb	r3, [r7, #15]
    break;
 800e030:	e005      	b.n	800e03e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e032:	2303      	movs	r3, #3
 800e034:	73fb      	strb	r3, [r7, #15]
    break;
 800e036:	e002      	b.n	800e03e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e038:	2303      	movs	r3, #3
 800e03a:	73fb      	strb	r3, [r7, #15]
    break;
 800e03c:	bf00      	nop
  }
  return usb_status;
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e040:	4618      	mov	r0, r3
 800e042:	3714      	adds	r7, #20
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	4608      	mov	r0, r1
 800e056:	4611      	mov	r1, r2
 800e058:	461a      	mov	r2, r3
 800e05a:	4603      	mov	r3, r0
 800e05c:	70fb      	strb	r3, [r7, #3]
 800e05e:	460b      	mov	r3, r1
 800e060:	70bb      	strb	r3, [r7, #2]
 800e062:	4613      	mov	r3, r2
 800e064:	707b      	strb	r3, [r7, #1]
                return 0;
 800e066:	2300      	movs	r3, #0
        }
 800e068:	4618      	mov	r0, r3
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	4608      	mov	r0, r1
 800e07e:	4611      	mov	r1, r2
 800e080:	461a      	mov	r2, r3
 800e082:	4603      	mov	r3, r0
 800e084:	70fb      	strb	r3, [r7, #3]
 800e086:	460b      	mov	r3, r1
 800e088:	70bb      	strb	r3, [r7, #2]
 800e08a:	4613      	mov	r3, r2
 800e08c:	707b      	strb	r3, [r7, #1]
                return 0;
 800e08e:	2300      	movs	r3, #0
        }
 800e090:	4618      	mov	r0, r3
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
                return 0;
 800e0a4:	2300      	movs	r3, #0
        }
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	370c      	adds	r7, #12
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr

0800e0b2 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800e0b2:	b480      	push	{r7}
 800e0b4:	b083      	sub	sp, #12
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
                return 0;
 800e0ba:	2300      	movs	r3, #0
        }
 800e0bc:	4618      	mov	r0, r3
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
                return 0;
 800e0d0:	2300      	movs	r3, #0
        }
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	370c      	adds	r7, #12
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr

0800e0de <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800e0de:	b480      	push	{r7}
 800e0e0:	b083      	sub	sp, #12
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	70fb      	strb	r3, [r7, #3]
                return;
 800e0ea:	bf00      	nop
        } // Note used for hubs only!
 800e0ec:	370c      	adds	r7, #12
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr

0800e0f6 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800e0f6:	b480      	push	{r7}
 800e0f8:	b083      	sub	sp, #12
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
 800e0fe:	460b      	mov	r3, r1
 800e100:	807b      	strh	r3, [r7, #2]
 800e102:	4613      	mov	r3, r2
 800e104:	803b      	strh	r3, [r7, #0]
                return false;
 800e106:	2300      	movs	r3, #0
        }
 800e108:	4618      	mov	r0, r3
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	460b      	mov	r3, r1
 800e11e:	70fb      	strb	r3, [r7, #3]
                return false;
 800e120:	2300      	movs	r3, #0
        }
 800e122:	4618      	mov	r0, r3
 800e124:	370c      	adds	r7, #12
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr

0800e12e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800e12e:	b480      	push	{r7}
 800e130:	b083      	sub	sp, #12
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
 800e136:	460b      	mov	r3, r1
 800e138:	70fb      	strb	r3, [r7, #3]
                return true;
 800e13a:	2301      	movs	r3, #1
        }
 800e13c:	4618      	mov	r0, r3
 800e13e:	370c      	adds	r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800e150:	687b      	ldr	r3, [r7, #4]
        };
 800e152:	4618      	mov	r0, r3
 800e154:	370c      	adds	r7, #12
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr

0800e15e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800e15e:	b480      	push	{r7}
 800e160:	b085      	sub	sp, #20
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
 800e166:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800e168:	2300      	movs	r3, #0
 800e16a:	73fb      	strb	r3, [r7, #15]
 800e16c:	7bfb      	ldrb	r3, [r7, #15]
 800e16e:	2b0f      	cmp	r3, #15
 800e170:	d812      	bhi.n	800e198 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800e172:	7bfa      	ldrb	r2, [r7, #15]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	321e      	adds	r2, #30
 800e178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d107      	bne.n	800e190 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800e180:	7bfa      	ldrb	r2, [r7, #15]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	321e      	adds	r2, #30
 800e186:	6839      	ldr	r1, [r7, #0]
 800e188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800e18c:	2300      	movs	r3, #0
 800e18e:	e004      	b.n	800e19a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800e190:	7bfb      	ldrb	r3, [r7, #15]
 800e192:	3301      	adds	r3, #1
 800e194:	73fb      	strb	r3, [r7, #15]
 800e196:	e7e9      	b.n	800e16c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800e198:	23d3      	movs	r3, #211	; 0xd3
        };
 800e19a:	4618      	mov	r0, r3
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr

0800e1a6 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800e1a6:	b480      	push	{r7}
 800e1a8:	b083      	sub	sp, #12
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	701a      	strb	r2, [r3, #0]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	705a      	strb	r2, [r3, #1]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	709a      	strb	r2, [r3, #2]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	70da      	strb	r2, [r3, #3]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	711a      	strb	r2, [r3, #4]
        };
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	601a      	str	r2, [r3, #0]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	711a      	strb	r2, [r3, #4]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	715a      	strb	r2, [r3, #5]
        };
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	781a      	ldrb	r2, [r3, #0]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	715a      	strb	r2, [r3, #5]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	795a      	ldrb	r2, [r3, #5]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	711a      	strb	r2, [r3, #4]
        };
 800e220:	bf00      	nop
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	601a      	str	r2, [r3, #0]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2200      	movs	r2, #0
 800e23e:	711a      	strb	r2, [r3, #4]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	80da      	strh	r2, [r3, #6]
        };
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	4618      	mov	r0, r3
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	80da      	strh	r2, [r3, #6]
        };
 800e26e:	bf00      	nop
 800e270:	370c      	adds	r7, #12
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr

0800e27a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800e27a:	b480      	push	{r7}
 800e27c:	b085      	sub	sp, #20
 800e27e:	af00      	add	r7, sp, #0
 800e280:	60f8      	str	r0, [r7, #12]
 800e282:	60b9      	str	r1, [r7, #8]
 800e284:	607a      	str	r2, [r7, #4]
 800e286:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	791b      	ldrb	r3, [r3, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d002      	beq.n	800e296 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800e290:	2b01      	cmp	r3, #1
 800e292:	d009      	beq.n	800e2a8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800e294:	e029      	b.n	800e2ea <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	887a      	ldrh	r2, [r7, #2]
 800e29a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	791b      	ldrb	r3, [r3, #4]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	88db      	ldrh	r3, [r3, #6]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d015      	beq.n	800e2dc <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d011      	beq.n	800e2dc <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	88db      	ldrh	r3, [r3, #6]
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	80da      	strh	r2, [r3, #6]
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	1c5a      	adds	r2, r3, #1
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	601a      	str	r2, [r3, #0]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	881b      	ldrh	r3, [r3, #0]
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	801a      	strh	r2, [r3, #0]
 800e2da:	e7e5      	b.n	800e2a8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	88db      	ldrh	r3, [r3, #6]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d102      	bne.n	800e2ea <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	88db      	ldrh	r3, [r3, #6]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	bf0c      	ite	eq
 800e2f2:	2301      	moveq	r3, #1
 800e2f4:	2300      	movne	r3, #0
 800e2f6:	b2db      	uxtb	r3, r3
        };
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3714      	adds	r7, #20
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr

0800e304 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	4608      	mov	r0, r1
 800e30e:	4611      	mov	r1, r2
 800e310:	461a      	mov	r2, r3
 800e312:	4603      	mov	r3, r0
 800e314:	70fb      	strb	r3, [r7, #3]
 800e316:	460b      	mov	r3, r1
 800e318:	70bb      	strb	r3, [r7, #2]
 800e31a:	4613      	mov	r3, r2
 800e31c:	707b      	strb	r3, [r7, #1]
        };
 800e31e:	bf00      	nop
 800e320:	370c      	adds	r7, #12
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
	...

0800e32c <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	4a04      	ldr	r2, [pc, #16]	; (800e348 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	601a      	str	r2, [r3, #0]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4618      	mov	r0, r3
 800e33e:	370c      	adds	r7, #12
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr
 800e348:	08017740 	.word	0x08017740

0800e34c <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	4a04      	ldr	r2, [pc, #16]	; (800e368 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	601a      	str	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4618      	mov	r0, r3
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr
 800e368:	08017728 	.word	0x08017728

0800e36c <_ZN5EERefC1Ei>:
    This class has an overhead of two bytes, similar to storing a pointer to an EEPROM cell.
***/

struct EERef {

  EERef(const int index)
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
    : index(index)                 {}
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	601a      	str	r2, [r3, #0]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	4618      	mov	r0, r3
 800e380:	370c      	adds	r7, #12
 800e382:	46bd      	mov	sp, r7
 800e384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e388:	4770      	bx	lr

0800e38a <_ZNK5EERefdeEv>:

  //Access/read members.
  uint8_t operator*() const
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b082      	sub	sp, #8
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
  {
    return eeprom_read_byte(/*(uint8_t*)*/ index);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4618      	mov	r0, r3
 800e398:	f7f2 fa20 	bl	80007dc <eeprom_read_byte>
 800e39c:	4603      	mov	r3, r0
  }
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3708      	adds	r7, #8
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <_ZNK5EERefcvhEv>:
  operator uint8_t() const
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b082      	sub	sp, #8
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
  {
    return **this;
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f7ff ffeb 	bl	800e38a <_ZNK5EERefdeEv>
 800e3b4:	4603      	mov	r3, r0
  }
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <_ZN5EERefaSEh>:
  //Assignment/write members.
  EERef &operator=(const EERef &ref)
  {
    return *this = *ref;
  }
  EERef &operator=(uint8_t in)
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b082      	sub	sp, #8
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	70fb      	strb	r3, [r7, #3]
  {
    return eeprom_write_byte(/*(uint8_t*)*/ index, in), *this;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	78fb      	ldrb	r3, [r7, #3]
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	4610      	mov	r0, r2
 800e3d6:	f7f2 fa0f 	bl	80007f8 <eeprom_write_byte>
 800e3da:	687b      	ldr	r3, [r7, #4]
  }
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3708      	adds	r7, #8
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <_ZN11EEPROMClass4readEi>:
  //Basic user access methods.
  EERef operator[](const int idx)
  {
    return idx;
  }
  uint8_t read(int idx)
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  {
    return EERef(idx);
 800e3ee:	f107 030c 	add.w	r3, r7, #12
 800e3f2:	6839      	ldr	r1, [r7, #0]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7ff ffb9 	bl	800e36c <_ZN5EERefC1Ei>
 800e3fa:	f107 030c 	add.w	r3, r7, #12
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7ff ffd1 	bl	800e3a6 <_ZNK5EERefcvhEv>
 800e404:	4603      	mov	r3, r0
  }
 800e406:	4618      	mov	r0, r3
 800e408:	3710      	adds	r7, #16
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}

0800e40e <_ZN11EEPROMClass5writeEih>:
  void write(int idx, uint8_t val)
 800e40e:	b580      	push	{r7, lr}
 800e410:	b086      	sub	sp, #24
 800e412:	af00      	add	r7, sp, #0
 800e414:	60f8      	str	r0, [r7, #12]
 800e416:	60b9      	str	r1, [r7, #8]
 800e418:	4613      	mov	r3, r2
 800e41a:	71fb      	strb	r3, [r7, #7]
  {
    (EERef(idx)) = val;
 800e41c:	f107 0314 	add.w	r3, r7, #20
 800e420:	68b9      	ldr	r1, [r7, #8]
 800e422:	4618      	mov	r0, r3
 800e424:	f7ff ffa2 	bl	800e36c <_ZN5EERefC1Ei>
 800e428:	79fa      	ldrb	r2, [r7, #7]
 800e42a:	f107 0314 	add.w	r3, r7, #20
 800e42e:	4611      	mov	r1, r2
 800e430:	4618      	mov	r0, r3
 800e432:	f7ff ffc4 	bl	800e3be <_ZN5EERefaSEh>
  }
 800e436:	bf00      	nop
 800e438:	3718      	adds	r7, #24
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800e43e:	b480      	push	{r7}
 800e440:	b083      	sub	sp, #12
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
                return bAddress;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
        };
 800e44c:	4618      	mov	r0, r3
 800e44e:	370c      	adds	r7, #12
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800e458:	b480      	push	{r7}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
        };
 800e466:	4618      	mov	r0, r3
 800e468:	370c      	adds	r7, #12
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr

0800e472 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800e472:	b480      	push	{r7}
 800e474:	b083      	sub	sp, #12
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
 800e47a:	460b      	mov	r3, r1
 800e47c:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800e47e:	78fb      	ldrb	r3, [r7, #3]
 800e480:	2be0      	cmp	r3, #224	; 0xe0
 800e482:	bf0c      	ite	eq
 800e484:	2301      	moveq	r3, #1
 800e486:	2300      	movne	r3, #0
 800e488:	b2db      	uxtb	r3, r3
        };
 800e48a:	4618      	mov	r0, r3
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800e496:	b480      	push	{r7}
 800e498:	b083      	sub	sp, #12
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
 800e49e:	460b      	mov	r3, r1
 800e4a0:	807b      	strh	r3, [r7, #2]
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800e4a6:	887b      	ldrh	r3, [r7, #2]
 800e4a8:	f640 225c 	movw	r2, #2652	; 0xa5c
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d104      	bne.n	800e4ba <_ZN3BTD8VIDPIDOKEtt+0x24>
 800e4b0:	883b      	ldrh	r3, [r7, #0]
 800e4b2:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d009      	beq.n	800e4ce <_ZN3BTD8VIDPIDOKEtt+0x38>
 800e4ba:	887b      	ldrh	r3, [r7, #2]
 800e4bc:	f240 520d 	movw	r2, #1293	; 0x50d
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d106      	bne.n	800e4d2 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800e4c4:	883b      	ldrh	r3, [r7, #0]
 800e4c6:	f240 625a 	movw	r2, #1626	; 0x65a
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d101      	bne.n	800e4d2 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e02d      	b.n	800e52e <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	7d1b      	ldrb	r3, [r3, #20]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d113      	bne.n	800e502 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	7d5b      	ldrb	r3, [r3, #21]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d10f      	bne.n	800e502 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	7d9b      	ldrb	r3, [r3, #22]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10b      	bne.n	800e502 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	7ddb      	ldrb	r3, [r3, #23]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d107      	bne.n	800e502 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	7e1b      	ldrb	r3, [r3, #24]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d103      	bne.n	800e502 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	7e5b      	ldrb	r3, [r3, #25]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d014      	beq.n	800e52c <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800e502:	887b      	ldrh	r3, [r7, #2]
 800e504:	f240 524c 	movw	r2, #1356	; 0x54c
 800e508:	4293      	cmp	r3, r2
 800e50a:	d10f      	bne.n	800e52c <_ZN3BTD8VIDPIDOKEtt+0x96>
 800e50c:	883b      	ldrh	r3, [r7, #0]
 800e50e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800e512:	d009      	beq.n	800e528 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800e514:	883b      	ldrh	r3, [r7, #0]
 800e516:	f240 422f 	movw	r2, #1071	; 0x42f
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d004      	beq.n	800e528 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800e51e:	883b      	ldrh	r3, [r7, #0]
 800e520:	f240 32d5 	movw	r2, #981	; 0x3d5
 800e524:	4293      	cmp	r3, r2
 800e526:	d101      	bne.n	800e52c <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800e528:	2301      	movs	r3, #1
 800e52a:	e000      	b.n	800e52e <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800e52c:	2300      	movs	r3, #0
        };
 800e52e:	4618      	mov	r0, r3
 800e530:	370c      	adds	r7, #12
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr
	...

0800e53c <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4618      	mov	r0, r3
 800e54a:	f7ff feef 	bl	800e32c <_ZN15USBDeviceConfigC1Ev>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	3304      	adds	r3, #4
 800e552:	4618      	mov	r0, r3
 800e554:	f7ff fefa 	bl	800e34c <_ZN17UsbConfigXtracterC1Ev>
 800e558:	4a2b      	ldr	r2, [pc, #172]	; (800e608 <_ZN3BTDC1EP3USB+0xcc>)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	601a      	str	r2, [r3, #0]
 800e55e:	4a2b      	ldr	r2, [pc, #172]	; (800e60c <_ZN3BTDC1EP3USB+0xd0>)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	605a      	str	r2, [r3, #4]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2200      	movs	r2, #0
 800e570:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	683a      	ldr	r2, [r7, #0]
 800e590:	665a      	str	r2, [r3, #100]	; 0x64
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2200      	movs	r2, #0
 800e596:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2201      	movs	r2, #1
 800e59e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	679a      	str	r2, [r3, #120]	; 0x78
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	73fb      	strb	r3, [r7, #15]
 800e5c4:	7bfb      	ldrb	r3, [r7, #15]
 800e5c6:	2b03      	cmp	r3, #3
 800e5c8:	d80a      	bhi.n	800e5e0 <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800e5ca:	7bfb      	ldrb	r3, [r7, #15]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	331e      	adds	r3, #30
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	4413      	add	r3, r2
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800e5d8:	7bfb      	ldrb	r3, [r7, #15]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	73fb      	strb	r3, [r7, #15]
 800e5de:	e7f1      	b.n	800e5c4 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 fb31 	bl	800ec48 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d006      	beq.n	800e5fc <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7ff fdb1 	bl	800e15e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	080176e8 	.word	0x080176e8
 800e60c:	0801771c 	.word	0x0801771c

0800e610 <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800e610:	b590      	push	{r4, r7, lr}
 800e612:	b08f      	sub	sp, #60	; 0x3c
 800e614:	af02      	add	r7, sp, #8
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	4608      	mov	r0, r1
 800e61a:	4611      	mov	r1, r2
 800e61c:	461a      	mov	r2, r3
 800e61e:	4603      	mov	r3, r0
 800e620:	70fb      	strb	r3, [r7, #3]
 800e622:	460b      	mov	r3, r1
 800e624:	70bb      	strb	r3, [r7, #2]
 800e626:	4613      	mov	r3, r2
 800e628:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800e62a:	2312      	movs	r3, #18
 800e62c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800e630:	f107 0308 	add.w	r3, r7, #8
 800e634:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800e636:	2300      	movs	r3, #0
 800e638:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800e63a:	2300      	movs	r3, #0
 800e63c:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 fb02 	bl	800ec48 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e648:	4618      	mov	r0, r3
 800e64a:	f7ff fd7d 	bl	800e148 <_ZN3USB14GetAddressPoolEv>
 800e64e:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e656:	2b00      	cmp	r3, #0
 800e658:	d005      	beq.n	800e666 <_ZN3BTD15ConfigureDeviceEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
 800e65a:	2180      	movs	r1, #128	; 0x80
 800e65c:	4852      	ldr	r0, [pc, #328]	; (800e7a8 <_ZN3BTD15ConfigureDeviceEhhb+0x198>)
 800e65e:	f006 fe89 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800e662:	23d9      	movs	r3, #217	; 0xd9
 800e664:	e09c      	b.n	800e7a0 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800e666:	69fb      	ldr	r3, [r7, #28]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2100      	movs	r1, #0
 800e66e:	69f8      	ldr	r0, [r7, #28]
 800e670:	4798      	blx	r3
 800e672:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800e674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e676:	2b00      	cmp	r3, #0
 800e678:	d105      	bne.n	800e686 <_ZN3BTD15ConfigureDeviceEhhb+0x76>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800e67a:	2180      	movs	r1, #128	; 0x80
 800e67c:	484b      	ldr	r0, [pc, #300]	; (800e7ac <_ZN3BTD15ConfigureDeviceEhhb+0x19c>)
 800e67e:	f006 fe79 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e682:	23d6      	movs	r3, #214	; 0xd6
 800e684:	e08c      	b.n	800e7a0 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        if(!p->epinfo) {
 800e686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d105      	bne.n	800e69a <_ZN3BTD15ConfigureDeviceEhhb+0x8a>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
 800e68e:	2180      	movs	r1, #128	; 0x80
 800e690:	4847      	ldr	r0, [pc, #284]	; (800e7b0 <_ZN3BTD15ConfigureDeviceEhhb+0x1a0>)
 800e692:	f006 fe6f 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800e696:	23d7      	movs	r3, #215	; 0xd7
 800e698:	e082      	b.n	800e7a0 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f103 0269 	add.w	r2, r3, #105	; 0x69
 800e6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a8:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	787a      	ldrb	r2, [r7, #1]
 800e6ae:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800e6b4:	f107 0308 	add.w	r3, r7, #8
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	2312      	movs	r3, #18
 800e6bc:	2200      	movs	r2, #0
 800e6be:	2100      	movs	r1, #0
 800e6c0:	f006 f895 	bl	80147ee <_ZN3USB11getDevDescrEhhtPh>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800e6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6cc:	6a3a      	ldr	r2, [r7, #32]
 800e6ce:	601a      	str	r2, [r3, #0]

        if(rcode)
 800e6d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d14e      	bne.n	800e776 <_ZN3BTD15ConfigureDeviceEhhb+0x166>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	3304      	adds	r3, #4
 800e6de:	681c      	ldr	r4, [r3, #0]
 800e6e0:	78bb      	ldrb	r3, [r7, #2]
 800e6e2:	78f9      	ldrb	r1, [r7, #3]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	69f8      	ldr	r0, [r7, #28]
 800e6e8:	47a0      	blx	r4
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

        if(!bAddress) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d105      	bne.n	800e70a <_ZN3BTD15ConfigureDeviceEhhb+0xfa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
 800e6fe:	2180      	movs	r1, #128	; 0x80
 800e700:	482c      	ldr	r0, [pc, #176]	; (800e7b4 <_ZN3BTD15ConfigureDeviceEhhb+0x1a4>)
 800e702:	f006 fe37 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800e706:	23d4      	movs	r3, #212	; 0xd4
 800e708:	e04a      	b.n	800e7a0 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800e70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70c:	791b      	ldrb	r3, [r3, #4]
 800e70e:	2b09      	cmp	r3, #9
 800e710:	d017      	beq.n	800e742 <_ZN3BTD15ConfigureDeviceEhhb+0x132>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800e712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e714:	79da      	ldrb	r2, [r3, #7]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800e71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71e:	7c5a      	ldrb	r2, [r3, #17]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

        VID = udd->idVendor;
 800e726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e728:	891b      	ldrh	r3, [r3, #8]
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        PID = udd->idProduct;
 800e732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e734:	895b      	ldrh	r3, [r3, #10]
 800e736:	b29a      	uxth	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800e73e:	23e0      	movs	r3, #224	; 0xe0
 800e740:	e02e      	b.n	800e7a0 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
                goto FailHub;
 800e742:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
 800e744:	2180      	movs	r1, #128	; 0x80
 800e746:	481c      	ldr	r0, [pc, #112]	; (800e7b8 <_ZN3BTD15ConfigureDeviceEhhb+0x1a8>)
 800e748:	f006 fe14 	bl	8015374 <_Z8E_NotifyPKci>
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800e756:	2300      	movs	r3, #0
 800e758:	2200      	movs	r2, #0
 800e75a:	f006 f8e5 	bl	8014928 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800e75e:	23d1      	movs	r3, #209	; 0xd1
 800e760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	3308      	adds	r3, #8
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	4798      	blx	r3
        return rcode;
 800e770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e774:	e014      	b.n	800e7a0 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
                goto FailGetDevDescr;
 800e776:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
 800e778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e77c:	4618      	mov	r0, r3
 800e77e:	f006 fe71 	bl	8015464 <_Z21NotifyFailGetDevDescrh>
#endif
        if(rcode != hrJERR)
 800e782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e786:	2b0d      	cmp	r3, #13
 800e788:	d002      	beq.n	800e790 <_ZN3BTD15ConfigureDeviceEhhb+0x180>
                rcode = USB_ERROR_FailGetDevDescr;
 800e78a:	23e1      	movs	r3, #225	; 0xe1
 800e78c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	3308      	adds	r3, #8
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	4798      	blx	r3
        return rcode;
 800e79c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3734      	adds	r7, #52	; 0x34
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd90      	pop	{r4, r7, pc}
 800e7a8:	08015918 	.word	0x08015918
 800e7ac:	0801592c 	.word	0x0801592c
 800e7b0:	08015940 	.word	0x08015940
 800e7b4:	08015954 	.word	0x08015954
 800e7b8:	0801596c 	.word	0x0801596c

0800e7bc <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b096      	sub	sp, #88	; 0x58
 800e7c0:	af02      	add	r7, sp, #8
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	4608      	mov	r0, r1
 800e7c6:	4611      	mov	r1, r2
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	70fb      	strb	r3, [r7, #3]
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	70bb      	strb	r3, [r7, #2]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800e7dc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        epInfo[1].epAddr = 0;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

        AddressPool &addrPool = pUsb->GetAddressPool();
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7ff fcab 	bl	800e148 <_ZN3USB14GetAddressPoolEv>
 800e7f2:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800e7f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 800e800:	4611      	mov	r1, r2
 800e802:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e804:	4798      	blx	r3
 800e806:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800e808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d105      	bne.n	800e81a <_ZN3BTD4InitEhhb+0x5e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800e80e:	2180      	movs	r1, #128	; 0x80
 800e810:	48ae      	ldr	r0, [pc, #696]	; (800eacc <_ZN3BTD4InitEhhb+0x310>)
 800e812:	f006 fdaf 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e816:	23d6      	movs	r3, #214	; 0xd6
 800e818:	e20e      	b.n	800ec38 <_ZN3BTD4InitEhhb+0x47c>
        }

        delay(300); // Assign new address to the device
 800e81a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e81e:	f7f3 fff9 	bl	8002814 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e82c:	2200      	movs	r2, #0
 800e82e:	2100      	movs	r1, #0
 800e830:	f006 f87a 	bl	8014928 <_ZN3USB7setAddrEhhh>
 800e834:	4603      	mov	r3, r0
 800e836:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800e83a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d00d      	beq.n	800e85e <_ZN3BTD4InitEhhb+0xa2>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
 800e842:	2180      	movs	r1, #128	; 0x80
 800e844:	48a2      	ldr	r0, [pc, #648]	; (800ead0 <_ZN3BTD4InitEhhb+0x314>)
 800e846:	f006 fd95 	bl	8015374 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (rcode, 0x80);
 800e84a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e84e:	2180      	movs	r1, #128	; 0x80
 800e850:	4618      	mov	r0, r3
 800e852:	f002 fed0 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
#endif
                p->lowspeed = false;
 800e856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e858:	2200      	movs	r2, #0
 800e85a:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800e85c:	e1db      	b.n	800ec16 <_ZN3BTD4InitEhhb+0x45a>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800e85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e860:	2200      	movs	r2, #0
 800e862:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800e864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 800e870:	4611      	mov	r1, r2
 800e872:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e874:	4798      	blx	r3
 800e876:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800e878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d105      	bne.n	800e88a <_ZN3BTD4InitEhhb+0xce>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800e87e:	2180      	movs	r1, #128	; 0x80
 800e880:	4892      	ldr	r0, [pc, #584]	; (800eacc <_ZN3BTD4InitEhhb+0x310>)
 800e882:	f006 fd77 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e886:	23d6      	movs	r3, #214	; 0xd6
 800e888:	e1d6      	b.n	800ec38 <_ZN3BTD4InitEhhb+0x47c>
        }

        p->lowspeed = lowspeed;
 800e88a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e88c:	787a      	ldrb	r2, [r7, #1]
 800e88e:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	3369      	adds	r3, #105	; 0x69
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f004 ff13 	bl	80136ca <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800e8aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f040 818a 	bne.w	800ebc8 <_ZN3BTD4InitEhhb+0x40c>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800e8ba:	f240 524c 	movw	r2, #1356	; 0x54c
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	f040 80c5 	bne.w	800ea4e <_ZN3BTD4InitEhhb+0x292>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800e8ca:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800e8ce:	d00e      	beq.n	800e8ee <_ZN3BTD4InitEhhb+0x132>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800e8d6:	f240 422f 	movw	r2, #1071	; 0x42f
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d007      	beq.n	800e8ee <_ZN3BTD4InitEhhb+0x132>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800e8e4:	f240 32d5 	movw	r2, #981	; 0x3d5
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	f040 80b0 	bne.w	800ea4e <_ZN3BTD4InitEhhb+0x292>
                delay(100);
 800e8ee:	2064      	movs	r0, #100	; 0x64
 800e8f0:	f7f3 ff90 	bl	8002814 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800e904:	2301      	movs	r3, #1
 800e906:	f006 f83d 	bl	8014984 <_ZN3USB7setConfEhhh>
 800e90a:	4603      	mov	r3, r0
 800e90c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800e910:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e914:	2b00      	cmp	r3, #0
 800e916:	f040 8161 	bne.w	800ebdc <_ZN3BTD4InitEhhb+0x420>
                        goto FailSetConfDescr;

#ifdef DEBUG_USB_HOST
                if(PID == PS3_PID || PID == PS3NAVIGATION_PID) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800e920:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800e924:	d006      	beq.n	800e934 <_ZN3BTD4InitEhhb+0x178>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800e92c:	f240 422f 	movw	r2, #1071	; 0x42f
 800e930:	4293      	cmp	r3, r2
 800e932:	d10f      	bne.n	800e954 <_ZN3BTD4InitEhhb+0x198>
                        if(PID == PS3_PID)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800e93a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800e93e:	d104      	bne.n	800e94a <_ZN3BTD4InitEhhb+0x18e>
                                Notify(PSTR("\r\nDualshock 3 Controller Connected"), 0x80);
 800e940:	2180      	movs	r1, #128	; 0x80
 800e942:	4864      	ldr	r0, [pc, #400]	; (800ead4 <_ZN3BTD4InitEhhb+0x318>)
 800e944:	f006 fd16 	bl	8015374 <_Z8E_NotifyPKci>
                        if(PID == PS3_PID)
 800e948:	e008      	b.n	800e95c <_ZN3BTD4InitEhhb+0x1a0>
                        else // It must be a navigation controller
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
 800e94a:	2180      	movs	r1, #128	; 0x80
 800e94c:	4862      	ldr	r0, [pc, #392]	; (800ead8 <_ZN3BTD4InitEhhb+0x31c>)
 800e94e:	f006 fd11 	bl	8015374 <_Z8E_NotifyPKci>
                        if(PID == PS3_PID)
 800e952:	e003      	b.n	800e95c <_ZN3BTD4InitEhhb+0x1a0>
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
 800e954:	2180      	movs	r1, #128	; 0x80
 800e956:	4861      	ldr	r0, [pc, #388]	; (800eadc <_ZN3BTD4InitEhhb+0x320>)
 800e958:	f006 fd0c 	bl	8015374 <_Z8E_NotifyPKci>
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	7d1b      	ldrb	r3, [r3, #20]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d118      	bne.n	800e996 <_ZN3BTD4InitEhhb+0x1da>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	7d5b      	ldrb	r3, [r3, #21]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d114      	bne.n	800e996 <_ZN3BTD4InitEhhb+0x1da>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	7d9b      	ldrb	r3, [r3, #22]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d110      	bne.n	800e996 <_ZN3BTD4InitEhhb+0x1da>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	7ddb      	ldrb	r3, [r3, #23]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10c      	bne.n	800e996 <_ZN3BTD4InitEhhb+0x1da>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	7e1b      	ldrb	r3, [r3, #24]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d108      	bne.n	800e996 <_ZN3BTD4InitEhhb+0x1da>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	7e5b      	ldrb	r3, [r3, #25]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d104      	bne.n	800e996 <_ZN3BTD4InitEhhb+0x1da>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
 800e98c:	2180      	movs	r1, #128	; 0x80
 800e98e:	4854      	ldr	r0, [pc, #336]	; (800eae0 <_ZN3BTD4InitEhhb+0x324>)
 800e990:	f006 fcf0 	bl	8015374 <_Z8E_NotifyPKci>
 800e994:	e03f      	b.n	800ea16 <_ZN3BTD4InitEhhb+0x25a>
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800e99c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800e9a0:	d006      	beq.n	800e9b0 <_ZN3BTD4InitEhhb+0x1f4>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800e9a8:	f240 422f 	movw	r2, #1071	; 0x42f
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d106      	bne.n	800e9be <_ZN3BTD4InitEhhb+0x202>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	3314      	adds	r3, #20
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f002 fd9a 	bl	80114f0 <_ZN3BTD9setBdaddrEPh>
 800e9bc:	e005      	b.n	800e9ca <_ZN3BTD4InitEhhb+0x20e>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	3314      	adds	r3, #20
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f002 fdd3 	bl	8011570 <_ZN3BTD13setMoveBdaddrEPh>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nBluetooth Address was set to: "), 0x80);
 800e9ca:	2180      	movs	r1, #128	; 0x80
 800e9cc:	4845      	ldr	r0, [pc, #276]	; (800eae4 <_ZN3BTD4InitEhhb+0x328>)
 800e9ce:	f006 fcd1 	bl	8015374 <_Z8E_NotifyPKci>
                        for(int8_t i = 5; i > 0; i--) {
 800e9d2:	2305      	movs	r3, #5
 800e9d4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800e9d8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	dd14      	ble.n	800ea0a <_ZN3BTD4InitEhhb+0x24e>
                                D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
 800e9e0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	7d1b      	ldrb	r3, [r3, #20]
 800e9ea:	2180      	movs	r1, #128	; 0x80
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f002 fe02 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(":"), 0x80);
 800e9f2:	2180      	movs	r1, #128	; 0x80
 800e9f4:	483c      	ldr	r0, [pc, #240]	; (800eae8 <_ZN3BTD4InitEhhb+0x32c>)
 800e9f6:	f006 fcbd 	bl	8015374 <_Z8E_NotifyPKci>
                        for(int8_t i = 5; i > 0; i--) {
 800e9fa:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	3b01      	subs	r3, #1
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ea08:	e7e6      	b.n	800e9d8 <_ZN3BTD4InitEhhb+0x21c>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7d1b      	ldrb	r3, [r3, #20]
 800ea0e:	2180      	movs	r1, #128	; 0x80
 800ea10:	4618      	mov	r0, r3
 800ea12:	f002 fdf0 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800ea26:	2300      	movs	r3, #0
 800ea28:	f005 ffac 	bl	8014984 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ea36:	2300      	movs	r3, #0
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f005 ff75 	bl	8014928 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	3308      	adds	r3, #8
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800ea4a:	23d1      	movs	r3, #209	; 0xd1
 800ea4c:	e0f4      	b.n	800ec38 <_ZN3BTD4InitEhhb+0x47c>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800ea4e:	2300      	movs	r3, #0
 800ea50:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800ea54:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800ea58:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d26e      	bcs.n	800eb3e <_ZN3BTD4InitEhhb+0x382>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800ea66:	f640 225c 	movw	r2, #2652	; 0xa5c
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d106      	bne.n	800ea7c <_ZN3BTD4InitEhhb+0x2c0>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ea74:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d00d      	beq.n	800ea98 <_ZN3BTD4InitEhhb+0x2dc>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800ea82:	f240 520d 	movw	r2, #1293	; 0x50d
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d130      	bne.n	800eaec <_ZN3BTD4InitEhhb+0x330>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ea90:	f240 625a 	movw	r2, #1626	; 0x65a
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d129      	bne.n	800eaec <_ZN3BTD4InitEhhb+0x330>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	1d1a      	adds	r2, r3, #4
 800ea9c:	f107 0308 	add.w	r3, r7, #8
 800eaa0:	4611      	mov	r1, r2
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f002 fdc6 	bl	8011634 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800eab2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800eab6:	f107 0308 	add.w	r3, r7, #8
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	4613      	mov	r3, r2
 800eabe:	2200      	movs	r2, #0
 800eac0:	f005 fee5 	bl	801488e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800eac4:	4603      	mov	r3, r0
 800eac6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800eaca:	e028      	b.n	800eb1e <_ZN3BTD4InitEhhb+0x362>
 800eacc:	0801592c 	.word	0x0801592c
 800ead0:	080159b0 	.word	0x080159b0
 800ead4:	080159bc 	.word	0x080159bc
 800ead8:	080159e0 	.word	0x080159e0
 800eadc:	08015a04 	.word	0x08015a04
 800eae0:	08015a24 	.word	0x08015a24
 800eae4:	08015ab4 	.word	0x08015ab4
 800eae8:	08015ad8 	.word	0x08015ad8
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	1d1a      	adds	r2, r3, #4
 800eaf0:	f107 0308 	add.w	r3, r7, #8
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f002 fdea 	bl	80116d0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800eb06:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800eb0a:	f107 0308 	add.w	r3, r7, #8
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	4613      	mov	r3, r2
 800eb12:	2200      	movs	r2, #0
 800eb14:	f005 febb 	bl	801488e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800eb1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d156      	bne.n	800ebd4 <_ZN3BTD4InitEhhb+0x418>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800eb2c:	2b03      	cmp	r3, #3
 800eb2e:	d805      	bhi.n	800eb3c <_ZN3BTD4InitEhhb+0x380>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800eb30:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800eb34:	3301      	adds	r3, #1
 800eb36:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800eb3a:	e78b      	b.n	800ea54 <_ZN3BTD4InitEhhb+0x298>
                                break;
 800eb3c:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800eb44:	2b03      	cmp	r3, #3
 800eb46:	d94f      	bls.n	800ebe8 <_ZN3BTD4InitEhhb+0x42c>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	3369      	adds	r3, #105	; 0x69
 800eb5c:	f004 fdb5 	bl	80136ca <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800eb60:	4603      	mov	r3, r0
 800eb62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800eb66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d12e      	bne.n	800ebcc <_ZN3BTD4InitEhhb+0x410>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800eb84:	f005 fefe 	bl	8014984 <_ZN3USB7setConfEhhh>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800eb8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d124      	bne.n	800ebe0 <_ZN3BTD4InitEhhb+0x424>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2264      	movs	r2, #100	; 0x64
 800eb9a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
                hci_counter = 0;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                hci_state = HCI_INIT_STATE;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                waitingForConnection = false;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
 800ebbc:	2180      	movs	r1, #128	; 0x80
 800ebbe:	4820      	ldr	r0, [pc, #128]	; (800ec40 <_ZN3BTD4InitEhhb+0x484>)
 800ebc0:	f006 fbd8 	bl	8015374 <_Z8E_NotifyPKci>
#endif
        }
        return 0; // Successful configuration
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	e037      	b.n	800ec38 <_ZN3BTD4InitEhhb+0x47c>
                goto FailSetDevTblEntry;
 800ebc8:	bf00      	nop
 800ebca:	e000      	b.n	800ebce <_ZN3BTD4InitEhhb+0x412>
                        goto FailSetDevTblEntry;
 800ebcc:	bf00      	nop

        /* Diagnostic messages */
FailSetDevTblEntry:
#ifdef DEBUG_USB_HOST
        NotifyFailSetDevTblEntry();
 800ebce:	f006 fc2b 	bl	8015428 <_Z24NotifyFailSetDevTblEntryv>
        goto Fail;
 800ebd2:	e020      	b.n	800ec16 <_ZN3BTD4InitEhhb+0x45a>
                                goto FailGetConfDescr;
 800ebd4:	bf00      	nop
#endif

FailGetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetConfDescr();
 800ebd6:	f006 fc31 	bl	801543c <_Z22NotifyFailGetConfDescrv>
        goto Fail;
 800ebda:	e01c      	b.n	800ec16 <_ZN3BTD4InitEhhb+0x45a>
                        goto FailSetConfDescr;
 800ebdc:	bf00      	nop
 800ebde:	e000      	b.n	800ebe2 <_ZN3BTD4InitEhhb+0x426>
                        goto FailSetConfDescr;
 800ebe0:	bf00      	nop
#endif

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
 800ebe2:	f006 fc35 	bl	8015450 <_Z22NotifyFailSetConfDescrv>
#endif
        goto Fail;
 800ebe6:	e016      	b.n	800ec16 <_ZN3BTD4InitEhhb+0x45a>
                        goto FailUnknownDevice;
 800ebe8:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8b3 208e 	ldrh.w	r2, [r3, #142]	; 0x8e
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	4610      	mov	r0, r2
 800ebfa:	f006 fc43 	bl	8015484 <_Z23NotifyFailUnknownDevicett>
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ec08:	2300      	movs	r3, #0
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f005 fe8c 	bl	8014928 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800ec10:	23d1      	movs	r3, #209	; 0xd1
 800ec12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
 800ec16:	2180      	movs	r1, #128	; 0x80
 800ec18:	480a      	ldr	r0, [pc, #40]	; (800ec44 <_ZN3BTD4InitEhhb+0x488>)
 800ec1a:	f006 fbab 	bl	8015374 <_Z8E_NotifyPKci>
        NotifyFail(rcode);
 800ec1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec22:	4618      	mov	r0, r3
 800ec24:	f006 fc50 	bl	80154c8 <_Z10NotifyFailh>
#endif
        Release();
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	3308      	adds	r3, #8
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	4798      	blx	r3
        return rcode;
 800ec34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3750      	adds	r7, #80	; 0x50
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	08015adc 	.word	0x08015adc
 800ec44:	08015afc 	.word	0x08015afc

0800ec48 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800ec50:	2300      	movs	r3, #0
 800ec52:	73fb      	strb	r3, [r7, #15]
 800ec54:	7bfb      	ldrb	r3, [r7, #15]
 800ec56:	2b03      	cmp	r3, #3
 800ec58:	d845      	bhi.n	800ece6 <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800ec5a:	7bfa      	ldrb	r2, [r7, #15]
 800ec5c:	6879      	ldr	r1, [r7, #4]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	005b      	lsls	r3, r3, #1
 800ec62:	4413      	add	r3, r2
 800ec64:	440b      	add	r3, r1
 800ec66:	3369      	adds	r3, #105	; 0x69
 800ec68:	2200      	movs	r2, #0
 800ec6a:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800ec6c:	7bfb      	ldrb	r3, [r7, #15]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d001      	beq.n	800ec76 <_ZN3BTD10InitializeEv+0x2e>
 800ec72:	2000      	movs	r0, #0
 800ec74:	e000      	b.n	800ec78 <_ZN3BTD10InitializeEv+0x30>
 800ec76:	2008      	movs	r0, #8
 800ec78:	7bfa      	ldrb	r2, [r7, #15]
 800ec7a:	6879      	ldr	r1, [r7, #4]
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	005b      	lsls	r3, r3, #1
 800ec80:	4413      	add	r3, r2
 800ec82:	440b      	add	r3, r1
 800ec84:	336a      	adds	r3, #106	; 0x6a
 800ec86:	4602      	mov	r2, r0
 800ec88:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800ec8a:	7bfa      	ldrb	r2, [r7, #15]
 800ec8c:	6879      	ldr	r1, [r7, #4]
 800ec8e:	4613      	mov	r3, r2
 800ec90:	005b      	lsls	r3, r3, #1
 800ec92:	4413      	add	r3, r2
 800ec94:	440b      	add	r3, r1
 800ec96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ec9a:	78d3      	ldrb	r3, [r2, #3]
 800ec9c:	f36f 0300 	bfc	r3, #0, #1
 800eca0:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800eca2:	7bfa      	ldrb	r2, [r7, #15]
 800eca4:	6879      	ldr	r1, [r7, #4]
 800eca6:	4613      	mov	r3, r2
 800eca8:	005b      	lsls	r3, r3, #1
 800ecaa:	4413      	add	r3, r2
 800ecac:	440b      	add	r3, r1
 800ecae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ecb2:	78d3      	ldrb	r3, [r2, #3]
 800ecb4:	f36f 0341 	bfc	r3, #1, #1
 800ecb8:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d001      	beq.n	800ecc4 <_ZN3BTD10InitializeEv+0x7c>
 800ecc0:	2101      	movs	r1, #1
 800ecc2:	e000      	b.n	800ecc6 <_ZN3BTD10InitializeEv+0x7e>
 800ecc4:	210f      	movs	r1, #15
 800ecc6:	7bfa      	ldrb	r2, [r7, #15]
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	4613      	mov	r3, r2
 800eccc:	005b      	lsls	r3, r3, #1
 800ecce:	4413      	add	r3, r2
 800ecd0:	4403      	add	r3, r0
 800ecd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ecd6:	78d3      	ldrb	r3, [r2, #3]
 800ecd8:	f361 0387 	bfi	r3, r1, #2, #6
 800ecdc:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800ecde:	7bfb      	ldrb	r3, [r7, #15]
 800ece0:	3301      	adds	r3, #1
 800ece2:	73fb      	strb	r3, [r7, #15]
 800ece4:	e7b6      	b.n	800ec54 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800ece6:	2300      	movs	r3, #0
 800ece8:	73fb      	strb	r3, [r7, #15]
 800ecea:	7bfb      	ldrb	r3, [r7, #15]
 800ecec:	2b03      	cmp	r3, #3
 800ecee:	d81c      	bhi.n	800ed2a <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800ecf0:	7bfb      	ldrb	r3, [r7, #15]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	331e      	adds	r3, #30
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	4413      	add	r3, r2
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d010      	beq.n	800ed22 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800ed00:	7bfb      	ldrb	r3, [r7, #15]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	331e      	adds	r3, #30
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	4413      	add	r3, r2
 800ed0a:	6859      	ldr	r1, [r3, #4]
 800ed0c:	7bfb      	ldrb	r3, [r7, #15]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	331e      	adds	r3, #30
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	4413      	add	r3, r2
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	3308      	adds	r3, #8
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	4608      	mov	r0, r1
 800ed20:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800ed22:	7bfb      	ldrb	r3, [r7, #15]
 800ed24:	3301      	adds	r3, #1
 800ed26:	73fb      	strb	r3, [r7, #15]
 800ed28:	e7df      	b.n	800ecea <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        incomingWii = false;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        connectToHIDDevice = false;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        incomingHIDDevice = false;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        incomingPSController = false;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        bAddress = 0; // Clear device address
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2200      	movs	r2, #0
 800ed56:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        bNumEP = 1; // Must have to be reset to 1
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        qNextPollTime = 0; // Reset next poll time
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2200      	movs	r2, #0
 800ed66:	679a      	str	r2, [r3, #120]	; 0x78
        pollInterval = 0;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        bPollEnable = false; // Don't start polling before dongle is connected
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        simple_pairing_supported = false;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 800ed80:	bf00      	nop
 800ed82:	3710      	adds	r7, #16
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800ed88:	b480      	push	{r7}
 800ed8a:	b085      	sub	sp, #20
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	4608      	mov	r0, r1
 800ed92:	4611      	mov	r1, r2
 800ed94:	461a      	mov	r2, r3
 800ed96:	4603      	mov	r3, r0
 800ed98:	70fb      	strb	r3, [r7, #3]
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	70bb      	strb	r3, [r7, #2]
 800ed9e:	4613      	mov	r3, r2
 800eda0:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800eda2:	787b      	ldrb	r3, [r7, #1]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d15d      	bne.n	800ee64 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	78fa      	ldrb	r2, [r7, #3]
 800edac:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	78db      	ldrb	r3, [r3, #3]
 800edb4:	f003 0303 	and.w	r3, r3, #3
 800edb8:	2b03      	cmp	r3, #3
 800edba:	d114      	bne.n	800ede6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	789b      	ldrb	r3, [r3, #2]
 800edc0:	b25b      	sxtb	r3, r3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	da0f      	bge.n	800ede6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800edc6:	2301      	movs	r3, #1
 800edc8:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800edca:	7bfa      	ldrb	r2, [r7, #15]
 800edcc:	6879      	ldr	r1, [r7, #4]
 800edce:	4613      	mov	r3, r2
 800edd0:	005b      	lsls	r3, r3, #1
 800edd2:	4413      	add	r3, r2
 800edd4:	440b      	add	r3, r1
 800edd6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800edda:	78d3      	ldrb	r3, [r2, #3]
 800eddc:	2101      	movs	r1, #1
 800edde:	f361 0387 	bfi	r3, r1, #2, #6
 800ede2:	70d3      	strb	r3, [r2, #3]
 800ede4:	e00e      	b.n	800ee04 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800ede6:	69fb      	ldr	r3, [r7, #28]
 800ede8:	78db      	ldrb	r3, [r3, #3]
 800edea:	f003 0303 	and.w	r3, r3, #3
 800edee:	2b02      	cmp	r3, #2
 800edf0:	d13a      	bne.n	800ee68 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	789b      	ldrb	r3, [r3, #2]
 800edf6:	b25b      	sxtb	r3, r3
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	da01      	bge.n	800ee00 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800edfc:	2302      	movs	r3, #2
 800edfe:	e000      	b.n	800ee02 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800ee00:	2303      	movs	r3, #3
 800ee02:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	789b      	ldrb	r3, [r3, #2]
 800ee08:	7bfa      	ldrb	r2, [r7, #15]
 800ee0a:	f003 030f 	and.w	r3, r3, #15
 800ee0e:	b2d8      	uxtb	r0, r3
 800ee10:	6879      	ldr	r1, [r7, #4]
 800ee12:	4613      	mov	r3, r2
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	4413      	add	r3, r2
 800ee18:	440b      	add	r3, r1
 800ee1a:	3369      	adds	r3, #105	; 0x69
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	889b      	ldrh	r3, [r3, #4]
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	7bfa      	ldrb	r2, [r7, #15]
 800ee28:	b2d8      	uxtb	r0, r3
 800ee2a:	6879      	ldr	r1, [r7, #4]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	4413      	add	r3, r2
 800ee32:	440b      	add	r3, r1
 800ee34:	336a      	adds	r3, #106	; 0x6a
 800ee36:	4602      	mov	r2, r0
 800ee38:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	799b      	ldrb	r3, [r3, #6]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d204      	bcs.n	800ee52 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	799a      	ldrb	r2, [r3, #6]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        bNumEP++;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800ee58:	3301      	adds	r3, #1
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800ee62:	e002      	b.n	800ee6a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800ee64:	bf00      	nop
 800ee66:	e000      	b.n	800ee6a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800ee68:	bf00      	nop
}
 800ee6a:	3714      	adds	r7, #20
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr

0800ee74 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800ee74:	f1a0 0004 	sub.w	r0, r0, #4
 800ee78:	f7ff bf86 	b.w	800ed88 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800ee7c <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff fedf 	bl	800ec48 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7ff f95a 	bl	800e148 <_ZN3USB14GetAddressPoolEv>
 800ee94:	4603      	mov	r3, r0
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	3208      	adds	r2, #8
 800ee9a:	6812      	ldr	r2, [r2, #0]
 800ee9c:	6879      	ldr	r1, [r7, #4]
 800ee9e:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
 800eea2:	4618      	mov	r0, r3
 800eea4:	4790      	blx	r2
        return 0;
 800eea6:	2300      	movs	r3, #0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3708      	adds	r7, #8
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800eebe:	f083 0301 	eor.w	r3, r3, #1
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d001      	beq.n	800eecc <_ZN3BTD4PollEv+0x1c>
                return 0;
 800eec8:	2300      	movs	r3, #0
 800eeca:	e01d      	b.n	800ef08 <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800eecc:	f7f3 fc96 	bl	80027fc <HAL_GetTick>
 800eed0:	4602      	mov	r2, r0
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eed6:	1ad3      	subs	r3, r2, r3
 800eed8:	43db      	mvns	r3, r3
 800eeda:	0fdb      	lsrs	r3, r3, #31
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d011      	beq.n	800ef06 <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800eee2:	f7f3 fc8b 	bl	80027fc <HAL_GetTick>
 800eee6:	4602      	mov	r2, r0
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800eeee:	441a      	add	r2, r3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	679a      	str	r2, [r3, #120]	; 0x78
                HCI_event_task(); // Poll the HCI event pipe
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 f835 	bl	800ef64 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 fd38 	bl	800f970 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f001 fa17 	bl	8010334 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800ef06:	2300      	movs	r3, #0
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <_ZN3BTD10disconnectEv>:

void BTD::disconnect() {
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ef18:	2300      	movs	r3, #0
 800ef1a:	73fb      	strb	r3, [r7, #15]
 800ef1c:	7bfb      	ldrb	r3, [r7, #15]
 800ef1e:	2b03      	cmp	r3, #3
 800ef20:	d81c      	bhi.n	800ef5c <_ZN3BTD10disconnectEv+0x4c>
                if(btService[i])
 800ef22:	7bfb      	ldrb	r3, [r7, #15]
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	331e      	adds	r3, #30
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	4413      	add	r3, r2
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d010      	beq.n	800ef54 <_ZN3BTD10disconnectEv+0x44>
                        btService[i]->disconnect();
 800ef32:	7bfb      	ldrb	r3, [r7, #15]
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	331e      	adds	r3, #30
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	4413      	add	r3, r2
 800ef3c:	6859      	ldr	r1, [r3, #4]
 800ef3e:	7bfb      	ldrb	r3, [r7, #15]
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	331e      	adds	r3, #30
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	4413      	add	r3, r2
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	330c      	adds	r3, #12
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4608      	mov	r0, r1
 800ef52:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ef54:	7bfb      	ldrb	r3, [r7, #15]
 800ef56:	3301      	adds	r3, #1
 800ef58:	73fb      	strb	r3, [r7, #15]
 800ef5a:	e7df      	b.n	800ef1c <_ZN3BTD10disconnectEv+0xc>
};
 800ef5c:	bf00      	nop
 800ef5e:	3710      	adds	r7, #16
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <_ZN3BTD14HCI_event_taskEv>:

void BTD::HCI_event_task() {
 800ef64:	b5b0      	push	{r4, r5, r7, lr}
 800ef66:	b08a      	sub	sp, #40	; 0x28
 800ef68:	af02      	add	r7, sp, #8
 800ef6a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800ef6c:	2340      	movs	r3, #64	; 0x40
 800ef6e:	81fb      	strh	r3, [r7, #14]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f893 406c 	ldrb.w	r4, [r3, #108]	; 0x6c
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	33a1      	adds	r3, #161	; 0xa1
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
 800ef8a:	f107 050e 	add.w	r5, r7, #14
 800ef8e:	9201      	str	r2, [sp, #4]
 800ef90:	9300      	str	r3, [sp, #0]
 800ef92:	462b      	mov	r3, r5
 800ef94:	4622      	mov	r2, r4
 800ef96:	f004 fd01 	bl	801399c <_ZN3USB10inTransferEhhPtPhh>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	747b      	strb	r3, [r7, #17]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800ef9e:	7c7b      	ldrb	r3, [r7, #17]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d003      	beq.n	800efac <_ZN3BTD14HCI_event_taskEv+0x48>
 800efa4:	7c7b      	ldrb	r3, [r7, #17]
 800efa6:	2b04      	cmp	r3, #4
 800efa8:	f040 84c3 	bne.w	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                switch(hcibuf[0]) { // Switch on event type
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800efb2:	3b01      	subs	r3, #1
 800efb4:	2b35      	cmp	r3, #53	; 0x35
 800efb6:	f200 84bc 	bhi.w	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
 800efba:	a201      	add	r2, pc, #4	; (adr r2, 800efc0 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800efbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc0:	0800f263 	.word	0x0800f263
 800efc4:	0800f2df 	.word	0x0800f2df
 800efc8:	0800f4ad 	.word	0x0800f4ad
 800efcc:	0800f5ad 	.word	0x0800f5ad
 800efd0:	0800f51f 	.word	0x0800f51f
 800efd4:	0800f76b 	.word	0x0800f76b
 800efd8:	0800f551 	.word	0x0800f551
 800efdc:	0800f915 	.word	0x0800f915
 800efe0:	0800f915 	.word	0x0800f915
 800efe4:	0800f933 	.word	0x0800f933
 800efe8:	0800f933 	.word	0x0800f933
 800efec:	0800f915 	.word	0x0800f915
 800eff0:	0800f915 	.word	0x0800f915
 800eff4:	0800f099 	.word	0x0800f099
 800eff8:	0800f1fd 	.word	0x0800f1fd
 800effc:	0800f933 	.word	0x0800f933
 800f000:	0800f933 	.word	0x0800f933
 800f004:	0800f915 	.word	0x0800f915
 800f008:	0800f915 	.word	0x0800f915
 800f00c:	0800f933 	.word	0x0800f933
 800f010:	0800f933 	.word	0x0800f933
 800f014:	0800f679 	.word	0x0800f679
 800f018:	0800f6f1 	.word	0x0800f6f1
 800f01c:	0800f81d 	.word	0x0800f81d
 800f020:	0800f915 	.word	0x0800f915
 800f024:	0800f915 	.word	0x0800f915
 800f028:	0800f915 	.word	0x0800f915
 800f02c:	0800f933 	.word	0x0800f933
 800f030:	0800f933 	.word	0x0800f933
 800f034:	0800f933 	.word	0x0800f933
 800f038:	0800f933 	.word	0x0800f933
 800f03c:	0800f915 	.word	0x0800f915
 800f040:	0800f933 	.word	0x0800f933
 800f044:	0800f933 	.word	0x0800f933
 800f048:	0800f933 	.word	0x0800f933
 800f04c:	0800f933 	.word	0x0800f933
 800f050:	0800f933 	.word	0x0800f933
 800f054:	0800f933 	.word	0x0800f933
 800f058:	0800f933 	.word	0x0800f933
 800f05c:	0800f933 	.word	0x0800f933
 800f060:	0800f933 	.word	0x0800f933
 800f064:	0800f933 	.word	0x0800f933
 800f068:	0800f933 	.word	0x0800f933
 800f06c:	0800f933 	.word	0x0800f933
 800f070:	0800f933 	.word	0x0800f933
 800f074:	0800f933 	.word	0x0800f933
 800f078:	0800f933 	.word	0x0800f933
 800f07c:	0800f933 	.word	0x0800f933
 800f080:	0800f7fd 	.word	0x0800f7fd
 800f084:	0800f915 	.word	0x0800f915
 800f088:	0800f80d 	.word	0x0800f80d
 800f08c:	0800f933 	.word	0x0800f933
 800f090:	0800f933 	.word	0x0800f933
 800f094:	0800f915 	.word	0x0800f915
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f040 843a 	bne.w	800f918 <_ZN3BTD14HCI_event_taskEv+0x9b4>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f0aa:	f043 0301 	orr.w	r3, r3, #1
 800f0ae:	b29a      	uxth	r2, r3
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d114      	bne.n	800f0ea <_ZN3BTD14HCI_event_taskEv+0x186>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f0c6:	2b10      	cmp	r3, #16
 800f0c8:	d10f      	bne.n	800f0ea <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800f0e8:	e087      	b.n	800f1fa <_ZN3BTD14HCI_event_taskEv+0x296>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f0f0:	2b04      	cmp	r3, #4
 800f0f2:	d158      	bne.n	800f1a6 <_ZN3BTD14HCI_event_taskEv+0x242>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f0fa:	2b10      	cmp	r3, #16
 800f0fc:	d153      	bne.n	800f1a6 <_ZN3BTD14HCI_event_taskEv+0x242>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d142      	bne.n	800f192 <_ZN3BTD14HCI_event_taskEv+0x22e>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800f112:	2b00      	cmp	r3, #0
 800f114:	d120      	bne.n	800f158 <_ZN3BTD14HCI_event_taskEv+0x1f4>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
 800f116:	2180      	movs	r1, #128	; 0x80
 800f118:	48a9      	ldr	r0, [pc, #676]	; (800f3c0 <_ZN3BTD14HCI_event_taskEv+0x45c>)
 800f11a:	f006 f92b 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800f124:	f003 0308 	and.w	r3, r3, #8
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d008      	beq.n	800f13e <_ZN3BTD14HCI_event_taskEv+0x1da>
                                                                        simple_pairing_supported = true;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2201      	movs	r2, #1
 800f130:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
 800f134:	2180      	movs	r1, #128	; 0x80
 800f136:	48a3      	ldr	r0, [pc, #652]	; (800f3c4 <_ZN3BTD14HCI_event_taskEv+0x460>)
 800f138:	f006 f91c 	bl	8015374 <_Z8E_NotifyPKci>
 800f13c:	e007      	b.n	800f14e <_ZN3BTD14HCI_event_taskEv+0x1ea>
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2200      	movs	r2, #0
 800f142:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("does NOT support"), 0x80);
 800f146:	2180      	movs	r1, #128	; 0x80
 800f148:	489f      	ldr	r0, [pc, #636]	; (800f3c8 <_ZN3BTD14HCI_event_taskEv+0x464>)
 800f14a:	f006 f913 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                                                }
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR(" secure simple pairing (controller support)"), 0x80);
 800f14e:	2180      	movs	r1, #128	; 0x80
 800f150:	489e      	ldr	r0, [pc, #632]	; (800f3cc <_ZN3BTD14HCI_event_taskEv+0x468>)
 800f152:	f006 f90f 	bl	8015374 <_Z8E_NotifyPKci>
 800f156:	e01c      	b.n	800f192 <_ZN3BTD14HCI_event_taskEv+0x22e>
#endif
                                                        } else if(hcibuf[6] == 1) { // Page 1
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d117      	bne.n	800f192 <_ZN3BTD14HCI_event_taskEv+0x22e>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
 800f162:	2180      	movs	r1, #128	; 0x80
 800f164:	4896      	ldr	r0, [pc, #600]	; (800f3c0 <_ZN3BTD14HCI_event_taskEv+0x45c>)
 800f166:	f006 f905 	bl	8015374 <_Z8E_NotifyPKci>
                                                                if(hcibuf[8 + 0] & (1U << 0))
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800f170:	f003 0301 	and.w	r3, r3, #1
 800f174:	2b00      	cmp	r3, #0
 800f176:	d004      	beq.n	800f182 <_ZN3BTD14HCI_event_taskEv+0x21e>
                                                                        Notify(PSTR("supports"), 0x80);
 800f178:	2180      	movs	r1, #128	; 0x80
 800f17a:	4892      	ldr	r0, [pc, #584]	; (800f3c4 <_ZN3BTD14HCI_event_taskEv+0x460>)
 800f17c:	f006 f8fa 	bl	8015374 <_Z8E_NotifyPKci>
 800f180:	e003      	b.n	800f18a <_ZN3BTD14HCI_event_taskEv+0x226>
                                                                else
                                                                        Notify(PSTR("does NOT support"), 0x80);
 800f182:	2180      	movs	r1, #128	; 0x80
 800f184:	4890      	ldr	r0, [pc, #576]	; (800f3c8 <_ZN3BTD14HCI_event_taskEv+0x464>)
 800f186:	f006 f8f5 	bl	8015374 <_Z8E_NotifyPKci>
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
 800f18a:	2180      	movs	r1, #128	; 0x80
 800f18c:	4890      	ldr	r0, [pc, #576]	; (800f3d0 <_ZN3BTD14HCI_event_taskEv+0x46c>)
 800f18e:	f006 f8f1 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f198:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800f1a4:	e029      	b.n	800f1fa <_ZN3BTD14HCI_event_taskEv+0x296>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f1ac:	2b09      	cmp	r3, #9
 800f1ae:	f040 83b3 	bne.w	800f918 <_ZN3BTD14HCI_event_taskEv+0x9b4>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f1b8:	2b10      	cmp	r3, #16
 800f1ba:	f040 83ad 	bne.w	800f918 <_ZN3BTD14HCI_event_taskEv+0x9b4>
                                                for(uint8_t i = 0; i < 6; i++)
 800f1be:	2300      	movs	r3, #0
 800f1c0:	77fb      	strb	r3, [r7, #31]
 800f1c2:	7ffb      	ldrb	r3, [r7, #31]
 800f1c4:	2b05      	cmp	r3, #5
 800f1c6:	d80e      	bhi.n	800f1e6 <_ZN3BTD14HCI_event_taskEv+0x282>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800f1c8:	7ffb      	ldrb	r3, [r7, #31]
 800f1ca:	1d9a      	adds	r2, r3, #6
 800f1cc:	7ffb      	ldrb	r3, [r7, #31]
 800f1ce:	6879      	ldr	r1, [r7, #4]
 800f1d0:	440a      	add	r2, r1
 800f1d2:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	4413      	add	r3, r2
 800f1da:	460a      	mov	r2, r1
 800f1dc:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800f1de:	7ffb      	ldrb	r3, [r7, #31]
 800f1e0:	3301      	adds	r3, #1
 800f1e2:	77fb      	strb	r3, [r7, #31]
 800f1e4:	e7ed      	b.n	800f1c2 <_ZN3BTD14HCI_event_taskEv+0x25e>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f1ec:	f043 0320 	orr.w	r3, r3, #32
 800f1f0:	b29a      	uxth	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                        }
                                }
                                break;
 800f1f8:	e38e      	b.n	800f918 <_ZN3BTD14HCI_event_taskEv+0x9b4>
 800f1fa:	e38d      	b.n	800f918 <_ZN3BTD14HCI_event_taskEv+0x9b4>

                        case EV_COMMAND_STATUS:
                                if(hcibuf[2]) { // Show status on serial if not OK
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f202:	2b00      	cmp	r3, #0
 800f204:	f000 838a 	beq.w	800f91c <_ZN3BTD14HCI_event_taskEv+0x9b8>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nHCI Command Failed: "), 0x80);
 800f208:	2180      	movs	r1, #128	; 0x80
 800f20a:	4872      	ldr	r0, [pc, #456]	; (800f3d4 <_ZN3BTD14HCI_event_taskEv+0x470>)
 800f20c:	f006 f8b2 	bl	8015374 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f216:	2180      	movs	r1, #128	; 0x80
 800f218:	4618      	mov	r0, r3
 800f21a:	f002 f9ec 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR("\r\nNum HCI Command Packets: "), 0x80);
 800f21e:	2180      	movs	r1, #128	; 0x80
 800f220:	486d      	ldr	r0, [pc, #436]	; (800f3d8 <_ZN3BTD14HCI_event_taskEv+0x474>)
 800f222:	f006 f8a7 	bl	8015374 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[3], 0x80);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f22c:	2180      	movs	r1, #128	; 0x80
 800f22e:	4618      	mov	r0, r3
 800f230:	f002 f9e1 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR("\r\nCommand Opcode: "), 0x80);
 800f234:	2180      	movs	r1, #128	; 0x80
 800f236:	4869      	ldr	r0, [pc, #420]	; (800f3dc <_ZN3BTD14HCI_event_taskEv+0x478>)
 800f238:	f006 f89c 	bl	8015374 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[4], 0x80);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f242:	2180      	movs	r1, #128	; 0x80
 800f244:	4618      	mov	r0, r3
 800f246:	f002 f9d6 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(" "), 0x80);
 800f24a:	2180      	movs	r1, #128	; 0x80
 800f24c:	4864      	ldr	r0, [pc, #400]	; (800f3e0 <_ZN3BTD14HCI_event_taskEv+0x47c>)
 800f24e:	f006 f891 	bl	8015374 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[5], 0x80);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800f258:	2180      	movs	r1, #128	; 0x80
 800f25a:	4618      	mov	r0, r3
 800f25c:	f002 f9cb 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
#endif
                                }
                                break;
 800f260:	e35c      	b.n	800f91c <_ZN3BTD14HCI_event_taskEv+0x9b8>

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800f268:	2b04      	cmp	r3, #4
 800f26a:	d92f      	bls.n	800f2cc <_ZN3BTD14HCI_event_taskEv+0x368>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f272:	2b00      	cmp	r3, #0
 800f274:	d104      	bne.n	800f280 <_ZN3BTD14HCI_event_taskEv+0x31c>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d025      	beq.n	800f2cc <_ZN3BTD14HCI_event_taskEv+0x368>
                                        inquiry_counter = 0;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2200      	movs	r2, #0
 800f284:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#ifdef DEBUG_USB_HOST
                                        if(pairWithWii)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d004      	beq.n	800f29c <_ZN3BTD14HCI_event_taskEv+0x338>
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
 800f292:	2180      	movs	r1, #128	; 0x80
 800f294:	4853      	ldr	r0, [pc, #332]	; (800f3e4 <_ZN3BTD14HCI_event_taskEv+0x480>)
 800f296:	f006 f86d 	bl	8015374 <_Z8E_NotifyPKci>
 800f29a:	e003      	b.n	800f2a4 <_ZN3BTD14HCI_event_taskEv+0x340>
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
 800f29c:	2180      	movs	r1, #128	; 0x80
 800f29e:	4852      	ldr	r0, [pc, #328]	; (800f3e8 <_ZN3BTD14HCI_event_taskEv+0x484>)
 800f2a0:	f006 f868 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                        connectToWii = false;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                                        pairWithWii = false;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                                        connectToHIDDevice = false;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                                        pairWithHIDDevice = false;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                                        hci_state = HCI_SCANNING_STATE;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	220a      	movs	r2, #10
 800f2c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                }
                                inquiry_counter++;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	b2da      	uxtb	r2, r3
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                                break;
 800f2dc:	e329      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f000 831b 	beq.w	800f920 <_ZN3BTD14HCI_event_taskEv+0x9bc>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	77bb      	strb	r3, [r7, #30]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f2f4:	7fba      	ldrb	r2, [r7, #30]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	f080 8312 	bcs.w	800f920 <_ZN3BTD14HCI_event_taskEv+0x9bc>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f302:	00db      	lsls	r3, r3, #3
 800f304:	b2da      	uxtb	r2, r3
 800f306:	7fbb      	ldrb	r3, [r7, #30]
 800f308:	4619      	mov	r1, r3
 800f30a:	0049      	lsls	r1, r1, #1
 800f30c:	440b      	add	r3, r1
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	4413      	add	r3, r2
 800f312:	743b      	strb	r3, [r7, #16]

                                                for(uint8_t j = 0; j < 3; j++)
 800f314:	2300      	movs	r3, #0
 800f316:	777b      	strb	r3, [r7, #29]
 800f318:	7f7b      	ldrb	r3, [r7, #29]
 800f31a:	2b02      	cmp	r3, #2
 800f31c:	d811      	bhi.n	800f342 <_ZN3BTD14HCI_event_taskEv+0x3de>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800f31e:	7f7b      	ldrb	r3, [r7, #29]
 800f320:	1d1a      	adds	r2, r3, #4
 800f322:	7c3b      	ldrb	r3, [r7, #16]
 800f324:	441a      	add	r2, r3
 800f326:	7f7b      	ldrb	r3, [r7, #29]
 800f328:	6879      	ldr	r1, [r7, #4]
 800f32a:	440a      	add	r2, r1
 800f32c:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f330:	687a      	ldr	r2, [r7, #4]
 800f332:	4413      	add	r3, r2
 800f334:	460a      	mov	r2, r1
 800f336:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
                                                for(uint8_t j = 0; j < 3; j++)
 800f33a:	7f7b      	ldrb	r3, [r7, #29]
 800f33c:	3301      	adds	r3, #1
 800f33e:	777b      	strb	r3, [r7, #29]
 800f340:	e7ea      	b.n	800f318 <_ZN3BTD14HCI_event_taskEv+0x3b4>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d04f      	beq.n	800f3ec <_ZN3BTD14HCI_event_taskEv+0x488>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f352:	2b00      	cmp	r3, #0
 800f354:	d14a      	bne.n	800f3ec <_ZN3BTD14HCI_event_taskEv+0x488>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800f35c:	2b05      	cmp	r3, #5
 800f35e:	d145      	bne.n	800f3ec <_ZN3BTD14HCI_event_taskEv+0x488>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f366:	f003 030c 	and.w	r3, r3, #12
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d03e      	beq.n	800f3ec <_ZN3BTD14HCI_event_taskEv+0x488>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2201      	movs	r2, #1
 800f372:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

                                                        for(uint8_t j = 0; j < 6; j++)
 800f376:	2300      	movs	r3, #0
 800f378:	773b      	strb	r3, [r7, #28]
 800f37a:	7f3b      	ldrb	r3, [r7, #28]
 800f37c:	2b05      	cmp	r3, #5
 800f37e:	d814      	bhi.n	800f3aa <_ZN3BTD14HCI_event_taskEv+0x446>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800f380:	7f3b      	ldrb	r3, [r7, #28]
 800f382:	1cd9      	adds	r1, r3, #3
 800f384:	7fba      	ldrb	r2, [r7, #30]
 800f386:	4613      	mov	r3, r2
 800f388:	005b      	lsls	r3, r3, #1
 800f38a:	4413      	add	r3, r2
 800f38c:	005b      	lsls	r3, r3, #1
 800f38e:	18ca      	adds	r2, r1, r3
 800f390:	7f3b      	ldrb	r3, [r7, #28]
 800f392:	6879      	ldr	r1, [r7, #4]
 800f394:	440a      	add	r2, r1
 800f396:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f39a:	687a      	ldr	r2, [r7, #4]
 800f39c:	4413      	add	r3, r2
 800f39e:	460a      	mov	r2, r1
 800f3a0:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800f3a2:	7f3b      	ldrb	r3, [r7, #28]
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	773b      	strb	r3, [r7, #28]
 800f3a8:	e7e7      	b.n	800f37a <_ZN3BTD14HCI_event_taskEv+0x416>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                                        break;
 800f3bc:	e075      	b.n	800f4aa <_ZN3BTD14HCI_event_taskEv+0x546>
 800f3be:	bf00      	nop
 800f3c0:	08015b1c 	.word	0x08015b1c
 800f3c4:	08015b28 	.word	0x08015b28
 800f3c8:	08015b34 	.word	0x08015b34
 800f3cc:	08015b48 	.word	0x08015b48
 800f3d0:	08015b74 	.word	0x08015b74
 800f3d4:	08015b9c 	.word	0x08015b9c
 800f3d8:	08015bb4 	.word	0x08015bb4
 800f3dc:	08015bd0 	.word	0x08015bd0
 800f3e0:	08015be4 	.word	0x08015be4
 800f3e4:	08015be8 	.word	0x08015be8
 800f3e8:	08015c00 	.word	0x08015c00
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d055      	beq.n	800f4a2 <_ZN3BTD14HCI_event_taskEv+0x53e>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800f3fc:	f003 030f 	and.w	r3, r3, #15
 800f400:	2b05      	cmp	r3, #5
 800f402:	d14e      	bne.n	800f4a2 <_ZN3BTD14HCI_event_taskEv+0x53e>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f40a:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d047      	beq.n	800f4a2 <_ZN3BTD14HCI_event_taskEv+0x53e>
#ifdef DEBUG_USB_HOST
                                                        checkRemoteName = true; // Used to print name in the serial monitor if serial debugging is enabled
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2201      	movs	r2, #1
 800f416:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

                                                        if(classOfDevice[0] & 0x80)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f420:	b25b      	sxtb	r3, r3
 800f422:	2b00      	cmp	r3, #0
 800f424:	da03      	bge.n	800f42e <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                                Notify(PSTR("\r\nMouse found"), 0x80);
 800f426:	2180      	movs	r1, #128	; 0x80
 800f428:	48a7      	ldr	r0, [pc, #668]	; (800f6c8 <_ZN3BTD14HCI_event_taskEv+0x764>)
 800f42a:	f005 ffa3 	bl	8015374 <_Z8E_NotifyPKci>
                                                        if(classOfDevice[0] & 0x40)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d003      	beq.n	800f444 <_ZN3BTD14HCI_event_taskEv+0x4e0>
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
 800f43c:	2180      	movs	r1, #128	; 0x80
 800f43e:	48a3      	ldr	r0, [pc, #652]	; (800f6cc <_ZN3BTD14HCI_event_taskEv+0x768>)
 800f440:	f005 ff98 	bl	8015374 <_Z8E_NotifyPKci>
                                                        if(classOfDevice[0] & 0x08)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f44a:	f003 0308 	and.w	r3, r3, #8
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d003      	beq.n	800f45a <_ZN3BTD14HCI_event_taskEv+0x4f6>
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
 800f452:	2180      	movs	r1, #128	; 0x80
 800f454:	489e      	ldr	r0, [pc, #632]	; (800f6d0 <_ZN3BTD14HCI_event_taskEv+0x76c>)
 800f456:	f005 ff8d 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800f45a:	2300      	movs	r3, #0
 800f45c:	76fb      	strb	r3, [r7, #27]
 800f45e:	7efb      	ldrb	r3, [r7, #27]
 800f460:	2b05      	cmp	r3, #5
 800f462:	d814      	bhi.n	800f48e <_ZN3BTD14HCI_event_taskEv+0x52a>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800f464:	7efb      	ldrb	r3, [r7, #27]
 800f466:	1cd9      	adds	r1, r3, #3
 800f468:	7fba      	ldrb	r2, [r7, #30]
 800f46a:	4613      	mov	r3, r2
 800f46c:	005b      	lsls	r3, r3, #1
 800f46e:	4413      	add	r3, r2
 800f470:	005b      	lsls	r3, r3, #1
 800f472:	18ca      	adds	r2, r1, r3
 800f474:	7efb      	ldrb	r3, [r7, #27]
 800f476:	6879      	ldr	r1, [r7, #4]
 800f478:	440a      	add	r2, r1
 800f47a:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	4413      	add	r3, r2
 800f482:	460a      	mov	r2, r1
 800f484:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800f486:	7efb      	ldrb	r3, [r7, #27]
 800f488:	3301      	adds	r3, #1
 800f48a:	76fb      	strb	r3, [r7, #27]
 800f48c:	e7e7      	b.n	800f45e <_ZN3BTD14HCI_event_taskEv+0x4fa>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f498:	b29a      	uxth	r2, r3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                                        break;
 800f4a0:	e003      	b.n	800f4aa <_ZN3BTD14HCI_event_taskEv+0x546>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800f4a2:	7fbb      	ldrb	r3, [r7, #30]
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	77bb      	strb	r3, [r7, #30]
 800f4a8:	e721      	b.n	800f2ee <_ZN3BTD14HCI_event_taskEv+0x38a>
                                                }
                                        }
                                }
                                break;
 800f4aa:	e239      	b.n	800f920 <_ZN3BTD14HCI_event_taskEv+0x9bc>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f4b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                if(!hcibuf[2]) { // Check if connected OK
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d11a      	bne.n	800f4fe <_ZN3BTD14HCI_event_taskEv+0x59a>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f4ce:	b21a      	sxth	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f4d6:	021b      	lsls	r3, r3, #8
 800f4d8:	b21b      	sxth	r3, r3
 800f4da:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f4de:	b21b      	sxth	r3, r3
 800f4e0:	4313      	orrs	r3, r2
 800f4e2:	b21b      	sxth	r3, r3
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f4f0:	f043 0302 	orr.w	r3, r3, #2
 800f4f4:	b29a      	uxth	r2, r3
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800f4fc:	e219      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2206      	movs	r2, #6
 800f502:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
 800f506:	2180      	movs	r1, #128	; 0x80
 800f508:	4872      	ldr	r0, [pc, #456]	; (800f6d4 <_ZN3BTD14HCI_event_taskEv+0x770>)
 800f50a:	f005 ff33 	bl	8015374 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f514:	2180      	movs	r1, #128	; 0x80
 800f516:	4618      	mov	r0, r3
 800f518:	f002 f86d 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                break;
 800f51c:	e209      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f524:	2b00      	cmp	r3, #0
 800f526:	f040 81fd 	bne.w	800f924 <_ZN3BTD14HCI_event_taskEv+0x9c0>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f530:	f043 0304 	orr.w	r3, r3, #4
 800f534:	b29a      	uxth	r2, r3
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f542:	f023 0302 	bic.w	r3, r3, #2
 800f546:	b29a      	uxth	r2, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                }
                                break;
 800f54e:	e1e9      	b.n	800f924 <_ZN3BTD14HCI_event_taskEv+0x9c0>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f556:	2b00      	cmp	r3, #0
 800f558:	f040 81e6 	bne.w	800f928 <_ZN3BTD14HCI_event_taskEv+0x9c4>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800f55c:	2300      	movs	r3, #0
 800f55e:	76bb      	strb	r3, [r7, #26]
 800f560:	7ebb      	ldrb	r3, [r7, #26]
 800f562:	2b1d      	cmp	r3, #29
 800f564:	d818      	bhi.n	800f598 <_ZN3BTD14HCI_event_taskEv+0x634>
                                                remote_name[i] = hcibuf[9 + i];
 800f566:	7ebb      	ldrb	r3, [r7, #26]
 800f568:	f103 0209 	add.w	r2, r3, #9
 800f56c:	7ebb      	ldrb	r3, [r7, #26]
 800f56e:	6879      	ldr	r1, [r7, #4]
 800f570:	440a      	add	r2, r1
 800f572:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	4413      	add	r3, r2
 800f57a:	460a      	mov	r2, r1
 800f57c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800f580:	7ebb      	ldrb	r3, [r7, #26]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	4413      	add	r3, r2
 800f586:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d003      	beq.n	800f596 <_ZN3BTD14HCI_event_taskEv+0x632>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800f58e:	7ebb      	ldrb	r3, [r7, #26]
 800f590:	3301      	adds	r3, #1
 800f592:	76bb      	strb	r3, [r7, #26]
 800f594:	e7e4      	b.n	800f560 <_ZN3BTD14HCI_event_taskEv+0x5fc>
                                                        break;
 800f596:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f59e:	f043 0308 	orr.w	r3, r3, #8
 800f5a2:	b29a      	uxth	r2, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                }
                                break;
 800f5aa:	e1bd      	b.n	800f928 <_ZN3BTD14HCI_event_taskEv+0x9c4>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	767b      	strb	r3, [r7, #25]
 800f5b0:	7e7b      	ldrb	r3, [r7, #25]
 800f5b2:	2b05      	cmp	r3, #5
 800f5b4:	d80e      	bhi.n	800f5d4 <_ZN3BTD14HCI_event_taskEv+0x670>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800f5b6:	7e7b      	ldrb	r3, [r7, #25]
 800f5b8:	1c9a      	adds	r2, r3, #2
 800f5ba:	7e7b      	ldrb	r3, [r7, #25]
 800f5bc:	6879      	ldr	r1, [r7, #4]
 800f5be:	440a      	add	r2, r1
 800f5c0:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	4413      	add	r3, r2
 800f5c8:	460a      	mov	r2, r1
 800f5ca:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800f5cc:	7e7b      	ldrb	r3, [r7, #25]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	767b      	strb	r3, [r7, #25]
 800f5d2:	e7ed      	b.n	800f5b0 <_ZN3BTD14HCI_event_taskEv+0x64c>

                                for(uint8_t i = 0; i < 3; i++)
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	763b      	strb	r3, [r7, #24]
 800f5d8:	7e3b      	ldrb	r3, [r7, #24]
 800f5da:	2b02      	cmp	r3, #2
 800f5dc:	d810      	bhi.n	800f600 <_ZN3BTD14HCI_event_taskEv+0x69c>
                                        classOfDevice[i] = hcibuf[i + 8];
 800f5de:	7e3b      	ldrb	r3, [r7, #24]
 800f5e0:	f103 0208 	add.w	r2, r3, #8
 800f5e4:	7e3b      	ldrb	r3, [r7, #24]
 800f5e6:	6879      	ldr	r1, [r7, #4]
 800f5e8:	440a      	add	r2, r1
 800f5ea:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	460a      	mov	r2, r1
 800f5f4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
                                for(uint8_t i = 0; i < 3; i++)
 800f5f8:	7e3b      	ldrb	r3, [r7, #24]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	763b      	strb	r3, [r7, #24]
 800f5fe:	e7eb      	b.n	800f5d8 <_ZN3BTD14HCI_event_taskEv+0x674>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800f606:	f003 030f 	and.w	r3, r3, #15
 800f60a:	2b05      	cmp	r3, #5
 800f60c:	d12a      	bne.n	800f664 <_ZN3BTD14HCI_event_taskEv+0x700>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f614:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d023      	beq.n	800f664 <_ZN3BTD14HCI_event_taskEv+0x700>
#ifdef DEBUG_USB_HOST
                                        if(classOfDevice[0] & 0x80)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f622:	b25b      	sxtb	r3, r3
 800f624:	2b00      	cmp	r3, #0
 800f626:	da03      	bge.n	800f630 <_ZN3BTD14HCI_event_taskEv+0x6cc>
                                                Notify(PSTR("\r\nMouse is connecting"), 0x80);
 800f628:	2180      	movs	r1, #128	; 0x80
 800f62a:	482b      	ldr	r0, [pc, #172]	; (800f6d8 <_ZN3BTD14HCI_event_taskEv+0x774>)
 800f62c:	f005 fea2 	bl	8015374 <_Z8E_NotifyPKci>
                                        if(classOfDevice[0] & 0x40)
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d003      	beq.n	800f646 <_ZN3BTD14HCI_event_taskEv+0x6e2>
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
 800f63e:	2180      	movs	r1, #128	; 0x80
 800f640:	4826      	ldr	r0, [pc, #152]	; (800f6dc <_ZN3BTD14HCI_event_taskEv+0x778>)
 800f642:	f005 fe97 	bl	8015374 <_Z8E_NotifyPKci>
                                        if(classOfDevice[0] & 0x08)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f64c:	f003 0308 	and.w	r3, r3, #8
 800f650:	2b00      	cmp	r3, #0
 800f652:	d003      	beq.n	800f65c <_ZN3BTD14HCI_event_taskEv+0x6f8>
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
 800f654:	2180      	movs	r1, #128	; 0x80
 800f656:	4822      	ldr	r0, [pc, #136]	; (800f6e0 <_ZN3BTD14HCI_event_taskEv+0x77c>)
 800f658:	f005 fe8c 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                        incomingHIDDevice = true;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2201      	movs	r2, #1
 800f660:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f66a:	f043 0310 	orr.w	r3, r3, #16
 800f66e:	b29a      	uxth	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                break;
 800f676:	e15c      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d007      	beq.n	800f692 <_ZN3BTD14HCI_event_taskEv+0x72e>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
 800f682:	2180      	movs	r1, #128	; 0x80
 800f684:	4817      	ldr	r0, [pc, #92]	; (800f6e4 <_ZN3BTD14HCI_event_taskEv+0x780>)
 800f686:	f005 fe75 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                        hci_pin_code_request_reply();
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f001 f9b6 	bl	80109fc <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800f690:	e14f      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                } else if(btdPin != NULL) {
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	691b      	ldr	r3, [r3, #16]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d00d      	beq.n	800f6b6 <_ZN3BTD14HCI_event_taskEv+0x752>
                                        Notify(PSTR("\r\nBluetooth pin is set too: "), 0x80);
 800f69a:	2180      	movs	r1, #128	; 0x80
 800f69c:	4812      	ldr	r0, [pc, #72]	; (800f6e8 <_ZN3BTD14HCI_event_taskEv+0x784>)
 800f69e:	f005 fe69 	bl	8015374 <_Z8E_NotifyPKci>
                                        NotifyStr(btdPin, 0x80);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	691b      	ldr	r3, [r3, #16]
 800f6a6:	2180      	movs	r1, #128	; 0x80
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f005 fe8b 	bl	80153c4 <_Z11E_NotifyStrPKci>
                                        hci_pin_code_request_reply();
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f001 f9a4 	bl	80109fc <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800f6b4:	e13d      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
 800f6b6:	2180      	movs	r1, #128	; 0x80
 800f6b8:	480c      	ldr	r0, [pc, #48]	; (800f6ec <_ZN3BTD14HCI_event_taskEv+0x788>)
 800f6ba:	f005 fe5b 	bl	8015374 <_Z8E_NotifyPKci>
                                        hci_pin_code_negative_request_reply();
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f001 fa56 	bl	8010b70 <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800f6c4:	e135      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
 800f6c6:	bf00      	nop
 800f6c8:	08015c1c 	.word	0x08015c1c
 800f6cc:	08015c2c 	.word	0x08015c2c
 800f6d0:	08015c40 	.word	0x08015c40
 800f6d4:	08015c50 	.word	0x08015c50
 800f6d8:	08015c68 	.word	0x08015c68
 800f6dc:	08015c80 	.word	0x08015c80
 800f6e0:	08015c9c 	.word	0x08015c9c
 800f6e4:	08015cb4 	.word	0x08015cb4
 800f6e8:	08015ccc 	.word	0x08015ccc
 800f6ec:	08015cec 	.word	0x08015cec

                        case EV_LINK_KEY_REQUEST: //For the Xbox One S Controller we can't use the negative reply, other controllers use negative_reply
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
 800f6f0:	2180      	movs	r1, #128	; 0x80
 800f6f2:	4892      	ldr	r0, [pc, #584]	; (800f93c <_ZN3BTD14HCI_event_taskEv+0x9d8>)
 800f6f4:	f005 fe3e 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                if ((!pairWithHIDDevice || incomingHIDDevice) && incomingXboxOneS) {
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800f6fe:	f083 0301 	eor.w	r3, r3, #1
 800f702:	b2db      	uxtb	r3, r3
 800f704:	2b00      	cmp	r3, #0
 800f706:	d104      	bne.n	800f712 <_ZN3BTD14HCI_event_taskEv+0x7ae>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d023      	beq.n	800f75a <_ZN3BTD14HCI_event_taskEv+0x7f6>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d01e      	beq.n	800f75a <_ZN3BTD14HCI_event_taskEv+0x7f6>
                                        for(uint8_t i = 0; i < 16; i ++) {
 800f71c:	2300      	movs	r3, #0
 800f71e:	75fb      	strb	r3, [r7, #23]
 800f720:	7dfb      	ldrb	r3, [r7, #23]
 800f722:	2b0f      	cmp	r3, #15
 800f724:	d810      	bhi.n	800f748 <_ZN3BTD14HCI_event_taskEv+0x7e4>
                                                link_key[i] = EEPROM.read(i+6);
 800f726:	7dfb      	ldrb	r3, [r7, #23]
 800f728:	3306      	adds	r3, #6
 800f72a:	7dfc      	ldrb	r4, [r7, #23]
 800f72c:	4619      	mov	r1, r3
 800f72e:	4884      	ldr	r0, [pc, #528]	; (800f940 <_ZN3BTD14HCI_event_taskEv+0x9dc>)
 800f730:	f7fe fe58 	bl	800e3e4 <_ZN11EEPROMClass4readEi>
 800f734:	4603      	mov	r3, r0
 800f736:	461a      	mov	r2, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4423      	add	r3, r4
 800f73c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                        for(uint8_t i = 0; i < 16; i ++) {
 800f740:	7dfb      	ldrb	r3, [r7, #23]
 800f742:	3301      	adds	r3, #1
 800f744:	75fb      	strb	r3, [r7, #23]
 800f746:	e7eb      	b.n	800f720 <_ZN3BTD14HCI_event_taskEv+0x7bc>
                                        }
                                        hci_link_key_request_reply();
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f001 fa4c 	bl	8010be6 <_ZN3BTD26hci_link_key_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nhci_link_key_request_reply"), 0x80);
 800f74e:	2180      	movs	r1, #128	; 0x80
 800f750:	487c      	ldr	r0, [pc, #496]	; (800f944 <_ZN3BTD14HCI_event_taskEv+0x9e0>)
 800f752:	f005 fe0f 	bl	8015374 <_Z8E_NotifyPKci>
 800f756:	bf00      	nop
                                        hci_link_key_request_negative_reply();
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nhci_link_key_request_negative_reply"), 0x80);
#endif
                                }
                                break;
 800f758:	e0eb      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                        hci_link_key_request_negative_reply();
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f001 fade 	bl	8010d1c <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                        Notify(PSTR("\r\nhci_link_key_request_negative_reply"), 0x80);
 800f760:	2180      	movs	r1, #128	; 0x80
 800f762:	4879      	ldr	r0, [pc, #484]	; (800f948 <_ZN3BTD14HCI_event_taskEv+0x9e4>)
 800f764:	f005 fe06 	bl	8015374 <_Z8E_NotifyPKci>
                                break;
 800f768:	e0e3      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f770:	2b00      	cmp	r3, #0
 800f772:	d12d      	bne.n	800f7d0 <_ZN3BTD14HCI_event_taskEv+0x86c>
                                        if(pairWithWii && !connectToWii) {
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d010      	beq.n	800f7a0 <_ZN3BTD14HCI_event_taskEv+0x83c>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800f784:	f083 0301 	eor.w	r3, r3, #1
 800f788:	b2db      	uxtb	r3, r3
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d008      	beq.n	800f7a0 <_ZN3BTD14HCI_event_taskEv+0x83c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
 800f78e:	2180      	movs	r1, #128	; 0x80
 800f790:	486e      	ldr	r0, [pc, #440]	; (800f94c <_ZN3BTD14HCI_event_taskEv+0x9e8>)
 800f792:	f005 fdef 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2201      	movs	r2, #1
 800f79a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800f79e:	e0c5      	b.n	800f92c <_ZN3BTD14HCI_event_taskEv+0x9c8>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	f000 80c0 	beq.w	800f92c <_ZN3BTD14HCI_event_taskEv+0x9c8>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f7b2:	f083 0301 	eor.w	r3, r3, #1
 800f7b6:	b2db      	uxtb	r3, r3
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f000 80b7 	beq.w	800f92c <_ZN3BTD14HCI_event_taskEv+0x9c8>
                                                Notify(PSTR("\r\nPairing successful with HID device"), 0x80);
 800f7be:	2180      	movs	r1, #128	; 0x80
 800f7c0:	4863      	ldr	r0, [pc, #396]	; (800f950 <_ZN3BTD14HCI_event_taskEv+0x9ec>)
 800f7c2:	f005 fdd7 	bl	8015374 <_Z8E_NotifyPKci>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2201      	movs	r2, #1
 800f7ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                                break;
 800f7ce:	e0ad      	b.n	800f92c <_ZN3BTD14HCI_event_taskEv+0x9c8>
                                        Notify(PSTR("\r\nPairing Failed: "), 0x80);
 800f7d0:	2180      	movs	r1, #128	; 0x80
 800f7d2:	4860      	ldr	r0, [pc, #384]	; (800f954 <_ZN3BTD14HCI_event_taskEv+0x9f0>)
 800f7d4:	f005 fdce 	bl	8015374 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f7de:	2180      	movs	r1, #128	; 0x80
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f001 ff08 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                        hci_disconnect(hci_handle);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	8b5b      	ldrh	r3, [r3, #26]
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f001 fb7d 	bl	8010eec <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2210      	movs	r2, #16
 800f7f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                break;
 800f7fa:	e097      	b.n	800f92c <_ZN3BTD14HCI_event_taskEv+0x9c8>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
 800f7fc:	2180      	movs	r1, #128	; 0x80
 800f7fe:	4856      	ldr	r0, [pc, #344]	; (800f958 <_ZN3BTD14HCI_event_taskEv+0x9f4>)
 800f800:	f005 fdb8 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                hci_io_capability_request_reply();
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f001 fac4 	bl	8010d92 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800f80a:	e092      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
#endif
                                break;

                        case EV_USER_CONFIRMATION_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nUser confirmation Request"), 0x80);
 800f80c:	2180      	movs	r1, #128	; 0x80
 800f80e:	4853      	ldr	r0, [pc, #332]	; (800f95c <_ZN3BTD14HCI_event_taskEv+0x9f8>)
 800f810:	f005 fdb0 	bl	8015374 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f001 fb03 	bl	8010e20 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800f81a:	e08a      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                }
#endif
                                break;
                        
                        case EV_LINK_KEY_NOTIFICATION: //Xbox One S BT Controller, when pairing write the address and link key to EEPROM
                                if(incomingXboxOneS) {
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f822:	2b00      	cmp	r3, #0
 800f824:	f000 8084 	beq.w	800f930 <_ZN3BTD14HCI_event_taskEv+0x9cc>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nLink Key Notification"), 0x80);
 800f828:	2180      	movs	r1, #128	; 0x80
 800f82a:	484d      	ldr	r0, [pc, #308]	; (800f960 <_ZN3BTD14HCI_event_taskEv+0x9fc>)
 800f82c:	f005 fda2 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                        for(uint8_t i = 0; i < 16; i++) {
 800f830:	2300      	movs	r3, #0
 800f832:	75bb      	strb	r3, [r7, #22]
 800f834:	7dbb      	ldrb	r3, [r7, #22]
 800f836:	2b0f      	cmp	r3, #15
 800f838:	d810      	bhi.n	800f85c <_ZN3BTD14HCI_event_taskEv+0x8f8>
                                                link_key[i] = hcibuf[8 + i];
 800f83a:	7dbb      	ldrb	r3, [r7, #22]
 800f83c:	f103 0208 	add.w	r2, r3, #8
 800f840:	7dbb      	ldrb	r3, [r7, #22]
 800f842:	6879      	ldr	r1, [r7, #4]
 800f844:	440a      	add	r2, r1
 800f846:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	4413      	add	r3, r2
 800f84e:	460a      	mov	r2, r1
 800f850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                        for(uint8_t i = 0; i < 16; i++) {
 800f854:	7dbb      	ldrb	r3, [r7, #22]
 800f856:	3301      	adds	r3, #1
 800f858:	75bb      	strb	r3, [r7, #22]
 800f85a:	e7eb      	b.n	800f834 <_ZN3BTD14HCI_event_taskEv+0x8d0>
                                        }
                                
                                        for(uint8_t i = 0; i < 6; i++) {
 800f85c:	2300      	movs	r3, #0
 800f85e:	757b      	strb	r3, [r7, #21]
 800f860:	7d7b      	ldrb	r3, [r7, #21]
 800f862:	2b05      	cmp	r3, #5
 800f864:	d80c      	bhi.n	800f880 <_ZN3BTD14HCI_event_taskEv+0x91c>
                                                EEPROM.write(i, disc_bdaddr[i]);
 800f866:	7d79      	ldrb	r1, [r7, #21]
 800f868:	7d7b      	ldrb	r3, [r7, #21]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	4413      	add	r3, r2
 800f86e:	7f1b      	ldrb	r3, [r3, #28]
 800f870:	461a      	mov	r2, r3
 800f872:	4833      	ldr	r0, [pc, #204]	; (800f940 <_ZN3BTD14HCI_event_taskEv+0x9dc>)
 800f874:	f7fe fdcb 	bl	800e40e <_ZN11EEPROMClass5writeEih>
                                        for(uint8_t i = 0; i < 6; i++) {
 800f878:	7d7b      	ldrb	r3, [r7, #21]
 800f87a:	3301      	adds	r3, #1
 800f87c:	757b      	strb	r3, [r7, #21]
 800f87e:	e7ef      	b.n	800f860 <_ZN3BTD14HCI_event_taskEv+0x8fc>
                                        }

                                        for(uint8_t i = 0; i < 16; i++) {
 800f880:	2300      	movs	r3, #0
 800f882:	753b      	strb	r3, [r7, #20]
 800f884:	7d3b      	ldrb	r3, [r7, #20]
 800f886:	2b0f      	cmp	r3, #15
 800f888:	d80e      	bhi.n	800f8a8 <_ZN3BTD14HCI_event_taskEv+0x944>
                                                EEPROM.write(i + 6, link_key[i]);
 800f88a:	7d3b      	ldrb	r3, [r7, #20]
 800f88c:	1d99      	adds	r1, r3, #6
 800f88e:	7d3b      	ldrb	r3, [r7, #20]
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	4413      	add	r3, r2
 800f894:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f898:	461a      	mov	r2, r3
 800f89a:	4829      	ldr	r0, [pc, #164]	; (800f940 <_ZN3BTD14HCI_event_taskEv+0x9dc>)
 800f89c:	f7fe fdb7 	bl	800e40e <_ZN11EEPROMClass5writeEih>
                                        for(uint8_t i = 0; i < 16; i++) {
 800f8a0:	7d3b      	ldrb	r3, [r7, #20]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	753b      	strb	r3, [r7, #20]
 800f8a6:	e7ed      	b.n	800f884 <_ZN3BTD14HCI_event_taskEv+0x920>
                                        }                        

#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nBD_ADDR: "), 0x80);
 800f8a8:	2180      	movs	r1, #128	; 0x80
 800f8aa:	482e      	ldr	r0, [pc, #184]	; (800f964 <_ZN3BTD14HCI_event_taskEv+0xa00>)
 800f8ac:	f005 fd62 	bl	8015374 <_Z8E_NotifyPKci>
                                        for(uint8_t i = 0; i < 6; i++) {
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	74fb      	strb	r3, [r7, #19]
 800f8b4:	7cfb      	ldrb	r3, [r7, #19]
 800f8b6:	2b05      	cmp	r3, #5
 800f8b8:	d811      	bhi.n	800f8de <_ZN3BTD14HCI_event_taskEv+0x97a>
                                                Notify(PSTR(" "), 0x80);
 800f8ba:	2180      	movs	r1, #128	; 0x80
 800f8bc:	482a      	ldr	r0, [pc, #168]	; (800f968 <_ZN3BTD14HCI_event_taskEv+0xa04>)
 800f8be:	f005 fd59 	bl	8015374 <_Z8E_NotifyPKci>
                                                D_PrintHex<uint8_t > (hcibuf[2 + i], 0x80);
 800f8c2:	7cfb      	ldrb	r3, [r7, #19]
 800f8c4:	3302      	adds	r3, #2
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	4413      	add	r3, r2
 800f8ca:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800f8ce:	2180      	movs	r1, #128	; 0x80
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f001 fe90 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                        for(uint8_t i = 0; i < 6; i++) {
 800f8d6:	7cfb      	ldrb	r3, [r7, #19]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	74fb      	strb	r3, [r7, #19]
 800f8dc:	e7ea      	b.n	800f8b4 <_ZN3BTD14HCI_event_taskEv+0x950>
                                        }
                                        Notify(PSTR("\r\nLink Key for the associated BD_ADDR: "), 0x80);
 800f8de:	2180      	movs	r1, #128	; 0x80
 800f8e0:	4822      	ldr	r0, [pc, #136]	; (800f96c <_ZN3BTD14HCI_event_taskEv+0xa08>)
 800f8e2:	f005 fd47 	bl	8015374 <_Z8E_NotifyPKci>
                                        for(uint8_t i = 0; i < 16; i++) {
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	74bb      	strb	r3, [r7, #18]
 800f8ea:	7cbb      	ldrb	r3, [r7, #18]
 800f8ec:	2b0f      	cmp	r3, #15
 800f8ee:	d81f      	bhi.n	800f930 <_ZN3BTD14HCI_event_taskEv+0x9cc>
                                                Notify(PSTR(" "), 0x80);
 800f8f0:	2180      	movs	r1, #128	; 0x80
 800f8f2:	481d      	ldr	r0, [pc, #116]	; (800f968 <_ZN3BTD14HCI_event_taskEv+0xa04>)
 800f8f4:	f005 fd3e 	bl	8015374 <_Z8E_NotifyPKci>
                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
 800f8f8:	7cbb      	ldrb	r3, [r7, #18]
 800f8fa:	3308      	adds	r3, #8
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	4413      	add	r3, r2
 800f900:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800f904:	2180      	movs	r1, #128	; 0x80
 800f906:	4618      	mov	r0, r3
 800f908:	f001 fe75 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                        for(uint8_t i = 0; i < 16; i++) {
 800f90c:	7cbb      	ldrb	r3, [r7, #18]
 800f90e:	3301      	adds	r3, #1
 800f910:	74bb      	strb	r3, [r7, #18]
 800f912:	e7ea      	b.n	800f8ea <_ZN3BTD14HCI_event_taskEv+0x986>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800f914:	bf00      	nop
 800f916:	e00c      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800f918:	bf00      	nop
 800f91a:	e00a      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800f91c:	bf00      	nop
 800f91e:	e008      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800f920:	bf00      	nop
 800f922:	e006      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800f924:	bf00      	nop
 800f926:	e004      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800f928:	bf00      	nop
 800f92a:	e002      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800f92c:	bf00      	nop
 800f92e:	e000      	b.n	800f932 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800f930:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800f932:	bf00      	nop
 800f934:	3720      	adds	r7, #32
 800f936:	46bd      	mov	sp, r7
 800f938:	bdb0      	pop	{r4, r5, r7, pc}
 800f93a:	bf00      	nop
 800f93c:	08015d00 	.word	0x08015d00
 800f940:	200056b4 	.word	0x200056b4
 800f944:	08015d18 	.word	0x08015d18
 800f948:	08015d38 	.word	0x08015d38
 800f94c:	08015d60 	.word	0x08015d60
 800f950:	08015d84 	.word	0x08015d84
 800f954:	08015dac 	.word	0x08015dac
 800f958:	08015dc0 	.word	0x08015dc0
 800f95c:	08015de4 	.word	0x08015de4
 800f960:	08015e00 	.word	0x08015e00
 800f964:	08015e18 	.word	0x08015e18
 800f968:	08015be4 	.word	0x08015be4
 800f96c:	08015e24 	.word	0x08015e24

0800f970 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800f970:	b590      	push	{r4, r7, lr}
 800f972:	b085      	sub	sp, #20
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f97e:	2b13      	cmp	r3, #19
 800f980:	f200 84a9 	bhi.w	80102d6 <_ZN3BTD8HCI_taskEv+0x966>
 800f984:	a201      	add	r2, pc, #4	; (adr r2, 800f98c <_ZN3BTD8HCI_taskEv+0x1c>)
 800f986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f98a:	bf00      	nop
 800f98c:	0800f9dd 	.word	0x0800f9dd
 800f990:	0800fa19 	.word	0x0800fa19
 800f994:	0800fab3 	.word	0x0800fab3
 800f998:	0800fadd 	.word	0x0800fadd
 800f99c:	0800fb45 	.word	0x0800fb45
 800f9a0:	0800fb99 	.word	0x0800fb99
 800f9a4:	0800fc63 	.word	0x0800fc63
 800f9a8:	0800fcad 	.word	0x0800fcad
 800f9ac:	0800fd95 	.word	0x0800fd95
 800f9b0:	0800fdd9 	.word	0x0800fdd9
 800f9b4:	0800fe33 	.word	0x0800fe33
 800f9b8:	0800fe99 	.word	0x0800fe99
 800f9bc:	0800fedf 	.word	0x0800fedf
 800f9c0:	08010175 	.word	0x08010175
 800f9c4:	080102d7 	.word	0x080102d7
 800f9c8:	08010203 	.word	0x08010203
 800f9cc:	08010231 	.word	0x08010231
 800f9d0:	0800fbe3 	.word	0x0800fbe3
 800f9d4:	0800fc19 	.word	0x0800fc19
 800f9d8:	0800fc41 	.word	0x0800fc41
                case HCI_INIT_STATE:
                        hci_counter++;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	f240 846e 	bls.w	80102da <_ZN3BTD8HCI_taskEv+0x96a>
                                hci_reset();
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 fd33 	bl	801046a <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2201      	movs	r2, #1
 800fa08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                hci_counter = 0;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        }
                        break;
 800fa14:	f000 bc61 	b.w	80102da <_ZN3BTD8HCI_taskEv+0x96a>

                case HCI_RESET_STATE:
                        hci_counter++;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800fa1e:	3301      	adds	r3, #1
 800fa20:	b29a      	uxth	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fa2e:	f003 0301 	and.w	r3, r3, #1
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d010      	beq.n	800fa58 <_ZN3BTD8HCI_taskEv+0xe8>
                                hci_counter = 0;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
 800fa3e:	2180      	movs	r1, #128	; 0x80
 800fa40:	48c2      	ldr	r0, [pc, #776]	; (800fd4c <_ZN3BTD8HCI_taskEv+0x3dc>)
 800fa42:	f005 fc97 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_CLASS_STATE;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2202      	movs	r2, #2
 800fa4a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                hci_write_class_of_device();
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f001 fa84 	bl	8010f5c <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800fa54:	f000 bc43 	b.w	80102de <_ZN3BTD8HCI_taskEv+0x96e>
                        } else if(hci_counter > hci_num_reset_loops) {
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800fa64:	429a      	cmp	r2, r3
 800fa66:	f240 843a 	bls.w	80102de <_ZN3BTD8HCI_taskEv+0x96e>
                                hci_num_reset_loops *= 10;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800fa70:	461a      	mov	r2, r3
 800fa72:	0092      	lsls	r2, r2, #2
 800fa74:	4413      	add	r3, r2
 800fa76:	005b      	lsls	r3, r3, #1
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
                                if(hci_num_reset_loops > 2000)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800fa86:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800fa8a:	d904      	bls.n	800fa96 <_ZN3BTD8HCI_taskEv+0x126>
                                        hci_num_reset_loops = 2000;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800fa92:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
 800fa96:	2180      	movs	r1, #128	; 0x80
 800fa98:	48ad      	ldr	r0, [pc, #692]	; (800fd50 <_ZN3BTD8HCI_taskEv+0x3e0>)
 800fa9a:	f005 fc6b 	bl	8015374 <_Z8E_NotifyPKci>
                                hci_state = HCI_INIT_STATE;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2200      	movs	r2, #0
 800faa2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                hci_counter = 0;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2200      	movs	r2, #0
 800faaa:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        break;
 800faae:	f000 bc16 	b.w	80102de <_ZN3BTD8HCI_taskEv+0x96e>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fab8:	f003 0301 	and.w	r3, r3, #1
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	f000 8410 	beq.w	80102e2 <_ZN3BTD8HCI_taskEv+0x972>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
 800fac2:	2180      	movs	r1, #128	; 0x80
 800fac4:	48a3      	ldr	r0, [pc, #652]	; (800fd54 <_ZN3BTD8HCI_taskEv+0x3e4>)
 800fac6:	f005 fc55 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_BDADDR_STATE;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2203      	movs	r2, #3
 800face:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                hci_read_bdaddr();
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 fd19 	bl	801050a <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800fad8:	f000 bc03 	b.w	80102e2 <_ZN3BTD8HCI_taskEv+0x972>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fae2:	f003 0320 	and.w	r3, r3, #32
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	f000 83fd 	beq.w	80102e6 <_ZN3BTD8HCI_taskEv+0x976>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nLocal Bluetooth Address: "), 0x80);
 800faec:	2180      	movs	r1, #128	; 0x80
 800faee:	489a      	ldr	r0, [pc, #616]	; (800fd58 <_ZN3BTD8HCI_taskEv+0x3e8>)
 800faf0:	f005 fc40 	bl	8015374 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 800faf4:	2305      	movs	r3, #5
 800faf6:	73fb      	strb	r3, [r7, #15]
 800faf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	dd13      	ble.n	800fb28 <_ZN3BTD8HCI_taskEv+0x1b8>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
 800fb00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	4413      	add	r3, r2
 800fb08:	7d1b      	ldrb	r3, [r3, #20]
 800fb0a:	2180      	movs	r1, #128	; 0x80
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f001 fd72 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(":"), 0x80);
 800fb12:	2180      	movs	r1, #128	; 0x80
 800fb14:	4891      	ldr	r0, [pc, #580]	; (800fd5c <_ZN3BTD8HCI_taskEv+0x3ec>)
 800fb16:	f005 fc2d 	bl	8015374 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 800fb1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	3b01      	subs	r3, #1
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	73fb      	strb	r3, [r7, #15]
 800fb26:	e7e7      	b.n	800faf8 <_ZN3BTD8HCI_taskEv+0x188>
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	7d1b      	ldrb	r3, [r3, #20]
 800fb2c:	2180      	movs	r1, #128	; 0x80
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f001 fd61 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
#endif
                                hci_read_local_version_information();
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 fd0c 	bl	8010552 <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2204      	movs	r2, #4
 800fb3e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        }
                        break;
 800fb42:	e3d0      	b.n	80102e6 <_ZN3BTD8HCI_taskEv+0x976>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	f000 83cb 	beq.w	80102ea <_ZN3BTD8HCI_taskEv+0x97a>
                                if(btdName != NULL) {
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00a      	beq.n	800fb72 <_ZN3BTD8HCI_taskEv+0x202>
                                        hci_write_local_name(btdName);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	68db      	ldr	r3, [r3, #12]
 800fb60:	4619      	mov	r1, r3
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 fddf 	bl	8010726 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2205      	movs	r2, #5
 800fb6c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800fb70:	e3bb      	b.n	80102ea <_ZN3BTD8HCI_taskEv+0x97a>
                                } else if(useSimplePairing) {
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d008      	beq.n	800fb8e <_ZN3BTD8HCI_taskEv+0x21e>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800fb7c:	2100      	movs	r1, #0
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f000 fd0b 	bl	801059a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2211      	movs	r2, #17
 800fb88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        break;
 800fb8c:	e3ad      	b.n	80102ea <_ZN3BTD8HCI_taskEv+0x97a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2206      	movs	r2, #6
 800fb92:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        break;
 800fb96:	e3a8      	b.n	80102ea <_ZN3BTD8HCI_taskEv+0x97a>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fb9e:	f003 0301 	and.w	r3, r3, #1
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f000 83a3 	beq.w	80102ee <_ZN3BTD8HCI_taskEv+0x97e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
 800fba8:	2180      	movs	r1, #128	; 0x80
 800fbaa:	486d      	ldr	r0, [pc, #436]	; (800fd60 <_ZN3BTD8HCI_taskEv+0x3f0>)
 800fbac:	f005 fbe2 	bl	8015374 <_Z8E_NotifyPKci>
                                NotifyStr(btdName, 0x80);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	2180      	movs	r1, #128	; 0x80
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f005 fc04 	bl	80153c4 <_Z11E_NotifyStrPKci>
#endif
                                if(useSimplePairing) {
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d008      	beq.n	800fbd8 <_ZN3BTD8HCI_taskEv+0x268>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800fbc6:	2100      	movs	r1, #0
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f000 fce6 	bl	801059a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2211      	movs	r2, #17
 800fbd2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800fbd6:	e38a      	b.n	80102ee <_ZN3BTD8HCI_taskEv+0x97e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2206      	movs	r2, #6
 800fbdc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        break;
 800fbe0:	e385      	b.n	80102ee <_ZN3BTD8HCI_taskEv+0x97e>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fbe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	f000 8380 	beq.w	80102f2 <_ZN3BTD8HCI_taskEv+0x982>
                                if(simple_pairing_supported) {
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d008      	beq.n	800fc0e <_ZN3BTD8HCI_taskEv+0x29e>
                                        hci_write_simple_pairing_mode(true);
 800fbfc:	2101      	movs	r1, #1
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 fe15 	bl	801082e <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2212      	movs	r2, #18
 800fc08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800fc0c:	e371      	b.n	80102f2 <_ZN3BTD8HCI_taskEv+0x982>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2206      	movs	r2, #6
 800fc12:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        break;
 800fc16:	e36c      	b.n	80102f2 <_ZN3BTD8HCI_taskEv+0x982>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fc1e:	f003 0301 	and.w	r3, r3, #1
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f000 8367 	beq.w	80102f6 <_ZN3BTD8HCI_taskEv+0x986>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
 800fc28:	2180      	movs	r1, #128	; 0x80
 800fc2a:	484e      	ldr	r0, [pc, #312]	; (800fd64 <_ZN3BTD8HCI_taskEv+0x3f4>)
 800fc2c:	f005 fba2 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                hci_set_event_mask();
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 fdc1 	bl	80107b8 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2213      	movs	r2, #19
 800fc3a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        }
                        break;
 800fc3e:	e35a      	b.n	80102f6 <_ZN3BTD8HCI_taskEv+0x986>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fc46:	f003 0301 	and.w	r3, r3, #1
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	f000 8355 	beq.w	80102fa <_ZN3BTD8HCI_taskEv+0x98a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
 800fc50:	2180      	movs	r1, #128	; 0x80
 800fc52:	4845      	ldr	r0, [pc, #276]	; (800fd68 <_ZN3BTD8HCI_taskEv+0x3f8>)
 800fc54:	f005 fb8e 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2206      	movs	r2, #6
 800fc5c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        }
                        break;
 800fc60:	e34b      	b.n	80102fa <_ZN3BTD8HCI_taskEv+0x98a>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d104      	bne.n	800fc76 <_ZN3BTD8HCI_taskEv+0x306>
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d015      	beq.n	800fca2 <_ZN3BTD8HCI_taskEv+0x332>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d004      	beq.n	800fc8a <_ZN3BTD8HCI_taskEv+0x31a>
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
 800fc80:	2180      	movs	r1, #128	; 0x80
 800fc82:	483a      	ldr	r0, [pc, #232]	; (800fd6c <_ZN3BTD8HCI_taskEv+0x3fc>)
 800fc84:	f005 fb76 	bl	8015374 <_Z8E_NotifyPKci>
 800fc88:	e003      	b.n	800fc92 <_ZN3BTD8HCI_taskEv+0x322>
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
 800fc8a:	2180      	movs	r1, #128	; 0x80
 800fc8c:	4838      	ldr	r0, [pc, #224]	; (800fd70 <_ZN3BTD8HCI_taskEv+0x400>)
 800fc8e:	f005 fb71 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                hci_inquiry();
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 fdf1 	bl	801087a <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2207      	movs	r2, #7
 800fc9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800fca0:	e33e      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	220a      	movs	r2, #10
 800fca6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        break;
 800fcaa:	e339      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fcb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	f000 8321 	beq.w	80102fe <_ZN3BTD8HCI_taskEv+0x98e>
                                hci_inquiry_cancel(); // Stop inquiry
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 fe14 	bl	80108ea <_ZN3BTD18hci_inquiry_cancelEv>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d004      	beq.n	800fcd6 <_ZN3BTD8HCI_taskEv+0x366>
                                        Notify(PSTR("\r\nWiimote found"), 0x80);
 800fccc:	2180      	movs	r1, #128	; 0x80
 800fcce:	4829      	ldr	r0, [pc, #164]	; (800fd74 <_ZN3BTD8HCI_taskEv+0x404>)
 800fcd0:	f005 fb50 	bl	8015374 <_Z8E_NotifyPKci>
 800fcd4:	e003      	b.n	800fcde <_ZN3BTD8HCI_taskEv+0x36e>
                                else
                                        Notify(PSTR("\r\nHID device found"), 0x80);
 800fcd6:	2180      	movs	r1, #128	; 0x80
 800fcd8:	4827      	ldr	r0, [pc, #156]	; (800fd78 <_ZN3BTD8HCI_taskEv+0x408>)
 800fcda:	f005 fb4b 	bl	8015374 <_Z8E_NotifyPKci>

                                Notify(PSTR("\r\nNow just create the instance like so:"), 0x80);
 800fcde:	2180      	movs	r1, #128	; 0x80
 800fce0:	4826      	ldr	r0, [pc, #152]	; (800fd7c <_ZN3BTD8HCI_taskEv+0x40c>)
 800fce2:	f005 fb47 	bl	8015374 <_Z8E_NotifyPKci>
                                if(pairWithWii)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d004      	beq.n	800fcfa <_ZN3BTD8HCI_taskEv+0x38a>
                                        Notify(PSTR("\r\nWII Wii(&Btd);"), 0x80);
 800fcf0:	2180      	movs	r1, #128	; 0x80
 800fcf2:	4823      	ldr	r0, [pc, #140]	; (800fd80 <_ZN3BTD8HCI_taskEv+0x410>)
 800fcf4:	f005 fb3e 	bl	8015374 <_Z8E_NotifyPKci>
 800fcf8:	e003      	b.n	800fd02 <_ZN3BTD8HCI_taskEv+0x392>
                                else
                                        Notify(PSTR("\r\nBTHID bthid(&Btd);"), 0x80);
 800fcfa:	2180      	movs	r1, #128	; 0x80
 800fcfc:	4821      	ldr	r0, [pc, #132]	; (800fd84 <_ZN3BTD8HCI_taskEv+0x414>)
 800fcfe:	f005 fb39 	bl	8015374 <_Z8E_NotifyPKci>

                                Notify(PSTR("\r\nAnd then press any button on the "), 0x80);
 800fd02:	2180      	movs	r1, #128	; 0x80
 800fd04:	4820      	ldr	r0, [pc, #128]	; (800fd88 <_ZN3BTD8HCI_taskEv+0x418>)
 800fd06:	f005 fb35 	bl	8015374 <_Z8E_NotifyPKci>
                                if(pairWithWii)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d004      	beq.n	800fd1e <_ZN3BTD8HCI_taskEv+0x3ae>
                                        Notify(PSTR("Wiimote"), 0x80);
 800fd14:	2180      	movs	r1, #128	; 0x80
 800fd16:	481d      	ldr	r0, [pc, #116]	; (800fd8c <_ZN3BTD8HCI_taskEv+0x41c>)
 800fd18:	f005 fb2c 	bl	8015374 <_Z8E_NotifyPKci>
 800fd1c:	e003      	b.n	800fd26 <_ZN3BTD8HCI_taskEv+0x3b6>
                                else
                                        Notify(PSTR("device"), 0x80);
 800fd1e:	2180      	movs	r1, #128	; 0x80
 800fd20:	481b      	ldr	r0, [pc, #108]	; (800fd90 <_ZN3BTD8HCI_taskEv+0x420>)
 800fd22:	f005 fb27 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                if(checkRemoteName) {
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d007      	beq.n	800fd40 <_ZN3BTD8HCI_taskEv+0x3d0>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f000 fca4 	bl	801067e <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	220c      	movs	r2, #12
 800fd3a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800fd3e:	e2de      	b.n	80102fe <_ZN3BTD8HCI_taskEv+0x98e>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2208      	movs	r2, #8
 800fd44:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        break;
 800fd48:	e2d9      	b.n	80102fe <_ZN3BTD8HCI_taskEv+0x98e>
 800fd4a:	bf00      	nop
 800fd4c:	08015e4c 	.word	0x08015e4c
 800fd50:	08015e64 	.word	0x08015e64
 800fd54:	08015e80 	.word	0x08015e80
 800fd58:	08015e98 	.word	0x08015e98
 800fd5c:	08015ad8 	.word	0x08015ad8
 800fd60:	08015eb4 	.word	0x08015eb4
 800fd64:	08015ecc 	.word	0x08015ecc
 800fd68:	08015eec 	.word	0x08015eec
 800fd6c:	08015f08 	.word	0x08015f08
 800fd70:	08015f90 	.word	0x08015f90
 800fd74:	08015fbc 	.word	0x08015fbc
 800fd78:	08015fcc 	.word	0x08015fcc
 800fd7c:	08015fe0 	.word	0x08015fe0
 800fd80:	08016008 	.word	0x08016008
 800fd84:	0801601c 	.word	0x0801601c
 800fd88:	08016034 	.word	0x08016034
 800fd8c:	08016058 	.word	0x08016058
 800fd90:	08016060 	.word	0x08016060

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fd9a:	f003 0301 	and.w	r3, r3, #1
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	f000 82af 	beq.w	8010302 <_ZN3BTD8HCI_taskEv+0x992>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d004      	beq.n	800fdb8 <_ZN3BTD8HCI_taskEv+0x448>
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
 800fdae:	2180      	movs	r1, #128	; 0x80
 800fdb0:	48bf      	ldr	r0, [pc, #764]	; (80100b0 <_ZN3BTD8HCI_taskEv+0x740>)
 800fdb2:	f005 fadf 	bl	8015374 <_Z8E_NotifyPKci>
 800fdb6:	e003      	b.n	800fdc0 <_ZN3BTD8HCI_taskEv+0x450>
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
 800fdb8:	2180      	movs	r1, #128	; 0x80
 800fdba:	48be      	ldr	r0, [pc, #760]	; (80100b4 <_ZN3BTD8HCI_taskEv+0x744>)
 800fdbc:	f005 fada 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                checkRemoteName = false;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
                                hci_connect();
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 fda9 	bl	8010920 <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2209      	movs	r2, #9
 800fdd2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        }
                        break;
 800fdd6:	e294      	b.n	8010302 <_ZN3BTD8HCI_taskEv+0x992>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fdde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	f000 828f 	beq.w	8010306 <_ZN3BTD8HCI_taskEv+0x996>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fdee:	f003 0302 	and.w	r3, r3, #2
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d015      	beq.n	800fe22 <_ZN3BTD8HCI_taskEv+0x4b2>
#ifdef DEBUG_USB_HOST
                                        if(pairWithWii)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d004      	beq.n	800fe0a <_ZN3BTD8HCI_taskEv+0x49a>
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
 800fe00:	2180      	movs	r1, #128	; 0x80
 800fe02:	48ad      	ldr	r0, [pc, #692]	; (80100b8 <_ZN3BTD8HCI_taskEv+0x748>)
 800fe04:	f005 fab6 	bl	8015374 <_Z8E_NotifyPKci>
 800fe08:	e003      	b.n	800fe12 <_ZN3BTD8HCI_taskEv+0x4a2>
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
 800fe0a:	2180      	movs	r1, #128	; 0x80
 800fe0c:	48ab      	ldr	r0, [pc, #684]	; (80100bc <_ZN3BTD8HCI_taskEv+0x74c>)
 800fe0e:	f005 fab1 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f001 f83f 	bl	8010e96 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	220a      	movs	r2, #10
 800fe1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800fe20:	e271      	b.n	8010306 <_ZN3BTD8HCI_taskEv+0x996>
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
 800fe22:	2180      	movs	r1, #128	; 0x80
 800fe24:	48a6      	ldr	r0, [pc, #664]	; (80100c0 <_ZN3BTD8HCI_taskEv+0x750>)
 800fe26:	f005 faa5 	bl	8015374 <_Z8E_NotifyPKci>
                                        hci_connect(); // Try to connect one more time
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f000 fd78 	bl	8010920 <_ZN3BTD11hci_connectEv>
                        break;
 800fe30:	e269      	b.n	8010306 <_ZN3BTD8HCI_taskEv+0x996>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800fe38:	f083 0301 	eor.w	r3, r3, #1
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	f000 8263 	beq.w	801030a <_ZN3BTD8HCI_taskEv+0x99a>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fe4a:	f083 0301 	eor.w	r3, r3, #1
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	f000 825a 	beq.w	801030a <_ZN3BTD8HCI_taskEv+0x99a>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fe5c:	f083 0301 	eor.w	r3, r3, #1
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f000 8251 	beq.w	801030a <_ZN3BTD8HCI_taskEv+0x99a>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800fe6e:	f083 0301 	eor.w	r3, r3, #1
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f000 8248 	beq.w	801030a <_ZN3BTD8HCI_taskEv+0x99a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
 800fe7a:	2180      	movs	r1, #128	; 0x80
 800fe7c:	4891      	ldr	r0, [pc, #580]	; (80100c4 <_ZN3BTD8HCI_taskEv+0x754>)
 800fe7e:	f005 fa79 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                hci_write_scan_enable();
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 fb10 	bl	80104a8 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	220b      	movs	r2, #11
 800fe92:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        }
                        break;
 800fe96:	e238      	b.n	801030a <_ZN3BTD8HCI_taskEv+0x99a>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fe9e:	f003 0310 	and.w	r3, r3, #16
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d00e      	beq.n	800fec4 <_ZN3BTD8HCI_taskEv+0x554>
                                waitingForConnection = false;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2200      	movs	r2, #0
 800feaa:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
 800feac:	2180      	movs	r1, #128	; 0x80
 800feae:	4886      	ldr	r0, [pc, #536]	; (80100c8 <_ZN3BTD8HCI_taskEv+0x758>)
 800feb0:	f005 fa60 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                hci_remote_name();
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 fbe2 	bl	801067e <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	220c      	movs	r2, #12
 800febe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800fec2:	e224      	b.n	801030e <_ZN3BTD8HCI_taskEv+0x99e>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800feca:	f003 0304 	and.w	r3, r3, #4
 800fece:	2b00      	cmp	r3, #0
 800fed0:	f000 821d 	beq.w	801030e <_ZN3BTD8HCI_taskEv+0x99e>
                                hci_state = HCI_DISCONNECT_STATE;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2210      	movs	r2, #16
 800fed8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        break;
 800fedc:	e217      	b.n	801030e <_ZN3BTD8HCI_taskEv+0x99e>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fee4:	f003 0308 	and.w	r3, r3, #8
 800fee8:	2b00      	cmp	r3, #0
 800feea:	f000 8212 	beq.w	8010312 <_ZN3BTD8HCI_taskEv+0x9a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
 800feee:	2180      	movs	r1, #128	; 0x80
 800fef0:	4876      	ldr	r0, [pc, #472]	; (80100cc <_ZN3BTD8HCI_taskEv+0x75c>)
 800fef2:	f005 fa3f 	bl	8015374 <_Z8E_NotifyPKci>
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
 800fef6:	2300      	movs	r3, #0
 800fef8:	73bb      	strb	r3, [r7, #14]
 800fefa:	7bbc      	ldrb	r4, [r7, #14]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	3322      	adds	r3, #34	; 0x22
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7f0 f985 	bl	8000210 <strlen>
 800ff06:	4603      	mov	r3, r0
 800ff08:	429c      	cmp	r4, r3
 800ff0a:	d20c      	bcs.n	800ff26 <_ZN3BTD8HCI_taskEv+0x5b6>
                                        Notifyc(remote_name[i], 0x80);
 800ff0c:	7bbb      	ldrb	r3, [r7, #14]
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	4413      	add	r3, r2
 800ff12:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ff16:	2180      	movs	r1, #128	; 0x80
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f005 fa11 	bl	8015340 <_Z9E_Notifycci>
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
 800ff1e:	7bbb      	ldrb	r3, [r7, #14]
 800ff20:	3301      	adds	r3, #1
 800ff22:	73bb      	strb	r3, [r7, #14]
 800ff24:	e7e9      	b.n	800fefa <_ZN3BTD8HCI_taskEv+0x58a>
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	3322      	adds	r3, #34	; 0x22
 800ff2a:	2208      	movs	r2, #8
 800ff2c:	4968      	ldr	r1, [pc, #416]	; (80100d0 <_ZN3BTD8HCI_taskEv+0x760>)
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f005 fbc6 	bl	80156c0 <strncmp>
 800ff34:	4603      	mov	r3, r0
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d157      	bne.n	800ffea <_ZN3BTD8HCI_taskEv+0x67a>
                                        incomingWii = true;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                                        motionPlusInside = false;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                                        wiiUProController = false;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
                                        pairWiiUsingSync = false;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
 800ff5a:	2180      	movs	r1, #128	; 0x80
 800ff5c:	485d      	ldr	r0, [pc, #372]	; (80100d4 <_ZN3BTD8HCI_taskEv+0x764>)
 800ff5e:	f005 fa09 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	3322      	adds	r3, #34	; 0x22
 800ff66:	2216      	movs	r2, #22
 800ff68:	495b      	ldr	r1, [pc, #364]	; (80100d8 <_ZN3BTD8HCI_taskEv+0x768>)
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f005 fba8 	bl	80156c0 <strncmp>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d108      	bne.n	800ff88 <_ZN3BTD8HCI_taskEv+0x618>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
 800ff76:	2180      	movs	r1, #128	; 0x80
 800ff78:	4858      	ldr	r0, [pc, #352]	; (80100dc <_ZN3BTD8HCI_taskEv+0x76c>)
 800ff7a:	f005 f9fb 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                                motionPlusInside = true;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2201      	movs	r2, #1
 800ff82:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800ff86:	e030      	b.n	800ffea <_ZN3BTD8HCI_taskEv+0x67a>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	3322      	adds	r3, #34	; 0x22
 800ff8c:	2216      	movs	r2, #22
 800ff8e:	4954      	ldr	r1, [pc, #336]	; (80100e0 <_ZN3BTD8HCI_taskEv+0x770>)
 800ff90:	4618      	mov	r0, r3
 800ff92:	f005 fb95 	bl	80156c0 <strncmp>
 800ff96:	4603      	mov	r3, r0
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d114      	bne.n	800ffc6 <_ZN3BTD8HCI_taskEv+0x656>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
 800ff9c:	2180      	movs	r1, #128	; 0x80
 800ff9e:	4851      	ldr	r0, [pc, #324]	; (80100e4 <_ZN3BTD8HCI_taskEv+0x774>)
 800ffa0:	f005 f9e8 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 800ffc4:	e011      	b.n	800ffea <_ZN3BTD8HCI_taskEv+0x67a>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	3322      	adds	r3, #34	; 0x22
 800ffca:	2213      	movs	r2, #19
 800ffcc:	4946      	ldr	r1, [pc, #280]	; (80100e8 <_ZN3BTD8HCI_taskEv+0x778>)
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f005 fb76 	bl	80156c0 <strncmp>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d107      	bne.n	800ffea <_ZN3BTD8HCI_taskEv+0x67a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
 800ffda:	2180      	movs	r1, #128	; 0x80
 800ffdc:	4843      	ldr	r0, [pc, #268]	; (80100ec <_ZN3BTD8HCI_taskEv+0x77c>)
 800ffde:	f005 f9c9 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                                pairWiiUsingSync = true;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d11b      	bne.n	801002c <_ZN3BTD8HCI_taskEv+0x6bc>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800fffa:	2b25      	cmp	r3, #37	; 0x25
 800fffc:	d116      	bne.n	801002c <_ZN3BTD8HCI_taskEv+0x6bc>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8010004:	2b08      	cmp	r3, #8
 8010006:	d111      	bne.n	801002c <_ZN3BTD8HCI_taskEv+0x6bc>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	3322      	adds	r3, #34	; 0x22
 801000c:	2213      	movs	r2, #19
 801000e:	4938      	ldr	r1, [pc, #224]	; (80100f0 <_ZN3BTD8HCI_taskEv+0x780>)
 8010010:	4618      	mov	r0, r3
 8010012:	f005 fb55 	bl	80156c0 <strncmp>
 8010016:	4603      	mov	r3, r0
 8010018:	2b00      	cmp	r3, #0
 801001a:	d107      	bne.n	801002c <_ZN3BTD8HCI_taskEv+0x6bc>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
 801001c:	2180      	movs	r1, #128	; 0x80
 801001e:	4835      	ldr	r0, [pc, #212]	; (80100f4 <_ZN3BTD8HCI_taskEv+0x784>)
 8010020:	f005 f9a8 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                        incomingPSController = true;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2201      	movs	r2, #1
 8010028:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
                                }

                                if(strncmp((const char*)remote_name, "Xbox Wireless Controller", 24 ) == 0) {
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	3322      	adds	r3, #34	; 0x22
 8010030:	2218      	movs	r2, #24
 8010032:	4931      	ldr	r1, [pc, #196]	; (80100f8 <_ZN3BTD8HCI_taskEv+0x788>)
 8010034:	4618      	mov	r0, r3
 8010036:	f005 fb43 	bl	80156c0 <strncmp>
 801003a:	4603      	mov	r3, r0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d17d      	bne.n	801013c <_ZN3BTD8HCI_taskEv+0x7cc>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nXbox One S controller is connecting"), 0x80);
 8010040:	2180      	movs	r1, #128	; 0x80
 8010042:	482e      	ldr	r0, [pc, #184]	; (80100fc <_ZN3BTD8HCI_taskEv+0x78c>)
 8010044:	f005 f996 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                        incomingXboxOneS = true;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2201      	movs	r2, #1
 801004c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                                        if(!pairWithHIDDevice) { //If an Xbox One S BT Controller is connecting and it is not in pair mode, check EEPROM for the controller's address
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8010056:	f083 0301 	eor.w	r3, r3, #1
 801005a:	b2db      	uxtb	r3, r3
 801005c:	2b00      	cmp	r3, #0
 801005e:	d068      	beq.n	8010132 <_ZN3BTD8HCI_taskEv+0x7c2>
                                                pairedDevice = true;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2201      	movs	r2, #1
 8010064:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                                                for(uint8_t i = 0; i < 6; i++) {
 8010068:	2300      	movs	r3, #0
 801006a:	737b      	strb	r3, [r7, #13]
 801006c:	7b7b      	ldrb	r3, [r7, #13]
 801006e:	2b05      	cmp	r3, #5
 8010070:	d84a      	bhi.n	8010108 <_ZN3BTD8HCI_taskEv+0x798>
                                                        if(disc_bdaddr[i] != EEPROM.read(i)) {
 8010072:	7b7b      	ldrb	r3, [r7, #13]
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	4413      	add	r3, r2
 8010078:	7f1c      	ldrb	r4, [r3, #28]
 801007a:	7b7b      	ldrb	r3, [r7, #13]
 801007c:	4619      	mov	r1, r3
 801007e:	4820      	ldr	r0, [pc, #128]	; (8010100 <_ZN3BTD8HCI_taskEv+0x790>)
 8010080:	f7fe f9b0 	bl	800e3e4 <_ZN11EEPROMClass4readEi>
 8010084:	4603      	mov	r3, r0
 8010086:	429c      	cmp	r4, r3
 8010088:	bf14      	ite	ne
 801008a:	2301      	movne	r3, #1
 801008c:	2300      	moveq	r3, #0
 801008e:	b2db      	uxtb	r3, r3
 8010090:	2b00      	cmp	r3, #0
 8010092:	d008      	beq.n	80100a6 <_ZN3BTD8HCI_taskEv+0x736>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nXbox One S Controller did not match EEPROM"), 0x80);
 8010094:	2180      	movs	r1, #128	; 0x80
 8010096:	481b      	ldr	r0, [pc, #108]	; (8010104 <_ZN3BTD8HCI_taskEv+0x794>)
 8010098:	f005 f96c 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                                                pairedDevice = false;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                                                                break;
 80100a4:	e030      	b.n	8010108 <_ZN3BTD8HCI_taskEv+0x798>
                                                for(uint8_t i = 0; i < 6; i++) {
 80100a6:	7b7b      	ldrb	r3, [r7, #13]
 80100a8:	3301      	adds	r3, #1
 80100aa:	737b      	strb	r3, [r7, #13]
 80100ac:	e7de      	b.n	801006c <_ZN3BTD8HCI_taskEv+0x6fc>
 80100ae:	bf00      	nop
 80100b0:	08016068 	.word	0x08016068
 80100b4:	08016080 	.word	0x08016080
 80100b8:	0801609c 	.word	0x0801609c
 80100bc:	080160b4 	.word	0x080160b4
 80100c0:	080160d0 	.word	0x080160d0
 80100c4:	080160f8 	.word	0x080160f8
 80100c8:	08016120 	.word	0x08016120
 80100cc:	08016140 	.word	0x08016140
 80100d0:	08016150 	.word	0x08016150
 80100d4:	0801615c 	.word	0x0801615c
 80100d8:	08016174 	.word	0x08016174
 80100dc:	0801618c 	.word	0x0801618c
 80100e0:	080161a8 	.word	0x080161a8
 80100e4:	080161c0 	.word	0x080161c0
 80100e8:	080161d8 	.word	0x080161d8
 80100ec:	080161ec 	.word	0x080161ec
 80100f0:	08016204 	.word	0x08016204
 80100f4:	08016218 	.word	0x08016218
 80100f8:	0801623c 	.word	0x0801623c
 80100fc:	08016258 	.word	0x08016258
 8010100:	200056b4 	.word	0x200056b4
 8010104:	08016280 	.word	0x08016280
                                                        }
                                                }
                                                if(!pairedDevice) {
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801010e:	f083 0301 	eor.w	r3, r3, #1
 8010112:	b2db      	uxtb	r3, r3
 8010114:	2b00      	cmp	r3, #0
 8010116:	d004      	beq.n	8010122 <_ZN3BTD8HCI_taskEv+0x7b2>
                                                        hci_state = HCI_SCANNING_STATE;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	220a      	movs	r2, #10
 801011c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 8010120:	e0f7      	b.n	8010312 <_ZN3BTD8HCI_taskEv+0x9a2>
                                                        hci_accept_connection();
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 fa63 	bl	80105ee <_ZN3BTD21hci_accept_connectionEv>
                                                        hci_state = HCI_CONNECTED_STATE;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	220d      	movs	r2, #13
 801012c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        break;
 8010130:	e0ef      	b.n	8010312 <_ZN3BTD8HCI_taskEv+0x9a2>
                                                hci_state = HCI_CONNECT_DEVICE_STATE;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2208      	movs	r2, #8
 8010136:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        break;
 801013a:	e0ea      	b.n	8010312 <_ZN3BTD8HCI_taskEv+0x9a2>
                                else if((pairWithWii || pairWithHIDDevice) && checkRemoteName) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010142:	2b00      	cmp	r3, #0
 8010144:	d104      	bne.n	8010150 <_ZN3BTD8HCI_taskEv+0x7e0>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 801014c:	2b00      	cmp	r3, #0
 801014e:	d009      	beq.n	8010164 <_ZN3BTD8HCI_taskEv+0x7f4>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010156:	2b00      	cmp	r3, #0
 8010158:	d004      	beq.n	8010164 <_ZN3BTD8HCI_taskEv+0x7f4>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2208      	movs	r2, #8
 801015e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        break;
 8010162:	e0d6      	b.n	8010312 <_ZN3BTD8HCI_taskEv+0x9a2>
                                        hci_accept_connection();
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f000 fa42 	bl	80105ee <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	220d      	movs	r2, #13
 801016e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        break;
 8010172:	e0ce      	b.n	8010312 <_ZN3BTD8HCI_taskEv+0x9a2>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801017a:	f003 0302 	and.w	r3, r3, #2
 801017e:	2b00      	cmp	r3, #0
 8010180:	f000 80c9 	beq.w	8010316 <_ZN3BTD8HCI_taskEv+0x9a6>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nConnected to Device: "), 0x80);
 8010184:	2180      	movs	r1, #128	; 0x80
 8010186:	4868      	ldr	r0, [pc, #416]	; (8010328 <_ZN3BTD8HCI_taskEv+0x9b8>)
 8010188:	f005 f8f4 	bl	8015374 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 801018c:	2305      	movs	r3, #5
 801018e:	733b      	strb	r3, [r7, #12]
 8010190:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010194:	2b00      	cmp	r3, #0
 8010196:	dd13      	ble.n	80101c0 <_ZN3BTD8HCI_taskEv+0x850>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
 8010198:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801019c:	687a      	ldr	r2, [r7, #4]
 801019e:	4413      	add	r3, r2
 80101a0:	7f1b      	ldrb	r3, [r3, #28]
 80101a2:	2180      	movs	r1, #128	; 0x80
 80101a4:	4618      	mov	r0, r3
 80101a6:	f001 fa26 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(":"), 0x80);
 80101aa:	2180      	movs	r1, #128	; 0x80
 80101ac:	485f      	ldr	r0, [pc, #380]	; (801032c <_ZN3BTD8HCI_taskEv+0x9bc>)
 80101ae:	f005 f8e1 	bl	8015374 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 80101b2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	3b01      	subs	r3, #1
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	733b      	strb	r3, [r7, #12]
 80101be:	e7e7      	b.n	8010190 <_ZN3BTD8HCI_taskEv+0x820>
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	7f1b      	ldrb	r3, [r3, #28]
 80101c4:	2180      	movs	r1, #128	; 0x80
 80101c6:	4618      	mov	r0, r3
 80101c8:	f001 fa15 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
#endif
                                if(incomingPSController)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d003      	beq.n	80101de <_ZN3BTD8HCI_taskEv+0x86e>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2201      	movs	r2, #1
 80101da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2200      	movs	r2, #0
 80101e2:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2200      	movs	r2, #0
 80101e8:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2200      	movs	r2, #0
 80101ee:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2200      	movs	r2, #0
 80101f4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                hci_state = HCI_DONE_STATE;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	220f      	movs	r2, #15
 80101fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        }
                        break;
 8010200:	e089      	b.n	8010316 <_ZN3BTD8HCI_taskEv+0x9a6>

                case HCI_DONE_STATE:
                        hci_counter++;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8010208:	3301      	adds	r3, #1
 801020a:	b29a      	uxth	r2, r3
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8010218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801021c:	d97d      	bls.n	801031a <_ZN3BTD8HCI_taskEv+0x9aa>
                                hci_counter = 0;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                                hci_state = HCI_SCANNING_STATE;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	220a      	movs	r2, #10
 801022a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        }
                        break;
 801022e:	e074      	b.n	801031a <_ZN3BTD8HCI_taskEv+0x9aa>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010236:	f003 0304 	and.w	r3, r3, #4
 801023a:	2b00      	cmp	r3, #0
 801023c:	d06f      	beq.n	801031e <_ZN3BTD8HCI_taskEv+0x9ae>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
 801023e:	2180      	movs	r1, #128	; 0x80
 8010240:	483b      	ldr	r0, [pc, #236]	; (8010330 <_ZN3BTD8HCI_taskEv+0x9c0>)
 8010242:	f005 f897 	bl	8015374 <_Z8E_NotifyPKci>
                                disconnect(); //xbox one bt s <- doesn't work without this!
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f7fe fe62 	bl	800ef10 <_ZN3BTD10disconnectEv>
                                              //Need for the controller to be able to reconnect  
#endif
                                hci_event_flag = 0; // Clear all flags
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2200      	movs	r2, #0
 8010250:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	33a1      	adds	r3, #161	; 0xa1
 8010258:	2240      	movs	r2, #64	; 0x40
 801025a:	2100      	movs	r1, #0
 801025c:	4618      	mov	r0, r3
 801025e:	f005 f9e3 	bl	8015628 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	33e1      	adds	r3, #225	; 0xe1
 8010266:	2240      	movs	r2, #64	; 0x40
 8010268:	2100      	movs	r1, #0
 801026a:	4618      	mov	r0, r3
 801026c:	f005 f9dc 	bl	8015628 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2200      	movs	r2, #0
 8010274:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                                incomingPSController = false;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2200      	movs	r2, #0
 80102c0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
                                incomingXboxOneS = false;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2200      	movs	r2, #0
 80102c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                                hci_state = HCI_SCANNING_STATE;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	220a      	movs	r2, #10
 80102d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
                        }
                        break;
 80102d4:	e023      	b.n	801031e <_ZN3BTD8HCI_taskEv+0x9ae>

                default:
                        break;
 80102d6:	bf00      	nop
 80102d8:	e022      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80102da:	bf00      	nop
 80102dc:	e020      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80102de:	bf00      	nop
 80102e0:	e01e      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80102e2:	bf00      	nop
 80102e4:	e01c      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80102e6:	bf00      	nop
 80102e8:	e01a      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80102ea:	bf00      	nop
 80102ec:	e018      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80102ee:	bf00      	nop
 80102f0:	e016      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80102f2:	bf00      	nop
 80102f4:	e014      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80102f6:	bf00      	nop
 80102f8:	e012      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80102fa:	bf00      	nop
 80102fc:	e010      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80102fe:	bf00      	nop
 8010300:	e00e      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 8010302:	bf00      	nop
 8010304:	e00c      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 8010306:	bf00      	nop
 8010308:	e00a      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 801030a:	bf00      	nop
 801030c:	e008      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 801030e:	bf00      	nop
 8010310:	e006      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 8010312:	bf00      	nop
 8010314:	e004      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 8010316:	bf00      	nop
 8010318:	e002      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 801031a:	bf00      	nop
 801031c:	e000      	b.n	8010320 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 801031e:	bf00      	nop
        }
}
 8010320:	bf00      	nop
 8010322:	3714      	adds	r7, #20
 8010324:	46bd      	mov	sp, r7
 8010326:	bd90      	pop	{r4, r7, pc}
 8010328:	080162b0 	.word	0x080162b0
 801032c:	08015ad8 	.word	0x08015ad8
 8010330:	080162c8 	.word	0x080162c8

08010334 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 8010334:	b5b0      	push	{r4, r5, r7, lr}
 8010336:	b086      	sub	sp, #24
 8010338:	af02      	add	r7, sp, #8
 801033a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 801033c:	2340      	movs	r3, #64	; 0x40
 801033e:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f893 406f 	ldrb.w	r4, [r3, #111]	; 0x6f
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	33e1      	adds	r3, #225	; 0xe1
 8010354:	687a      	ldr	r2, [r7, #4]
 8010356:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
 801035a:	f107 050a 	add.w	r5, r7, #10
 801035e:	9201      	str	r2, [sp, #4]
 8010360:	9300      	str	r3, [sp, #0]
 8010362:	462b      	mov	r3, r5
 8010364:	4622      	mov	r2, r4
 8010366:	f003 fb19 	bl	801399c <_ZN3USB10inTransferEhhPtPhh>
 801036a:	4603      	mov	r3, r0
 801036c:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 801036e:	7b7b      	ldrb	r3, [r7, #13]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d125      	bne.n	80103c0 <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 8010374:	897b      	ldrh	r3, [r7, #10]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d022      	beq.n	80103c0 <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 801037a:	2300      	movs	r3, #0
 801037c:	73fb      	strb	r3, [r7, #15]
 801037e:	7bfb      	ldrb	r3, [r7, #15]
 8010380:	2b03      	cmp	r3, #3
 8010382:	d81d      	bhi.n	80103c0 <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 8010384:	7bfb      	ldrb	r3, [r7, #15]
 8010386:	687a      	ldr	r2, [r7, #4]
 8010388:	331e      	adds	r3, #30
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	4413      	add	r3, r2
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d011      	beq.n	80103b8 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 8010394:	7bfb      	ldrb	r3, [r7, #15]
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	331e      	adds	r3, #30
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	4413      	add	r3, r2
 801039e:	6858      	ldr	r0, [r3, #4]
 80103a0:	7bfb      	ldrb	r3, [r7, #15]
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	331e      	adds	r3, #30
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	4413      	add	r3, r2
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	32e1      	adds	r2, #225	; 0xe1
 80103b4:	4611      	mov	r1, r2
 80103b6:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 80103b8:	7bfb      	ldrb	r3, [r7, #15]
 80103ba:	3301      	adds	r3, #1
 80103bc:	73fb      	strb	r3, [r7, #15]
 80103be:	e7de      	b.n	801037e <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 80103c0:	2300      	movs	r3, #0
 80103c2:	73bb      	strb	r3, [r7, #14]
 80103c4:	7bbb      	ldrb	r3, [r7, #14]
 80103c6:	2b03      	cmp	r3, #3
 80103c8:	d81c      	bhi.n	8010404 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 80103ca:	7bbb      	ldrb	r3, [r7, #14]
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	331e      	adds	r3, #30
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	4413      	add	r3, r2
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d010      	beq.n	80103fc <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 80103da:	7bbb      	ldrb	r3, [r7, #14]
 80103dc:	687a      	ldr	r2, [r7, #4]
 80103de:	331e      	adds	r3, #30
 80103e0:	009b      	lsls	r3, r3, #2
 80103e2:	4413      	add	r3, r2
 80103e4:	6859      	ldr	r1, [r3, #4]
 80103e6:	7bbb      	ldrb	r3, [r7, #14]
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	331e      	adds	r3, #30
 80103ec:	009b      	lsls	r3, r3, #2
 80103ee:	4413      	add	r3, r2
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	3304      	adds	r3, #4
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4608      	mov	r0, r1
 80103fa:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 80103fc:	7bbb      	ldrb	r3, [r7, #14]
 80103fe:	3301      	adds	r3, #1
 8010400:	73bb      	strb	r3, [r7, #14]
 8010402:	e7df      	b.n	80103c4 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 8010404:	bf00      	nop
 8010406:	3710      	adds	r7, #16
 8010408:	46bd      	mov	sp, r7
 801040a:	bdb0      	pop	{r4, r5, r7, pc}

0801040c <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 801040c:	b580      	push	{r7, lr}
 801040e:	b08c      	sub	sp, #48	; 0x30
 8010410:	af08      	add	r7, sp, #32
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	4613      	mov	r3, r2
 8010418:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010420:	f023 0301 	bic.w	r3, r3, #1
 8010424:	b29a      	uxth	r2, r3
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801043c:	2300      	movs	r3, #0
 801043e:	9307      	str	r3, [sp, #28]
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	9306      	str	r3, [sp, #24]
 8010444:	88fb      	ldrh	r3, [r7, #6]
 8010446:	9305      	str	r3, [sp, #20]
 8010448:	88fb      	ldrh	r3, [r7, #6]
 801044a:	9304      	str	r3, [sp, #16]
 801044c:	2300      	movs	r3, #0
 801044e:	9303      	str	r3, [sp, #12]
 8010450:	2300      	movs	r3, #0
 8010452:	9302      	str	r3, [sp, #8]
 8010454:	2300      	movs	r3, #0
 8010456:	9301      	str	r3, [sp, #4]
 8010458:	2300      	movs	r3, #0
 801045a:	9300      	str	r3, [sp, #0]
 801045c:	2320      	movs	r3, #32
 801045e:	f003 f9c4 	bl	80137ea <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 8010462:	bf00      	nop
 8010464:	3710      	adds	r7, #16
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}

0801046a <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 801046a:	b580      	push	{r7, lr}
 801046c:	b082      	sub	sp, #8
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2200      	movs	r2, #0
 8010476:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x03; // HCI OCF = 3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2203      	movs	r2, #3
 801047e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	220c      	movs	r2, #12
 8010486:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2200      	movs	r2, #0
 801048e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	33a1      	adds	r3, #161	; 0xa1
 8010496:	2203      	movs	r2, #3
 8010498:	4619      	mov	r1, r3
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f7ff ffb6 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 80104a0:	bf00      	nop
 80104a2:	3708      	adds	r7, #8
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}

080104a8 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80104b6:	f023 0310 	bic.w	r3, r3, #16
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	221a      	movs	r2, #26
 80104c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	220c      	movs	r2, #12
 80104ce:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x01; // parameter length = 1
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2201      	movs	r2, #1
 80104d6:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        if(btdName != NULL)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	68db      	ldr	r3, [r3, #12]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d004      	beq.n	80104ec <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2203      	movs	r2, #3
 80104e6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 80104ea:	e003      	b.n	80104f4 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2202      	movs	r2, #2
 80104f0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

        HCI_Command(hcibuf, 4);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	33a1      	adds	r3, #161	; 0xa1
 80104f8:	2204      	movs	r2, #4
 80104fa:	4619      	mov	r1, r3
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f7ff ff85 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010502:	bf00      	nop
 8010504:	3708      	adds	r7, #8
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}

0801050a <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 801050a:	b580      	push	{r7, lr}
 801050c:	b082      	sub	sp, #8
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010518:	f023 0320 	bic.w	r3, r3, #32
 801051c:	b29a      	uxth	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x09; // HCI OCF = 9
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2209      	movs	r2, #9
 8010528:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2210      	movs	r2, #16
 8010530:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2200      	movs	r2, #0
 8010538:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	33a1      	adds	r3, #161	; 0xa1
 8010540:	2203      	movs	r2, #3
 8010542:	4619      	mov	r1, r3
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f7ff ff61 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 801054a:	bf00      	nop
 801054c:	3708      	adds	r7, #8
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 8010552:	b580      	push	{r7, lr}
 8010554:	b082      	sub	sp, #8
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010564:	b29a      	uxth	r2, r3
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x01; // HCI OCF = 1
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2201      	movs	r2, #1
 8010570:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2210      	movs	r2, #16
 8010578:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	33a1      	adds	r3, #161	; 0xa1
 8010588:	2203      	movs	r2, #3
 801058a:	4619      	mov	r1, r3
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f7ff ff3d 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010592:	bf00      	nop
 8010594:	3708      	adds	r7, #8
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 801059a:	b580      	push	{r7, lr}
 801059c:	b082      	sub	sp, #8
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	460b      	mov	r3, r1
 80105a4:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80105ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x04; // HCI OCF = 4
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2204      	movs	r2, #4
 80105bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2210      	movs	r2, #16
 80105c4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x01; // parameter length = 1
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2201      	movs	r2, #1
 80105cc:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = page_number;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	78fa      	ldrb	r2, [r7, #3]
 80105d4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

        HCI_Command(hcibuf, 4);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	33a1      	adds	r3, #161	; 0xa1
 80105dc:	2204      	movs	r2, #4
 80105de:	4619      	mov	r1, r3
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f7ff ff13 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 80105e6:	bf00      	nop
 80105e8:	3708      	adds	r7, #8
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}

080105ee <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 80105ee:	b580      	push	{r7, lr}
 80105f0:	b082      	sub	sp, #8
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80105fc:	f023 0302 	bic.w	r3, r3, #2
 8010600:	b29a      	uxth	r2, r3
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x09; // HCI OCF = 9
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2209      	movs	r2, #9
 801060c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2204      	movs	r2, #4
 8010614:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x07; // parameter length 7
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2207      	movs	r2, #7
 801061c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	7f1a      	ldrb	r2, [r3, #28]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	7f5a      	ldrb	r2, [r3, #29]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	7f9a      	ldrb	r2, [r3, #30]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	7fda      	ldrb	r2, [r3, #31]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x00; // Switch role to master
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

        HCI_Command(hcibuf, 10);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	33a1      	adds	r3, #161	; 0xa1
 801066c:	220a      	movs	r2, #10
 801066e:	4619      	mov	r1, r3
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f7ff fecb 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010676:	bf00      	nop
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 801067e:	b580      	push	{r7, lr}
 8010680:	b082      	sub	sp, #8
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801068c:	f023 0308 	bic.w	r3, r3, #8
 8010690:	b29a      	uxth	r2, r3
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x19; // HCI OCF = 19
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2219      	movs	r2, #25
 801069c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2204      	movs	r2, #4
 80106a4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x0A; // parameter length = 10
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	220a      	movs	r2, #10
 80106ac:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	7f1a      	ldrb	r2, [r3, #28]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	7f5a      	ldrb	r2, [r3, #29]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	7f9a      	ldrb	r2, [r3, #30]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	7fda      	ldrb	r2, [r3, #31]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f893 2020 	ldrb.w	r2, [r3, #32]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2201      	movs	r2, #1
 80106f4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0x00; // Reserved
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2200      	movs	r2, #0
 80106fc:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = 0x00; // Clock offset - low byte
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2200      	movs	r2, #0
 8010704:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        hcibuf[12] = 0x00; // Clock offset - high byte
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2200      	movs	r2, #0
 801070c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad

        HCI_Command(hcibuf, 13);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	33a1      	adds	r3, #161	; 0xa1
 8010714:	220d      	movs	r2, #13
 8010716:	4619      	mov	r1, r3
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f7ff fe77 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 801071e:	bf00      	nop
 8010720:	3708      	adds	r7, #8
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 8010726:	b590      	push	{r4, r7, lr}
 8010728:	b085      	sub	sp, #20
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2213      	movs	r2, #19
 8010734:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	220c      	movs	r2, #12
 801073c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 8010740:	6838      	ldr	r0, [r7, #0]
 8010742:	f7ef fd65 	bl	8000210 <strlen>
 8010746:	4603      	mov	r3, r0
 8010748:	b2db      	uxtb	r3, r3
 801074a:	3301      	adds	r3, #1
 801074c:	b2da      	uxtb	r2, r3
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 8010754:	2300      	movs	r3, #0
 8010756:	73fb      	strb	r3, [r7, #15]
 8010758:	7bfc      	ldrb	r4, [r7, #15]
 801075a:	6838      	ldr	r0, [r7, #0]
 801075c:	f7ef fd58 	bl	8000210 <strlen>
 8010760:	4603      	mov	r3, r0
 8010762:	429c      	cmp	r4, r3
 8010764:	d20e      	bcs.n	8010784 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 8010766:	7bfb      	ldrb	r3, [r7, #15]
 8010768:	683a      	ldr	r2, [r7, #0]
 801076a:	441a      	add	r2, r3
 801076c:	7bfb      	ldrb	r3, [r7, #15]
 801076e:	3303      	adds	r3, #3
 8010770:	7811      	ldrb	r1, [r2, #0]
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	4413      	add	r3, r2
 8010776:	460a      	mov	r2, r1
 8010778:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        for(i = 0; i < strlen(name); i++)
 801077c:	7bfb      	ldrb	r3, [r7, #15]
 801077e:	3301      	adds	r3, #1
 8010780:	73fb      	strb	r3, [r7, #15]
 8010782:	e7e9      	b.n	8010758 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 8010784:	7bfb      	ldrb	r3, [r7, #15]
 8010786:	3303      	adds	r3, #3
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	4413      	add	r3, r2
 801078c:	2200      	movs	r2, #0
 801078e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

        HCI_Command(hcibuf, 4 + strlen(name));
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f103 04a1 	add.w	r4, r3, #161	; 0xa1
 8010798:	6838      	ldr	r0, [r7, #0]
 801079a:	f7ef fd39 	bl	8000210 <strlen>
 801079e:	4603      	mov	r3, r0
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	3304      	adds	r3, #4
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	461a      	mov	r2, r3
 80107a8:	4621      	mov	r1, r4
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f7ff fe2e 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 80107b0:	bf00      	nop
 80107b2:	3714      	adds	r7, #20
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd90      	pop	{r4, r7, pc}

080107b8 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b082      	sub	sp, #8
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2201      	movs	r2, #1
 80107c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	220c      	movs	r2, #12
 80107cc:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x08;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2208      	movs	r2, #8
 80107d4:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	22ff      	movs	r2, #255	; 0xff
 80107dc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = 0xFF;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	22ff      	movs	r2, #255	; 0xff
 80107e4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0xFF;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	22ff      	movs	r2, #255	; 0xff
 80107ec:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = 0xFF;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	22ff      	movs	r2, #255	; 0xff
 80107f4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = 0xFF;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	22ff      	movs	r2, #255	; 0xff
 80107fc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = 0x1F;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	221f      	movs	r2, #31
 8010804:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	22ff      	movs	r2, #255	; 0xff
 801080c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0x00;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab

        HCI_Command(hcibuf, 11);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	33a1      	adds	r3, #161	; 0xa1
 801081c:	220b      	movs	r2, #11
 801081e:	4619      	mov	r1, r3
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f7ff fdf3 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010826:	bf00      	nop
 8010828:	3708      	adds	r7, #8
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}

0801082e <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 801082e:	b580      	push	{r7, lr}
 8010830:	b082      	sub	sp, #8
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
 8010836:	460b      	mov	r3, r1
 8010838:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2256      	movs	r2, #86	; 0x56
 801083e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	220c      	movs	r2, #12
 8010846:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 1; // parameter length = 1
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2201      	movs	r2, #1
 801084e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = enable ? 1 : 0;
 8010852:	78fb      	ldrb	r3, [r7, #3]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d001      	beq.n	801085c <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 8010858:	2201      	movs	r2, #1
 801085a:	e000      	b.n	801085e <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 801085c:	2200      	movs	r2, #0
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

        HCI_Command(hcibuf, 4);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	33a1      	adds	r3, #161	; 0xa1
 8010868:	2204      	movs	r2, #4
 801086a:	4619      	mov	r1, r3
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7ff fdcd 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010872:	bf00      	nop
 8010874:	3708      	adds	r7, #8
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 801087a:	b580      	push	{r7, lr}
 801087c:	b082      	sub	sp, #8
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801088c:	b29a      	uxth	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x01;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2201      	movs	r2, #1
 8010898:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2204      	movs	r2, #4
 80108a0:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2205      	movs	r2, #5
 80108a8:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2233      	movs	r2, #51	; 0x33
 80108b0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = 0x8B;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	228b      	movs	r2, #139	; 0x8b
 80108b8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0x9E;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	229e      	movs	r2, #158	; 0x9e
 80108c0:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2230      	movs	r2, #48	; 0x30
 80108c8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = 0x0A; // 10 number of responses
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	220a      	movs	r2, #10
 80108d0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

        HCI_Command(hcibuf, 8);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	33a1      	adds	r3, #161	; 0xa1
 80108d8:	2208      	movs	r2, #8
 80108da:	4619      	mov	r1, r3
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f7ff fd95 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 80108e2:	bf00      	nop
 80108e4:	3708      	adds	r7, #8
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}

080108ea <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 80108ea:	b580      	push	{r7, lr}
 80108ec:	b082      	sub	sp, #8
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2202      	movs	r2, #2
 80108f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2204      	movs	r2, #4
 80108fe:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2200      	movs	r2, #0
 8010906:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	33a1      	adds	r3, #161	; 0xa1
 801090e:	2203      	movs	r2, #3
 8010910:	4619      	mov	r1, r3
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7ff fd7a 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010918:	bf00      	nop
 801091a:	3708      	adds	r7, #8
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	331c      	adds	r3, #28
 801092c:	4619      	mov	r1, r3
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 f804 	bl	801093c <_ZN3BTD11hci_connectEPh>
}
 8010934:	bf00      	nop
 8010936:	3708      	adds	r7, #8
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}

0801093c <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801094c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8010950:	b29a      	uxth	r2, r3
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x05; // HCI OCF = 5
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2205      	movs	r2, #5
 801095c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2204      	movs	r2, #4
 8010964:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	220d      	movs	r2, #13
 801096c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	781a      	ldrb	r2, [r3, #0]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = bdaddr[1];
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	785a      	ldrb	r2, [r3, #1]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = bdaddr[2];
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	789a      	ldrb	r2, [r3, #2]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = bdaddr[3];
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	78da      	ldrb	r2, [r3, #3]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = bdaddr[4];
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	791a      	ldrb	r2, [r3, #4]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = bdaddr[5];
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	795a      	ldrb	r2, [r3, #5]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2218      	movs	r2, #24
 80109b0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	22cc      	movs	r2, #204	; 0xcc
 80109b8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = 0x01; // Page repetition mode R1
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2201      	movs	r2, #1
 80109c0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        hcibuf[12] = 0x00; // Reserved
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2200      	movs	r2, #0
 80109c8:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        hcibuf[13] = 0x00; // Clock offset
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2200      	movs	r2, #0
 80109d0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
        hcibuf[14] = 0x00; // Invalid clock offset
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
        hcibuf[15] = 0x00; // Do not allow role switch
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

        HCI_Command(hcibuf, 16);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	33a1      	adds	r3, #161	; 0xa1
 80109e8:	2210      	movs	r2, #16
 80109ea:	4619      	mov	r1, r3
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f7ff fd0d 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 80109f2:	bf00      	nop
 80109f4:	3708      	adds	r7, #8
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
	...

080109fc <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 80109fc:	b590      	push	{r4, r7, lr}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	220d      	movs	r2, #13
 8010a08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2204      	movs	r2, #4
 8010a10:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x17; // parameter length 23
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2217      	movs	r2, #23
 8010a18:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	7f1a      	ldrb	r2, [r3, #28]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	7f5a      	ldrb	r2, [r3, #29]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	7f9a      	ldrb	r2, [r3, #30]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	7fda      	ldrb	r2, [r3, #31]
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        if(pairWithWii) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d043      	beq.n	8010aee <_ZN3BTD26hci_pin_code_request_replyEv+0xf2>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2206      	movs	r2, #6
 8010a6a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                if(pairWiiUsingSync) {
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d017      	beq.n	8010aa8 <_ZN3BTD26hci_pin_code_request_replyEv+0xac>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
 8010a78:	2180      	movs	r1, #128	; 0x80
 8010a7a:	483c      	ldr	r0, [pc, #240]	; (8010b6c <_ZN3BTD26hci_pin_code_request_replyEv+0x170>)
 8010a7c:	f004 fc7a 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                        for(uint8_t i = 0; i < 6; i++)
 8010a80:	2300      	movs	r3, #0
 8010a82:	73fb      	strb	r3, [r7, #15]
 8010a84:	7bfb      	ldrb	r3, [r7, #15]
 8010a86:	2b05      	cmp	r3, #5
 8010a88:	d822      	bhi.n	8010ad0 <_ZN3BTD26hci_pin_code_request_replyEv+0xd4>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 8010a8a:	7bfa      	ldrb	r2, [r7, #15]
 8010a8c:	7bfb      	ldrb	r3, [r7, #15]
 8010a8e:	330a      	adds	r3, #10
 8010a90:	6879      	ldr	r1, [r7, #4]
 8010a92:	440a      	add	r2, r1
 8010a94:	7d11      	ldrb	r1, [r2, #20]
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	4413      	add	r3, r2
 8010a9a:	460a      	mov	r2, r1
 8010a9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                        for(uint8_t i = 0; i < 6; i++)
 8010aa0:	7bfb      	ldrb	r3, [r7, #15]
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	73fb      	strb	r3, [r7, #15]
 8010aa6:	e7ed      	b.n	8010a84 <_ZN3BTD26hci_pin_code_request_replyEv+0x88>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	73bb      	strb	r3, [r7, #14]
 8010aac:	7bbb      	ldrb	r3, [r7, #14]
 8010aae:	2b05      	cmp	r3, #5
 8010ab0:	d80e      	bhi.n	8010ad0 <_ZN3BTD26hci_pin_code_request_replyEv+0xd4>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 8010ab2:	7bba      	ldrb	r2, [r7, #14]
 8010ab4:	7bbb      	ldrb	r3, [r7, #14]
 8010ab6:	330a      	adds	r3, #10
 8010ab8:	6879      	ldr	r1, [r7, #4]
 8010aba:	440a      	add	r2, r1
 8010abc:	7f11      	ldrb	r1, [r2, #28]
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	4413      	add	r3, r2
 8010ac2:	460a      	mov	r2, r1
 8010ac4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                        for(uint8_t i = 0; i < 6; i++)
 8010ac8:	7bbb      	ldrb	r3, [r7, #14]
 8010aca:	3301      	adds	r3, #1
 8010acc:	73bb      	strb	r3, [r7, #14]
 8010ace:	e7ed      	b.n	8010aac <_ZN3BTD26hci_pin_code_request_replyEv+0xb0>
                }
                for(uint8_t i = 16; i < 26; i++)
 8010ad0:	2310      	movs	r3, #16
 8010ad2:	737b      	strb	r3, [r7, #13]
 8010ad4:	7b7b      	ldrb	r3, [r7, #13]
 8010ad6:	2b19      	cmp	r3, #25
 8010ad8:	d83c      	bhi.n	8010b54 <_ZN3BTD26hci_pin_code_request_replyEv+0x158>
                        hcibuf[i] = 0x00; // The rest should be 0
 8010ada:	7b7b      	ldrb	r3, [r7, #13]
 8010adc:	687a      	ldr	r2, [r7, #4]
 8010ade:	4413      	add	r3, r2
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                for(uint8_t i = 16; i < 26; i++)
 8010ae6:	7b7b      	ldrb	r3, [r7, #13]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	737b      	strb	r3, [r7, #13]
 8010aec:	e7f2      	b.n	8010ad4 <_ZN3BTD26hci_pin_code_request_replyEv+0xd8>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	691b      	ldr	r3, [r3, #16]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ef fb8c 	bl	8000210 <strlen>
 8010af8:	4603      	mov	r3, r0
 8010afa:	b2da      	uxtb	r2, r3
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 8010b02:	2300      	movs	r3, #0
 8010b04:	733b      	strb	r3, [r7, #12]
 8010b06:	7b3c      	ldrb	r4, [r7, #12]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	691b      	ldr	r3, [r3, #16]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7ef fb7f 	bl	8000210 <strlen>
 8010b12:	4603      	mov	r3, r0
 8010b14:	429c      	cmp	r4, r3
 8010b16:	d20f      	bcs.n	8010b38 <_ZN3BTD26hci_pin_code_request_replyEv+0x13c>
                        hcibuf[i + 10] = btdPin[i];
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	691a      	ldr	r2, [r3, #16]
 8010b1c:	7b3b      	ldrb	r3, [r7, #12]
 8010b1e:	441a      	add	r2, r3
 8010b20:	7b3b      	ldrb	r3, [r7, #12]
 8010b22:	330a      	adds	r3, #10
 8010b24:	7811      	ldrb	r1, [r2, #0]
 8010b26:	687a      	ldr	r2, [r7, #4]
 8010b28:	4413      	add	r3, r2
 8010b2a:	460a      	mov	r2, r1
 8010b2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 8010b30:	7b3b      	ldrb	r3, [r7, #12]
 8010b32:	3301      	adds	r3, #1
 8010b34:	733b      	strb	r3, [r7, #12]
 8010b36:	e7e6      	b.n	8010b06 <_ZN3BTD26hci_pin_code_request_replyEv+0x10a>
                for(; i < 16; i++)
 8010b38:	7b3b      	ldrb	r3, [r7, #12]
 8010b3a:	2b0f      	cmp	r3, #15
 8010b3c:	d80a      	bhi.n	8010b54 <_ZN3BTD26hci_pin_code_request_replyEv+0x158>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 8010b3e:	7b3b      	ldrb	r3, [r7, #12]
 8010b40:	330a      	adds	r3, #10
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	4413      	add	r3, r2
 8010b46:	2200      	movs	r2, #0
 8010b48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                for(; i < 16; i++)
 8010b4c:	7b3b      	ldrb	r3, [r7, #12]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	733b      	strb	r3, [r7, #12]
 8010b52:	e7f1      	b.n	8010b38 <_ZN3BTD26hci_pin_code_request_replyEv+0x13c>
        }

        HCI_Command(hcibuf, 26);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	33a1      	adds	r3, #161	; 0xa1
 8010b58:	221a      	movs	r2, #26
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f7ff fc55 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010b62:	bf00      	nop
 8010b64:	3714      	adds	r7, #20
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd90      	pop	{r4, r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	080162e8 	.word	0x080162e8

08010b70 <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b082      	sub	sp, #8
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	220e      	movs	r2, #14
 8010b7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2204      	movs	r2, #4
 8010b84:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x06; // parameter length 6
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2206      	movs	r2, #6
 8010b8c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	7f1a      	ldrb	r2, [r3, #28]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	7f5a      	ldrb	r2, [r3, #29]
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	7f9a      	ldrb	r2, [r3, #30]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	7fda      	ldrb	r2, [r3, #31]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

        HCI_Command(hcibuf, 9);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	33a1      	adds	r3, #161	; 0xa1
 8010bd4:	2209      	movs	r2, #9
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f7ff fc17 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010bde:	bf00      	nop
 8010be0:	3708      	adds	r7, #8
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <_ZN3BTD26hci_link_key_request_replyEv>:

void BTD::hci_link_key_request_reply() {
 8010be6:	b580      	push	{r7, lr}
 8010be8:	b082      	sub	sp, #8
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0B; // HCI OCF = 0B
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	220b      	movs	r2, #11
 8010bf2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2204      	movs	r2, #4
 8010bfa:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x16; // parameter length 22
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2216      	movs	r2, #22
 8010c02:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        //for(uint8_t i = 0; i < 6; i++) hcibuf[i + 3] = disc_bdaddr[i]; // 6 octet bdaddr
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	7f1a      	ldrb	r2, [r3, #28]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	7f5a      	ldrb	r2, [r3, #29]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	7f9a      	ldrb	r2, [r3, #30]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	7fda      	ldrb	r2, [r3, #31]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        //for(uint8_t i = 0; i < 16; i++) hcibuf[i + 9] = link_key[i]; // 16 octet link_key
        hcibuf[9] = link_key[0]; // 16 octet link_key
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = link_key[1];
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = link_key[2];
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        hcibuf[12] = link_key[3];
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        hcibuf[13] = link_key[4];
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
        hcibuf[14] = link_key[5];
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
        hcibuf[15] = link_key[6];
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        hcibuf[16] = link_key[7];
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
        hcibuf[17] = link_key[8];
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
        hcibuf[18] = link_key[9];
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
        hcibuf[19] = link_key[10];
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
        hcibuf[20] = link_key[11];
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
        hcibuf[21] = link_key[12];
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        hcibuf[22] = link_key[13];
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
        hcibuf[23] = link_key[14];
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        hcibuf[24] = link_key[15];
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

        HCI_Command(hcibuf, 25);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	33a1      	adds	r3, #161	; 0xa1
 8010d0a:	2219      	movs	r2, #25
 8010d0c:	4619      	mov	r1, r3
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f7ff fb7c 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010d14:	bf00      	nop
 8010d16:	3708      	adds	r7, #8
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	220c      	movs	r2, #12
 8010d28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2204      	movs	r2, #4
 8010d30:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x06; // parameter length 6
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2206      	movs	r2, #6
 8010d38:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	7f1a      	ldrb	r2, [r3, #28]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	7f5a      	ldrb	r2, [r3, #29]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	7f9a      	ldrb	r2, [r3, #30]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	7fda      	ldrb	r2, [r3, #31]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

        HCI_Command(hcibuf, 9);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	33a1      	adds	r3, #161	; 0xa1
 8010d80:	2209      	movs	r2, #9
 8010d82:	4619      	mov	r1, r3
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f7ff fb41 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010d8a:	bf00      	nop
 8010d8c:	3708      	adds	r7, #8
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b082      	sub	sp, #8
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	222b      	movs	r2, #43	; 0x2b
 8010d9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2204      	movs	r2, #4
 8010da6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x09;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2209      	movs	r2, #9
 8010dae:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	7f1a      	ldrb	r2, [r3, #28]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	7f5a      	ldrb	r2, [r3, #29]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	7f9a      	ldrb	r2, [r3, #30]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	7fda      	ldrb	r2, [r3, #31]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x03; // NoInputNoOutput
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2203      	movs	r2, #3
 8010df6:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0x00; // OOB authentication data not present
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2200      	movs	r2, #0
 8010e06:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

        HCI_Command(hcibuf, 12);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	33a1      	adds	r3, #161	; 0xa1
 8010e0e:	220c      	movs	r2, #12
 8010e10:	4619      	mov	r1, r3
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f7ff fafa 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010e18:	bf00      	nop
 8010e1a:	3708      	adds	r7, #8
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	222c      	movs	r2, #44	; 0x2c
 8010e2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2204      	movs	r2, #4
 8010e34:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x06; // parameter length 6
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2206      	movs	r2, #6
 8010e3c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	7f1a      	ldrb	r2, [r3, #28]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	7f5a      	ldrb	r2, [r3, #29]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	7f9a      	ldrb	r2, [r3, #30]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	7fda      	ldrb	r2, [r3, #31]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

        HCI_Command(hcibuf, 9);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	33a1      	adds	r3, #161	; 0xa1
 8010e84:	2209      	movs	r2, #9
 8010e86:	4619      	mov	r1, r3
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f7ff fabf 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010e8e:	bf00      	nop
 8010e90:	3708      	adds	r7, #8
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b082      	sub	sp, #8
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2211      	movs	r2, #17
 8010ea2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2204      	movs	r2, #4
 8010eaa:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x02; // parameter length = 2
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2202      	movs	r2, #2
 8010eb2:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	8b5b      	ldrh	r3, [r3, #26]
 8010eba:	b2da      	uxtb	r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	8b5b      	ldrh	r3, [r3, #26]
 8010ec6:	121b      	asrs	r3, r3, #8
 8010ec8:	b2db      	uxtb	r3, r3
 8010eca:	f003 030f 	and.w	r3, r3, #15
 8010ece:	b2da      	uxtb	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

        HCI_Command(hcibuf, 5);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	33a1      	adds	r3, #161	; 0xa1
 8010eda:	2205      	movs	r2, #5
 8010edc:	4619      	mov	r1, r3
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f7ff fa94 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010ee4:	bf00      	nop
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	460b      	mov	r3, r1
 8010ef6:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010efe:	f023 0304 	bic.w	r3, r3, #4
 8010f02:	b29a      	uxth	r2, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x06; // HCI OCF = 6
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2206      	movs	r2, #6
 8010f0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2204      	movs	r2, #4
 8010f16:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x03; // parameter length = 3
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2203      	movs	r2, #3
 8010f1e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 8010f22:	887b      	ldrh	r3, [r7, #2]
 8010f24:	b2da      	uxtb	r2, r3
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 8010f2c:	887b      	ldrh	r3, [r7, #2]
 8010f2e:	121b      	asrs	r3, r3, #8
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	f003 030f 	and.w	r3, r3, #15
 8010f36:	b2da      	uxtb	r2, r3
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0x13; // reason
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2213      	movs	r2, #19
 8010f42:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

        HCI_Command(hcibuf, 6);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	33a1      	adds	r3, #161	; 0xa1
 8010f4a:	2206      	movs	r2, #6
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f7ff fa5c 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010f54:	bf00      	nop
 8010f56:	3708      	adds	r7, #8
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2224      	movs	r2, #36	; 0x24
 8010f68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	220c      	movs	r2, #12
 8010f70:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x03; // parameter length = 3
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2203      	movs	r2, #3
 8010f78:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = 0x04; // Robot
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2204      	movs	r2, #4
 8010f80:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = 0x08; // Toy
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2208      	movs	r2, #8
 8010f88:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0x00;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

        HCI_Command(hcibuf, 6);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	33a1      	adds	r3, #161	; 0xa1
 8010f98:	2206      	movs	r2, #6
 8010f9a:	4619      	mov	r1, r3
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f7ff fa35 	bl	801040c <_ZN3BTD11HCI_CommandEPht>
}
 8010fa2:	bf00      	nop
 8010fa4:	3708      	adds	r7, #8
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
	...

08010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 8010fac:	b5b0      	push	{r4, r5, r7, lr}
 8010fae:	b08a      	sub	sp, #40	; 0x28
 8010fb0:	af02      	add	r7, sp, #8
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	607a      	str	r2, [r7, #4]
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	460b      	mov	r3, r1
 8010fba:	817b      	strh	r3, [r7, #10]
 8010fbc:	4613      	mov	r3, r2
 8010fbe:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 8010fc0:	466b      	mov	r3, sp
 8010fc2:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 8010fc4:	7a7b      	ldrb	r3, [r7, #9]
 8010fc6:	1ddc      	adds	r4, r3, #7
 8010fc8:	61bc      	str	r4, [r7, #24]
 8010fca:	4623      	mov	r3, r4
 8010fcc:	3301      	adds	r3, #1
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f04f 0100 	mov.w	r1, #0
 8010fd4:	f04f 0200 	mov.w	r2, #0
 8010fd8:	f04f 0300 	mov.w	r3, #0
 8010fdc:	00cb      	lsls	r3, r1, #3
 8010fde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010fe2:	00c2      	lsls	r2, r0, #3
 8010fe4:	4623      	mov	r3, r4
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f04f 0100 	mov.w	r1, #0
 8010fee:	f04f 0200 	mov.w	r2, #0
 8010ff2:	f04f 0300 	mov.w	r3, #0
 8010ff6:	00cb      	lsls	r3, r1, #3
 8010ff8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010ffc:	00c2      	lsls	r2, r0, #3
 8010ffe:	4623      	mov	r3, r4
 8011000:	3301      	adds	r3, #1
 8011002:	3307      	adds	r3, #7
 8011004:	08db      	lsrs	r3, r3, #3
 8011006:	00db      	lsls	r3, r3, #3
 8011008:	ebad 0d03 	sub.w	sp, sp, r3
 801100c:	ab02      	add	r3, sp, #8
 801100e:	3300      	adds	r3, #0
 8011010:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 8011012:	897b      	ldrh	r3, [r7, #10]
 8011014:	b2da      	uxtb	r2, r3
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 801101a:	897b      	ldrh	r3, [r7, #10]
 801101c:	121b      	asrs	r3, r3, #8
 801101e:	b25b      	sxtb	r3, r3
 8011020:	f003 030f 	and.w	r3, r3, #15
 8011024:	b25b      	sxtb	r3, r3
 8011026:	f043 0320 	orr.w	r3, r3, #32
 801102a:	b25b      	sxtb	r3, r3
 801102c:	b2da      	uxtb	r2, r3
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 8011032:	7a7b      	ldrb	r3, [r7, #9]
 8011034:	3304      	adds	r3, #4
 8011036:	b2da      	uxtb	r2, r3
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 801103c:	7a7b      	ldrb	r3, [r7, #9]
 801103e:	3304      	adds	r3, #4
 8011040:	121b      	asrs	r3, r3, #8
 8011042:	b2da      	uxtb	r2, r3
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	7a7a      	ldrb	r2, [r7, #9]
 801104c:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 801104e:	7a7b      	ldrb	r3, [r7, #9]
 8011050:	121b      	asrs	r3, r3, #8
 8011052:	b2da      	uxtb	r2, r3
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801105e:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8011066:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 8011068:	2300      	movs	r3, #0
 801106a:	83fb      	strh	r3, [r7, #30]
 801106c:	7a7b      	ldrb	r3, [r7, #9]
 801106e:	b29b      	uxth	r3, r3
 8011070:	8bfa      	ldrh	r2, [r7, #30]
 8011072:	429a      	cmp	r2, r3
 8011074:	d20b      	bcs.n	801108e <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 8011076:	8bfb      	ldrh	r3, [r7, #30]
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	441a      	add	r2, r3
 801107c:	8bfb      	ldrh	r3, [r7, #30]
 801107e:	3308      	adds	r3, #8
 8011080:	7811      	ldrb	r1, [r2, #0]
 8011082:	697a      	ldr	r2, [r7, #20]
 8011084:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 8011086:	8bfb      	ldrh	r3, [r7, #30]
 8011088:	3301      	adds	r3, #1
 801108a:	83fb      	strh	r3, [r7, #30]
 801108c:	e7ee      	b.n	801106c <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
 801109e:	7a7b      	ldrb	r3, [r7, #9]
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	3308      	adds	r3, #8
 80110a4:	b29c      	uxth	r4, r3
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	4623      	mov	r3, r4
 80110ac:	f002 fd9e 	bl	8013bec <_ZN3USB11outTransferEhhtPh>
 80110b0:	4603      	mov	r3, r0
 80110b2:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 80110b4:	7cfb      	ldrb	r3, [r7, #19]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d01f      	beq.n	80110fa <_ZN3BTD13L2CAP_CommandEtPhhhh+0x14e>
                delay(100); // This small delay prevents it from overflowing if it fails
 80110ba:	2064      	movs	r0, #100	; 0x64
 80110bc:	f7f1 fbaa 	bl	8002814 <HAL_Delay>
                Notify(PSTR("\r\nError sending L2CAP message: 0x"), 0x80);
 80110c0:	2180      	movs	r1, #128	; 0x80
 80110c2:	4810      	ldr	r0, [pc, #64]	; (8011104 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x158>)
 80110c4:	f004 f956 	bl	8015374 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (rcode, 0x80);
 80110c8:	7cfb      	ldrb	r3, [r7, #19]
 80110ca:	2180      	movs	r1, #128	; 0x80
 80110cc:	4618      	mov	r0, r3
 80110ce:	f000 fa92 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                Notify(PSTR(" - Channel ID: "), 0x80);
 80110d2:	2180      	movs	r1, #128	; 0x80
 80110d4:	480c      	ldr	r0, [pc, #48]	; (8011108 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x15c>)
 80110d6:	f004 f94d 	bl	8015374 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (channelHigh, 0x80);
 80110da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80110de:	2180      	movs	r1, #128	; 0x80
 80110e0:	4618      	mov	r0, r3
 80110e2:	f000 fa88 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                Notify(PSTR(" "), 0x80);
 80110e6:	2180      	movs	r1, #128	; 0x80
 80110e8:	4808      	ldr	r0, [pc, #32]	; (801110c <_ZN3BTD13L2CAP_CommandEtPhhhh+0x160>)
 80110ea:	f004 f943 	bl	8015374 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (channelLow, 0x80);
 80110ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80110f2:	2180      	movs	r1, #128	; 0x80
 80110f4:	4618      	mov	r0, r3
 80110f6:	f000 fa7e 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
 80110fa:	46ad      	mov	sp, r5
}
 80110fc:	bf00      	nop
 80110fe:	3720      	adds	r7, #32
 8011100:	46bd      	mov	sp, r7
 8011102:	bdb0      	pop	{r4, r5, r7, pc}
 8011104:	08016310 	.word	0x08016310
 8011108:	08016334 	.word	0x08016334
 801110c:	08015be4 	.word	0x08015be4

08011110 <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af02      	add	r7, sp, #8
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	607b      	str	r3, [r7, #4]
 801111a:	460b      	mov	r3, r1
 801111c:	817b      	strh	r3, [r7, #10]
 801111e:	4613      	mov	r3, r2
 8011120:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	2202      	movs	r2, #2
 8011126:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	7a7a      	ldrb	r2, [r7, #9]
 801112e:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x04; // Length
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	2204      	movs	r2, #4
 8011136:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	2200      	movs	r2, #0
 801113e:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 8011142:	8b3b      	ldrh	r3, [r7, #24]
 8011144:	b2da      	uxtb	r2, r3
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 801114c:	8b3b      	ldrh	r3, [r7, #24]
 801114e:	121b      	asrs	r3, r3, #8
 8011150:	b2da      	uxtb	r2, r3
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0]; // Source CID
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	781a      	ldrb	r2, [r3, #0]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	785a      	ldrb	r2, [r3, #1]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

        L2CAP_Command(handle, l2capoutbuf, 8);
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f203 1221 	addw	r2, r3, #289	; 0x121
 8011172:	8979      	ldrh	r1, [r7, #10]
 8011174:	2300      	movs	r3, #0
 8011176:	9301      	str	r3, [sp, #4]
 8011178:	2301      	movs	r3, #1
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	2308      	movs	r3, #8
 801117e:	68f8      	ldr	r0, [r7, #12]
 8011180:	f7ff ff14 	bl	8010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011184:	bf00      	nop
 8011186:	3710      	adds	r7, #16
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 801118c:	b580      	push	{r7, lr}
 801118e:	b086      	sub	sp, #24
 8011190:	af02      	add	r7, sp, #8
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	607b      	str	r3, [r7, #4]
 8011196:	460b      	mov	r3, r1
 8011198:	817b      	strh	r3, [r7, #10]
 801119a:	4613      	mov	r3, r2
 801119c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2203      	movs	r2, #3
 80111a2:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	7a7a      	ldrb	r2, [r7, #9]
 80111aa:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x08; // Length
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2208      	movs	r2, #8
 80111b2:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2200      	movs	r2, #0
 80111ba:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0]; // Destination CID
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	781a      	ldrb	r2, [r3, #0]
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	785a      	ldrb	r2, [r3, #1]
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0]; // Source CID
 80111d2:	69bb      	ldr	r3, [r7, #24]
 80111d4:	781a      	ldrb	r2, [r3, #0]
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	785a      	ldrb	r2, [r3, #1]
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = result; // Result: Pending or Success
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	7f3a      	ldrb	r2, [r7, #28]
 80111ea:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x00;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2200      	movs	r2, #0
 80111f2:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0x00; // No further information
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	2200      	movs	r2, #0
 80111fa:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0x00;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2200      	movs	r2, #0
 8011202:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

        L2CAP_Command(handle, l2capoutbuf, 12);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	f203 1221 	addw	r2, r3, #289	; 0x121
 801120c:	8979      	ldrh	r1, [r7, #10]
 801120e:	2300      	movs	r3, #0
 8011210:	9301      	str	r3, [sp, #4]
 8011212:	2301      	movs	r3, #1
 8011214:	9300      	str	r3, [sp, #0]
 8011216:	230c      	movs	r3, #12
 8011218:	68f8      	ldr	r0, [r7, #12]
 801121a:	f7ff fec7 	bl	8010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 801121e:	bf00      	nop
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 8011226:	b580      	push	{r7, lr}
 8011228:	b086      	sub	sp, #24
 801122a:	af02      	add	r7, sp, #8
 801122c:	60f8      	str	r0, [r7, #12]
 801122e:	607b      	str	r3, [r7, #4]
 8011230:	460b      	mov	r3, r1
 8011232:	817b      	strh	r3, [r7, #10]
 8011234:	4613      	mov	r3, r2
 8011236:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2204      	movs	r2, #4
 801123c:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	7a7a      	ldrb	r2, [r7, #9]
 8011244:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x08; // Length
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	2208      	movs	r2, #8
 801124c:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2200      	movs	r2, #0
 8011254:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0]; // Destination CID
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	781a      	ldrb	r2, [r3, #0]
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	785a      	ldrb	r2, [r3, #1]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = 0x00; // Flags
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	2200      	movs	r2, #0
 8011270:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = 0x00;
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	2200      	movs	r2, #0
 8011278:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2201      	movs	r2, #1
 8011280:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x02; // Config Opt: length
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	2202      	movs	r2, #2
 8011288:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0xFF; // MTU
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	22ff      	movs	r2, #255	; 0xff
 8011290:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0xFF;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	22ff      	movs	r2, #255	; 0xff
 8011298:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

        L2CAP_Command(handle, l2capoutbuf, 12);
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f203 1221 	addw	r2, r3, #289	; 0x121
 80112a2:	8979      	ldrh	r1, [r7, #10]
 80112a4:	2300      	movs	r3, #0
 80112a6:	9301      	str	r3, [sp, #4]
 80112a8:	2301      	movs	r3, #1
 80112aa:	9300      	str	r3, [sp, #0]
 80112ac:	230c      	movs	r3, #12
 80112ae:	68f8      	ldr	r0, [r7, #12]
 80112b0:	f7ff fe7c 	bl	8010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80112b4:	bf00      	nop
 80112b6:	3710      	adds	r7, #16
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 80112bc:	b580      	push	{r7, lr}
 80112be:	b086      	sub	sp, #24
 80112c0:	af02      	add	r7, sp, #8
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	607b      	str	r3, [r7, #4]
 80112c6:	460b      	mov	r3, r1
 80112c8:	817b      	strh	r3, [r7, #10]
 80112ca:	4613      	mov	r3, r2
 80112cc:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2205      	movs	r2, #5
 80112d2:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	7a7a      	ldrb	r2, [r7, #9]
 80112da:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x0A; // Length
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	220a      	movs	r2, #10
 80112e2:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2200      	movs	r2, #0
 80112ea:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = scid[0]; // Source CID
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	781a      	ldrb	r2, [r3, #0]
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = scid[1];
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	785a      	ldrb	r2, [r3, #1]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = 0x00; // Flag
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2200      	movs	r2, #0
 8011306:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = 0x00;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2200      	movs	r2, #0
 801130e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = 0x00; // Result
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2200      	movs	r2, #0
 8011316:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x00;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2200      	movs	r2, #0
 801131e:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0x01; // Config
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	2201      	movs	r2, #1
 8011326:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0x02;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2202      	movs	r2, #2
 801132e:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
        l2capoutbuf[12] = 0xA0;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	22a0      	movs	r2, #160	; 0xa0
 8011336:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
        l2capoutbuf[13] = 0x02;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2202      	movs	r2, #2
 801133e:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e

        L2CAP_Command(handle, l2capoutbuf, 14);
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f203 1221 	addw	r2, r3, #289	; 0x121
 8011348:	8979      	ldrh	r1, [r7, #10]
 801134a:	2300      	movs	r3, #0
 801134c:	9301      	str	r3, [sp, #4]
 801134e:	2301      	movs	r3, #1
 8011350:	9300      	str	r3, [sp, #0]
 8011352:	230e      	movs	r3, #14
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f7ff fe29 	bl	8010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 801135a:	bf00      	nop
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}

08011362 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 8011362:	b580      	push	{r7, lr}
 8011364:	b086      	sub	sp, #24
 8011366:	af02      	add	r7, sp, #8
 8011368:	60f8      	str	r0, [r7, #12]
 801136a:	607b      	str	r3, [r7, #4]
 801136c:	460b      	mov	r3, r1
 801136e:	817b      	strh	r3, [r7, #10]
 8011370:	4613      	mov	r3, r2
 8011372:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2206      	movs	r2, #6
 8011378:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	7a7a      	ldrb	r2, [r7, #9]
 8011380:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x04; // Length
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	2204      	movs	r2, #4
 8011388:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2200      	movs	r2, #0
 8011390:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0];
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	781a      	ldrb	r2, [r3, #0]
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	785a      	ldrb	r2, [r3, #1]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0];
 80113a8:	69bb      	ldr	r3, [r7, #24]
 80113aa:	781a      	ldrb	r2, [r3, #0]
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	785a      	ldrb	r2, [r3, #1]
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

        L2CAP_Command(handle, l2capoutbuf, 8);
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f203 1221 	addw	r2, r3, #289	; 0x121
 80113c2:	8979      	ldrh	r1, [r7, #10]
 80113c4:	2300      	movs	r3, #0
 80113c6:	9301      	str	r3, [sp, #4]
 80113c8:	2301      	movs	r3, #1
 80113ca:	9300      	str	r3, [sp, #0]
 80113cc:	2308      	movs	r3, #8
 80113ce:	68f8      	ldr	r0, [r7, #12]
 80113d0:	f7ff fdec 	bl	8010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80113d4:	bf00      	nop
 80113d6:	3710      	adds	r7, #16
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 80113dc:	b580      	push	{r7, lr}
 80113de:	b086      	sub	sp, #24
 80113e0:	af02      	add	r7, sp, #8
 80113e2:	60f8      	str	r0, [r7, #12]
 80113e4:	607b      	str	r3, [r7, #4]
 80113e6:	460b      	mov	r3, r1
 80113e8:	817b      	strh	r3, [r7, #10]
 80113ea:	4613      	mov	r3, r2
 80113ec:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2207      	movs	r2, #7
 80113f2:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	7a7a      	ldrb	r2, [r7, #9]
 80113fa:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x04; // Length
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	2204      	movs	r2, #4
 8011402:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2200      	movs	r2, #0
 801140a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0];
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	781a      	ldrb	r2, [r3, #0]
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	785a      	ldrb	r2, [r3, #1]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0];
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	781a      	ldrb	r2, [r3, #0]
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 801142c:	69bb      	ldr	r3, [r7, #24]
 801142e:	785a      	ldrb	r2, [r3, #1]
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

        L2CAP_Command(handle, l2capoutbuf, 8);
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f203 1221 	addw	r2, r3, #289	; 0x121
 801143c:	8979      	ldrh	r1, [r7, #10]
 801143e:	2300      	movs	r3, #0
 8011440:	9301      	str	r3, [sp, #4]
 8011442:	2301      	movs	r3, #1
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	2308      	movs	r3, #8
 8011448:	68f8      	ldr	r0, [r7, #12]
 801144a:	f7ff fdaf 	bl	8010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 801144e:	bf00      	nop
 8011450:	3710      	adds	r7, #16
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}

08011456 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 8011456:	b580      	push	{r7, lr}
 8011458:	b084      	sub	sp, #16
 801145a:	af02      	add	r7, sp, #8
 801145c:	6078      	str	r0, [r7, #4]
 801145e:	4608      	mov	r0, r1
 8011460:	4611      	mov	r1, r2
 8011462:	461a      	mov	r2, r3
 8011464:	4603      	mov	r3, r0
 8011466:	807b      	strh	r3, [r7, #2]
 8011468:	460b      	mov	r3, r1
 801146a:	707b      	strb	r3, [r7, #1]
 801146c:	4613      	mov	r3, r2
 801146e:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	220b      	movs	r2, #11
 8011474:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	787a      	ldrb	r2, [r7, #1]
 801147c:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x08; // Length
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2208      	movs	r2, #8
 8011484:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2200      	movs	r2, #0
 801148c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = infoTypeLow;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	783a      	ldrb	r2, [r7, #0]
 8011494:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = infoTypeHigh;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	7c3a      	ldrb	r2, [r7, #16]
 801149c:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = 0x00; // Result = success
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2200      	movs	r2, #0
 80114a4:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = 0x00; // Result = success
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2200      	movs	r2, #0
 80114ac:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = 0x00;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2200      	movs	r2, #0
 80114b4:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x00;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2200      	movs	r2, #0
 80114bc:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0x00;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0x00;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

        L2CAP_Command(handle, l2capoutbuf, 12);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f203 1221 	addw	r2, r3, #289	; 0x121
 80114d6:	8879      	ldrh	r1, [r7, #2]
 80114d8:	2300      	movs	r3, #0
 80114da:	9301      	str	r3, [sp, #4]
 80114dc:	2301      	movs	r3, #1
 80114de:	9300      	str	r3, [sp, #0]
 80114e0:	230c      	movs	r3, #12
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f7ff fd62 	bl	8010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80114e8:	bf00      	nop
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b08e      	sub	sp, #56	; 0x38
 80114f4:	af08      	add	r7, sp, #32
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 80114fa:	2301      	movs	r3, #1
 80114fc:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 80114fe:	2300      	movs	r3, #0
 8011500:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 8011502:	2300      	movs	r3, #0
 8011504:	75fb      	strb	r3, [r7, #23]
 8011506:	7dfb      	ldrb	r3, [r7, #23]
 8011508:	2b05      	cmp	r3, #5
 801150a:	d811      	bhi.n	8011530 <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 801150c:	7dfb      	ldrb	r3, [r7, #23]
 801150e:	f1c3 0305 	rsb	r3, r3, #5
 8011512:	461a      	mov	r2, r3
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	441a      	add	r2, r3
 8011518:	7dfb      	ldrb	r3, [r7, #23]
 801151a:	3302      	adds	r3, #2
 801151c:	7812      	ldrb	r2, [r2, #0]
 801151e:	f107 0118 	add.w	r1, r7, #24
 8011522:	440b      	add	r3, r1
 8011524:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 8011528:	7dfb      	ldrb	r3, [r7, #23]
 801152a:	3301      	adds	r3, #1
 801152c:	75fb      	strb	r3, [r7, #23]
 801152e:	e7ea      	b.n	8011506 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8011540:	2300      	movs	r3, #0
 8011542:	9307      	str	r3, [sp, #28]
 8011544:	f107 030c 	add.w	r3, r7, #12
 8011548:	9306      	str	r3, [sp, #24]
 801154a:	2308      	movs	r3, #8
 801154c:	9305      	str	r3, [sp, #20]
 801154e:	2308      	movs	r3, #8
 8011550:	9304      	str	r3, [sp, #16]
 8011552:	2300      	movs	r3, #0
 8011554:	9303      	str	r3, [sp, #12]
 8011556:	2303      	movs	r3, #3
 8011558:	9302      	str	r3, [sp, #8]
 801155a:	23f5      	movs	r3, #245	; 0xf5
 801155c:	9301      	str	r3, [sp, #4]
 801155e:	2309      	movs	r3, #9
 8011560:	9300      	str	r3, [sp, #0]
 8011562:	2321      	movs	r3, #33	; 0x21
 8011564:	f002 f941 	bl	80137ea <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 8011568:	bf00      	nop
 801156a:	3718      	adds	r7, #24
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 8011570:	b580      	push	{r7, lr}
 8011572:	b08e      	sub	sp, #56	; 0x38
 8011574:	af08      	add	r7, sp, #32
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 801157a:	2305      	movs	r3, #5
 801157c:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 801157e:	2310      	movs	r3, #16
 8011580:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 8011582:	2301      	movs	r3, #1
 8011584:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 8011586:	2302      	movs	r3, #2
 8011588:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 801158a:	2312      	movs	r3, #18
 801158c:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 801158e:	2300      	movs	r3, #0
 8011590:	75fb      	strb	r3, [r7, #23]
 8011592:	7dfb      	ldrb	r3, [r7, #23]
 8011594:	2b05      	cmp	r3, #5
 8011596:	d80e      	bhi.n	80115b6 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 8011598:	7dfb      	ldrb	r3, [r7, #23]
 801159a:	683a      	ldr	r2, [r7, #0]
 801159c:	441a      	add	r2, r3
 801159e:	7dfb      	ldrb	r3, [r7, #23]
 80115a0:	3301      	adds	r3, #1
 80115a2:	7812      	ldrb	r2, [r2, #0]
 80115a4:	f107 0118 	add.w	r1, r7, #24
 80115a8:	440b      	add	r3, r1
 80115aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 80115ae:	7dfb      	ldrb	r3, [r7, #23]
 80115b0:	3301      	adds	r3, #1
 80115b2:	75fb      	strb	r3, [r7, #23]
 80115b4:	e7ed      	b.n	8011592 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 80115c6:	2300      	movs	r3, #0
 80115c8:	9307      	str	r3, [sp, #28]
 80115ca:	f107 030c 	add.w	r3, r7, #12
 80115ce:	9306      	str	r3, [sp, #24]
 80115d0:	230b      	movs	r3, #11
 80115d2:	9305      	str	r3, [sp, #20]
 80115d4:	230b      	movs	r3, #11
 80115d6:	9304      	str	r3, [sp, #16]
 80115d8:	2300      	movs	r3, #0
 80115da:	9303      	str	r3, [sp, #12]
 80115dc:	2303      	movs	r3, #3
 80115de:	9302      	str	r3, [sp, #8]
 80115e0:	2305      	movs	r3, #5
 80115e2:	9301      	str	r3, [sp, #4]
 80115e4:	2309      	movs	r3, #9
 80115e6:	9300      	str	r3, [sp, #0]
 80115e8:	2321      	movs	r3, #33	; 0x21
 80115ea:	f002 f8fe 	bl	80137ea <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 80115ee:	bf00      	nop
 80115f0:	3718      	adds	r7, #24
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 80115f6:	b580      	push	{r7, lr}
 80115f8:	b082      	sub	sp, #8
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	4603      	mov	r3, r0
 80115fe:	6039      	str	r1, [r7, #0]
 8011600:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
 8011602:	79fb      	ldrb	r3, [r7, #7]
 8011604:	6839      	ldr	r1, [r7, #0]
 8011606:	4618      	mov	r0, r3
 8011608:	f000 f8b0 	bl	801176c <_Z8PrintHexIhEvT_i>
#endif
}
 801160c:	bf00      	nop
 801160e:	3708      	adds	r7, #8
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}

08011614 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 8011614:	b480      	push	{r7}
 8011616:	b083      	sub	sp, #12
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	4a04      	ldr	r2, [pc, #16]	; (8011630 <_ZN13USBReadParserC1Ev+0x1c>)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	601a      	str	r2, [r3, #0]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	4618      	mov	r0, r3
 8011626:	370c      	adds	r7, #12
 8011628:	46bd      	mov	sp, r7
 801162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162e:	4770      	bx	lr
 8011630:	08017734 	.word	0x08017734

08011634 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4618      	mov	r0, r3
 8011642:	f7ff ffe7 	bl	8011614 <_ZN13USBReadParserC1Ev>
 8011646:	4a21      	ldr	r2, [pc, #132]	; (80116cc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	601a      	str	r2, [r3, #0]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	683a      	ldr	r2, [r7, #0]
 8011650:	605a      	str	r2, [r3, #4]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	3308      	adds	r3, #8
 8011656:	4618      	mov	r0, r3
 8011658:	f7fc fda5 	bl	800e1a6 <_ZN16MultiValueBufferC1Ev>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	3310      	adds	r3, #16
 8011660:	4618      	mov	r0, r3
 8011662:	f7fc fdb7 	bl	800e1d4 <_ZN20MultiByteValueParserC1Ev>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	3318      	adds	r3, #24
 801166a:	4618      	mov	r0, r3
 801166c:	f7fc fdde 	bl	800e22c <_ZN11ByteSkipperC1Ev>
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2200      	movs	r2, #0
 8011674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2200      	movs	r2, #0
 801167c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2200      	movs	r2, #0
 8011684:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f103 0220 	add.w	r2, r3, #32
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f103 0210 	add.w	r2, r3, #16
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	3308      	adds	r3, #8
 80116a6:	4619      	mov	r1, r3
 80116a8:	4610      	mov	r0, r2
 80116aa:	f7fc fda7 	bl	800e1fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f103 0218 	add.w	r2, r3, #24
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	3308      	adds	r3, #8
 80116b8:	4619      	mov	r1, r3
 80116ba:	4610      	mov	r0, r2
 80116bc:	f7fc fdca 	bl	800e254 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	4618      	mov	r0, r3
 80116c4:	3708      	adds	r7, #8
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	080176dc 	.word	0x080176dc

080116d0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]
UseOr(false) {
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	4618      	mov	r0, r3
 80116de:	f7ff ff99 	bl	8011614 <_ZN13USBReadParserC1Ev>
 80116e2:	4a21      	ldr	r2, [pc, #132]	; (8011768 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	601a      	str	r2, [r3, #0]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	683a      	ldr	r2, [r7, #0]
 80116ec:	605a      	str	r2, [r3, #4]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	3308      	adds	r3, #8
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fc fd57 	bl	800e1a6 <_ZN16MultiValueBufferC1Ev>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	3310      	adds	r3, #16
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7fc fd69 	bl	800e1d4 <_ZN20MultiByteValueParserC1Ev>
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	3318      	adds	r3, #24
 8011706:	4618      	mov	r0, r3
 8011708:	f7fc fd90 	bl	800e22c <_ZN11ByteSkipperC1Ev>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2200      	movs	r2, #0
 8011710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2200      	movs	r2, #0
 8011720:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f103 0220 	add.w	r2, r3, #32
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f103 0210 	add.w	r2, r3, #16
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	3308      	adds	r3, #8
 8011742:	4619      	mov	r1, r3
 8011744:	4610      	mov	r0, r2
 8011746:	f7fc fd59 	bl	800e1fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	f103 0218 	add.w	r2, r3, #24
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	3308      	adds	r3, #8
 8011754:	4619      	mov	r1, r3
 8011756:	4610      	mov	r0, r2
 8011758:	f7fc fd7c 	bl	800e254 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	4618      	mov	r0, r3
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	080176d0 	.word	0x080176d0

0801176c <_Z8PrintHexIhEvT_i>:
void PrintHex(T val, int lvl) {
 801176c:	b580      	push	{r7, lr}
 801176e:	b084      	sub	sp, #16
 8011770:	af00      	add	r7, sp, #0
 8011772:	4603      	mov	r3, r0
 8011774:	6039      	str	r1, [r7, #0]
 8011776:	71fb      	strb	r3, [r7, #7]
        int num_nibbles = sizeof (T) * 2;
 8011778:	2302      	movs	r3, #2
 801177a:	60fb      	str	r3, [r7, #12]
                char v = 48 + (((val >> (num_nibbles - 1) * 4)) & 0x0f);
 801177c:	79fa      	ldrb	r2, [r7, #7]
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	3b01      	subs	r3, #1
 8011782:	009b      	lsls	r3, r3, #2
 8011784:	fa42 f303 	asr.w	r3, r2, r3
 8011788:	b2db      	uxtb	r3, r3
 801178a:	f003 030f 	and.w	r3, r3, #15
 801178e:	b2db      	uxtb	r3, r3
 8011790:	3330      	adds	r3, #48	; 0x30
 8011792:	72fb      	strb	r3, [r7, #11]
                if(v > 57) v += 7;
 8011794:	7afb      	ldrb	r3, [r7, #11]
 8011796:	2b39      	cmp	r3, #57	; 0x39
 8011798:	d902      	bls.n	80117a0 <_Z8PrintHexIhEvT_i+0x34>
 801179a:	7afb      	ldrb	r3, [r7, #11]
 801179c:	3307      	adds	r3, #7
 801179e:	72fb      	strb	r3, [r7, #11]
                E_Notifyc(v, lvl);
 80117a0:	7afb      	ldrb	r3, [r7, #11]
 80117a2:	6839      	ldr	r1, [r7, #0]
 80117a4:	4618      	mov	r0, r3
 80117a6:	f003 fdcb 	bl	8015340 <_Z9E_Notifycci>
        do {
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	3b01      	subs	r3, #1
 80117ae:	60fb      	str	r3, [r7, #12]
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	bf14      	ite	ne
 80117b6:	2301      	movne	r3, #1
 80117b8:	2300      	moveq	r3, #0
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d000      	beq.n	80117c2 <_Z8PrintHexIhEvT_i+0x56>
 80117c0:	e7dc      	b.n	801177c <_Z8PrintHexIhEvT_i+0x10>
}
 80117c2:	bf00      	nop
 80117c4:	3710      	adds	r7, #16
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}

080117ca <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 80117ca:	b580      	push	{r7, lr}
 80117cc:	b086      	sub	sp, #24
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	60f8      	str	r0, [r7, #12]
 80117d2:	607a      	str	r2, [r7, #4]
 80117d4:	603b      	str	r3, [r7, #0]
 80117d6:	460b      	mov	r3, r1
 80117d8:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 80117da:	897b      	ldrh	r3, [r7, #10]
 80117dc:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	613b      	str	r3, [r7, #16]

        while(cntdn)
 80117e2:	8afb      	ldrh	r3, [r7, #22]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00f      	beq.n	8011808 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 80117e8:	f107 0216 	add.w	r2, r7, #22
 80117ec:	f107 0310 	add.w	r3, r7, #16
 80117f0:	4619      	mov	r1, r3
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	f000 f82e 	bl	8011854 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 80117f8:	4603      	mov	r3, r0
 80117fa:	f083 0301 	eor.w	r3, r3, #1
 80117fe:	b2db      	uxtb	r3, r3
 8011800:	2b00      	cmp	r3, #0
 8011802:	d100      	bne.n	8011806 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 8011804:	e7ed      	b.n	80117e2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 8011806:	bf00      	nop
}
 8011808:	3718      	adds	r7, #24
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}

0801180e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 801180e:	b580      	push	{r7, lr}
 8011810:	b086      	sub	sp, #24
 8011812:	af00      	add	r7, sp, #0
 8011814:	60f8      	str	r0, [r7, #12]
 8011816:	607a      	str	r2, [r7, #4]
 8011818:	603b      	str	r3, [r7, #0]
 801181a:	460b      	mov	r3, r1
 801181c:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 801181e:	897b      	ldrh	r3, [r7, #10]
 8011820:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	613b      	str	r3, [r7, #16]
        while(cntdn)
 8011826:	8afb      	ldrh	r3, [r7, #22]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d00f      	beq.n	801184c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 801182c:	f107 0216 	add.w	r2, r7, #22
 8011830:	f107 0310 	add.w	r3, r7, #16
 8011834:	4619      	mov	r1, r3
 8011836:	68f8      	ldr	r0, [r7, #12]
 8011838:	f000 f982 	bl	8011b40 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 801183c:	4603      	mov	r3, r0
 801183e:	f083 0301 	eor.w	r3, r3, #1
 8011842:	b2db      	uxtb	r3, r3
 8011844:	2b00      	cmp	r3, #0
 8011846:	d100      	bne.n	801184a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 8011848:	e7ed      	b.n	8011826 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 801184a:	bf00      	nop
}
 801184c:	3718      	adds	r7, #24
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
	...

08011854 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8011854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011856:	b089      	sub	sp, #36	; 0x24
 8011858:	af02      	add	r7, sp, #8
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	3320      	adds	r3, #32
 8011864:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	3320      	adds	r3, #32
 801186a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011872:	2b04      	cmp	r3, #4
 8011874:	f200 815e 	bhi.w	8011b34 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8011878:	a201      	add	r2, pc, #4	; (adr r2, 8011880 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 801187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801187e:	bf00      	nop
 8011880:	08011895 	.word	0x08011895
 8011884:	080118b5 	.word	0x080118b5
 8011888:	080118f7 	.word	0x080118f7
 801188c:	0801190b 	.word	0x0801190b
 8011890:	080119cf 	.word	0x080119cf
                case 0:
                        theBuffer.valueSize = 2;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2202      	movs	r2, #2
 8011898:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f103 0210 	add.w	r2, r3, #16
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	3308      	adds	r3, #8
 80118a4:	4619      	mov	r1, r3
 80118a6:	4610      	mov	r0, r2
 80118a8:	f7fc fca8 	bl	800e1fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	2201      	movs	r2, #1
 80118b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	3310      	adds	r3, #16
 80118b8:	687a      	ldr	r2, [r7, #4]
 80118ba:	68b9      	ldr	r1, [r7, #8]
 80118bc:	4618      	mov	r0, r3
 80118be:	f003 fe17 	bl	80154f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80118c2:	4603      	mov	r3, r0
 80118c4:	f083 0301 	eor.w	r3, r3, #1
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d001      	beq.n	80118d2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 80118ce:	2300      	movs	r3, #0
 80118d0:	e131      	b.n	8011b36 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80118d8:	781a      	ldrb	r2, [r3, #0]
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80118e6:	785a      	ldrb	r2, [r3, #1]
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2202      	movs	r2, #2
 80118f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	3320      	adds	r3, #32
 80118fa:	1c9a      	adds	r2, r3, #2
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	2203      	movs	r2, #3
 8011906:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011910:	3b02      	subs	r3, #2
 8011912:	2b1f      	cmp	r3, #31
 8011914:	d847      	bhi.n	80119a6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8011916:	a201      	add	r2, pc, #4	; (adr r2, 801191c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8011918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801191c:	080119a7 	.word	0x080119a7
 8011920:	080119a7 	.word	0x080119a7
 8011924:	0801199d 	.word	0x0801199d
 8011928:	080119a7 	.word	0x080119a7
 801192c:	080119a7 	.word	0x080119a7
 8011930:	080119a7 	.word	0x080119a7
 8011934:	080119a7 	.word	0x080119a7
 8011938:	080119a7 	.word	0x080119a7
 801193c:	080119a7 	.word	0x080119a7
 8011940:	080119a7 	.word	0x080119a7
 8011944:	080119a7 	.word	0x080119a7
 8011948:	080119a7 	.word	0x080119a7
 801194c:	080119a7 	.word	0x080119a7
 8011950:	080119a7 	.word	0x080119a7
 8011954:	080119a7 	.word	0x080119a7
 8011958:	080119a7 	.word	0x080119a7
 801195c:	080119a7 	.word	0x080119a7
 8011960:	080119a7 	.word	0x080119a7
 8011964:	080119a7 	.word	0x080119a7
 8011968:	080119a7 	.word	0x080119a7
 801196c:	080119a7 	.word	0x080119a7
 8011970:	080119a7 	.word	0x080119a7
 8011974:	080119a7 	.word	0x080119a7
 8011978:	080119a7 	.word	0x080119a7
 801197c:	080119a7 	.word	0x080119a7
 8011980:	080119a7 	.word	0x080119a7
 8011984:	080119a7 	.word	0x080119a7
 8011988:	080119a7 	.word	0x080119a7
 801198c:	080119a7 	.word	0x080119a7
 8011990:	080119a7 	.word	0x080119a7
 8011994:	080119a7 	.word	0x080119a7
 8011998:	080119a7 	.word	0x080119a7
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2200      	movs	r2, #0
 80119a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 80119a4:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80119ac:	3b02      	subs	r3, #2
 80119ae:	b2da      	uxtb	r2, r3
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	f103 0210 	add.w	r2, r3, #16
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	3308      	adds	r3, #8
 80119be:	4619      	mov	r1, r3
 80119c0:	4610      	mov	r0, r2
 80119c2:	f7fc fc1b 	bl	800e1fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	2204      	movs	r2, #4
 80119ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80119d4:	2b05      	cmp	r3, #5
 80119d6:	d055      	beq.n	8011a84 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 80119d8:	2b05      	cmp	r3, #5
 80119da:	f300 8085 	bgt.w	8011ae8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 80119de:	2b02      	cmp	r3, #2
 80119e0:	d002      	beq.n	80119e8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 80119e2:	2b04      	cmp	r3, #4
 80119e4:	d015      	beq.n	8011a12 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80119e6:	e07f      	b.n	8011ae8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	3310      	adds	r3, #16
 80119ec:	687a      	ldr	r2, [r7, #4]
 80119ee:	68b9      	ldr	r1, [r7, #8]
 80119f0:	4618      	mov	r0, r3
 80119f2:	f003 fd7d 	bl	80154f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80119f6:	4603      	mov	r3, r0
 80119f8:	f083 0301 	eor.w	r3, r3, #1
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d001      	beq.n	8011a06 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 8011a02:	2300      	movs	r3, #0
 8011a04:	e097      	b.n	8011b36 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	795a      	ldrb	r2, [r3, #5]
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 8011a10:	e086      	b.n	8011b20 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	3310      	adds	r3, #16
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	68b9      	ldr	r1, [r7, #8]
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f003 fd68 	bl	80154f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011a20:	4603      	mov	r3, r0
 8011a22:	f083 0301 	eor.w	r3, r3, #1
 8011a26:	b2db      	uxtb	r3, r3
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d001      	beq.n	8011a30 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	e082      	b.n	8011b36 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	795b      	ldrb	r3, [r3, #5]
 8011a34:	2be0      	cmp	r3, #224	; 0xe0
 8011a36:	d16c      	bne.n	8011b12 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	799b      	ldrb	r3, [r3, #6]
 8011a3c:	2b01      	cmp	r3, #1
 8011a3e:	d16a      	bne.n	8011b16 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d004      	beq.n	8011a54 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	79db      	ldrb	r3, [r3, #7]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d104      	bne.n	8011a5c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 8011a52:	e065      	b.n	8011b20 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	79db      	ldrb	r3, [r3, #7]
 8011a58:	2b01      	cmp	r3, #1
 8011a5a:	d15e      	bne.n	8011b1a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	789a      	ldrb	r2, [r3, #2]
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	78da      	ldrb	r2, [r3, #3]
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	79da      	ldrb	r2, [r3, #7]
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 8011a82:	e04d      	b.n	8011b20 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	3310      	adds	r3, #16
 8011a88:	687a      	ldr	r2, [r7, #4]
 8011a8a:	68b9      	ldr	r1, [r7, #8]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f003 fd2f 	bl	80154f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011a92:	4603      	mov	r3, r0
 8011a94:	f083 0301 	eor.w	r3, r3, #1
 8011a98:	b2db      	uxtb	r3, r3
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d001      	beq.n	8011aa2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	e049      	b.n	8011b36 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d038      	beq.n	8011b1e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d034      	beq.n	8011b1e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	6858      	ldr	r0, [r3, #4]
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	685b      	ldr	r3, [r3, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	681c      	ldr	r4, [r3, #0]
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011ad8:	68fa      	ldr	r2, [r7, #12]
 8011ada:	3220      	adds	r2, #32
 8011adc:	9201      	str	r2, [sp, #4]
 8011ade:	9300      	str	r3, [sp, #0]
 8011ae0:	4633      	mov	r3, r6
 8011ae2:	462a      	mov	r2, r5
 8011ae4:	47a0      	blx	r4
                                        break;
 8011ae6:	e01a      	b.n	8011b1e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	f103 0018 	add.w	r0, r3, #24
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	3b02      	subs	r3, #2
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	68b9      	ldr	r1, [r7, #8]
 8011afe:	f7fc fbbc 	bl	800e27a <_ZN11ByteSkipper4SkipEPPhPtt>
 8011b02:	4603      	mov	r3, r0
 8011b04:	f083 0301 	eor.w	r3, r3, #1
 8011b08:	b2db      	uxtb	r3, r3
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d008      	beq.n	8011b20 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	e011      	b.n	8011b36 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 8011b12:	bf00      	nop
 8011b14:	e004      	b.n	8011b20 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8011b16:	bf00      	nop
 8011b18:	e002      	b.n	8011b20 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 8011b1a:	bf00      	nop
 8011b1c:	e000      	b.n	8011b20 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 8011b1e:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	f103 0220 	add.w	r2, r3, #32
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 8011b34:	2301      	movs	r3, #1
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	371c      	adds	r7, #28
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b3e:	bf00      	nop

08011b40 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8011b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b42:	b089      	sub	sp, #36	; 0x24
 8011b44:	af02      	add	r7, sp, #8
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	60b9      	str	r1, [r7, #8]
 8011b4a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	3320      	adds	r3, #32
 8011b50:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	3320      	adds	r3, #32
 8011b56:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b5e:	2b04      	cmp	r3, #4
 8011b60:	f200 815e 	bhi.w	8011e20 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8011b64:	a201      	add	r2, pc, #4	; (adr r2, 8011b6c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8011b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b6a:	bf00      	nop
 8011b6c:	08011b81 	.word	0x08011b81
 8011b70:	08011ba1 	.word	0x08011ba1
 8011b74:	08011be3 	.word	0x08011be3
 8011b78:	08011bf7 	.word	0x08011bf7
 8011b7c:	08011cbb 	.word	0x08011cbb
                        theBuffer.valueSize = 2;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	2202      	movs	r2, #2
 8011b84:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	f103 0210 	add.w	r2, r3, #16
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	3308      	adds	r3, #8
 8011b90:	4619      	mov	r1, r3
 8011b92:	4610      	mov	r0, r2
 8011b94:	f7fc fb32 	bl	800e1fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	3310      	adds	r3, #16
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	68b9      	ldr	r1, [r7, #8]
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f003 fca1 	bl	80154f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	f083 0301 	eor.w	r3, r3, #1
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d001      	beq.n	8011bbe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	e131      	b.n	8011e22 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011bc4:	781a      	ldrb	r2, [r3, #0]
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011bd2:	785a      	ldrb	r2, [r3, #1]
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	2202      	movs	r2, #2
 8011bde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	3320      	adds	r3, #32
 8011be6:	1c9a      	adds	r2, r3, #2
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2203      	movs	r2, #3
 8011bf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011bfc:	3b02      	subs	r3, #2
 8011bfe:	2b1f      	cmp	r3, #31
 8011c00:	d847      	bhi.n	8011c92 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8011c02:	a201      	add	r2, pc, #4	; (adr r2, 8011c08 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8011c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c08:	08011c93 	.word	0x08011c93
 8011c0c:	08011c93 	.word	0x08011c93
 8011c10:	08011c89 	.word	0x08011c89
 8011c14:	08011c93 	.word	0x08011c93
 8011c18:	08011c93 	.word	0x08011c93
 8011c1c:	08011c93 	.word	0x08011c93
 8011c20:	08011c93 	.word	0x08011c93
 8011c24:	08011c93 	.word	0x08011c93
 8011c28:	08011c93 	.word	0x08011c93
 8011c2c:	08011c93 	.word	0x08011c93
 8011c30:	08011c93 	.word	0x08011c93
 8011c34:	08011c93 	.word	0x08011c93
 8011c38:	08011c93 	.word	0x08011c93
 8011c3c:	08011c93 	.word	0x08011c93
 8011c40:	08011c93 	.word	0x08011c93
 8011c44:	08011c93 	.word	0x08011c93
 8011c48:	08011c93 	.word	0x08011c93
 8011c4c:	08011c93 	.word	0x08011c93
 8011c50:	08011c93 	.word	0x08011c93
 8011c54:	08011c93 	.word	0x08011c93
 8011c58:	08011c93 	.word	0x08011c93
 8011c5c:	08011c93 	.word	0x08011c93
 8011c60:	08011c93 	.word	0x08011c93
 8011c64:	08011c93 	.word	0x08011c93
 8011c68:	08011c93 	.word	0x08011c93
 8011c6c:	08011c93 	.word	0x08011c93
 8011c70:	08011c93 	.word	0x08011c93
 8011c74:	08011c93 	.word	0x08011c93
 8011c78:	08011c93 	.word	0x08011c93
 8011c7c:	08011c93 	.word	0x08011c93
 8011c80:	08011c93 	.word	0x08011c93
 8011c84:	08011c93 	.word	0x08011c93
                                        isGoodInterface = false;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8011c90:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011c98:	3b02      	subs	r3, #2
 8011c9a:	b2da      	uxtb	r2, r3
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f103 0210 	add.w	r2, r3, #16
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	3308      	adds	r3, #8
 8011caa:	4619      	mov	r1, r3
 8011cac:	4610      	mov	r0, r2
 8011cae:	f7fc faa5 	bl	800e1fc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2204      	movs	r2, #4
 8011cb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011cc0:	2b05      	cmp	r3, #5
 8011cc2:	d055      	beq.n	8011d70 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 8011cc4:	2b05      	cmp	r3, #5
 8011cc6:	f300 8085 	bgt.w	8011dd4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 8011cca:	2b02      	cmp	r3, #2
 8011ccc:	d002      	beq.n	8011cd4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 8011cce:	2b04      	cmp	r3, #4
 8011cd0:	d015      	beq.n	8011cfe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 8011cd2:	e07f      	b.n	8011dd4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	3310      	adds	r3, #16
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	68b9      	ldr	r1, [r7, #8]
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f003 fc07 	bl	80154f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	f083 0301 	eor.w	r3, r3, #1
 8011ce8:	b2db      	uxtb	r3, r3
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d001      	beq.n	8011cf2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	e097      	b.n	8011e22 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	795a      	ldrb	r2, [r3, #5]
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 8011cfc:	e086      	b.n	8011e0c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3310      	adds	r3, #16
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	68b9      	ldr	r1, [r7, #8]
 8011d06:	4618      	mov	r0, r3
 8011d08:	f003 fbf2 	bl	80154f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	f083 0301 	eor.w	r3, r3, #1
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d001      	beq.n	8011d1c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	e082      	b.n	8011e22 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	795b      	ldrb	r3, [r3, #5]
 8011d20:	2bff      	cmp	r3, #255	; 0xff
 8011d22:	d16c      	bne.n	8011dfe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	799b      	ldrb	r3, [r3, #6]
 8011d28:	2b01      	cmp	r3, #1
 8011d2a:	d16a      	bne.n	8011e02 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d004      	beq.n	8011d40 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	79db      	ldrb	r3, [r3, #7]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d104      	bne.n	8011d48 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 8011d3e:	e065      	b.n	8011e0c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	79db      	ldrb	r3, [r3, #7]
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	d15e      	bne.n	8011e06 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	2201      	movs	r2, #1
 8011d4c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	789a      	ldrb	r2, [r3, #2]
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	78da      	ldrb	r2, [r3, #3]
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	79da      	ldrb	r2, [r3, #7]
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 8011d6e:	e04d      	b.n	8011e0c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	3310      	adds	r3, #16
 8011d74:	687a      	ldr	r2, [r7, #4]
 8011d76:	68b9      	ldr	r1, [r7, #8]
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f003 fbb9 	bl	80154f0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	f083 0301 	eor.w	r3, r3, #1
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d001      	beq.n	8011d8e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	e049      	b.n	8011e22 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d038      	beq.n	8011e0a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d034      	beq.n	8011e0a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	6858      	ldr	r0, [r3, #4]
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	681c      	ldr	r4, [r3, #0]
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011dc4:	68fa      	ldr	r2, [r7, #12]
 8011dc6:	3220      	adds	r2, #32
 8011dc8:	9201      	str	r2, [sp, #4]
 8011dca:	9300      	str	r3, [sp, #0]
 8011dcc:	4633      	mov	r3, r6
 8011dce:	462a      	mov	r2, r5
 8011dd0:	47a0      	blx	r4
                                        break;
 8011dd2:	e01a      	b.n	8011e0a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f103 0018 	add.w	r0, r3, #24
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	3b02      	subs	r3, #2
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	68b9      	ldr	r1, [r7, #8]
 8011dea:	f7fc fa46 	bl	800e27a <_ZN11ByteSkipper4SkipEPPhPtt>
 8011dee:	4603      	mov	r3, r0
 8011df0:	f083 0301 	eor.w	r3, r3, #1
 8011df4:	b2db      	uxtb	r3, r3
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d008      	beq.n	8011e0c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	e011      	b.n	8011e22 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 8011dfe:	bf00      	nop
 8011e00:	e004      	b.n	8011e0c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8011e02:	bf00      	nop
 8011e04:	e002      	b.n	8011e0c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 8011e06:	bf00      	nop
 8011e08:	e000      	b.n	8011e0c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 8011e0a:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f103 0220 	add.w	r2, r3, #32
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 8011e20:	2301      	movs	r3, #1
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	371c      	adds	r7, #28
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e2a:	bf00      	nop

08011e2c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
         */
 8011e2c:	b480      	push	{r7}
 8011e2e:	b085      	sub	sp, #20
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	6039      	str	r1, [r7, #0]
        int8_t registerBluetoothService(BluetoothService *pService) {
 8011e36:	2300      	movs	r3, #0
 8011e38:	73fb      	strb	r3, [r7, #15]
 8011e3a:	7bfb      	ldrb	r3, [r7, #15]
 8011e3c:	2b03      	cmp	r3, #3
 8011e3e:	d815      	bhi.n	8011e6c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8011e40:	7bfb      	ldrb	r3, [r7, #15]
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	3318      	adds	r3, #24
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	4413      	add	r3, r2
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d109      	bne.n	8011e64 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                        if(!btService[i]) {
 8011e50:	7bfb      	ldrb	r3, [r7, #15]
 8011e52:	687a      	ldr	r2, [r7, #4]
 8011e54:	3318      	adds	r3, #24
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	4413      	add	r3, r2
 8011e5a:	683a      	ldr	r2, [r7, #0]
 8011e5c:	605a      	str	r2, [r3, #4]
                                btService[i] = pService;
 8011e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e62:	e005      	b.n	8011e70 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
        int8_t registerBluetoothService(BluetoothService *pService) {
 8011e64:	7bfb      	ldrb	r3, [r7, #15]
 8011e66:	3301      	adds	r3, #1
 8011e68:	73fb      	strb	r3, [r7, #15]
 8011e6a:	e7e6      	b.n	8011e3a <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                }
 8011e6c:	f04f 33ff 	mov.w	r3, #4294967295
                return -1; // Error registering BluetoothService
 8011e70:	4618      	mov	r0, r3
 8011e72:	3714      	adds	r7, #20
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr

08011e7c <_ZN16BluetoothServiceC1EP3BTD>:
        uint8_t hcibuf[BULK_MAXPKTSIZE]; // General purpose buffer for HCI data
        uint8_t l2capinbuf[BULK_MAXPKTSIZE]; // General purpose buffer for L2CAP in data
        uint8_t l2capoutbuf[14]; // General purpose buffer for L2CAP out data

        /* State machines */
        void HCI_event_task(); // Poll the HCI event pipe
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	6039      	str	r1, [r7, #0]
 8011e86:	4a0a      	ldr	r2, [pc, #40]	; (8011eb0 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	601a      	str	r2, [r3, #0]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	683a      	ldr	r2, [r7, #0]
 8011e90:	609a      	str	r2, [r3, #8]
        void HCI_task(); // HCI state machine
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	689b      	ldr	r3, [r3, #8]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d005      	beq.n	8011ea6 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
        void ACL_event_task(); // ACL input pipe
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	689b      	ldr	r3, [r3, #8]
 8011e9e:	6879      	ldr	r1, [r7, #4]
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7ff ffc3 	bl	8011e2c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>

 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3708      	adds	r7, #8
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	08017798 	.word	0x08017798

08011eb4 <_ZN16BluetoothService14checkHciHandleEPht>:
        /**
         * Used to call your own function when the device is successfully initialized.
         * @param funcOnInit Function to call.
         */
        void attachOnInit(void (*funcOnInit)(void)) {
                pFuncOnInit = funcOnInit; // TODO: This really belong in a class of it's own as it is repeated several times
 8011eb4:	b480      	push	{r7}
 8011eb6:	b085      	sub	sp, #20
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	60b9      	str	r1, [r7, #8]
 8011ebe:	4613      	mov	r3, r2
 8011ec0:	80fb      	strh	r3, [r7, #6]
        };
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	781b      	ldrb	r3, [r3, #0]
 8011ec6:	461a      	mov	r2, r3
 8011ec8:	88fb      	ldrh	r3, [r7, #6]
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d10b      	bne.n	8011ee8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	781b      	ldrb	r3, [r3, #0]
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	88fb      	ldrh	r3, [r7, #6]
 8011eda:	121b      	asrs	r3, r3, #8
 8011edc:	f043 0320 	orr.w	r3, r3, #32
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d101      	bne.n	8011ee8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	e000      	b.n	8011eea <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 8011ee8:	2300      	movs	r3, #0

 8011eea:	4618      	mov	r0, r3
 8011eec:	3714      	adds	r7, #20
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr

08011ef6 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8011ef6:	b480      	push	{r7}
 8011ef8:	b085      	sub	sp, #20
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	60f8      	str	r0, [r7, #12]
 8011efe:	460b      	mov	r3, r1
 8011f00:	607a      	str	r2, [r7, #4]
 8011f02:	72fb      	strb	r3, [r7, #11]
                return;
 8011f04:	bf00      	nop
        };
 8011f06:	3714      	adds	r7, #20
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0e:	4770      	bx	lr

08011f10 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 8011f10:	b480      	push	{r7}
 8011f12:	b083      	sub	sp, #12
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
                return;
 8011f18:	bf00      	nop
        };
 8011f1a:	370c      	adds	r7, #12
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr

08011f24 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 8011f24:	b480      	push	{r7}
 8011f26:	b083      	sub	sp, #12
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
                return;
 8011f2c:	bf00      	nop
        }
 8011f2e:	370c      	adds	r7, #12
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr

08011f38 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b086      	sub	sp, #24
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	60f8      	str	r0, [r7, #12]
 8011f40:	60b9      	str	r1, [r7, #8]
 8011f42:	603b      	str	r3, [r7, #0]
 8011f44:	4613      	mov	r3, r2
 8011f46:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	68b9      	ldr	r1, [r7, #8]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7ff ff95 	bl	8011e7c <_ZN16BluetoothServiceC1EP3BTD>
 8011f52:	4a1f      	ldr	r2, [pc, #124]	; (8011fd0 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	601a      	str	r2, [r3, #0]
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8011f60:	2300      	movs	r3, #0
 8011f62:	75fb      	strb	r3, [r7, #23]
 8011f64:	7dfb      	ldrb	r3, [r7, #23]
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d809      	bhi.n	8011f7e <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 8011f6a:	7dfa      	ldrb	r2, [r7, #23]
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	3208      	adds	r2, #8
 8011f70:	2100      	movs	r1, #0
 8011f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8011f76:	7dfb      	ldrb	r3, [r7, #23]
 8011f78:	3301      	adds	r3, #1
 8011f7a:	75fb      	strb	r3, [r7, #23]
 8011f7c:	e7f2      	b.n	8011f64 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	689b      	ldr	r3, [r3, #8]
 8011f82:	79fa      	ldrb	r2, [r7, #7]
 8011f84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	689b      	ldr	r3, [r3, #8]
 8011f8c:	683a      	ldr	r2, [r7, #0]
 8011f8e:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2250      	movs	r2, #80	; 0x50
 8011f94:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2270      	movs	r2, #112	; 0x70
 8011fa4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	2200      	movs	r2, #0
 8011fac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	2271      	movs	r2, #113	; 0x71
 8011fb4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 8011fc0:	68f8      	ldr	r0, [r7, #12]
 8011fc2:	f000 f807 	bl	8011fd4 <_ZN5BTHID5ResetEv>
}
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3718      	adds	r7, #24
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}
 8011fd0:	0801776c 	.word	0x0801776c

08011fd4 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b082      	sub	sp, #8
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
        connected = false;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2200      	movs	r2, #0
 8011fee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	220a      	movs	r2, #10
 8011ffc:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2200      	movs	r2, #0
 8012002:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	3320      	adds	r3, #32
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	4798      	blx	r3
}
 8012012:	bf00      	nop
 8012014:	3708      	adds	r7, #8
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}

0801201a <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 801201a:	b590      	push	{r4, r7, lr}
 801201c:	b085      	sub	sp, #20
 801201e:	af02      	add	r7, sp, #8
 8012020:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8012028:	2b00      	cmp	r3, #0
 801202a:	d014      	beq.n	8012056 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6898      	ldr	r0, [r3, #8]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	8999      	ldrh	r1, [r3, #12]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	7d1b      	ldrb	r3, [r3, #20]
 8012038:	3301      	adds	r3, #1
 801203a:	b2da      	uxtb	r2, r3
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	751a      	strb	r2, [r3, #20]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	7d1a      	ldrb	r2, [r3, #20]
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f103 041b 	add.w	r4, r3, #27
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	336f      	adds	r3, #111	; 0x6f
 801204e:	9300      	str	r3, [sp, #0]
 8012050:	4623      	mov	r3, r4
 8012052:	f7ff f986 	bl	8011362 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6898      	ldr	r0, [r3, #8]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	8999      	ldrh	r1, [r3, #12]
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	7d1b      	ldrb	r3, [r3, #20]
 8012062:	3301      	adds	r3, #1
 8012064:	b2da      	uxtb	r2, r3
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	751a      	strb	r2, [r3, #20]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	7d1a      	ldrb	r2, [r3, #20]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f103 0418 	add.w	r4, r3, #24
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	336d      	adds	r3, #109	; 0x6d
 8012078:	9300      	str	r3, [sp, #0]
 801207a:	4623      	mov	r3, r4
 801207c:	f7ff f971 	bl	8011362 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	3308      	adds	r3, #8
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	220e      	movs	r2, #14
 8012090:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2209      	movs	r2, #9
 8012096:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 801209a:	bf00      	nop
 801209c:	370c      	adds	r7, #12
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd90      	pop	{r4, r7, pc}
	...

080120a4 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 80120a4:	b590      	push	{r4, r7, lr}
 80120a6:	b087      	sub	sp, #28
 80120a8:	af02      	add	r7, sp, #8
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
        if(!connected) {
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	7d5b      	ldrb	r3, [r3, #21]
 80120b2:	f083 0301 	eor.w	r3, r3, #1
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d023      	beq.n	8012104 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	3308      	adds	r3, #8
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	2b02      	cmp	r3, #2
 80120c4:	d11e      	bne.n	8012104 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	330c      	adds	r3, #12
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	461a      	mov	r2, r3
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	330d      	adds	r3, #13
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	021b      	lsls	r3, r3, #8
 80120d6:	4313      	orrs	r3, r2
 80120d8:	2b01      	cmp	r3, #1
 80120da:	d113      	bne.n	8012104 <_ZN5BTHID7ACLDataEPh+0x60>
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	689b      	ldr	r3, [r3, #8]
 80120e0:	7a9b      	ldrb	r3, [r3, #10]
 80120e2:	f083 0301 	eor.w	r3, r3, #1
 80120e6:	b2db      	uxtb	r3, r3
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d00b      	beq.n	8012104 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	689b      	ldr	r3, [r3, #8]
 80120f0:	2201      	movs	r2, #1
 80120f2:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	689b      	ldr	r3, [r3, #8]
 80120f8:	8b5a      	ldrh	r2, [r3, #26]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	220a      	movs	r2, #10
 8012102:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	7a5b      	ldrb	r3, [r3, #9]
 801210a:	f083 0301 	eor.w	r3, r3, #1
 801210e:	b2db      	uxtb	r3, r3
 8012110:	2b00      	cmp	r3, #0
 8012112:	d03a      	beq.n	801218a <_ZN5BTHID7ACLDataEPh+0xe6>
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	689b      	ldr	r3, [r3, #8]
 8012118:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801211c:	2b00      	cmp	r3, #0
 801211e:	d034      	beq.n	801218a <_ZN5BTHID7ACLDataEPh+0xe6>
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	7d5b      	ldrb	r3, [r3, #21]
 8012124:	f083 0301 	eor.w	r3, r3, #1
 8012128:	b2db      	uxtb	r3, r3
 801212a:	2b00      	cmp	r3, #0
 801212c:	d02d      	beq.n	801218a <_ZN5BTHID7ACLDataEPh+0xe6>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8012134:	f083 0301 	eor.w	r3, r3, #1
 8012138:	b2db      	uxtb	r3, r3
 801213a:	2b00      	cmp	r3, #0
 801213c:	d025      	beq.n	801218a <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	3308      	adds	r3, #8
 8012142:	781b      	ldrb	r3, [r3, #0]
 8012144:	2b02      	cmp	r3, #2
 8012146:	d120      	bne.n	801218a <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	330c      	adds	r3, #12
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	461a      	mov	r2, r3
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	330d      	adds	r3, #13
 8012154:	781b      	ldrb	r3, [r3, #0]
 8012156:	021b      	lsls	r3, r3, #8
 8012158:	4313      	orrs	r3, r2
 801215a:	2b11      	cmp	r3, #17
 801215c:	d115      	bne.n	801218a <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	689b      	ldr	r3, [r3, #8]
 8012162:	2200      	movs	r2, #0
 8012164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	689b      	ldr	r3, [r3, #8]
 801216c:	2201      	movs	r2, #1
 801216e:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2201      	movs	r2, #1
 8012174:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	689b      	ldr	r3, [r3, #8]
 801217c:	8b5a      	ldrh	r2, [r3, #26]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2200      	movs	r2, #0
 8012186:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	899b      	ldrh	r3, [r3, #12]
 8012190:	461a      	mov	r2, r3
 8012192:	6839      	ldr	r1, [r7, #0]
 8012194:	f7ff fe8e 	bl	8011eb4 <_ZN16BluetoothService14checkHciHandleEPht>
 8012198:	4603      	mov	r3, r0
 801219a:	2b00      	cmp	r3, #0
 801219c:	f000 8440 	beq.w	8012a20 <_ZN5BTHID7ACLDataEPh+0x97c>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	3306      	adds	r3, #6
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	461a      	mov	r2, r3
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	3307      	adds	r3, #7
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	021b      	lsls	r3, r3, #8
 80121b0:	4313      	orrs	r3, r2
 80121b2:	2b01      	cmp	r3, #1
 80121b4:	f040 82f8 	bne.w	80127a8 <_ZN5BTHID7ACLDataEPh+0x704>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	3308      	adds	r3, #8
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	2b01      	cmp	r3, #1
 80121c0:	d142      	bne.n	8012248 <_ZN5BTHID7ACLDataEPh+0x1a4>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nL2CAP Command Rejected - Reason: "), 0x80);
 80121c2:	2180      	movs	r1, #128	; 0x80
 80121c4:	489c      	ldr	r0, [pc, #624]	; (8012438 <_ZN5BTHID7ACLDataEPh+0x394>)
 80121c6:	f003 f8d5 	bl	8015374 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[13], 0x80);
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	330d      	adds	r3, #13
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	2180      	movs	r1, #128	; 0x80
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7ff fa0f 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 80121d8:	2180      	movs	r1, #128	; 0x80
 80121da:	4898      	ldr	r0, [pc, #608]	; (801243c <_ZN5BTHID7ACLDataEPh+0x398>)
 80121dc:	f003 f8ca 	bl	8015374 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[12], 0x80);
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	330c      	adds	r3, #12
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	2180      	movs	r1, #128	; 0x80
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7ff fa04 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 80121ee:	2180      	movs	r1, #128	; 0x80
 80121f0:	4892      	ldr	r0, [pc, #584]	; (801243c <_ZN5BTHID7ACLDataEPh+0x398>)
 80121f2:	f003 f8bf 	bl	8015374 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[17], 0x80);
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	3311      	adds	r3, #17
 80121fa:	781b      	ldrb	r3, [r3, #0]
 80121fc:	2180      	movs	r1, #128	; 0x80
 80121fe:	4618      	mov	r0, r3
 8012200:	f7ff f9f9 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 8012204:	2180      	movs	r1, #128	; 0x80
 8012206:	488d      	ldr	r0, [pc, #564]	; (801243c <_ZN5BTHID7ACLDataEPh+0x398>)
 8012208:	f003 f8b4 	bl	8015374 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[16], 0x80);
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	3310      	adds	r3, #16
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	2180      	movs	r1, #128	; 0x80
 8012214:	4618      	mov	r0, r3
 8012216:	f7ff f9ee 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 801221a:	2180      	movs	r1, #128	; 0x80
 801221c:	4887      	ldr	r0, [pc, #540]	; (801243c <_ZN5BTHID7ACLDataEPh+0x398>)
 801221e:	f003 f8a9 	bl	8015374 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	330f      	adds	r3, #15
 8012226:	781b      	ldrb	r3, [r3, #0]
 8012228:	2180      	movs	r1, #128	; 0x80
 801222a:	4618      	mov	r0, r3
 801222c:	f7ff f9e3 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 8012230:	2180      	movs	r1, #128	; 0x80
 8012232:	4882      	ldr	r0, [pc, #520]	; (801243c <_ZN5BTHID7ACLDataEPh+0x398>)
 8012234:	f003 f89e 	bl	8015374 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	330e      	adds	r3, #14
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	2180      	movs	r1, #128	; 0x80
 8012240:	4618      	mov	r0, r3
 8012242:	f7ff f9d8 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
 8012246:	e3e5      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	3308      	adds	r3, #8
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	2b03      	cmp	r3, #3
 8012250:	f040 8091 	bne.w	8012376 <_ZN5BTHID7ACLDataEPh+0x2d2>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	3310      	adds	r3, #16
 8012258:	781b      	ldrb	r3, [r3, #0]
 801225a:	461a      	mov	r2, r3
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	3311      	adds	r3, #17
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	021b      	lsls	r3, r3, #8
 8012264:	4313      	orrs	r3, r2
 8012266:	2b00      	cmp	r3, #0
 8012268:	f040 83d4 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	3312      	adds	r3, #18
 8012270:	781b      	ldrb	r3, [r3, #0]
 8012272:	461a      	mov	r2, r3
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	3313      	adds	r3, #19
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	021b      	lsls	r3, r3, #8
 801227c:	4313      	orrs	r3, r2
 801227e:	2b00      	cmp	r3, #0
 8012280:	f040 83c8 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	330e      	adds	r3, #14
 8012288:	781a      	ldrb	r2, [r3, #0]
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012290:	429a      	cmp	r2, r3
 8012292:	d128      	bne.n	80122e6 <_ZN5BTHID7ACLDataEPh+0x242>
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	330f      	adds	r3, #15
 8012298:	781a      	ldrb	r2, [r3, #0]
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80122a0:	429a      	cmp	r2, r3
 80122a2:	d120      	bne.n	80122e6 <_ZN5BTHID7ACLDataEPh+0x242>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	7a5a      	ldrb	r2, [r3, #9]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	7b1a      	ldrb	r2, [r3, #12]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	7b5a      	ldrb	r2, [r3, #13]
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
 80122bc:	2180      	movs	r1, #128	; 0x80
 80122be:	4860      	ldr	r0, [pc, #384]	; (8012440 <_ZN5BTHID7ACLDataEPh+0x39c>)
 80122c0:	f003 f858 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                                identifier++;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	7d1b      	ldrb	r3, [r3, #20]
 80122c8:	3301      	adds	r3, #1
 80122ca:	b2da      	uxtb	r2, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6898      	ldr	r0, [r3, #8]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	8999      	ldrh	r1, [r3, #12]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	7d1a      	ldrb	r2, [r3, #20]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	331b      	adds	r3, #27
 80122e0:	f7fe ffa1 	bl	8011226 <_ZN3BTD20l2cap_config_requestEthPh>
 80122e4:	e396      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	330e      	adds	r3, #14
 80122ea:	781a      	ldrb	r2, [r3, #0]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d11a      	bne.n	801232c <_ZN5BTHID7ACLDataEPh+0x288>
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	330f      	adds	r3, #15
 80122fa:	781a      	ldrb	r2, [r3, #0]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8012302:	429a      	cmp	r2, r3
 8012304:	d112      	bne.n	801232c <_ZN5BTHID7ACLDataEPh+0x288>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	7a5a      	ldrb	r2, [r3, #9]
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	7b1a      	ldrb	r2, [r3, #12]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	7b5a      	ldrb	r2, [r3, #13]
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	691b      	ldr	r3, [r3, #16]
 8012322:	f043 0204 	orr.w	r2, r3, #4
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	611a      	str	r2, [r3, #16]
 801232a:	e373      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	330e      	adds	r3, #14
 8012330:	781a      	ldrb	r2, [r3, #0]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012338:	429a      	cmp	r2, r3
 801233a:	f040 836b 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	330f      	adds	r3, #15
 8012342:	781a      	ldrb	r2, [r3, #0]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 801234a:	429a      	cmp	r2, r3
 801234c:	f040 8362 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	7a5a      	ldrb	r2, [r3, #9]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	7b1a      	ldrb	r2, [r3, #12]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	7b5a      	ldrb	r2, [r3, #13]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	691b      	ldr	r3, [r3, #16]
 801236c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	611a      	str	r2, [r3, #16]
 8012374:	e34e      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	3308      	adds	r3, #8
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	2b02      	cmp	r3, #2
 801237e:	d161      	bne.n	8012444 <_ZN5BTHID7ACLDataEPh+0x3a0>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	330c      	adds	r3, #12
 8012384:	781b      	ldrb	r3, [r3, #0]
 8012386:	461a      	mov	r2, r3
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	330d      	adds	r3, #13
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	021b      	lsls	r3, r3, #8
 8012390:	4313      	orrs	r3, r2
 8012392:	2b01      	cmp	r3, #1
 8012394:	d112      	bne.n	80123bc <_ZN5BTHID7ACLDataEPh+0x318>
                                        identifier = l2capinbuf[9];
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	7a5a      	ldrb	r2, [r3, #9]
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	7b9a      	ldrb	r2, [r3, #14]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	7bda      	ldrb	r2, [r3, #15]
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	691b      	ldr	r3, [r3, #16]
 80123b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	611a      	str	r2, [r3, #16]
 80123ba:	e32b      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	330c      	adds	r3, #12
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	461a      	mov	r2, r3
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	330d      	adds	r3, #13
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	021b      	lsls	r3, r3, #8
 80123cc:	4313      	orrs	r3, r2
 80123ce:	2b11      	cmp	r3, #17
 80123d0:	d112      	bne.n	80123f8 <_ZN5BTHID7ACLDataEPh+0x354>
                                        identifier = l2capinbuf[9];
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	7a5a      	ldrb	r2, [r3, #9]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	7b9a      	ldrb	r2, [r3, #14]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	7bda      	ldrb	r2, [r3, #15]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	691b      	ldr	r3, [r3, #16]
 80123ee:	f043 0201 	orr.w	r2, r3, #1
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	611a      	str	r2, [r3, #16]
 80123f6:	e30d      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	330c      	adds	r3, #12
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	461a      	mov	r2, r3
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	330d      	adds	r3, #13
 8012404:	781b      	ldrb	r3, [r3, #0]
 8012406:	021b      	lsls	r3, r3, #8
 8012408:	4313      	orrs	r3, r2
 801240a:	2b13      	cmp	r3, #19
 801240c:	f040 8302 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                        identifier = l2capinbuf[9];
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	7a5a      	ldrb	r2, [r3, #9]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	7b9a      	ldrb	r2, [r3, #14]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	7bda      	ldrb	r2, [r3, #15]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	691b      	ldr	r3, [r3, #16]
 801242c:	f043 0210 	orr.w	r2, r3, #16
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	611a      	str	r2, [r3, #16]
 8012434:	e2ee      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
 8012436:	bf00      	nop
 8012438:	08016344 	.word	0x08016344
 801243c:	08016368 	.word	0x08016368
 8012440:	0801636c 	.word	0x0801636c
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	3308      	adds	r3, #8
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	2b05      	cmp	r3, #5
 801244c:	d15e      	bne.n	801250c <_ZN5BTHID7ACLDataEPh+0x468>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	3310      	adds	r3, #16
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	461a      	mov	r2, r3
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	3311      	adds	r3, #17
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	021b      	lsls	r3, r3, #8
 801245e:	4313      	orrs	r3, r2
 8012460:	2b00      	cmp	r3, #0
 8012462:	f040 82d7 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	330c      	adds	r3, #12
 801246a:	781a      	ldrb	r2, [r3, #0]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012472:	429a      	cmp	r2, r3
 8012474:	d112      	bne.n	801249c <_ZN5BTHID7ACLDataEPh+0x3f8>
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	330d      	adds	r3, #13
 801247a:	781a      	ldrb	r2, [r3, #0]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012482:	429a      	cmp	r2, r3
 8012484:	d10a      	bne.n	801249c <_ZN5BTHID7ACLDataEPh+0x3f8>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	7a5a      	ldrb	r2, [r3, #9]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	691b      	ldr	r3, [r3, #16]
 8012492:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	611a      	str	r2, [r3, #16]
 801249a:	e2bb      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	330c      	adds	r3, #12
 80124a0:	781a      	ldrb	r2, [r3, #0]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d112      	bne.n	80124d2 <_ZN5BTHID7ACLDataEPh+0x42e>
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	330d      	adds	r3, #13
 80124b0:	781a      	ldrb	r2, [r3, #0]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d10a      	bne.n	80124d2 <_ZN5BTHID7ACLDataEPh+0x42e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	7a5a      	ldrb	r2, [r3, #9]
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	691b      	ldr	r3, [r3, #16]
 80124c8:	f043 0202 	orr.w	r2, r3, #2
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	611a      	str	r2, [r3, #16]
 80124d0:	e2a0      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	330c      	adds	r3, #12
 80124d6:	781a      	ldrb	r2, [r3, #0]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80124de:	429a      	cmp	r2, r3
 80124e0:	f040 8298 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	330d      	adds	r3, #13
 80124e8:	781a      	ldrb	r2, [r3, #0]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80124f0:	429a      	cmp	r2, r3
 80124f2:	f040 828f 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	7a5a      	ldrb	r2, [r3, #9]
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	691b      	ldr	r3, [r3, #16]
 8012502:	f043 0220 	orr.w	r2, r3, #32
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	611a      	str	r2, [r3, #16]
 801250a:	e283      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	3308      	adds	r3, #8
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	2b04      	cmp	r3, #4
 8012514:	d155      	bne.n	80125c2 <_ZN5BTHID7ACLDataEPh+0x51e>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	330c      	adds	r3, #12
 801251a:	781a      	ldrb	r2, [r3, #0]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012522:	429a      	cmp	r2, r3
 8012524:	d113      	bne.n	801254e <_ZN5BTHID7ACLDataEPh+0x4aa>
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	330d      	adds	r3, #13
 801252a:	781a      	ldrb	r2, [r3, #0]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012532:	429a      	cmp	r2, r3
 8012534:	d10b      	bne.n	801254e <_ZN5BTHID7ACLDataEPh+0x4aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6898      	ldr	r0, [r3, #8]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	8999      	ldrh	r1, [r3, #12]
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	3309      	adds	r3, #9
 8012542:	781a      	ldrb	r2, [r3, #0]
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	331b      	adds	r3, #27
 8012548:	f7fe feb8 	bl	80112bc <_ZN3BTD21l2cap_config_responseEthPh>
 801254c:	e262      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	330c      	adds	r3, #12
 8012552:	781a      	ldrb	r2, [r3, #0]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801255a:	429a      	cmp	r2, r3
 801255c:	d113      	bne.n	8012586 <_ZN5BTHID7ACLDataEPh+0x4e2>
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	330d      	adds	r3, #13
 8012562:	781a      	ldrb	r2, [r3, #0]
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801256a:	429a      	cmp	r2, r3
 801256c:	d10b      	bne.n	8012586 <_ZN5BTHID7ACLDataEPh+0x4e2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6898      	ldr	r0, [r3, #8]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	8999      	ldrh	r1, [r3, #12]
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	3309      	adds	r3, #9
 801257a:	781a      	ldrb	r2, [r3, #0]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	3316      	adds	r3, #22
 8012580:	f7fe fe9c 	bl	80112bc <_ZN3BTD21l2cap_config_responseEthPh>
 8012584:	e246      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	330c      	adds	r3, #12
 801258a:	781a      	ldrb	r2, [r3, #0]
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012592:	429a      	cmp	r2, r3
 8012594:	f040 823e 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	330d      	adds	r3, #13
 801259c:	781a      	ldrb	r2, [r3, #0]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80125a4:	429a      	cmp	r2, r3
 80125a6:	f040 8235 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6898      	ldr	r0, [r3, #8]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	8999      	ldrh	r1, [r3, #12]
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	3309      	adds	r3, #9
 80125b6:	781a      	ldrb	r2, [r3, #0]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	3318      	adds	r3, #24
 80125bc:	f7fe fe7e 	bl	80112bc <_ZN3BTD21l2cap_config_responseEthPh>
 80125c0:	e228      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	3308      	adds	r3, #8
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	2b06      	cmp	r3, #6
 80125ca:	d17c      	bne.n	80126c6 <_ZN5BTHID7ACLDataEPh+0x622>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	330c      	adds	r3, #12
 80125d0:	781a      	ldrb	r2, [r3, #0]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80125d8:	429a      	cmp	r2, r3
 80125da:	d116      	bne.n	801260a <_ZN5BTHID7ACLDataEPh+0x566>
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	330d      	adds	r3, #13
 80125e0:	781a      	ldrb	r2, [r3, #0]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80125e8:	429a      	cmp	r2, r3
 80125ea:	d10e      	bne.n	801260a <_ZN5BTHID7ACLDataEPh+0x566>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
 80125ec:	2180      	movs	r1, #128	; 0x80
 80125ee:	4893      	ldr	r0, [pc, #588]	; (801283c <_ZN5BTHID7ACLDataEPh+0x798>)
 80125f0:	f002 fec0 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	7a5a      	ldrb	r2, [r3, #9]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	691b      	ldr	r3, [r3, #16]
 8012600:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	611a      	str	r2, [r3, #16]
 8012608:	e204      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	330c      	adds	r3, #12
 801260e:	781a      	ldrb	r2, [r3, #0]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8012616:	429a      	cmp	r2, r3
 8012618:	d125      	bne.n	8012666 <_ZN5BTHID7ACLDataEPh+0x5c2>
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	330d      	adds	r3, #13
 801261e:	781a      	ldrb	r2, [r3, #0]
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8012626:	429a      	cmp	r2, r3
 8012628:	d11d      	bne.n	8012666 <_ZN5BTHID7ACLDataEPh+0x5c2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
 801262a:	2180      	movs	r1, #128	; 0x80
 801262c:	4884      	ldr	r0, [pc, #528]	; (8012840 <_ZN5BTHID7ACLDataEPh+0x79c>)
 801262e:	f002 fea1 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	7a5a      	ldrb	r2, [r3, #9]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	6898      	ldr	r0, [r3, #8]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	8999      	ldrh	r1, [r3, #12]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	7d1a      	ldrb	r2, [r3, #20]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	3316      	adds	r3, #22
 8012650:	9300      	str	r3, [sp, #0]
 8012652:	4623      	mov	r3, r4
 8012654:	f7fe fec2 	bl	80113dc <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	3308      	adds	r3, #8
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	4798      	blx	r3
 8012664:	e1d6      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	330c      	adds	r3, #12
 801266a:	781a      	ldrb	r2, [r3, #0]
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012672:	429a      	cmp	r2, r3
 8012674:	f040 81ce 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	330d      	adds	r3, #13
 801267c:	781a      	ldrb	r2, [r3, #0]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012684:	429a      	cmp	r2, r3
 8012686:	f040 81c5 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
 801268a:	2180      	movs	r1, #128	; 0x80
 801268c:	486d      	ldr	r0, [pc, #436]	; (8012844 <_ZN5BTHID7ACLDataEPh+0x7a0>)
 801268e:	f002 fe71 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	7a5a      	ldrb	r2, [r3, #9]
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6898      	ldr	r0, [r3, #8]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	8999      	ldrh	r1, [r3, #12]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	7d1a      	ldrb	r2, [r3, #20]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	3318      	adds	r3, #24
 80126b0:	9300      	str	r3, [sp, #0]
 80126b2:	4623      	mov	r3, r4
 80126b4:	f7fe fe92 	bl	80113dc <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	3308      	adds	r3, #8
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	4798      	blx	r3
 80126c4:	e1a6      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	3308      	adds	r3, #8
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	2b07      	cmp	r3, #7
 80126ce:	d14c      	bne.n	801276a <_ZN5BTHID7ACLDataEPh+0x6c6>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	330c      	adds	r3, #12
 80126d4:	781a      	ldrb	r2, [r3, #0]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	7edb      	ldrb	r3, [r3, #27]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d111      	bne.n	8012702 <_ZN5BTHID7ACLDataEPh+0x65e>
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	330d      	adds	r3, #13
 80126e2:	781a      	ldrb	r2, [r3, #0]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	7f1b      	ldrb	r3, [r3, #28]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d10a      	bne.n	8012702 <_ZN5BTHID7ACLDataEPh+0x65e>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	7a5a      	ldrb	r2, [r3, #9]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	691b      	ldr	r3, [r3, #16]
 80126f8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	611a      	str	r2, [r3, #16]
 8012700:	e188      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	330c      	adds	r3, #12
 8012706:	781a      	ldrb	r2, [r3, #0]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	7d9b      	ldrb	r3, [r3, #22]
 801270c:	429a      	cmp	r2, r3
 801270e:	d111      	bne.n	8012734 <_ZN5BTHID7ACLDataEPh+0x690>
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	330d      	adds	r3, #13
 8012714:	781a      	ldrb	r2, [r3, #0]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	7ddb      	ldrb	r3, [r3, #23]
 801271a:	429a      	cmp	r2, r3
 801271c:	d10a      	bne.n	8012734 <_ZN5BTHID7ACLDataEPh+0x690>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	7a5a      	ldrb	r2, [r3, #9]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	691b      	ldr	r3, [r3, #16]
 801272a:	f043 0208 	orr.w	r2, r3, #8
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	611a      	str	r2, [r3, #16]
 8012732:	e16f      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	330c      	adds	r3, #12
 8012738:	781a      	ldrb	r2, [r3, #0]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	7e1b      	ldrb	r3, [r3, #24]
 801273e:	429a      	cmp	r2, r3
 8012740:	f040 8168 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	330d      	adds	r3, #13
 8012748:	781a      	ldrb	r2, [r3, #0]
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	7e5b      	ldrb	r3, [r3, #25]
 801274e:	429a      	cmp	r2, r3
 8012750:	f040 8160 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	7a5a      	ldrb	r2, [r3, #9]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	691b      	ldr	r3, [r3, #16]
 8012760:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	611a      	str	r2, [r3, #16]
 8012768:	e154      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	3308      	adds	r3, #8
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	2b0a      	cmp	r3, #10
 8012772:	f040 814f 	bne.w	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
 8012776:	2180      	movs	r1, #128	; 0x80
 8012778:	4833      	ldr	r0, [pc, #204]	; (8012848 <_ZN5BTHID7ACLDataEPh+0x7a4>)
 801277a:	f002 fdfb 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                identifier = l2capinbuf[9];
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	7a5a      	ldrb	r2, [r3, #9]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6898      	ldr	r0, [r3, #8]
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	8999      	ldrh	r1, [r3, #12]
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	7d1a      	ldrb	r2, [r3, #20]
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	330c      	adds	r3, #12
 8012796:	781c      	ldrb	r4, [r3, #0]
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	330d      	adds	r3, #13
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	9300      	str	r3, [sp, #0]
 80127a0:	4623      	mov	r3, r4
 80127a2:	f7fe fe58 	bl	8011456 <_ZN3BTD26l2cap_information_responseEthhh>
 80127a6:	e135      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	3306      	adds	r3, #6
 80127ac:	781a      	ldrb	r2, [r3, #0]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80127b4:	429a      	cmp	r2, r3
 80127b6:	f040 8091 	bne.w	80128dc <_ZN5BTHID7ACLDataEPh+0x838>
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	3307      	adds	r3, #7
 80127be:	781a      	ldrb	r2, [r3, #0]
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80127c6:	429a      	cmp	r2, r3
 80127c8:	f040 8088 	bne.w	80128dc <_ZN5BTHID7ACLDataEPh+0x838>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	3308      	adds	r3, #8
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	2b02      	cmp	r3, #2
 80127d4:	d13a      	bne.n	801284c <_ZN5BTHID7ACLDataEPh+0x7a8>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2203      	movs	r2, #3
 80127da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	7a5a      	ldrb	r2, [r3, #9]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	7a9a      	ldrb	r2, [r3, #10]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2200      	movs	r2, #0
 80127f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2205      	movs	r2, #5
 80127fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2200      	movs	r2, #0
 8012806:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2200      	movs	r2, #0
 801280e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2200      	movs	r2, #0
 8012816:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2200      	movs	r2, #0
 801281e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2200      	movs	r2, #0
 8012826:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	3328      	adds	r3, #40	; 0x28
 801282e:	220a      	movs	r2, #10
 8012830:	4619      	mov	r1, r3
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f000 fbca 	bl	8012fcc <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012838:	e0e9      	b.n	8012a0e <_ZN5BTHID7ACLDataEPh+0x96a>
 801283a:	bf00      	nop
 801283c:	08016388 	.word	0x08016388
 8012840:	080163ac 	.word	0x080163ac
 8012844:	080163d4 	.word	0x080163d4
 8012848:	080163fc 	.word	0x080163fc
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	3308      	adds	r3, #8
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	2b04      	cmp	r3, #4
 8012854:	d131      	bne.n	80128ba <_ZN5BTHID7ACLDataEPh+0x816>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2205      	movs	r2, #5
 801285a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	7a5a      	ldrb	r2, [r3, #9]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	7a9a      	ldrb	r2, [r3, #10]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2200      	movs	r2, #0
 8012876:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2205      	movs	r2, #5
 801287e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2200      	movs	r2, #0
 8012886:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2202      	movs	r2, #2
 801288e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2235      	movs	r2, #53	; 0x35
 8012896:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2200      	movs	r2, #0
 801289e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2200      	movs	r2, #0
 80128a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	3328      	adds	r3, #40	; 0x28
 80128ae:	220a      	movs	r2, #10
 80128b0:	4619      	mov	r1, r3
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f000 fb8a 	bl	8012fcc <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80128b8:	e0a9      	b.n	8012a0e <_ZN5BTHID7ACLDataEPh+0x96a>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	3308      	adds	r3, #8
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	2b06      	cmp	r3, #6
 80128c2:	f040 80a4 	bne.w	8012a0e <_ZN5BTHID7ACLDataEPh+0x96a>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	3309      	adds	r3, #9
 80128ca:	7819      	ldrb	r1, [r3, #0]
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	330a      	adds	r3, #10
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	461a      	mov	r2, r3
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 fb93 	bl	8013000 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80128da:	e098      	b.n	8012a0e <_ZN5BTHID7ACLDataEPh+0x96a>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	3306      	adds	r3, #6
 80128e0:	781a      	ldrb	r2, [r3, #0]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d162      	bne.n	80129b2 <_ZN5BTHID7ACLDataEPh+0x90e>
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	3307      	adds	r3, #7
 80128f0:	781a      	ldrb	r2, [r3, #0]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d15a      	bne.n	80129b2 <_ZN5BTHID7ACLDataEPh+0x90e>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	3308      	adds	r3, #8
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	2ba1      	cmp	r3, #161	; 0xa1
 8012904:	f040 8085 	bne.w	8012a12 <_ZN5BTHID7ACLDataEPh+0x96e>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 8012908:	f7ef ff78 	bl	80027fc <HAL_GetTick>
 801290c:	4602      	mov	r2, r0
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	3305      	adds	r3, #5
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	021b      	lsls	r3, r3, #8
 801291a:	b21a      	sxth	r2, r3
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	3304      	adds	r3, #4
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	b21b      	sxth	r3, r3
 8012924:	4313      	orrs	r3, r2
 8012926:	b21b      	sxth	r3, r3
 8012928:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	3314      	adds	r3, #20
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	89fa      	ldrh	r2, [r7, #14]
 8012934:	b2d2      	uxtb	r2, r2
 8012936:	3a01      	subs	r2, #1
 8012938:	b2d1      	uxtb	r1, r2
 801293a:	683a      	ldr	r2, [r7, #0]
 801293c:	3209      	adds	r2, #9
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	3309      	adds	r3, #9
 8012946:	781b      	ldrb	r3, [r3, #0]
 8012948:	2b01      	cmp	r3, #1
 801294a:	d002      	beq.n	8012952 <_ZN5BTHID7ACLDataEPh+0x8ae>
 801294c:	2b02      	cmp	r3, #2
 801294e:	d016      	beq.n	801297e <_ZN5BTHID7ACLDataEPh+0x8da>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 8012950:	e05f      	b.n	8012a12 <_ZN5BTHID7ACLDataEPh+0x96e>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6a1b      	ldr	r3, [r3, #32]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d027      	beq.n	80129aa <_ZN5BTHID7ACLDataEPh+0x906>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6a18      	ldr	r0, [r3, #32]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6a1b      	ldr	r3, [r3, #32]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	681c      	ldr	r4, [r3, #0]
 8012966:	89fb      	ldrh	r3, [r7, #14]
 8012968:	b2db      	uxtb	r3, r3
 801296a:	3b02      	subs	r3, #2
 801296c:	b2da      	uxtb	r2, r3
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	330a      	adds	r3, #10
 8012972:	9300      	str	r3, [sp, #0]
 8012974:	4613      	mov	r3, r2
 8012976:	2200      	movs	r2, #0
 8012978:	6879      	ldr	r1, [r7, #4]
 801297a:	47a0      	blx	r4
                                                break;
 801297c:	e015      	b.n	80129aa <_ZN5BTHID7ACLDataEPh+0x906>
                                                if(pRptParser[MOUSE_PARSER_ID])
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012982:	2b00      	cmp	r3, #0
 8012984:	d013      	beq.n	80129ae <_ZN5BTHID7ACLDataEPh+0x90a>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	681c      	ldr	r4, [r3, #0]
 8012992:	89fb      	ldrh	r3, [r7, #14]
 8012994:	b2db      	uxtb	r3, r3
 8012996:	3b02      	subs	r3, #2
 8012998:	b2da      	uxtb	r2, r3
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	330a      	adds	r3, #10
 801299e:	9300      	str	r3, [sp, #0]
 80129a0:	4613      	mov	r3, r2
 80129a2:	2200      	movs	r2, #0
 80129a4:	6879      	ldr	r1, [r7, #4]
 80129a6:	47a0      	blx	r4
                                                break;
 80129a8:	e001      	b.n	80129ae <_ZN5BTHID7ACLDataEPh+0x90a>
                                                break;
 80129aa:	bf00      	nop
 80129ac:	e031      	b.n	8012a12 <_ZN5BTHID7ACLDataEPh+0x96e>
                                                break;
 80129ae:	bf00      	nop
                        }
 80129b0:	e02f      	b.n	8012a12 <_ZN5BTHID7ACLDataEPh+0x96e>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	3306      	adds	r3, #6
 80129b6:	781a      	ldrb	r2, [r3, #0]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80129be:	429a      	cmp	r2, r3
 80129c0:	d128      	bne.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	3307      	adds	r3, #7
 80129c6:	781a      	ldrb	r2, [r3, #0]
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d120      	bne.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	3308      	adds	r3, #8
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	2ba3      	cmp	r3, #163	; 0xa3
 80129da:	d11b      	bne.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	3305      	adds	r3, #5
 80129e0:	781b      	ldrb	r3, [r3, #0]
 80129e2:	021b      	lsls	r3, r3, #8
 80129e4:	b21a      	sxth	r2, r3
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	3304      	adds	r3, #4
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	b21b      	sxth	r3, r3
 80129ee:	4313      	orrs	r3, r2
 80129f0:	b21b      	sxth	r3, r3
 80129f2:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	3318      	adds	r3, #24
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	89ba      	ldrh	r2, [r7, #12]
 80129fe:	b2d2      	uxtb	r2, r2
 8012a00:	3a01      	subs	r2, #1
 8012a02:	b2d1      	uxtb	r1, r2
 8012a04:	683a      	ldr	r2, [r7, #0]
 8012a06:	3209      	adds	r2, #9
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	4798      	blx	r3
 8012a0c:	e002      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012a0e:	bf00      	nop
 8012a10:	e000      	b.n	8012a14 <_ZN5BTHID7ACLDataEPh+0x970>
                        }
 8012a12:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f000 f807 	bl	8012a28 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f000 f8cc 	bl	8012bb8 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 8012a20:	bf00      	nop
 8012a22:	3714      	adds	r7, #20
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd90      	pop	{r4, r7, pc}

08012a28 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 8012a28:	b5b0      	push	{r4, r5, r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af02      	add	r7, sp, #8
 8012a2e:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	7e9b      	ldrb	r3, [r3, #26]
 8012a34:	2b0e      	cmp	r3, #14
 8012a36:	f000 8090 	beq.w	8012b5a <_ZN5BTHID8SDP_taskEv+0x132>
 8012a3a:	2b0e      	cmp	r3, #14
 8012a3c:	f300 80af 	bgt.w	8012b9e <_ZN5BTHID8SDP_taskEv+0x176>
 8012a40:	2b0a      	cmp	r3, #10
 8012a42:	d002      	beq.n	8012a4a <_ZN5BTHID8SDP_taskEv+0x22>
 8012a44:	2b0b      	cmp	r3, #11
 8012a46:	d070      	beq.n	8012b2a <_ZN5BTHID8SDP_taskEv+0x102>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 8012a48:	e0a9      	b.n	8012b9e <_ZN5BTHID8SDP_taskEv+0x176>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	691b      	ldr	r3, [r3, #16]
 8012a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d045      	beq.n	8012ae2 <_ZN5BTHID8SDP_taskEv+0xba>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	691b      	ldr	r3, [r3, #16]
 8012a5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	611a      	str	r2, [r3, #16]
                                Notify(PSTR("\r\nSDP Incoming Connection Request"), 0x80);
 8012a62:	2180      	movs	r1, #128	; 0x80
 8012a64:	4850      	ldr	r0, [pc, #320]	; (8012ba8 <_ZN5BTHID8SDP_taskEv+0x180>)
 8012a66:	f002 fc85 	bl	8015374 <_Z8E_NotifyPKci>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6898      	ldr	r0, [r3, #8]
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	8999      	ldrh	r1, [r3, #12]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	7d1a      	ldrb	r2, [r3, #20]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	331b      	adds	r3, #27
 8012a80:	2501      	movs	r5, #1
 8012a82:	9501      	str	r5, [sp, #4]
 8012a84:	9300      	str	r3, [sp, #0]
 8012a86:	4623      	mov	r3, r4
 8012a88:	f7fe fb80 	bl	801118c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8012a8c:	2001      	movs	r0, #1
 8012a8e:	f7ef fec1 	bl	8002814 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6898      	ldr	r0, [r3, #8]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	8999      	ldrh	r1, [r3, #12]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	7d1a      	ldrb	r2, [r3, #20]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	331b      	adds	r3, #27
 8012aa8:	2500      	movs	r5, #0
 8012aaa:	9501      	str	r5, [sp, #4]
 8012aac:	9300      	str	r3, [sp, #0]
 8012aae:	4623      	mov	r3, r4
 8012ab0:	f7fe fb6c 	bl	801118c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	7d1b      	ldrb	r3, [r3, #20]
 8012ab8:	3301      	adds	r3, #1
 8012aba:	b2da      	uxtb	r2, r3
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8012ac0:	2001      	movs	r0, #1
 8012ac2:	f7ef fea7 	bl	8002814 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6898      	ldr	r0, [r3, #8]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	8999      	ldrh	r1, [r3, #12]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	7d1a      	ldrb	r2, [r3, #20]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	331b      	adds	r3, #27
 8012ad6:	f7fe fba6 	bl	8011226 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	220b      	movs	r2, #11
 8012ade:	769a      	strb	r2, [r3, #26]
                        break;
 8012ae0:	e058      	b.n	8012b94 <_ZN5BTHID8SDP_taskEv+0x16c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	691b      	ldr	r3, [r3, #16]
 8012ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d052      	beq.n	8012b94 <_ZN5BTHID8SDP_taskEv+0x16c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	691b      	ldr	r3, [r3, #16]
 8012af2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2200      	movs	r2, #0
 8012afe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                Notify(PSTR("\r\nDisconnected SDP Channel"), 0x80);
 8012b02:	2180      	movs	r1, #128	; 0x80
 8012b04:	4829      	ldr	r0, [pc, #164]	; (8012bac <_ZN5BTHID8SDP_taskEv+0x184>)
 8012b06:	f002 fc35 	bl	8015374 <_Z8E_NotifyPKci>
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6898      	ldr	r0, [r3, #8]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	8999      	ldrh	r1, [r3, #12]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	7d1a      	ldrb	r2, [r3, #20]
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	331b      	adds	r3, #27
 8012b20:	9300      	str	r3, [sp, #0]
 8012b22:	4623      	mov	r3, r4
 8012b24:	f7fe fc5a 	bl	80113dc <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8012b28:	e034      	b.n	8012b94 <_ZN5BTHID8SDP_taskEv+0x16c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	691b      	ldr	r3, [r3, #16]
 8012b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d030      	beq.n	8012b98 <_ZN5BTHID8SDP_taskEv+0x170>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	691b      	ldr	r3, [r3, #16]
 8012b3a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	611a      	str	r2, [r3, #16]
                                Notify(PSTR("\r\nSDP Successfully Configured"), 0x80);
 8012b42:	2180      	movs	r1, #128	; 0x80
 8012b44:	481a      	ldr	r0, [pc, #104]	; (8012bb0 <_ZN5BTHID8SDP_taskEv+0x188>)
 8012b46:	f002 fc15 	bl	8015374 <_Z8E_NotifyPKci>
                                SDPConnected = true;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2201      	movs	r2, #1
 8012b4e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	220a      	movs	r2, #10
 8012b56:	769a      	strb	r2, [r3, #26]
                        break;
 8012b58:	e01e      	b.n	8012b98 <_ZN5BTHID8SDP_taskEv+0x170>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	691b      	ldr	r3, [r3, #16]
 8012b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d01a      	beq.n	8012b9c <_ZN5BTHID8SDP_taskEv+0x174>
                                Notify(PSTR("\r\nDisconnected L2CAP Connection"), 0x80);
 8012b66:	2180      	movs	r1, #128	; 0x80
 8012b68:	4812      	ldr	r0, [pc, #72]	; (8012bb4 <_ZN5BTHID8SDP_taskEv+0x18c>)
 8012b6a:	f002 fc03 	bl	8015374 <_Z8E_NotifyPKci>
                                pBtd->hci_disconnect(hci_handle);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	689a      	ldr	r2, [r3, #8]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	899b      	ldrh	r3, [r3, #12]
 8012b76:	4619      	mov	r1, r3
 8012b78:	4610      	mov	r0, r2
 8012b7a:	f7fe f9b7 	bl	8010eec <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b84:	819a      	strh	r2, [r3, #12]
                                Reset();
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	3308      	adds	r3, #8
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	4798      	blx	r3
                        break;
 8012b92:	e003      	b.n	8012b9c <_ZN5BTHID8SDP_taskEv+0x174>
                        break;
 8012b94:	bf00      	nop
 8012b96:	e002      	b.n	8012b9e <_ZN5BTHID8SDP_taskEv+0x176>
                        break;
 8012b98:	bf00      	nop
 8012b9a:	e000      	b.n	8012b9e <_ZN5BTHID8SDP_taskEv+0x176>
                        break;
 8012b9c:	bf00      	nop
}
 8012b9e:	bf00      	nop
 8012ba0:	3708      	adds	r7, #8
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	08016414 	.word	0x08016414
 8012bac:	08016438 	.word	0x08016438
 8012bb0:	08016454 	.word	0x08016454
 8012bb4:	08016474 	.word	0x08016474

08012bb8 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 8012bb8:	b5b0      	push	{r4, r5, r7, lr}
 8012bba:	b084      	sub	sp, #16
 8012bbc:	af02      	add	r7, sp, #8
 8012bbe:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8012bc6:	3b01      	subs	r3, #1
 8012bc8:	2b08      	cmp	r3, #8
 8012bca:	f200 814d 	bhi.w	8012e68 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
 8012bce:	a201      	add	r2, pc, #4	; (adr r2, 8012bd4 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 8012bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bd4:	08012e47 	.word	0x08012e47
 8012bd8:	08012caf 	.word	0x08012caf
 8012bdc:	08012cef 	.word	0x08012cef
 8012be0:	08012bf9 	.word	0x08012bf9
 8012be4:	08012e0b 	.word	0x08012e0b
 8012be8:	08012c1f 	.word	0x08012c1f
 8012bec:	08012d3f 	.word	0x08012d3f
 8012bf0:	08012d7f 	.word	0x08012d7f
 8012bf4:	08012dc3 	.word	0x08012dc3
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	691b      	ldr	r3, [r3, #16]
 8012bfc:	f003 0302 	and.w	r3, r3, #2
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	f000 8122 	beq.w	8012e4a <_ZN5BTHID10L2CAP_taskEv+0x292>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
 8012c06:	2180      	movs	r1, #128	; 0x80
 8012c08:	4899      	ldr	r0, [pc, #612]	; (8012e70 <_ZN5BTHID10L2CAP_taskEv+0x2b8>)
 8012c0a:	f002 fbb3 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f000 fa32 	bl	8013078 <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2206      	movs	r2, #6
 8012c18:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012c1c:	e115      	b.n	8012e4a <_ZN5BTHID10L2CAP_taskEv+0x292>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	691b      	ldr	r3, [r3, #16]
 8012c22:	f003 0310 	and.w	r3, r3, #16
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	f000 8111 	beq.w	8012e4e <_ZN5BTHID10L2CAP_taskEv+0x296>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
 8012c2c:	2180      	movs	r1, #128	; 0x80
 8012c2e:	4891      	ldr	r0, [pc, #580]	; (8012e74 <_ZN5BTHID10L2CAP_taskEv+0x2bc>)
 8012c30:	f002 fba0 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6898      	ldr	r0, [r3, #8]
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	8999      	ldrh	r1, [r3, #12]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	7d1a      	ldrb	r2, [r3, #20]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	3318      	adds	r3, #24
 8012c4a:	2501      	movs	r5, #1
 8012c4c:	9501      	str	r5, [sp, #4]
 8012c4e:	9300      	str	r3, [sp, #0]
 8012c50:	4623      	mov	r3, r4
 8012c52:	f7fe fa9b 	bl	801118c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8012c56:	2001      	movs	r0, #1
 8012c58:	f7ef fddc 	bl	8002814 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6898      	ldr	r0, [r3, #8]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	8999      	ldrh	r1, [r3, #12]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	7d1a      	ldrb	r2, [r3, #20]
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	3318      	adds	r3, #24
 8012c72:	2500      	movs	r5, #0
 8012c74:	9501      	str	r5, [sp, #4]
 8012c76:	9300      	str	r3, [sp, #0]
 8012c78:	4623      	mov	r3, r4
 8012c7a:	f7fe fa87 	bl	801118c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	7d1b      	ldrb	r3, [r3, #20]
 8012c82:	3301      	adds	r3, #1
 8012c84:	b2da      	uxtb	r2, r3
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8012c8a:	2001      	movs	r0, #1
 8012c8c:	f7ef fdc2 	bl	8002814 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6898      	ldr	r0, [r3, #8]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	8999      	ldrh	r1, [r3, #12]
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	7d1a      	ldrb	r2, [r3, #20]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	3318      	adds	r3, #24
 8012ca0:	f7fe fac1 	bl	8011226 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2208      	movs	r2, #8
 8012ca8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012cac:	e0cf      	b.n	8012e4e <_ZN5BTHID10L2CAP_taskEv+0x296>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	691b      	ldr	r3, [r3, #16]
 8012cb2:	f003 0304 	and.w	r3, r3, #4
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	f000 80cb 	beq.w	8012e52 <_ZN5BTHID10L2CAP_taskEv+0x29a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
 8012cbc:	2180      	movs	r1, #128	; 0x80
 8012cbe:	486e      	ldr	r0, [pc, #440]	; (8012e78 <_ZN5BTHID10L2CAP_taskEv+0x2c0>)
 8012cc0:	f002 fb58 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	7d1b      	ldrb	r3, [r3, #20]
 8012cc8:	3301      	adds	r3, #1
 8012cca:	b2da      	uxtb	r2, r3
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	6898      	ldr	r0, [r3, #8]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	8999      	ldrh	r1, [r3, #12]
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	7d1a      	ldrb	r2, [r3, #20]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	3316      	adds	r3, #22
 8012ce0:	f7fe faa1 	bl	8011226 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2203      	movs	r2, #3
 8012ce8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012cec:	e0b1      	b.n	8012e52 <_ZN5BTHID10L2CAP_taskEv+0x29a>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	691b      	ldr	r3, [r3, #16]
 8012cf2:	f003 0302 	and.w	r3, r3, #2
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	f000 80ad 	beq.w	8012e56 <_ZN5BTHID10L2CAP_taskEv+0x29e>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f000 f9bb 	bl	8013078 <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 8012d02:	2001      	movs	r0, #1
 8012d04:	f7ef fd86 	bl	8002814 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
 8012d08:	2180      	movs	r1, #128	; 0x80
 8012d0a:	485c      	ldr	r0, [pc, #368]	; (8012e7c <_ZN5BTHID10L2CAP_taskEv+0x2c4>)
 8012d0c:	f002 fb32 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	7d1b      	ldrb	r3, [r3, #20]
 8012d14:	3301      	adds	r3, #1
 8012d16:	b2da      	uxtb	r2, r3
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6898      	ldr	r0, [r3, #8]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	8999      	ldrh	r1, [r3, #12]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	7d1a      	ldrb	r2, [r3, #20]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	336d      	adds	r3, #109	; 0x6d
 8012d2c:	2413      	movs	r4, #19
 8012d2e:	9400      	str	r4, [sp, #0]
 8012d30:	f7fe f9ee 	bl	8011110 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2207      	movs	r2, #7
 8012d38:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012d3c:	e08b      	b.n	8012e56 <_ZN5BTHID10L2CAP_taskEv+0x29e>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	691b      	ldr	r3, [r3, #16]
 8012d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	f000 8087 	beq.w	8012e5a <_ZN5BTHID10L2CAP_taskEv+0x2a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
 8012d4c:	2180      	movs	r1, #128	; 0x80
 8012d4e:	484c      	ldr	r0, [pc, #304]	; (8012e80 <_ZN5BTHID10L2CAP_taskEv+0x2c8>)
 8012d50:	f002 fb10 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	7d1b      	ldrb	r3, [r3, #20]
 8012d58:	3301      	adds	r3, #1
 8012d5a:	b2da      	uxtb	r2, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6898      	ldr	r0, [r3, #8]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	8999      	ldrh	r1, [r3, #12]
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	7d1a      	ldrb	r2, [r3, #20]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	3318      	adds	r3, #24
 8012d70:	f7fe fa59 	bl	8011226 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2208      	movs	r2, #8
 8012d78:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012d7c:	e06d      	b.n	8012e5a <_ZN5BTHID10L2CAP_taskEv+0x2a2>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	691b      	ldr	r3, [r3, #16]
 8012d82:	f003 0320 	and.w	r3, r3, #32
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d069      	beq.n	8012e5e <_ZN5BTHID10L2CAP_taskEv+0x2a6>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
 8012d8a:	2180      	movs	r1, #128	; 0x80
 8012d8c:	483d      	ldr	r0, [pc, #244]	; (8012e84 <_ZN5BTHID10L2CAP_taskEv+0x2cc>)
 8012d8e:	f002 faf1 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                pBtd->connectToHIDDevice = false;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	689b      	ldr	r3, [r3, #8]
 8012d96:	2200      	movs	r2, #0
 8012d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	689b      	ldr	r3, [r3, #8]
 8012da0:	2200      	movs	r2, #0
 8012da2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2201      	movs	r2, #1
 8012daa:	755a      	strb	r2, [r3, #21]
                                onInit();
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	3310      	adds	r3, #16
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2201      	movs	r2, #1
 8012dbc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012dc0:	e04d      	b.n	8012e5e <_ZN5BTHID10L2CAP_taskEv+0x2a6>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	691b      	ldr	r3, [r3, #16]
 8012dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d049      	beq.n	8012e62 <_ZN5BTHID10L2CAP_taskEv+0x2aa>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
 8012dce:	2180      	movs	r1, #128	; 0x80
 8012dd0:	482d      	ldr	r0, [pc, #180]	; (8012e88 <_ZN5BTHID10L2CAP_taskEv+0x2d0>)
 8012dd2:	f002 facf 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	7d1b      	ldrb	r3, [r3, #20]
 8012dda:	3301      	adds	r3, #1
 8012ddc:	b2da      	uxtb	r2, r3
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6898      	ldr	r0, [r3, #8]
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	8999      	ldrh	r1, [r3, #12]
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	7d1a      	ldrb	r2, [r3, #20]
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f103 0416 	add.w	r4, r3, #22
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	336b      	adds	r3, #107	; 0x6b
 8012df8:	9300      	str	r3, [sp, #0]
 8012dfa:	4623      	mov	r3, r4
 8012dfc:	f7fe fab1 	bl	8011362 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2205      	movs	r2, #5
 8012e04:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012e08:	e02b      	b.n	8012e62 <_ZN5BTHID10L2CAP_taskEv+0x2aa>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	691b      	ldr	r3, [r3, #16]
 8012e0e:	f003 0308 	and.w	r3, r3, #8
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d027      	beq.n	8012e66 <_ZN5BTHID10L2CAP_taskEv+0x2ae>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
 8012e16:	2180      	movs	r1, #128	; 0x80
 8012e18:	481c      	ldr	r0, [pc, #112]	; (8012e8c <_ZN5BTHID10L2CAP_taskEv+0x2d4>)
 8012e1a:	f002 faab 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                pBtd->hci_disconnect(hci_handle);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	689a      	ldr	r2, [r3, #8]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	899b      	ldrh	r3, [r3, #12]
 8012e26:	4619      	mov	r1, r3
 8012e28:	4610      	mov	r0, r2
 8012e2a:	f7fe f85f 	bl	8010eec <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e34:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012e44:	e00f      	b.n	8012e66 <_ZN5BTHID10L2CAP_taskEv+0x2ae>
                        break;
 8012e46:	bf00      	nop
 8012e48:	e00e      	b.n	8012e68 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8012e4a:	bf00      	nop
 8012e4c:	e00c      	b.n	8012e68 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8012e4e:	bf00      	nop
 8012e50:	e00a      	b.n	8012e68 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8012e52:	bf00      	nop
 8012e54:	e008      	b.n	8012e68 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8012e56:	bf00      	nop
 8012e58:	e006      	b.n	8012e68 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8012e5a:	bf00      	nop
 8012e5c:	e004      	b.n	8012e68 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8012e5e:	bf00      	nop
 8012e60:	e002      	b.n	8012e68 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8012e62:	bf00      	nop
 8012e64:	e000      	b.n	8012e68 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8012e66:	bf00      	nop
        }
}
 8012e68:	bf00      	nop
 8012e6a:	3708      	adds	r7, #8
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8012e70:	08016494 	.word	0x08016494
 8012e74:	080164bc 	.word	0x080164bc
 8012e78:	080164e8 	.word	0x080164e8
 8012e7c:	0801650c 	.word	0x0801650c
 8012e80:	08016534 	.word	0x08016534
 8012e84:	08016558 	.word	0x08016558
 8012e88:	08016574 	.word	0x08016574
 8012e8c:	08016598 	.word	0x08016598

08012e90 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 8012e90:	b5b0      	push	{r4, r5, r7, lr}
 8012e92:	b084      	sub	sp, #16
 8012e94:	af02      	add	r7, sp, #8
 8012e96:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	f040 808c 	bne.w	8012fbc <_ZN5BTHID3RunEv+0x12c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	689b      	ldr	r3, [r3, #8]
 8012ea8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d03e      	beq.n	8012f2e <_ZN5BTHID3RunEv+0x9e>
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	689b      	ldr	r3, [r3, #8]
 8012eb4:	7a5b      	ldrb	r3, [r3, #9]
 8012eb6:	f083 0301 	eor.w	r3, r3, #1
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d036      	beq.n	8012f2e <_ZN5BTHID3RunEv+0x9e>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	7d5b      	ldrb	r3, [r3, #21]
 8012ec4:	f083 0301 	eor.w	r3, r3, #1
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d02f      	beq.n	8012f2e <_ZN5BTHID3RunEv+0x9e>
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8012ed4:	f083 0301 	eor.w	r3, r3, #1
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d027      	beq.n	8012f2e <_ZN5BTHID3RunEv+0x9e>
                                pBtd->l2capConnectionClaimed = true;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	689b      	ldr	r3, [r3, #8]
 8012ee2:	2201      	movs	r2, #1
 8012ee4:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2201      	movs	r2, #1
 8012eea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
 8012eee:	2180      	movs	r1, #128	; 0x80
 8012ef0:	4834      	ldr	r0, [pc, #208]	; (8012fc4 <_ZN5BTHID3RunEv+0x134>)
 8012ef2:	f002 fa3f 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	689b      	ldr	r3, [r3, #8]
 8012efa:	8b5a      	ldrh	r2, [r3, #26]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2200      	movs	r2, #0
 8012f04:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2200      	movs	r2, #0
 8012f0a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6898      	ldr	r0, [r3, #8]
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	8999      	ldrh	r1, [r3, #12]
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	7d1a      	ldrb	r2, [r3, #20]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	336b      	adds	r3, #107	; 0x6b
 8012f1c:	2411      	movs	r4, #17
 8012f1e:	9400      	str	r4, [sp, #0]
 8012f20:	f7fe f8f6 	bl	8011110 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2202      	movs	r2, #2
 8012f28:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 8012f2c:	e045      	b.n	8012fba <_ZN5BTHID3RunEv+0x12a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	691b      	ldr	r3, [r3, #16]
 8012f32:	f003 0301 	and.w	r3, r3, #1
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d03f      	beq.n	8012fba <_ZN5BTHID3RunEv+0x12a>
                                Notify(PSTR("\r\nHID Control Incoming Connection Request"), 0x80);
 8012f3a:	2180      	movs	r1, #128	; 0x80
 8012f3c:	4822      	ldr	r0, [pc, #136]	; (8012fc8 <_ZN5BTHID3RunEv+0x138>)
 8012f3e:	f002 fa19 	bl	8015374 <_Z8E_NotifyPKci>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6898      	ldr	r0, [r3, #8]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	8999      	ldrh	r1, [r3, #12]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	7d1a      	ldrb	r2, [r3, #20]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	3316      	adds	r3, #22
 8012f58:	2501      	movs	r5, #1
 8012f5a:	9501      	str	r5, [sp, #4]
 8012f5c:	9300      	str	r3, [sp, #0]
 8012f5e:	4623      	mov	r3, r4
 8012f60:	f7fe f914 	bl	801118c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8012f64:	2001      	movs	r0, #1
 8012f66:	f7ef fc55 	bl	8002814 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	6898      	ldr	r0, [r3, #8]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	8999      	ldrh	r1, [r3, #12]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	7d1a      	ldrb	r2, [r3, #20]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	3316      	adds	r3, #22
 8012f80:	2500      	movs	r5, #0
 8012f82:	9501      	str	r5, [sp, #4]
 8012f84:	9300      	str	r3, [sp, #0]
 8012f86:	4623      	mov	r3, r4
 8012f88:	f7fe f900 	bl	801118c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	7d1b      	ldrb	r3, [r3, #20]
 8012f90:	3301      	adds	r3, #1
 8012f92:	b2da      	uxtb	r2, r3
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8012f98:	2001      	movs	r0, #1
 8012f9a:	f7ef fc3b 	bl	8002814 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	6898      	ldr	r0, [r3, #8]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	8999      	ldrh	r1, [r3, #12]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	7d1a      	ldrb	r2, [r3, #20]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	3316      	adds	r3, #22
 8012fae:	f7fe f93a 	bl	8011226 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2204      	movs	r2, #4
 8012fb6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 8012fba:	bf00      	nop
        }
}
 8012fbc:	bf00      	nop
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8012fc4:	080165b8 	.word	0x080165b8
 8012fc8:	080165e0 	.word	0x080165e0

08012fcc <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 8012fcc:	b590      	push	{r4, r7, lr}
 8012fce:	b087      	sub	sp, #28
 8012fd0:	af02      	add	r7, sp, #8
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	60b9      	str	r1, [r7, #8]
 8012fd6:	4613      	mov	r3, r2
 8012fd8:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	6898      	ldr	r0, [r3, #8]
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	8999      	ldrh	r1, [r3, #12]
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	7edb      	ldrb	r3, [r3, #27]
 8012fe6:	68fa      	ldr	r2, [r7, #12]
 8012fe8:	7f12      	ldrb	r2, [r2, #28]
 8012fea:	79fc      	ldrb	r4, [r7, #7]
 8012fec:	9201      	str	r2, [sp, #4]
 8012fee:	9300      	str	r3, [sp, #0]
 8012ff0:	4623      	mov	r3, r4
 8012ff2:	68ba      	ldr	r2, [r7, #8]
 8012ff4:	f7fd ffda 	bl	8010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8012ff8:	bf00      	nop
 8012ffa:	3714      	adds	r7, #20
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd90      	pop	{r4, r7, pc}

08013000 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	460b      	mov	r3, r1
 801300a:	70fb      	strb	r3, [r7, #3]
 801300c:	4613      	mov	r3, r2
 801300e:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2207      	movs	r2, #7
 8013014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	78fa      	ldrb	r2, [r7, #3]
 801301c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	78ba      	ldrb	r2, [r7, #2]
 8013024:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2200      	movs	r2, #0
 801302c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2205      	movs	r2, #5
 8013034:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2200      	movs	r2, #0
 801303c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2202      	movs	r2, #2
 8013044:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2235      	movs	r2, #53	; 0x35
 801304c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2200      	movs	r2, #0
 8013054:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2200      	movs	r2, #0
 801305c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	3328      	adds	r3, #40	; 0x28
 8013064:	220a      	movs	r2, #10
 8013066:	4619      	mov	r1, r3
 8013068:	6878      	ldr	r0, [r7, #4]
 801306a:	f7ff ffaf 	bl	8012fcc <_ZN5BTHID11SDP_CommandEPhh>
}
 801306e:	bf00      	nop
 8013070:	3708      	adds	r7, #8
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}
	...

08013078 <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 8013078:	b590      	push	{r4, r7, lr}
 801307a:	b087      	sub	sp, #28
 801307c:	af02      	add	r7, sp, #8
 801307e:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
 8013080:	2180      	movs	r1, #128	; 0x80
 8013082:	481b      	ldr	r0, [pc, #108]	; (80130f0 <_ZN5BTHID11setProtocolEv+0x78>)
 8013084:	f002 f976 	bl	8015374 <_Z8E_NotifyPKci>
        D_PrintHex<uint8_t > (protocolMode, 0x80);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801308e:	2180      	movs	r1, #128	; 0x80
 8013090:	4618      	mov	r0, r3
 8013092:	f7fe fab0 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00c      	beq.n	80130ba <_ZN5BTHID11setProtocolEv+0x42>
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80130a6:	2b01      	cmp	r3, #1
 80130a8:	d007      	beq.n	80130ba <_ZN5BTHID11setProtocolEv+0x42>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
 80130aa:	2180      	movs	r1, #128	; 0x80
 80130ac:	4811      	ldr	r0, [pc, #68]	; (80130f4 <_ZN5BTHID11setProtocolEv+0x7c>)
 80130ae:	f002 f961 	bl	8015374 <_Z8E_NotifyPKci>
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2200      	movs	r2, #0
 80130b6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80130c0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80130c4:	b2db      	uxtb	r3, r3
 80130c6:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6898      	ldr	r0, [r3, #8]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	8999      	ldrh	r1, [r3, #12]
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	7d9b      	ldrb	r3, [r3, #22]
 80130d4:	687a      	ldr	r2, [r7, #4]
 80130d6:	7dd2      	ldrb	r2, [r2, #23]
 80130d8:	f107 040f 	add.w	r4, r7, #15
 80130dc:	9201      	str	r2, [sp, #4]
 80130de:	9300      	str	r3, [sp, #0]
 80130e0:	2301      	movs	r3, #1
 80130e2:	4622      	mov	r2, r4
 80130e4:	f7fd ff62 	bl	8010fac <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80130e8:	bf00      	nop
 80130ea:	3714      	adds	r7, #20
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd90      	pop	{r4, r7, pc}
 80130f0:	0801660c 	.word	0x0801660c
 80130f4:	08016624 	.word	0x08016624

080130f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 80130f8:	b480      	push	{r7}
 80130fa:	b083      	sub	sp, #12
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	460b      	mov	r3, r1
 8013102:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8013104:	78fb      	ldrb	r3, [r7, #3]
 8013106:	2b03      	cmp	r3, #3
 8013108:	d86e      	bhi.n	80131e8 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 801310a:	a201      	add	r2, pc, #4	; (adr r2, 8013110 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 801310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013110:	08013121 	.word	0x08013121
 8013114:	08013153 	.word	0x08013153
 8013118:	08013185 	.word	0x08013185
 801311c:	080131b7 	.word	0x080131b7
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	7a1b      	ldrb	r3, [r3, #8]
 8013124:	f003 030f 	and.w	r3, r3, #15
 8013128:	b2db      	uxtb	r3, r3
 801312a:	2b07      	cmp	r3, #7
 801312c:	d00d      	beq.n	801314a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	7a1b      	ldrb	r3, [r3, #8]
 8013132:	f003 030f 	and.w	r3, r3, #15
 8013136:	b2db      	uxtb	r3, r3
 8013138:	2b00      	cmp	r3, #0
 801313a:	d006      	beq.n	801314a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	7a1b      	ldrb	r3, [r3, #8]
 8013140:	f003 030f 	and.w	r3, r3, #15
 8013144:	b2db      	uxtb	r3, r3
 8013146:	2b01      	cmp	r3, #1
 8013148:	d101      	bne.n	801314e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 801314a:	2301      	movs	r3, #1
 801314c:	e04d      	b.n	80131ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 801314e:	2300      	movs	r3, #0
 8013150:	e04b      	b.n	80131ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	7a1b      	ldrb	r3, [r3, #8]
 8013156:	f003 030f 	and.w	r3, r3, #15
 801315a:	b2db      	uxtb	r3, r3
 801315c:	2b01      	cmp	r3, #1
 801315e:	d00d      	beq.n	801317c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	7a1b      	ldrb	r3, [r3, #8]
 8013164:	f003 030f 	and.w	r3, r3, #15
 8013168:	b2db      	uxtb	r3, r3
 801316a:	2b02      	cmp	r3, #2
 801316c:	d006      	beq.n	801317c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	7a1b      	ldrb	r3, [r3, #8]
 8013172:	f003 030f 	and.w	r3, r3, #15
 8013176:	b2db      	uxtb	r3, r3
 8013178:	2b03      	cmp	r3, #3
 801317a:	d101      	bne.n	8013180 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 801317c:	2301      	movs	r3, #1
 801317e:	e034      	b.n	80131ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8013180:	2300      	movs	r3, #0
 8013182:	e032      	b.n	80131ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	7a1b      	ldrb	r3, [r3, #8]
 8013188:	f003 030f 	and.w	r3, r3, #15
 801318c:	b2db      	uxtb	r3, r3
 801318e:	2b03      	cmp	r3, #3
 8013190:	d00d      	beq.n	80131ae <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	7a1b      	ldrb	r3, [r3, #8]
 8013196:	f003 030f 	and.w	r3, r3, #15
 801319a:	b2db      	uxtb	r3, r3
 801319c:	2b04      	cmp	r3, #4
 801319e:	d006      	beq.n	80131ae <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	7a1b      	ldrb	r3, [r3, #8]
 80131a4:	f003 030f 	and.w	r3, r3, #15
 80131a8:	b2db      	uxtb	r3, r3
 80131aa:	2b05      	cmp	r3, #5
 80131ac:	d101      	bne.n	80131b2 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 80131ae:	2301      	movs	r3, #1
 80131b0:	e01b      	b.n	80131ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80131b2:	2300      	movs	r3, #0
 80131b4:	e019      	b.n	80131ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	7a1b      	ldrb	r3, [r3, #8]
 80131ba:	f003 030f 	and.w	r3, r3, #15
 80131be:	b2db      	uxtb	r3, r3
 80131c0:	2b05      	cmp	r3, #5
 80131c2:	d00d      	beq.n	80131e0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	7a1b      	ldrb	r3, [r3, #8]
 80131c8:	f003 030f 	and.w	r3, r3, #15
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	2b06      	cmp	r3, #6
 80131d0:	d006      	beq.n	80131e0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	7a1b      	ldrb	r3, [r3, #8]
 80131d6:	f003 030f 	and.w	r3, r3, #15
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	2b07      	cmp	r3, #7
 80131de:	d101      	bne.n	80131e4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 80131e0:	2301      	movs	r3, #1
 80131e2:	e002      	b.n	80131ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80131e4:	2300      	movs	r3, #0
 80131e6:	e000      	b.n	80131ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 80131e8:	2300      	movs	r3, #0
        }
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	370c      	adds	r7, #12
 80131ee:	46bd      	mov	sp, r7
 80131f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f4:	4770      	bx	lr
 80131f6:	bf00      	nop

080131f8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	460b      	mov	r3, r1
 8013202:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 8013204:	78fb      	ldrb	r3, [r7, #3]
 8013206:	2b03      	cmp	r3, #3
 8013208:	d806      	bhi.n	8013218 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 801320a:	78fb      	ldrb	r3, [r7, #3]
 801320c:	4619      	mov	r1, r3
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f7ff ff72 	bl	80130f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8013214:	4603      	mov	r3, r0
 8013216:	e011      	b.n	801323c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	689b      	ldr	r3, [r3, #8]
 801321c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8013220:	4619      	mov	r1, r3
 8013222:	78fb      	ldrb	r3, [r7, #3]
 8013224:	4a07      	ldr	r2, [pc, #28]	; (8013244 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 8013226:	4413      	add	r3, r2
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	fa21 f303 	lsr.w	r3, r1, r3
 801322e:	f003 0301 	and.w	r3, r3, #1
 8013232:	2b00      	cmp	r3, #0
 8013234:	bf14      	ite	ne
 8013236:	2301      	movne	r3, #1
 8013238:	2300      	moveq	r3, #0
 801323a:	b2db      	uxtb	r3, r3
}
 801323c:	4618      	mov	r0, r3
 801323e:	3708      	adds	r7, #8
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}
 8013244:	080177ac 	.word	0x080177ac

08013248 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 8013248:	b480      	push	{r7}
 801324a:	b085      	sub	sp, #20
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	460b      	mov	r3, r1
 8013252:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8013254:	78fb      	ldrb	r3, [r7, #3]
 8013256:	4a1b      	ldr	r2, [pc, #108]	; (80132c4 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8013258:	4413      	add	r3, r2
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	461a      	mov	r2, r3
 801325e:	2301      	movs	r3, #1
 8013260:	4093      	lsls	r3, r2
 8013262:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801326a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801326e:	021b      	lsls	r3, r3, #8
 8013270:	4313      	orrs	r3, r2
 8013272:	461a      	mov	r2, r3
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	4013      	ands	r3, r2
 8013278:	2b00      	cmp	r3, #0
 801327a:	bf14      	ite	ne
 801327c:	2301      	movne	r3, #1
 801327e:	2300      	moveq	r3, #0
 8013280:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8013288:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801328c:	021b      	lsls	r3, r3, #8
 801328e:	4313      	orrs	r3, r2
 8013290:	461a      	mov	r2, r3
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	43db      	mvns	r3, r3
 8013296:	4013      	ands	r3, r2
 8013298:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	b2d1      	uxtb	r1, r2
 80132a0:	2000      	movs	r0, #0
 80132a2:	4301      	orrs	r1, r0
 80132a4:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 80132a8:	0a12      	lsrs	r2, r2, #8
 80132aa:	b292      	uxth	r2, r2
 80132ac:	2100      	movs	r1, #0
 80132ae:	430a      	orrs	r2, r1
 80132b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 80132b4:	7afb      	ldrb	r3, [r7, #11]
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3714      	adds	r7, #20
 80132ba:	46bd      	mov	sp, r7
 80132bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c0:	4770      	bx	lr
 80132c2:	bf00      	nop
 80132c4:	080177ac 	.word	0x080177ac

080132c8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 80132c8:	b480      	push	{r7}
 80132ca:	b083      	sub	sp, #12
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	460b      	mov	r3, r1
 80132d2:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 80132d4:	78fb      	ldrb	r3, [r7, #3]
 80132d6:	2b08      	cmp	r3, #8
 80132d8:	d102      	bne.n	80132e0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	7adb      	ldrb	r3, [r3, #11]
 80132de:	e006      	b.n	80132ee <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 80132e0:	78fb      	ldrb	r3, [r7, #3]
 80132e2:	2b09      	cmp	r3, #9
 80132e4:	d102      	bne.n	80132ec <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	7b1b      	ldrb	r3, [r3, #12]
 80132ea:	e000      	b.n	80132ee <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 80132ec:	2300      	movs	r3, #0
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	370c      	adds	r7, #12
 80132f2:	46bd      	mov	sp, r7
 80132f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f8:	4770      	bx	lr

080132fa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 80132fa:	b480      	push	{r7}
 80132fc:	b083      	sub	sp, #12
 80132fe:	af00      	add	r7, sp, #0
 8013300:	6078      	str	r0, [r7, #4]
 8013302:	460b      	mov	r3, r1
 8013304:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 8013306:	78fb      	ldrb	r3, [r7, #3]
 8013308:	687a      	ldr	r2, [r7, #4]
 801330a:	4413      	add	r3, r2
 801330c:	791b      	ldrb	r3, [r3, #4]
}
 801330e:	4618      	mov	r0, r3
 8013310:	370c      	adds	r7, #12
 8013312:	46bd      	mov	sp, r7
 8013314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013318:	4770      	bx	lr
	...

0801331c <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 801331c:	b580      	push	{r7, lr}
 801331e:	b086      	sub	sp, #24
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	460b      	mov	r3, r1
 8013326:	607a      	str	r2, [r7, #4]
 8013328:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 801332a:	7afb      	ldrb	r3, [r7, #11]
 801332c:	2b01      	cmp	r3, #1
 801332e:	f240 80ba 	bls.w	80134a6 <_ZN9PS4Parser5ParseEhPh+0x18a>
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	2b00      	cmp	r3, #0
 8013336:	f000 80b6 	beq.w	80134a6 <_ZN9PS4Parser5ParseEhPh+0x18a>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	2b01      	cmp	r3, #1
 8013340:	d10e      	bne.n	8013360 <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	1d18      	adds	r0, r3, #4
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	1c59      	adds	r1, r3, #1
 801334a:	7afb      	ldrb	r3, [r7, #11]
 801334c:	3b01      	subs	r3, #1
 801334e:	b2db      	uxtb	r3, r3
 8013350:	2b3c      	cmp	r3, #60	; 0x3c
 8013352:	bf28      	it	cs
 8013354:	233c      	movcs	r3, #60	; 0x3c
 8013356:	b2db      	uxtb	r3, r3
 8013358:	461a      	mov	r2, r3
 801335a:	f002 f957 	bl	801560c <memcpy>
 801335e:	e02a      	b.n	80133b6 <_ZN9PS4Parser5ParseEhPh+0x9a>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	781b      	ldrb	r3, [r3, #0]
 8013364:	2b11      	cmp	r3, #17
 8013366:	d11b      	bne.n	80133a0 <_ZN9PS4Parser5ParseEhPh+0x84>
                        if (len < 4) {
 8013368:	7afb      	ldrb	r3, [r7, #11]
 801336a:	2b03      	cmp	r3, #3
 801336c:	d809      	bhi.n	8013382 <_ZN9PS4Parser5ParseEhPh+0x66>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
 801336e:	2180      	movs	r1, #128	; 0x80
 8013370:	4855      	ldr	r0, [pc, #340]	; (80134c8 <_ZN9PS4Parser5ParseEhPh+0x1ac>)
 8013372:	f001 ffff 	bl	8015374 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (len, 0x80);
 8013376:	7afb      	ldrb	r3, [r7, #11]
 8013378:	2180      	movs	r1, #128	; 0x80
 801337a:	4618      	mov	r0, r3
 801337c:	f7fe f93b 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
#endif
                                return;
 8013380:	e09e      	b.n	80134c0 <_ZN9PS4Parser5ParseEhPh+0x1a4>
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	1d18      	adds	r0, r3, #4
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	1cd9      	adds	r1, r3, #3
 801338a:	7afb      	ldrb	r3, [r7, #11]
 801338c:	3b03      	subs	r3, #3
 801338e:	b2db      	uxtb	r3, r3
 8013390:	2b3c      	cmp	r3, #60	; 0x3c
 8013392:	bf28      	it	cs
 8013394:	233c      	movcs	r3, #60	; 0x3c
 8013396:	b2db      	uxtb	r3, r3
 8013398:	461a      	mov	r2, r3
 801339a:	f002 f937 	bl	801560c <memcpy>
 801339e:	e00a      	b.n	80133b6 <_ZN9PS4Parser5ParseEhPh+0x9a>
                } else {
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nUnknown report id: "), 0x80);
 80133a0:	2180      	movs	r1, #128	; 0x80
 80133a2:	484a      	ldr	r0, [pc, #296]	; (80134cc <_ZN9PS4Parser5ParseEhPh+0x1b0>)
 80133a4:	f001 ffe6 	bl	8015374 <_Z8E_NotifyPKci>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	781b      	ldrb	r3, [r3, #0]
 80133ac:	2180      	movs	r1, #128	; 0x80
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7fe f921 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
#endif
                        return;
 80133b4:	e084      	b.n	80134c0 <_ZN9PS4Parser5ParseEhPh+0x1a4>
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	689b      	ldr	r3, [r3, #8]
 80133ba:	f3c3 0217 	ubfx	r2, r3, #0, #24
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133c2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d06d      	beq.n	80134a6 <_ZN9PS4Parser5ParseEhPh+0x18a>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	689b      	ldr	r3, [r3, #8]
 80133ce:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80133d2:	461a      	mov	r2, r3
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133d8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80133dc:	43db      	mvns	r3, r3
 80133de:	4013      	ands	r3, r2
 80133e0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	b2d1      	uxtb	r1, r2
 80133e8:	2000      	movs	r0, #0
 80133ea:	4301      	orrs	r1, r0
 80133ec:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 80133f0:	0a12      	lsrs	r2, r2, #8
 80133f2:	b292      	uxth	r2, r2
 80133f4:	2100      	movs	r1, #0
 80133f6:	430a      	orrs	r2, r1
 80133f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	689b      	ldr	r3, [r3, #8]
 8013400:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8013404:	68fa      	ldr	r2, [r7, #12]
 8013406:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013408:	f361 0317 	bfi	r3, r1, #0, #24
 801340c:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 801340e:	2300      	movs	r3, #0
 8013410:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8013412:	2100      	movs	r1, #0
 8013414:	68f8      	ldr	r0, [r7, #12]
 8013416:	f7ff fe6f 	bl	80130f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 801341a:	4603      	mov	r3, r0
 801341c:	2b00      	cmp	r3, #0
 801341e:	d003      	beq.n	8013428 <_ZN9PS4Parser5ParseEhPh+0x10c>
                                newDpad |= 1 << UP;
 8013420:	7dfb      	ldrb	r3, [r7, #23]
 8013422:	f043 0301 	orr.w	r3, r3, #1
 8013426:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 8013428:	2101      	movs	r1, #1
 801342a:	68f8      	ldr	r0, [r7, #12]
 801342c:	f7ff fe64 	bl	80130f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8013430:	4603      	mov	r3, r0
 8013432:	2b00      	cmp	r3, #0
 8013434:	d003      	beq.n	801343e <_ZN9PS4Parser5ParseEhPh+0x122>
                                newDpad |= 1 << RIGHT;
 8013436:	7dfb      	ldrb	r3, [r7, #23]
 8013438:	f043 0302 	orr.w	r3, r3, #2
 801343c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 801343e:	2102      	movs	r1, #2
 8013440:	68f8      	ldr	r0, [r7, #12]
 8013442:	f7ff fe59 	bl	80130f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8013446:	4603      	mov	r3, r0
 8013448:	2b00      	cmp	r3, #0
 801344a:	d003      	beq.n	8013454 <_ZN9PS4Parser5ParseEhPh+0x138>
                                newDpad |= 1 << DOWN;
 801344c:	7dfb      	ldrb	r3, [r7, #23]
 801344e:	f043 0304 	orr.w	r3, r3, #4
 8013452:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 8013454:	2103      	movs	r1, #3
 8013456:	68f8      	ldr	r0, [r7, #12]
 8013458:	f7ff fe4e 	bl	80130f8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 801345c:	4603      	mov	r3, r0
 801345e:	2b00      	cmp	r3, #0
 8013460:	d003      	beq.n	801346a <_ZN9PS4Parser5ParseEhPh+0x14e>
                                newDpad |= 1 << LEFT;
 8013462:	7dfb      	ldrb	r3, [r7, #23]
 8013464:	f043 0308 	orr.w	r3, r3, #8
 8013468:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013470:	7dfa      	ldrb	r2, [r7, #23]
 8013472:	429a      	cmp	r2, r3
 8013474:	d017      	beq.n	80134a6 <_ZN9PS4Parser5ParseEhPh+0x18a>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801347c:	b25b      	sxtb	r3, r3
 801347e:	43db      	mvns	r3, r3
 8013480:	b25a      	sxtb	r2, r3
 8013482:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013486:	4013      	ands	r3, r2
 8013488:	b25b      	sxtb	r3, r3
 801348a:	f003 030f 	and.w	r3, r3, #15
 801348e:	b2d9      	uxtb	r1, r3
 8013490:	68fa      	ldr	r2, [r7, #12]
 8013492:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8013496:	f361 0303 	bfi	r3, r1, #0, #4
 801349a:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	7dfa      	ldrb	r2, [r7, #23]
 80134a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d007      	beq.n	80134c0 <_ZN9PS4Parser5ParseEhPh+0x1a4>
                sendOutputReport(&ps4Output); // Send output report
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	68fa      	ldr	r2, [r7, #12]
 80134b8:	3246      	adds	r2, #70	; 0x46
 80134ba:	4611      	mov	r1, r2
 80134bc:	68f8      	ldr	r0, [r7, #12]
 80134be:	4798      	blx	r3
}
 80134c0:	3718      	adds	r7, #24
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}
 80134c6:	bf00      	nop
 80134c8:	08016660 	.word	0x08016660
 80134cc:	08016678 	.word	0x08016678

080134d0 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 80134d0:	b480      	push	{r7}
 80134d2:	b085      	sub	sp, #20
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 80134d8:	2300      	movs	r3, #0
 80134da:	73fb      	strb	r3, [r7, #15]
 80134dc:	7bfb      	ldrb	r3, [r7, #15]
 80134de:	2b03      	cmp	r3, #3
 80134e0:	d808      	bhi.n	80134f4 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 80134e2:	7bfb      	ldrb	r3, [r7, #15]
 80134e4:	687a      	ldr	r2, [r7, #4]
 80134e6:	4413      	add	r3, r2
 80134e8:	227f      	movs	r2, #127	; 0x7f
 80134ea:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 80134ec:	7bfb      	ldrb	r3, [r7, #15]
 80134ee:	3301      	adds	r3, #1
 80134f0:	73fb      	strb	r3, [r7, #15]
 80134f2:	e7f3      	b.n	80134dc <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	6893      	ldr	r3, [r2, #8]
 80134f8:	f36f 0317 	bfc	r3, #0, #24
 80134fc:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013502:	f36f 0317 	bfc	r3, #0, #24
 8013506:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8013508:	2300      	movs	r3, #0
 801350a:	73fb      	strb	r3, [r7, #15]
 801350c:	7bfb      	ldrb	r3, [r7, #15]
 801350e:	2b01      	cmp	r3, #1
 8013510:	d808      	bhi.n	8013524 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8013512:	7bfb      	ldrb	r3, [r7, #15]
 8013514:	687a      	ldr	r2, [r7, #4]
 8013516:	4413      	add	r3, r2
 8013518:	2200      	movs	r2, #0
 801351a:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 801351c:	7bfb      	ldrb	r3, [r7, #15]
 801351e:	3301      	adds	r3, #1
 8013520:	73fb      	strb	r3, [r7, #15]
 8013522:	e7f3      	b.n	801350c <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8013524:	2300      	movs	r3, #0
 8013526:	73fb      	strb	r3, [r7, #15]
 8013528:	7bfb      	ldrb	r3, [r7, #15]
 801352a:	2b02      	cmp	r3, #2
 801352c:	d81b      	bhi.n	8013566 <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 801352e:	2300      	movs	r3, #0
 8013530:	73bb      	strb	r3, [r7, #14]
 8013532:	7bbb      	ldrb	r3, [r7, #14]
 8013534:	2b01      	cmp	r3, #1
 8013536:	d812      	bhi.n	801355e <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 8013538:	7bfa      	ldrb	r2, [r7, #15]
 801353a:	7bbb      	ldrb	r3, [r7, #14]
 801353c:	6879      	ldr	r1, [r7, #4]
 801353e:	0098      	lsls	r0, r3, #2
 8013540:	4613      	mov	r3, r2
 8013542:	00db      	lsls	r3, r3, #3
 8013544:	4413      	add	r3, r2
 8013546:	4403      	add	r3, r0
 8013548:	440b      	add	r3, r1
 801354a:	f103 0220 	add.w	r2, r3, #32
 801354e:	7993      	ldrb	r3, [r2, #6]
 8013550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013554:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8013556:	7bbb      	ldrb	r3, [r7, #14]
 8013558:	3301      	adds	r3, #1
 801355a:	73bb      	strb	r3, [r7, #14]
 801355c:	e7e9      	b.n	8013532 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 801355e:	7bfb      	ldrb	r3, [r7, #15]
 8013560:	3301      	adds	r3, #1
 8013562:	73fb      	strb	r3, [r7, #15]
 8013564:	e7e0      	b.n	8013528 <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	7a13      	ldrb	r3, [r2, #8]
 801356a:	2108      	movs	r1, #8
 801356c:	f361 0303 	bfi	r3, r1, #0, #4
 8013570:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8013578:	2108      	movs	r1, #8
 801357a:	f361 0303 	bfi	r3, r1, #0, #4
 801357e:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8013582:	687a      	ldr	r2, [r7, #4]
 8013584:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8013588:	f36f 0303 	bfc	r3, #0, #4
 801358c:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2200      	movs	r2, #0
 801359c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2200      	movs	r2, #0
 80135b0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2200      	movs	r2, #0
 80135d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2200      	movs	r2, #0
 80135e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 80135e8:	bf00      	nop
 80135ea:	3714      	adds	r7, #20
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr

080135f4 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80135f4:	b580      	push	{r7, lr}
 80135f6:	af00      	add	r7, sp, #0
 80135f8:	2180      	movs	r1, #128	; 0x80
 80135fa:	4803      	ldr	r0, [pc, #12]	; (8013608 <_ZN2P95IsSetEv+0x14>)
 80135fc:	f7ef fe8c 	bl	8003318 <HAL_GPIO_ReadPin>
 8013600:	4603      	mov	r3, r0
 8013602:	4618      	mov	r0, r3
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	40020800 	.word	0x40020800

0801360c <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f001 f9dd 	bl	80149d4 <_ZN8MAX3421eI3P102P9EC1Ev>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	4618      	mov	r0, r3
 801361e:	f001 f9f5 	bl	8014a0c <_ZN15AddressPoolImplILh16EEC1Ev>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2200      	movs	r2, #0
 8013626:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 801362a:	4b05      	ldr	r3, [pc, #20]	; (8013640 <_ZN3USBC1Ev+0x34>)
 801362c:	2211      	movs	r2, #17
 801362e:	701a      	strb	r2, [r3, #0]
        init();
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f000 f807 	bl	8013644 <_ZN3USB4initEv>
}
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	4618      	mov	r0, r3
 801363a:	3708      	adds	r7, #8
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	200056b6 	.word	0x200056b6

08013644 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8013644:	b480      	push	{r7}
 8013646:	b083      	sub	sp, #12
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2200      	movs	r2, #0
 8013650:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8013654:	bf00      	nop
 8013656:	370c      	adds	r7, #12
 8013658:	46bd      	mov	sp, r7
 801365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365e:	4770      	bx	lr

08013660 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8013660:	b580      	push	{r7, lr}
 8013662:	b086      	sub	sp, #24
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	460b      	mov	r3, r1
 801366a:	70fb      	strb	r3, [r7, #3]
 801366c:	4613      	mov	r3, r2
 801366e:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	78fa      	ldrb	r2, [r7, #3]
 8013674:	4611      	mov	r1, r2
 8013676:	4618      	mov	r0, r3
 8013678:	f001 fa02 	bl	8014a80 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 801367c:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d003      	beq.n	801368c <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d101      	bne.n	8013690 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 801368c:	2300      	movs	r3, #0
 801368e:	e018      	b.n	80136c2 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8013696:	2300      	movs	r3, #0
 8013698:	74fb      	strb	r3, [r7, #19]
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	795b      	ldrb	r3, [r3, #5]
 801369e:	7cfa      	ldrb	r2, [r7, #19]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d20d      	bcs.n	80136c0 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	781b      	ldrb	r3, [r3, #0]
 80136a8:	78ba      	ldrb	r2, [r7, #2]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d101      	bne.n	80136b2 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	e007      	b.n	80136c2 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	3303      	adds	r3, #3
 80136b6:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 80136b8:	7cfb      	ldrb	r3, [r7, #19]
 80136ba:	3301      	adds	r3, #1
 80136bc:	74fb      	strb	r3, [r7, #19]
 80136be:	e7ec      	b.n	801369a <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 80136c0:	2300      	movs	r3, #0
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3718      	adds	r7, #24
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}

080136ca <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 80136ca:	b580      	push	{r7, lr}
 80136cc:	b086      	sub	sp, #24
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	60f8      	str	r0, [r7, #12]
 80136d2:	607b      	str	r3, [r7, #4]
 80136d4:	460b      	mov	r3, r1
 80136d6:	72fb      	strb	r3, [r7, #11]
 80136d8:	4613      	mov	r3, r2
 80136da:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d101      	bne.n	80136e6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 80136e2:	23d8      	movs	r3, #216	; 0xd8
 80136e4:	e015      	b.n	8013712 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	7afa      	ldrb	r2, [r7, #11]
 80136ea:	4611      	mov	r1, r2
 80136ec:	4618      	mov	r0, r3
 80136ee:	f001 f9c7 	bl	8014a80 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80136f2:	6178      	str	r0, [r7, #20]

        if(!p)
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d101      	bne.n	80136fe <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80136fa:	23d6      	movs	r3, #214	; 0xd6
 80136fc:	e009      	b.n	8013712 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	7afa      	ldrb	r2, [r7, #11]
 8013702:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 801370a:	697b      	ldr	r3, [r7, #20]
 801370c:	7aba      	ldrb	r2, [r7, #10]
 801370e:	715a      	strb	r2, [r3, #5]

        return 0;
 8013710:	2300      	movs	r3, #0
}
 8013712:	4618      	mov	r0, r3
 8013714:	3718      	adds	r7, #24
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}

0801371a <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 801371a:	b580      	push	{r7, lr}
 801371c:	b086      	sub	sp, #24
 801371e:	af00      	add	r7, sp, #0
 8013720:	60f8      	str	r0, [r7, #12]
 8013722:	607b      	str	r3, [r7, #4]
 8013724:	460b      	mov	r3, r1
 8013726:	72fb      	strb	r3, [r7, #11]
 8013728:	4613      	mov	r3, r2
 801372a:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	7afa      	ldrb	r2, [r7, #11]
 8013730:	4611      	mov	r1, r2
 8013732:	4618      	mov	r0, r3
 8013734:	f001 f9a4 	bl	8014a80 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8013738:	6178      	str	r0, [r7, #20]

        if(!p)
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d101      	bne.n	8013744 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8013740:	23d6      	movs	r3, #214	; 0xd6
 8013742:	e04e      	b.n	80137e2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d101      	bne.n	8013750 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 801374c:	23d7      	movs	r3, #215	; 0xd7
 801374e:	e048      	b.n	80137e2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8013750:	7aba      	ldrb	r2, [r7, #10]
 8013752:	7afb      	ldrb	r3, [r7, #11]
 8013754:	4619      	mov	r1, r3
 8013756:	68f8      	ldr	r0, [r7, #12]
 8013758:	f7ff ff82 	bl	8013660 <_ZN3USB14getEpInfoEntryEhh>
 801375c:	4602      	mov	r2, r0
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d101      	bne.n	801376e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 801376a:	23db      	movs	r3, #219	; 0xdb
 801376c:	e039      	b.n	80137e2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	789b      	ldrb	r3, [r3, #2]
 8013774:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8013778:	b2db      	uxtb	r3, r3
 801377a:	2b0f      	cmp	r3, #15
 801377c:	bf28      	it	cs
 801377e:	230f      	movcs	r3, #15
 8013780:	b2db      	uxtb	r3, r3
 8013782:	461a      	mov	r2, r3
 8013784:	2301      	movs	r3, #1
 8013786:	4093      	lsls	r3, r2
 8013788:	b29a      	uxth	r2, r3
 801378a:	6a3b      	ldr	r3, [r7, #32]
 801378c:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 801378e:	6a3b      	ldr	r3, [r7, #32]
 8013790:	881b      	ldrh	r3, [r3, #0]
 8013792:	3b01      	subs	r3, #1
 8013794:	b29a      	uxth	r2, r3
 8013796:	6a3b      	ldr	r3, [r7, #32]
 8013798:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 801379a:	7afb      	ldrb	r3, [r7, #11]
 801379c:	461a      	mov	r2, r3
 801379e:	21e0      	movs	r1, #224	; 0xe0
 80137a0:	68f8      	ldr	r0, [r7, #12]
 80137a2:	f7ee fcb7 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 80137a6:	21d8      	movs	r1, #216	; 0xd8
 80137a8:	68f8      	ldr	r0, [r7, #12]
 80137aa:	f7ee fd05 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80137ae:	4603      	mov	r3, r0
 80137b0:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	799b      	ldrb	r3, [r3, #6]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d009      	beq.n	80137ce <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 80137c0:	7cfb      	ldrb	r3, [r7, #19]
 80137c2:	4313      	orrs	r3, r2
 80137c4:	b2db      	uxtb	r3, r3
 80137c6:	f043 0302 	orr.w	r3, r3, #2
 80137ca:	b2db      	uxtb	r3, r3
 80137cc:	e003      	b.n	80137d6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 80137ce:	7cfb      	ldrb	r3, [r7, #19]
 80137d0:	f023 0306 	bic.w	r3, r3, #6
 80137d4:	b2db      	uxtb	r3, r3
 80137d6:	461a      	mov	r2, r3
 80137d8:	21d8      	movs	r1, #216	; 0xd8
 80137da:	68f8      	ldr	r0, [r7, #12]
 80137dc:	f7ee fc9a 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 80137e0:	2300      	movs	r3, #0
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	3718      	adds	r7, #24
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}

080137ea <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 80137ea:	b590      	push	{r4, r7, lr}
 80137ec:	b08b      	sub	sp, #44	; 0x2c
 80137ee:	af02      	add	r7, sp, #8
 80137f0:	6078      	str	r0, [r7, #4]
 80137f2:	4608      	mov	r0, r1
 80137f4:	4611      	mov	r1, r2
 80137f6:	461a      	mov	r2, r3
 80137f8:	4603      	mov	r3, r0
 80137fa:	70fb      	strb	r3, [r7, #3]
 80137fc:	460b      	mov	r3, r1
 80137fe:	70bb      	strb	r3, [r7, #2]
 8013800:	4613      	mov	r3, r2
 8013802:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8013804:	2300      	movs	r3, #0
 8013806:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8013808:	2300      	movs	r3, #0
 801380a:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 801380c:	2300      	movs	r3, #0
 801380e:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8013810:	f107 000c 	add.w	r0, r7, #12
 8013814:	78ba      	ldrb	r2, [r7, #2]
 8013816:	78f9      	ldrb	r1, [r7, #3]
 8013818:	f107 030a 	add.w	r3, r7, #10
 801381c:	9300      	str	r3, [sp, #0]
 801381e:	4603      	mov	r3, r0
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f7ff ff7a 	bl	801371a <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8013826:	4603      	mov	r3, r0
 8013828:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 801382a:	7ffb      	ldrb	r3, [r7, #31]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d001      	beq.n	8013834 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8013830:	7ffb      	ldrb	r3, [r7, #31]
 8013832:	e0ae      	b.n	8013992 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8013834:	787b      	ldrb	r3, [r7, #1]
 8013836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801383a:	2b00      	cmp	r3, #0
 801383c:	bfcc      	ite	gt
 801383e:	2301      	movgt	r3, #1
 8013840:	2300      	movle	r3, #0
 8013842:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8013844:	787b      	ldrb	r3, [r7, #1]
 8013846:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8013848:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801384c:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 801384e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013852:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8013854:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013858:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 801385a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801385c:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 801385e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013862:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8013864:	f107 0310 	add.w	r3, r7, #16
 8013868:	2208      	movs	r2, #8
 801386a:	2120      	movs	r1, #32
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f001 f92d 	bl	8014acc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8013872:	897b      	ldrh	r3, [r7, #10]
 8013874:	78ba      	ldrb	r2, [r7, #2]
 8013876:	2110      	movs	r1, #16
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f000 fb14 	bl	8013ea6 <_ZN3USB11dispatchPktEhht>
 801387e:	4603      	mov	r3, r0
 8013880:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8013882:	7ffb      	ldrb	r3, [r7, #31]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d001      	beq.n	801388c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8013888:	7ffb      	ldrb	r3, [r7, #31]
 801388a:	e082      	b.n	8013992 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 801388c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801388e:	2b00      	cmp	r3, #0
 8013890:	d072      	beq.n	8013978 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8013892:	7efb      	ldrb	r3, [r7, #27]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d057      	beq.n	8013948 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8013898:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801389c:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 801389e:	68fa      	ldr	r2, [r7, #12]
 80138a0:	7893      	ldrb	r3, [r2, #2]
 80138a2:	f043 0302 	orr.w	r3, r3, #2
 80138a6:	7093      	strb	r3, [r2, #2]

                        while(left) {
 80138a8:	8bbb      	ldrh	r3, [r7, #28]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d05f      	beq.n	801396e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 80138ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80138b2:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 80138b4:	68f9      	ldr	r1, [r7, #12]
 80138b6:	897a      	ldrh	r2, [r7, #10]
 80138b8:	f107 0008 	add.w	r0, r7, #8
 80138bc:	2300      	movs	r3, #0
 80138be:	9301      	str	r3, [sp, #4]
 80138c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80138c2:	9300      	str	r3, [sp, #0]
 80138c4:	4603      	mov	r3, r0
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	f000 f8c8 	bl	8013a5c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 80138cc:	4603      	mov	r3, r0
 80138ce:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 80138d0:	7ffb      	ldrb	r3, [r7, #31]
 80138d2:	2b06      	cmp	r3, #6
 80138d4:	d114      	bne.n	8013900 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 80138d6:	21f8      	movs	r1, #248	; 0xf8
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f7ee fc6d 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80138de:	4603      	mov	r3, r0
 80138e0:	f003 0320 	and.w	r3, r3, #32
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	bf0c      	ite	eq
 80138e8:	2301      	moveq	r3, #1
 80138ea:	2300      	movne	r3, #0
 80138ec:	b2db      	uxtb	r3, r3
 80138ee:	68fa      	ldr	r2, [r7, #12]
 80138f0:	f003 0301 	and.w	r3, r3, #1
 80138f4:	b2d9      	uxtb	r1, r3
 80138f6:	7893      	ldrb	r3, [r2, #2]
 80138f8:	f361 0341 	bfi	r3, r1, #1, #1
 80138fc:	7093      	strb	r3, [r2, #2]
 80138fe:	e7d3      	b.n	80138a8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8013900:	7ffb      	ldrb	r3, [r7, #31]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d001      	beq.n	801390a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8013906:	7ffb      	ldrb	r3, [r7, #31]
 8013908:	e043      	b.n	8013992 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 801390a:	7ffb      	ldrb	r3, [r7, #31]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d111      	bne.n	8013934 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8013910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013912:	2b00      	cmp	r3, #0
 8013914:	d00e      	beq.n	8013934 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 8013916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	681c      	ldr	r4, [r3, #0]
 801391c:	8939      	ldrh	r1, [r7, #8]
 801391e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013922:	8bbb      	ldrh	r3, [r7, #28]
 8013924:	1ad3      	subs	r3, r2, r3
 8013926:	b29b      	uxth	r3, r3
 8013928:	833b      	strh	r3, [r7, #24]
 801392a:	f107 0318 	add.w	r3, r7, #24
 801392e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013930:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013932:	47a0      	blx	r4

                                left -= read;
 8013934:	893b      	ldrh	r3, [r7, #8]
 8013936:	8bba      	ldrh	r2, [r7, #28]
 8013938:	1ad3      	subs	r3, r2, r3
 801393a:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 801393c:	893b      	ldrh	r3, [r7, #8]
 801393e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013942:	429a      	cmp	r2, r3
 8013944:	d812      	bhi.n	801396c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 8013946:	e7af      	b.n	80138a8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 8013948:	68fa      	ldr	r2, [r7, #12]
 801394a:	7893      	ldrb	r3, [r2, #2]
 801394c:	f043 0301 	orr.w	r3, r3, #1
 8013950:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8013952:	68f9      	ldr	r1, [r7, #12]
 8013954:	897a      	ldrh	r2, [r7, #10]
 8013956:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 801395a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801395c:	9300      	str	r3, [sp, #0]
 801395e:	4603      	mov	r3, r0
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f000 f975 	bl	8013c50 <_ZN3USB11OutTransferEP6EpInfottPh>
 8013966:	4603      	mov	r3, r0
 8013968:	77fb      	strb	r3, [r7, #31]
 801396a:	e000      	b.n	801396e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 801396c:	bf00      	nop
                }
                if(rcode) //return error
 801396e:	7ffb      	ldrb	r3, [r7, #31]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d001      	beq.n	8013978 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8013974:	7ffb      	ldrb	r3, [r7, #31]
 8013976:	e00c      	b.n	8013992 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 8013978:	7efb      	ldrb	r3, [r7, #27]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d001      	beq.n	8013982 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 801397e:	21a0      	movs	r1, #160	; 0xa0
 8013980:	e000      	b.n	8013984 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8013982:	2180      	movs	r1, #128	; 0x80
 8013984:	897b      	ldrh	r3, [r7, #10]
 8013986:	78ba      	ldrb	r2, [r7, #2]
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f000 fa8c 	bl	8013ea6 <_ZN3USB11dispatchPktEhht>
 801398e:	4603      	mov	r3, r0
 8013990:	bf00      	nop
}
 8013992:	4618      	mov	r0, r3
 8013994:	3724      	adds	r7, #36	; 0x24
 8013996:	46bd      	mov	sp, r7
 8013998:	bd90      	pop	{r4, r7, pc}
	...

0801399c <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 801399c:	b580      	push	{r7, lr}
 801399e:	b08a      	sub	sp, #40	; 0x28
 80139a0:	af02      	add	r7, sp, #8
 80139a2:	60f8      	str	r0, [r7, #12]
 80139a4:	607b      	str	r3, [r7, #4]
 80139a6:	460b      	mov	r3, r1
 80139a8:	72fb      	strb	r3, [r7, #11]
 80139aa:	4613      	mov	r3, r2
 80139ac:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 80139ae:	2300      	movs	r3, #0
 80139b0:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 80139b2:	2300      	movs	r3, #0
 80139b4:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80139b6:	f107 0018 	add.w	r0, r7, #24
 80139ba:	7aba      	ldrb	r2, [r7, #10]
 80139bc:	7af9      	ldrb	r1, [r7, #11]
 80139be:	f107 0316 	add.w	r3, r7, #22
 80139c2:	9300      	str	r3, [sp, #0]
 80139c4:	4603      	mov	r3, r0
 80139c6:	68f8      	ldr	r0, [r7, #12]
 80139c8:	f7ff fea7 	bl	801371a <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80139cc:	4603      	mov	r3, r0
 80139ce:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 80139d0:	7ffb      	ldrb	r3, [r7, #31]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d028      	beq.n	8013a28 <_ZN3USB10inTransferEhhPtPhh+0x8c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 80139d6:	2181      	movs	r1, #129	; 0x81
 80139d8:	481c      	ldr	r0, [pc, #112]	; (8013a4c <_ZN3USB10inTransferEhhPtPhh+0xb0>)
 80139da:	f001 fccb 	bl	8015374 <_Z8E_NotifyPKci>
 80139de:	7ffb      	ldrb	r3, [r7, #31]
 80139e0:	2181      	movs	r1, #129	; 0x81
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7fd fe07 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
 80139e8:	2181      	movs	r1, #129	; 0x81
 80139ea:	4819      	ldr	r0, [pc, #100]	; (8013a50 <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 80139ec:	f001 fcc2 	bl	8015374 <_Z8E_NotifyPKci>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 80139f0:	2181      	movs	r1, #129	; 0x81
 80139f2:	4818      	ldr	r0, [pc, #96]	; (8013a54 <_ZN3USB10inTransferEhhPtPhh+0xb8>)
 80139f4:	f001 fcbe 	bl	8015374 <_Z8E_NotifyPKci>
 80139f8:	7afb      	ldrb	r3, [r7, #11]
 80139fa:	2181      	movs	r1, #129	; 0x81
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7fd fdfa 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
 8013a02:	2181      	movs	r1, #129	; 0x81
 8013a04:	4812      	ldr	r0, [pc, #72]	; (8013a50 <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 8013a06:	f001 fcb5 	bl	8015374 <_Z8E_NotifyPKci>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 8013a0a:	2181      	movs	r1, #129	; 0x81
 8013a0c:	4812      	ldr	r0, [pc, #72]	; (8013a58 <_ZN3USB10inTransferEhhPtPhh+0xbc>)
 8013a0e:	f001 fcb1 	bl	8015374 <_Z8E_NotifyPKci>
 8013a12:	7abb      	ldrb	r3, [r7, #10]
 8013a14:	2181      	movs	r1, #129	; 0x81
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7fd fded 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
 8013a1c:	2181      	movs	r1, #129	; 0x81
 8013a1e:	480c      	ldr	r0, [pc, #48]	; (8013a50 <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 8013a20:	f001 fca8 	bl	8015374 <_Z8E_NotifyPKci>
                return rcode;
 8013a24:	7ffb      	ldrb	r3, [r7, #31]
 8013a26:	e00c      	b.n	8013a42 <_ZN3USB10inTransferEhhPtPhh+0xa6>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 8013a28:	69b9      	ldr	r1, [r7, #24]
 8013a2a:	8afa      	ldrh	r2, [r7, #22]
 8013a2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013a30:	9301      	str	r3, [sp, #4]
 8013a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a34:	9300      	str	r3, [sp, #0]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f000 f80f 	bl	8013a5c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	bf00      	nop
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3720      	adds	r7, #32
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	08016690 	.word	0x08016690
 8013a50:	080166b8 	.word	0x080166b8
 8013a54:	080166bc 	.word	0x080166bc
 8013a58:	080166e0 	.word	0x080166e0

08013a5c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b086      	sub	sp, #24
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	60f8      	str	r0, [r7, #12]
 8013a64:	60b9      	str	r1, [r7, #8]
 8013a66:	603b      	str	r3, [r7, #0]
 8013a68:	4613      	mov	r3, r2
 8013a6a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	881b      	ldrh	r3, [r3, #0]
 8013a74:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	785b      	ldrb	r3, [r3, #1]
 8013a7a:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	2200      	movs	r2, #0
 8013a80:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	789b      	ldrb	r3, [r3, #2]
 8013a86:	f003 0302 	and.w	r3, r3, #2
 8013a8a:	b2db      	uxtb	r3, r3
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d001      	beq.n	8013a94 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8013a90:	2320      	movs	r3, #32
 8013a92:	e000      	b.n	8013a96 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8013a94:	2310      	movs	r3, #16
 8013a96:	461a      	mov	r2, r3
 8013a98:	21e8      	movs	r1, #232	; 0xe8
 8013a9a:	68f8      	ldr	r0, [r7, #12]
 8013a9c:	f7ee fb3a 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	781a      	ldrb	r2, [r3, #0]
 8013aa4:	88fb      	ldrh	r3, [r7, #6]
 8013aa6:	2100      	movs	r1, #0
 8013aa8:	68f8      	ldr	r0, [r7, #12]
 8013aaa:	f000 f9fc 	bl	8013ea6 <_ZN3USB11dispatchPktEhht>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8013ab2:	7dfb      	ldrb	r3, [r7, #23]
 8013ab4:	2b06      	cmp	r3, #6
 8013ab6:	d123      	bne.n	8013b00 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8013ab8:	21f8      	movs	r1, #248	; 0xf8
 8013aba:	68f8      	ldr	r0, [r7, #12]
 8013abc:	f7ee fb7c 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	f003 0310 	and.w	r3, r3, #16
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	bf0c      	ite	eq
 8013aca:	2301      	moveq	r3, #1
 8013acc:	2300      	movne	r3, #0
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	f003 0301 	and.w	r3, r3, #1
 8013ad4:	b2d9      	uxtb	r1, r3
 8013ad6:	68ba      	ldr	r2, [r7, #8]
 8013ad8:	7893      	ldrb	r3, [r2, #2]
 8013ada:	f361 0341 	bfi	r3, r1, #1, #1
 8013ade:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	789b      	ldrb	r3, [r3, #2]
 8013ae4:	f003 0302 	and.w	r3, r3, #2
 8013ae8:	b2db      	uxtb	r3, r3
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d001      	beq.n	8013af2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 8013aee:	2320      	movs	r3, #32
 8013af0:	e000      	b.n	8013af4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 8013af2:	2310      	movs	r3, #16
 8013af4:	461a      	mov	r2, r3
 8013af6:	21e8      	movs	r1, #232	; 0xe8
 8013af8:	68f8      	ldr	r0, [r7, #12]
 8013afa:	f7ee fb0b 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 8013afe:	e06e      	b.n	8013bde <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 8013b00:	7dfb      	ldrb	r3, [r7, #23]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d16c      	bne.n	8013be0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8013b06:	21c8      	movs	r1, #200	; 0xc8
 8013b08:	68f8      	ldr	r0, [r7, #12]
 8013b0a:	f7ee fb55 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	f003 0304 	and.w	r3, r3, #4
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	bf0c      	ite	eq
 8013b18:	2301      	moveq	r3, #1
 8013b1a:	2300      	movne	r3, #0
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d002      	beq.n	8013b28 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8013b22:	23f0      	movs	r3, #240	; 0xf0
 8013b24:	75fb      	strb	r3, [r7, #23]
                        break;
 8013b26:	e05c      	b.n	8013be2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8013b28:	2130      	movs	r1, #48	; 0x30
 8013b2a:	68f8      	ldr	r0, [r7, #12]
 8013b2c:	f7ee fb44 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013b30:	4603      	mov	r3, r0
 8013b32:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8013b34:	7dba      	ldrb	r2, [r7, #22]
 8013b36:	8a7b      	ldrh	r3, [r7, #18]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	dd01      	ble.n	8013b40 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 8013b3c:	8a7b      	ldrh	r3, [r7, #18]
 8013b3e:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013b46:	b29b      	uxth	r3, r3
 8013b48:	8a7a      	ldrh	r2, [r7, #18]
 8013b4a:	1ad3      	subs	r3, r2, r3
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8013b50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	da01      	bge.n	8013b5c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 8013b5c:	7dba      	ldrb	r2, [r7, #22]
 8013b5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013b62:	4293      	cmp	r3, r2
 8013b64:	bfa8      	it	ge
 8013b66:	4613      	movge	r3, r2
 8013b68:	b2da      	uxtb	r2, r3
 8013b6a:	6a3b      	ldr	r3, [r7, #32]
 8013b6c:	2108      	movs	r1, #8
 8013b6e:	68f8      	ldr	r0, [r7, #12]
 8013b70:	f000 ffda 	bl	8014b28 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8013b74:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8013b76:	2204      	movs	r2, #4
 8013b78:	21c8      	movs	r1, #200	; 0xc8
 8013b7a:	68f8      	ldr	r0, [r7, #12]
 8013b7c:	f7ee faca 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	881a      	ldrh	r2, [r3, #0]
 8013b84:	7dbb      	ldrb	r3, [r7, #22]
 8013b86:	b29b      	uxth	r3, r3
 8013b88:	4413      	add	r3, r2
 8013b8a:	b29a      	uxth	r2, r3
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8013b90:	7dba      	ldrb	r2, [r7, #22]
 8013b92:	7c7b      	ldrb	r3, [r7, #17]
 8013b94:	429a      	cmp	r2, r3
 8013b96:	d304      	bcc.n	8013ba2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	881b      	ldrh	r3, [r3, #0]
 8013b9c:	8a7a      	ldrh	r2, [r7, #18]
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d813      	bhi.n	8013bca <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8013ba2:	21f8      	movs	r1, #248	; 0xf8
 8013ba4:	68f8      	ldr	r0, [r7, #12]
 8013ba6:	f7ee fb07 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013baa:	4603      	mov	r3, r0
 8013bac:	f003 0310 	and.w	r3, r3, #16
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d001      	beq.n	8013bb8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8013bb4:	2101      	movs	r1, #1
 8013bb6:	e000      	b.n	8013bba <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8013bb8:	2100      	movs	r1, #0
 8013bba:	68ba      	ldr	r2, [r7, #8]
 8013bbc:	7893      	ldrb	r3, [r2, #2]
 8013bbe:	f361 0341 	bfi	r3, r1, #1, #1
 8013bc2:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	75fb      	strb	r3, [r7, #23]
                        break;
 8013bc8:	e00b      	b.n	8013be2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 8013bca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	f43f af66 	beq.w	8013aa0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8013bd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7ee fe1b 	bl	8002814 <HAL_Delay>
        } //while( 1 )
 8013bde:	e75f      	b.n	8013aa0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8013be0:	bf00      	nop
        return ( rcode);
 8013be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3718      	adds	r7, #24
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}

08013bec <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b088      	sub	sp, #32
 8013bf0:	af02      	add	r7, sp, #8
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	4608      	mov	r0, r1
 8013bf6:	4611      	mov	r1, r2
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	70fb      	strb	r3, [r7, #3]
 8013bfe:	460b      	mov	r3, r1
 8013c00:	70bb      	strb	r3, [r7, #2]
 8013c02:	4613      	mov	r3, r2
 8013c04:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8013c06:	2300      	movs	r3, #0
 8013c08:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8013c0e:	f107 0010 	add.w	r0, r7, #16
 8013c12:	78ba      	ldrb	r2, [r7, #2]
 8013c14:	78f9      	ldrb	r1, [r7, #3]
 8013c16:	f107 030e 	add.w	r3, r7, #14
 8013c1a:	9300      	str	r3, [sp, #0]
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f7ff fd7b 	bl	801371a <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8013c24:	4603      	mov	r3, r0
 8013c26:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8013c28:	7dfb      	ldrb	r3, [r7, #23]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d001      	beq.n	8013c32 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 8013c2e:	7dfb      	ldrb	r3, [r7, #23]
 8013c30:	e00a      	b.n	8013c48 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8013c32:	6939      	ldr	r1, [r7, #16]
 8013c34:	89fa      	ldrh	r2, [r7, #14]
 8013c36:	8838      	ldrh	r0, [r7, #0]
 8013c38:	6a3b      	ldr	r3, [r7, #32]
 8013c3a:	9300      	str	r3, [sp, #0]
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f000 f806 	bl	8013c50 <_ZN3USB11OutTransferEP6EpInfottPh>
 8013c44:	4603      	mov	r3, r0
 8013c46:	bf00      	nop
}
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3718      	adds	r7, #24
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b08a      	sub	sp, #40	; 0x28
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	60f8      	str	r0, [r7, #12]
 8013c58:	60b9      	str	r1, [r7, #8]
 8013c5a:	4611      	mov	r1, r2
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	460b      	mov	r3, r1
 8013c60:	80fb      	strh	r3, [r7, #6]
 8013c62:	4613      	mov	r3, r2
 8013c64:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8013c66:	2300      	movs	r3, #0
 8013c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 8013c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c6e:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8013c70:	88bb      	ldrh	r3, [r7, #4]
 8013c72:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8013c74:	68bb      	ldr	r3, [r7, #8]
 8013c76:	785b      	ldrb	r3, [r3, #1]
 8013c78:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 8013c7a:	7efb      	ldrb	r3, [r7, #27]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d002      	beq.n	8013c86 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 8013c80:	7efb      	ldrb	r3, [r7, #27]
 8013c82:	2b40      	cmp	r3, #64	; 0x40
 8013c84:	d901      	bls.n	8013c8a <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8013c86:	23da      	movs	r3, #218	; 0xda
 8013c88:	e109      	b.n	8013e9e <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8013c8a:	f7ee fdb7 	bl	80027fc <HAL_GetTick>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013c94:	3308      	adds	r3, #8
 8013c96:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	789b      	ldrb	r3, [r3, #2]
 8013c9c:	f003 0301 	and.w	r3, r3, #1
 8013ca0:	b2db      	uxtb	r3, r3
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d001      	beq.n	8013caa <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 8013ca6:	2380      	movs	r3, #128	; 0x80
 8013ca8:	e000      	b.n	8013cac <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 8013caa:	2340      	movs	r3, #64	; 0x40
 8013cac:	461a      	mov	r2, r3
 8013cae:	21e8      	movs	r1, #232	; 0xe8
 8013cb0:	68f8      	ldr	r0, [r7, #12]
 8013cb2:	f7ee fa2f 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 8013cb6:	8bbb      	ldrh	r3, [r7, #28]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	f000 80da 	beq.w	8013e72 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 8013cc8:	7efb      	ldrb	r3, [r7, #27]
 8013cca:	b29b      	uxth	r3, r3
 8013ccc:	8bba      	ldrh	r2, [r7, #28]
 8013cce:	4293      	cmp	r3, r2
 8013cd0:	bf28      	it	cs
 8013cd2:	4613      	movcs	r3, r2
 8013cd4:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 8013cd6:	8a7b      	ldrh	r3, [r7, #18]
 8013cd8:	b2da      	uxtb	r2, r3
 8013cda:	6a3b      	ldr	r3, [r7, #32]
 8013cdc:	2110      	movs	r1, #16
 8013cde:	68f8      	ldr	r0, [r7, #12]
 8013ce0:	f000 fef4 	bl	8014acc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 8013ce4:	8a7b      	ldrh	r3, [r7, #18]
 8013ce6:	b2db      	uxtb	r3, r3
 8013ce8:	461a      	mov	r2, r3
 8013cea:	2138      	movs	r1, #56	; 0x38
 8013cec:	68f8      	ldr	r0, [r7, #12]
 8013cee:	f7ee fa11 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	781b      	ldrb	r3, [r3, #0]
 8013cf6:	f043 0320 	orr.w	r3, r3, #32
 8013cfa:	b2db      	uxtb	r3, r3
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	21f0      	movs	r1, #240	; 0xf0
 8013d00:	68f8      	ldr	r0, [r7, #12]
 8013d02:	f7ee fa07 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8013d06:	21c8      	movs	r1, #200	; 0xc8
 8013d08:	68f8      	ldr	r0, [r7, #12]
 8013d0a:	f7ee fa55 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	b25b      	sxtb	r3, r3
 8013d12:	43db      	mvns	r3, r3
 8013d14:	b2db      	uxtb	r3, r3
 8013d16:	09db      	lsrs	r3, r3, #7
 8013d18:	b2db      	uxtb	r3, r3
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d000      	beq.n	8013d20 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 8013d1e:	e7f2      	b.n	8013d06 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8013d20:	2280      	movs	r2, #128	; 0x80
 8013d22:	21c8      	movs	r1, #200	; 0xc8
 8013d24:	68f8      	ldr	r0, [r7, #12]
 8013d26:	f7ee f9f5 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 8013d2a:	21f8      	movs	r1, #248	; 0xf8
 8013d2c:	68f8      	ldr	r0, [r7, #12]
 8013d2e:	f7ee fa43 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013d32:	4603      	mov	r3, r0
 8013d34:	f003 030f 	and.w	r3, r3, #15
 8013d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 8013d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d008      	beq.n	8013d56 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8013d44:	f7ee fd5a 	bl	80027fc <HAL_GetTick>
 8013d48:	4602      	mov	r2, r0
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	1ad3      	subs	r3, r2, r3
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	da01      	bge.n	8013d56 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8013d52:	2301      	movs	r3, #1
 8013d54:	e000      	b.n	8013d58 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8013d56:	2300      	movs	r3, #0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	f000 8081 	beq.w	8013e60 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 8013d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d62:	2b0e      	cmp	r3, #14
 8013d64:	d012      	beq.n	8013d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8013d66:	2b0e      	cmp	r3, #14
 8013d68:	f300 8085 	bgt.w	8013e76 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 8013d6c:	2b04      	cmp	r3, #4
 8013d6e:	d002      	beq.n	8013d76 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 8013d70:	2b06      	cmp	r3, #6
 8013d72:	d015      	beq.n	8013da0 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8013d74:	e07f      	b.n	8013e76 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8013d76:	8bfb      	ldrh	r3, [r7, #30]
 8013d78:	3301      	adds	r3, #1
 8013d7a:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 8013d7c:	88fb      	ldrh	r3, [r7, #6]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d032      	beq.n	8013de8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 8013d82:	8bfa      	ldrh	r2, [r7, #30]
 8013d84:	88fb      	ldrh	r3, [r7, #6]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d12e      	bne.n	8013de8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 8013d8a:	e075      	b.n	8013e78 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 8013d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d90:	3301      	adds	r3, #1
 8013d92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8013d96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d9a:	2b03      	cmp	r3, #3
 8013d9c:	d126      	bne.n	8013dec <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 8013d9e:	e06b      	b.n	8013e78 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8013da0:	21f8      	movs	r1, #248	; 0xf8
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	f7ee fa08 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013da8:	4603      	mov	r3, r0
 8013daa:	f003 0320 	and.w	r3, r3, #32
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	bf0c      	ite	eq
 8013db2:	2301      	moveq	r3, #1
 8013db4:	2300      	movne	r3, #0
 8013db6:	b2db      	uxtb	r3, r3
 8013db8:	f003 0301 	and.w	r3, r3, #1
 8013dbc:	b2d9      	uxtb	r1, r3
 8013dbe:	68ba      	ldr	r2, [r7, #8]
 8013dc0:	7893      	ldrb	r3, [r2, #2]
 8013dc2:	f361 0300 	bfi	r3, r1, #0, #1
 8013dc6:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	789b      	ldrb	r3, [r3, #2]
 8013dcc:	f003 0301 	and.w	r3, r3, #1
 8013dd0:	b2db      	uxtb	r3, r3
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d001      	beq.n	8013dda <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 8013dd6:	2380      	movs	r3, #128	; 0x80
 8013dd8:	e000      	b.n	8013ddc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 8013dda:	2340      	movs	r3, #64	; 0x40
 8013ddc:	461a      	mov	r2, r3
 8013dde:	21e8      	movs	r1, #232	; 0xe8
 8013de0:	68f8      	ldr	r0, [r7, #12]
 8013de2:	f7ee f997 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 8013de6:	e002      	b.n	8013dee <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8013de8:	bf00      	nop
 8013dea:	e000      	b.n	8013dee <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8013dec:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 8013dee:	2200      	movs	r2, #0
 8013df0:	2138      	movs	r1, #56	; 0x38
 8013df2:	68f8      	ldr	r0, [r7, #12]
 8013df4:	f7ee f98e 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 8013df8:	6a3b      	ldr	r3, [r7, #32]
 8013dfa:	781b      	ldrb	r3, [r3, #0]
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	2110      	movs	r1, #16
 8013e00:	68f8      	ldr	r0, [r7, #12]
 8013e02:	f7ee f987 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 8013e06:	8a7b      	ldrh	r3, [r7, #18]
 8013e08:	b2db      	uxtb	r3, r3
 8013e0a:	461a      	mov	r2, r3
 8013e0c:	2138      	movs	r1, #56	; 0x38
 8013e0e:	68f8      	ldr	r0, [r7, #12]
 8013e10:	f7ee f980 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	f043 0320 	orr.w	r3, r3, #32
 8013e1c:	b2db      	uxtb	r3, r3
 8013e1e:	461a      	mov	r2, r3
 8013e20:	21f0      	movs	r1, #240	; 0xf0
 8013e22:	68f8      	ldr	r0, [r7, #12]
 8013e24:	f7ee f976 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8013e28:	21c8      	movs	r1, #200	; 0xc8
 8013e2a:	68f8      	ldr	r0, [r7, #12]
 8013e2c:	f7ee f9c4 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013e30:	4603      	mov	r3, r0
 8013e32:	b25b      	sxtb	r3, r3
 8013e34:	43db      	mvns	r3, r3
 8013e36:	b2db      	uxtb	r3, r3
 8013e38:	09db      	lsrs	r3, r3, #7
 8013e3a:	b2db      	uxtb	r3, r3
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d000      	beq.n	8013e42 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8013e40:	e7f2      	b.n	8013e28 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8013e42:	2280      	movs	r2, #128	; 0x80
 8013e44:	21c8      	movs	r1, #200	; 0xc8
 8013e46:	68f8      	ldr	r0, [r7, #12]
 8013e48:	f7ee f964 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 8013e4c:	21f8      	movs	r1, #248	; 0xf8
 8013e4e:	68f8      	ldr	r0, [r7, #12]
 8013e50:	f7ee f9b2 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013e54:	4603      	mov	r3, r0
 8013e56:	f003 030f 	and.w	r3, r3, #15
 8013e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 8013e5e:	e76d      	b.n	8013d3c <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 8013e60:	8bba      	ldrh	r2, [r7, #28]
 8013e62:	8a7b      	ldrh	r3, [r7, #18]
 8013e64:	1ad3      	subs	r3, r2, r3
 8013e66:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8013e68:	8a7b      	ldrh	r3, [r7, #18]
 8013e6a:	6a3a      	ldr	r2, [r7, #32]
 8013e6c:	4413      	add	r3, r2
 8013e6e:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 8013e70:	e721      	b.n	8013cb6 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 8013e72:	bf00      	nop
 8013e74:	e000      	b.n	8013e78 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8013e76:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8013e78:	21f8      	movs	r1, #248	; 0xf8
 8013e7a:	68f8      	ldr	r0, [r7, #12]
 8013e7c:	f7ee f99c 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013e80:	4603      	mov	r3, r0
 8013e82:	f003 0320 	and.w	r3, r3, #32
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 8013e8a:	2101      	movs	r1, #1
 8013e8c:	e000      	b.n	8013e90 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 8013e8e:	2100      	movs	r1, #0
 8013e90:	68ba      	ldr	r2, [r7, #8]
 8013e92:	7893      	ldrb	r3, [r2, #2]
 8013e94:	f361 0300 	bfi	r3, r1, #0, #1
 8013e98:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 8013e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	3728      	adds	r7, #40	; 0x28
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}

08013ea6 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 8013ea6:	b580      	push	{r7, lr}
 8013ea8:	b086      	sub	sp, #24
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	6078      	str	r0, [r7, #4]
 8013eae:	4608      	mov	r0, r1
 8013eb0:	4611      	mov	r1, r2
 8013eb2:	461a      	mov	r2, r3
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	70fb      	strb	r3, [r7, #3]
 8013eb8:	460b      	mov	r3, r1
 8013eba:	70bb      	strb	r3, [r7, #2]
 8013ebc:	4613      	mov	r3, r2
 8013ebe:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8013ec0:	f7ee fc9c 	bl	80027fc <HAL_GetTick>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013eca:	3308      	adds	r3, #8
 8013ecc:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 8013ece:	2300      	movs	r3, #0
 8013ed0:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8013eda:	f7ee fc8f 	bl	80027fc <HAL_GetTick>
 8013ede:	4602      	mov	r2, r0
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	1ad3      	subs	r3, r2, r3
 8013ee4:	0fdb      	lsrs	r3, r3, #31
 8013ee6:	b2db      	uxtb	r3, r3
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d04c      	beq.n	8013f86 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 8013eec:	78fa      	ldrb	r2, [r7, #3]
 8013eee:	78bb      	ldrb	r3, [r7, #2]
 8013ef0:	4313      	orrs	r3, r2
 8013ef2:	b2db      	uxtb	r3, r3
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	21f0      	movs	r1, #240	; 0xf0
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f7ee f90b 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 8013efe:	23ff      	movs	r3, #255	; 0xff
 8013f00:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 8013f02:	f7ee fc7b 	bl	80027fc <HAL_GetTick>
 8013f06:	4602      	mov	r2, r0
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	1ad3      	subs	r3, r2, r3
 8013f0c:	0fdb      	lsrs	r3, r3, #31
 8013f0e:	b2db      	uxtb	r3, r3
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d010      	beq.n	8013f36 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 8013f14:	21c8      	movs	r1, #200	; 0xc8
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f7ee f94e 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 8013f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	daec      	bge.n	8013f02 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 8013f28:	2280      	movs	r2, #128	; 0x80
 8013f2a:	21c8      	movs	r1, #200	; 0xc8
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f7ee f8f1 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 8013f32:	2300      	movs	r3, #0
 8013f34:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 8013f36:	21f8      	movs	r1, #248	; 0xf8
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f7ee f93d 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	f003 030f 	and.w	r3, r3, #15
 8013f44:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8013f46:	7dfb      	ldrb	r3, [r7, #23]
 8013f48:	2b04      	cmp	r3, #4
 8013f4a:	d002      	beq.n	8013f52 <_ZN3USB11dispatchPktEhht+0xac>
 8013f4c:	2b0e      	cmp	r3, #14
 8013f4e:	d00c      	beq.n	8013f6a <_ZN3USB11dispatchPktEhht+0xc4>
 8013f50:	e013      	b.n	8013f7a <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8013f52:	8abb      	ldrh	r3, [r7, #20]
 8013f54:	3301      	adds	r3, #1
 8013f56:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8013f58:	883b      	ldrh	r3, [r7, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d00f      	beq.n	8013f7e <_ZN3USB11dispatchPktEhht+0xd8>
 8013f5e:	8aba      	ldrh	r2, [r7, #20]
 8013f60:	883b      	ldrh	r3, [r7, #0]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d10b      	bne.n	8013f7e <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8013f66:	7dfb      	ldrb	r3, [r7, #23]
 8013f68:	e00e      	b.n	8013f88 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 8013f6a:	7dbb      	ldrb	r3, [r7, #22]
 8013f6c:	3301      	adds	r3, #1
 8013f6e:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 8013f70:	7dbb      	ldrb	r3, [r7, #22]
 8013f72:	2b03      	cmp	r3, #3
 8013f74:	d105      	bne.n	8013f82 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8013f76:	7dfb      	ldrb	r3, [r7, #23]
 8013f78:	e006      	b.n	8013f88 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 8013f7a:	7dfb      	ldrb	r3, [r7, #23]
 8013f7c:	e004      	b.n	8013f88 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 8013f7e:	bf00      	nop
 8013f80:	e7ab      	b.n	8013eda <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 8013f82:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8013f84:	e7a9      	b.n	8013eda <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8013f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3718      	adds	r7, #24
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}

08013f90 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b084      	sub	sp, #16
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8013f98:	2300      	movs	r3, #0
 8013f9a:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f000 fdf1 	bl	8014b84 <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f000 fe06 	bl	8014bb4 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 8013fac:	7b3b      	ldrb	r3, [r7, #12]
 8013fae:	2b03      	cmp	r3, #3
 8013fb0:	d82e      	bhi.n	8014010 <_ZN3USB4TaskEv+0x80>
 8013fb2:	a201      	add	r2, pc, #4	; (adr r2, 8013fb8 <_ZN3USB4TaskEv+0x28>)
 8013fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fb8:	08013fd5 	.word	0x08013fd5
 8013fbc:	08013fc9 	.word	0x08013fc9
 8013fc0:	08013ff1 	.word	0x08013ff1
 8013fc4:	08013fed 	.word	0x08013fed
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 8013fc8:	4bbf      	ldr	r3, [pc, #764]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 8013fca:	2213      	movs	r2, #19
 8013fcc:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	73fb      	strb	r3, [r7, #15]
                        break;
 8013fd2:	e01d      	b.n	8014010 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 8013fd4:	4bbc      	ldr	r3, [pc, #752]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 8013fd6:	781b      	ldrb	r3, [r3, #0]
 8013fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013fdc:	2b10      	cmp	r3, #16
 8013fde:	d002      	beq.n	8013fe6 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 8013fe0:	4bb9      	ldr	r3, [pc, #740]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 8013fe2:	2211      	movs	r2, #17
 8013fe4:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	73fb      	strb	r3, [r7, #15]
                        break;
 8013fea:	e011      	b.n	8014010 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 8013fec:	2301      	movs	r3, #1
 8013fee:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 8013ff0:	4bb5      	ldr	r3, [pc, #724]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ff8:	2b10      	cmp	r3, #16
 8013ffa:	d108      	bne.n	801400e <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 8013ffc:	f7ee fbfe 	bl	80027fc <HAL_GetTick>
 8014000:	4603      	mov	r3, r0
 8014002:	33c8      	adds	r3, #200	; 0xc8
 8014004:	4ab1      	ldr	r2, [pc, #708]	; (80142cc <_ZN3USB4TaskEv+0x33c>)
 8014006:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8014008:	4baf      	ldr	r3, [pc, #700]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 801400a:	2220      	movs	r2, #32
 801400c:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 801400e:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8014010:	2300      	movs	r3, #0
 8014012:	73bb      	strb	r3, [r7, #14]
 8014014:	7bbb      	ldrb	r3, [r7, #14]
 8014016:	2b0f      	cmp	r3, #15
 8014018:	d81b      	bhi.n	8014052 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 801401a:	7bba      	ldrb	r2, [r7, #14]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	321e      	adds	r2, #30
 8014020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d010      	beq.n	801404a <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 8014028:	7bba      	ldrb	r2, [r7, #14]
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	321e      	adds	r2, #30
 801402e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014032:	7bba      	ldrb	r2, [r7, #14]
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	321e      	adds	r2, #30
 8014038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	330c      	adds	r3, #12
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	4608      	mov	r0, r1
 8014044:	4798      	blx	r3
 8014046:	4603      	mov	r3, r0
 8014048:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801404a:	7bbb      	ldrb	r3, [r7, #14]
 801404c:	3301      	adds	r3, #1
 801404e:	73bb      	strb	r3, [r7, #14]
 8014050:	e7e0      	b.n	8014014 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8014052:	4b9d      	ldr	r3, [pc, #628]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 8014054:	781b      	ldrb	r3, [r3, #0]
 8014056:	2ba0      	cmp	r3, #160	; 0xa0
 8014058:	f000 8123 	beq.w	80142a2 <_ZN3USB4TaskEv+0x312>
 801405c:	2ba0      	cmp	r3, #160	; 0xa0
 801405e:	f300 812f 	bgt.w	80142c0 <_ZN3USB4TaskEv+0x330>
 8014062:	2b90      	cmp	r3, #144	; 0x90
 8014064:	f000 811f 	beq.w	80142a6 <_ZN3USB4TaskEv+0x316>
 8014068:	2b90      	cmp	r3, #144	; 0x90
 801406a:	f300 8129 	bgt.w	80142c0 <_ZN3USB4TaskEv+0x330>
 801406e:	2b80      	cmp	r3, #128	; 0x80
 8014070:	f000 80fe 	beq.w	8014270 <_ZN3USB4TaskEv+0x2e0>
 8014074:	2b80      	cmp	r3, #128	; 0x80
 8014076:	f300 8123 	bgt.w	80142c0 <_ZN3USB4TaskEv+0x330>
 801407a:	2b51      	cmp	r3, #81	; 0x51
 801407c:	f000 80ea 	beq.w	8014254 <_ZN3USB4TaskEv+0x2c4>
 8014080:	2b51      	cmp	r3, #81	; 0x51
 8014082:	f300 811d 	bgt.w	80142c0 <_ZN3USB4TaskEv+0x330>
 8014086:	2b40      	cmp	r3, #64	; 0x40
 8014088:	dc6a      	bgt.n	8014160 <_ZN3USB4TaskEv+0x1d0>
 801408a:	2b11      	cmp	r3, #17
 801408c:	f2c0 8118 	blt.w	80142c0 <_ZN3USB4TaskEv+0x330>
 8014090:	3b11      	subs	r3, #17
 8014092:	2b2f      	cmp	r3, #47	; 0x2f
 8014094:	f200 8114 	bhi.w	80142c0 <_ZN3USB4TaskEv+0x330>
 8014098:	a201      	add	r2, pc, #4	; (adr r2, 80140a0 <_ZN3USB4TaskEv+0x110>)
 801409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801409e:	bf00      	nop
 80140a0:	08014167 	.word	0x08014167
 80140a4:	080142ab 	.word	0x080142ab
 80140a8:	080142ab 	.word	0x080142ab
 80140ac:	080142c1 	.word	0x080142c1
 80140b0:	080142c1 	.word	0x080142c1
 80140b4:	080142c1 	.word	0x080142c1
 80140b8:	080142c1 	.word	0x080142c1
 80140bc:	080142c1 	.word	0x080142c1
 80140c0:	080142c1 	.word	0x080142c1
 80140c4:	080142c1 	.word	0x080142c1
 80140c8:	080142c1 	.word	0x080142c1
 80140cc:	080142c1 	.word	0x080142c1
 80140d0:	080142c1 	.word	0x080142c1
 80140d4:	080142c1 	.word	0x080142c1
 80140d8:	080142c1 	.word	0x080142c1
 80140dc:	080141b7 	.word	0x080141b7
 80140e0:	080142c1 	.word	0x080142c1
 80140e4:	080142c1 	.word	0x080142c1
 80140e8:	080142c1 	.word	0x080142c1
 80140ec:	080142c1 	.word	0x080142c1
 80140f0:	080142c1 	.word	0x080142c1
 80140f4:	080142c1 	.word	0x080142c1
 80140f8:	080142c1 	.word	0x080142c1
 80140fc:	080142c1 	.word	0x080142c1
 8014100:	080142c1 	.word	0x080142c1
 8014104:	080142c1 	.word	0x080142c1
 8014108:	080142c1 	.word	0x080142c1
 801410c:	080142c1 	.word	0x080142c1
 8014110:	080142c1 	.word	0x080142c1
 8014114:	080142c1 	.word	0x080142c1
 8014118:	080142c1 	.word	0x080142c1
 801411c:	080141d3 	.word	0x080141d3
 8014120:	080142c1 	.word	0x080142c1
 8014124:	080142c1 	.word	0x080142c1
 8014128:	080142c1 	.word	0x080142c1
 801412c:	080142c1 	.word	0x080142c1
 8014130:	080142c1 	.word	0x080142c1
 8014134:	080142c1 	.word	0x080142c1
 8014138:	080142c1 	.word	0x080142c1
 801413c:	080142c1 	.word	0x080142c1
 8014140:	080142c1 	.word	0x080142c1
 8014144:	080142c1 	.word	0x080142c1
 8014148:	080142c1 	.word	0x080142c1
 801414c:	080142c1 	.word	0x080142c1
 8014150:	080142c1 	.word	0x080142c1
 8014154:	080142c1 	.word	0x080142c1
 8014158:	080142c1 	.word	0x080142c1
 801415c:	080141e5 	.word	0x080141e5
 8014160:	2b50      	cmp	r3, #80	; 0x50
 8014162:	d05f      	beq.n	8014224 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8014164:	e0ac      	b.n	80142c0 <_ZN3USB4TaskEv+0x330>
                        init();
 8014166:	6878      	ldr	r0, [r7, #4]
 8014168:	f7ff fa6c 	bl	8013644 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801416c:	2300      	movs	r3, #0
 801416e:	737b      	strb	r3, [r7, #13]
 8014170:	7b7b      	ldrb	r3, [r7, #13]
 8014172:	2b0f      	cmp	r3, #15
 8014174:	d81b      	bhi.n	80141ae <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8014176:	7b7a      	ldrb	r2, [r7, #13]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	321e      	adds	r2, #30
 801417c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d010      	beq.n	80141a6 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8014184:	7b7a      	ldrb	r2, [r7, #13]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	321e      	adds	r2, #30
 801418a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801418e:	7b7a      	ldrb	r2, [r7, #13]
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	321e      	adds	r2, #30
 8014194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	3308      	adds	r3, #8
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	4608      	mov	r0, r1
 80141a0:	4798      	blx	r3
 80141a2:	4603      	mov	r3, r0
 80141a4:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80141a6:	7b7b      	ldrb	r3, [r7, #13]
 80141a8:	3301      	adds	r3, #1
 80141aa:	737b      	strb	r3, [r7, #13]
 80141ac:	e7e0      	b.n	8014170 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 80141ae:	4b46      	ldr	r3, [pc, #280]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 80141b0:	2212      	movs	r2, #18
 80141b2:	701a      	strb	r2, [r3, #0]
                        break;
 80141b4:	e084      	b.n	80142c0 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 80141b6:	f7ee fb21 	bl	80027fc <HAL_GetTick>
 80141ba:	4602      	mov	r2, r0
 80141bc:	4b43      	ldr	r3, [pc, #268]	; (80142cc <_ZN3USB4TaskEv+0x33c>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	1ad3      	subs	r3, r2, r3
 80141c2:	43db      	mvns	r3, r3
 80141c4:	0fdb      	lsrs	r3, r3, #31
 80141c6:	b2db      	uxtb	r3, r3
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d070      	beq.n	80142ae <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 80141cc:	4b3e      	ldr	r3, [pc, #248]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 80141ce:	2230      	movs	r2, #48	; 0x30
 80141d0:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80141d2:	2201      	movs	r2, #1
 80141d4:	21e8      	movs	r1, #232	; 0xe8
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	f7ed ff9c 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 80141dc:	4b3a      	ldr	r3, [pc, #232]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 80141de:	2240      	movs	r2, #64	; 0x40
 80141e0:	701a      	strb	r2, [r3, #0]
                        break;
 80141e2:	e06d      	b.n	80142c0 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 80141e4:	21e8      	movs	r1, #232	; 0xe8
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	f7ed ffe6 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80141ec:	4603      	mov	r3, r0
 80141ee:	f003 0301 	and.w	r3, r3, #1
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	bf0c      	ite	eq
 80141f6:	2301      	moveq	r3, #1
 80141f8:	2300      	movne	r3, #0
 80141fa:	b2db      	uxtb	r3, r3
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d058      	beq.n	80142b2 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 8014200:	21d8      	movs	r1, #216	; 0xd8
 8014202:	6878      	ldr	r0, [r7, #4]
 8014204:	f7ed ffd8 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8014208:	4603      	mov	r3, r0
 801420a:	f043 0308 	orr.w	r3, r3, #8
 801420e:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 8014210:	7b3b      	ldrb	r3, [r7, #12]
 8014212:	461a      	mov	r2, r3
 8014214:	21d8      	movs	r1, #216	; 0xd8
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	f7ed ff7c 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 801421c:	4b2a      	ldr	r3, [pc, #168]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 801421e:	2250      	movs	r2, #80	; 0x50
 8014220:	701a      	strb	r2, [r3, #0]
                        break;
 8014222:	e046      	b.n	80142b2 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 8014224:	21c8      	movs	r1, #200	; 0xc8
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f7ed ffc6 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801422c:	4603      	mov	r3, r0
 801422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014232:	2b00      	cmp	r3, #0
 8014234:	bf14      	ite	ne
 8014236:	2301      	movne	r3, #1
 8014238:	2300      	moveq	r3, #0
 801423a:	b2db      	uxtb	r3, r3
 801423c:	2b00      	cmp	r3, #0
 801423e:	d03a      	beq.n	80142b6 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 8014240:	4b21      	ldr	r3, [pc, #132]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 8014242:	2251      	movs	r2, #81	; 0x51
 8014244:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8014246:	f7ee fad9 	bl	80027fc <HAL_GetTick>
 801424a:	4603      	mov	r3, r0
 801424c:	3314      	adds	r3, #20
 801424e:	4a1f      	ldr	r2, [pc, #124]	; (80142cc <_ZN3USB4TaskEv+0x33c>)
 8014250:	6013      	str	r3, [r2, #0]
                        break;
 8014252:	e030      	b.n	80142b6 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8014254:	f7ee fad2 	bl	80027fc <HAL_GetTick>
 8014258:	4602      	mov	r2, r0
 801425a:	4b1c      	ldr	r3, [pc, #112]	; (80142cc <_ZN3USB4TaskEv+0x33c>)
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	1ad3      	subs	r3, r2, r3
 8014260:	43db      	mvns	r3, r3
 8014262:	0fdb      	lsrs	r3, r3, #31
 8014264:	b2db      	uxtb	r3, r3
 8014266:	2b00      	cmp	r3, #0
 8014268:	d027      	beq.n	80142ba <_ZN3USB4TaskEv+0x32a>
 801426a:	4b17      	ldr	r3, [pc, #92]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 801426c:	2280      	movs	r2, #128	; 0x80
 801426e:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 8014270:	7bfb      	ldrb	r3, [r7, #15]
 8014272:	2200      	movs	r2, #0
 8014274:	2100      	movs	r1, #0
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f000 f920 	bl	80144bc <_ZN3USB11ConfiguringEhhb>
 801427c:	4603      	mov	r3, r0
 801427e:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 8014280:	7afb      	ldrb	r3, [r7, #11]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d009      	beq.n	801429a <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8014286:	7afb      	ldrb	r3, [r7, #11]
 8014288:	2bd2      	cmp	r3, #210	; 0xd2
 801428a:	d018      	beq.n	80142be <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 801428c:	4a10      	ldr	r2, [pc, #64]	; (80142d0 <_ZN3USB4TaskEv+0x340>)
 801428e:	7afb      	ldrb	r3, [r7, #11]
 8014290:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 8014292:	4b0d      	ldr	r3, [pc, #52]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 8014294:	22a0      	movs	r2, #160	; 0xa0
 8014296:	701a      	strb	r2, [r3, #0]
                        break;
 8014298:	e011      	b.n	80142be <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 801429a:	4b0b      	ldr	r3, [pc, #44]	; (80142c8 <_ZN3USB4TaskEv+0x338>)
 801429c:	2290      	movs	r2, #144	; 0x90
 801429e:	701a      	strb	r2, [r3, #0]
                        break;
 80142a0:	e00d      	b.n	80142be <_ZN3USB4TaskEv+0x32e>
                        break;
 80142a2:	bf00      	nop
 80142a4:	e00c      	b.n	80142c0 <_ZN3USB4TaskEv+0x330>
                        break;
 80142a6:	bf00      	nop
 80142a8:	e00a      	b.n	80142c0 <_ZN3USB4TaskEv+0x330>
                        break;
 80142aa:	bf00      	nop
 80142ac:	e008      	b.n	80142c0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80142ae:	bf00      	nop
 80142b0:	e006      	b.n	80142c0 <_ZN3USB4TaskEv+0x330>
                        break;
 80142b2:	bf00      	nop
 80142b4:	e004      	b.n	80142c0 <_ZN3USB4TaskEv+0x330>
                        break;
 80142b6:	bf00      	nop
 80142b8:	e002      	b.n	80142c0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 80142ba:	bf00      	nop
 80142bc:	e000      	b.n	80142c0 <_ZN3USB4TaskEv+0x330>
                        break;
 80142be:	bf00      	nop
}
 80142c0:	bf00      	nop
 80142c2:	3710      	adds	r7, #16
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}
 80142c8:	200056b6 	.word	0x200056b6
 80142cc:	200056b8 	.word	0x200056b8
 80142d0:	200056b5 	.word	0x200056b5

080142d4 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b086      	sub	sp, #24
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	4608      	mov	r0, r1
 80142de:	4611      	mov	r1, r2
 80142e0:	461a      	mov	r2, r3
 80142e2:	4603      	mov	r3, r0
 80142e4:	70fb      	strb	r3, [r7, #3]
 80142e6:	460b      	mov	r3, r1
 80142e8:	70bb      	strb	r3, [r7, #2]
 80142ea:	4613      	mov	r3, r2
 80142ec:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 80142ee:	2300      	movs	r3, #0
 80142f0:	617b      	str	r3, [r7, #20]
 80142f2:	2300      	movs	r3, #0
 80142f4:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2100      	movs	r1, #0
 80142fa:	4618      	mov	r0, r3
 80142fc:	f000 fbc0 	bl	8014a80 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8014300:	6178      	str	r0, [r7, #20]

        if(!p0)
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d101      	bne.n	801430c <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8014308:	23d6      	movs	r3, #214	; 0xd6
 801430a:	e03a      	b.n	8014382 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d101      	bne.n	8014318 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8014314:	23d7      	movs	r3, #215	; 0xd7
 8014316:	e034      	b.n	8014382 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8014318:	697b      	ldr	r3, [r7, #20]
 801431a:	787a      	ldrb	r2, [r7, #1]
 801431c:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 801431e:	6878      	ldr	r0, [r7, #4]
 8014320:	78bb      	ldrb	r3, [r7, #2]
 8014322:	78f9      	ldrb	r1, [r7, #3]
 8014324:	2200      	movs	r2, #0
 8014326:	f000 fc53 	bl	8014bd0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 801432a:	4603      	mov	r3, r0
 801432c:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 801432e:	7bfb      	ldrb	r3, [r7, #15]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d101      	bne.n	8014338 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8014334:	23d4      	movs	r3, #212	; 0xd4
 8014336:	e024      	b.n	8014382 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	7bfa      	ldrb	r2, [r7, #15]
 801433c:	4611      	mov	r1, r2
 801433e:	4618      	mov	r0, r3
 8014340:	f000 fb9e 	bl	8014a80 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8014344:	6138      	str	r0, [r7, #16]

        if(!p)
 8014346:	693b      	ldr	r3, [r7, #16]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d101      	bne.n	8014350 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 801434c:	23d6      	movs	r3, #214	; 0xd6
 801434e:	e018      	b.n	8014382 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	787a      	ldrb	r2, [r7, #1]
 8014354:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8014356:	7bfb      	ldrb	r3, [r7, #15]
 8014358:	2200      	movs	r2, #0
 801435a:	2100      	movs	r1, #0
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f000 fae3 	bl	8014928 <_ZN3USB7setAddrEhhh>
 8014362:	4603      	mov	r3, r0
 8014364:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8014366:	7bbb      	ldrb	r3, [r7, #14]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d009      	beq.n	8014380 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	7bfa      	ldrb	r2, [r7, #15]
 8014370:	4611      	mov	r1, r2
 8014372:	4618      	mov	r0, r3
 8014374:	f000 fcc4 	bl	8014d00 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8014378:	2300      	movs	r3, #0
 801437a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 801437c:	7bbb      	ldrb	r3, [r7, #14]
 801437e:	e000      	b.n	8014382 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8014380:	2300      	movs	r3, #0
};
 8014382:	4618      	mov	r0, r3
 8014384:	3718      	adds	r7, #24
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}

0801438a <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 801438a:	b590      	push	{r4, r7, lr}
 801438c:	b085      	sub	sp, #20
 801438e:	af00      	add	r7, sp, #0
 8014390:	6078      	str	r0, [r7, #4]
 8014392:	4608      	mov	r0, r1
 8014394:	4611      	mov	r1, r2
 8014396:	461a      	mov	r2, r3
 8014398:	4603      	mov	r3, r0
 801439a:	70fb      	strb	r3, [r7, #3]
 801439c:	460b      	mov	r3, r1
 801439e:	70bb      	strb	r3, [r7, #2]
 80143a0:	4613      	mov	r3, r2
 80143a2:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 80143a4:	2300      	movs	r3, #0
 80143a6:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 80143a8:	78fa      	ldrb	r2, [r7, #3]
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	321e      	adds	r2, #30
 80143ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80143b2:	78fa      	ldrb	r2, [r7, #3]
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	321e      	adds	r2, #30
 80143b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	3304      	adds	r3, #4
 80143c0:	681c      	ldr	r4, [r3, #0]
 80143c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80143c6:	787a      	ldrb	r2, [r7, #1]
 80143c8:	78b9      	ldrb	r1, [r7, #2]
 80143ca:	47a0      	blx	r4
 80143cc:	4603      	mov	r3, r0
 80143ce:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 80143d0:	7bbb      	ldrb	r3, [r7, #14]
 80143d2:	2be0      	cmp	r3, #224	; 0xe0
 80143d4:	d11c      	bne.n	8014410 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 80143d6:	78bb      	ldrb	r3, [r7, #2]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d108      	bne.n	80143ee <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80143dc:	2201      	movs	r2, #1
 80143de:	21e8      	movs	r1, #232	; 0xe8
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f7ed fe97 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 80143e6:	2066      	movs	r0, #102	; 0x66
 80143e8:	f7ee fa14 	bl	8002814 <HAL_Delay>
 80143ec:	e022      	b.n	8014434 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 80143ee:	78ba      	ldrb	r2, [r7, #2]
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	321e      	adds	r2, #30
 80143f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80143f8:	78ba      	ldrb	r2, [r7, #2]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	321e      	adds	r2, #30
 80143fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	3314      	adds	r3, #20
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	787a      	ldrb	r2, [r7, #1]
 801440a:	4611      	mov	r1, r2
 801440c:	4798      	blx	r3
 801440e:	e011      	b.n	8014434 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8014410:	7bbb      	ldrb	r3, [r7, #14]
 8014412:	2b0d      	cmp	r3, #13
 8014414:	d109      	bne.n	801442a <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8014416:	7bfb      	ldrb	r3, [r7, #15]
 8014418:	2b02      	cmp	r3, #2
 801441a:	d806      	bhi.n	801442a <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 801441c:	2064      	movs	r0, #100	; 0x64
 801441e:	f7ee f9f9 	bl	8002814 <HAL_Delay>
                retries++;
 8014422:	7bfb      	ldrb	r3, [r7, #15]
 8014424:	3301      	adds	r3, #1
 8014426:	73fb      	strb	r3, [r7, #15]
                goto again;
 8014428:	e7be      	b.n	80143a8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 801442a:	7bbb      	ldrb	r3, [r7, #14]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d001      	beq.n	8014434 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8014430:	7bbb      	ldrb	r3, [r7, #14]
 8014432:	e03f      	b.n	80144b4 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8014434:	78fa      	ldrb	r2, [r7, #3]
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	321e      	adds	r2, #30
 801443a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801443e:	78fa      	ldrb	r2, [r7, #3]
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	321e      	adds	r2, #30
 8014444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	681c      	ldr	r4, [r3, #0]
 801444c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014450:	787a      	ldrb	r2, [r7, #1]
 8014452:	78b9      	ldrb	r1, [r7, #2]
 8014454:	47a0      	blx	r4
 8014456:	4603      	mov	r3, r0
 8014458:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 801445a:	7bbb      	ldrb	r3, [r7, #14]
 801445c:	2b0d      	cmp	r3, #13
 801445e:	d109      	bne.n	8014474 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8014460:	7bfb      	ldrb	r3, [r7, #15]
 8014462:	2b02      	cmp	r3, #2
 8014464:	d806      	bhi.n	8014474 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8014466:	2064      	movs	r0, #100	; 0x64
 8014468:	f7ee f9d4 	bl	8002814 <HAL_Delay>
                retries++;
 801446c:	7bfb      	ldrb	r3, [r7, #15]
 801446e:	3301      	adds	r3, #1
 8014470:	73fb      	strb	r3, [r7, #15]
                goto again;
 8014472:	e799      	b.n	80143a8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8014474:	7bbb      	ldrb	r3, [r7, #14]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d01b      	beq.n	80144b2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 801447a:	78bb      	ldrb	r3, [r7, #2]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d108      	bne.n	8014492 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8014480:	2201      	movs	r2, #1
 8014482:	21e8      	movs	r1, #232	; 0xe8
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7ed fe45 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 801448a:	2066      	movs	r0, #102	; 0x66
 801448c:	f7ee f9c2 	bl	8002814 <HAL_Delay>
 8014490:	e00f      	b.n	80144b2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8014492:	78ba      	ldrb	r2, [r7, #2]
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	321e      	adds	r2, #30
 8014498:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801449c:	78ba      	ldrb	r2, [r7, #2]
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	321e      	adds	r2, #30
 80144a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	3314      	adds	r3, #20
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	787a      	ldrb	r2, [r7, #1]
 80144ae:	4611      	mov	r1, r2
 80144b0:	4798      	blx	r3
                }
        }
        return rcode;
 80144b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80144b4:	4618      	mov	r0, r3
 80144b6:	3714      	adds	r7, #20
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd90      	pop	{r4, r7, pc}

080144bc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 80144bc:	b580      	push	{r7, lr}
 80144be:	b090      	sub	sp, #64	; 0x40
 80144c0:	af02      	add	r7, sp, #8
 80144c2:	6078      	str	r0, [r7, #4]
 80144c4:	4608      	mov	r0, r1
 80144c6:	4611      	mov	r1, r2
 80144c8:	461a      	mov	r2, r3
 80144ca:	4603      	mov	r3, r0
 80144cc:	70fb      	strb	r3, [r7, #3]
 80144ce:	460b      	mov	r3, r1
 80144d0:	70bb      	strb	r3, [r7, #2]
 80144d2:	4613      	mov	r3, r2
 80144d4:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 80144d6:	2300      	movs	r3, #0
 80144d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 80144dc:	f107 030c 	add.w	r3, r7, #12
 80144e0:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 80144e2:	2300      	movs	r3, #0
 80144e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 80144e6:	2300      	movs	r3, #0
 80144e8:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 80144ea:	2300      	movs	r3, #0
 80144ec:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 80144ee:	2308      	movs	r3, #8
 80144f0:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 80144f2:	7abb      	ldrb	r3, [r7, #10]
 80144f4:	f36f 0300 	bfc	r3, #0, #1
 80144f8:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 80144fa:	7abb      	ldrb	r3, [r7, #10]
 80144fc:	f36f 0341 	bfc	r3, #1, #1
 8014500:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8014502:	7abb      	ldrb	r3, [r7, #10]
 8014504:	220f      	movs	r2, #15
 8014506:	f362 0387 	bfi	r3, r2, #2, #6
 801450a:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f7f9 fe1b 	bl	800e148 <_ZN3USB14GetAddressPoolEv>
 8014512:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8014514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	2100      	movs	r1, #0
 801451c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801451e:	4798      	blx	r3
 8014520:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8014522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014524:	2b00      	cmp	r3, #0
 8014526:	d101      	bne.n	801452c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8014528:	23d6      	movs	r3, #214	; 0xd6
 801452a:	e15c      	b.n	80147e6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 801452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8014532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014534:	f107 0208 	add.w	r2, r7, #8
 8014538:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 801453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801453c:	787a      	ldrb	r2, [r7, #1]
 801453e:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8014540:	f107 030c 	add.w	r3, r7, #12
 8014544:	9300      	str	r3, [sp, #0]
 8014546:	2312      	movs	r3, #18
 8014548:	2200      	movs	r2, #0
 801454a:	2100      	movs	r1, #0
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f000 f94e 	bl	80147ee <_ZN3USB11getDevDescrEhhtPh>
 8014552:	4603      	mov	r3, r0
 8014554:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8014558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801455a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801455c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 801455e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014562:	2b00      	cmp	r3, #0
 8014564:	d002      	beq.n	801456c <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8014566:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801456a:	e13c      	b.n	80147e6 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 801456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456e:	7a1a      	ldrb	r2, [r3, #8]
 8014570:	7a5b      	ldrb	r3, [r3, #9]
 8014572:	021b      	lsls	r3, r3, #8
 8014574:	4313      	orrs	r3, r2
 8014576:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8014578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801457a:	7a9a      	ldrb	r2, [r3, #10]
 801457c:	7adb      	ldrb	r3, [r3, #11]
 801457e:	021b      	lsls	r3, r3, #8
 8014580:	4313      	orrs	r3, r2
 8014582:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8014584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014586:	791b      	ldrb	r3, [r3, #4]
 8014588:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 801458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801458c:	795b      	ldrb	r3, [r3, #5]
 801458e:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8014590:	2300      	movs	r3, #0
 8014592:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801459a:	2b0f      	cmp	r3, #15
 801459c:	f200 8081 	bhi.w	80146a2 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 80145a0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	321e      	adds	r2, #30
 80145a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d06e      	beq.n	801468e <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 80145b0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	321e      	adds	r2, #30
 80145b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80145bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	321e      	adds	r2, #30
 80145c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	3310      	adds	r3, #16
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	4608      	mov	r0, r1
 80145d0:	4798      	blx	r3
 80145d2:	4603      	mov	r3, r0
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	bf14      	ite	ne
 80145d8:	2301      	movne	r3, #1
 80145da:	2300      	moveq	r3, #0
 80145dc:	b2db      	uxtb	r3, r3
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d157      	bne.n	8014692 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 80145e2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	321e      	adds	r2, #30
 80145ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80145ee:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	321e      	adds	r2, #30
 80145f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	3320      	adds	r3, #32
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	7fba      	ldrb	r2, [r7, #30]
 8014602:	4611      	mov	r1, r2
 8014604:	4798      	blx	r3
 8014606:	4603      	mov	r3, r0
 8014608:	2b00      	cmp	r3, #0
 801460a:	d02b      	beq.n	8014664 <_ZN3USB11ConfiguringEhhb+0x1a8>
 801460c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	321e      	adds	r2, #30
 8014614:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014618:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	321e      	adds	r2, #30
 8014620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	3318      	adds	r3, #24
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	8c3a      	ldrh	r2, [r7, #32]
 801462c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 801462e:	4798      	blx	r3
 8014630:	4603      	mov	r3, r0
 8014632:	2b00      	cmp	r3, #0
 8014634:	d114      	bne.n	8014660 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8014636:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	321e      	adds	r2, #30
 801463e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014642:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	321e      	adds	r2, #30
 801464a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	331c      	adds	r3, #28
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	7ffa      	ldrb	r2, [r7, #31]
 8014656:	4611      	mov	r1, r2
 8014658:	4798      	blx	r3
 801465a:	4603      	mov	r3, r0
 801465c:	2b00      	cmp	r3, #0
 801465e:	d001      	beq.n	8014664 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8014660:	2301      	movs	r3, #1
 8014662:	e000      	b.n	8014666 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8014664:	2300      	movs	r3, #0
 8014666:	2b00      	cmp	r3, #0
 8014668:	d014      	beq.n	8014694 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 801466a:	78b8      	ldrb	r0, [r7, #2]
 801466c:	78fa      	ldrb	r2, [r7, #3]
 801466e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8014672:	787b      	ldrb	r3, [r7, #1]
 8014674:	9300      	str	r3, [sp, #0]
 8014676:	4603      	mov	r3, r0
 8014678:	6878      	ldr	r0, [r7, #4]
 801467a:	f7ff fe86 	bl	801438a <_ZN3USB13AttemptConfigEhhhb>
 801467e:	4603      	mov	r3, r0
 8014680:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8014684:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014688:	2bd1      	cmp	r3, #209	; 0xd1
 801468a:	d109      	bne.n	80146a0 <_ZN3USB11ConfiguringEhhb+0x1e4>
 801468c:	e002      	b.n	8014694 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 801468e:	bf00      	nop
 8014690:	e000      	b.n	8014694 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8014692:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8014694:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014698:	3301      	adds	r3, #1
 801469a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801469e:	e77a      	b.n	8014596 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 80146a0:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 80146a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146a6:	2b0f      	cmp	r3, #15
 80146a8:	d802      	bhi.n	80146b0 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 80146aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80146ae:	e09a      	b.n	80147e6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 80146b0:	2300      	movs	r3, #0
 80146b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80146b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146ba:	2b0f      	cmp	r3, #15
 80146bc:	f200 8088 	bhi.w	80147d0 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 80146c0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	321e      	adds	r2, #30
 80146c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d074      	beq.n	80147ba <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 80146d0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	321e      	adds	r2, #30
 80146d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80146dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	321e      	adds	r2, #30
 80146e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	3310      	adds	r3, #16
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	4608      	mov	r0, r1
 80146f0:	4798      	blx	r3
 80146f2:	4603      	mov	r3, r0
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	bf14      	ite	ne
 80146f8:	2301      	movne	r3, #1
 80146fa:	2300      	moveq	r3, #0
 80146fc:	b2db      	uxtb	r3, r3
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d15d      	bne.n	80147be <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8014702:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	321e      	adds	r2, #30
 801470a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801470e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	321e      	adds	r2, #30
 8014716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	3320      	adds	r3, #32
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	7fba      	ldrb	r2, [r7, #30]
 8014722:	4611      	mov	r1, r2
 8014724:	4798      	blx	r3
 8014726:	4603      	mov	r3, r0
 8014728:	2b00      	cmp	r3, #0
 801472a:	d02b      	beq.n	8014784 <_ZN3USB11ConfiguringEhhb+0x2c8>
 801472c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	321e      	adds	r2, #30
 8014734:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014738:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	321e      	adds	r2, #30
 8014740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	3318      	adds	r3, #24
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	8c3a      	ldrh	r2, [r7, #32]
 801474c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 801474e:	4798      	blx	r3
 8014750:	4603      	mov	r3, r0
 8014752:	2b00      	cmp	r3, #0
 8014754:	d114      	bne.n	8014780 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8014756:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	321e      	adds	r2, #30
 801475e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014762:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	321e      	adds	r2, #30
 801476a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	331c      	adds	r3, #28
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	7ffa      	ldrb	r2, [r7, #31]
 8014776:	4611      	mov	r1, r2
 8014778:	4798      	blx	r3
 801477a:	4603      	mov	r3, r0
 801477c:	2b00      	cmp	r3, #0
 801477e:	d001      	beq.n	8014784 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8014780:	2301      	movs	r3, #1
 8014782:	e000      	b.n	8014786 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8014784:	2300      	movs	r3, #0
 8014786:	2b00      	cmp	r3, #0
 8014788:	d11b      	bne.n	80147c2 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 801478a:	78b8      	ldrb	r0, [r7, #2]
 801478c:	78fa      	ldrb	r2, [r7, #3]
 801478e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8014792:	787b      	ldrb	r3, [r7, #1]
 8014794:	9300      	str	r3, [sp, #0]
 8014796:	4603      	mov	r3, r0
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f7ff fdf6 	bl	801438a <_ZN3USB13AttemptConfigEhhhb>
 801479e:	4603      	mov	r3, r0
 80147a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 80147a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80147a8:	2bd1      	cmp	r3, #209	; 0xd1
 80147aa:	d00b      	beq.n	80147c4 <_ZN3USB11ConfiguringEhhb+0x308>
 80147ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80147b0:	2bd9      	cmp	r3, #217	; 0xd9
 80147b2:	d007      	beq.n	80147c4 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 80147b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80147b8:	e015      	b.n	80147e6 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 80147ba:	bf00      	nop
 80147bc:	e002      	b.n	80147c4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 80147be:	bf00      	nop
 80147c0:	e000      	b.n	80147c4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 80147c2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 80147c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80147c8:	3301      	adds	r3, #1
 80147ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80147ce:	e772      	b.n	80146b6 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 80147d0:	787b      	ldrb	r3, [r7, #1]
 80147d2:	78ba      	ldrb	r2, [r7, #2]
 80147d4:	78f9      	ldrb	r1, [r7, #3]
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f7ff fd7c 	bl	80142d4 <_ZN3USB17DefaultAddressingEhhb>
 80147dc:	4603      	mov	r3, r0
 80147de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 80147e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3738      	adds	r7, #56	; 0x38
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}

080147ee <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 80147ee:	b580      	push	{r7, lr}
 80147f0:	b08a      	sub	sp, #40	; 0x28
 80147f2:	af08      	add	r7, sp, #32
 80147f4:	6078      	str	r0, [r7, #4]
 80147f6:	4608      	mov	r0, r1
 80147f8:	4611      	mov	r1, r2
 80147fa:	461a      	mov	r2, r3
 80147fc:	4603      	mov	r3, r0
 80147fe:	70fb      	strb	r3, [r7, #3]
 8014800:	460b      	mov	r3, r1
 8014802:	70bb      	strb	r3, [r7, #2]
 8014804:	4613      	mov	r3, r2
 8014806:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8014808:	78ba      	ldrb	r2, [r7, #2]
 801480a:	78f9      	ldrb	r1, [r7, #3]
 801480c:	2300      	movs	r3, #0
 801480e:	9307      	str	r3, [sp, #28]
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	9306      	str	r3, [sp, #24]
 8014814:	883b      	ldrh	r3, [r7, #0]
 8014816:	9305      	str	r3, [sp, #20]
 8014818:	883b      	ldrh	r3, [r7, #0]
 801481a:	9304      	str	r3, [sp, #16]
 801481c:	2300      	movs	r3, #0
 801481e:	9303      	str	r3, [sp, #12]
 8014820:	2301      	movs	r3, #1
 8014822:	9302      	str	r3, [sp, #8]
 8014824:	2300      	movs	r3, #0
 8014826:	9301      	str	r3, [sp, #4]
 8014828:	2306      	movs	r3, #6
 801482a:	9300      	str	r3, [sp, #0]
 801482c:	2380      	movs	r3, #128	; 0x80
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f7fe ffdb 	bl	80137ea <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8014834:	4603      	mov	r3, r0
}
 8014836:	4618      	mov	r0, r3
 8014838:	3708      	adds	r7, #8
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}

0801483e <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 801483e:	b580      	push	{r7, lr}
 8014840:	b08a      	sub	sp, #40	; 0x28
 8014842:	af08      	add	r7, sp, #32
 8014844:	6078      	str	r0, [r7, #4]
 8014846:	4608      	mov	r0, r1
 8014848:	4611      	mov	r1, r2
 801484a:	461a      	mov	r2, r3
 801484c:	4603      	mov	r3, r0
 801484e:	70fb      	strb	r3, [r7, #3]
 8014850:	460b      	mov	r3, r1
 8014852:	70bb      	strb	r3, [r7, #2]
 8014854:	4613      	mov	r3, r2
 8014856:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8014858:	78ba      	ldrb	r2, [r7, #2]
 801485a:	78f9      	ldrb	r1, [r7, #3]
 801485c:	2300      	movs	r3, #0
 801485e:	9307      	str	r3, [sp, #28]
 8014860:	697b      	ldr	r3, [r7, #20]
 8014862:	9306      	str	r3, [sp, #24]
 8014864:	883b      	ldrh	r3, [r7, #0]
 8014866:	9305      	str	r3, [sp, #20]
 8014868:	883b      	ldrh	r3, [r7, #0]
 801486a:	9304      	str	r3, [sp, #16]
 801486c:	2300      	movs	r3, #0
 801486e:	9303      	str	r3, [sp, #12]
 8014870:	2302      	movs	r3, #2
 8014872:	9302      	str	r3, [sp, #8]
 8014874:	7c3b      	ldrb	r3, [r7, #16]
 8014876:	9301      	str	r3, [sp, #4]
 8014878:	2306      	movs	r3, #6
 801487a:	9300      	str	r3, [sp, #0]
 801487c:	2380      	movs	r3, #128	; 0x80
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f7fe ffb3 	bl	80137ea <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8014884:	4603      	mov	r3, r0
}
 8014886:	4618      	mov	r0, r3
 8014888:	3708      	adds	r7, #8
 801488a:	46bd      	mov	sp, r7
 801488c:	bd80      	pop	{r7, pc}

0801488e <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 801488e:	b580      	push	{r7, lr}
 8014890:	b09e      	sub	sp, #120	; 0x78
 8014892:	af08      	add	r7, sp, #32
 8014894:	6078      	str	r0, [r7, #4]
 8014896:	4608      	mov	r0, r1
 8014898:	4611      	mov	r1, r2
 801489a:	461a      	mov	r2, r3
 801489c:	4603      	mov	r3, r0
 801489e:	70fb      	strb	r3, [r7, #3]
 80148a0:	460b      	mov	r3, r1
 80148a2:	70bb      	strb	r3, [r7, #2]
 80148a4:	4613      	mov	r3, r2
 80148a6:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 80148a8:	2340      	movs	r3, #64	; 0x40
 80148aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 80148ae:	f107 030c 	add.w	r3, r7, #12
 80148b2:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 80148b4:	78ba      	ldrb	r2, [r7, #2]
 80148b6:	78f9      	ldrb	r1, [r7, #3]
 80148b8:	f107 030c 	add.w	r3, r7, #12
 80148bc:	9301      	str	r3, [sp, #4]
 80148be:	787b      	ldrb	r3, [r7, #1]
 80148c0:	9300      	str	r3, [sp, #0]
 80148c2:	2309      	movs	r3, #9
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f7ff ffba 	bl	801483e <_ZN3USB12getConfDescrEhhthPh>
 80148ca:	4603      	mov	r3, r0
 80148cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 80148d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d002      	beq.n	80148de <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 80148d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80148dc:	e020      	b.n	8014920 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 80148de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148e0:	789a      	ldrb	r2, [r3, #2]
 80148e2:	78db      	ldrb	r3, [r3, #3]
 80148e4:	021b      	lsls	r3, r3, #8
 80148e6:	4313      	orrs	r3, r2
 80148e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 80148ec:	78ba      	ldrb	r2, [r7, #2]
 80148ee:	78f9      	ldrb	r1, [r7, #3]
 80148f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80148f2:	9307      	str	r3, [sp, #28]
 80148f4:	f107 030c 	add.w	r3, r7, #12
 80148f8:	9306      	str	r3, [sp, #24]
 80148fa:	2340      	movs	r3, #64	; 0x40
 80148fc:	9305      	str	r3, [sp, #20]
 80148fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8014902:	9304      	str	r3, [sp, #16]
 8014904:	2300      	movs	r3, #0
 8014906:	9303      	str	r3, [sp, #12]
 8014908:	2302      	movs	r3, #2
 801490a:	9302      	str	r3, [sp, #8]
 801490c:	787b      	ldrb	r3, [r7, #1]
 801490e:	9301      	str	r3, [sp, #4]
 8014910:	2306      	movs	r3, #6
 8014912:	9300      	str	r3, [sp, #0]
 8014914:	2380      	movs	r3, #128	; 0x80
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f7fe ff67 	bl	80137ea <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801491c:	4603      	mov	r3, r0
 801491e:	bf00      	nop
}
 8014920:	4618      	mov	r0, r3
 8014922:	3758      	adds	r7, #88	; 0x58
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8014928:	b580      	push	{r7, lr}
 801492a:	b08c      	sub	sp, #48	; 0x30
 801492c:	af08      	add	r7, sp, #32
 801492e:	6078      	str	r0, [r7, #4]
 8014930:	4608      	mov	r0, r1
 8014932:	4611      	mov	r1, r2
 8014934:	461a      	mov	r2, r3
 8014936:	4603      	mov	r3, r0
 8014938:	70fb      	strb	r3, [r7, #3]
 801493a:	460b      	mov	r3, r1
 801493c:	70bb      	strb	r3, [r7, #2]
 801493e:	4613      	mov	r3, r2
 8014940:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8014942:	78ba      	ldrb	r2, [r7, #2]
 8014944:	78f9      	ldrb	r1, [r7, #3]
 8014946:	2300      	movs	r3, #0
 8014948:	9307      	str	r3, [sp, #28]
 801494a:	2300      	movs	r3, #0
 801494c:	9306      	str	r3, [sp, #24]
 801494e:	2300      	movs	r3, #0
 8014950:	9305      	str	r3, [sp, #20]
 8014952:	2300      	movs	r3, #0
 8014954:	9304      	str	r3, [sp, #16]
 8014956:	2300      	movs	r3, #0
 8014958:	9303      	str	r3, [sp, #12]
 801495a:	2300      	movs	r3, #0
 801495c:	9302      	str	r3, [sp, #8]
 801495e:	787b      	ldrb	r3, [r7, #1]
 8014960:	9301      	str	r3, [sp, #4]
 8014962:	2305      	movs	r3, #5
 8014964:	9300      	str	r3, [sp, #0]
 8014966:	2300      	movs	r3, #0
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f7fe ff3e 	bl	80137ea <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801496e:	4603      	mov	r3, r0
 8014970:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8014972:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014976:	f7ed ff4d 	bl	8002814 <HAL_Delay>
        return rcode;
 801497a:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 801497c:	4618      	mov	r0, r3
 801497e:	3710      	adds	r7, #16
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}

08014984 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8014984:	b580      	push	{r7, lr}
 8014986:	b08a      	sub	sp, #40	; 0x28
 8014988:	af08      	add	r7, sp, #32
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	4608      	mov	r0, r1
 801498e:	4611      	mov	r1, r2
 8014990:	461a      	mov	r2, r3
 8014992:	4603      	mov	r3, r0
 8014994:	70fb      	strb	r3, [r7, #3]
 8014996:	460b      	mov	r3, r1
 8014998:	70bb      	strb	r3, [r7, #2]
 801499a:	4613      	mov	r3, r2
 801499c:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 801499e:	78ba      	ldrb	r2, [r7, #2]
 80149a0:	78f9      	ldrb	r1, [r7, #3]
 80149a2:	2300      	movs	r3, #0
 80149a4:	9307      	str	r3, [sp, #28]
 80149a6:	2300      	movs	r3, #0
 80149a8:	9306      	str	r3, [sp, #24]
 80149aa:	2300      	movs	r3, #0
 80149ac:	9305      	str	r3, [sp, #20]
 80149ae:	2300      	movs	r3, #0
 80149b0:	9304      	str	r3, [sp, #16]
 80149b2:	2300      	movs	r3, #0
 80149b4:	9303      	str	r3, [sp, #12]
 80149b6:	2300      	movs	r3, #0
 80149b8:	9302      	str	r3, [sp, #8]
 80149ba:	787b      	ldrb	r3, [r7, #1]
 80149bc:	9301      	str	r3, [sp, #4]
 80149be:	2309      	movs	r3, #9
 80149c0:	9300      	str	r3, [sp, #0]
 80149c2:	2300      	movs	r3, #0
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f7fe ff10 	bl	80137ea <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80149ca:	4603      	mov	r3, r0
}
 80149cc:	4618      	mov	r0, r3
 80149ce:	3708      	adds	r7, #8
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}

080149d4 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 80149d4:	b480      	push	{r7}
 80149d6:	b083      	sub	sp, #12
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
};
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	4618      	mov	r0, r3
 80149e0:	370c      	adds	r7, #12
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr
	...

080149ec <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 80149ec:	b480      	push	{r7}
 80149ee:	b083      	sub	sp, #12
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	4a04      	ldr	r2, [pc, #16]	; (8014a08 <_ZN11AddressPoolC1Ev+0x1c>)
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	601a      	str	r2, [r3, #0]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	4618      	mov	r0, r3
 80149fe:	370c      	adds	r7, #12
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr
 8014a08:	080177dc 	.word	0x080177dc

08014a0c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	4618      	mov	r0, r3
 8014a18:	f7ff ffe8 	bl	80149ec <_ZN11AddressPoolC1Ev>
 8014a1c:	4a17      	ldr	r2, [pc, #92]	; (8014a7c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	601a      	str	r2, [r3, #0]
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2200      	movs	r2, #0
 8014a26:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8014a28:	2100      	movs	r1, #0
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	f000 f984 	bl	8014d38 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	2200      	movs	r2, #0
 8014a34:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	1d1a      	adds	r2, r3, #4
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	2200      	movs	r2, #0
 8014a42:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2208      	movs	r2, #8
 8014a48:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8014a4a:	687a      	ldr	r2, [r7, #4]
 8014a4c:	7993      	ldrb	r3, [r2, #6]
 8014a4e:	f36f 0300 	bfc	r3, #0, #1
 8014a52:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8014a54:	687a      	ldr	r2, [r7, #4]
 8014a56:	7993      	ldrb	r3, [r2, #6]
 8014a58:	f36f 0341 	bfc	r3, #1, #1
 8014a5c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	7993      	ldrb	r3, [r2, #6]
 8014a62:	210f      	movs	r1, #15
 8014a64:	f361 0387 	bfi	r3, r1, #2, #6
 8014a68:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f000 f995 	bl	8014d9a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	4618      	mov	r0, r3
 8014a74:	3708      	adds	r7, #8
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
 8014a7a:	bf00      	nop
 8014a7c:	080177c8 	.word	0x080177c8

08014a80 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b084      	sub	sp, #16
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
 8014a88:	460b      	mov	r3, r1
 8014a8a:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8014a8c:	78fb      	ldrb	r3, [r7, #3]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d102      	bne.n	8014a98 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	3308      	adds	r3, #8
 8014a96:	e014      	b.n	8014ac2 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8014a98:	78fb      	ldrb	r3, [r7, #3]
 8014a9a:	4619      	mov	r1, r3
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f000 f995 	bl	8014dcc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8014aa6:	7bfb      	ldrb	r3, [r7, #15]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d008      	beq.n	8014abe <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f103 0108 	add.w	r1, r3, #8
 8014ab2:	7bfa      	ldrb	r2, [r7, #15]
 8014ab4:	4613      	mov	r3, r2
 8014ab6:	00db      	lsls	r3, r3, #3
 8014ab8:	1a9b      	subs	r3, r3, r2
 8014aba:	440b      	add	r3, r1
 8014abc:	e000      	b.n	8014ac0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 8014abe:	2300      	movs	r3, #0
 8014ac0:	bf00      	nop
        };
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	3710      	adds	r7, #16
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd80      	pop	{r7, pc}
	...

08014acc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b086      	sub	sp, #24
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	607b      	str	r3, [r7, #4]
 8014ad6:	460b      	mov	r3, r1
 8014ad8:	72fb      	strb	r3, [r7, #11]
 8014ada:	4613      	mov	r3, r2
 8014adc:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8014ade:	f7eb ff81 	bl	80009e4 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8014ae2:	7afb      	ldrb	r3, [r7, #11]
 8014ae4:	f043 0302 	orr.w	r3, r3, #2
 8014ae8:	b2db      	uxtb	r3, r3
 8014aea:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 8014aec:	f107 0117 	add.w	r1, r7, #23
 8014af0:	f04f 33ff 	mov.w	r3, #4294967295
 8014af4:	2201      	movs	r2, #1
 8014af6:	480b      	ldr	r0, [pc, #44]	; (8014b24 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8014af8:	f7f1 fba1 	bl	800623e <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8014afc:	7abb      	ldrb	r3, [r7, #10]
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	f04f 33ff 	mov.w	r3, #4294967295
 8014b04:	6879      	ldr	r1, [r7, #4]
 8014b06:	4807      	ldr	r0, [pc, #28]	; (8014b24 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8014b08:	f7f1 fb99 	bl	800623e <HAL_SPI_Transmit>
        data_p += nbytes;
 8014b0c:	7abb      	ldrb	r3, [r7, #10]
 8014b0e:	687a      	ldr	r2, [r7, #4]
 8014b10:	4413      	add	r3, r2
 8014b12:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8014b14:	f7eb ff5a 	bl	80009cc <_ZN3P103SetEv>
        return ( data_p);
 8014b18:	687b      	ldr	r3, [r7, #4]
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	3718      	adds	r7, #24
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	20000528 	.word	0x20000528

08014b28 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b084      	sub	sp, #16
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	60f8      	str	r0, [r7, #12]
 8014b30:	607b      	str	r3, [r7, #4]
 8014b32:	460b      	mov	r3, r1
 8014b34:	72fb      	strb	r3, [r7, #11]
 8014b36:	4613      	mov	r3, r2
 8014b38:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8014b3a:	f7eb ff53 	bl	80009e4 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8014b3e:	f107 010b 	add.w	r1, r7, #11
 8014b42:	f04f 33ff 	mov.w	r3, #4294967295
 8014b46:	2201      	movs	r2, #1
 8014b48:	480d      	ldr	r0, [pc, #52]	; (8014b80 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8014b4a:	f7f1 fb78 	bl	800623e <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8014b4e:	7abb      	ldrb	r3, [r7, #10]
 8014b50:	461a      	mov	r2, r3
 8014b52:	2100      	movs	r1, #0
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f000 fd67 	bl	8015628 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8014b5a:	7abb      	ldrb	r3, [r7, #10]
 8014b5c:	b29a      	uxth	r2, r3
 8014b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b62:	6879      	ldr	r1, [r7, #4]
 8014b64:	4806      	ldr	r0, [pc, #24]	; (8014b80 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8014b66:	f7f1 fca6 	bl	80064b6 <HAL_SPI_Receive>
        data_p += nbytes;
 8014b6a:	7abb      	ldrb	r3, [r7, #10]
 8014b6c:	687a      	ldr	r2, [r7, #4]
 8014b6e:	4413      	add	r3, r2
 8014b70:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8014b72:	f7eb ff2b 	bl	80009cc <_ZN3P103SetEv>
        return ( data_p);
 8014b76:	687b      	ldr	r3, [r7, #4]
}
 8014b78:	4618      	mov	r0, r3
 8014b7a:	3710      	adds	r7, #16
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bd80      	pop	{r7, pc}
 8014b80:	20000528 	.word	0x20000528

08014b84 <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b084      	sub	sp, #16
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8014b90:	f7fe fd30 	bl	80135f4 <_ZN2P95IsSetEv>
 8014b94:	4603      	mov	r3, r0
 8014b96:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8014b98:	7bbb      	ldrb	r3, [r7, #14]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d104      	bne.n	8014ba8 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f000 f937 	bl	8014e12 <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8014ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	3710      	adds	r7, #16
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}
	...

08014bb4 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
                return vbusState;
 8014bbc:	4b03      	ldr	r3, [pc, #12]	; (8014bcc <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8014bbe:	781b      	ldrb	r3, [r3, #0]
        };
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	370c      	adds	r7, #12
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bca:	4770      	bx	lr
 8014bcc:	2000096c 	.word	0x2000096c

08014bd0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b084      	sub	sp, #16
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	4608      	mov	r0, r1
 8014bda:	4611      	mov	r1, r2
 8014bdc:	461a      	mov	r2, r3
 8014bde:	4603      	mov	r3, r0
 8014be0:	70fb      	strb	r3, [r7, #3]
 8014be2:	460b      	mov	r3, r1
 8014be4:	70bb      	strb	r3, [r7, #2]
 8014be6:	4613      	mov	r3, r2
 8014be8:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8014bea:	78fb      	ldrb	r3, [r7, #3]
 8014bec:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8014bee:	7b3b      	ldrb	r3, [r7, #12]
 8014bf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014bf4:	b2db      	uxtb	r3, r3
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d102      	bne.n	8014c00 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8014bfa:	787b      	ldrb	r3, [r7, #1]
 8014bfc:	2b07      	cmp	r3, #7
 8014bfe:	d901      	bls.n	8014c04 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8014c00:	2300      	movs	r3, #0
 8014c02:	e079      	b.n	8014cf8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 8014c04:	78bb      	ldrb	r3, [r7, #2]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d005      	beq.n	8014c16 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	79db      	ldrb	r3, [r3, #7]
 8014c0e:	2b07      	cmp	r3, #7
 8014c10:	d101      	bne.n	8014c16 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 8014c12:	2300      	movs	r3, #0
 8014c14:	e070      	b.n	8014cf8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 8014c16:	2100      	movs	r1, #0
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f000 f8d7 	bl	8014dcc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 8014c22:	7bfb      	ldrb	r3, [r7, #15]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d101      	bne.n	8014c2c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8014c28:	2300      	movs	r3, #0
 8014c2a:	e065      	b.n	8014cf8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8014c2c:	7b3b      	ldrb	r3, [r7, #12]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d124      	bne.n	8014c7c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 8014c32:	78bb      	ldrb	r3, [r7, #2]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d00f      	beq.n	8014c58 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8014c38:	7bfa      	ldrb	r2, [r7, #15]
 8014c3a:	6879      	ldr	r1, [r7, #4]
 8014c3c:	4613      	mov	r3, r2
 8014c3e:	00db      	lsls	r3, r3, #3
 8014c40:	1a9b      	subs	r3, r3, r2
 8014c42:	440b      	add	r3, r1
 8014c44:	330c      	adds	r3, #12
 8014c46:	2241      	movs	r2, #65	; 0x41
 8014c48:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	79db      	ldrb	r3, [r3, #7]
 8014c4e:	3301      	adds	r3, #1
 8014c50:	b2da      	uxtb	r2, r3
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	71da      	strb	r2, [r3, #7]
 8014c56:	e008      	b.n	8014c6a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8014c58:	7bfa      	ldrb	r2, [r7, #15]
 8014c5a:	6879      	ldr	r1, [r7, #4]
 8014c5c:	4613      	mov	r3, r2
 8014c5e:	00db      	lsls	r3, r3, #3
 8014c60:	1a9b      	subs	r3, r3, r2
 8014c62:	440b      	add	r3, r1
 8014c64:	330c      	adds	r3, #12
 8014c66:	2201      	movs	r2, #1
 8014c68:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 8014c6a:	7bfa      	ldrb	r2, [r7, #15]
 8014c6c:	6879      	ldr	r1, [r7, #4]
 8014c6e:	4613      	mov	r3, r2
 8014c70:	00db      	lsls	r3, r3, #3
 8014c72:	1a9b      	subs	r3, r3, r2
 8014c74:	440b      	add	r3, r1
 8014c76:	330c      	adds	r3, #12
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	e03d      	b.n	8014cf8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8014c80:	7b3b      	ldrb	r3, [r7, #12]
 8014c82:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014c86:	b2da      	uxtb	r2, r3
 8014c88:	7a3b      	ldrb	r3, [r7, #8]
 8014c8a:	f362 03c5 	bfi	r3, r2, #3, #3
 8014c8e:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8014c90:	78bb      	ldrb	r3, [r7, #2]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d013      	beq.n	8014cbe <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 8014c96:	7a3b      	ldrb	r3, [r7, #8]
 8014c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c9c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	79db      	ldrb	r3, [r3, #7]
 8014ca2:	3301      	adds	r3, #1
 8014ca4:	b2da      	uxtb	r2, r3
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	71da      	strb	r2, [r3, #7]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	79db      	ldrb	r3, [r3, #7]
 8014cae:	f003 0307 	and.w	r3, r3, #7
 8014cb2:	b2da      	uxtb	r2, r3
 8014cb4:	7a3b      	ldrb	r3, [r7, #8]
 8014cb6:	f362 0302 	bfi	r3, r2, #0, #3
 8014cba:	723b      	strb	r3, [r7, #8]
 8014cbc:	e00b      	b.n	8014cd6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 8014cbe:	7a3b      	ldrb	r3, [r7, #8]
 8014cc0:	f36f 1386 	bfc	r3, #6, #1
 8014cc4:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 8014cc6:	787b      	ldrb	r3, [r7, #1]
 8014cc8:	f003 0307 	and.w	r3, r3, #7
 8014ccc:	b2da      	uxtb	r2, r3
 8014cce:	7a3b      	ldrb	r3, [r7, #8]
 8014cd0:	f362 0302 	bfi	r3, r2, #0, #3
 8014cd4:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 8014cd6:	7bfa      	ldrb	r2, [r7, #15]
 8014cd8:	6879      	ldr	r1, [r7, #4]
 8014cda:	4613      	mov	r3, r2
 8014cdc:	00db      	lsls	r3, r3, #3
 8014cde:	1a9b      	subs	r3, r3, r2
 8014ce0:	440b      	add	r3, r1
 8014ce2:	330c      	adds	r3, #12
 8014ce4:	7a3a      	ldrb	r2, [r7, #8]
 8014ce6:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 8014ce8:	7bfa      	ldrb	r2, [r7, #15]
 8014cea:	6879      	ldr	r1, [r7, #4]
 8014cec:	4613      	mov	r3, r2
 8014cee:	00db      	lsls	r3, r3, #3
 8014cf0:	1a9b      	subs	r3, r3, r2
 8014cf2:	440b      	add	r3, r1
 8014cf4:	330c      	adds	r3, #12
 8014cf6:	781b      	ldrb	r3, [r3, #0]
        };
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3710      	adds	r7, #16
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}

08014d00 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	460b      	mov	r3, r1
 8014d0a:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8014d0c:	78fb      	ldrb	r3, [r7, #3]
 8014d0e:	2b41      	cmp	r3, #65	; 0x41
 8014d10:	d103      	bne.n	8014d1a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 8014d12:	6878      	ldr	r0, [r7, #4]
 8014d14:	f000 f841 	bl	8014d9a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8014d18:	e00b      	b.n	8014d32 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8014d1a:	78fb      	ldrb	r3, [r7, #3]
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f000 f854 	bl	8014dcc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8014d24:	4603      	mov	r3, r0
 8014d26:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8014d28:	7bfb      	ldrb	r3, [r7, #15]
 8014d2a:	4619      	mov	r1, r3
 8014d2c:	6878      	ldr	r0, [r7, #4]
 8014d2e:	f000 f893 	bl	8014e58 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 8014d32:	3710      	adds	r7, #16
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}

08014d38 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8014d38:	b480      	push	{r7}
 8014d3a:	b083      	sub	sp, #12
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	460b      	mov	r3, r1
 8014d42:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 8014d44:	78fa      	ldrb	r2, [r7, #3]
 8014d46:	6879      	ldr	r1, [r7, #4]
 8014d48:	4613      	mov	r3, r2
 8014d4a:	00db      	lsls	r3, r3, #3
 8014d4c:	1a9b      	subs	r3, r3, r2
 8014d4e:	440b      	add	r3, r1
 8014d50:	330c      	adds	r3, #12
 8014d52:	2200      	movs	r2, #0
 8014d54:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 8014d56:	78fa      	ldrb	r2, [r7, #3]
 8014d58:	6879      	ldr	r1, [r7, #4]
 8014d5a:	4613      	mov	r3, r2
 8014d5c:	00db      	lsls	r3, r3, #3
 8014d5e:	1a9b      	subs	r3, r3, r2
 8014d60:	440b      	add	r3, r1
 8014d62:	330d      	adds	r3, #13
 8014d64:	2201      	movs	r2, #1
 8014d66:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8014d68:	78fa      	ldrb	r2, [r7, #3]
 8014d6a:	6879      	ldr	r1, [r7, #4]
 8014d6c:	4613      	mov	r3, r2
 8014d6e:	00db      	lsls	r3, r3, #3
 8014d70:	1a9b      	subs	r3, r3, r2
 8014d72:	440b      	add	r3, r1
 8014d74:	330e      	adds	r3, #14
 8014d76:	2200      	movs	r2, #0
 8014d78:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 8014d7a:	78fa      	ldrb	r2, [r7, #3]
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	1d19      	adds	r1, r3, #4
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	4613      	mov	r3, r2
 8014d84:	00db      	lsls	r3, r3, #3
 8014d86:	1a9b      	subs	r3, r3, r2
 8014d88:	4403      	add	r3, r0
 8014d8a:	3308      	adds	r3, #8
 8014d8c:	6019      	str	r1, [r3, #0]
        };
 8014d8e:	bf00      	nop
 8014d90:	370c      	adds	r7, #12
 8014d92:	46bd      	mov	sp, r7
 8014d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d98:	4770      	bx	lr

08014d9a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 8014d9a:	b580      	push	{r7, lr}
 8014d9c:	b084      	sub	sp, #16
 8014d9e:	af00      	add	r7, sp, #0
 8014da0:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 8014da2:	2301      	movs	r3, #1
 8014da4:	73fb      	strb	r3, [r7, #15]
 8014da6:	7bfb      	ldrb	r3, [r7, #15]
 8014da8:	2b0f      	cmp	r3, #15
 8014daa:	d808      	bhi.n	8014dbe <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 8014dac:	7bfb      	ldrb	r3, [r7, #15]
 8014dae:	4619      	mov	r1, r3
 8014db0:	6878      	ldr	r0, [r7, #4]
 8014db2:	f7ff ffc1 	bl	8014d38 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 8014db6:	7bfb      	ldrb	r3, [r7, #15]
 8014db8:	3301      	adds	r3, #1
 8014dba:	73fb      	strb	r3, [r7, #15]
 8014dbc:	e7f3      	b.n	8014da6 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	71da      	strb	r2, [r3, #7]
        };
 8014dc4:	bf00      	nop
 8014dc6:	3710      	adds	r7, #16
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 8014dcc:	b480      	push	{r7}
 8014dce:	b085      	sub	sp, #20
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	460b      	mov	r3, r1
 8014dd6:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8014dd8:	2301      	movs	r3, #1
 8014dda:	73fb      	strb	r3, [r7, #15]
 8014ddc:	7bfb      	ldrb	r3, [r7, #15]
 8014dde:	2b0f      	cmp	r3, #15
 8014de0:	d810      	bhi.n	8014e04 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 8014de2:	7bfa      	ldrb	r2, [r7, #15]
 8014de4:	6879      	ldr	r1, [r7, #4]
 8014de6:	4613      	mov	r3, r2
 8014de8:	00db      	lsls	r3, r3, #3
 8014dea:	1a9b      	subs	r3, r3, r2
 8014dec:	440b      	add	r3, r1
 8014dee:	330c      	adds	r3, #12
 8014df0:	781b      	ldrb	r3, [r3, #0]
 8014df2:	78fa      	ldrb	r2, [r7, #3]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d101      	bne.n	8014dfc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8014df8:	7bfb      	ldrb	r3, [r7, #15]
 8014dfa:	e004      	b.n	8014e06 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8014dfc:	7bfb      	ldrb	r3, [r7, #15]
 8014dfe:	3301      	adds	r3, #1
 8014e00:	73fb      	strb	r3, [r7, #15]
 8014e02:	e7eb      	b.n	8014ddc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 8014e04:	2300      	movs	r3, #0
        };
 8014e06:	4618      	mov	r0, r3
 8014e08:	3714      	adds	r7, #20
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e10:	4770      	bx	lr

08014e12 <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 8014e12:	b580      	push	{r7, lr}
 8014e14:	b084      	sub	sp, #16
 8014e16:	af00      	add	r7, sp, #0
 8014e18:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8014e1e:	21c8      	movs	r1, #200	; 0xc8
 8014e20:	6878      	ldr	r0, [r7, #4]
 8014e22:	f7ed f9c9 	bl	80021b8 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8014e26:	4603      	mov	r3, r0
 8014e28:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8014e2a:	7bbb      	ldrb	r3, [r7, #14]
 8014e2c:	f003 0320 	and.w	r3, r3, #32
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d006      	beq.n	8014e42 <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f7ed f9e1 	bl	80021fc <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8014e3a:	7bfb      	ldrb	r3, [r7, #15]
 8014e3c:	f043 0320 	orr.w	r3, r3, #32
 8014e40:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 8014e42:	7bfb      	ldrb	r3, [r7, #15]
 8014e44:	461a      	mov	r2, r3
 8014e46:	21c8      	movs	r1, #200	; 0xc8
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f7ed f963 	bl	8002114 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 8014e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3710      	adds	r7, #16
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b084      	sub	sp, #16
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	460b      	mov	r3, r1
 8014e62:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 8014e64:	78fb      	ldrb	r3, [r7, #3]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d03a      	beq.n	8014ee0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 8014e6a:	78fa      	ldrb	r2, [r7, #3]
 8014e6c:	6879      	ldr	r1, [r7, #4]
 8014e6e:	4613      	mov	r3, r2
 8014e70:	00db      	lsls	r3, r3, #3
 8014e72:	1a9b      	subs	r3, r3, r2
 8014e74:	440b      	add	r3, r1
 8014e76:	330c      	adds	r3, #12
 8014e78:	781b      	ldrb	r3, [r3, #0]
 8014e7a:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 8014e7c:	7b3b      	ldrb	r3, [r7, #12]
 8014e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e82:	b2db      	uxtb	r3, r3
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d025      	beq.n	8014ed4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8014e88:	2301      	movs	r3, #1
 8014e8a:	73fb      	strb	r3, [r7, #15]
 8014e8c:	7bfb      	ldrb	r3, [r7, #15]
 8014e8e:	461a      	mov	r2, r3
 8014e90:	7b39      	ldrb	r1, [r7, #12]
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f000 f828 	bl	8014ee8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	73fb      	strb	r3, [r7, #15]
 8014e9c:	7bfb      	ldrb	r3, [r7, #15]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	bf14      	ite	ne
 8014ea2:	2301      	movne	r3, #1
 8014ea4:	2300      	moveq	r3, #0
 8014ea6:	b2db      	uxtb	r3, r3
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d005      	beq.n	8014eb8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 8014eac:	7bfb      	ldrb	r3, [r7, #15]
 8014eae:	4619      	mov	r1, r3
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7ff ffd1 	bl	8014e58 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8014eb6:	e7e9      	b.n	8014e8c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	79db      	ldrb	r3, [r3, #7]
 8014ebc:	7b3a      	ldrb	r2, [r7, #12]
 8014ebe:	f3c2 0202 	ubfx	r2, r2, #0, #3
 8014ec2:	b2d2      	uxtb	r2, r2
 8014ec4:	4293      	cmp	r3, r2
 8014ec6:	d105      	bne.n	8014ed4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	79db      	ldrb	r3, [r3, #7]
 8014ecc:	3b01      	subs	r3, #1
 8014ece:	b2da      	uxtb	r2, r3
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 8014ed4:	78fb      	ldrb	r3, [r7, #3]
 8014ed6:	4619      	mov	r1, r3
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f7ff ff2d 	bl	8014d38 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 8014ede:	e000      	b.n	8014ee2 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 8014ee0:	bf00      	nop
        }
 8014ee2:	3710      	adds	r7, #16
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}

08014ee8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 8014ee8:	b480      	push	{r7}
 8014eea:	b085      	sub	sp, #20
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	7039      	strb	r1, [r7, #0]
 8014ef2:	4613      	mov	r3, r2
 8014ef4:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 8014ef6:	78fb      	ldrb	r3, [r7, #3]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d004      	beq.n	8014f06 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8014efc:	78fb      	ldrb	r3, [r7, #3]
 8014efe:	2b0f      	cmp	r3, #15
 8014f00:	d801      	bhi.n	8014f06 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8014f02:	78fb      	ldrb	r3, [r7, #3]
 8014f04:	e000      	b.n	8014f08 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 8014f06:	2301      	movs	r3, #1
 8014f08:	73fb      	strb	r3, [r7, #15]
 8014f0a:	7bfb      	ldrb	r3, [r7, #15]
 8014f0c:	2b0f      	cmp	r3, #15
 8014f0e:	d816      	bhi.n	8014f3e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8014f10:	7bfa      	ldrb	r2, [r7, #15]
 8014f12:	6879      	ldr	r1, [r7, #4]
 8014f14:	4613      	mov	r3, r2
 8014f16:	00db      	lsls	r3, r3, #3
 8014f18:	1a9b      	subs	r3, r3, r2
 8014f1a:	440b      	add	r3, r1
 8014f1c:	3308      	adds	r3, #8
 8014f1e:	791b      	ldrb	r3, [r3, #4]
 8014f20:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8014f24:	b2da      	uxtb	r2, r3
 8014f26:	783b      	ldrb	r3, [r7, #0]
 8014f28:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014f2c:	b2db      	uxtb	r3, r3
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d101      	bne.n	8014f36 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 8014f32:	7bfb      	ldrb	r3, [r7, #15]
 8014f34:	e004      	b.n	8014f40 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 8014f36:	7bfb      	ldrb	r3, [r7, #15]
 8014f38:	3301      	adds	r3, #1
 8014f3a:	73fb      	strb	r3, [r7, #15]
 8014f3c:	e7e5      	b.n	8014f0a <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8014f3e:	2300      	movs	r3, #0
        };
 8014f40:	4618      	mov	r0, r3
 8014f42:	3714      	adds	r7, #20
 8014f44:	46bd      	mov	sp, r7
 8014f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4a:	4770      	bx	lr

08014f4c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>:
        DPAD_DOWN_LEFT = 0x6,
        DPAD_LEFT = 0x7,
        DPAD_LEFT_UP = 0x8,
};

bool XBOXONESParser::checkDpad(ButtonEnum b) {
 8014f4c:	b480      	push	{r7}
 8014f4e:	b083      	sub	sp, #12
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
 8014f54:	460b      	mov	r3, r1
 8014f56:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8014f58:	78fb      	ldrb	r3, [r7, #3]
 8014f5a:	2b03      	cmp	r3, #3
 8014f5c:	d86e      	bhi.n	801503c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf0>
 8014f5e:	a201      	add	r2, pc, #4	; (adr r2, 8014f64 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x18>)
 8014f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f64:	08014f75 	.word	0x08014f75
 8014f68:	08014fa7 	.word	0x08014fa7
 8014f6c:	08014fd9 	.word	0x08014fd9
 8014f70:	0801500b 	.word	0x0801500b
                case UP:
                        return xboxOneSData.btn.dpad == DPAD_LEFT_UP || xboxOneSData.btn.dpad == DPAD_UP || xboxOneSData.btn.dpad == DPAD_UP_RIGHT;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	7c1b      	ldrb	r3, [r3, #16]
 8014f78:	f003 030f 	and.w	r3, r3, #15
 8014f7c:	b2db      	uxtb	r3, r3
 8014f7e:	2b08      	cmp	r3, #8
 8014f80:	d00d      	beq.n	8014f9e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x52>
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	7c1b      	ldrb	r3, [r3, #16]
 8014f86:	f003 030f 	and.w	r3, r3, #15
 8014f8a:	b2db      	uxtb	r3, r3
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d006      	beq.n	8014f9e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x52>
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	7c1b      	ldrb	r3, [r3, #16]
 8014f94:	f003 030f 	and.w	r3, r3, #15
 8014f98:	b2db      	uxtb	r3, r3
 8014f9a:	2b02      	cmp	r3, #2
 8014f9c:	d101      	bne.n	8014fa2 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x56>
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	e04d      	b.n	801503e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	e04b      	b.n	801503e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return xboxOneSData.btn.dpad == DPAD_UP_RIGHT || xboxOneSData.btn.dpad == DPAD_RIGHT || xboxOneSData.btn.dpad == DPAD_RIGHT_DOWN;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	7c1b      	ldrb	r3, [r3, #16]
 8014faa:	f003 030f 	and.w	r3, r3, #15
 8014fae:	b2db      	uxtb	r3, r3
 8014fb0:	2b02      	cmp	r3, #2
 8014fb2:	d00d      	beq.n	8014fd0 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x84>
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	7c1b      	ldrb	r3, [r3, #16]
 8014fb8:	f003 030f 	and.w	r3, r3, #15
 8014fbc:	b2db      	uxtb	r3, r3
 8014fbe:	2b03      	cmp	r3, #3
 8014fc0:	d006      	beq.n	8014fd0 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x84>
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	7c1b      	ldrb	r3, [r3, #16]
 8014fc6:	f003 030f 	and.w	r3, r3, #15
 8014fca:	b2db      	uxtb	r3, r3
 8014fcc:	2b04      	cmp	r3, #4
 8014fce:	d101      	bne.n	8014fd4 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x88>
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	e034      	b.n	801503e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	e032      	b.n	801503e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return xboxOneSData.btn.dpad == DPAD_RIGHT_DOWN || xboxOneSData.btn.dpad == DPAD_DOWN || xboxOneSData.btn.dpad == DPAD_DOWN_LEFT;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	7c1b      	ldrb	r3, [r3, #16]
 8014fdc:	f003 030f 	and.w	r3, r3, #15
 8014fe0:	b2db      	uxtb	r3, r3
 8014fe2:	2b04      	cmp	r3, #4
 8014fe4:	d00d      	beq.n	8015002 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xb6>
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	7c1b      	ldrb	r3, [r3, #16]
 8014fea:	f003 030f 	and.w	r3, r3, #15
 8014fee:	b2db      	uxtb	r3, r3
 8014ff0:	2b05      	cmp	r3, #5
 8014ff2:	d006      	beq.n	8015002 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xb6>
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	7c1b      	ldrb	r3, [r3, #16]
 8014ff8:	f003 030f 	and.w	r3, r3, #15
 8014ffc:	b2db      	uxtb	r3, r3
 8014ffe:	2b06      	cmp	r3, #6
 8015000:	d101      	bne.n	8015006 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xba>
 8015002:	2301      	movs	r3, #1
 8015004:	e01b      	b.n	801503e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 8015006:	2300      	movs	r3, #0
 8015008:	e019      	b.n	801503e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return xboxOneSData.btn.dpad == DPAD_DOWN_LEFT || xboxOneSData.btn.dpad == DPAD_LEFT || xboxOneSData.btn.dpad == DPAD_LEFT_UP;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	7c1b      	ldrb	r3, [r3, #16]
 801500e:	f003 030f 	and.w	r3, r3, #15
 8015012:	b2db      	uxtb	r3, r3
 8015014:	2b06      	cmp	r3, #6
 8015016:	d00d      	beq.n	8015034 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xe8>
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	7c1b      	ldrb	r3, [r3, #16]
 801501c:	f003 030f 	and.w	r3, r3, #15
 8015020:	b2db      	uxtb	r3, r3
 8015022:	2b07      	cmp	r3, #7
 8015024:	d006      	beq.n	8015034 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xe8>
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	7c1b      	ldrb	r3, [r3, #16]
 801502a:	f003 030f 	and.w	r3, r3, #15
 801502e:	b2db      	uxtb	r3, r3
 8015030:	2b08      	cmp	r3, #8
 8015032:	d101      	bne.n	8015038 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xec>
 8015034:	2301      	movs	r3, #1
 8015036:	e002      	b.n	801503e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 8015038:	2300      	movs	r3, #0
 801503a:	e000      	b.n	801503e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 801503c:	2300      	movs	r3, #0
        }
}
 801503e:	4618      	mov	r0, r3
 8015040:	370c      	adds	r7, #12
 8015042:	46bd      	mov	sp, r7
 8015044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015048:	4770      	bx	lr
 801504a:	bf00      	nop

0801504c <_ZN14XBOXONESParser5ParseEhPh>:

int16_t XBOXONESParser::getAnalogHat(AnalogHatEnum a) {
        return xboxOneSData.hatValue[(uint8_t)a] - 32768; // Convert to signed integer
}

void XBOXONESParser::Parse(uint8_t len, uint8_t *buf) {
 801504c:	b580      	push	{r7, lr}
 801504e:	b086      	sub	sp, #24
 8015050:	af00      	add	r7, sp, #0
 8015052:	60f8      	str	r0, [r7, #12]
 8015054:	460b      	mov	r3, r1
 8015056:	607a      	str	r2, [r7, #4]
 8015058:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 801505a:	7afb      	ldrb	r3, [r7, #11]
 801505c:	2b01      	cmp	r3, #1
 801505e:	f240 80e5 	bls.w	801522c <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2b00      	cmp	r3, #0
 8015066:	f000 80e1 	beq.w	801522c <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	781b      	ldrb	r3, [r3, #0]
 801506e:	2b01      	cmp	r3, #1
 8015070:	d11a      	bne.n	80150a8 <_ZN14XBOXONESParser5ParseEhPh+0x5c>
                        memcpy(&xboxOneSData, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(xboxOneSData)));
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	1d18      	adds	r0, r3, #4
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	1c59      	adds	r1, r3, #1
 801507a:	7afb      	ldrb	r3, [r7, #11]
 801507c:	3b01      	subs	r3, #1
 801507e:	b2db      	uxtb	r3, r3
 8015080:	2b0f      	cmp	r3, #15
 8015082:	bf28      	it	cs
 8015084:	230f      	movcs	r3, #15
 8015086:	b2db      	uxtb	r3, r3
 8015088:	461a      	mov	r2, r3
 801508a:	f000 fabf 	bl	801560c <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (xboxOneSData.btn.val != oldButtonState.val) { // Check if anything has changed
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	691b      	ldr	r3, [r3, #16]
 8015092:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	7cd9      	ldrb	r1, [r3, #19]
 801509a:	8a9b      	ldrh	r3, [r3, #20]
 801509c:	021b      	lsls	r3, r3, #8
 801509e:	430b      	orrs	r3, r1
 80150a0:	429a      	cmp	r2, r3
 80150a2:	f000 809f 	beq.w	80151e4 <_ZN14XBOXONESParser5ParseEhPh+0x198>
 80150a6:	e030      	b.n	801510a <_ZN14XBOXONESParser5ParseEhPh+0xbe>
                else if (buf[0] == 0x02) { // This report contains the Xbox button
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	781b      	ldrb	r3, [r3, #0]
 80150ac:	2b02      	cmp	r3, #2
 80150ae:	d11c      	bne.n	80150ea <_ZN14XBOXONESParser5ParseEhPh+0x9e>
                        xboxButtonState = buf[1];
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	785a      	ldrb	r2, [r3, #1]
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	769a      	strb	r2, [r3, #26]
                        if(xboxButtonState != xboxOldButtonState) {
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	7e9a      	ldrb	r2, [r3, #26]
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	7edb      	ldrb	r3, [r3, #27]
 80150c0:	429a      	cmp	r2, r3
 80150c2:	f000 80b0 	beq.w	8015226 <_ZN14XBOXONESParser5ParseEhPh+0x1da>
                            xboxbuttonClickState = xboxButtonState & ~xboxOldButtonState; // Update click state variable
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	7e9b      	ldrb	r3, [r3, #26]
 80150ca:	b25a      	sxtb	r2, r3
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	7edb      	ldrb	r3, [r3, #27]
 80150d0:	b25b      	sxtb	r3, r3
 80150d2:	43db      	mvns	r3, r3
 80150d4:	b25b      	sxtb	r3, r3
 80150d6:	4013      	ands	r3, r2
 80150d8:	b25b      	sxtb	r3, r3
 80150da:	b2da      	uxtb	r2, r3
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	771a      	strb	r2, [r3, #28]
                            xboxOldButtonState = xboxButtonState;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	7e9a      	ldrb	r2, [r3, #26]
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	76da      	strb	r2, [r3, #27]
                        return;
 80150e8:	e09d      	b.n	8015226 <_ZN14XBOXONESParser5ParseEhPh+0x1da>
                } else if (buf[0] == 0x04) // Heartbeat
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	781b      	ldrb	r3, [r3, #0]
 80150ee:	2b04      	cmp	r3, #4
 80150f0:	f000 809b 	beq.w	801522a <_ZN14XBOXONESParser5ParseEhPh+0x1de>
                        Notify(PSTR("\r\nUnknown report id: "), 0x80);
 80150f4:	2180      	movs	r1, #128	; 0x80
 80150f6:	484f      	ldr	r0, [pc, #316]	; (8015234 <_ZN14XBOXONESParser5ParseEhPh+0x1e8>)
 80150f8:	f000 f93c 	bl	8015374 <_Z8E_NotifyPKci>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	781b      	ldrb	r3, [r3, #0]
 8015100:	2180      	movs	r1, #128	; 0x80
 8015102:	4618      	mov	r0, r3
 8015104:	f7fc fa77 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
                        return;
 8015108:	e090      	b.n	801522c <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        buttonClickState.val = xboxOneSData.btn.val & ~oldButtonState.val; // Update click state variable
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	691b      	ldr	r3, [r3, #16]
 801510e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8015112:	4619      	mov	r1, r3
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	7cda      	ldrb	r2, [r3, #19]
 8015118:	8a9b      	ldrh	r3, [r3, #20]
 801511a:	021b      	lsls	r3, r3, #8
 801511c:	4313      	orrs	r3, r2
 801511e:	43db      	mvns	r3, r3
 8015120:	400b      	ands	r3, r1
 8015122:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	b291      	uxth	r1, r2
 801512a:	2000      	movs	r0, #0
 801512c:	4301      	orrs	r1, r0
 801512e:	82d9      	strh	r1, [r3, #22]
 8015130:	0c12      	lsrs	r2, r2, #16
 8015132:	b2d2      	uxtb	r2, r2
 8015134:	2100      	movs	r1, #0
 8015136:	430a      	orrs	r2, r1
 8015138:	761a      	strb	r2, [r3, #24]
                        oldButtonState.val = xboxOneSData.btn.val;
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	691b      	ldr	r3, [r3, #16]
 801513e:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	b2d1      	uxtb	r1, r2
 8015146:	2000      	movs	r0, #0
 8015148:	4301      	orrs	r1, r0
 801514a:	74d9      	strb	r1, [r3, #19]
 801514c:	0a12      	lsrs	r2, r2, #8
 801514e:	b292      	uxth	r2, r2
 8015150:	2100      	movs	r1, #0
 8015152:	430a      	orrs	r2, r1
 8015154:	829a      	strh	r2, [r3, #20]

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8015156:	2300      	movs	r3, #0
 8015158:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 801515a:	2100      	movs	r1, #0
 801515c:	68f8      	ldr	r0, [r7, #12]
 801515e:	f7ff fef5 	bl	8014f4c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 8015162:	4603      	mov	r3, r0
 8015164:	2b00      	cmp	r3, #0
 8015166:	d003      	beq.n	8015170 <_ZN14XBOXONESParser5ParseEhPh+0x124>
                                newDpad |= 1 << UP;
 8015168:	7dfb      	ldrb	r3, [r7, #23]
 801516a:	f043 0301 	orr.w	r3, r3, #1
 801516e:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 8015170:	2101      	movs	r1, #1
 8015172:	68f8      	ldr	r0, [r7, #12]
 8015174:	f7ff feea 	bl	8014f4c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 8015178:	4603      	mov	r3, r0
 801517a:	2b00      	cmp	r3, #0
 801517c:	d003      	beq.n	8015186 <_ZN14XBOXONESParser5ParseEhPh+0x13a>
                                newDpad |= 1 << RIGHT;
 801517e:	7dfb      	ldrb	r3, [r7, #23]
 8015180:	f043 0302 	orr.w	r3, r3, #2
 8015184:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 8015186:	2102      	movs	r1, #2
 8015188:	68f8      	ldr	r0, [r7, #12]
 801518a:	f7ff fedf 	bl	8014f4c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 801518e:	4603      	mov	r3, r0
 8015190:	2b00      	cmp	r3, #0
 8015192:	d003      	beq.n	801519c <_ZN14XBOXONESParser5ParseEhPh+0x150>
                                newDpad |= 1 << DOWN;
 8015194:	7dfb      	ldrb	r3, [r7, #23]
 8015196:	f043 0304 	orr.w	r3, r3, #4
 801519a:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 801519c:	2103      	movs	r1, #3
 801519e:	68f8      	ldr	r0, [r7, #12]
 80151a0:	f7ff fed4 	bl	8014f4c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 80151a4:	4603      	mov	r3, r0
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d003      	beq.n	80151b2 <_ZN14XBOXONESParser5ParseEhPh+0x166>
                                newDpad |= 1 << LEFT;
 80151aa:	7dfb      	ldrb	r3, [r7, #23]
 80151ac:	f043 0308 	orr.w	r3, r3, #8
 80151b0:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	7e5b      	ldrb	r3, [r3, #25]
 80151b6:	7dfa      	ldrb	r2, [r7, #23]
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d013      	beq.n	80151e4 <_ZN14XBOXONESParser5ParseEhPh+0x198>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	7e5b      	ldrb	r3, [r3, #25]
 80151c0:	b25b      	sxtb	r3, r3
 80151c2:	43db      	mvns	r3, r3
 80151c4:	b25a      	sxtb	r2, r3
 80151c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80151ca:	4013      	ands	r3, r2
 80151cc:	b25b      	sxtb	r3, r3
 80151ce:	f003 030f 	and.w	r3, r3, #15
 80151d2:	b2d9      	uxtb	r1, r3
 80151d4:	68fa      	ldr	r2, [r7, #12]
 80151d6:	7d93      	ldrb	r3, [r2, #22]
 80151d8:	f361 0303 	bfi	r3, r1, #0, #4
 80151dc:	7593      	strb	r3, [r2, #22]
                                oldDpad = newDpad;
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	7dfa      	ldrb	r2, [r7, #23]
 80151e2:	765a      	strb	r2, [r3, #25]
                        }
                }

                // Handle click detection for triggers
                if(xboxOneSData.trigger[0] != 0 && triggerOld[0] == 0)
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	899b      	ldrh	r3, [r3, #12]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d007      	beq.n	80151fc <_ZN14XBOXONESParser5ParseEhPh+0x1b0>
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	8bdb      	ldrh	r3, [r3, #30]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d103      	bne.n	80151fc <_ZN14XBOXONESParser5ParseEhPh+0x1b0>
                        L2Clicked = true;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	2201      	movs	r2, #1
 80151f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                triggerOld[0] = xboxOneSData.trigger[0];
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	899a      	ldrh	r2, [r3, #12]
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	83da      	strh	r2, [r3, #30]
                if(xboxOneSData.trigger[1] != 0 && triggerOld[1] == 0)
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	89db      	ldrh	r3, [r3, #14]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d007      	beq.n	801521c <_ZN14XBOXONESParser5ParseEhPh+0x1d0>
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	8c1b      	ldrh	r3, [r3, #32]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d103      	bne.n	801521c <_ZN14XBOXONESParser5ParseEhPh+0x1d0>
                        R2Clicked = true;
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	2201      	movs	r2, #1
 8015218:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                triggerOld[1] = xboxOneSData.trigger[1];
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	89da      	ldrh	r2, [r3, #14]
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	841a      	strh	r2, [r3, #32]
 8015224:	e002      	b.n	801522c <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        return;
 8015226:	bf00      	nop
 8015228:	e000      	b.n	801522c <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        return;
 801522a:	bf00      	nop
        }
}
 801522c:	3718      	adds	r7, #24
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
 8015232:	bf00      	nop
 8015234:	08016700 	.word	0x08016700

08015238 <_ZN14XBOXONESParser5ResetEv>:

void XBOXONESParser::Reset() {
 8015238:	b480      	push	{r7}
 801523a:	b085      	sub	sp, #20
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(xboxOneSData.hatValue) / sizeof(xboxOneSData.hatValue[0]); i++)
 8015240:	2300      	movs	r3, #0
 8015242:	73fb      	strb	r3, [r7, #15]
 8015244:	7bfb      	ldrb	r3, [r7, #15]
 8015246:	2b03      	cmp	r3, #3
 8015248:	d80a      	bhi.n	8015260 <_ZN14XBOXONESParser5ResetEv+0x28>
                xboxOneSData.hatValue[i] = 32768; // Center value
 801524a:	7bfb      	ldrb	r3, [r7, #15]
 801524c:	687a      	ldr	r2, [r7, #4]
 801524e:	005b      	lsls	r3, r3, #1
 8015250:	4413      	add	r3, r2
 8015252:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015256:	809a      	strh	r2, [r3, #4]
        for (i = 0; i < sizeof(xboxOneSData.hatValue) / sizeof(xboxOneSData.hatValue[0]); i++)
 8015258:	7bfb      	ldrb	r3, [r7, #15]
 801525a:	3301      	adds	r3, #1
 801525c:	73fb      	strb	r3, [r7, #15]
 801525e:	e7f1      	b.n	8015244 <_ZN14XBOXONESParser5ResetEv+0xc>
        xboxOneSData.btn.val = 0;
 8015260:	687a      	ldr	r2, [r7, #4]
 8015262:	6913      	ldr	r3, [r2, #16]
 8015264:	f36f 0317 	bfc	r3, #0, #24
 8015268:	6113      	str	r3, [r2, #16]
        oldButtonState.val = 0;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2200      	movs	r2, #0
 801526e:	74da      	strb	r2, [r3, #19]
 8015270:	2200      	movs	r2, #0
 8015272:	829a      	strh	r2, [r3, #20]
        for (i = 0; i < sizeof(xboxOneSData.trigger) / sizeof(xboxOneSData.trigger[0]); i++)
 8015274:	2300      	movs	r3, #0
 8015276:	73fb      	strb	r3, [r7, #15]
 8015278:	7bfb      	ldrb	r3, [r7, #15]
 801527a:	2b01      	cmp	r3, #1
 801527c:	d80a      	bhi.n	8015294 <_ZN14XBOXONESParser5ResetEv+0x5c>
                xboxOneSData.trigger[i] = 0;
 801527e:	7bfb      	ldrb	r3, [r7, #15]
 8015280:	687a      	ldr	r2, [r7, #4]
 8015282:	3304      	adds	r3, #4
 8015284:	005b      	lsls	r3, r3, #1
 8015286:	4413      	add	r3, r2
 8015288:	2200      	movs	r2, #0
 801528a:	809a      	strh	r2, [r3, #4]
        for (i = 0; i < sizeof(xboxOneSData.trigger) / sizeof(xboxOneSData.trigger[0]); i++)
 801528c:	7bfb      	ldrb	r3, [r7, #15]
 801528e:	3301      	adds	r3, #1
 8015290:	73fb      	strb	r3, [r7, #15]
 8015292:	e7f1      	b.n	8015278 <_ZN14XBOXONESParser5ResetEv+0x40>

        xboxOneSData.btn.dpad = DPAD_OFF;
 8015294:	687a      	ldr	r2, [r7, #4]
 8015296:	7c13      	ldrb	r3, [r2, #16]
 8015298:	f36f 0303 	bfc	r3, #0, #4
 801529c:	7413      	strb	r3, [r2, #16]
        oldButtonState.dpad = DPAD_OFF;
 801529e:	687a      	ldr	r2, [r7, #4]
 80152a0:	7cd3      	ldrb	r3, [r2, #19]
 80152a2:	f36f 0303 	bfc	r3, #0, #4
 80152a6:	74d3      	strb	r3, [r2, #19]
        buttonClickState.dpad = 0;
 80152a8:	687a      	ldr	r2, [r7, #4]
 80152aa:	7d93      	ldrb	r3, [r2, #22]
 80152ac:	f36f 0303 	bfc	r3, #0, #4
 80152b0:	7593      	strb	r3, [r2, #22]
        oldDpad = 0;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2200      	movs	r2, #0
 80152b6:	765a      	strb	r2, [r3, #25]
};
 80152b8:	bf00      	nop
 80152ba:	3714      	adds	r7, #20
 80152bc:	46bd      	mov	sp, r7
 80152be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c2:	4770      	bx	lr

080152c4 <_Z10D_PrintHexItEvT_i>:
template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	4603      	mov	r3, r0
 80152cc:	6039      	str	r1, [r7, #0]
 80152ce:	80fb      	strh	r3, [r7, #6]
        PrintHex<T > (val, lvl);
 80152d0:	88fb      	ldrh	r3, [r7, #6]
 80152d2:	6839      	ldr	r1, [r7, #0]
 80152d4:	4618      	mov	r0, r3
 80152d6:	f000 f804 	bl	80152e2 <_Z8PrintHexItEvT_i>
}
 80152da:	bf00      	nop
 80152dc:	3708      	adds	r7, #8
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <_Z8PrintHexItEvT_i>:
void PrintHex(T val, int lvl) {
 80152e2:	b580      	push	{r7, lr}
 80152e4:	b084      	sub	sp, #16
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	4603      	mov	r3, r0
 80152ea:	6039      	str	r1, [r7, #0]
 80152ec:	80fb      	strh	r3, [r7, #6]
        int num_nibbles = sizeof (T) * 2;
 80152ee:	2304      	movs	r3, #4
 80152f0:	60fb      	str	r3, [r7, #12]
                char v = 48 + (((val >> (num_nibbles - 1) * 4)) & 0x0f);
 80152f2:	88fa      	ldrh	r2, [r7, #6]
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	3b01      	subs	r3, #1
 80152f8:	009b      	lsls	r3, r3, #2
 80152fa:	fa42 f303 	asr.w	r3, r2, r3
 80152fe:	b2db      	uxtb	r3, r3
 8015300:	f003 030f 	and.w	r3, r3, #15
 8015304:	b2db      	uxtb	r3, r3
 8015306:	3330      	adds	r3, #48	; 0x30
 8015308:	72fb      	strb	r3, [r7, #11]
                if(v > 57) v += 7;
 801530a:	7afb      	ldrb	r3, [r7, #11]
 801530c:	2b39      	cmp	r3, #57	; 0x39
 801530e:	d902      	bls.n	8015316 <_Z8PrintHexItEvT_i+0x34>
 8015310:	7afb      	ldrb	r3, [r7, #11]
 8015312:	3307      	adds	r3, #7
 8015314:	72fb      	strb	r3, [r7, #11]
                E_Notifyc(v, lvl);
 8015316:	7afb      	ldrb	r3, [r7, #11]
 8015318:	6839      	ldr	r1, [r7, #0]
 801531a:	4618      	mov	r0, r3
 801531c:	f000 f810 	bl	8015340 <_Z9E_Notifycci>
        do {
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	3b01      	subs	r3, #1
 8015324:	60fb      	str	r3, [r7, #12]
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	2b00      	cmp	r3, #0
 801532a:	bf14      	ite	ne
 801532c:	2301      	movne	r3, #1
 801532e:	2300      	moveq	r3, #0
 8015330:	b2db      	uxtb	r3, r3
 8015332:	2b00      	cmp	r3, #0
 8015334:	d000      	beq.n	8015338 <_Z8PrintHexItEvT_i+0x56>
 8015336:	e7dc      	b.n	80152f2 <_Z8PrintHexItEvT_i+0x10>
}
 8015338:	bf00      	nop
 801533a:	3710      	adds	r7, #16
 801533c:	46bd      	mov	sp, r7
 801533e:	bd80      	pop	{r7, pc}

08015340 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
 8015340:	b580      	push	{r7, lr}
 8015342:	b082      	sub	sp, #8
 8015344:	af00      	add	r7, sp, #0
 8015346:	4603      	mov	r3, r0
 8015348:	6039      	str	r1, [r7, #0]
 801534a:	71fb      	strb	r3, [r7, #7]
        if(UsbDEBUGlvl < lvl) return;
 801534c:	4b07      	ldr	r3, [pc, #28]	; (801536c <_Z9E_Notifycci+0x2c>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	683a      	ldr	r2, [r7, #0]
 8015352:	429a      	cmp	r2, r3
 8015354:	dc05      	bgt.n	8015362 <_Z9E_Notifycci+0x22>
#if defined(ARDUINO) && ARDUINO >=100
        USB_HOST_SERIAL.print(c);
 8015356:	79fb      	ldrb	r3, [r7, #7]
 8015358:	4619      	mov	r1, r3
 801535a:	4805      	ldr	r0, [pc, #20]	; (8015370 <_Z9E_Notifycci+0x30>)
 801535c:	f7eb f93a 	bl	80005d4 <_ZN5Print5printEc>
 8015360:	e000      	b.n	8015364 <_Z9E_Notifycci+0x24>
        if(UsbDEBUGlvl < lvl) return;
 8015362:	bf00      	nop
#else
        USB_HOST_SERIAL.print(c, BYTE);
#endif
        //USB_HOST_SERIAL.flush();
}
 8015364:	3708      	adds	r7, #8
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}
 801536a:	bf00      	nop
 801536c:	2000011c 	.word	0x2000011c
 8015370:	200005c4 	.word	0x200005c4

08015374 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
 8015374:	b580      	push	{r7, lr}
 8015376:	b084      	sub	sp, #16
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
 801537c:	6039      	str	r1, [r7, #0]
        if(UsbDEBUGlvl < lvl) return;
 801537e:	4b10      	ldr	r3, [pc, #64]	; (80153c0 <_Z8E_NotifyPKci+0x4c>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	683a      	ldr	r2, [r7, #0]
 8015384:	429a      	cmp	r2, r3
 8015386:	dc15      	bgt.n	80153b4 <_Z8E_NotifyPKci+0x40>
        if(!msg) return;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d014      	beq.n	80153b8 <_Z8E_NotifyPKci+0x44>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	1c5a      	adds	r2, r3, #1
 8015392:	607a      	str	r2, [r7, #4]
 8015394:	781b      	ldrb	r3, [r3, #0]
 8015396:	73fb      	strb	r3, [r7, #15]
 8015398:	7bfb      	ldrb	r3, [r7, #15]
 801539a:	2b00      	cmp	r3, #0
 801539c:	bf14      	ite	ne
 801539e:	2301      	movne	r3, #1
 80153a0:	2300      	moveq	r3, #0
 80153a2:	b2db      	uxtb	r3, r3
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d008      	beq.n	80153ba <_Z8E_NotifyPKci+0x46>
 80153a8:	7bfb      	ldrb	r3, [r7, #15]
 80153aa:	6839      	ldr	r1, [r7, #0]
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7ff ffc7 	bl	8015340 <_Z9E_Notifycci>
 80153b2:	e7ec      	b.n	801538e <_Z8E_NotifyPKci+0x1a>
        if(UsbDEBUGlvl < lvl) return;
 80153b4:	bf00      	nop
 80153b6:	e000      	b.n	80153ba <_Z8E_NotifyPKci+0x46>
        if(!msg) return;
 80153b8:	bf00      	nop
}
 80153ba:	3710      	adds	r7, #16
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}
 80153c0:	2000011c 	.word	0x2000011c

080153c4 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b084      	sub	sp, #16
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	6039      	str	r1, [r7, #0]
        if(UsbDEBUGlvl < lvl) return;
 80153ce:	4b10      	ldr	r3, [pc, #64]	; (8015410 <_Z11E_NotifyStrPKci+0x4c>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	683a      	ldr	r2, [r7, #0]
 80153d4:	429a      	cmp	r2, r3
 80153d6:	dc15      	bgt.n	8015404 <_Z11E_NotifyStrPKci+0x40>
        if(!msg) return;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d014      	beq.n	8015408 <_Z11E_NotifyStrPKci+0x44>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	1c5a      	adds	r2, r3, #1
 80153e2:	607a      	str	r2, [r7, #4]
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	73fb      	strb	r3, [r7, #15]
 80153e8:	7bfb      	ldrb	r3, [r7, #15]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	bf14      	ite	ne
 80153ee:	2301      	movne	r3, #1
 80153f0:	2300      	moveq	r3, #0
 80153f2:	b2db      	uxtb	r3, r3
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d008      	beq.n	801540a <_Z11E_NotifyStrPKci+0x46>
 80153f8:	7bfb      	ldrb	r3, [r7, #15]
 80153fa:	6839      	ldr	r1, [r7, #0]
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7ff ff9f 	bl	8015340 <_Z9E_Notifycci>
 8015402:	e7ec      	b.n	80153de <_Z11E_NotifyStrPKci+0x1a>
        if(UsbDEBUGlvl < lvl) return;
 8015404:	bf00      	nop
 8015406:	e000      	b.n	801540a <_Z11E_NotifyStrPKci+0x46>
        if(!msg) return;
 8015408:	bf00      	nop
}
 801540a:	3710      	adds	r7, #16
 801540c:	46bd      	mov	sp, r7
 801540e:	bd80      	pop	{r7, pc}
 8015410:	2000011c 	.word	0x2000011c

08015414 <_Z21NotifyFailGetDevDescrv>:
        //USB_HOST_SERIAL.flush();
}

#ifdef DEBUG_USB_HOST

void NotifyFailGetDevDescr(void) {
 8015414:	b580      	push	{r7, lr}
 8015416:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\ngetDevDescr "), 0x80);
 8015418:	2180      	movs	r1, #128	; 0x80
 801541a:	4802      	ldr	r0, [pc, #8]	; (8015424 <_Z21NotifyFailGetDevDescrv+0x10>)
 801541c:	f7ff ffaa 	bl	8015374 <_Z8E_NotifyPKci>
}
 8015420:	bf00      	nop
 8015422:	bd80      	pop	{r7, pc}
 8015424:	08016718 	.word	0x08016718

08015428 <_Z24NotifyFailSetDevTblEntryv>:

void NotifyFailSetDevTblEntry(void) {
 8015428:	b580      	push	{r7, lr}
 801542a:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\nsetDevTblEn "), 0x80);
 801542c:	2180      	movs	r1, #128	; 0x80
 801542e:	4802      	ldr	r0, [pc, #8]	; (8015438 <_Z24NotifyFailSetDevTblEntryv+0x10>)
 8015430:	f7ff ffa0 	bl	8015374 <_Z8E_NotifyPKci>
}
 8015434:	bf00      	nop
 8015436:	bd80      	pop	{r7, pc}
 8015438:	08016728 	.word	0x08016728

0801543c <_Z22NotifyFailGetConfDescrv>:

void NotifyFailGetConfDescr(void) {
 801543c:	b580      	push	{r7, lr}
 801543e:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\ngetConf "), 0x80);
 8015440:	2180      	movs	r1, #128	; 0x80
 8015442:	4802      	ldr	r0, [pc, #8]	; (801544c <_Z22NotifyFailGetConfDescrv+0x10>)
 8015444:	f7ff ff96 	bl	8015374 <_Z8E_NotifyPKci>
}
 8015448:	bf00      	nop
 801544a:	bd80      	pop	{r7, pc}
 801544c:	08016738 	.word	0x08016738

08015450 <_Z22NotifyFailSetConfDescrv>:

void NotifyFailSetConfDescr(void) {
 8015450:	b580      	push	{r7, lr}
 8015452:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\nsetConf "), 0x80);
 8015454:	2180      	movs	r1, #128	; 0x80
 8015456:	4802      	ldr	r0, [pc, #8]	; (8015460 <_Z22NotifyFailSetConfDescrv+0x10>)
 8015458:	f7ff ff8c 	bl	8015374 <_Z8E_NotifyPKci>
}
 801545c:	bf00      	nop
 801545e:	bd80      	pop	{r7, pc}
 8015460:	08016744 	.word	0x08016744

08015464 <_Z21NotifyFailGetDevDescrh>:

void NotifyFailGetDevDescr(uint8_t reason) {
 8015464:	b580      	push	{r7, lr}
 8015466:	b082      	sub	sp, #8
 8015468:	af00      	add	r7, sp, #0
 801546a:	4603      	mov	r3, r0
 801546c:	71fb      	strb	r3, [r7, #7]
        NotifyFailGetDevDescr();
 801546e:	f7ff ffd1 	bl	8015414 <_Z21NotifyFailGetDevDescrv>
        NotifyFail(reason);
 8015472:	79fb      	ldrb	r3, [r7, #7]
 8015474:	4618      	mov	r0, r3
 8015476:	f000 f827 	bl	80154c8 <_Z10NotifyFailh>
}
 801547a:	bf00      	nop
 801547c:	3708      	adds	r7, #8
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}
	...

08015484 <_Z23NotifyFailUnknownDevicett>:
void NotifyFailSetConfDescr(uint8_t reason) {
        NotifyFailSetConfDescr();
        NotifyFail(reason);
}

void NotifyFailUnknownDevice(uint16_t VID, uint16_t PID) {
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	4603      	mov	r3, r0
 801548c:	460a      	mov	r2, r1
 801548e:	80fb      	strh	r3, [r7, #6]
 8015490:	4613      	mov	r3, r2
 8015492:	80bb      	strh	r3, [r7, #4]
        Notify(PSTR("\r\nUnknown Device Connected - VID: "), 0x80);
 8015494:	2180      	movs	r1, #128	; 0x80
 8015496:	480a      	ldr	r0, [pc, #40]	; (80154c0 <_Z23NotifyFailUnknownDevicett+0x3c>)
 8015498:	f7ff ff6c 	bl	8015374 <_Z8E_NotifyPKci>
        D_PrintHex<uint16_t > (VID, 0x80);
 801549c:	88fb      	ldrh	r3, [r7, #6]
 801549e:	2180      	movs	r1, #128	; 0x80
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7ff ff0f 	bl	80152c4 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR(" PID: "), 0x80);
 80154a6:	2180      	movs	r1, #128	; 0x80
 80154a8:	4806      	ldr	r0, [pc, #24]	; (80154c4 <_Z23NotifyFailUnknownDevicett+0x40>)
 80154aa:	f7ff ff63 	bl	8015374 <_Z8E_NotifyPKci>
        D_PrintHex<uint16_t > (PID, 0x80);
 80154ae:	88bb      	ldrh	r3, [r7, #4]
 80154b0:	2180      	movs	r1, #128	; 0x80
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7ff ff06 	bl	80152c4 <_Z10D_PrintHexItEvT_i>
}
 80154b8:	bf00      	nop
 80154ba:	3708      	adds	r7, #8
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}
 80154c0:	08016750 	.word	0x08016750
 80154c4:	08016774 	.word	0x08016774

080154c8 <_Z10NotifyFailh>:

void NotifyFail(uint8_t rcode) {
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b082      	sub	sp, #8
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	4603      	mov	r3, r0
 80154d0:	71fb      	strb	r3, [r7, #7]
        D_PrintHex<uint8_t > (rcode, 0x80);
 80154d2:	79fb      	ldrb	r3, [r7, #7]
 80154d4:	2180      	movs	r1, #128	; 0x80
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7fc f88d 	bl	80115f6 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\n"), 0x80);
 80154dc:	2180      	movs	r1, #128	; 0x80
 80154de:	4803      	ldr	r0, [pc, #12]	; (80154ec <_Z10NotifyFailh+0x24>)
 80154e0:	f7ff ff48 	bl	8015374 <_Z8E_NotifyPKci>
}
 80154e4:	bf00      	nop
 80154e6:	3708      	adds	r7, #8
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	0801677c 	.word	0x0801677c

080154f0 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b084      	sub	sp, #16
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	60f8      	str	r0, [r7, #12]
 80154f8:	60b9      	str	r1, [r7, #8]
 80154fa:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d105      	bne.n	8015510 <_ZN20MultiByteValueParser5ParseEPPhPt+0x20>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
 8015504:	2180      	movs	r1, #128	; 0x80
 8015506:	481d      	ldr	r0, [pc, #116]	; (801557c <_ZN20MultiByteValueParser5ParseEPPhPt+0x8c>)
 8015508:	f7ff ff34 	bl	8015374 <_Z8E_NotifyPKci>
                return false;
 801550c:	2300      	movs	r3, #0
 801550e:	e031      	b.n	8015574 <_ZN20MultiByteValueParser5ParseEPPhPt+0x84>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	791b      	ldrb	r3, [r3, #4]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d022      	beq.n	801555e <_ZN20MultiByteValueParser5ParseEPPhPt+0x6e>
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	881b      	ldrh	r3, [r3, #0]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d01e      	beq.n	801555e <_ZN20MultiByteValueParser5ParseEPPhPt+0x6e>
                pBuf[valueSize - countDown] = (**pp);
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	681a      	ldr	r2, [r3, #0]
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	68f9      	ldr	r1, [r7, #12]
 801552a:	7949      	ldrb	r1, [r1, #5]
 801552c:	4608      	mov	r0, r1
 801552e:	68f9      	ldr	r1, [r7, #12]
 8015530:	7909      	ldrb	r1, [r1, #4]
 8015532:	1a41      	subs	r1, r0, r1
 8015534:	440b      	add	r3, r1
 8015536:	7812      	ldrb	r2, [r2, #0]
 8015538:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	791b      	ldrb	r3, [r3, #4]
 801553e:	3b01      	subs	r3, #1
 8015540:	b2da      	uxtb	r2, r3
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	711a      	strb	r2, [r3, #4]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	881b      	ldrh	r3, [r3, #0]
 801554a:	3b01      	subs	r3, #1
 801554c:	b29a      	uxth	r2, r3
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	801a      	strh	r2, [r3, #0]
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	1c5a      	adds	r2, r3, #1
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	601a      	str	r2, [r3, #0]
 801555c:	e7d8      	b.n	8015510 <_ZN20MultiByteValueParser5ParseEPPhPt+0x20>

        if(countDown)
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	791b      	ldrb	r3, [r3, #4]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d001      	beq.n	801556a <_ZN20MultiByteValueParser5ParseEPPhPt+0x7a>
                return false;
 8015566:	2300      	movs	r3, #0
 8015568:	e004      	b.n	8015574 <_ZN20MultiByteValueParser5ParseEPPhPt+0x84>

        countDown = valueSize;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	795a      	ldrb	r2, [r3, #5]
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	711a      	strb	r2, [r3, #4]
        return true;
 8015572:	2301      	movs	r3, #1
}
 8015574:	4618      	mov	r0, r3
 8015576:	3710      	adds	r7, #16
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}
 801557c:	08016780 	.word	0x08016780

08015580 <__cxa_pure_virtual>:
 8015580:	b508      	push	{r3, lr}
 8015582:	f000 f80d 	bl	80155a0 <_ZSt9terminatev>

08015586 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8015586:	b508      	push	{r3, lr}
 8015588:	4780      	blx	r0
 801558a:	f000 f80e 	bl	80155aa <abort>
	...

08015590 <_ZSt13get_terminatev>:
 8015590:	4b02      	ldr	r3, [pc, #8]	; (801559c <_ZSt13get_terminatev+0xc>)
 8015592:	6818      	ldr	r0, [r3, #0]
 8015594:	f3bf 8f5b 	dmb	ish
 8015598:	4770      	bx	lr
 801559a:	bf00      	nop
 801559c:	20000120 	.word	0x20000120

080155a0 <_ZSt9terminatev>:
 80155a0:	b508      	push	{r3, lr}
 80155a2:	f7ff fff5 	bl	8015590 <_ZSt13get_terminatev>
 80155a6:	f7ff ffee 	bl	8015586 <_ZN10__cxxabiv111__terminateEPFvvE>

080155aa <abort>:
 80155aa:	b508      	push	{r3, lr}
 80155ac:	2006      	movs	r0, #6
 80155ae:	f000 f86b 	bl	8015688 <raise>
 80155b2:	2001      	movs	r0, #1
 80155b4:	f7ed f8a2 	bl	80026fc <_exit>

080155b8 <__errno>:
 80155b8:	4b01      	ldr	r3, [pc, #4]	; (80155c0 <__errno+0x8>)
 80155ba:	6818      	ldr	r0, [r3, #0]
 80155bc:	4770      	bx	lr
 80155be:	bf00      	nop
 80155c0:	20000124 	.word	0x20000124

080155c4 <__libc_init_array>:
 80155c4:	b570      	push	{r4, r5, r6, lr}
 80155c6:	4d0d      	ldr	r5, [pc, #52]	; (80155fc <__libc_init_array+0x38>)
 80155c8:	4c0d      	ldr	r4, [pc, #52]	; (8015600 <__libc_init_array+0x3c>)
 80155ca:	1b64      	subs	r4, r4, r5
 80155cc:	10a4      	asrs	r4, r4, #2
 80155ce:	2600      	movs	r6, #0
 80155d0:	42a6      	cmp	r6, r4
 80155d2:	d109      	bne.n	80155e8 <__libc_init_array+0x24>
 80155d4:	4d0b      	ldr	r5, [pc, #44]	; (8015604 <__libc_init_array+0x40>)
 80155d6:	4c0c      	ldr	r4, [pc, #48]	; (8015608 <__libc_init_array+0x44>)
 80155d8:	f000 f884 	bl	80156e4 <_init>
 80155dc:	1b64      	subs	r4, r4, r5
 80155de:	10a4      	asrs	r4, r4, #2
 80155e0:	2600      	movs	r6, #0
 80155e2:	42a6      	cmp	r6, r4
 80155e4:	d105      	bne.n	80155f2 <__libc_init_array+0x2e>
 80155e6:	bd70      	pop	{r4, r5, r6, pc}
 80155e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80155ec:	4798      	blx	r3
 80155ee:	3601      	adds	r6, #1
 80155f0:	e7ee      	b.n	80155d0 <__libc_init_array+0xc>
 80155f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80155f6:	4798      	blx	r3
 80155f8:	3601      	adds	r6, #1
 80155fa:	e7f2      	b.n	80155e2 <__libc_init_array+0x1e>
 80155fc:	08017850 	.word	0x08017850
 8015600:	08017850 	.word	0x08017850
 8015604:	08017850 	.word	0x08017850
 8015608:	08017858 	.word	0x08017858

0801560c <memcpy>:
 801560c:	440a      	add	r2, r1
 801560e:	4291      	cmp	r1, r2
 8015610:	f100 33ff 	add.w	r3, r0, #4294967295
 8015614:	d100      	bne.n	8015618 <memcpy+0xc>
 8015616:	4770      	bx	lr
 8015618:	b510      	push	{r4, lr}
 801561a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801561e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015622:	4291      	cmp	r1, r2
 8015624:	d1f9      	bne.n	801561a <memcpy+0xe>
 8015626:	bd10      	pop	{r4, pc}

08015628 <memset>:
 8015628:	4402      	add	r2, r0
 801562a:	4603      	mov	r3, r0
 801562c:	4293      	cmp	r3, r2
 801562e:	d100      	bne.n	8015632 <memset+0xa>
 8015630:	4770      	bx	lr
 8015632:	f803 1b01 	strb.w	r1, [r3], #1
 8015636:	e7f9      	b.n	801562c <memset+0x4>

08015638 <_raise_r>:
 8015638:	291f      	cmp	r1, #31
 801563a:	b538      	push	{r3, r4, r5, lr}
 801563c:	4604      	mov	r4, r0
 801563e:	460d      	mov	r5, r1
 8015640:	d904      	bls.n	801564c <_raise_r+0x14>
 8015642:	2316      	movs	r3, #22
 8015644:	6003      	str	r3, [r0, #0]
 8015646:	f04f 30ff 	mov.w	r0, #4294967295
 801564a:	bd38      	pop	{r3, r4, r5, pc}
 801564c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801564e:	b112      	cbz	r2, 8015656 <_raise_r+0x1e>
 8015650:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015654:	b94b      	cbnz	r3, 801566a <_raise_r+0x32>
 8015656:	4620      	mov	r0, r4
 8015658:	f000 f830 	bl	80156bc <_getpid_r>
 801565c:	462a      	mov	r2, r5
 801565e:	4601      	mov	r1, r0
 8015660:	4620      	mov	r0, r4
 8015662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015666:	f000 b817 	b.w	8015698 <_kill_r>
 801566a:	2b01      	cmp	r3, #1
 801566c:	d00a      	beq.n	8015684 <_raise_r+0x4c>
 801566e:	1c59      	adds	r1, r3, #1
 8015670:	d103      	bne.n	801567a <_raise_r+0x42>
 8015672:	2316      	movs	r3, #22
 8015674:	6003      	str	r3, [r0, #0]
 8015676:	2001      	movs	r0, #1
 8015678:	e7e7      	b.n	801564a <_raise_r+0x12>
 801567a:	2400      	movs	r4, #0
 801567c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015680:	4628      	mov	r0, r5
 8015682:	4798      	blx	r3
 8015684:	2000      	movs	r0, #0
 8015686:	e7e0      	b.n	801564a <_raise_r+0x12>

08015688 <raise>:
 8015688:	4b02      	ldr	r3, [pc, #8]	; (8015694 <raise+0xc>)
 801568a:	4601      	mov	r1, r0
 801568c:	6818      	ldr	r0, [r3, #0]
 801568e:	f7ff bfd3 	b.w	8015638 <_raise_r>
 8015692:	bf00      	nop
 8015694:	20000124 	.word	0x20000124

08015698 <_kill_r>:
 8015698:	b538      	push	{r3, r4, r5, lr}
 801569a:	4d07      	ldr	r5, [pc, #28]	; (80156b8 <_kill_r+0x20>)
 801569c:	2300      	movs	r3, #0
 801569e:	4604      	mov	r4, r0
 80156a0:	4608      	mov	r0, r1
 80156a2:	4611      	mov	r1, r2
 80156a4:	602b      	str	r3, [r5, #0]
 80156a6:	f7ed f819 	bl	80026dc <_kill>
 80156aa:	1c43      	adds	r3, r0, #1
 80156ac:	d102      	bne.n	80156b4 <_kill_r+0x1c>
 80156ae:	682b      	ldr	r3, [r5, #0]
 80156b0:	b103      	cbz	r3, 80156b4 <_kill_r+0x1c>
 80156b2:	6023      	str	r3, [r4, #0]
 80156b4:	bd38      	pop	{r3, r4, r5, pc}
 80156b6:	bf00      	nop
 80156b8:	20006040 	.word	0x20006040

080156bc <_getpid_r>:
 80156bc:	f7ed b806 	b.w	80026cc <_getpid>

080156c0 <strncmp>:
 80156c0:	b510      	push	{r4, lr}
 80156c2:	b16a      	cbz	r2, 80156e0 <strncmp+0x20>
 80156c4:	3901      	subs	r1, #1
 80156c6:	1884      	adds	r4, r0, r2
 80156c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80156cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80156d0:	4293      	cmp	r3, r2
 80156d2:	d103      	bne.n	80156dc <strncmp+0x1c>
 80156d4:	42a0      	cmp	r0, r4
 80156d6:	d001      	beq.n	80156dc <strncmp+0x1c>
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d1f5      	bne.n	80156c8 <strncmp+0x8>
 80156dc:	1a98      	subs	r0, r3, r2
 80156de:	bd10      	pop	{r4, pc}
 80156e0:	4610      	mov	r0, r2
 80156e2:	e7fc      	b.n	80156de <strncmp+0x1e>

080156e4 <_init>:
 80156e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156e6:	bf00      	nop
 80156e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156ea:	bc08      	pop	{r3}
 80156ec:	469e      	mov	lr, r3
 80156ee:	4770      	bx	lr

080156f0 <_fini>:
 80156f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156f2:	bf00      	nop
 80156f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156f6:	bc08      	pop	{r3}
 80156f8:	469e      	mov	lr, r3
 80156fa:	4770      	bx	lr
