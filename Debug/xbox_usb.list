
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f590  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800f754  0800f754  0001f754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa6c  0800fa6c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa6c  0800fa6c  0001fa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa74  0800fa74  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fa74  0800fa74  0001fa74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa7c  0800fa7c  0001fa7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800fa80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  200001d4  0800fc54  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f4c  0800fc54  00020f4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c450  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b85  00000000  00000000  0006c654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  000731e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001758  00000000  00000000  00074a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c494  00000000  00000000  000761d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff78  00000000  00000000  000a2664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef33e  00000000  00000000  000c25dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b191a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b60  00000000  00000000  001b1970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001d4 	.word	0x200001d4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800f73c 	.word	0x0800f73c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001d8 	.word	0x200001d8
 8000200:	0800f73c 	.word	0x0800f73c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d101      	bne.n	8000520 <_ZN5Print5writeEPKc+0x14>
 800051c:	2300      	movs	r3, #0
 800051e:	e00d      	b.n	800053c <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3304      	adds	r3, #4
 8000526:	681c      	ldr	r4, [r3, #0]
 8000528:	6838      	ldr	r0, [r7, #0]
 800052a:	f7ff fe6b 	bl	8000204 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	6839      	ldr	r1, [r7, #0]
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	47a0      	blx	r4
 8000538:	4603      	mov	r3, r0
 800053a:	bf00      	nop
    }
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}

08000544 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	607a      	str	r2, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00e      	beq.n	8000586 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1c59      	adds	r1, r3, #1
 8000572:	60b9      	str	r1, [r7, #8]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	4790      	blx	r2
 800057c:	4602      	mov	r2, r0
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000584:	e7e6      	b.n	8000554 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000586:	697b      	ldr	r3, [r7, #20]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f805 	bl	80005ac <_ZN5Print5printEPKc>
 80005a2:	4603      	mov	r3, r0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  return write(str);
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffa7 	bl	800050c <_ZN5Print5writeEPKc>
 80005be:	4603      	mov	r3, r0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3304      	adds	r3, #4
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	1cf9      	adds	r1, r7, #3
 80005de:	2201      	movs	r2, #1
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	4798      	blx	r3
 80005e4:	4603      	mov	r3, r0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6918      	ldr	r0, [r3, #16]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	b29a      	uxth	r2, r3
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	6979      	ldr	r1, [r7, #20]
 800060c:	f005 f867 	bl	80056de <HAL_UART_Transmit>
	return size;
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6918      	ldr	r0, [r3, #16]
 8000626:	f107 010f 	add.w	r1, r7, #15
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	2201      	movs	r2, #1
 8000630:	f005 f8e7 	bl	8005802 <HAL_UART_Receive>
	return data;
 8000634:	7bfb      	ldrb	r3, [r7, #15]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
	return -1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	return -1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <_ZN5PrintC1Ev+0x24>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	0800f844 	.word	0x0800f844

080006ac <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffe4 	bl	8000684 <_ZN5PrintC1Ev>
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <_ZN6StreamC1Ev+0x28>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	0800f8bc 	.word	0x0800f8bc

080006d8 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffe1 	bl	80006ac <_ZN6StreamC1Ev>
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	611a      	str	r2, [r3, #16]
	};
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	0800f854 	.word	0x0800f854

08000704 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	4903      	ldr	r1, [pc, #12]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <_ZN2P910SetDirReadEv+0x28>)
 800071e:	f001 fdd9 	bl	80022d4 <HAL_GPIO_Init>
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001f0 	.word	0x200001f0
 800072c:	40020800 	.word	0x40020800

08000730 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
 8000734:	2201      	movs	r2, #1
 8000736:	2140      	movs	r1, #64	; 0x40
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <_ZN3P103SetEv+0x14>)
 800073a:	f001 ff77 	bl	800262c <HAL_GPIO_WritePin>
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40020400 	.word	0x40020400

08000748 <_ZN3P105ClearEv>:
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
 800074c:	2200      	movs	r2, #0
 800074e:	2140      	movs	r1, #64	; 0x40
 8000750:	4802      	ldr	r0, [pc, #8]	; (800075c <_ZN3P105ClearEv+0x14>)
 8000752:	f001 ff6b 	bl	800262c <HAL_GPIO_WritePin>
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40020400 	.word	0x40020400

08000760 <_ZN3P1011SetDirWriteEv>:
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 8000766:	2240      	movs	r2, #64	; 0x40
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 800076c:	2201      	movs	r2, #1
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 8000778:	2203      	movs	r2, #3
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	4902      	ldr	r1, [pc, #8]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <_ZN3P1011SetDirWriteEv+0x2c>)
 8000780:	f001 fda8 	bl	80022d4 <HAL_GPIO_Init>
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000204 	.word	0x20000204
 800078c:	40020400 	.word	0x40020400

08000790 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2201      	movs	r2, #1
 80007a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2206      	movs	r2, #6
 80007aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
                if(pBtd)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffde 	bl	8000790 <_ZN3BTD11pairWithHIDEv>
        };
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	4798      	blx	r3
                OnInitBTHID();
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	331c      	adds	r3, #28
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	4798      	blx	r3
        };
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8000806:	b480      	push	{r7}
 8000808:	b085      	sub	sp, #20
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	460b      	mov	r3, r1
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	72fb      	strb	r3, [r7, #11]
                return;
 8000814:	bf00      	nop
        }
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <_ZN9PS4ParserC1Ev+0x20>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	601a      	str	r2, [r3, #0]
                Reset();
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f00d f92e 	bl	800da90 <_ZN9PS4Parser5ResetEv>
        };
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	0800f8b0 	.word	0x0800f8b0

08000844 <_ZN9PS4Parser10isTouchingEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns true if the specific finger is touching the touchpad.
         */
        bool isTouching(uint8_t finger = 0, uint8_t xyId = 0) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
 8000850:	4613      	mov	r3, r2
 8000852:	70bb      	strb	r3, [r7, #2]
                return !(ps4Data.xy[xyId].finger[finger].touching); // The bit is cleared when a finger is touching the touchpad
 8000854:	78ba      	ldrb	r2, [r7, #2]
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	6879      	ldr	r1, [r7, #4]
 800085a:	0098      	lsls	r0, r3, #2
 800085c:	4613      	mov	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	4413      	add	r3, r2
 8000862:	4403      	add	r3, r0
 8000864:	440b      	add	r3, r1
 8000866:	3320      	adds	r3, #32
 8000868:	799b      	ldrb	r3, [r3, #6]
 800086a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f083 0301 	eor.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
        };
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	2b20      	cmp	r3, #32
 8000892:	d105      	bne.n	80008a0 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 8000894:	22ff      	movs	r2, #255	; 0xff
 8000896:	2100      	movs	r1, #0
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 f80a 	bl	80008b2 <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 800089e:	e004      	b.n	80008aa <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 80008a0:	2200      	movs	r2, #0
 80008a2:	21ff      	movs	r1, #255	; 0xff
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f804 	bl	80008b2 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	460b      	mov	r3, r1
 80008bc:	70fb      	strb	r3, [r7, #3]
 80008be:	4613      	mov	r3, r2
 80008c0:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	78fa      	ldrb	r2, [r7, #3]
 80008c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	78ba      	ldrb	r2, [r7, #2]
 80008ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2201      	movs	r2, #1
 80008d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	4608      	mov	r0, r1
 80008f0:	4611      	mov	r1, r2
 80008f2:	461a      	mov	r2, r3
 80008f4:	4603      	mov	r3, r0
 80008f6:	70fb      	strb	r3, [r7, #3]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70bb      	strb	r3, [r7, #2]
 80008fc:	4613      	mov	r3, r2
 80008fe:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	78fa      	ldrb	r2, [r7, #3]
 8000904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	78ba      	ldrb	r2, [r7, #2]
 800090c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	787a      	ldrb	r2, [r7, #1]
 8000914:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2201      	movs	r2, #1
 800091c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	141b      	asrs	r3, r3, #16
 800093a:	b2d9      	uxtb	r1, r3
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	121b      	asrs	r3, r3, #8
 8000940:	b2da      	uxtb	r2, r3
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffcd 	bl	80008e6 <_ZN9PS4Parser6setLedEhhh>
        };
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <_ZN9PS4Parser11setLedFlashEhh>:
        /**
         * Set the LEDs flash time.
         * @param flashOn  Time to flash bright (255 = 2.5 seconds).
         * @param flashOff Time to flash dark (255 = 2.5 seconds).
         */
        void setLedFlash(uint8_t flashOn, uint8_t flashOff) {
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	70fb      	strb	r3, [r7, #3]
 8000960:	4613      	mov	r3, r2
 8000962:	70bb      	strb	r3, [r7, #2]
                ps4Output.flashOn = flashOn;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	78fa      	ldrb	r2, [r7, #3]
 8000968:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                ps4Output.flashOff = flashOff;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	78ba      	ldrb	r2, [r7, #2]
 8000970:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                ps4Output.reportChanged = true;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2201      	movs	r2, #1
 8000978:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4613      	mov	r3, r2
 8000996:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68b9      	ldr	r1, [r7, #8]
 80009a0:	f00b fe82 	bl	800c6a8 <_ZN5BTHIDC1EP3BTDbPKc>
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3378      	adds	r3, #120	; 0x78
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff39 	bl	8000820 <_ZN9PS4ParserC1Ev>
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	3378      	adds	r3, #120	; 0x78
 80009be:	4618      	mov	r0, r3
 80009c0:	f00d f866 	bl	800da90 <_ZN9PS4Parser5ResetEv>
        };
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	0800f874 	.word	0x0800f874
 80009d4:	0800f8a4 	.word	0x0800f8a4

080009d8 <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7d5b      	ldrb	r3, [r3, #21]
        };
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	460b      	mov	r3, r1
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3378      	adds	r3, #120	; 0x78
 8000a02:	7af9      	ldrb	r1, [r7, #11]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f00c ff7d 	bl	800d906 <_ZN9PS4Parser5ParseEhPh>
        };
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3378      	adds	r3, #120	; 0x78
 8000a20:	4618      	mov	r0, r3
 8000a22:	f00d f835 	bl	800da90 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 f855 	bl	8000ad6 <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d105      	bne.n	8000a40 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3378      	adds	r3, #120	; 0x78
 8000a38:	21ff      	movs	r1, #255	; 0xff
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff76 	bl	800092c <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3378      	adds	r3, #120	; 0x78
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00d f81b 	bl	800da90 <_ZN9PS4Parser5ResetEv>
        };
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b096      	sub	sp, #88	; 0x58
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	224f      	movs	r2, #79	; 0x4f
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00e fe03 	bl	800f680 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000a7a:	2352      	movs	r3, #82	; 0x52
 8000a7c:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000a7e:	2311      	movs	r3, #17
 8000a80:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000a86:	23ff      	movs	r3, #255	; 0xff
 8000a88:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	789b      	ldrb	r3, [r3, #2]
 8000a9a:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	78db      	ldrb	r3, [r3, #3]
 8000aa0:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	791b      	ldrb	r3, [r3, #4]
 8000aa6:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	795b      	ldrb	r3, [r3, #5]
 8000aac:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	799b      	ldrb	r3, [r3, #6]
 8000ab2:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	224f      	movs	r2, #79	; 0x4f
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 f81a 	bl	8000afc <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000ac8:	bf00      	nop
 8000aca:	3758      	adds	r7, #88	; 0x58
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000ad0:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000ad4:	e7c5      	b.n	8000a62 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000ad6 <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000ade:	2343      	movs	r3, #67	; 0x43
 8000ae0:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	2202      	movs	r2, #2
 8000aec:	4619      	mov	r1, r3
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f804 	bl	8000afc <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	4613      	mov	r3, r2
 8000b08:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6898      	ldr	r0, [r3, #8]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	8999      	ldrh	r1, [r3, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	7d9b      	ldrb	r3, [r3, #22]
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	7dd2      	ldrb	r2, [r2, #23]
 8000b1a:	79fc      	ldrb	r4, [r7, #7]
 8000b1c:	9201      	str	r2, [sp, #4]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	4623      	mov	r3, r4
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f00a fe58 	bl	800b7d8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd90      	pop	{r4, r7, pc}

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f000 ff97 	bl	8001a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3a:	f000 fab9 	bl	80010b0 <SystemClock_Config>
//  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3e:	f000 fc31 	bl	80013a4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000b42:	f000 fc01 	bl	8001348 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000b46:	f000 fbc3 	bl	80012d0 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000b4a:	f007 ff7b 	bl	8008a44 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000b4e:	f000 fb63 	bl	8001218 <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000b52:	4ac7      	ldr	r2, [pc, #796]	; (8000e70 <main+0x340>)
 8000b54:	4bc7      	ldr	r3, [pc, #796]	; (8000e74 <main+0x344>)
 8000b56:	4610      	mov	r0, r2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	2358      	movs	r3, #88	; 0x58
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	f00e fd81 	bl	800f664 <memcpy>
  UART_Handle = huart2;
 8000b62:	4ac5      	ldr	r2, [pc, #788]	; (8000e78 <main+0x348>)
 8000b64:	4bc5      	ldr	r3, [pc, #788]	; (8000e7c <main+0x34c>)
 8000b66:	4610      	mov	r0, r2
 8000b68:	4619      	mov	r1, r3
 8000b6a:	2344      	movs	r3, #68	; 0x44
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f00e fd79 	bl	800f664 <memcpy>

  struct gameHID_t gameHID;
  gameHID.JoyX = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	713b      	strb	r3, [r7, #4]
  gameHID.JoyY = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	717b      	strb	r3, [r7, #5]
  gameHID.Joy2X = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	71bb      	strb	r3, [r7, #6]
  gameHID.Joy2Y = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	71fb      	strb	r3, [r7, #7]
  gameHID.Joy_LT = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	723b      	strb	r3, [r7, #8]
  gameHID.Joy_RT = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	727b      	strb	r3, [r7, #9]
  //gameHID.Buttons = 0; 	// Button, one byte, button is bit #0

  //int8_t counter1 = 0; // counter for making the fake values wrapping around


  if (Usb.Init() == -1) {
 8000b8a:	48bd      	ldr	r0, [pc, #756]	; (8000e80 <main+0x350>)
 8000b8c:	f000 fc69 	bl	8001462 <_ZN8MAX3421eI3P102P9E4InitEv>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b96:	bf0c      	ite	eq
 8000b98:	2301      	moveq	r3, #1
 8000b9a:	2300      	movne	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <main+0x7c>
  		Serial.print(F("\r\nOSC did not start"));
 8000ba2:	49b8      	ldr	r1, [pc, #736]	; (8000e84 <main+0x354>)
 8000ba4:	48b8      	ldr	r0, [pc, #736]	; (8000e88 <main+0x358>)
 8000ba6:	f7ff fcf3 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8000baa:	e7fe      	b.n	8000baa <main+0x7a>
  	}
  	Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 8000bac:	49b7      	ldr	r1, [pc, #732]	; (8000e8c <main+0x35c>)
 8000bae:	48b6      	ldr	r0, [pc, #728]	; (8000e88 <main+0x358>)
 8000bb0:	f7ff fcee 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Usb.Task();
 8000bb4:	48b2      	ldr	r0, [pc, #712]	; (8000e80 <main+0x350>)
 8000bb6:	f00d fcc7 	bl	800e548 <_ZN3USB4TaskEv>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	48b3      	ldr	r0, [pc, #716]	; (8000e90 <main+0x360>)
 8000bc2:	f006 fd4f 	bl	8007664 <USBD_HID_SendReport>
		//gameHID.JoyY = counter1*4;
		//gameHID.JoyB1 = ~gameHID.JoyB1; //
		//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
		//HAL_Delay(100);

		if (PS4.connected()) {
 8000bc6:	48b3      	ldr	r0, [pc, #716]	; (8000e94 <main+0x364>)
 8000bc8:	f7ff ff06 	bl	80009d8 <_ZN5PS4BT9connectedEv>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 823f 	beq.w	8001052 <main+0x522>
			if (PS4.getAnalogHat(LeftHatX) > 137 || PS4.getAnalogHat(LeftHatX) < 117 || PS4.getAnalogHat(LeftHatY) > 137 || PS4.getAnalogHat(LeftHatY) < 117 || PS4.getAnalogHat(RightHatX) > 137 || PS4.getAnalogHat(RightHatX) < 117 || PS4.getAnalogHat(RightHatY) > 137 || PS4.getAnalogHat(RightHatY) < 117) {
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	48b0      	ldr	r0, [pc, #704]	; (8000e98 <main+0x368>)
 8000bd8:	f00c fe85 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b89      	cmp	r3, #137	; 0x89
 8000be0:	d830      	bhi.n	8000c44 <main+0x114>
 8000be2:	2100      	movs	r1, #0
 8000be4:	48ac      	ldr	r0, [pc, #688]	; (8000e98 <main+0x368>)
 8000be6:	f00c fe7e 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b74      	cmp	r3, #116	; 0x74
 8000bee:	d929      	bls.n	8000c44 <main+0x114>
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	48a9      	ldr	r0, [pc, #676]	; (8000e98 <main+0x368>)
 8000bf4:	f00c fe77 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b89      	cmp	r3, #137	; 0x89
 8000bfc:	d822      	bhi.n	8000c44 <main+0x114>
 8000bfe:	2101      	movs	r1, #1
 8000c00:	48a5      	ldr	r0, [pc, #660]	; (8000e98 <main+0x368>)
 8000c02:	f00c fe70 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b74      	cmp	r3, #116	; 0x74
 8000c0a:	d91b      	bls.n	8000c44 <main+0x114>
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	48a2      	ldr	r0, [pc, #648]	; (8000e98 <main+0x368>)
 8000c10:	f00c fe69 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b89      	cmp	r3, #137	; 0x89
 8000c18:	d814      	bhi.n	8000c44 <main+0x114>
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	489e      	ldr	r0, [pc, #632]	; (8000e98 <main+0x368>)
 8000c1e:	f00c fe62 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b74      	cmp	r3, #116	; 0x74
 8000c26:	d90d      	bls.n	8000c44 <main+0x114>
 8000c28:	2103      	movs	r1, #3
 8000c2a:	489b      	ldr	r0, [pc, #620]	; (8000e98 <main+0x368>)
 8000c2c:	f00c fe5b 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b89      	cmp	r3, #137	; 0x89
 8000c34:	d806      	bhi.n	8000c44 <main+0x114>
 8000c36:	2103      	movs	r1, #3
 8000c38:	4897      	ldr	r0, [pc, #604]	; (8000e98 <main+0x368>)
 8000c3a:	f00c fe54 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b74      	cmp	r3, #116	; 0x74
 8000c42:	d801      	bhi.n	8000c48 <main+0x118>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <main+0x11a>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d024      	beq.n	8000c98 <main+0x168>

				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4891      	ldr	r0, [pc, #580]	; (8000e98 <main+0x368>)
 8000c52:	f00c fe48 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c56:	4603      	mov	r3, r0
 8000c58:	3b80      	subs	r3, #128	; 0x80
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	713b      	strb	r3, [r7, #4]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8000c60:	2101      	movs	r1, #1
 8000c62:	488d      	ldr	r0, [pc, #564]	; (8000e98 <main+0x368>)
 8000c64:	f00c fe3f 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	3b80      	subs	r3, #128	; 0x80
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	717b      	strb	r3, [r7, #5]
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8000c72:	2102      	movs	r1, #2
 8000c74:	4888      	ldr	r0, [pc, #544]	; (8000e98 <main+0x368>)
 8000c76:	f00c fe36 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	3b80      	subs	r3, #128	; 0x80
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	71bb      	strb	r3, [r7, #6]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8000c84:	2103      	movs	r1, #3
 8000c86:	4884      	ldr	r0, [pc, #528]	; (8000e98 <main+0x368>)
 8000c88:	f00c fe2d 	bl	800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	3b80      	subs	r3, #128	; 0x80
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	e007      	b.n	8000ca8 <main+0x178>
				//Serial.print(F("\tRightHatX: "));
				//Serial.print(PS4.getAnalogHat(RightHatX));
				//Serial.print(F("\tRightHatY: "));
				//Serial.print(PS4.getAnalogHat(RightHatY));
			} else {
				gameHID.JoyX = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	713b      	strb	r3, [r7, #4]
				gameHID.JoyY = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	717b      	strb	r3, [r7, #5]
				gameHID.JoyX = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	713b      	strb	r3, [r7, #4]
				gameHID.JoyY = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	717b      	strb	r3, [r7, #5]
			}

			if (PS4.getAnalogButton(L2) || PS4.getAnalogButton(R2)) { // These are the only analog buttons on the PS4 controller
 8000ca8:	2108      	movs	r1, #8
 8000caa:	487b      	ldr	r0, [pc, #492]	; (8000e98 <main+0x368>)
 8000cac:	f00c fe02 	bl	800d8b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d106      	bne.n	8000cc4 <main+0x194>
 8000cb6:	2109      	movs	r1, #9
 8000cb8:	4877      	ldr	r0, [pc, #476]	; (8000e98 <main+0x368>)
 8000cba:	f00c fdfb 	bl	800d8b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <main+0x198>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e000      	b.n	8000cca <main+0x19a>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d011      	beq.n	8000cf2 <main+0x1c2>
				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 8000cce:	2108      	movs	r1, #8
 8000cd0:	4871      	ldr	r0, [pc, #452]	; (8000e98 <main+0x368>)
 8000cd2:	f00c fdef 	bl	800d8b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	3b80      	subs	r3, #128	; 0x80
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	723b      	strb	r3, [r7, #8]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 8000ce0:	2109      	movs	r1, #9
 8000ce2:	486d      	ldr	r0, [pc, #436]	; (8000e98 <main+0x368>)
 8000ce4:	f00c fde6 	bl	800d8b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	3b80      	subs	r3, #128	; 0x80
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	727b      	strb	r3, [r7, #9]
				//Serial.print(F("\r\nL2: "));
				//Serial.print(PS4.getAnalogButton(L2));
				//Serial.print(F("\tR2: "));
				//Serial.print(PS4.getAnalogButton(R2));
			}
			if (PS4.getAnalogButton(L2) != oldL2Value || PS4.getAnalogButton(R2) != oldR2Value) // Only write value if it's different
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4868      	ldr	r0, [pc, #416]	; (8000e98 <main+0x368>)
 8000cf6:	f00c fddd 	bl	800d8b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b67      	ldr	r3, [pc, #412]	; (8000e9c <main+0x36c>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d109      	bne.n	8000d1a <main+0x1ea>
 8000d06:	2109      	movs	r1, #9
 8000d08:	4863      	ldr	r0, [pc, #396]	; (8000e98 <main+0x368>)
 8000d0a:	f00c fdd3 	bl	800d8b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b63      	ldr	r3, [pc, #396]	; (8000ea0 <main+0x370>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d001      	beq.n	8000d1e <main+0x1ee>
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e000      	b.n	8000d20 <main+0x1f0>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00f      	beq.n	8000d44 <main+0x214>
				PS4.setRumbleOn(PS4.getAnalogButton(L2), PS4.getAnalogButton(R2));
 8000d24:	2108      	movs	r1, #8
 8000d26:	485c      	ldr	r0, [pc, #368]	; (8000e98 <main+0x368>)
 8000d28:	f00c fdc4 	bl	800d8b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461c      	mov	r4, r3
 8000d30:	2109      	movs	r1, #9
 8000d32:	4859      	ldr	r0, [pc, #356]	; (8000e98 <main+0x368>)
 8000d34:	f00c fdbe 	bl	800d8b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4621      	mov	r1, r4
 8000d3e:	4856      	ldr	r0, [pc, #344]	; (8000e98 <main+0x368>)
 8000d40:	f7ff fdb7 	bl	80008b2 <_ZN9PS4Parser11setRumbleOnEhh>
			oldL2Value = PS4.getAnalogButton(L2);
 8000d44:	2108      	movs	r1, #8
 8000d46:	4854      	ldr	r0, [pc, #336]	; (8000e98 <main+0x368>)
 8000d48:	f00c fdb4 	bl	800d8b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b52      	ldr	r3, [pc, #328]	; (8000e9c <main+0x36c>)
 8000d52:	701a      	strb	r2, [r3, #0]
			oldR2Value = PS4.getAnalogButton(R2);
 8000d54:	2109      	movs	r1, #9
 8000d56:	4850      	ldr	r0, [pc, #320]	; (8000e98 <main+0x368>)
 8000d58:	f00c fdac 	bl	800d8b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b4f      	ldr	r3, [pc, #316]	; (8000ea0 <main+0x370>)
 8000d62:	701a      	strb	r2, [r3, #0]

			if (PS4.getButtonClick(PS)) {
 8000d64:	2110      	movs	r1, #16
 8000d66:	484c      	ldr	r0, [pc, #304]	; (8000e98 <main+0x368>)
 8000d68:	f00c fd64 	bl	800d834 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <main+0x252>
				gameHID.ps4ButtonsTag.button_ps = 1;
 8000d72:	7abb      	ldrb	r3, [r7, #10]
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	72bb      	strb	r3, [r7, #10]
				//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
				//Serial.print(F("\r\nPS"));
				PS4.disconnect();
 8000d7a:	4846      	ldr	r0, [pc, #280]	; (8000e94 <main+0x364>)
 8000d7c:	f00b fd05 	bl	800c78a <_ZN5BTHID10disconnectEv>
 8000d80:	e160      	b.n	8001044 <main+0x514>
			} else {
				if (PS4.getButtonPress(TRIANGLE)) {
 8000d82:	210c      	movs	r1, #12
 8000d84:	4844      	ldr	r0, [pc, #272]	; (8000e98 <main+0x368>)
 8000d86:	f00c fd2d 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d008      	beq.n	8000da2 <main+0x272>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 8000d90:	7afb      	ldrb	r3, [r7, #11]
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	72fb      	strb	r3, [r7, #11]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nTraingle"));
					PS4.setRumbleOn(RumbleLow);
 8000d98:	2120      	movs	r1, #32
 8000d9a:	483f      	ldr	r0, [pc, #252]	; (8000e98 <main+0x368>)
 8000d9c:	f7ff fd71 	bl	8000882 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
 8000da0:	e003      	b.n	8000daa <main+0x27a>
				} else {
					gameHID.ps4ButtonsTag.button_triangle = 0;
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	f36f 0300 	bfc	r3, #0, #1
 8000da8:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(CIRCLE)) {
 8000daa:	210d      	movs	r1, #13
 8000dac:	483a      	ldr	r0, [pc, #232]	; (8000e98 <main+0x368>)
 8000dae:	f00c fd19 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d008      	beq.n	8000dca <main+0x29a>
					gameHID.ps4ButtonsTag.button_circle = 1;
 8000db8:	7abb      	ldrb	r3, [r7, #10]
 8000dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dbe:	72bb      	strb	r3, [r7, #10]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCircle"));
					PS4.setRumbleOn(RumbleHigh);
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	4835      	ldr	r0, [pc, #212]	; (8000e98 <main+0x368>)
 8000dc4:	f7ff fd5d 	bl	8000882 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
 8000dc8:	e003      	b.n	8000dd2 <main+0x2a2>
				} else {
					gameHID.ps4ButtonsTag.button_circle = 0;
 8000dca:	7abb      	ldrb	r3, [r7, #10]
 8000dcc:	f36f 13c7 	bfc	r3, #7, #1
 8000dd0:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(CROSS)) {
 8000dd2:	210e      	movs	r1, #14
 8000dd4:	4830      	ldr	r0, [pc, #192]	; (8000e98 <main+0x368>)
 8000dd6:	f00c fd05 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d009      	beq.n	8000df4 <main+0x2c4>
					gameHID.ps4ButtonsTag.button_cross = 1;
 8000de0:	7abb      	ldrb	r3, [r7, #10]
 8000de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de6:	72bb      	strb	r3, [r7, #10]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCross"));
					PS4.setLedFlash(10, 10); // Set it to blink rapidly
 8000de8:	220a      	movs	r2, #10
 8000dea:	210a      	movs	r1, #10
 8000dec:	482a      	ldr	r0, [pc, #168]	; (8000e98 <main+0x368>)
 8000dee:	f7ff fdb1 	bl	8000954 <_ZN9PS4Parser11setLedFlashEhh>
 8000df2:	e003      	b.n	8000dfc <main+0x2cc>
				} else {
					gameHID.ps4ButtonsTag.button_cross = 0;;
 8000df4:	7abb      	ldrb	r3, [r7, #10]
 8000df6:	f36f 1386 	bfc	r3, #6, #1
 8000dfa:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(SQUARE)) {
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	4826      	ldr	r0, [pc, #152]	; (8000e98 <main+0x368>)
 8000e00:	f00c fcf0 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d009      	beq.n	8000e1e <main+0x2ee>
					gameHID.ps4ButtonsTag.button_square = 1;
 8000e0a:	7afb      	ldrb	r3, [r7, #11]
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	72fb      	strb	r3, [r7, #11]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nSquare"));
					PS4.setLedFlash(0, 0); // Turn off blinking
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	4820      	ldr	r0, [pc, #128]	; (8000e98 <main+0x368>)
 8000e18:	f7ff fd9c 	bl	8000954 <_ZN9PS4Parser11setLedFlashEhh>
 8000e1c:	e003      	b.n	8000e26 <main+0x2f6>
				} else {
					gameHID.ps4ButtonsTag.button_square = 0;
 8000e1e:	7afb      	ldrb	r3, [r7, #11]
 8000e20:	f36f 0341 	bfc	r3, #1, #1
 8000e24:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(UP)) {
 8000e26:	2100      	movs	r1, #0
 8000e28:	481b      	ldr	r0, [pc, #108]	; (8000e98 <main+0x368>)
 8000e2a:	f00c fcdb 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d009      	beq.n	8000e48 <main+0x318>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8000e34:	7afb      	ldrb	r3, [r7, #11]
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	72fb      	strb	r3, [r7, #11]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nUp"));
					PS4.setLed(Red);
 8000e3c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8000e40:	4815      	ldr	r0, [pc, #84]	; (8000e98 <main+0x368>)
 8000e42:	f7ff fd73 	bl	800092c <_ZN9PS4Parser6setLedE10ColorsEnum>
 8000e46:	e003      	b.n	8000e50 <main+0x320>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8000e48:	7afb      	ldrb	r3, [r7, #11]
 8000e4a:	f36f 0382 	bfc	r3, #2, #1
 8000e4e:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(RIGHT)) {
 8000e50:	2101      	movs	r1, #1
 8000e52:	4811      	ldr	r0, [pc, #68]	; (8000e98 <main+0x368>)
 8000e54:	f00c fcc6 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d022      	beq.n	8000ea4 <main+0x374>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8000e5e:	7afb      	ldrb	r3, [r7, #11]
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	72fb      	strb	r3, [r7, #11]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nRight"));
					PS4.setLed(Blue);
 8000e66:	21ff      	movs	r1, #255	; 0xff
 8000e68:	480b      	ldr	r0, [pc, #44]	; (8000e98 <main+0x368>)
 8000e6a:	f7ff fd5f 	bl	800092c <_ZN9PS4Parser6setLedE10ColorsEnum>
 8000e6e:	e01d      	b.n	8000eac <main+0x37c>
 8000e70:	200002fc 	.word	0x200002fc
 8000e74:	20000260 	.word	0x20000260
 8000e78:	20000354 	.word	0x20000354
 8000e7c:	200002b8 	.word	0x200002b8
 8000e80:	200003ac 	.word	0x200003ac
 8000e84:	0800f754 	.word	0x0800f754
 8000e88:	20000398 	.word	0x20000398
 8000e8c:	0800f768 	.word	0x0800f768
 8000e90:	20000670 	.word	0x20000670
 8000e94:	20000580 	.word	0x20000580
 8000e98:	200005f8 	.word	0x200005f8
 8000e9c:	2000064a 	.word	0x2000064a
 8000ea0:	2000064b 	.word	0x2000064b
				} else {
					gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8000ea4:	7afb      	ldrb	r3, [r7, #11]
 8000ea6:	f36f 03c3 	bfc	r3, #3, #1
 8000eaa:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(DOWN)) {
 8000eac:	2102      	movs	r1, #2
 8000eae:	4878      	ldr	r0, [pc, #480]	; (8001090 <main+0x560>)
 8000eb0:	f00c fc98 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d008      	beq.n	8000ecc <main+0x39c>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8000eba:	7afb      	ldrb	r3, [r7, #11]
 8000ebc:	f043 0320 	orr.w	r3, r3, #32
 8000ec0:	72fb      	strb	r3, [r7, #11]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nDown"));
					PS4.setLed(Yellow);
 8000ec2:	4974      	ldr	r1, [pc, #464]	; (8001094 <main+0x564>)
 8000ec4:	4872      	ldr	r0, [pc, #456]	; (8001090 <main+0x560>)
 8000ec6:	f7ff fd31 	bl	800092c <_ZN9PS4Parser6setLedE10ColorsEnum>
 8000eca:	e003      	b.n	8000ed4 <main+0x3a4>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8000ecc:	7afb      	ldrb	r3, [r7, #11]
 8000ece:	f36f 1345 	bfc	r3, #5, #1
 8000ed2:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(LEFT)) {
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	486e      	ldr	r0, [pc, #440]	; (8001090 <main+0x560>)
 8000ed8:	f00c fc84 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d009      	beq.n	8000ef6 <main+0x3c6>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8000ee2:	7afb      	ldrb	r3, [r7, #11]
 8000ee4:	f043 0310 	orr.w	r3, r3, #16
 8000ee8:	72fb      	strb	r3, [r7, #11]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nLeft"));
					PS4.setLed(Green);
 8000eea:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000eee:	4868      	ldr	r0, [pc, #416]	; (8001090 <main+0x560>)
 8000ef0:	f7ff fd1c 	bl	800092c <_ZN9PS4Parser6setLedE10ColorsEnum>
 8000ef4:	e003      	b.n	8000efe <main+0x3ce>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8000ef6:	7afb      	ldrb	r3, [r7, #11]
 8000ef8:	f36f 1304 	bfc	r3, #4, #1
 8000efc:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(L1)) {
 8000efe:	210a      	movs	r1, #10
 8000f00:	4863      	ldr	r0, [pc, #396]	; (8001090 <main+0x560>)
 8000f02:	f00c fc6f 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d004      	beq.n	8000f16 <main+0x3e6>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8000f0c:	7abb      	ldrb	r3, [r7, #10]
 8000f0e:	f043 0320 	orr.w	r3, r3, #32
 8000f12:	72bb      	strb	r3, [r7, #10]
 8000f14:	e003      	b.n	8000f1e <main+0x3ee>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL1"));
				} else {
					gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8000f16:	7abb      	ldrb	r3, [r7, #10]
 8000f18:	f36f 1345 	bfc	r3, #5, #1
 8000f1c:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(L3)) {
 8000f1e:	2106      	movs	r1, #6
 8000f20:	485b      	ldr	r0, [pc, #364]	; (8001090 <main+0x560>)
 8000f22:	f00c fc5f 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <main+0x406>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8000f2c:	7afb      	ldrb	r3, [r7, #11]
 8000f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f32:	72fb      	strb	r3, [r7, #11]
 8000f34:	e003      	b.n	8000f3e <main+0x40e>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL3"));
				} else {
					gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8000f36:	7afb      	ldrb	r3, [r7, #11]
 8000f38:	f36f 1386 	bfc	r3, #6, #1
 8000f3c:	72fb      	strb	r3, [r7, #11]
				}
				if (PS4.getButtonPress(R1)) {
 8000f3e:	210b      	movs	r1, #11
 8000f40:	4853      	ldr	r0, [pc, #332]	; (8001090 <main+0x560>)
 8000f42:	f00c fc4f 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <main+0x426>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8000f4c:	7abb      	ldrb	r3, [r7, #10]
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	72bb      	strb	r3, [r7, #10]
 8000f54:	e003      	b.n	8000f5e <main+0x42e>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR1"));
				} else {
					gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8000f56:	7abb      	ldrb	r3, [r7, #10]
 8000f58:	f36f 1304 	bfc	r3, #4, #1
 8000f5c:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonPress(R3)) {
 8000f5e:	2107      	movs	r1, #7
 8000f60:	484b      	ldr	r0, [pc, #300]	; (8001090 <main+0x560>)
 8000f62:	f00c fc3f 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d004      	beq.n	8000f76 <main+0x446>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 8000f6c:	7afb      	ldrb	r3, [r7, #11]
 8000f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f72:	72fb      	strb	r3, [r7, #11]
 8000f74:	e003      	b.n	8000f7e <main+0x44e>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR3"));
				} else {
					gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8000f76:	7afb      	ldrb	r3, [r7, #11]
 8000f78:	f36f 13c7 	bfc	r3, #7, #1
 8000f7c:	72fb      	strb	r3, [r7, #11]
				}

				if (PS4.getButtonPress(SHARE)) {
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4843      	ldr	r0, [pc, #268]	; (8001090 <main+0x560>)
 8000f82:	f00c fc2f 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d004      	beq.n	8000f96 <main+0x466>
					gameHID.ps4ButtonsTag.button_share = 1;
 8000f8c:	7abb      	ldrb	r3, [r7, #10]
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	72bb      	strb	r3, [r7, #10]
 8000f94:	e003      	b.n	8000f9e <main+0x46e>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nShare"));
				} else {
					gameHID.ps4ButtonsTag.button_share = 0;
 8000f96:	7abb      	ldrb	r3, [r7, #10]
 8000f98:	f36f 03c3 	bfc	r3, #3, #1
 8000f9c:	72bb      	strb	r3, [r7, #10]
				}

				if (PS4.getButtonPress(OPTIONS)) {
 8000f9e:	2105      	movs	r1, #5
 8000fa0:	483b      	ldr	r0, [pc, #236]	; (8001090 <main+0x560>)
 8000fa2:	f00c fc1f 	bl	800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d011      	beq.n	8000fd0 <main+0x4a0>
					gameHID.ps4ButtonsTag.button_start = 1;
 8000fac:	7abb      	ldrb	r3, [r7, #10]
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	72bb      	strb	r3, [r7, #10]
					USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4837      	ldr	r0, [pc, #220]	; (8001098 <main+0x568>)
 8000fbc:	f006 fb52 	bl	8007664 <USBD_HID_SendReport>
					//Serial.print(F("\r\nOptions"));
					printAngle = !printAngle;
 8000fc0:	4b36      	ldr	r3, [pc, #216]	; (800109c <main+0x56c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	f083 0301 	eor.w	r3, r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b34      	ldr	r3, [pc, #208]	; (800109c <main+0x56c>)
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e003      	b.n	8000fd8 <main+0x4a8>
				} else {
					gameHID.ps4ButtonsTag.button_start = 0;
 8000fd0:	7abb      	ldrb	r3, [r7, #10]
 8000fd2:	f36f 0382 	bfc	r3, #2, #1
 8000fd6:	72bb      	strb	r3, [r7, #10]
				}
				if (PS4.getButtonClick(TOUCHPAD)) {
 8000fd8:	2111      	movs	r1, #17
 8000fda:	482d      	ldr	r0, [pc, #180]	; (8001090 <main+0x560>)
 8000fdc:	f00c fc2a 	bl	800d834 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <main+0x4c4>
					//Serial.print(F("\r\nTouchpad"));
					printTouch = !printTouch;
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <main+0x570>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <main+0x570>)
 8000ff2:	701a      	strb	r2, [r3, #0]
					//Serial.print(PS4.getAngle(Pitch));
					//Serial.print("\tRoll: ");
					//Serial.print(PS4.getAngle(Roll));
				}

				if (printTouch) { // Print the x, y coordinates of the touchpad
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <main+0x570>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d023      	beq.n	8001044 <main+0x514>
					if (PS4.isTouching(0) || PS4.isTouching(1)) // Print newline and carriage return if any of the fingers are touching the touchpad
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	4823      	ldr	r0, [pc, #140]	; (8001090 <main+0x560>)
 8001002:	f7ff fc1f 	bl	8000844 <_ZN9PS4Parser10isTouchingEhh>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d107      	bne.n	800101c <main+0x4ec>
 800100c:	2200      	movs	r2, #0
 800100e:	2101      	movs	r1, #1
 8001010:	481f      	ldr	r0, [pc, #124]	; (8001090 <main+0x560>)
 8001012:	f7ff fc17 	bl	8000844 <_ZN9PS4Parser10isTouchingEhh>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <main+0x4f0>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <main+0x4f2>
 8001020:	2300      	movs	r3, #0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00e      	beq.n	8001044 <main+0x514>
						//Serial.print(F("\r\n"));
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d809      	bhi.n	8001044 <main+0x514>
						if (PS4.isTouching(i)) { // Print the position of the finger if it is touching the touchpad
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	4816      	ldr	r0, [pc, #88]	; (8001090 <main+0x560>)
 8001038:	f7ff fc04 	bl	8000844 <_ZN9PS4Parser10isTouchingEhh>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	3301      	adds	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e7f2      	b.n	800102a <main+0x4fa>
					}
				}


			}
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2208      	movs	r2, #8
 8001048:	4619      	mov	r1, r3
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <main+0x568>)
 800104c:	f006 fb0a 	bl	8007664 <USBD_HID_SendReport>
 8001050:	e5b0      	b.n	8000bb4 <main+0x84>
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001052:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001056:	4813      	ldr	r0, [pc, #76]	; (80010a4 <main+0x574>)
 8001058:	f001 fad0 	bl	80025fc <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	bf0c      	ite	eq
 8001062:	2301      	moveq	r3, #1
 8001064:	2300      	movne	r3, #0
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00d      	beq.n	8001088 <main+0x558>
		    if (!buttonPressed) {
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <main+0x578>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	f083 0301 	eor.w	r3, r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <main+0x550>
		    	//Serial.print(F("\r\nButton Pressed"));
		        PS4.pair(); // Start paring routine if user button was just pressed
 800107a:	480c      	ldr	r0, [pc, #48]	; (80010ac <main+0x57c>)
 800107c:	f7ff fb9d 	bl	80007ba <_ZN5BTHID4pairEv>
		    }
		    buttonPressed = true;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <main+0x578>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	e595      	b.n	8000bb4 <main+0x84>
		} else
		    buttonPressed = false;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <main+0x578>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
  }
 800108e:	e591      	b.n	8000bb4 <main+0x84>
 8001090:	200005f8 	.word	0x200005f8
 8001094:	00ffeb04 	.word	0x00ffeb04
 8001098:	20000670 	.word	0x20000670
 800109c:	20000648 	.word	0x20000648
 80010a0:	20000649 	.word	0x20000649
 80010a4:	40020800 	.word	0x40020800
 80010a8:	2000064c 	.word	0x2000064c
 80010ac:	20000580 	.word	0x20000580

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0ac      	sub	sp, #176	; 0xb0
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010ba:	2234      	movs	r2, #52	; 0x34
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f00e fade 	bl	800f680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	225c      	movs	r2, #92	; 0x5c
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f00e facf 	bl	800f680 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b49      	ldr	r3, [pc, #292]	; (800120c <SystemClock_Config+0x15c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a48      	ldr	r2, [pc, #288]	; (800120c <SystemClock_Config+0x15c>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b46      	ldr	r3, [pc, #280]	; (800120c <SystemClock_Config+0x15c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b43      	ldr	r3, [pc, #268]	; (8001210 <SystemClock_Config+0x160>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800110a:	4a41      	ldr	r2, [pc, #260]	; (8001210 <SystemClock_Config+0x160>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <SystemClock_Config+0x160>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111e:	2301      	movs	r3, #1
 8001120:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001126:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001130:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001138:	2304      	movs	r3, #4
 800113a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800113e:	2348      	movs	r3, #72	; 0x48
 8001140:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800114a:	2303      	movs	r3, #3
 800114c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fa2c 	bl	80045b8 <HAL_RCC_OscConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf14      	ite	ne
 8001166:	2301      	movne	r3, #1
 8001168:	2300      	moveq	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001170:	f000 f972 	bl	8001458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001174:	230f      	movs	r3, #15
 8001176:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001178:	2302      	movs	r3, #2
 800117a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800118a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800118e:	2102      	movs	r1, #2
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fc1b 	bl	80039cc <HAL_RCC_ClockConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80011a6:	f000 f957 	bl	8001458 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80011b0:	2300      	movs	r3, #0
 80011b2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fd21 	bl	8003c00 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bf14      	ite	ne
 80011c4:	2301      	movne	r3, #1
 80011c6:	2300      	moveq	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x122>
  {
    Error_Handler();
 80011ce:	f000 f943 	bl	8001458 <Error_Handler>
  }
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_10);
 80011d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011d6:	210a      	movs	r1, #10
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 fbf7 	bl	80039cc <HAL_RCC_ClockConfig>

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000000); // NOTE: Edited, so it increments every us
 80011de:	f002 fcdb 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <SystemClock_Config+0x164>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0c9b      	lsrs	r3, r3, #18
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 f848 	bl	8002282 <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011f2:	2004      	movs	r0, #4
 80011f4:	f001 f852 	bl	800229c <HAL_SYSTICK_CLKSourceConfig>

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f001 f815 	bl	800222e <HAL_NVIC_SetPriority>

}
 8001204:	bf00      	nop
 8001206:	37b0      	adds	r7, #176	; 0xb0
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	40007000 	.word	0x40007000
 8001214:	431bde83 	.word	0x431bde83

08001218 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121e:	463b      	mov	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 800122c:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <_ZL12MX_ADC1_Initv+0xb0>)
 800122e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 8001244:	2200      	movs	r2, #0
 8001246:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 8001252:	2200      	movs	r2, #0
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 8001258:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <_ZL12MX_ADC1_Initv+0xb4>)
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 8001264:	2201      	movs	r2, #1
 8001266:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 8001272:	2201      	movs	r2, #1
 8001274:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001276:	4813      	ldr	r0, [pc, #76]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 8001278:	f000 fc8c 	bl	8001b94 <HAL_ADC_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf14      	ite	ne
 8001282:	2301      	movne	r3, #1
 8001284:	2300      	moveq	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 800128c:	f000 f8e4 	bl	8001458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001290:	230d      	movs	r3, #13
 8001292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001294:	2301      	movs	r3, #1
 8001296:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <_ZL12MX_ADC1_Initv+0xac>)
 80012a2:	f000 fcbb 	bl	8001c1c <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf14      	ite	ne
 80012ac:	2301      	movne	r3, #1
 80012ae:	2300      	moveq	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80012b6:	f000 f8cf 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000218 	.word	0x20000218
 80012c8:	40012000 	.word	0x40012000
 80012cc:	0f000001 	.word	0x0f000001

080012d0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 80012d6:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <_ZL12MX_SPI1_Initv+0x74>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 80012dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 80012fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 8001304:	2218      	movs	r2, #24
 8001306:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 8001316:	2200      	movs	r2, #0
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 800131c:	220a      	movs	r2, #10
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <_ZL12MX_SPI1_Initv+0x70>)
 8001322:	f003 fbe7 	bl	8004af4 <HAL_SPI_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001336:	f000 f88f 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000260 	.word	0x20000260
 8001344:	40013000 	.word	0x40013000

08001348 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_ZL19MX_USART2_UART_Initv+0x54>)
 800134e:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_ZL19MX_USART2_UART_Initv+0x54>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <_ZL19MX_USART2_UART_Initv+0x54>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_ZL19MX_USART2_UART_Initv+0x54>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001380:	f004 f960 	bl	8005644 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	bf14      	ite	ne
 800138a:	2301      	movne	r3, #1
 800138c:	2300      	moveq	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001394:	f000 f860 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200002b8 	.word	0x200002b8
 80013a0:	40004400 	.word	0x40004400

080013a4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a22      	ldr	r2, [pc, #136]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a1b      	ldr	r2, [pc, #108]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a0d      	ldr	r2, [pc, #52]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <_ZL12MX_GPIO_Initv+0xa8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800142a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <_ZL12MX_GPIO_Initv+0xac>)
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <_ZL12MX_GPIO_Initv+0xb0>)
 8001440:	f000 ff48 	bl	80022d4 <HAL_GPIO_Init>

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	10210000 	.word	0x10210000
 8001454:	40020800 	.word	0x40020800

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>

08001462 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 800146a:	f7ff f979 	bl	8000760 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 800146e:	f7ff f95f 	bl	8000730 <_ZN3P103SetEv>
        spi::init();
 8001472:	f000 f845 	bl	8001500 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001476:	f7ff f945 	bl	8000704 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 800147a:	2218      	movs	r2, #24
 800147c:	2188      	movs	r1, #136	; 0x88
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f846 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f865 	bl	8001554 <_ZN8MAX3421eI3P102P9E5resetEv>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e02b      	b.n	80014f8 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 80014a0:	22c1      	movs	r2, #193	; 0xc1
 80014a2:	21d8      	movs	r1, #216	; 0xd8
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f833 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 80014aa:	2260      	movs	r2, #96	; 0x60
 80014ac:	21d0      	movs	r1, #208	; 0xd0
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f82e 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 80014b4:	2204      	movs	r2, #4
 80014b6:	21e8      	movs	r1, #232	; 0xe8
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f829 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 80014be:	21e8      	movs	r1, #232	; 0xe8
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f877 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d000      	beq.n	80014dc <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 80014da:	e7f0      	b.n	80014be <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f88b 	bl	80015f8 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 80014e2:	2220      	movs	r2, #32
 80014e4:	21c8      	movs	r1, #200	; 0xc8
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f812 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 80014ec:	2201      	movs	r2, #1
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f80d 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
        }
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
 800151c:	4613      	mov	r3, r2
 800151e:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001520:	f7ff f912 	bl	8000748 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	b2db      	uxtb	r3, r3
 800152c:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 800152e:	78bb      	ldrb	r3, [r7, #2]
 8001530:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001532:	f107 010c 	add.w	r1, r7, #12
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	2202      	movs	r2, #2
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 800153e:	f003 fb62 	bl	8004c06 <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001542:	f7ff f8f5 	bl	8000730 <_ZN3P103SetEv>
        return;
 8001546:	bf00      	nop
};
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002fc 	.word	0x200002fc

08001554 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001560:	2220      	movs	r2, #32
 8001562:	2178      	movs	r1, #120	; 0x78
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ffd3 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 800156a:	2200      	movs	r2, #0
 800156c:	2178      	movs	r1, #120	; 0x78
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffce 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	3301      	adds	r3, #1
 8001578:	81fb      	strh	r3, [r7, #14]
 800157a:	89fb      	ldrh	r3, [r7, #14]
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf14      	ite	ne
 8001580:	2301      	movne	r3, #1
 8001582:	2300      	moveq	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00f      	beq.n	80015aa <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 800158a:	2168      	movs	r1, #104	; 0x68
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f811 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001592:	4603      	mov	r3, r0
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d100      	bne.n	80015a8 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 80015a6:	e7e5      	b.n	8001574 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 80015a8:	bf00      	nop
        return ( i);
 80015aa:	89fb      	ldrh	r3, [r7, #14]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 80015c0:	f7ff f8c2 	bl	8000748 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 80015c4:	1cf9      	adds	r1, r7, #3
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	2201      	movs	r2, #1
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80015ce:	f003 fb1a 	bl	8004c06 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 80015d6:	f107 010f 	add.w	r1, r7, #15
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	2201      	movs	r2, #1
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80015e2:	f003 fc4c 	bl	8004e7e <HAL_SPI_Receive>
        SPI_SS::Set();
 80015e6:	f7ff f8a3 	bl	8000730 <_ZN3P103SetEv>
        return (rv);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200002fc 	.word	0x200002fc

080015f8 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001600:	21f8      	movs	r1, #248	; 0xf8
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffd6 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001612:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2bc0      	cmp	r3, #192	; 0xc0
 8001618:	d04a      	beq.n	80016b0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 800161a:	2bc0      	cmp	r3, #192	; 0xc0
 800161c:	dc55      	bgt.n	80016ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800161e:	2b80      	cmp	r3, #128	; 0x80
 8001620:	d006      	beq.n	8001630 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8001622:	2b80      	cmp	r3, #128	; 0x80
 8001624:	dc51      	bgt.n	80016ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001626:	2b00      	cmp	r3, #0
 8001628:	d046      	beq.n	80016b8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 800162a:	2b40      	cmp	r3, #64	; 0x40
 800162c:	d020      	beq.n	8001670 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 800162e:	e04c      	b.n	80016ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001630:	21d8      	movs	r1, #216	; 0xd8
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ffbe 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001638:	4603      	mov	r3, r0
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	bf0c      	ite	eq
 8001642:	2301      	moveq	r3, #1
 8001644:	2300      	movne	r3, #0
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800164c:	22c9      	movs	r2, #201	; 0xc9
 800164e:	21d8      	movs	r1, #216	; 0xd8
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff5d 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001658:	2202      	movs	r2, #2
 800165a:	701a      	strb	r2, [r3, #0]
                        break;
 800165c:	e035      	b.n	80016ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800165e:	22cb      	movs	r2, #203	; 0xcb
 8001660:	21d8      	movs	r1, #216	; 0xd8
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff54 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800166a:	2203      	movs	r2, #3
 800166c:	701a      	strb	r2, [r3, #0]
                        break;
 800166e:	e02c      	b.n	80016ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001670:	21d8      	movs	r1, #216	; 0xd8
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ff9e 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001678:	4603      	mov	r3, r0
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	bf0c      	ite	eq
 8001682:	2301      	moveq	r3, #1
 8001684:	2300      	movne	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800168c:	22cb      	movs	r2, #203	; 0xcb
 800168e:	21d8      	movs	r1, #216	; 0xd8
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff3d 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001698:	2203      	movs	r2, #3
 800169a:	701a      	strb	r2, [r3, #0]
                        break;
 800169c:	e015      	b.n	80016ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800169e:	22c9      	movs	r2, #201	; 0xc9
 80016a0:	21d8      	movs	r1, #216	; 0xd8
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ff34 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80016aa:	2202      	movs	r2, #2
 80016ac:	701a      	strb	r2, [r3, #0]
                        break;
 80016ae:	e00c      	b.n	80016ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
                        break;
 80016b6:	e008      	b.n	80016ca <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 80016b8:	22d1      	movs	r2, #209	; 0xd1
 80016ba:	21d8      	movs	r1, #216	; 0xd8
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff27 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
                        break;
 80016c8:	bf00      	nop
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000064d 	.word	0x2000064d

080016d8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d115      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d110      	bne.n	8001714 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 80016f2:	490a      	ldr	r1, [pc, #40]	; (800171c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80016f4:	480a      	ldr	r0, [pc, #40]	; (8001720 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80016f6:	f7fe ffef 	bl	80006d8 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80016fa:	480a      	ldr	r0, [pc, #40]	; (8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80016fc:	f00c fa66 	bl	800dbcc <_ZN3USBC1Ev>
BTD Btd(&Usb);
 8001700:	4908      	ldr	r1, [pc, #32]	; (8001724 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001702:	4809      	ldr	r0, [pc, #36]	; (8001728 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001704:	f008 f844 	bl	8009790 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800170a:	2200      	movs	r2, #0
 800170c:	4906      	ldr	r1, [pc, #24]	; (8001728 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800170e:	4808      	ldr	r0, [pc, #32]	; (8001730 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001710:	f7ff f93a 	bl	8000988 <_ZN5PS4BTC1EP3BTDbPKc>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002b8 	.word	0x200002b8
 8001720:	20000398 	.word	0x20000398
 8001724:	200003ac 	.word	0x200003ac
 8001728:	20000468 	.word	0x20000468
 800172c:	0800f788 	.word	0x0800f788
 8001730:	20000580 	.word	0x20000580

08001734 <_GLOBAL__sub_I_hadc1>:
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
 8001738:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800173c:	2001      	movs	r0, #1
 800173e:	f7ff ffcb 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_MspInit+0x4c>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x4c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001782:	2007      	movs	r0, #7
 8001784:	f000 fd48 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_ADC_MspInit+0x7c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d127      	bne.n	8001806 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_ADC_MspInit+0x80>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	4a15      	ldr	r2, [pc, #84]	; (8001814 <HAL_ADC_MspInit+0x80>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_ADC_MspInit+0x80>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_ADC_MspInit+0x80>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_ADC_MspInit+0x80>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_ADC_MspInit+0x80>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ee:	2308      	movs	r3, #8
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f2:	2303      	movs	r3, #3
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <HAL_ADC_MspInit+0x84>)
 8001802:	f000 fd67 	bl	80022d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40012000 	.word	0x40012000
 8001814:	40023800 	.word	0x40023800
 8001818:	40020800 	.word	0x40020800

0800181c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_SPI_MspInit+0x84>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d12b      	bne.n	8001896 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_SPI_MspInit+0x88>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <HAL_SPI_MspInit+0x88>)
 8001848:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_SPI_MspInit+0x88>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_SPI_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a10      	ldr	r2, [pc, #64]	; (80018a4 <HAL_SPI_MspInit+0x88>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_SPI_MspInit+0x88>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001876:	23e0      	movs	r3, #224	; 0xe0
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001886:	2305      	movs	r3, #5
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <HAL_SPI_MspInit+0x8c>)
 8001892:	f000 fd1f 	bl	80022d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40013000 	.word	0x40013000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <HAL_UART_MspInit+0x84>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12b      	bne.n	8001926 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001906:	230c      	movs	r3, #12
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001916:	2307      	movs	r3, #7
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_UART_MspInit+0x8c>)
 8001922:	f000 fcd7 	bl	80022d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40004400 	.word	0x40004400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 f8c0 	bl	8001b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <OTG_FS_IRQHandler+0x10>)
 8001996:	f000 ffb9 	bl	800290c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000b40 	.word	0x20000b40

080019a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_kill>:

int _kill(int pid, int sig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019be:	f00d fe27 	bl	800f610 <__errno>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2216      	movs	r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
	return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_exit>:

void _exit (int status)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffe7 	bl	80019b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019e6:	e7fe      	b.n	80019e6 <_exit+0x12>

080019e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <SystemInit+0x28>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <SystemInit+0x28>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SystemInit+0x28>)
 80019fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a02:	609a      	str	r2, [r3, #8]
#endif
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a1a:	e003      	b.n	8001a24 <LoopCopyDataInit>

08001a1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a22:	3104      	adds	r1, #4

08001a24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a24:	480b      	ldr	r0, [pc, #44]	; (8001a54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a2c:	d3f6      	bcc.n	8001a1c <CopyDataInit>
  ldr  r2, =_sbss
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a30:	e002      	b.n	8001a38 <LoopFillZerobss>

08001a32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a34:	f842 3b04 	str.w	r3, [r2], #4

08001a38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a3c:	d3f9      	bcc.n	8001a32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a3e:	f7ff ffd3 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a42:	f00d fdeb 	bl	800f61c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a46:	f7ff f873 	bl	8000b30 <main>
  bx  lr    
 8001a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a50:	0800fa80 	.word	0x0800fa80
  ldr  r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a58:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 8001a5c:	200001d4 	.word	0x200001d4
  ldr  r3, = _ebss
 8001a60:	20000f4c 	.word	0x20000f4c

08001a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a64:	e7fe      	b.n	8001a64 <ADC_IRQHandler>
	...

08001a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <HAL_Init+0x40>)
 8001a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_Init+0x40>)
 8001a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <HAL_Init+0x40>)
 8001a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a90:	2003      	movs	r0, #3
 8001a92:	f000 fbc1 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 f808 	bl	8001aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a9c:	f7ff fe52 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x54>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x58>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fbd9 	bl	8002282 <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00e      	b.n	8001af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b0f      	cmp	r3, #15
 8001ade:	d80a      	bhi.n	8001af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f000 fba1 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aec:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <HAL_InitTick+0x5c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000008 	.word	0x20000008
 8001b08:	20000004 	.word	0x20000004

08001b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x20>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x24>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_IncTick+0x24>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	2000066c 	.word	0x2000066c

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_GetTick+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2000066c 	.word	0x2000066c

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff ffee 	bl	8001b34 <HAL_GetTick>
 8001b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d005      	beq.n	8001b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_Delay+0x44>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b72:	bf00      	nop
 8001b74:	f7ff ffde 	bl	8001b34 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d8f7      	bhi.n	8001b74 <HAL_Delay+0x28>
  {
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008

08001b94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e033      	b.n	8001c12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fdee 	bl	8001794 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d118      	bne.n	8001c04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bda:	f023 0302 	bic.w	r3, r3, #2
 8001bde:	f043 0202 	orr.w	r2, r3, #2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f94a 	bl	8001e80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f023 0303 	bic.w	r3, r3, #3
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40
 8001c02:	e001      	b.n	8001c08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1c>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e113      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x244>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b09      	cmp	r3, #9
 8001c46:	d925      	bls.n	8001c94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68d9      	ldr	r1, [r3, #12]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b1e      	subs	r3, #30
 8001c5e:	2207      	movs	r2, #7
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43da      	mvns	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68d9      	ldr	r1, [r3, #12]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	4603      	mov	r3, r0
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4403      	add	r3, r0
 8001c86:	3b1e      	subs	r3, #30
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	e022      	b.n	8001cda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6919      	ldr	r1, [r3, #16]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	2207      	movs	r2, #7
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6919      	ldr	r1, [r3, #16]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	4603      	mov	r3, r0
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4403      	add	r3, r0
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d824      	bhi.n	8001d2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3b05      	subs	r3, #5
 8001cf4:	221f      	movs	r2, #31
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	400a      	ands	r2, r1
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3b05      	subs	r3, #5
 8001d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	635a      	str	r2, [r3, #52]	; 0x34
 8001d2a:	e04c      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b0c      	cmp	r3, #12
 8001d32:	d824      	bhi.n	8001d7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	3b23      	subs	r3, #35	; 0x23
 8001d46:	221f      	movs	r2, #31
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	400a      	ands	r2, r1
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3b23      	subs	r3, #35	; 0x23
 8001d70:	fa00 f203 	lsl.w	r2, r0, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d7c:	e023      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3b41      	subs	r3, #65	; 0x41
 8001d90:	221f      	movs	r2, #31
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	3b41      	subs	r3, #65	; 0x41
 8001dba:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc6:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_ADC_ConfigChannel+0x250>)
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <HAL_ADC_ConfigChannel+0x254>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d10f      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1d8>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b12      	cmp	r3, #18
 8001dda:	d10b      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_ADC_ConfigChannel+0x254>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d12b      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x23a>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <HAL_ADC_ConfigChannel+0x258>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d003      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x1f4>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b11      	cmp	r3, #17
 8001e0e:	d122      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <HAL_ADC_ConfigChannel+0x258>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d111      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_ADC_ConfigChannel+0x25c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_ADC_ConfigChannel+0x260>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	0c9a      	lsrs	r2, r3, #18
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e48:	e002      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f9      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40012300 	.word	0x40012300
 8001e70:	40012000 	.word	0x40012000
 8001e74:	10000012 	.word	0x10000012
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	431bde83 	.word	0x431bde83

08001e80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e88:	4b79      	ldr	r3, [pc, #484]	; (8002070 <ADC_Init+0x1f0>)
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	021a      	lsls	r2, r3, #8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6899      	ldr	r1, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	4a58      	ldr	r2, [pc, #352]	; (8002074 <ADC_Init+0x1f4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d022      	beq.n	8001f5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6899      	ldr	r1, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	e00f      	b.n	8001f7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0202 	bic.w	r2, r2, #2
 8001f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6899      	ldr	r1, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e1b      	ldrb	r3, [r3, #24]
 8001f98:	005a      	lsls	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01b      	beq.n	8001fe4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	035a      	lsls	r2, r3, #13
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	e007      	b.n	8001ff4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	3b01      	subs	r3, #1
 8002010:	051a      	lsls	r2, r3, #20
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002036:	025a      	lsls	r2, r3, #9
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6899      	ldr	r1, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	029a      	lsls	r2, r3, #10
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	609a      	str	r2, [r3, #8]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40012300 	.word	0x40012300
 8002074:	0f000001 	.word	0x0f000001

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db0b      	blt.n	8002106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4907      	ldr	r1, [pc, #28]	; (8002114 <__NVIC_EnableIRQ+0x38>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2001      	movs	r0, #1
 80020fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db0a      	blt.n	8002142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	490c      	ldr	r1, [pc, #48]	; (8002164 <__NVIC_SetPriority+0x4c>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	440b      	add	r3, r1
 800213c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002140:	e00a      	b.n	8002158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4908      	ldr	r1, [pc, #32]	; (8002168 <__NVIC_SetPriority+0x50>)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	3b04      	subs	r3, #4
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	440b      	add	r3, r1
 8002156:	761a      	strb	r2, [r3, #24]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	2b04      	cmp	r3, #4
 8002188:	bf28      	it	cs
 800218a:	2304      	movcs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3304      	adds	r3, #4
 8002192:	2b06      	cmp	r3, #6
 8002194:	d902      	bls.n	800219c <NVIC_EncodePriority+0x30>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b03      	subs	r3, #3
 800219a:	e000      	b.n	800219e <NVIC_EncodePriority+0x32>
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43d9      	mvns	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	4313      	orrs	r3, r2
         );
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff8e 	bl	8002118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff29 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff3e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff8e 	bl	800216c <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5d 	bl	8002118 <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff31 	bl	80020dc <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d106      	bne.n	80022b8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80022b6:	e005      	b.n	80022c4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022be:	f023 0304 	bic.w	r3, r3, #4
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	e165      	b.n	80025bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	f040 8154 	bne.w	80025b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d005      	beq.n	8002326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002322:	2b02      	cmp	r3, #2
 8002324:	d130      	bne.n	8002388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 0201 	and.w	r2, r3, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b03      	cmp	r3, #3
 8002392:	d017      	beq.n	80023c4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	2203      	movs	r2, #3
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d123      	bne.n	8002418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	08da      	lsrs	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3208      	adds	r2, #8
 8002412:	69b9      	ldr	r1, [r7, #24]
 8002414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0203 	and.w	r2, r3, #3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80ae 	beq.w	80025b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b5d      	ldr	r3, [pc, #372]	; (80025d4 <HAL_GPIO_Init+0x300>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a5c      	ldr	r2, [pc, #368]	; (80025d4 <HAL_GPIO_Init+0x300>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b5a      	ldr	r3, [pc, #360]	; (80025d4 <HAL_GPIO_Init+0x300>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002476:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <HAL_GPIO_Init+0x304>)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4f      	ldr	r2, [pc, #316]	; (80025dc <HAL_GPIO_Init+0x308>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d025      	beq.n	80024ee <HAL_GPIO_Init+0x21a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4e      	ldr	r2, [pc, #312]	; (80025e0 <HAL_GPIO_Init+0x30c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01f      	beq.n	80024ea <HAL_GPIO_Init+0x216>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4d      	ldr	r2, [pc, #308]	; (80025e4 <HAL_GPIO_Init+0x310>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d019      	beq.n	80024e6 <HAL_GPIO_Init+0x212>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4c      	ldr	r2, [pc, #304]	; (80025e8 <HAL_GPIO_Init+0x314>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_GPIO_Init+0x20e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4b      	ldr	r2, [pc, #300]	; (80025ec <HAL_GPIO_Init+0x318>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00d      	beq.n	80024de <HAL_GPIO_Init+0x20a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4a      	ldr	r2, [pc, #296]	; (80025f0 <HAL_GPIO_Init+0x31c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <HAL_GPIO_Init+0x206>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a49      	ldr	r2, [pc, #292]	; (80025f4 <HAL_GPIO_Init+0x320>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_GPIO_Init+0x202>
 80024d2:	2306      	movs	r3, #6
 80024d4:	e00c      	b.n	80024f0 <HAL_GPIO_Init+0x21c>
 80024d6:	2307      	movs	r3, #7
 80024d8:	e00a      	b.n	80024f0 <HAL_GPIO_Init+0x21c>
 80024da:	2305      	movs	r3, #5
 80024dc:	e008      	b.n	80024f0 <HAL_GPIO_Init+0x21c>
 80024de:	2304      	movs	r3, #4
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x21c>
 80024e2:	2303      	movs	r3, #3
 80024e4:	e004      	b.n	80024f0 <HAL_GPIO_Init+0x21c>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e002      	b.n	80024f0 <HAL_GPIO_Init+0x21c>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_GPIO_Init+0x21c>
 80024ee:	2300      	movs	r3, #0
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	f002 0203 	and.w	r2, r2, #3
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	4093      	lsls	r3, r2
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002500:	4935      	ldr	r1, [pc, #212]	; (80025d8 <HAL_GPIO_Init+0x304>)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250e:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_GPIO_Init+0x324>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002532:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <HAL_GPIO_Init+0x324>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002538:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_GPIO_Init+0x324>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800255c:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <HAL_GPIO_Init+0x324>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_GPIO_Init+0x324>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <HAL_GPIO_Init+0x324>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_GPIO_Init+0x324>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <HAL_GPIO_Init+0x324>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3301      	adds	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	2b0f      	cmp	r3, #15
 80025c0:	f67f ae96 	bls.w	80022f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40013800 	.word	0x40013800
 80025dc:	40020000 	.word	0x40020000
 80025e0:	40020400 	.word	0x40020400
 80025e4:	40020800 	.word	0x40020800
 80025e8:	40020c00 	.word	0x40020c00
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40021400 	.word	0x40021400
 80025f4:	40021800 	.word	0x40021800
 80025f8:	40013c00 	.word	0x40013c00

080025fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	e001      	b.n	800261e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800261e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
 8002638:	4613      	mov	r3, r2
 800263a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800263c:	787b      	ldrb	r3, [r7, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002648:	e003      	b.n	8002652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	041a      	lsls	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	619a      	str	r2, [r3, #24]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800265e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002660:	b08f      	sub	sp, #60	; 0x3c
 8002662:	af0a      	add	r7, sp, #40	; 0x28
 8002664:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e116      	b.n	800289e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f006 fb22 	bl	8008cd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fc71 	bl	8005f96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	687e      	ldr	r6, [r7, #4]
 80026bc:	466d      	mov	r5, sp
 80026be:	f106 0410 	add.w	r4, r6, #16
 80026c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80026d2:	1d33      	adds	r3, r6, #4
 80026d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d6:	6838      	ldr	r0, [r7, #0]
 80026d8:	f003 fb48 	bl	8005d6c <USB_CoreInit>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0d7      	b.n	800289e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fc5f 	bl	8005fb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e04a      	b.n	8002796 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	333d      	adds	r3, #61	; 0x3d
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	333c      	adds	r3, #60	; 0x3c
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	b298      	uxth	r0, r3
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3342      	adds	r3, #66	; 0x42
 800273c:	4602      	mov	r2, r0
 800273e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	333f      	adds	r3, #63	; 0x3f
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3344      	adds	r3, #68	; 0x44
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	3348      	adds	r3, #72	; 0x48
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3350      	adds	r3, #80	; 0x50
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	3301      	adds	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d3af      	bcc.n	8002700 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	e044      	b.n	8002830 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	3301      	adds	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	429a      	cmp	r2, r3
 8002838:	d3b5      	bcc.n	80027a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	687e      	ldr	r6, [r7, #4]
 8002842:	466d      	mov	r5, sp
 8002844:	f106 0410 	add.w	r4, r6, #16
 8002848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002850:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002854:	e885 0003 	stmia.w	r5, {r0, r1}
 8002858:	1d33      	adds	r3, r6, #4
 800285a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	f003 fbd5 	bl	800600c <USB_DevInit>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e014      	b.n	800289e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2b01      	cmp	r3, #1
 800288a:	d102      	bne.n	8002892 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f001 f879 	bl	8003984 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fc10 	bl	80070bc <USB_DevDisconnect>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_PCD_Start+0x1c>
 80028be:	2302      	movs	r3, #2
 80028c0:	e020      	b.n	8002904 <HAL_PCD_Start+0x5e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d109      	bne.n	80028e6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d005      	beq.n	80028e6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fb42 	bl	8005f74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 fbc0 	bl	800707a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b08d      	sub	sp, #52	; 0x34
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f004 fc7e 	bl	8007224 <USB_GetMode>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 83ca 	bne.w	80030c4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fbe2 	bl	80070fe <USB_ReadInterrupts>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 83c0 	beq.w	80030c2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f004 fbd9 	bl	80070fe <USB_ReadInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d107      	bne.n	8002966 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 0202 	and.w	r2, r2, #2
 8002964:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f004 fbc7 	bl	80070fe <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b10      	cmp	r3, #16
 8002978:	d161      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699a      	ldr	r2, [r3, #24]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0210 	bic.w	r2, r2, #16
 8002988:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f003 020f 	and.w	r2, r3, #15
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	3304      	adds	r3, #4
 80029a8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	0c5b      	lsrs	r3, r3, #17
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d124      	bne.n	8002a00 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d035      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	6a38      	ldr	r0, [r7, #32]
 80029d6:	f004 fa2d 	bl	8006e34 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e6:	441a      	add	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f8:	441a      	add	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	619a      	str	r2, [r3, #24]
 80029fe:	e016      	b.n	8002a2e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	0c5b      	lsrs	r3, r3, #17
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	2b06      	cmp	r3, #6
 8002a0a:	d110      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a12:	2208      	movs	r2, #8
 8002a14:	4619      	mov	r1, r3
 8002a16:	6a38      	ldr	r0, [r7, #32]
 8002a18:	f004 fa0c 	bl	8006e34 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a28:	441a      	add	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0210 	orr.w	r2, r2, #16
 8002a3c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 fb5b 	bl	80070fe <USB_ReadInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a52:	d16e      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f004 fb61 	bl	8007124 <USB_ReadDevAllOutEpInterrupt>
 8002a62:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a64:	e062      	b.n	8002b2c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d057      	beq.n	8002b20 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f004 fb86 	bl	800718c <USB_ReadDevOutEPInterrupt>
 8002a80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00c      	beq.n	8002aa6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fdc5 	bl	8003630 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00c      	beq.n	8002aca <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002abc:	461a      	mov	r2, r3
 8002abe:	2308      	movs	r3, #8
 8002ac0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 febf 	bl	8003848 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afc:	461a      	mov	r2, r3
 8002afe:	2320      	movs	r3, #32
 8002b00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	3301      	adds	r3, #1
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d199      	bne.n	8002a66 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f004 fae1 	bl	80070fe <USB_ReadInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b46:	f040 80c0 	bne.w	8002cca <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 fb02 	bl	8007158 <USB_ReadDevAllInEpInterrupt>
 8002b54:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b5a:	e0b2      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80a7 	beq.w	8002cb6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 fb28 	bl	80071c8 <USB_ReadDevInEPInterrupt>
 8002b78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d057      	beq.n	8002c34 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69f9      	ldr	r1, [r7, #28]
 8002ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d132      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3348      	adds	r3, #72	; 0x48
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4403      	add	r3, r0
 8002be2:	3344      	adds	r3, #68	; 0x44
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4419      	add	r1, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4403      	add	r3, r0
 8002bf6:	3348      	adds	r3, #72	; 0x48
 8002bf8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d113      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x31c>
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3350      	adds	r3, #80	; 0x50
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d108      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c20:	461a      	mov	r2, r3
 8002c22:	2101      	movs	r1, #1
 8002c24:	f004 fb30 	bl	8007288 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f006 f8d1 	bl	8008dd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c66:	461a      	mov	r2, r3
 8002c68:	2310      	movs	r3, #16
 8002c6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c82:	461a      	mov	r2, r3
 8002c84:	2340      	movs	r3, #64	; 0x40
 8002c86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fc30 	bl	8003516 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	3301      	adds	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f47f af49 	bne.w	8002b5c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f004 fa15 	bl	80070fe <USB_ReadInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cde:	d122      	bne.n	8002d26 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d108      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d06:	2100      	movs	r1, #0
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f006 faa1 	bl	8009250 <HAL_PCDEx_LPM_Callback>
 8002d0e:	e002      	b.n	8002d16 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f006 f8d7 	bl	8008ec4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 f9e7 	bl	80070fe <USB_ReadInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d3a:	d112      	bne.n	8002d62 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f006 f893 	bl	8008e78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d60:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f004 f9c9 	bl	80070fe <USB_ReadInterrupts>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d76:	d121      	bne.n	8002dbc <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002d86:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d111      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	f003 020f 	and.w	r2, r3, #15
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002dac:	2101      	movs	r1, #1
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f006 fa4e 	bl	8009250 <HAL_PCDEx_LPM_Callback>
 8002db4:	e002      	b.n	8002dbc <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f006 f85e 	bl	8008e78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f004 f99c 	bl	80070fe <USB_ReadInterrupts>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd0:	f040 80c7 	bne.w	8002f62 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2110      	movs	r1, #16
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fa6a 	bl	80062c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df8:	e056      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e06:	461a      	mov	r2, r3
 8002e08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1e:	0151      	lsls	r1, r2, #5
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	440a      	add	r2, r1
 8002e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e2c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3e:	0151      	lsls	r1, r2, #5
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	440a      	add	r2, r1
 8002e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e72:	0151      	lsls	r1, r2, #5
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	440a      	add	r2, r1
 8002e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e92:	0151      	lsls	r1, r2, #5
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	440a      	add	r2, r1
 8002e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ea0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d3a3      	bcc.n	8002dfa <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ec4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d016      	beq.n	8002efc <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ede:	f043 030b 	orr.w	r3, r3, #11
 8002ee2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef4:	f043 030b 	orr.w	r3, r3, #11
 8002ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8002efa:	e015      	b.n	8002f28 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f0e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f22:	f043 030b 	orr.w	r3, r3, #11
 8002f26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f004 f99b 	bl	8007288 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f004 f8c9 	bl	80070fe <USB_ReadInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f76:	d124      	bne.n	8002fc2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f004 f95f 	bl	8007240 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 f9ff 	bl	800638a <USB_GetDevSpeed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	461a      	mov	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681c      	ldr	r4, [r3, #0]
 8002f98:	f000 fdfe 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f002 ff42 	bl	8005e30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f005 ff3a 	bl	8008e26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f004 f899 	bl	80070fe <USB_ReadInterrupts>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d10a      	bne.n	8002fec <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f005 ff17 	bl	8008e0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f002 0208 	and.w	r2, r2, #8
 8002fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f004 f884 	bl	80070fe <USB_ReadInterrupts>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003000:	d10f      	bne.n	8003022 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f005 ff79 	bl	8008f04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003020:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f004 f869 	bl	80070fe <USB_ReadInterrupts>
 800302c:	4603      	mov	r3, r0
 800302e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003036:	d10f      	bne.n	8003058 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f005 ff4c 	bl	8008ee0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f004 f84e 	bl	80070fe <USB_ReadInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d10a      	bne.n	8003084 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f005 ff5a 	bl	8008f28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f004 f838 	bl	80070fe <USB_ReadInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b04      	cmp	r3, #4
 8003096:	d115      	bne.n	80030c4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f005 ff4a 	bl	8008f44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	e000      	b.n	80030c4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80030c2:	bf00      	nop
    }
  }
}
 80030c4:	3734      	adds	r7, #52	; 0x34
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}

080030ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_PCD_SetAddress+0x1a>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e013      	b.n	800310c <HAL_PCD_SetAddress+0x42>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 ff96 	bl	800702e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4603      	mov	r3, r0
 8003124:	70fb      	strb	r3, [r7, #3]
 8003126:	460b      	mov	r3, r1
 8003128:	803b      	strh	r3, [r7, #0]
 800312a:	4613      	mov	r3, r2
 800312c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003136:	2b00      	cmp	r3, #0
 8003138:	da0f      	bge.n	800315a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	f003 020f 	and.w	r2, r3, #15
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	3338      	adds	r3, #56	; 0x38
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	3304      	adds	r3, #4
 8003150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	705a      	strb	r2, [r3, #1]
 8003158:	e00f      	b.n	800317a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	f003 020f 	and.w	r2, r3, #15
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	3304      	adds	r3, #4
 8003172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	b2da      	uxtb	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003186:	883a      	ldrh	r2, [r7, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	78ba      	ldrb	r2, [r7, #2]
 8003190:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031a4:	78bb      	ldrb	r3, [r7, #2]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d102      	bne.n	80031b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_PCD_EP_Open+0xaa>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e00e      	b.n	80031dc <HAL_PCD_EP_Open+0xc8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68f9      	ldr	r1, [r7, #12]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f003 f901 	bl	80063d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80031da:	7afb      	ldrb	r3, [r7, #11]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da0f      	bge.n	8003218 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 020f 	and.w	r2, r3, #15
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	3338      	adds	r3, #56	; 0x38
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	3304      	adds	r3, #4
 800320e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	705a      	strb	r2, [r3, #1]
 8003216:	e00f      	b.n	8003238 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 020f 	and.w	r2, r3, #15
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	b2da      	uxtb	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_PCD_EP_Close+0x6e>
 800324e:	2302      	movs	r3, #2
 8003250:	e00e      	b.n	8003270 <HAL_PCD_EP_Close+0x8c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68f9      	ldr	r1, [r7, #12]
 8003260:	4618      	mov	r0, r3
 8003262:	f003 f93f 	bl	80064e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	460b      	mov	r3, r1
 8003286:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003288:	7afb      	ldrb	r3, [r7, #11]
 800328a:	f003 020f 	and.w	r2, r3, #15
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2200      	movs	r2, #0
 80032b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d102      	bne.n	80032d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032d4:	7afb      	ldrb	r3, [r7, #11]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	6979      	ldr	r1, [r7, #20]
 80032ec:	f003 fc1a 	bl	8006b24 <USB_EP0StartXfer>
 80032f0:	e008      	b.n	8003304 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	6979      	ldr	r1, [r7, #20]
 8003300:	f003 f9cc 	bl	800669c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	460b      	mov	r3, r1
 800331c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331e:	7afb      	ldrb	r3, [r7, #11]
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	3338      	adds	r3, #56	; 0x38
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4413      	add	r3, r2
 8003332:	3304      	adds	r3, #4
 8003334:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2201      	movs	r2, #1
 800334c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334e:	7afb      	ldrb	r3, [r7, #11]
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	b2da      	uxtb	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d102      	bne.n	8003368 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003368:	7afb      	ldrb	r3, [r7, #11]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	6979      	ldr	r1, [r7, #20]
 8003380:	f003 fbd0 	bl	8006b24 <USB_EP0StartXfer>
 8003384:	e008      	b.n	8003398 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	6979      	ldr	r1, [r7, #20]
 8003394:	f003 f982 	bl	800669c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d901      	bls.n	80033c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e050      	b.n	8003462 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	da0f      	bge.n	80033e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	f003 020f 	and.w	r2, r3, #15
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	3338      	adds	r3, #56	; 0x38
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	4413      	add	r3, r2
 80033dc:	3304      	adds	r3, #4
 80033de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	705a      	strb	r2, [r3, #1]
 80033e6:	e00d      	b.n	8003404 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	3304      	adds	r3, #4
 80033fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340a:	78fb      	ldrb	r3, [r7, #3]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	b2da      	uxtb	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_PCD_EP_SetStall+0x82>
 8003420:	2302      	movs	r3, #2
 8003422:	e01e      	b.n	8003462 <HAL_PCD_EP_SetStall+0xc0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68f9      	ldr	r1, [r7, #12]
 8003432:	4618      	mov	r0, r3
 8003434:	f003 fd27 	bl	8006e86 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	b2d9      	uxtb	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003452:	461a      	mov	r2, r3
 8003454:	f003 ff18 	bl	8007288 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	f003 020f 	and.w	r2, r3, #15
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d901      	bls.n	8003488 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e042      	b.n	800350e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348c:	2b00      	cmp	r3, #0
 800348e:	da0f      	bge.n	80034b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 020f 	and.w	r2, r3, #15
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	3338      	adds	r3, #56	; 0x38
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	705a      	strb	r2, [r3, #1]
 80034ae:	e00f      	b.n	80034d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	f003 020f 	and.w	r2, r3, #15
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	3304      	adds	r3, #4
 80034c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_PCD_EP_ClrStall+0x86>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e00e      	b.n	800350e <HAL_PCD_EP_ClrStall+0xa4>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68f9      	ldr	r1, [r7, #12]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fd2f 	bl	8006f62 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b08a      	sub	sp, #40	; 0x28
 800351a:	af02      	add	r7, sp, #8
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3338      	adds	r3, #56	; 0x38
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	429a      	cmp	r2, r3
 8003548:	d901      	bls.n	800354e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e06c      	b.n	8003628 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	429a      	cmp	r2, r3
 8003562:	d902      	bls.n	800356a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3303      	adds	r3, #3
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003572:	e02b      	b.n	80035cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	429a      	cmp	r2, r3
 8003588:	d902      	bls.n	8003590 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3303      	adds	r3, #3
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	68d9      	ldr	r1, [r3, #12]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4603      	mov	r3, r0
 80035ae:	6978      	ldr	r0, [r7, #20]
 80035b0:	f003 fc0b 	bl	8006dca <USB_WritePacket>

    ep->xfer_buff  += len;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	441a      	add	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	441a      	add	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d809      	bhi.n	80035f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d203      	bcs.n	80035f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1be      	bne.n	8003574 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d811      	bhi.n	8003626 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	2201      	movs	r2, #1
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	43db      	mvns	r3, r3
 800361c:	6939      	ldr	r1, [r7, #16]
 800361e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003622:	4013      	ands	r3, r2
 8003624:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	333c      	adds	r3, #60	; 0x3c
 8003648:	3304      	adds	r3, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b01      	cmp	r3, #1
 8003664:	f040 80a0 	bne.w	80037a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d015      	beq.n	800369e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4a72      	ldr	r2, [pc, #456]	; (8003840 <PCD_EP_OutXfrComplete_int+0x210>)
 8003676:	4293      	cmp	r3, r2
 8003678:	f240 80dd 	bls.w	8003836 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80d7 	beq.w	8003836 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003694:	461a      	mov	r2, r3
 8003696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800369a:	6093      	str	r3, [r2, #8]
 800369c:	e0cb      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b4:	461a      	mov	r2, r3
 80036b6:	2320      	movs	r3, #32
 80036b8:	6093      	str	r3, [r2, #8]
 80036ba:	e0bc      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 80b7 	bne.w	8003836 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a5d      	ldr	r2, [pc, #372]	; (8003840 <PCD_EP_OutXfrComplete_int+0x210>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d90f      	bls.n	80036f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e6:	461a      	mov	r2, r3
 80036e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ec:	6093      	str	r3, [r2, #8]
 80036ee:	e0a2      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003702:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	0159      	lsls	r1, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	440b      	add	r3, r1
 800370c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003716:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4403      	add	r3, r0
 8003726:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800372a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4403      	add	r3, r0
 800374e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4419      	add	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4403      	add	r3, r0
 8003764:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003768:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d114      	bne.n	800379a <PCD_EP_OutXfrComplete_int+0x16a>
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d108      	bne.n	800379a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003792:	461a      	mov	r2, r3
 8003794:	2101      	movs	r1, #1
 8003796:	f003 fd77 	bl	8007288 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	4619      	mov	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f005 fafd 	bl	8008da0 <HAL_PCD_DataOutStageCallback>
 80037a6:	e046      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a26      	ldr	r2, [pc, #152]	; (8003844 <PCD_EP_OutXfrComplete_int+0x214>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d124      	bne.n	80037fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	461a      	mov	r2, r3
 80037c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037cc:	6093      	str	r3, [r2, #8]
 80037ce:	e032      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e6:	461a      	mov	r2, r3
 80037e8:	2320      	movs	r3, #32
 80037ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f005 fad4 	bl	8008da0 <HAL_PCD_DataOutStageCallback>
 80037f8:	e01d      	b.n	8003836 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d114      	bne.n	800382a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d108      	bne.n	800382a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003822:	461a      	mov	r2, r3
 8003824:	2100      	movs	r1, #0
 8003826:	f003 fd2f 	bl	8007288 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	4619      	mov	r1, r3
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f005 fab5 	bl	8008da0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	4f54300a 	.word	0x4f54300a
 8003844:	4f54310a 	.word	0x4f54310a

08003848 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	333c      	adds	r3, #60	; 0x3c
 8003860:	3304      	adds	r3, #4
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d90e      	bls.n	800389c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003894:	461a      	mov	r2, r3
 8003896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f005 fa6d 	bl	8008d7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d90c      	bls.n	80038c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d108      	bne.n	80038c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038bc:	461a      	mov	r2, r3
 80038be:	2101      	movs	r1, #1
 80038c0:	f003 fce2 	bl	8007288 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	4f54300a 	.word	0x4f54300a

080038d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
 80038e0:	4613      	mov	r3, r2
 80038e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d107      	bne.n	8003902 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038f2:	883b      	ldrh	r3, [r7, #0]
 80038f4:	0419      	lsls	r1, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003900:	e028      	b.n	8003954 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	4413      	add	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]
 8003914:	e00d      	b.n	8003932 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	3340      	adds	r3, #64	; 0x40
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4413      	add	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	3301      	adds	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	3b01      	subs	r3, #1
 8003938:	429a      	cmp	r2, r3
 800393a:	d3ec      	bcc.n	8003916 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800393c:	883b      	ldrh	r3, [r7, #0]
 800393e:	0418      	lsls	r0, r3, #16
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6819      	ldr	r1, [r3, #0]
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	3b01      	subs	r3, #1
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	4302      	orrs	r2, r0
 800394c:	3340      	adds	r3, #64	; 0x40
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	460b      	mov	r3, r1
 800396c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	887a      	ldrh	r2, [r7, #2]
 8003974:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b6:	f043 0303 	orr.w	r3, r3, #3
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0cc      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e0:	4b68      	ldr	r3, [pc, #416]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d90c      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b65      	ldr	r3, [pc, #404]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b8      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a52      	ldr	r2, [pc, #328]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	494d      	ldr	r1, [pc, #308]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d044      	beq.n	8003aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d119      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e06f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	4b3b      	ldr	r3, [pc, #236]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e067      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b37      	ldr	r3, [pc, #220]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4934      	ldr	r1, [pc, #208]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003abc:	f7fe f83a 	bl	8001b34 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7fe f836 	bl	8001b34 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e04f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aec:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d20c      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e032      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4916      	ldr	r1, [pc, #88]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b52:	f000 fb7f 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	490a      	ldr	r1, [pc, #40]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	5ccb      	ldrb	r3, [r1, r3]
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd ff9a 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	0800f8d4 	.word	0x0800f8d4
 8003b90:	20000000 	.word	0x20000000
 8003b94:	20000004 	.word	0x20000004

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000000 	.word	0x20000000

08003bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bb4:	f7ff fff0 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0a9b      	lsrs	r3, r3, #10
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4903      	ldr	r1, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	0800f8e4 	.word	0x0800f8e4

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bdc:	f7ff ffdc 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0b5b      	lsrs	r3, r3, #13
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	0800f8e4 	.word	0x0800f8e4

08003c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08c      	sub	sp, #48	; 0x30
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d010      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003c38:	4b6f      	ldr	r3, [pc, #444]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c3e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	496c      	ldr	r1, [pc, #432]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003c56:	2301      	movs	r3, #1
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d010      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003c66:	4b64      	ldr	r3, [pc, #400]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	4960      	ldr	r1, [pc, #384]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003c84:	2301      	movs	r3, #1
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c94:	4b58      	ldr	r3, [pc, #352]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4955      	ldr	r1, [pc, #340]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d017      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cd0:	4b49      	ldr	r3, [pc, #292]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cde:	4946      	ldr	r1, [pc, #280]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 808a 	beq.w	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a38      	ldr	r2, [pc, #224]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d2a:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a33      	ldr	r2, [pc, #204]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d36:	f7fd fefd 	bl	8001b34 <HAL_GetTick>
 8003d3a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd fef9 	bl	8001b34 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e278      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d50:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d5c:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d64:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02f      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d74:	6a3a      	ldr	r2, [r7, #32]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d028      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d7a:	4b1f      	ldr	r3, [pc, #124]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d82:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d84:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d96:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d114      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fd fec7 	bl	8001b34 <HAL_GetTick>
 8003da6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd fec3 	bl	8001b34 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e240      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ee      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd8:	d114      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dee:	4902      	ldr	r1, [pc, #8]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]
 8003df4:	e00c      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	42470e40 	.word	0x42470e40
 8003e04:	4b4a      	ldr	r3, [pc, #296]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4a49      	ldr	r2, [pc, #292]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e0e:	6093      	str	r3, [r2, #8]
 8003e10:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1c:	4944      	ldr	r1, [pc, #272]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003e34:	4b3f      	ldr	r3, [pc, #252]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e36:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003e44:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e52:	4937      	ldr	r1, [pc, #220]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e66:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e74:	492e      	ldr	r1, [pc, #184]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d011      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e88:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	4926      	ldr	r1, [pc, #152]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea6:	d101      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ebe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	491a      	ldr	r1, [pc, #104]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d011      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	4911      	ldr	r1, [pc, #68]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ef8:	d101      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003efa:	2301      	movs	r3, #1
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d005      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0c:	f040 80ff 	bne.w	800410e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f16:	f7fd fe0d 	bl	8001b34 <HAL_GetTick>
 8003f1a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f1c:	e00e      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f1e:	f7fd fe09 	bl	8001b34 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d907      	bls.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e188      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003f30:	40023800 	.word	0x40023800
 8003f34:	424711e0 	.word	0x424711e0
 8003f38:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f3c:	4b7e      	ldr	r3, [pc, #504]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1ea      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d009      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d028      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d124      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f70:	4b71      	ldr	r3, [pc, #452]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f82:	4b6d      	ldr	r3, [pc, #436]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f88:	0e1b      	lsrs	r3, r3, #24
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	019b      	lsls	r3, r3, #6
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	061b      	lsls	r3, r3, #24
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	071b      	lsls	r3, r3, #28
 8003fb2:	4961      	ldr	r1, [pc, #388]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d035      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fe4:	d130      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fe6:	4b54      	ldr	r3, [pc, #336]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ff8:	4b4f      	ldr	r3, [pc, #316]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffe:	0f1b      	lsrs	r3, r3, #28
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	019b      	lsls	r3, r3, #6
 8004010:	431a      	orrs	r2, r3
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	085b      	lsrs	r3, r3, #1
 8004016:	3b01      	subs	r3, #1
 8004018:	041b      	lsls	r3, r3, #16
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	061b      	lsls	r3, r3, #24
 8004022:	431a      	orrs	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	071b      	lsls	r3, r3, #28
 8004028:	4943      	ldr	r1, [pc, #268]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004030:	4b41      	ldr	r3, [pc, #260]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004036:	f023 021f 	bic.w	r2, r3, #31
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	3b01      	subs	r3, #1
 8004040:	493d      	ldr	r1, [pc, #244]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d029      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800405c:	d124      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800405e:	4b36      	ldr	r3, [pc, #216]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004064:	0c1b      	lsrs	r3, r3, #16
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	3301      	adds	r3, #1
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004070:	4b31      	ldr	r3, [pc, #196]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004076:	0f1b      	lsrs	r3, r3, #28
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	019b      	lsls	r3, r3, #6
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	3b01      	subs	r3, #1
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	431a      	orrs	r2, r3
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	061b      	lsls	r3, r3, #24
 800409a:	431a      	orrs	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	071b      	lsls	r3, r3, #28
 80040a0:	4925      	ldr	r1, [pc, #148]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d016      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	019b      	lsls	r3, r3, #6
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	3b01      	subs	r3, #1
 80040c8:	041b      	lsls	r3, r3, #16
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	071b      	lsls	r3, r3, #28
 80040da:	4917      	ldr	r1, [pc, #92]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040e2:	4b16      	ldr	r3, [pc, #88]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040e8:	f7fd fd24 	bl	8001b34 <HAL_GetTick>
 80040ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040f0:	f7fd fd20 	bl	8001b34 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e09f      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	2b01      	cmp	r3, #1
 8004112:	f040 8095 	bne.w	8004240 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800411c:	f7fd fd0a 	bl	8001b34 <HAL_GetTick>
 8004120:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004122:	e00f      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004124:	f7fd fd06 	bl	8001b34 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d908      	bls.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e085      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800
 800413c:	42470068 	.word	0x42470068
 8004140:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004144:	4b41      	ldr	r3, [pc, #260]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800414c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004150:	d0e8      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800416e:	2b00      	cmp	r3, #0
 8004170:	d02b      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	2b00      	cmp	r3, #0
 8004178:	d127      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800417a:	4b34      	ldr	r3, [pc, #208]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	0c1b      	lsrs	r3, r3, #16
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	3301      	adds	r3, #1
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	019b      	lsls	r3, r3, #6
 8004196:	431a      	orrs	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	3b01      	subs	r3, #1
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	061b      	lsls	r3, r3, #24
 80041a8:	4928      	ldr	r1, [pc, #160]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041b0:	4b26      	ldr	r3, [pc, #152]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	3b01      	subs	r3, #1
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	4922      	ldr	r1, [pc, #136]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01d      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041de:	d118      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041e0:	4b1a      	ldr	r3, [pc, #104]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	0e1b      	lsrs	r3, r3, #24
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	019b      	lsls	r3, r3, #6
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	3b01      	subs	r3, #1
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	431a      	orrs	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	4910      	ldr	r1, [pc, #64]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004218:	f7fd fc8c 	bl	8001b34 <HAL_GetTick>
 800421c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004220:	f7fd fc88 	bl	8001b34 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e007      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800423a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423e:	d1ef      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3730      	adds	r7, #48	; 0x30
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
 8004250:	42470070 	.word	0x42470070

08004254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004258:	b088      	sub	sp, #32
 800425a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004270:	4bce      	ldr	r3, [pc, #824]	; (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	2b0c      	cmp	r3, #12
 800427a:	f200 818d 	bhi.w	8004598 <HAL_RCC_GetSysClockFreq+0x344>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <HAL_RCC_GetSysClockFreq+0x30>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	080042b9 	.word	0x080042b9
 8004288:	08004599 	.word	0x08004599
 800428c:	08004599 	.word	0x08004599
 8004290:	08004599 	.word	0x08004599
 8004294:	080042bf 	.word	0x080042bf
 8004298:	08004599 	.word	0x08004599
 800429c:	08004599 	.word	0x08004599
 80042a0:	08004599 	.word	0x08004599
 80042a4:	080042c5 	.word	0x080042c5
 80042a8:	08004599 	.word	0x08004599
 80042ac:	08004599 	.word	0x08004599
 80042b0:	08004599 	.word	0x08004599
 80042b4:	08004439 	.word	0x08004439
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4bbd      	ldr	r3, [pc, #756]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80042ba:	61bb      	str	r3, [r7, #24]
       break;
 80042bc:	e16f      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042be:	4bbd      	ldr	r3, [pc, #756]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x360>)
 80042c0:	61bb      	str	r3, [r7, #24]
      break;
 80042c2:	e16c      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c4:	4bb9      	ldr	r3, [pc, #740]	; (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042cc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ce:	4bb7      	ldr	r3, [pc, #732]	; (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d053      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042da:	4bb4      	ldr	r3, [pc, #720]	; (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	099b      	lsrs	r3, r3, #6
 80042e0:	461a      	mov	r2, r3
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	ea02 0400 	and.w	r4, r2, r0
 80042f2:	603c      	str	r4, [r7, #0]
 80042f4:	400b      	ands	r3, r1
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042fc:	4620      	mov	r0, r4
 80042fe:	4629      	mov	r1, r5
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	014b      	lsls	r3, r1, #5
 800430a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800430e:	0142      	lsls	r2, r0, #5
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	4623      	mov	r3, r4
 8004316:	1ac0      	subs	r0, r0, r3
 8004318:	462b      	mov	r3, r5
 800431a:	eb61 0103 	sbc.w	r1, r1, r3
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	018b      	lsls	r3, r1, #6
 8004328:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800432c:	0182      	lsls	r2, r0, #6
 800432e:	1a12      	subs	r2, r2, r0
 8004330:	eb63 0301 	sbc.w	r3, r3, r1
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f04f 0100 	mov.w	r1, #0
 800433c:	00d9      	lsls	r1, r3, #3
 800433e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004342:	00d0      	lsls	r0, r2, #3
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4621      	mov	r1, r4
 800434a:	1852      	adds	r2, r2, r1
 800434c:	4629      	mov	r1, r5
 800434e:	eb43 0101 	adc.w	r1, r3, r1
 8004352:	460b      	mov	r3, r1
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	0259      	lsls	r1, r3, #9
 800435e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004362:	0250      	lsls	r0, r2, #9
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	461a      	mov	r2, r3
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	f7fb ff4e 	bl	8000214 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e04c      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004382:	4b8a      	ldr	r3, [pc, #552]	; (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	099b      	lsrs	r3, r3, #6
 8004388:	461a      	mov	r2, r3
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	ea02 0a00 	and.w	sl, r2, r0
 800439a:	ea03 0b01 	and.w	fp, r3, r1
 800439e:	4650      	mov	r0, sl
 80043a0:	4659      	mov	r1, fp
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	014b      	lsls	r3, r1, #5
 80043ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043b0:	0142      	lsls	r2, r0, #5
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	ebb0 000a 	subs.w	r0, r0, sl
 80043ba:	eb61 010b 	sbc.w	r1, r1, fp
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	018b      	lsls	r3, r1, #6
 80043c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043cc:	0182      	lsls	r2, r0, #6
 80043ce:	1a12      	subs	r2, r2, r0
 80043d0:	eb63 0301 	sbc.w	r3, r3, r1
 80043d4:	f04f 0000 	mov.w	r0, #0
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	00d9      	lsls	r1, r3, #3
 80043de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043e2:	00d0      	lsls	r0, r2, #3
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	eb12 020a 	adds.w	r2, r2, sl
 80043ec:	eb43 030b 	adc.w	r3, r3, fp
 80043f0:	f04f 0000 	mov.w	r0, #0
 80043f4:	f04f 0100 	mov.w	r1, #0
 80043f8:	0299      	lsls	r1, r3, #10
 80043fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043fe:	0290      	lsls	r0, r2, #10
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	461a      	mov	r2, r3
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	f7fb ff00 	bl	8000214 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4613      	mov	r3, r2
 800441a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800441c:	4b63      	ldr	r3, [pc, #396]	; (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	3301      	adds	r3, #1
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	61bb      	str	r3, [r7, #24]
      break;
 8004436:	e0b2      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004438:	4b5c      	ldr	r3, [pc, #368]	; (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004440:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004442:	4b5a      	ldr	r3, [pc, #360]	; (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d04d      	beq.n	80044ea <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444e:	4b57      	ldr	r3, [pc, #348]	; (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	099b      	lsrs	r3, r3, #6
 8004454:	461a      	mov	r2, r3
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800445e:	f04f 0100 	mov.w	r1, #0
 8004462:	ea02 0800 	and.w	r8, r2, r0
 8004466:	ea03 0901 	and.w	r9, r3, r1
 800446a:	4640      	mov	r0, r8
 800446c:	4649      	mov	r1, r9
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	014b      	lsls	r3, r1, #5
 8004478:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800447c:	0142      	lsls	r2, r0, #5
 800447e:	4610      	mov	r0, r2
 8004480:	4619      	mov	r1, r3
 8004482:	ebb0 0008 	subs.w	r0, r0, r8
 8004486:	eb61 0109 	sbc.w	r1, r1, r9
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	018b      	lsls	r3, r1, #6
 8004494:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004498:	0182      	lsls	r2, r0, #6
 800449a:	1a12      	subs	r2, r2, r0
 800449c:	eb63 0301 	sbc.w	r3, r3, r1
 80044a0:	f04f 0000 	mov.w	r0, #0
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	00d9      	lsls	r1, r3, #3
 80044aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044ae:	00d0      	lsls	r0, r2, #3
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	eb12 0208 	adds.w	r2, r2, r8
 80044b8:	eb43 0309 	adc.w	r3, r3, r9
 80044bc:	f04f 0000 	mov.w	r0, #0
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	0259      	lsls	r1, r3, #9
 80044c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044ca:	0250      	lsls	r0, r2, #9
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4610      	mov	r0, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	461a      	mov	r2, r3
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	f7fb fe9a 	bl	8000214 <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4613      	mov	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e04a      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ea:	4b30      	ldr	r3, [pc, #192]	; (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	099b      	lsrs	r3, r3, #6
 80044f0:	461a      	mov	r2, r3
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044fa:	f04f 0100 	mov.w	r1, #0
 80044fe:	ea02 0400 	and.w	r4, r2, r0
 8004502:	ea03 0501 	and.w	r5, r3, r1
 8004506:	4620      	mov	r0, r4
 8004508:	4629      	mov	r1, r5
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	014b      	lsls	r3, r1, #5
 8004514:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004518:	0142      	lsls	r2, r0, #5
 800451a:	4610      	mov	r0, r2
 800451c:	4619      	mov	r1, r3
 800451e:	1b00      	subs	r0, r0, r4
 8004520:	eb61 0105 	sbc.w	r1, r1, r5
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	018b      	lsls	r3, r1, #6
 800452e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004532:	0182      	lsls	r2, r0, #6
 8004534:	1a12      	subs	r2, r2, r0
 8004536:	eb63 0301 	sbc.w	r3, r3, r1
 800453a:	f04f 0000 	mov.w	r0, #0
 800453e:	f04f 0100 	mov.w	r1, #0
 8004542:	00d9      	lsls	r1, r3, #3
 8004544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004548:	00d0      	lsls	r0, r2, #3
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	1912      	adds	r2, r2, r4
 8004550:	eb45 0303 	adc.w	r3, r5, r3
 8004554:	f04f 0000 	mov.w	r0, #0
 8004558:	f04f 0100 	mov.w	r1, #0
 800455c:	0299      	lsls	r1, r3, #10
 800455e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004562:	0290      	lsls	r0, r2, #10
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	461a      	mov	r2, r3
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	f7fb fe4e 	bl	8000214 <__aeabi_uldivmod>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4613      	mov	r3, r2
 800457e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	0f1b      	lsrs	r3, r3, #28
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	61bb      	str	r3, [r7, #24]
      break;
 8004596:	e002      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800459a:	61bb      	str	r3, [r7, #24]
      break;
 800459c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459e:	69bb      	ldr	r3, [r7, #24]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800
 80045b0:	00f42400 	.word	0x00f42400
 80045b4:	007a1200 	.word	0x007a1200

080045b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e28d      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8083 	beq.w	80046de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80045d8:	4b94      	ldr	r3, [pc, #592]	; (800482c <HAL_RCC_OscConfig+0x274>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d019      	beq.n	8004618 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045e4:	4b91      	ldr	r3, [pc, #580]	; (800482c <HAL_RCC_OscConfig+0x274>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d106      	bne.n	80045fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045f0:	4b8e      	ldr	r3, [pc, #568]	; (800482c <HAL_RCC_OscConfig+0x274>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045fc:	d00c      	beq.n	8004618 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fe:	4b8b      	ldr	r3, [pc, #556]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004606:	2b0c      	cmp	r3, #12
 8004608:	d112      	bne.n	8004630 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800460a:	4b88      	ldr	r3, [pc, #544]	; (800482c <HAL_RCC_OscConfig+0x274>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004616:	d10b      	bne.n	8004630 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004618:	4b84      	ldr	r3, [pc, #528]	; (800482c <HAL_RCC_OscConfig+0x274>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d05b      	beq.n	80046dc <HAL_RCC_OscConfig+0x124>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d157      	bne.n	80046dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e25a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004638:	d106      	bne.n	8004648 <HAL_RCC_OscConfig+0x90>
 800463a:	4b7c      	ldr	r3, [pc, #496]	; (800482c <HAL_RCC_OscConfig+0x274>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a7b      	ldr	r2, [pc, #492]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e01d      	b.n	8004684 <HAL_RCC_OscConfig+0xcc>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004650:	d10c      	bne.n	800466c <HAL_RCC_OscConfig+0xb4>
 8004652:	4b76      	ldr	r3, [pc, #472]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a75      	ldr	r2, [pc, #468]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	4b73      	ldr	r3, [pc, #460]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a72      	ldr	r2, [pc, #456]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e00b      	b.n	8004684 <HAL_RCC_OscConfig+0xcc>
 800466c:	4b6f      	ldr	r3, [pc, #444]	; (800482c <HAL_RCC_OscConfig+0x274>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a6e      	ldr	r2, [pc, #440]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b6c      	ldr	r3, [pc, #432]	; (800482c <HAL_RCC_OscConfig+0x274>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a6b      	ldr	r2, [pc, #428]	; (800482c <HAL_RCC_OscConfig+0x274>)
 800467e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d013      	beq.n	80046b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fd fa52 	bl	8001b34 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004694:	f7fd fa4e 	bl	8001b34 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	; 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e21f      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4b61      	ldr	r3, [pc, #388]	; (800482c <HAL_RCC_OscConfig+0x274>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0xdc>
 80046b2:	e014      	b.n	80046de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fd fa3e 	bl	8001b34 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046bc:	f7fd fa3a 	bl	8001b34 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	; 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e20b      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ce:	4b57      	ldr	r3, [pc, #348]	; (800482c <HAL_RCC_OscConfig+0x274>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0x104>
 80046da:	e000      	b.n	80046de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d06f      	beq.n	80047ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046ea:	4b50      	ldr	r3, [pc, #320]	; (800482c <HAL_RCC_OscConfig+0x274>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d017      	beq.n	8004726 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046f6:	4b4d      	ldr	r3, [pc, #308]	; (800482c <HAL_RCC_OscConfig+0x274>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d105      	bne.n	800470e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004702:	4b4a      	ldr	r3, [pc, #296]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800470e:	4b47      	ldr	r3, [pc, #284]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004716:	2b0c      	cmp	r3, #12
 8004718:	d11c      	bne.n	8004754 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471a:	4b44      	ldr	r3, [pc, #272]	; (800482c <HAL_RCC_OscConfig+0x274>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d116      	bne.n	8004754 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004726:	4b41      	ldr	r3, [pc, #260]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <HAL_RCC_OscConfig+0x186>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d001      	beq.n	800473e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e1d3      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473e:	4b3b      	ldr	r3, [pc, #236]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4937      	ldr	r1, [pc, #220]	; (800482c <HAL_RCC_OscConfig+0x274>)
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004752:	e03a      	b.n	80047ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d020      	beq.n	800479e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800475c:	4b34      	ldr	r3, [pc, #208]	; (8004830 <HAL_RCC_OscConfig+0x278>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004762:	f7fd f9e7 	bl	8001b34 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476a:	f7fd f9e3 	bl	8001b34 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e1b4      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <HAL_RCC_OscConfig+0x274>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004788:	4b28      	ldr	r3, [pc, #160]	; (800482c <HAL_RCC_OscConfig+0x274>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	4925      	ldr	r1, [pc, #148]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004798:	4313      	orrs	r3, r2
 800479a:	600b      	str	r3, [r1, #0]
 800479c:	e015      	b.n	80047ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <HAL_RCC_OscConfig+0x278>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fd f9c6 	bl	8001b34 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ac:	f7fd f9c2 	bl	8001b34 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e193      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047be:	4b1b      	ldr	r3, [pc, #108]	; (800482c <HAL_RCC_OscConfig+0x274>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d036      	beq.n	8004844 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d016      	beq.n	800480c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047de:	4b15      	ldr	r3, [pc, #84]	; (8004834 <HAL_RCC_OscConfig+0x27c>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e4:	f7fd f9a6 	bl	8001b34 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ec:	f7fd f9a2 	bl	8001b34 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e173      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fe:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_RCC_OscConfig+0x274>)
 8004800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x234>
 800480a:	e01b      	b.n	8004844 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800480c:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_RCC_OscConfig+0x27c>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004812:	f7fd f98f 	bl	8001b34 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004818:	e00e      	b.n	8004838 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481a:	f7fd f98b 	bl	8001b34 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d907      	bls.n	8004838 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e15c      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
 800482c:	40023800 	.word	0x40023800
 8004830:	42470000 	.word	0x42470000
 8004834:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004838:	4b8a      	ldr	r3, [pc, #552]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 800483a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ea      	bne.n	800481a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8097 	beq.w	8004980 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004852:	2300      	movs	r3, #0
 8004854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004856:	4b83      	ldr	r3, [pc, #524]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10f      	bne.n	8004882 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	4b7f      	ldr	r3, [pc, #508]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	4a7e      	ldr	r2, [pc, #504]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 800486c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004870:	6413      	str	r3, [r2, #64]	; 0x40
 8004872:	4b7c      	ldr	r3, [pc, #496]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004882:	4b79      	ldr	r3, [pc, #484]	; (8004a68 <HAL_RCC_OscConfig+0x4b0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d118      	bne.n	80048c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800488e:	4b76      	ldr	r3, [pc, #472]	; (8004a68 <HAL_RCC_OscConfig+0x4b0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a75      	ldr	r2, [pc, #468]	; (8004a68 <HAL_RCC_OscConfig+0x4b0>)
 8004894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800489a:	f7fd f94b 	bl	8001b34 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a2:	f7fd f947 	bl	8001b34 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e118      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b4:	4b6c      	ldr	r3, [pc, #432]	; (8004a68 <HAL_RCC_OscConfig+0x4b0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d106      	bne.n	80048d6 <HAL_RCC_OscConfig+0x31e>
 80048c8:	4b66      	ldr	r3, [pc, #408]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	4a65      	ldr	r2, [pc, #404]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6713      	str	r3, [r2, #112]	; 0x70
 80048d4:	e01c      	b.n	8004910 <HAL_RCC_OscConfig+0x358>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d10c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x340>
 80048de:	4b61      	ldr	r3, [pc, #388]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	4a60      	ldr	r2, [pc, #384]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 80048e4:	f043 0304 	orr.w	r3, r3, #4
 80048e8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ea:	4b5e      	ldr	r3, [pc, #376]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a5d      	ldr	r2, [pc, #372]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70
 80048f6:	e00b      	b.n	8004910 <HAL_RCC_OscConfig+0x358>
 80048f8:	4b5a      	ldr	r3, [pc, #360]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fc:	4a59      	ldr	r2, [pc, #356]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	6713      	str	r3, [r2, #112]	; 0x70
 8004904:	4b57      	ldr	r3, [pc, #348]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	4a56      	ldr	r2, [pc, #344]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 800490a:	f023 0304 	bic.w	r3, r3, #4
 800490e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d015      	beq.n	8004944 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004918:	f7fd f90c 	bl	8001b34 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491e:	e00a      	b.n	8004936 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004920:	f7fd f908 	bl	8001b34 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f241 3288 	movw	r2, #5000	; 0x1388
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e0d7      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004936:	4b4b      	ldr	r3, [pc, #300]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0ee      	beq.n	8004920 <HAL_RCC_OscConfig+0x368>
 8004942:	e014      	b.n	800496e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fd f8f6 	bl	8001b34 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800494a:	e00a      	b.n	8004962 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800494c:	f7fd f8f2 	bl	8001b34 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	; 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e0c1      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004962:	4b40      	ldr	r3, [pc, #256]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1ee      	bne.n	800494c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800496e:	7dfb      	ldrb	r3, [r7, #23]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d105      	bne.n	8004980 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004974:	4b3b      	ldr	r3, [pc, #236]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	4a3a      	ldr	r2, [pc, #232]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 800497a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800497e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80ad 	beq.w	8004ae4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800498a:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	2b08      	cmp	r3, #8
 8004994:	d060      	beq.n	8004a58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d145      	bne.n	8004a2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499e:	4b33      	ldr	r3, [pc, #204]	; (8004a6c <HAL_RCC_OscConfig+0x4b4>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fd f8c6 	bl	8001b34 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fd f8c2 	bl	8001b34 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e093      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049be:	4b29      	ldr	r3, [pc, #164]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	019b      	lsls	r3, r3, #6
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	3b01      	subs	r3, #1
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	071b      	lsls	r3, r3, #28
 80049f6:	491b      	ldr	r1, [pc, #108]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049fc:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <HAL_RCC_OscConfig+0x4b4>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fd f897 	bl	8001b34 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0a:	f7fd f893 	bl	8001b34 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e064      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x452>
 8004a28:	e05c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2a:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <HAL_RCC_OscConfig+0x4b4>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fd f880 	bl	8001b34 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fd f87c 	bl	8001b34 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e04d      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_RCC_OscConfig+0x4ac>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x480>
 8004a56:	e045      	b.n	8004ae4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e040      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
 8004a64:	40023800 	.word	0x40023800
 8004a68:	40007000 	.word	0x40007000
 8004a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a70:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <HAL_RCC_OscConfig+0x538>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d030      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d129      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d122      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d119      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d10f      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d107      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40023800 	.word	0x40023800

08004af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e07b      	b.n	8004bfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d108      	bne.n	8004b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b16:	d009      	beq.n	8004b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	61da      	str	r2, [r3, #28]
 8004b1e:	e005      	b.n	8004b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc fe68 	bl	800181c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb0:	ea42 0103 	orr.w	r1, r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	f003 0104 	and.w	r1, r3, #4
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f003 0210 	and.w	r2, r3, #16
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b088      	sub	sp, #32
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	603b      	str	r3, [r7, #0]
 8004c12:	4613      	mov	r3, r2
 8004c14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_SPI_Transmit+0x22>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e126      	b.n	8004e76 <HAL_SPI_Transmit+0x270>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c30:	f7fc ff80 	bl	8001b34 <HAL_GetTick>
 8004c34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
 8004c48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c4a:	e10b      	b.n	8004e64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Transmit+0x52>
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c5c:	e102      	b.n	8004e64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2203      	movs	r2, #3
 8004c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	88fa      	ldrh	r2, [r7, #6]
 8004c76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca4:	d10f      	bne.n	8004cc6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d007      	beq.n	8004ce4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cec:	d14b      	bne.n	8004d86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_SPI_Transmit+0xf6>
 8004cf6:	8afb      	ldrh	r3, [r7, #22]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d13e      	bne.n	8004d7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d00:	881a      	ldrh	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	1c9a      	adds	r2, r3, #2
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d20:	e02b      	b.n	8004d7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d112      	bne.n	8004d56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d54:	e011      	b.n	8004d7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d56:	f7fc feed 	bl	8001b34 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d803      	bhi.n	8004d6e <HAL_SPI_Transmit+0x168>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d102      	bne.n	8004d74 <HAL_SPI_Transmit+0x16e>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d78:	e074      	b.n	8004e64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1ce      	bne.n	8004d22 <HAL_SPI_Transmit+0x11c>
 8004d84:	e04c      	b.n	8004e20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_Transmit+0x18e>
 8004d8e:	8afb      	ldrh	r3, [r7, #22]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d140      	bne.n	8004e16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	7812      	ldrb	r2, [r2, #0]
 8004da0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004dba:	e02c      	b.n	8004e16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d113      	bne.n	8004df2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	7812      	ldrb	r2, [r2, #0]
 8004dd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	86da      	strh	r2, [r3, #54]	; 0x36
 8004df0:	e011      	b.n	8004e16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df2:	f7fc fe9f 	bl	8001b34 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d803      	bhi.n	8004e0a <HAL_SPI_Transmit+0x204>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_Transmit+0x20a>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e14:	e026      	b.n	8004e64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1cd      	bne.n	8004dbc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fbcb 	bl	80055c0 <SPI_EndRxTxTransaction>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10a      	bne.n	8004e54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e000      	b.n	8004e64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b088      	sub	sp, #32
 8004e82:	af02      	add	r7, sp, #8
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9a:	d112      	bne.n	8004ec2 <HAL_SPI_Receive+0x44>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10e      	bne.n	8004ec2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004eac:	88fa      	ldrh	r2, [r7, #6]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f8f1 	bl	80050a0 <HAL_SPI_TransmitReceive>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	e0ea      	b.n	8005098 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_SPI_Receive+0x52>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e0e3      	b.n	8005098 <HAL_SPI_Receive+0x21a>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed8:	f7fc fe2c 	bl	8001b34 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d002      	beq.n	8004ef0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
 8004eec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eee:	e0ca      	b.n	8005086 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_SPI_Receive+0x7e>
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f00:	e0c1      	b.n	8005086 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2204      	movs	r2, #4
 8004f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	88fa      	ldrh	r2, [r7, #6]
 8004f1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	88fa      	ldrh	r2, [r7, #6]
 8004f20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f48:	d10f      	bne.n	8004f6a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d007      	beq.n	8004f88 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d162      	bne.n	8005056 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f90:	e02e      	b.n	8004ff0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d115      	bne.n	8004fcc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f103 020c 	add.w	r2, r3, #12
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fca:	e011      	b.n	8004ff0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fcc:	f7fc fdb2 	bl	8001b34 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d803      	bhi.n	8004fe4 <HAL_SPI_Receive+0x166>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d102      	bne.n	8004fea <HAL_SPI_Receive+0x16c>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fee:	e04a      	b.n	8005086 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1cb      	bne.n	8004f92 <HAL_SPI_Receive+0x114>
 8004ffa:	e031      	b.n	8005060 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b01      	cmp	r3, #1
 8005008:	d113      	bne.n	8005032 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	b292      	uxth	r2, r2
 8005016:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	1c9a      	adds	r2, r3, #2
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005030:	e011      	b.n	8005056 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005032:	f7fc fd7f 	bl	8001b34 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d803      	bhi.n	800504a <HAL_SPI_Receive+0x1cc>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d102      	bne.n	8005050 <HAL_SPI_Receive+0x1d2>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005054:	e017      	b.n	8005086 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1cd      	bne.n	8004ffc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fa45 	bl	80054f4 <SPI_EndRxTransaction>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
 8005082:	e000      	b.n	8005086 <HAL_SPI_Receive+0x208>
  }

error :
 8005084:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005096:	7dfb      	ldrb	r3, [r7, #23]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08c      	sub	sp, #48	; 0x30
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050ae:	2301      	movs	r3, #1
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_SPI_TransmitReceive+0x26>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e18a      	b.n	80053dc <HAL_SPI_TransmitReceive+0x33c>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050ce:	f7fc fd31 	bl	8001b34 <HAL_GetTick>
 80050d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050e4:	887b      	ldrh	r3, [r7, #2]
 80050e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d00f      	beq.n	8005110 <HAL_SPI_TransmitReceive+0x70>
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050f6:	d107      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x68>
 8005100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005104:	2b04      	cmp	r3, #4
 8005106:	d003      	beq.n	8005110 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005108:	2302      	movs	r3, #2
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800510e:	e15b      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_SPI_TransmitReceive+0x82>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <HAL_SPI_TransmitReceive+0x82>
 800511c:	887b      	ldrh	r3, [r7, #2]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005128:	e14e      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b04      	cmp	r3, #4
 8005134:	d003      	beq.n	800513e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2205      	movs	r2, #5
 800513a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	887a      	ldrh	r2, [r7, #2]
 800514e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	887a      	ldrh	r2, [r7, #2]
 8005154:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	887a      	ldrh	r2, [r7, #2]
 8005160:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	887a      	ldrh	r2, [r7, #2]
 8005166:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	d007      	beq.n	8005192 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005190:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519a:	d178      	bne.n	800528e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x10a>
 80051a4:	8b7b      	ldrh	r3, [r7, #26]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d166      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	881a      	ldrh	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	1c9a      	adds	r2, r3, #2
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ce:	e053      	b.n	8005278 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d11b      	bne.n	8005216 <HAL_SPI_TransmitReceive+0x176>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d016      	beq.n	8005216 <HAL_SPI_TransmitReceive+0x176>
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d113      	bne.n	8005216 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	881a      	ldrh	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	1c9a      	adds	r2, r3, #2
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b01      	cmp	r3, #1
 8005222:	d119      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x1b8>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d014      	beq.n	8005258 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	b292      	uxth	r2, r2
 800523a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	1c9a      	adds	r2, r3, #2
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005254:	2301      	movs	r3, #1
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005258:	f7fc fc6c 	bl	8001b34 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005264:	429a      	cmp	r2, r3
 8005266:	d807      	bhi.n	8005278 <HAL_SPI_TransmitReceive+0x1d8>
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d003      	beq.n	8005278 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005276:	e0a7      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1a6      	bne.n	80051d0 <HAL_SPI_TransmitReceive+0x130>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1a1      	bne.n	80051d0 <HAL_SPI_TransmitReceive+0x130>
 800528c:	e07c      	b.n	8005388 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_SPI_TransmitReceive+0x1fc>
 8005296:	8b7b      	ldrh	r3, [r7, #26]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d16b      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	330c      	adds	r3, #12
 80052a6:	7812      	ldrb	r2, [r2, #0]
 80052a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052c2:	e057      	b.n	8005374 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d11c      	bne.n	800530c <HAL_SPI_TransmitReceive+0x26c>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d017      	beq.n	800530c <HAL_SPI_TransmitReceive+0x26c>
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d114      	bne.n	800530c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	7812      	ldrb	r2, [r2, #0]
 80052ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	d119      	bne.n	800534e <HAL_SPI_TransmitReceive+0x2ae>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d014      	beq.n	800534e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800534a:	2301      	movs	r3, #1
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800534e:	f7fc fbf1 	bl	8001b34 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800535a:	429a      	cmp	r2, r3
 800535c:	d803      	bhi.n	8005366 <HAL_SPI_TransmitReceive+0x2c6>
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005364:	d102      	bne.n	800536c <HAL_SPI_TransmitReceive+0x2cc>
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005372:	e029      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1a2      	bne.n	80052c4 <HAL_SPI_TransmitReceive+0x224>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d19d      	bne.n	80052c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f917 	bl	80055c0 <SPI_EndRxTxTransaction>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d006      	beq.n	80053a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053a4:	e010      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	e000      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80053c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3730      	adds	r7, #48	; 0x30
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053f4:	f7fc fb9e 	bl	8001b34 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	1a9b      	subs	r3, r3, r2
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	4413      	add	r3, r2
 8005402:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005404:	f7fc fb96 	bl	8001b34 <HAL_GetTick>
 8005408:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800540a:	4b39      	ldr	r3, [pc, #228]	; (80054f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	015b      	lsls	r3, r3, #5
 8005410:	0d1b      	lsrs	r3, r3, #20
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	fb02 f303 	mul.w	r3, r2, r3
 8005418:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800541a:	e054      	b.n	80054c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d050      	beq.n	80054c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005424:	f7fc fb86 	bl	8001b34 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	69fa      	ldr	r2, [r7, #28]
 8005430:	429a      	cmp	r2, r3
 8005432:	d902      	bls.n	800543a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d13d      	bne.n	80054b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005448:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005452:	d111      	bne.n	8005478 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545c:	d004      	beq.n	8005468 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005466:	d107      	bne.n	8005478 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005476:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005480:	d10f      	bne.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e017      	b.n	80054e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4013      	ands	r3, r2
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d19b      	bne.n	800541c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3720      	adds	r7, #32
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000000 	.word	0x20000000

080054f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005508:	d111      	bne.n	800552e <SPI_EndRxTransaction+0x3a>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005512:	d004      	beq.n	800551e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551c:	d107      	bne.n	800552e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800552c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005536:	d12a      	bne.n	800558e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005540:	d012      	beq.n	8005568 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2200      	movs	r2, #0
 800554a:	2180      	movs	r1, #128	; 0x80
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff ff49 	bl	80053e4 <SPI_WaitFlagStateUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d02d      	beq.n	80055b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e026      	b.n	80055b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	2101      	movs	r1, #1
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff ff36 	bl	80053e4 <SPI_WaitFlagStateUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01a      	beq.n	80055b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005582:	f043 0220 	orr.w	r2, r3, #32
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e013      	b.n	80055b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2200      	movs	r2, #0
 8005596:	2101      	movs	r1, #1
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f7ff ff23 	bl	80053e4 <SPI_WaitFlagStateUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	f043 0220 	orr.w	r2, r3, #32
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e000      	b.n	80055b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055cc:	4b1b      	ldr	r3, [pc, #108]	; (800563c <SPI_EndRxTxTransaction+0x7c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a1b      	ldr	r2, [pc, #108]	; (8005640 <SPI_EndRxTxTransaction+0x80>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	0d5b      	lsrs	r3, r3, #21
 80055d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055dc:	fb02 f303 	mul.w	r3, r2, r3
 80055e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ea:	d112      	bne.n	8005612 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2200      	movs	r2, #0
 80055f4:	2180      	movs	r1, #128	; 0x80
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff fef4 	bl	80053e4 <SPI_WaitFlagStateUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d016      	beq.n	8005630 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	f043 0220 	orr.w	r2, r3, #32
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e00f      	b.n	8005632 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	3b01      	subs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d0f2      	beq.n	8005612 <SPI_EndRxTxTransaction+0x52>
 800562c:	e000      	b.n	8005630 <SPI_EndRxTxTransaction+0x70>
        break;
 800562e:	bf00      	nop
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000000 	.word	0x20000000
 8005640:	165e9f81 	.word	0x165e9f81

08005644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e03f      	b.n	80056d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fc f91e 	bl	80018ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2224      	movs	r2, #36	; 0x24
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f9a7 	bl	80059dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800569c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695a      	ldr	r2, [r3, #20]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b08a      	sub	sp, #40	; 0x28
 80056e2:	af02      	add	r7, sp, #8
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	603b      	str	r3, [r7, #0]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d17c      	bne.n	80057f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_UART_Transmit+0x2c>
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e075      	b.n	80057fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_UART_Transmit+0x3e>
 8005718:	2302      	movs	r3, #2
 800571a:	e06e      	b.n	80057fa <HAL_UART_Transmit+0x11c>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2221      	movs	r2, #33	; 0x21
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005732:	f7fc f9ff 	bl	8001b34 <HAL_GetTick>
 8005736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	88fa      	ldrh	r2, [r7, #6]
 8005742:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574c:	d108      	bne.n	8005760 <HAL_UART_Transmit+0x82>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d104      	bne.n	8005760 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	61bb      	str	r3, [r7, #24]
 800575e:	e003      	b.n	8005768 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005770:	e02a      	b.n	80057c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2200      	movs	r2, #0
 800577a:	2180      	movs	r1, #128	; 0x80
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f8e2 	bl	8005946 <UART_WaitOnFlagUntilTimeout>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e036      	b.n	80057fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	3302      	adds	r3, #2
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	e007      	b.n	80057ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	3301      	adds	r3, #1
 80057b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1cf      	bne.n	8005772 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2200      	movs	r2, #0
 80057da:	2140      	movs	r1, #64	; 0x40
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f8b2 	bl	8005946 <UART_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e006      	b.n	80057fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e000      	b.n	80057fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057f8:	2302      	movs	r3, #2
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b08a      	sub	sp, #40	; 0x28
 8005806:	af02      	add	r7, sp, #8
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	603b      	str	r3, [r7, #0]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b20      	cmp	r3, #32
 8005820:	f040 808c 	bne.w	800593c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <HAL_UART_Receive+0x2e>
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e084      	b.n	800593e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_UART_Receive+0x40>
 800583e:	2302      	movs	r3, #2
 8005840:	e07d      	b.n	800593e <HAL_UART_Receive+0x13c>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2222      	movs	r2, #34	; 0x22
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800585e:	f7fc f969 	bl	8001b34 <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005878:	d108      	bne.n	800588c <HAL_UART_Receive+0x8a>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d104      	bne.n	800588c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e003      	b.n	8005894 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005890:	2300      	movs	r3, #0
 8005892:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800589c:	e043      	b.n	8005926 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2200      	movs	r2, #0
 80058a6:	2120      	movs	r1, #32
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f84c 	bl	8005946 <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e042      	b.n	800593e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10c      	bne.n	80058d8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	3302      	adds	r3, #2
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	e01f      	b.n	8005918 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e0:	d007      	beq.n	80058f2 <HAL_UART_Receive+0xf0>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <HAL_UART_Receive+0xfe>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e008      	b.n	8005912 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800590c:	b2da      	uxtb	r2, r3
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	3301      	adds	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1b6      	bne.n	800589e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	e000      	b.n	800593e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800593c:	2302      	movs	r3, #2
  }
}
 800593e:	4618      	mov	r0, r3
 8005940:	3720      	adds	r7, #32
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005956:	e02c      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595e:	d028      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0x30>
 8005966:	f7fc f8e5 	bl	8001b34 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	429a      	cmp	r2, r3
 8005974:	d21d      	bcs.n	80059b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005984:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e00f      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4013      	ands	r3, r2
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	bf0c      	ite	eq
 80059c2:	2301      	moveq	r3, #1
 80059c4:	2300      	movne	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d0c3      	beq.n	8005958 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e0:	b09f      	sub	sp, #124	; 0x7c
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f2:	68d9      	ldr	r1, [r3, #12]
 80059f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	ea40 0301 	orr.w	r3, r0, r1
 80059fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a20:	f021 010c 	bic.w	r1, r1, #12
 8005a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3a:	6999      	ldr	r1, [r3, #24]
 8005a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	ea40 0301 	orr.w	r3, r0, r1
 8005a44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	4bc5      	ldr	r3, [pc, #788]	; (8005d60 <UART_SetConfig+0x384>)
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d004      	beq.n	8005a5a <UART_SetConfig+0x7e>
 8005a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	4bc3      	ldr	r3, [pc, #780]	; (8005d64 <UART_SetConfig+0x388>)
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d103      	bne.n	8005a62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a5a:	f7fe f8bd 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 8005a5e:	6778      	str	r0, [r7, #116]	; 0x74
 8005a60:	e002      	b.n	8005a68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a62:	f7fe f8a5 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 8005a66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a70:	f040 80b6 	bne.w	8005be0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a76:	461c      	mov	r4, r3
 8005a78:	f04f 0500 	mov.w	r5, #0
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	462b      	mov	r3, r5
 8005a80:	1891      	adds	r1, r2, r2
 8005a82:	6439      	str	r1, [r7, #64]	; 0x40
 8005a84:	415b      	adcs	r3, r3
 8005a86:	647b      	str	r3, [r7, #68]	; 0x44
 8005a88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a8c:	1912      	adds	r2, r2, r4
 8005a8e:	eb45 0303 	adc.w	r3, r5, r3
 8005a92:	f04f 0000 	mov.w	r0, #0
 8005a96:	f04f 0100 	mov.w	r1, #0
 8005a9a:	00d9      	lsls	r1, r3, #3
 8005a9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005aa0:	00d0      	lsls	r0, r2, #3
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	1911      	adds	r1, r2, r4
 8005aa8:	6639      	str	r1, [r7, #96]	; 0x60
 8005aaa:	416b      	adcs	r3, r5
 8005aac:	667b      	str	r3, [r7, #100]	; 0x64
 8005aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	1891      	adds	r1, r2, r2
 8005aba:	63b9      	str	r1, [r7, #56]	; 0x38
 8005abc:	415b      	adcs	r3, r3
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ac4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ac8:	f7fa fba4 	bl	8000214 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4ba5      	ldr	r3, [pc, #660]	; (8005d68 <UART_SetConfig+0x38c>)
 8005ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	011e      	lsls	r6, r3, #4
 8005ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005adc:	461c      	mov	r4, r3
 8005ade:	f04f 0500 	mov.w	r5, #0
 8005ae2:	4622      	mov	r2, r4
 8005ae4:	462b      	mov	r3, r5
 8005ae6:	1891      	adds	r1, r2, r2
 8005ae8:	6339      	str	r1, [r7, #48]	; 0x30
 8005aea:	415b      	adcs	r3, r3
 8005aec:	637b      	str	r3, [r7, #52]	; 0x34
 8005aee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005af2:	1912      	adds	r2, r2, r4
 8005af4:	eb45 0303 	adc.w	r3, r5, r3
 8005af8:	f04f 0000 	mov.w	r0, #0
 8005afc:	f04f 0100 	mov.w	r1, #0
 8005b00:	00d9      	lsls	r1, r3, #3
 8005b02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b06:	00d0      	lsls	r0, r2, #3
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	1911      	adds	r1, r2, r4
 8005b0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b10:	416b      	adcs	r3, r5
 8005b12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	1891      	adds	r1, r2, r2
 8005b20:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b22:	415b      	adcs	r3, r3
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b2e:	f7fa fb71 	bl	8000214 <__aeabi_uldivmod>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4b8c      	ldr	r3, [pc, #560]	; (8005d68 <UART_SetConfig+0x38c>)
 8005b38:	fba3 1302 	umull	r1, r3, r3, r2
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	2164      	movs	r1, #100	; 0x64
 8005b40:	fb01 f303 	mul.w	r3, r1, r3
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	3332      	adds	r3, #50	; 0x32
 8005b4a:	4a87      	ldr	r2, [pc, #540]	; (8005d68 <UART_SetConfig+0x38c>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	095b      	lsrs	r3, r3, #5
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b58:	441e      	add	r6, r3
 8005b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f04f 0100 	mov.w	r1, #0
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	1894      	adds	r4, r2, r2
 8005b68:	623c      	str	r4, [r7, #32]
 8005b6a:	415b      	adcs	r3, r3
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b72:	1812      	adds	r2, r2, r0
 8005b74:	eb41 0303 	adc.w	r3, r1, r3
 8005b78:	f04f 0400 	mov.w	r4, #0
 8005b7c:	f04f 0500 	mov.w	r5, #0
 8005b80:	00dd      	lsls	r5, r3, #3
 8005b82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b86:	00d4      	lsls	r4, r2, #3
 8005b88:	4622      	mov	r2, r4
 8005b8a:	462b      	mov	r3, r5
 8005b8c:	1814      	adds	r4, r2, r0
 8005b8e:	653c      	str	r4, [r7, #80]	; 0x50
 8005b90:	414b      	adcs	r3, r1
 8005b92:	657b      	str	r3, [r7, #84]	; 0x54
 8005b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	1891      	adds	r1, r2, r2
 8005ba0:	61b9      	str	r1, [r7, #24]
 8005ba2:	415b      	adcs	r3, r3
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005baa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005bae:	f7fa fb31 	bl	8000214 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4b6c      	ldr	r3, [pc, #432]	; (8005d68 <UART_SetConfig+0x38c>)
 8005bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	2164      	movs	r1, #100	; 0x64
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	3332      	adds	r3, #50	; 0x32
 8005bca:	4a67      	ldr	r2, [pc, #412]	; (8005d68 <UART_SetConfig+0x38c>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	f003 0207 	and.w	r2, r3, #7
 8005bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4432      	add	r2, r6
 8005bdc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bde:	e0b9      	b.n	8005d54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be2:	461c      	mov	r4, r3
 8005be4:	f04f 0500 	mov.w	r5, #0
 8005be8:	4622      	mov	r2, r4
 8005bea:	462b      	mov	r3, r5
 8005bec:	1891      	adds	r1, r2, r2
 8005bee:	6139      	str	r1, [r7, #16]
 8005bf0:	415b      	adcs	r3, r3
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005bf8:	1912      	adds	r2, r2, r4
 8005bfa:	eb45 0303 	adc.w	r3, r5, r3
 8005bfe:	f04f 0000 	mov.w	r0, #0
 8005c02:	f04f 0100 	mov.w	r1, #0
 8005c06:	00d9      	lsls	r1, r3, #3
 8005c08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c0c:	00d0      	lsls	r0, r2, #3
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	eb12 0804 	adds.w	r8, r2, r4
 8005c16:	eb43 0905 	adc.w	r9, r3, r5
 8005c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f04f 0100 	mov.w	r1, #0
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	008b      	lsls	r3, r1, #2
 8005c2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c32:	0082      	lsls	r2, r0, #2
 8005c34:	4640      	mov	r0, r8
 8005c36:	4649      	mov	r1, r9
 8005c38:	f7fa faec 	bl	8000214 <__aeabi_uldivmod>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4b49      	ldr	r3, [pc, #292]	; (8005d68 <UART_SetConfig+0x38c>)
 8005c42:	fba3 2302 	umull	r2, r3, r3, r2
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	011e      	lsls	r6, r3, #4
 8005c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f04f 0100 	mov.w	r1, #0
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	1894      	adds	r4, r2, r2
 8005c58:	60bc      	str	r4, [r7, #8]
 8005c5a:	415b      	adcs	r3, r3
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c62:	1812      	adds	r2, r2, r0
 8005c64:	eb41 0303 	adc.w	r3, r1, r3
 8005c68:	f04f 0400 	mov.w	r4, #0
 8005c6c:	f04f 0500 	mov.w	r5, #0
 8005c70:	00dd      	lsls	r5, r3, #3
 8005c72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c76:	00d4      	lsls	r4, r2, #3
 8005c78:	4622      	mov	r2, r4
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	1814      	adds	r4, r2, r0
 8005c7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005c80:	414b      	adcs	r3, r1
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f04f 0100 	mov.w	r1, #0
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	008b      	lsls	r3, r1, #2
 8005c98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c9c:	0082      	lsls	r2, r0, #2
 8005c9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ca2:	f7fa fab7 	bl	8000214 <__aeabi_uldivmod>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4b2f      	ldr	r3, [pc, #188]	; (8005d68 <UART_SetConfig+0x38c>)
 8005cac:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	2164      	movs	r1, #100	; 0x64
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	3332      	adds	r3, #50	; 0x32
 8005cbe:	4a2a      	ldr	r2, [pc, #168]	; (8005d68 <UART_SetConfig+0x38c>)
 8005cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cca:	441e      	add	r6, r3
 8005ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f04f 0100 	mov.w	r1, #0
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	1894      	adds	r4, r2, r2
 8005cda:	603c      	str	r4, [r7, #0]
 8005cdc:	415b      	adcs	r3, r3
 8005cde:	607b      	str	r3, [r7, #4]
 8005ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ce4:	1812      	adds	r2, r2, r0
 8005ce6:	eb41 0303 	adc.w	r3, r1, r3
 8005cea:	f04f 0400 	mov.w	r4, #0
 8005cee:	f04f 0500 	mov.w	r5, #0
 8005cf2:	00dd      	lsls	r5, r3, #3
 8005cf4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cf8:	00d4      	lsls	r4, r2, #3
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	462b      	mov	r3, r5
 8005cfe:	eb12 0a00 	adds.w	sl, r2, r0
 8005d02:	eb43 0b01 	adc.w	fp, r3, r1
 8005d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f04f 0100 	mov.w	r1, #0
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	008b      	lsls	r3, r1, #2
 8005d1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d1e:	0082      	lsls	r2, r0, #2
 8005d20:	4650      	mov	r0, sl
 8005d22:	4659      	mov	r1, fp
 8005d24:	f7fa fa76 	bl	8000214 <__aeabi_uldivmod>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <UART_SetConfig+0x38c>)
 8005d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	2164      	movs	r1, #100	; 0x64
 8005d36:	fb01 f303 	mul.w	r3, r1, r3
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	3332      	adds	r3, #50	; 0x32
 8005d40:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <UART_SetConfig+0x38c>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	f003 020f 	and.w	r2, r3, #15
 8005d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4432      	add	r2, r6
 8005d52:	609a      	str	r2, [r3, #8]
}
 8005d54:	bf00      	nop
 8005d56:	377c      	adds	r7, #124	; 0x7c
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5e:	bf00      	nop
 8005d60:	40011000 	.word	0x40011000
 8005d64:	40011400 	.word	0x40011400
 8005d68:	51eb851f 	.word	0x51eb851f

08005d6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	f107 001c 	add.w	r0, r7, #28
 8005d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d122      	bne.n	8005dca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d105      	bne.n	8005dbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f001 fac0 	bl	8007344 <USB_CoreReset>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	73fb      	strb	r3, [r7, #15]
 8005dc8:	e01a      	b.n	8005e00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 fab4 	bl	8007344 <USB_CoreReset>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
 8005df2:	e005      	b.n	8005e00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d10b      	bne.n	8005e1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f043 0206 	orr.w	r2, r3, #6
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f043 0220 	orr.w	r2, r3, #32
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e2a:	b004      	add	sp, #16
 8005e2c:	4770      	bx	lr
	...

08005e30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d165      	bne.n	8005f10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4a41      	ldr	r2, [pc, #260]	; (8005f4c <USB_SetTurnaroundTime+0x11c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d906      	bls.n	8005e5a <USB_SetTurnaroundTime+0x2a>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4a40      	ldr	r2, [pc, #256]	; (8005f50 <USB_SetTurnaroundTime+0x120>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d202      	bcs.n	8005e5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e54:	230f      	movs	r3, #15
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	e062      	b.n	8005f20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	4a3c      	ldr	r2, [pc, #240]	; (8005f50 <USB_SetTurnaroundTime+0x120>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d306      	bcc.n	8005e70 <USB_SetTurnaroundTime+0x40>
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4a3b      	ldr	r2, [pc, #236]	; (8005f54 <USB_SetTurnaroundTime+0x124>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d202      	bcs.n	8005e70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e6a:	230e      	movs	r3, #14
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	e057      	b.n	8005f20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4a38      	ldr	r2, [pc, #224]	; (8005f54 <USB_SetTurnaroundTime+0x124>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d306      	bcc.n	8005e86 <USB_SetTurnaroundTime+0x56>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a37      	ldr	r2, [pc, #220]	; (8005f58 <USB_SetTurnaroundTime+0x128>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d202      	bcs.n	8005e86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e80:	230d      	movs	r3, #13
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e04c      	b.n	8005f20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4a33      	ldr	r2, [pc, #204]	; (8005f58 <USB_SetTurnaroundTime+0x128>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d306      	bcc.n	8005e9c <USB_SetTurnaroundTime+0x6c>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4a32      	ldr	r2, [pc, #200]	; (8005f5c <USB_SetTurnaroundTime+0x12c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d802      	bhi.n	8005e9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e96:	230c      	movs	r3, #12
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	e041      	b.n	8005f20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4a2f      	ldr	r2, [pc, #188]	; (8005f5c <USB_SetTurnaroundTime+0x12c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d906      	bls.n	8005eb2 <USB_SetTurnaroundTime+0x82>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a2e      	ldr	r2, [pc, #184]	; (8005f60 <USB_SetTurnaroundTime+0x130>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d802      	bhi.n	8005eb2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005eac:	230b      	movs	r3, #11
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e036      	b.n	8005f20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <USB_SetTurnaroundTime+0x130>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d906      	bls.n	8005ec8 <USB_SetTurnaroundTime+0x98>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4a29      	ldr	r2, [pc, #164]	; (8005f64 <USB_SetTurnaroundTime+0x134>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d802      	bhi.n	8005ec8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ec2:	230a      	movs	r3, #10
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e02b      	b.n	8005f20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4a26      	ldr	r2, [pc, #152]	; (8005f64 <USB_SetTurnaroundTime+0x134>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d906      	bls.n	8005ede <USB_SetTurnaroundTime+0xae>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4a25      	ldr	r2, [pc, #148]	; (8005f68 <USB_SetTurnaroundTime+0x138>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d202      	bcs.n	8005ede <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ed8:	2309      	movs	r3, #9
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e020      	b.n	8005f20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	4a21      	ldr	r2, [pc, #132]	; (8005f68 <USB_SetTurnaroundTime+0x138>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d306      	bcc.n	8005ef4 <USB_SetTurnaroundTime+0xc4>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4a20      	ldr	r2, [pc, #128]	; (8005f6c <USB_SetTurnaroundTime+0x13c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d802      	bhi.n	8005ef4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005eee:	2308      	movs	r3, #8
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	e015      	b.n	8005f20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4a1d      	ldr	r2, [pc, #116]	; (8005f6c <USB_SetTurnaroundTime+0x13c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d906      	bls.n	8005f0a <USB_SetTurnaroundTime+0xda>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <USB_SetTurnaroundTime+0x140>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d202      	bcs.n	8005f0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f04:	2307      	movs	r3, #7
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	e00a      	b.n	8005f20 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f0a:	2306      	movs	r3, #6
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	e007      	b.n	8005f20 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d102      	bne.n	8005f1c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f16:	2309      	movs	r3, #9
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e001      	b.n	8005f20 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f1c:	2309      	movs	r3, #9
 8005f1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	029b      	lsls	r3, r3, #10
 8005f34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	00d8acbf 	.word	0x00d8acbf
 8005f50:	00e4e1c0 	.word	0x00e4e1c0
 8005f54:	00f42400 	.word	0x00f42400
 8005f58:	01067380 	.word	0x01067380
 8005f5c:	011a499f 	.word	0x011a499f
 8005f60:	01312cff 	.word	0x01312cff
 8005f64:	014ca43f 	.word	0x014ca43f
 8005f68:	016e3600 	.word	0x016e3600
 8005f6c:	01a6ab1f 	.word	0x01a6ab1f
 8005f70:	01e84800 	.word	0x01e84800

08005f74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f043 0201 	orr.w	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f023 0201 	bic.w	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d106      	bne.n	8005fe4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	60da      	str	r2, [r3, #12]
 8005fe2:	e00b      	b.n	8005ffc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60da      	str	r2, [r3, #12]
 8005ff6:	e001      	b.n	8005ffc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e003      	b.n	8006004 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005ffc:	2032      	movs	r0, #50	; 0x32
 8005ffe:	f7fb fda5 	bl	8001b4c <HAL_Delay>

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800600c:	b084      	sub	sp, #16
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800601a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006026:	2300      	movs	r3, #0
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	e009      	b.n	8006040 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	3340      	adds	r3, #64	; 0x40
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	2200      	movs	r2, #0
 8006038:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	3301      	adds	r3, #1
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b0e      	cmp	r3, #14
 8006044:	d9f2      	bls.n	800602c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d11c      	bne.n	8006086 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800605a:	f043 0302 	orr.w	r3, r3, #2
 800605e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e005      	b.n	8006092 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006098:	461a      	mov	r2, r3
 800609a:	2300      	movs	r3, #0
 800609c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a4:	4619      	mov	r1, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ac:	461a      	mov	r2, r3
 80060ae:	680b      	ldr	r3, [r1, #0]
 80060b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d10c      	bne.n	80060d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060be:	2100      	movs	r1, #0
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f949 	bl	8006358 <USB_SetDevSpeed>
 80060c6:	e008      	b.n	80060da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060c8:	2101      	movs	r1, #1
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f944 	bl	8006358 <USB_SetDevSpeed>
 80060d0:	e003      	b.n	80060da <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060d2:	2103      	movs	r1, #3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f93f 	bl	8006358 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060da:	2110      	movs	r1, #16
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f8f3 	bl	80062c8 <USB_FlushTxFifo>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f911 	bl	8006314 <USB_FlushRxFifo>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006102:	461a      	mov	r2, r3
 8006104:	2300      	movs	r3, #0
 8006106:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610e:	461a      	mov	r2, r3
 8006110:	2300      	movs	r3, #0
 8006112:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611a:	461a      	mov	r2, r3
 800611c:	2300      	movs	r3, #0
 800611e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006120:	2300      	movs	r3, #0
 8006122:	613b      	str	r3, [r7, #16]
 8006124:	e043      	b.n	80061ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800613c:	d118      	bne.n	8006170 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	461a      	mov	r2, r3
 8006152:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	e013      	b.n	8006182 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	461a      	mov	r2, r3
 8006168:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	e008      	b.n	8006182 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	461a      	mov	r2, r3
 800617e:	2300      	movs	r3, #0
 8006180:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618e:	461a      	mov	r2, r3
 8006190:	2300      	movs	r3, #0
 8006192:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a0:	461a      	mov	r2, r3
 80061a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	3301      	adds	r3, #1
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d3b7      	bcc.n	8006126 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061b6:	2300      	movs	r3, #0
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	e043      	b.n	8006244 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061d2:	d118      	bne.n	8006206 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10a      	bne.n	80061f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e6:	461a      	mov	r2, r3
 80061e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e013      	b.n	8006218 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	461a      	mov	r2, r3
 80061fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	e008      	b.n	8006218 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	461a      	mov	r2, r3
 8006214:	2300      	movs	r3, #0
 8006216:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	461a      	mov	r2, r3
 8006226:	2300      	movs	r3, #0
 8006228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	461a      	mov	r2, r3
 8006238:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800623c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	3301      	adds	r3, #1
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	429a      	cmp	r2, r3
 800624a:	d3b7      	bcc.n	80061bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800625a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800625e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800626c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f043 0210 	orr.w	r2, r3, #16
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	4b0f      	ldr	r3, [pc, #60]	; (80062c4 <USB_DevInit+0x2b8>)
 8006286:	4313      	orrs	r3, r2
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800628c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f043 0208 	orr.w	r2, r3, #8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800629e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d107      	bne.n	80062b4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062ac:	f043 0304 	orr.w	r3, r3, #4
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062c0:	b004      	add	sp, #16
 80062c2:	4770      	bx	lr
 80062c4:	803c3800 	.word	0x803c3800

080062c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	019b      	lsls	r3, r3, #6
 80062da:	f043 0220 	orr.w	r2, r3, #32
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3301      	adds	r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4a09      	ldr	r2, [pc, #36]	; (8006310 <USB_FlushTxFifo+0x48>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d901      	bls.n	80062f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e006      	b.n	8006302 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d0f0      	beq.n	80062e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	00030d40 	.word	0x00030d40

08006314 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2210      	movs	r2, #16
 8006324:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3301      	adds	r3, #1
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a09      	ldr	r2, [pc, #36]	; (8006354 <USB_FlushRxFifo+0x40>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d901      	bls.n	8006338 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e006      	b.n	8006346 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b10      	cmp	r3, #16
 8006342:	d0f0      	beq.n	8006326 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	00030d40 	.word	0x00030d40

08006358 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006378:	4313      	orrs	r3, r2
 800637a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800638a:	b480      	push	{r7}
 800638c:	b087      	sub	sp, #28
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0306 	and.w	r3, r3, #6
 80063a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d102      	bne.n	80063b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]
 80063ae:	e00a      	b.n	80063c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d002      	beq.n	80063bc <USB_GetDevSpeed+0x32>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b06      	cmp	r3, #6
 80063ba:	d102      	bne.n	80063c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063bc:	2302      	movs	r3, #2
 80063be:	75fb      	strb	r3, [r7, #23]
 80063c0:	e001      	b.n	80063c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063c2:	230f      	movs	r3, #15
 80063c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d13a      	bne.n	8006466 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	2101      	movs	r1, #1
 8006402:	fa01 f303 	lsl.w	r3, r1, r3
 8006406:	b29b      	uxth	r3, r3
 8006408:	68f9      	ldr	r1, [r7, #12]
 800640a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800640e:	4313      	orrs	r3, r2
 8006410:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d155      	bne.n	80064d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	78db      	ldrb	r3, [r3, #3]
 8006442:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006444:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	059b      	lsls	r3, r3, #22
 800644a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800644c:	4313      	orrs	r3, r2
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800645e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e036      	b.n	80064d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646c:	69da      	ldr	r2, [r3, #28]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	2101      	movs	r1, #1
 8006478:	fa01 f303 	lsl.w	r3, r1, r3
 800647c:	041b      	lsls	r3, r3, #16
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006484:	4313      	orrs	r3, r2
 8006486:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d11a      	bne.n	80064d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	78db      	ldrb	r3, [r3, #3]
 80064b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064ba:	430b      	orrs	r3, r1
 80064bc:	4313      	orrs	r3, r2
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
	...

080064e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d161      	bne.n	80065c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006516:	d11f      	bne.n	8006558 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	440a      	add	r2, r1
 800652e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006532:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006536:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006552:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006556:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	2101      	movs	r1, #1
 800656a:	fa01 f303 	lsl.w	r3, r1, r3
 800656e:	b29b      	uxth	r3, r3
 8006570:	43db      	mvns	r3, r3
 8006572:	68f9      	ldr	r1, [r7, #12]
 8006574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006578:	4013      	ands	r3, r2
 800657a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	2101      	movs	r1, #1
 800658e:	fa01 f303 	lsl.w	r3, r1, r3
 8006592:	b29b      	uxth	r3, r3
 8006594:	43db      	mvns	r3, r3
 8006596:	68f9      	ldr	r1, [r7, #12]
 8006598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800659c:	4013      	ands	r3, r2
 800659e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	0159      	lsls	r1, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	440b      	add	r3, r1
 80065b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ba:	4619      	mov	r1, r3
 80065bc:	4b35      	ldr	r3, [pc, #212]	; (8006694 <USB_DeactivateEndpoint+0x1b0>)
 80065be:	4013      	ands	r3, r2
 80065c0:	600b      	str	r3, [r1, #0]
 80065c2:	e060      	b.n	8006686 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065da:	d11f      	bne.n	800661c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800661a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	f003 030f 	and.w	r3, r3, #15
 800662c:	2101      	movs	r1, #1
 800662e:	fa01 f303 	lsl.w	r3, r1, r3
 8006632:	041b      	lsls	r3, r3, #16
 8006634:	43db      	mvns	r3, r3
 8006636:	68f9      	ldr	r1, [r7, #12]
 8006638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800663c:	4013      	ands	r3, r2
 800663e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f003 030f 	and.w	r3, r3, #15
 8006650:	2101      	movs	r1, #1
 8006652:	fa01 f303 	lsl.w	r3, r1, r3
 8006656:	041b      	lsls	r3, r3, #16
 8006658:	43db      	mvns	r3, r3
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006660:	4013      	ands	r3, r2
 8006662:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	0159      	lsls	r1, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	440b      	add	r3, r1
 800667a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667e:	4619      	mov	r1, r3
 8006680:	4b05      	ldr	r3, [pc, #20]	; (8006698 <USB_DeactivateEndpoint+0x1b4>)
 8006682:	4013      	ands	r3, r2
 8006684:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	ec337800 	.word	0xec337800
 8006698:	eff37800 	.word	0xeff37800

0800669c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	; 0x28
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	4613      	mov	r3, r2
 80066a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	f040 815c 	bne.w	8006976 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d132      	bne.n	800672c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006704:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006708:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	440a      	add	r2, r1
 8006720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006724:	0cdb      	lsrs	r3, r3, #19
 8006726:	04db      	lsls	r3, r3, #19
 8006728:	6113      	str	r3, [r2, #16]
 800672a:	e074      	b.n	8006816 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	440a      	add	r2, r1
 8006742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006746:	0cdb      	lsrs	r3, r3, #19
 8006748:	04db      	lsls	r3, r3, #19
 800674a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	440a      	add	r2, r1
 8006762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006766:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800676a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800676e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6959      	ldr	r1, [r3, #20]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	440b      	add	r3, r1
 8006788:	1e59      	subs	r1, r3, #1
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006792:	04d9      	lsls	r1, r3, #19
 8006794:	4b9d      	ldr	r3, [pc, #628]	; (8006a0c <USB_EPStartXfer+0x370>)
 8006796:	400b      	ands	r3, r1
 8006798:	69b9      	ldr	r1, [r7, #24]
 800679a:	0148      	lsls	r0, r1, #5
 800679c:	69f9      	ldr	r1, [r7, #28]
 800679e:	4401      	add	r1, r0
 80067a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067a4:	4313      	orrs	r3, r2
 80067a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	691a      	ldr	r2, [r3, #16]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067be:	69b9      	ldr	r1, [r7, #24]
 80067c0:	0148      	lsls	r0, r1, #5
 80067c2:	69f9      	ldr	r1, [r7, #28]
 80067c4:	4401      	add	r1, r0
 80067c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067ca:	4313      	orrs	r3, r2
 80067cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	78db      	ldrb	r3, [r3, #3]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d11f      	bne.n	8006816 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	440a      	add	r2, r1
 800680c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006814:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d14b      	bne.n	80068b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d009      	beq.n	8006838 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	461a      	mov	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	78db      	ldrb	r3, [r3, #3]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d128      	bne.n	8006892 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d110      	bne.n	8006872 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	e00f      	b.n	8006892 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	440a      	add	r2, r1
 8006888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006890:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	0151      	lsls	r1, r2, #5
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	440a      	add	r2, r1
 80068a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	e12f      	b.n	8006b14 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	78db      	ldrb	r3, [r3, #3]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d015      	beq.n	8006908 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8117 	beq.w	8006b14 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	2101      	movs	r1, #1
 80068f8:	fa01 f303 	lsl.w	r3, r1, r3
 80068fc:	69f9      	ldr	r1, [r7, #28]
 80068fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006902:	4313      	orrs	r3, r2
 8006904:	634b      	str	r3, [r1, #52]	; 0x34
 8006906:	e105      	b.n	8006b14 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006914:	2b00      	cmp	r3, #0
 8006916:	d110      	bne.n	800693a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	440a      	add	r2, r1
 800692e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006932:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	e00f      	b.n	800695a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	440a      	add	r2, r1
 8006950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006958:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	68d9      	ldr	r1, [r3, #12]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	781a      	ldrb	r2, [r3, #0]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	b298      	uxth	r0, r3
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	4603      	mov	r3, r0
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fa2b 	bl	8006dca <USB_WritePacket>
 8006974:	e0ce      	b.n	8006b14 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	440a      	add	r2, r1
 800698c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006990:	0cdb      	lsrs	r3, r3, #19
 8006992:	04db      	lsls	r3, r3, #19
 8006994:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d126      	bne.n	8006a10 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069d8:	69b9      	ldr	r1, [r7, #24]
 80069da:	0148      	lsls	r0, r1, #5
 80069dc:	69f9      	ldr	r1, [r7, #28]
 80069de:	4401      	add	r1, r0
 80069e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069e4:	4313      	orrs	r3, r2
 80069e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	0151      	lsls	r1, r2, #5
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	440a      	add	r2, r1
 80069fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a06:	6113      	str	r3, [r2, #16]
 8006a08:	e036      	b.n	8006a78 <USB_EPStartXfer+0x3dc>
 8006a0a:	bf00      	nop
 8006a0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	695a      	ldr	r2, [r3, #20]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	4413      	add	r3, r2
 8006a1a:	1e5a      	subs	r2, r3, #1
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	8afb      	ldrh	r3, [r7, #22]
 8006a36:	04d9      	lsls	r1, r3, #19
 8006a38:	4b39      	ldr	r3, [pc, #228]	; (8006b20 <USB_EPStartXfer+0x484>)
 8006a3a:	400b      	ands	r3, r1
 8006a3c:	69b9      	ldr	r1, [r7, #24]
 8006a3e:	0148      	lsls	r0, r1, #5
 8006a40:	69f9      	ldr	r1, [r7, #28]
 8006a42:	4401      	add	r1, r0
 8006a44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	8af9      	ldrh	r1, [r7, #22]
 8006a60:	fb01 f303 	mul.w	r3, r1, r3
 8006a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a68:	69b9      	ldr	r1, [r7, #24]
 8006a6a:	0148      	lsls	r0, r1, #5
 8006a6c:	69f9      	ldr	r1, [r7, #28]
 8006a6e:	4401      	add	r1, r0
 8006a70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a74:	4313      	orrs	r3, r2
 8006a76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a78:	79fb      	ldrb	r3, [r7, #7]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d10d      	bne.n	8006a9a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	68d9      	ldr	r1, [r3, #12]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a96:	460a      	mov	r2, r1
 8006a98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	78db      	ldrb	r3, [r3, #3]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d128      	bne.n	8006af4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d110      	bne.n	8006ad4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006acc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	e00f      	b.n	8006af4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	0151      	lsls	r1, r2, #5
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	440a      	add	r2, r1
 8006b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	1ff80000 	.word	0x1ff80000

08006b24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	f040 80cd 	bne.w	8006ce0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d132      	bne.n	8006bb4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bac:	0cdb      	lsrs	r3, r3, #19
 8006bae:	04db      	lsls	r3, r3, #19
 8006bb0:	6113      	str	r3, [r2, #16]
 8006bb2:	e04e      	b.n	8006c52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bce:	0cdb      	lsrs	r3, r3, #19
 8006bd0:	04db      	lsls	r3, r3, #19
 8006bd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bf6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	695a      	ldr	r2, [r3, #20]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d903      	bls.n	8006c0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	0151      	lsls	r1, r2, #5
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	440a      	add	r2, r1
 8006c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c42:	6939      	ldr	r1, [r7, #16]
 8006c44:	0148      	lsls	r0, r1, #5
 8006c46:	6979      	ldr	r1, [r7, #20]
 8006c48:	4401      	add	r1, r0
 8006c4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d11e      	bne.n	8006c96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	e092      	b.n	8006dbc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d07e      	beq.n	8006dbc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	f003 030f 	and.w	r3, r3, #15
 8006cce:	2101      	movs	r1, #1
 8006cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd4:	6979      	ldr	r1, [r7, #20]
 8006cd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	634b      	str	r3, [r1, #52]	; 0x34
 8006cde:	e06d      	b.n	8006dbc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cfa:	0cdb      	lsrs	r3, r3, #19
 8006cfc:	04db      	lsls	r3, r3, #19
 8006cfe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d22:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d6a:	6939      	ldr	r1, [r7, #16]
 8006d6c:	0148      	lsls	r0, r1, #5
 8006d6e:	6979      	ldr	r1, [r7, #20]
 8006d70:	4401      	add	r1, r0
 8006d72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d76:	4313      	orrs	r3, r2
 8006d78:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d10d      	bne.n	8006d9c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	68d9      	ldr	r1, [r3, #12]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d98:	460a      	mov	r2, r1
 8006d9a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b089      	sub	sp, #36	; 0x24
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	4611      	mov	r1, r2
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	460b      	mov	r3, r1
 8006dda:	71fb      	strb	r3, [r7, #7]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006de8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d11a      	bne.n	8006e26 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006df0:	88bb      	ldrh	r3, [r7, #4]
 8006df2:	3303      	adds	r3, #3
 8006df4:	089b      	lsrs	r3, r3, #2
 8006df6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	e00f      	b.n	8006e1e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	031a      	lsls	r2, r3, #12
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	3304      	adds	r3, #4
 8006e16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d3eb      	bcc.n	8006dfe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3724      	adds	r7, #36	; 0x24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b089      	sub	sp, #36	; 0x24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	3303      	adds	r3, #3
 8006e4e:	089b      	lsrs	r3, r3, #2
 8006e50:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	e00b      	b.n	8006e70 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	3304      	adds	r3, #4
 8006e68:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d3ef      	bcc.n	8006e58 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006e78:	69fb      	ldr	r3, [r7, #28]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3724      	adds	r7, #36	; 0x24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d12c      	bne.n	8006efc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	db12      	blt.n	8006eda <USB_EPSetStall+0x54>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00f      	beq.n	8006eda <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ed8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e02b      	b.n	8006f54 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	db12      	blt.n	8006f34 <USB_EPSetStall+0xae>
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00f      	beq.n	8006f34 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f32:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d128      	bne.n	8006fd0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	0151      	lsls	r1, r2, #5
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	440a      	add	r2, r1
 8006f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	78db      	ldrb	r3, [r3, #3]
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d003      	beq.n	8006fae <USB_EPClearStall+0x4c>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	78db      	ldrb	r3, [r3, #3]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d138      	bne.n	8007020 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e027      	b.n	8007020 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	0151      	lsls	r1, r2, #5
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	440a      	add	r2, r1
 8006fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	78db      	ldrb	r3, [r3, #3]
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d003      	beq.n	8007000 <USB_EPClearStall+0x9e>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	78db      	ldrb	r3, [r3, #3]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d10f      	bne.n	8007020 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	0151      	lsls	r1, r2, #5
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	440a      	add	r2, r1
 8007016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800701e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800702e:	b480      	push	{r7}
 8007030:	b085      	sub	sp, #20
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800704c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007050:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007068:	4313      	orrs	r3, r2
 800706a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800707a:	b480      	push	{r7}
 800707c:	b085      	sub	sp, #20
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007094:	f023 0303 	bic.w	r3, r3, #3
 8007098:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070a8:	f023 0302 	bic.w	r3, r3, #2
 80070ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ea:	f043 0302 	orr.w	r3, r3, #2
 80070ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070fe:	b480      	push	{r7}
 8007100:	b085      	sub	sp, #20
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4013      	ands	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007116:	68fb      	ldr	r3, [r7, #12]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	4013      	ands	r3, r2
 8007146:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	0c1b      	lsrs	r3, r3, #16
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	4013      	ands	r3, r2
 800717a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	b29b      	uxth	r3, r3
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	4013      	ands	r3, r2
 80071b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071ba:	68bb      	ldr	r3, [r7, #8]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	fa22 f303 	lsr.w	r3, r2, r3
 80071f8:	01db      	lsls	r3, r3, #7
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007202:	78fb      	ldrb	r3, [r7, #3]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4013      	ands	r3, r2
 8007214:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007216:	68bb      	ldr	r3, [r7, #8]
}
 8007218:	4618      	mov	r0, r3
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f003 0301 	and.w	r3, r3, #1
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007276:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	460b      	mov	r3, r1
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	333c      	adds	r3, #60	; 0x3c
 800729e:	3304      	adds	r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	4a26      	ldr	r2, [pc, #152]	; (8007340 <USB_EP0_OutStart+0xb8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d90a      	bls.n	80072c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072bc:	d101      	bne.n	80072c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e037      	b.n	8007332 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c8:	461a      	mov	r2, r3
 80072ca:	2300      	movs	r3, #0
 80072cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f0:	f043 0318 	orr.w	r3, r3, #24
 80072f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007304:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007308:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d10f      	bne.n	8007330 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800732e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	4f54300a 	.word	0x4f54300a

08007344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3301      	adds	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4a13      	ldr	r2, [pc, #76]	; (80073a8 <USB_CoreReset+0x64>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d901      	bls.n	8007362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e01b      	b.n	800739a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	daf2      	bge.n	8007350 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f043 0201 	orr.w	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3301      	adds	r3, #1
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4a09      	ldr	r2, [pc, #36]	; (80073a8 <USB_CoreReset+0x64>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d901      	bls.n	800738c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e006      	b.n	800739a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b01      	cmp	r3, #1
 8007396:	d0f0      	beq.n	800737a <USB_CoreReset+0x36>

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	00030d40 	.word	0x00030d40

080073ac <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80073b8:	2010      	movs	r0, #16
 80073ba:	f001 ff97 	bl	80092ec <USBD_static_malloc>
 80073be:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d105      	bne.n	80073d2 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80073ce:	2302      	movs	r3, #2
 80073d0:	e01b      	b.n	800740a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	7c1b      	ldrb	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d103      	bne.n	80073ea <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2207      	movs	r2, #7
 80073e6:	875a      	strh	r2, [r3, #58]	; 0x3a
 80073e8:	e002      	b.n	80073f0 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	220a      	movs	r2, #10
 80073ee:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80073f0:	2304      	movs	r3, #4
 80073f2:	2203      	movs	r2, #3
 80073f4:	2181      	movs	r1, #129	; 0x81
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fe19 	bl	800902e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800741e:	2181      	movs	r1, #129	; 0x81
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 fe2a 	bl	800907a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007438:	2b00      	cmp	r3, #0
 800743a:	d009      	beq.n	8007450 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007442:	4618      	mov	r0, r3
 8007444:	f001 ff60 	bl	8009308 <USBD_static_free>
    pdev->pClassData = NULL;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800746c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	e0e8      	b.n	8007652 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007488:	2b00      	cmp	r3, #0
 800748a:	d046      	beq.n	800751a <USBD_HID_Setup+0xbe>
 800748c:	2b20      	cmp	r3, #32
 800748e:	f040 80d8 	bne.w	8007642 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	785b      	ldrb	r3, [r3, #1]
 8007496:	3b02      	subs	r3, #2
 8007498:	2b09      	cmp	r3, #9
 800749a:	d836      	bhi.n	800750a <USBD_HID_Setup+0xae>
 800749c:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <USBD_HID_Setup+0x48>)
 800749e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a2:	bf00      	nop
 80074a4:	080074fb 	.word	0x080074fb
 80074a8:	080074db 	.word	0x080074db
 80074ac:	0800750b 	.word	0x0800750b
 80074b0:	0800750b 	.word	0x0800750b
 80074b4:	0800750b 	.word	0x0800750b
 80074b8:	0800750b 	.word	0x0800750b
 80074bc:	0800750b 	.word	0x0800750b
 80074c0:	0800750b 	.word	0x0800750b
 80074c4:	080074e9 	.word	0x080074e9
 80074c8:	080074cd 	.word	0x080074cd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	885b      	ldrh	r3, [r3, #2]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	461a      	mov	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	601a      	str	r2, [r3, #0]
          break;
 80074d8:	e01e      	b.n	8007518 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 fa4c 	bl	800897e <USBD_CtlSendData>
          break;
 80074e6:	e017      	b.n	8007518 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	885b      	ldrh	r3, [r3, #2]
 80074ec:	0a1b      	lsrs	r3, r3, #8
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	605a      	str	r2, [r3, #4]
          break;
 80074f8:	e00e      	b.n	8007518 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3304      	adds	r3, #4
 80074fe:	2201      	movs	r2, #1
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 fa3b 	bl	800897e <USBD_CtlSendData>
          break;
 8007508:	e006      	b.n	8007518 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 f9c5 	bl	800889c <USBD_CtlError>
          ret = USBD_FAIL;
 8007512:	2303      	movs	r3, #3
 8007514:	75fb      	strb	r3, [r7, #23]
          break;
 8007516:	bf00      	nop
      }
      break;
 8007518:	e09a      	b.n	8007650 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	785b      	ldrb	r3, [r3, #1]
 800751e:	2b0b      	cmp	r3, #11
 8007520:	f200 8086 	bhi.w	8007630 <USBD_HID_Setup+0x1d4>
 8007524:	a201      	add	r2, pc, #4	; (adr r2, 800752c <USBD_HID_Setup+0xd0>)
 8007526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752a:	bf00      	nop
 800752c:	0800755d 	.word	0x0800755d
 8007530:	0800763f 	.word	0x0800763f
 8007534:	08007631 	.word	0x08007631
 8007538:	08007631 	.word	0x08007631
 800753c:	08007631 	.word	0x08007631
 8007540:	08007631 	.word	0x08007631
 8007544:	08007587 	.word	0x08007587
 8007548:	08007631 	.word	0x08007631
 800754c:	08007631 	.word	0x08007631
 8007550:	08007631 	.word	0x08007631
 8007554:	080075df 	.word	0x080075df
 8007558:	08007609 	.word	0x08007609
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b03      	cmp	r3, #3
 8007566:	d107      	bne.n	8007578 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007568:	f107 030a 	add.w	r3, r7, #10
 800756c:	2202      	movs	r2, #2
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 fa04 	bl	800897e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007576:	e063      	b.n	8007640 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 f98e 	bl	800889c <USBD_CtlError>
            ret = USBD_FAIL;
 8007580:	2303      	movs	r3, #3
 8007582:	75fb      	strb	r3, [r7, #23]
          break;
 8007584:	e05c      	b.n	8007640 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	885b      	ldrh	r3, [r3, #2]
 800758a:	0a1b      	lsrs	r3, r3, #8
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b22      	cmp	r3, #34	; 0x22
 8007590:	d108      	bne.n	80075a4 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	88db      	ldrh	r3, [r3, #6]
 8007596:	2b42      	cmp	r3, #66	; 0x42
 8007598:	bf28      	it	cs
 800759a:	2342      	movcs	r3, #66	; 0x42
 800759c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800759e:	4b2f      	ldr	r3, [pc, #188]	; (800765c <USBD_HID_Setup+0x200>)
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	e015      	b.n	80075d0 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	885b      	ldrh	r3, [r3, #2]
 80075a8:	0a1b      	lsrs	r3, r3, #8
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b21      	cmp	r3, #33	; 0x21
 80075ae:	d108      	bne.n	80075c2 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 80075b0:	4b2b      	ldr	r3, [pc, #172]	; (8007660 <USBD_HID_Setup+0x204>)
 80075b2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	88db      	ldrh	r3, [r3, #6]
 80075b8:	2b09      	cmp	r3, #9
 80075ba:	bf28      	it	cs
 80075bc:	2309      	movcs	r3, #9
 80075be:	82bb      	strh	r3, [r7, #20]
 80075c0:	e006      	b.n	80075d0 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 f969 	bl	800889c <USBD_CtlError>
            ret = USBD_FAIL;
 80075ca:	2303      	movs	r3, #3
 80075cc:	75fb      	strb	r3, [r7, #23]
            break;
 80075ce:	e037      	b.n	8007640 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80075d0:	8abb      	ldrh	r3, [r7, #20]
 80075d2:	461a      	mov	r2, r3
 80075d4:	6939      	ldr	r1, [r7, #16]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f9d1 	bl	800897e <USBD_CtlSendData>
          break;
 80075dc:	e030      	b.n	8007640 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d107      	bne.n	80075fa <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3308      	adds	r3, #8
 80075ee:	2201      	movs	r2, #1
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f001 f9c3 	bl	800897e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075f8:	e022      	b.n	8007640 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f94d 	bl	800889c <USBD_CtlError>
            ret = USBD_FAIL;
 8007602:	2303      	movs	r3, #3
 8007604:	75fb      	strb	r3, [r7, #23]
          break;
 8007606:	e01b      	b.n	8007640 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b03      	cmp	r3, #3
 8007612:	d106      	bne.n	8007622 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	885b      	ldrh	r3, [r3, #2]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	461a      	mov	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007620:	e00e      	b.n	8007640 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 f939 	bl	800889c <USBD_CtlError>
            ret = USBD_FAIL;
 800762a:	2303      	movs	r3, #3
 800762c:	75fb      	strb	r3, [r7, #23]
          break;
 800762e:	e007      	b.n	8007640 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 f932 	bl	800889c <USBD_CtlError>
          ret = USBD_FAIL;
 8007638:	2303      	movs	r3, #3
 800763a:	75fb      	strb	r3, [r7, #23]
          break;
 800763c:	e000      	b.n	8007640 <USBD_HID_Setup+0x1e4>
          break;
 800763e:	bf00      	nop
      }
      break;
 8007640:	e006      	b.n	8007650 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 f929 	bl	800889c <USBD_CtlError>
      ret = USBD_FAIL;
 800764a:	2303      	movs	r3, #3
 800764c:	75fb      	strb	r3, [r7, #23]
      break;
 800764e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007650:	7dfb      	ldrb	r3, [r7, #23]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	200000c8 	.word	0x200000c8
 8007660:	200000b0 	.word	0x200000b0

08007664 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007678:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8007680:	2303      	movs	r3, #3
 8007682:	e013      	b.n	80076ac <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b03      	cmp	r3, #3
 800768e:	d10c      	bne.n	80076aa <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	7b1b      	ldrb	r3, [r3, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d108      	bne.n	80076aa <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2201      	movs	r2, #1
 800769c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800769e:	88fb      	ldrh	r3, [r7, #6]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	2181      	movs	r1, #129	; 0x81
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f001 fd90 	bl	80091ca <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2222      	movs	r2, #34	; 0x22
 80076c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80076c2:	4b03      	ldr	r3, [pc, #12]	; (80076d0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	20000044 	.word	0x20000044

080076d4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2222      	movs	r2, #34	; 0x22
 80076e0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80076e2:	4b03      	ldr	r3, [pc, #12]	; (80076f0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	20000068 	.word	0x20000068

080076f4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2222      	movs	r2, #34	; 0x22
 8007700:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007702:	4b03      	ldr	r3, [pc, #12]	; (8007710 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	2000008c 	.word	0x2000008c

08007714 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007726:	2200      	movs	r2, #0
 8007728:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	220a      	movs	r2, #10
 8007744:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007746:	4b03      	ldr	r3, [pc, #12]	; (8007754 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	200000bc 	.word	0x200000bc

08007758 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800776c:	2303      	movs	r3, #3
 800776e:	e01f      	b.n	80077b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	79fa      	ldrb	r2, [r7, #7]
 80077a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f001 fbdb 	bl	8008f60 <USBD_LL_Init>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e016      	b.n	80077fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	f107 020e 	add.w	r2, r7, #14
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
 80077f4:	4602      	mov	r2, r0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 fbf2 	bl	8008ff8 <USBD_LL_Start>
 8007814:	4603      	mov	r3, r0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	78fa      	ldrb	r2, [r7, #3]
 8007858:	4611      	mov	r1, r2
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	4611      	mov	r1, r2
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
  }

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 ffba 	bl	8008828 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078c2:	461a      	mov	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078d0:	f003 031f 	and.w	r3, r3, #31
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d01a      	beq.n	800790e <USBD_LL_SetupStage+0x72>
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d822      	bhi.n	8007922 <USBD_LL_SetupStage+0x86>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <USBD_LL_SetupStage+0x4a>
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d00a      	beq.n	80078fa <USBD_LL_SetupStage+0x5e>
 80078e4:	e01d      	b.n	8007922 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa62 	bl	8007db8 <USBD_StdDevReq>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]
      break;
 80078f8:	e020      	b.n	800793c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fac6 	bl	8007e94 <USBD_StdItfReq>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
      break;
 800790c:	e016      	b.n	800793c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fb05 	bl	8007f26 <USBD_StdEPReq>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
      break;
 8007920:	e00c      	b.n	800793c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007928:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800792c:	b2db      	uxtb	r3, r3
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 fbc1 	bl	80090b8 <USBD_LL_StallEP>
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]
      break;
 800793a:	bf00      	nop
  }

  return ret;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b086      	sub	sp, #24
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	460b      	mov	r3, r1
 8007950:	607a      	str	r2, [r7, #4]
 8007952:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007954:	7afb      	ldrb	r3, [r7, #11]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d138      	bne.n	80079cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007960:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007968:	2b03      	cmp	r3, #3
 800796a:	d14a      	bne.n	8007a02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	429a      	cmp	r2, r3
 8007976:	d913      	bls.n	80079a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	1ad2      	subs	r2, r2, r3
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	4293      	cmp	r3, r2
 8007990:	bf28      	it	cs
 8007992:	4613      	movcs	r3, r2
 8007994:	461a      	mov	r2, r3
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f001 f81c 	bl	80089d6 <USBD_CtlContinueRx>
 800799e:	e030      	b.n	8007a02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d10b      	bne.n	80079c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d005      	beq.n	80079c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f001 f817 	bl	80089f8 <USBD_CtlSendStatus>
 80079ca:	e01a      	b.n	8007a02 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d114      	bne.n	8007a02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00e      	beq.n	8007a02 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	7afa      	ldrb	r2, [r7, #11]
 80079ee:	4611      	mov	r1, r2
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	4798      	blx	r3
 80079f4:	4603      	mov	r3, r0
 80079f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	e000      	b.n	8007a04 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	460b      	mov	r3, r1
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a1a:	7afb      	ldrb	r3, [r7, #11]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d16b      	bne.n	8007af8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3314      	adds	r3, #20
 8007a24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d156      	bne.n	8007ade <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d914      	bls.n	8007a66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	1ad2      	subs	r2, r2, r3
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 ffae 	bl	80089b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f001 fbd4 	bl	800920c <USBD_LL_PrepareReceive>
 8007a64:	e03b      	b.n	8007ade <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d11c      	bne.n	8007aac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d316      	bcc.n	8007aac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d20f      	bcs.n	8007aac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2100      	movs	r1, #0
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 ff8f 	bl	80089b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f001 fbb1 	bl	800920c <USBD_LL_PrepareReceive>
 8007aaa:	e018      	b.n	8007ade <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b03      	cmp	r3, #3
 8007ab6:	d10b      	bne.n	8007ad0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ad0:	2180      	movs	r1, #128	; 0x80
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f001 faf0 	bl	80090b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 ffa0 	bl	8008a1e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d122      	bne.n	8007b2e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7ff fe98 	bl	800781e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007af6:	e01a      	b.n	8007b2e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d114      	bne.n	8007b2e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00e      	beq.n	8007b2e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	7afa      	ldrb	r2, [r7, #11]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	4798      	blx	r3
 8007b20:	4603      	mov	r3, r0
 8007b22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	e000      	b.n	8007b30 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e02f      	b.n	8007bcc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00f      	beq.n	8007b96 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6852      	ldr	r2, [r2, #4]
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	4611      	mov	r1, r2
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b96:	2340      	movs	r3, #64	; 0x40
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 fa46 	bl	800902e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2240      	movs	r2, #64	; 0x40
 8007bae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bb2:	2340      	movs	r3, #64	; 0x40
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2180      	movs	r1, #128	; 0x80
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 fa38 	bl	800902e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2240      	movs	r2, #64	; 0x40
 8007bc8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d106      	bne.n	8007c42 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e012      	b.n	8007c8c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d10b      	bne.n	8007c8a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e014      	b.n	8007cd8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d10d      	bne.n	8007cd6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	78fa      	ldrb	r2, [r7, #3]
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e014      	b.n	8007d24 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d10d      	bne.n	8007d22 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d007      	beq.n	8007d22 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	78fa      	ldrb	r2, [r7, #3]
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d009      	beq.n	8007d70 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	6852      	ldr	r2, [r2, #4]
 8007d68:	b2d2      	uxtb	r2, r2
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	4798      	blx	r3
  }

  return USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b087      	sub	sp, #28
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d98:	8a3b      	ldrh	r3, [r7, #16]
 8007d9a:	021b      	lsls	r3, r3, #8
 8007d9c:	b21a      	sxth	r2, r3
 8007d9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	b21b      	sxth	r3, r3
 8007da6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007da8:	89fb      	ldrh	r3, [r7, #14]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
	...

08007db8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d005      	beq.n	8007dde <USBD_StdDevReq+0x26>
 8007dd2:	2b40      	cmp	r3, #64	; 0x40
 8007dd4:	d853      	bhi.n	8007e7e <USBD_StdDevReq+0xc6>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <USBD_StdDevReq+0x3a>
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	d14f      	bne.n	8007e7e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	4798      	blx	r3
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]
      break;
 8007df0:	e04a      	b.n	8007e88 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	785b      	ldrb	r3, [r3, #1]
 8007df6:	2b09      	cmp	r3, #9
 8007df8:	d83b      	bhi.n	8007e72 <USBD_StdDevReq+0xba>
 8007dfa:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <USBD_StdDevReq+0x48>)
 8007dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e00:	08007e55 	.word	0x08007e55
 8007e04:	08007e69 	.word	0x08007e69
 8007e08:	08007e73 	.word	0x08007e73
 8007e0c:	08007e5f 	.word	0x08007e5f
 8007e10:	08007e73 	.word	0x08007e73
 8007e14:	08007e33 	.word	0x08007e33
 8007e18:	08007e29 	.word	0x08007e29
 8007e1c:	08007e73 	.word	0x08007e73
 8007e20:	08007e4b 	.word	0x08007e4b
 8007e24:	08007e3d 	.word	0x08007e3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f9de 	bl	80081ec <USBD_GetDescriptor>
          break;
 8007e30:	e024      	b.n	8007e7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fb6d 	bl	8008514 <USBD_SetAddress>
          break;
 8007e3a:	e01f      	b.n	8007e7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fbac 	bl	800859c <USBD_SetConfig>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]
          break;
 8007e48:	e018      	b.n	8007e7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fc4b 	bl	80086e8 <USBD_GetConfig>
          break;
 8007e52:	e013      	b.n	8007e7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fc7c 	bl	8008754 <USBD_GetStatus>
          break;
 8007e5c:	e00e      	b.n	8007e7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fcab 	bl	80087bc <USBD_SetFeature>
          break;
 8007e66:	e009      	b.n	8007e7c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fcba 	bl	80087e4 <USBD_ClrFeature>
          break;
 8007e70:	e004      	b.n	8007e7c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fd11 	bl	800889c <USBD_CtlError>
          break;
 8007e7a:	bf00      	nop
      }
      break;
 8007e7c:	e004      	b.n	8007e88 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fd0b 	bl	800889c <USBD_CtlError>
      break;
 8007e86:	bf00      	nop
  }

  return ret;
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop

08007e94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eaa:	2b40      	cmp	r3, #64	; 0x40
 8007eac:	d005      	beq.n	8007eba <USBD_StdItfReq+0x26>
 8007eae:	2b40      	cmp	r3, #64	; 0x40
 8007eb0:	d82f      	bhi.n	8007f12 <USBD_StdItfReq+0x7e>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <USBD_StdItfReq+0x26>
 8007eb6:	2b20      	cmp	r3, #32
 8007eb8:	d12b      	bne.n	8007f12 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d81d      	bhi.n	8007f04 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	889b      	ldrh	r3, [r3, #4]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d813      	bhi.n	8007efa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	4798      	blx	r3
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	88db      	ldrh	r3, [r3, #6]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d110      	bne.n	8007f0e <USBD_StdItfReq+0x7a>
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10d      	bne.n	8007f0e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fd80 	bl	80089f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ef8:	e009      	b.n	8007f0e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fccd 	bl	800889c <USBD_CtlError>
          break;
 8007f02:	e004      	b.n	8007f0e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fcc8 	bl	800889c <USBD_CtlError>
          break;
 8007f0c:	e000      	b.n	8007f10 <USBD_StdItfReq+0x7c>
          break;
 8007f0e:	bf00      	nop
      }
      break;
 8007f10:	e004      	b.n	8007f1c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fcc1 	bl	800889c <USBD_CtlError>
      break;
 8007f1a:	bf00      	nop
  }

  return ret;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	889b      	ldrh	r3, [r3, #4]
 8007f38:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f42:	2b40      	cmp	r3, #64	; 0x40
 8007f44:	d007      	beq.n	8007f56 <USBD_StdEPReq+0x30>
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	f200 8145 	bhi.w	80081d6 <USBD_StdEPReq+0x2b0>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00c      	beq.n	8007f6a <USBD_StdEPReq+0x44>
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	f040 8140 	bne.w	80081d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]
      break;
 8007f68:	e13a      	b.n	80081e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	785b      	ldrb	r3, [r3, #1]
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d007      	beq.n	8007f82 <USBD_StdEPReq+0x5c>
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	f300 8129 	bgt.w	80081ca <USBD_StdEPReq+0x2a4>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d07f      	beq.n	800807c <USBD_StdEPReq+0x156>
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d03c      	beq.n	8007ffa <USBD_StdEPReq+0xd4>
 8007f80:	e123      	b.n	80081ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d002      	beq.n	8007f94 <USBD_StdEPReq+0x6e>
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d016      	beq.n	8007fc0 <USBD_StdEPReq+0x9a>
 8007f92:	e02c      	b.n	8007fee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00d      	beq.n	8007fb6 <USBD_StdEPReq+0x90>
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	2b80      	cmp	r3, #128	; 0x80
 8007f9e:	d00a      	beq.n	8007fb6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 f887 	bl	80090b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007faa:	2180      	movs	r1, #128	; 0x80
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f001 f883 	bl	80090b8 <USBD_LL_StallEP>
 8007fb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fb4:	e020      	b.n	8007ff8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fc6f 	bl	800889c <USBD_CtlError>
              break;
 8007fbe:	e01b      	b.n	8007ff8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	885b      	ldrh	r3, [r3, #2]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10e      	bne.n	8007fe6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <USBD_StdEPReq+0xc0>
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b80      	cmp	r3, #128	; 0x80
 8007fd2:	d008      	beq.n	8007fe6 <USBD_StdEPReq+0xc0>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	88db      	ldrh	r3, [r3, #6]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d104      	bne.n	8007fe6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 f869 	bl	80090b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fd06 	bl	80089f8 <USBD_CtlSendStatus>

              break;
 8007fec:	e004      	b.n	8007ff8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fc53 	bl	800889c <USBD_CtlError>
              break;
 8007ff6:	bf00      	nop
          }
          break;
 8007ff8:	e0ec      	b.n	80081d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b02      	cmp	r3, #2
 8008004:	d002      	beq.n	800800c <USBD_StdEPReq+0xe6>
 8008006:	2b03      	cmp	r3, #3
 8008008:	d016      	beq.n	8008038 <USBD_StdEPReq+0x112>
 800800a:	e030      	b.n	800806e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800800c:	7bbb      	ldrb	r3, [r7, #14]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00d      	beq.n	800802e <USBD_StdEPReq+0x108>
 8008012:	7bbb      	ldrb	r3, [r7, #14]
 8008014:	2b80      	cmp	r3, #128	; 0x80
 8008016:	d00a      	beq.n	800802e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f001 f84b 	bl	80090b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008022:	2180      	movs	r1, #128	; 0x80
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 f847 	bl	80090b8 <USBD_LL_StallEP>
 800802a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800802c:	e025      	b.n	800807a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fc33 	bl	800889c <USBD_CtlError>
              break;
 8008036:	e020      	b.n	800807a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	885b      	ldrh	r3, [r3, #2]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d11b      	bne.n	8008078 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008046:	2b00      	cmp	r3, #0
 8008048:	d004      	beq.n	8008054 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 f851 	bl	80090f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fccf 	bl	80089f8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	4798      	blx	r3
 8008068:	4603      	mov	r3, r0
 800806a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800806c:	e004      	b.n	8008078 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fc13 	bl	800889c <USBD_CtlError>
              break;
 8008076:	e000      	b.n	800807a <USBD_StdEPReq+0x154>
              break;
 8008078:	bf00      	nop
          }
          break;
 800807a:	e0ab      	b.n	80081d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d002      	beq.n	800808e <USBD_StdEPReq+0x168>
 8008088:	2b03      	cmp	r3, #3
 800808a:	d032      	beq.n	80080f2 <USBD_StdEPReq+0x1cc>
 800808c:	e097      	b.n	80081be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d007      	beq.n	80080a4 <USBD_StdEPReq+0x17e>
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	2b80      	cmp	r3, #128	; 0x80
 8008098:	d004      	beq.n	80080a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fbfd 	bl	800889c <USBD_CtlError>
                break;
 80080a2:	e091      	b.n	80081c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	da0b      	bge.n	80080c4 <USBD_StdEPReq+0x19e>
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	3310      	adds	r3, #16
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	3304      	adds	r3, #4
 80080c2:	e00b      	b.n	80080dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	4413      	add	r3, r2
 80080da:	3304      	adds	r3, #4
 80080dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2200      	movs	r2, #0
 80080e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2202      	movs	r2, #2
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fc47 	bl	800897e <USBD_CtlSendData>
              break;
 80080f0:	e06a      	b.n	80081c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	da11      	bge.n	800811e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	f003 020f 	and.w	r2, r3, #15
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	3324      	adds	r3, #36	; 0x24
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d117      	bne.n	8008144 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fbc0 	bl	800889c <USBD_CtlError>
                  break;
 800811c:	e054      	b.n	80081c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	f003 020f 	and.w	r2, r3, #15
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	440b      	add	r3, r1
 8008130:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d104      	bne.n	8008144 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fbad 	bl	800889c <USBD_CtlError>
                  break;
 8008142:	e041      	b.n	80081c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008148:	2b00      	cmp	r3, #0
 800814a:	da0b      	bge.n	8008164 <USBD_StdEPReq+0x23e>
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008152:	4613      	mov	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	3310      	adds	r3, #16
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	4413      	add	r3, r2
 8008160:	3304      	adds	r3, #4
 8008162:	e00b      	b.n	800817c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	4413      	add	r3, r2
 800817a:	3304      	adds	r3, #4
 800817c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <USBD_StdEPReq+0x264>
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	2b80      	cmp	r3, #128	; 0x80
 8008188:	d103      	bne.n	8008192 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2200      	movs	r2, #0
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	e00e      	b.n	80081b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 ffcc 	bl	8009134 <USBD_LL_IsStallEP>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2201      	movs	r2, #1
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	e002      	b.n	80081b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2200      	movs	r2, #0
 80081ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2202      	movs	r2, #2
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fbe1 	bl	800897e <USBD_CtlSendData>
              break;
 80081bc:	e004      	b.n	80081c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fb6b 	bl	800889c <USBD_CtlError>
              break;
 80081c6:	bf00      	nop
          }
          break;
 80081c8:	e004      	b.n	80081d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fb65 	bl	800889c <USBD_CtlError>
          break;
 80081d2:	bf00      	nop
      }
      break;
 80081d4:	e004      	b.n	80081e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fb5f 	bl	800889c <USBD_CtlError>
      break;
 80081de:	bf00      	nop
  }

  return ret;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	885b      	ldrh	r3, [r3, #2]
 8008206:	0a1b      	lsrs	r3, r3, #8
 8008208:	b29b      	uxth	r3, r3
 800820a:	3b01      	subs	r3, #1
 800820c:	2b0e      	cmp	r3, #14
 800820e:	f200 8152 	bhi.w	80084b6 <USBD_GetDescriptor+0x2ca>
 8008212:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <USBD_GetDescriptor+0x2c>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	08008289 	.word	0x08008289
 800821c:	080082a1 	.word	0x080082a1
 8008220:	080082e1 	.word	0x080082e1
 8008224:	080084b7 	.word	0x080084b7
 8008228:	080084b7 	.word	0x080084b7
 800822c:	08008457 	.word	0x08008457
 8008230:	08008483 	.word	0x08008483
 8008234:	080084b7 	.word	0x080084b7
 8008238:	080084b7 	.word	0x080084b7
 800823c:	080084b7 	.word	0x080084b7
 8008240:	080084b7 	.word	0x080084b7
 8008244:	080084b7 	.word	0x080084b7
 8008248:	080084b7 	.word	0x080084b7
 800824c:	080084b7 	.word	0x080084b7
 8008250:	08008255 	.word	0x08008255
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	7c12      	ldrb	r2, [r2, #16]
 800826c:	f107 0108 	add.w	r1, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008276:	e126      	b.n	80084c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fb0e 	bl	800889c <USBD_CtlError>
        err++;
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	3301      	adds	r3, #1
 8008284:	72fb      	strb	r3, [r7, #11]
      break;
 8008286:	e11e      	b.n	80084c6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	7c12      	ldrb	r2, [r2, #16]
 8008294:	f107 0108 	add.w	r1, r7, #8
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
 800829c:	60f8      	str	r0, [r7, #12]
      break;
 800829e:	e112      	b.n	80084c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	7c1b      	ldrb	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10d      	bne.n	80082c4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	f107 0208 	add.w	r2, r7, #8
 80082b4:	4610      	mov	r0, r2
 80082b6:	4798      	blx	r3
 80082b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	2202      	movs	r2, #2
 80082c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082c2:	e100      	b.n	80084c6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	f107 0208 	add.w	r2, r7, #8
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3301      	adds	r3, #1
 80082da:	2202      	movs	r2, #2
 80082dc:	701a      	strb	r2, [r3, #0]
      break;
 80082de:	e0f2      	b.n	80084c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	885b      	ldrh	r3, [r3, #2]
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b05      	cmp	r3, #5
 80082e8:	f200 80ac 	bhi.w	8008444 <USBD_GetDescriptor+0x258>
 80082ec:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <USBD_GetDescriptor+0x108>)
 80082ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f2:	bf00      	nop
 80082f4:	0800830d 	.word	0x0800830d
 80082f8:	08008341 	.word	0x08008341
 80082fc:	08008375 	.word	0x08008375
 8008300:	080083a9 	.word	0x080083a9
 8008304:	080083dd 	.word	0x080083dd
 8008308:	08008411 	.word	0x08008411
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	7c12      	ldrb	r2, [r2, #16]
 8008324:	f107 0108 	add.w	r1, r7, #8
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832e:	e091      	b.n	8008454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fab2 	bl	800889c <USBD_CtlError>
            err++;
 8008338:	7afb      	ldrb	r3, [r7, #11]
 800833a:	3301      	adds	r3, #1
 800833c:	72fb      	strb	r3, [r7, #11]
          break;
 800833e:	e089      	b.n	8008454 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7c12      	ldrb	r2, [r2, #16]
 8008358:	f107 0108 	add.w	r1, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008362:	e077      	b.n	8008454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa98 	bl	800889c <USBD_CtlError>
            err++;
 800836c:	7afb      	ldrb	r3, [r7, #11]
 800836e:	3301      	adds	r3, #1
 8008370:	72fb      	strb	r3, [r7, #11]
          break;
 8008372:	e06f      	b.n	8008454 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7c12      	ldrb	r2, [r2, #16]
 800838c:	f107 0108 	add.w	r1, r7, #8
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008396:	e05d      	b.n	8008454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa7e 	bl	800889c <USBD_CtlError>
            err++;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	3301      	adds	r3, #1
 80083a4:	72fb      	strb	r3, [r7, #11]
          break;
 80083a6:	e055      	b.n	8008454 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7c12      	ldrb	r2, [r2, #16]
 80083c0:	f107 0108 	add.w	r1, r7, #8
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ca:	e043      	b.n	8008454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa64 	bl	800889c <USBD_CtlError>
            err++;
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	3301      	adds	r3, #1
 80083d8:	72fb      	strb	r3, [r7, #11]
          break;
 80083da:	e03b      	b.n	8008454 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	7c12      	ldrb	r2, [r2, #16]
 80083f4:	f107 0108 	add.w	r1, r7, #8
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fe:	e029      	b.n	8008454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa4a 	bl	800889c <USBD_CtlError>
            err++;
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	3301      	adds	r3, #1
 800840c:	72fb      	strb	r3, [r7, #11]
          break;
 800840e:	e021      	b.n	8008454 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	7c12      	ldrb	r2, [r2, #16]
 8008428:	f107 0108 	add.w	r1, r7, #8
 800842c:	4610      	mov	r0, r2
 800842e:	4798      	blx	r3
 8008430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008432:	e00f      	b.n	8008454 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa30 	bl	800889c <USBD_CtlError>
            err++;
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	3301      	adds	r3, #1
 8008440:	72fb      	strb	r3, [r7, #11]
          break;
 8008442:	e007      	b.n	8008454 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa28 	bl	800889c <USBD_CtlError>
          err++;
 800844c:	7afb      	ldrb	r3, [r7, #11]
 800844e:	3301      	adds	r3, #1
 8008450:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008452:	bf00      	nop
      }
      break;
 8008454:	e037      	b.n	80084c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	7c1b      	ldrb	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d109      	bne.n	8008472 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008466:	f107 0208 	add.w	r2, r7, #8
 800846a:	4610      	mov	r0, r2
 800846c:	4798      	blx	r3
 800846e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008470:	e029      	b.n	80084c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fa11 	bl	800889c <USBD_CtlError>
        err++;
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	3301      	adds	r3, #1
 800847e:	72fb      	strb	r3, [r7, #11]
      break;
 8008480:	e021      	b.n	80084c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	7c1b      	ldrb	r3, [r3, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10d      	bne.n	80084a6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008492:	f107 0208 	add.w	r2, r7, #8
 8008496:	4610      	mov	r0, r2
 8008498:	4798      	blx	r3
 800849a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3301      	adds	r3, #1
 80084a0:	2207      	movs	r2, #7
 80084a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084a4:	e00f      	b.n	80084c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f9f7 	bl	800889c <USBD_CtlError>
        err++;
 80084ae:	7afb      	ldrb	r3, [r7, #11]
 80084b0:	3301      	adds	r3, #1
 80084b2:	72fb      	strb	r3, [r7, #11]
      break;
 80084b4:	e007      	b.n	80084c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f9ef 	bl	800889c <USBD_CtlError>
      err++;
 80084be:	7afb      	ldrb	r3, [r7, #11]
 80084c0:	3301      	adds	r3, #1
 80084c2:	72fb      	strb	r3, [r7, #11]
      break;
 80084c4:	bf00      	nop
  }

  if (err != 0U)
 80084c6:	7afb      	ldrb	r3, [r7, #11]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d11e      	bne.n	800850a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	88db      	ldrh	r3, [r3, #6]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d016      	beq.n	8008502 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80084d4:	893b      	ldrh	r3, [r7, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00e      	beq.n	80084f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	88da      	ldrh	r2, [r3, #6]
 80084de:	893b      	ldrh	r3, [r7, #8]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	bf28      	it	cs
 80084e4:	4613      	movcs	r3, r2
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084ea:	893b      	ldrh	r3, [r7, #8]
 80084ec:	461a      	mov	r2, r3
 80084ee:	68f9      	ldr	r1, [r7, #12]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fa44 	bl	800897e <USBD_CtlSendData>
 80084f6:	e009      	b.n	800850c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f9ce 	bl	800889c <USBD_CtlError>
 8008500:	e004      	b.n	800850c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fa78 	bl	80089f8 <USBD_CtlSendStatus>
 8008508:	e000      	b.n	800850c <USBD_GetDescriptor+0x320>
    return;
 800850a:	bf00      	nop
  }
}
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop

08008514 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	889b      	ldrh	r3, [r3, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d131      	bne.n	800858a <USBD_SetAddress+0x76>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	88db      	ldrh	r3, [r3, #6]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d12d      	bne.n	800858a <USBD_SetAddress+0x76>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	885b      	ldrh	r3, [r3, #2]
 8008532:	2b7f      	cmp	r3, #127	; 0x7f
 8008534:	d829      	bhi.n	800858a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	885b      	ldrh	r3, [r3, #2]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008540:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b03      	cmp	r3, #3
 800854c:	d104      	bne.n	8008558 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f9a3 	bl	800889c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008556:	e01d      	b.n	8008594 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	7bfa      	ldrb	r2, [r7, #15]
 800855c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fe11 	bl	800918c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fa44 	bl	80089f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d004      	beq.n	8008580 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2202      	movs	r2, #2
 800857a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857e:	e009      	b.n	8008594 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008588:	e004      	b.n	8008594 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f985 	bl	800889c <USBD_CtlError>
  }
}
 8008592:	bf00      	nop
 8008594:	bf00      	nop
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	885b      	ldrh	r3, [r3, #2]
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	4b4c      	ldr	r3, [pc, #304]	; (80086e4 <USBD_SetConfig+0x148>)
 80085b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085b4:	4b4b      	ldr	r3, [pc, #300]	; (80086e4 <USBD_SetConfig+0x148>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d905      	bls.n	80085c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f96c 	bl	800889c <USBD_CtlError>
    return USBD_FAIL;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e088      	b.n	80086da <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d002      	beq.n	80085da <USBD_SetConfig+0x3e>
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d025      	beq.n	8008624 <USBD_SetConfig+0x88>
 80085d8:	e071      	b.n	80086be <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085da:	4b42      	ldr	r3, [pc, #264]	; (80086e4 <USBD_SetConfig+0x148>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d01c      	beq.n	800861c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80085e2:	4b40      	ldr	r3, [pc, #256]	; (80086e4 <USBD_SetConfig+0x148>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085ec:	4b3d      	ldr	r3, [pc, #244]	; (80086e4 <USBD_SetConfig+0x148>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff f91e 	bl	8007834 <USBD_SetClassConfig>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f949 	bl	800889c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800860a:	e065      	b.n	80086d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f9f3 	bl	80089f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2203      	movs	r2, #3
 8008616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800861a:	e05d      	b.n	80086d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f9eb 	bl	80089f8 <USBD_CtlSendStatus>
      break;
 8008622:	e059      	b.n	80086d8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008624:	4b2f      	ldr	r3, [pc, #188]	; (80086e4 <USBD_SetConfig+0x148>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d112      	bne.n	8008652 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008634:	4b2b      	ldr	r3, [pc, #172]	; (80086e4 <USBD_SetConfig+0x148>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800863e:	4b29      	ldr	r3, [pc, #164]	; (80086e4 <USBD_SetConfig+0x148>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff f911 	bl	800786c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f9d4 	bl	80089f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008650:	e042      	b.n	80086d8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008652:	4b24      	ldr	r3, [pc, #144]	; (80086e4 <USBD_SetConfig+0x148>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	429a      	cmp	r2, r3
 800865e:	d02a      	beq.n	80086b6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff f8ff 	bl	800786c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800866e:	4b1d      	ldr	r3, [pc, #116]	; (80086e4 <USBD_SetConfig+0x148>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008678:	4b1a      	ldr	r3, [pc, #104]	; (80086e4 <USBD_SetConfig+0x148>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff f8d8 	bl	8007834 <USBD_SetClassConfig>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00f      	beq.n	80086ae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f903 	bl	800889c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff f8e4 	bl	800786c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086ac:	e014      	b.n	80086d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f9a2 	bl	80089f8 <USBD_CtlSendStatus>
      break;
 80086b4:	e010      	b.n	80086d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f99e 	bl	80089f8 <USBD_CtlSendStatus>
      break;
 80086bc:	e00c      	b.n	80086d8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f8eb 	bl	800889c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086c6:	4b07      	ldr	r3, [pc, #28]	; (80086e4 <USBD_SetConfig+0x148>)
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff f8cd 	bl	800786c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086d2:	2303      	movs	r3, #3
 80086d4:	73fb      	strb	r3, [r7, #15]
      break;
 80086d6:	bf00      	nop
  }

  return ret;
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	2000064e 	.word	0x2000064e

080086e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	88db      	ldrh	r3, [r3, #6]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d004      	beq.n	8008704 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f8cd 	bl	800889c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008702:	e023      	b.n	800874c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	dc02      	bgt.n	8008716 <USBD_GetConfig+0x2e>
 8008710:	2b00      	cmp	r3, #0
 8008712:	dc03      	bgt.n	800871c <USBD_GetConfig+0x34>
 8008714:	e015      	b.n	8008742 <USBD_GetConfig+0x5a>
 8008716:	2b03      	cmp	r3, #3
 8008718:	d00b      	beq.n	8008732 <USBD_GetConfig+0x4a>
 800871a:	e012      	b.n	8008742 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	3308      	adds	r3, #8
 8008726:	2201      	movs	r2, #1
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f927 	bl	800897e <USBD_CtlSendData>
        break;
 8008730:	e00c      	b.n	800874c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3304      	adds	r3, #4
 8008736:	2201      	movs	r2, #1
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f91f 	bl	800897e <USBD_CtlSendData>
        break;
 8008740:	e004      	b.n	800874c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f8a9 	bl	800889c <USBD_CtlError>
        break;
 800874a:	bf00      	nop
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008764:	b2db      	uxtb	r3, r3
 8008766:	3b01      	subs	r3, #1
 8008768:	2b02      	cmp	r3, #2
 800876a:	d81e      	bhi.n	80087aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	88db      	ldrh	r3, [r3, #6]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d004      	beq.n	800877e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f890 	bl	800889c <USBD_CtlError>
        break;
 800877c:	e01a      	b.n	80087b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800878a:	2b00      	cmp	r3, #0
 800878c:	d005      	beq.n	800879a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f043 0202 	orr.w	r2, r3, #2
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	330c      	adds	r3, #12
 800879e:	2202      	movs	r2, #2
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f8eb 	bl	800897e <USBD_CtlSendData>
      break;
 80087a8:	e004      	b.n	80087b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f875 	bl	800889c <USBD_CtlError>
      break;
 80087b2:	bf00      	nop
  }
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	885b      	ldrh	r3, [r3, #2]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d106      	bne.n	80087dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f90e 	bl	80089f8 <USBD_CtlSendStatus>
  }
}
 80087dc:	bf00      	nop
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	3b01      	subs	r3, #1
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d80b      	bhi.n	8008814 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	885b      	ldrh	r3, [r3, #2]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d10c      	bne.n	800881e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f8f3 	bl	80089f8 <USBD_CtlSendStatus>
      }
      break;
 8008812:	e004      	b.n	800881e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f840 	bl	800889c <USBD_CtlError>
      break;
 800881c:	e000      	b.n	8008820 <USBD_ClrFeature+0x3c>
      break;
 800881e:	bf00      	nop
  }
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	781a      	ldrb	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3301      	adds	r3, #1
 8008842:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	781a      	ldrb	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3301      	adds	r3, #1
 8008850:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fa91 	bl	8007d7a <SWAPBYTE>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3301      	adds	r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff fa84 	bl	8007d7a <SWAPBYTE>
 8008872:	4603      	mov	r3, r0
 8008874:	461a      	mov	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	3301      	adds	r3, #1
 8008884:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff fa77 	bl	8007d7a <SWAPBYTE>
 800888c:	4603      	mov	r3, r0
 800888e:	461a      	mov	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	80da      	strh	r2, [r3, #6]
}
 8008894:	bf00      	nop
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088a6:	2180      	movs	r1, #128	; 0x80
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fc05 	bl	80090b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088ae:	2100      	movs	r1, #0
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fc01 	bl	80090b8 <USBD_LL_StallEP>
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b086      	sub	sp, #24
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d036      	beq.n	8008942 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088d8:	6938      	ldr	r0, [r7, #16]
 80088da:	f000 f836 	bl	800894a <USBD_GetLen>
 80088de:	4603      	mov	r3, r0
 80088e0:	3301      	adds	r3, #1
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	4413      	add	r3, r2
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	7812      	ldrb	r2, [r2, #0]
 80088f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	3301      	adds	r3, #1
 80088fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	4413      	add	r3, r2
 8008904:	2203      	movs	r2, #3
 8008906:	701a      	strb	r2, [r3, #0]
  idx++;
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	3301      	adds	r3, #1
 800890c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800890e:	e013      	b.n	8008938 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	4413      	add	r3, r2
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	7812      	ldrb	r2, [r2, #0]
 800891a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	3301      	adds	r3, #1
 8008920:	613b      	str	r3, [r7, #16]
    idx++;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	3301      	adds	r3, #1
 8008926:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	4413      	add	r3, r2
 800892e:	2200      	movs	r2, #0
 8008930:	701a      	strb	r2, [r3, #0]
    idx++;
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	3301      	adds	r3, #1
 8008936:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e7      	bne.n	8008910 <USBD_GetString+0x52>
 8008940:	e000      	b.n	8008944 <USBD_GetString+0x86>
    return;
 8008942:	bf00      	nop
  }
}
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800894a:	b480      	push	{r7}
 800894c:	b085      	sub	sp, #20
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800895a:	e005      	b.n	8008968 <USBD_GetLen+0x1e>
  {
    len++;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	3301      	adds	r3, #1
 8008960:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	3301      	adds	r3, #1
 8008966:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1f5      	bne.n	800895c <USBD_GetLen+0x12>
  }

  return len;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2202      	movs	r2, #2
 800898e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	2100      	movs	r1, #0
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fc10 	bl	80091ca <USBD_LL_Transmit>

  return USBD_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	2100      	movs	r1, #0
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 fbff 	bl	80091ca <USBD_LL_Transmit>

  return USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	2100      	movs	r1, #0
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 fc0f 	bl	800920c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2204      	movs	r2, #4
 8008a04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fbdb 	bl	80091ca <USBD_LL_Transmit>

  return USBD_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2205      	movs	r2, #5
 8008a2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a2e:	2300      	movs	r3, #0
 8008a30:	2200      	movs	r2, #0
 8008a32:	2100      	movs	r1, #0
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fbe9 	bl	800920c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	490e      	ldr	r1, [pc, #56]	; (8008a84 <MX_USB_DEVICE_Init+0x40>)
 8008a4c:	480e      	ldr	r0, [pc, #56]	; (8008a88 <MX_USB_DEVICE_Init+0x44>)
 8008a4e:	f7fe fe83 	bl	8007758 <USBD_Init>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a58:	f7f8 fcfe 	bl	8001458 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008a5c:	490b      	ldr	r1, [pc, #44]	; (8008a8c <MX_USB_DEVICE_Init+0x48>)
 8008a5e:	480a      	ldr	r0, [pc, #40]	; (8008a88 <MX_USB_DEVICE_Init+0x44>)
 8008a60:	f7fe feaa 	bl	80077b8 <USBD_RegisterClass>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a6a:	f7f8 fcf5 	bl	8001458 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a6e:	4806      	ldr	r0, [pc, #24]	; (8008a88 <MX_USB_DEVICE_Init+0x44>)
 8008a70:	f7fe fec9 	bl	8007806 <USBD_Start>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008a7a:	f7f8 fced 	bl	8001458 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a7e:	bf00      	nop
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	2000010c 	.word	0x2000010c
 8008a88:	20000670 	.word	0x20000670
 8008a8c:	2000000c 	.word	0x2000000c

08008a90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	6039      	str	r1, [r7, #0]
 8008a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2212      	movs	r2, #18
 8008aa0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008aa2:	4b03      	ldr	r3, [pc, #12]	; (8008ab0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	2000012c 	.word	0x2000012c

08008ab4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	6039      	str	r1, [r7, #0]
 8008abe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	2204      	movs	r2, #4
 8008ac4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ac6:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	2000014c 	.word	0x2000014c

08008ad8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	6039      	str	r1, [r7, #0]
 8008ae2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d105      	bne.n	8008af6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	4907      	ldr	r1, [pc, #28]	; (8008b0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008aee:	4808      	ldr	r0, [pc, #32]	; (8008b10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008af0:	f7ff fee5 	bl	80088be <USBD_GetString>
 8008af4:	e004      	b.n	8008b00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	4904      	ldr	r1, [pc, #16]	; (8008b0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008afa:	4805      	ldr	r0, [pc, #20]	; (8008b10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008afc:	f7ff fedf 	bl	80088be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b00:	4b02      	ldr	r3, [pc, #8]	; (8008b0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20000940 	.word	0x20000940
 8008b10:	0800f790 	.word	0x0800f790

08008b14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	4904      	ldr	r1, [pc, #16]	; (8008b34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b24:	4804      	ldr	r0, [pc, #16]	; (8008b38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b26:	f7ff feca 	bl	80088be <USBD_GetString>
  return USBD_StrDesc;
 8008b2a:	4b02      	ldr	r3, [pc, #8]	; (8008b34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20000940 	.word	0x20000940
 8008b38:	0800f7a8 	.word	0x0800f7a8

08008b3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	4603      	mov	r3, r0
 8008b44:	6039      	str	r1, [r7, #0]
 8008b46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	221a      	movs	r2, #26
 8008b4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b4e:	f000 f855 	bl	8008bfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b52:	4b02      	ldr	r3, [pc, #8]	; (8008b5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	20000150 	.word	0x20000150

08008b60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	6039      	str	r1, [r7, #0]
 8008b6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d105      	bne.n	8008b7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	4907      	ldr	r1, [pc, #28]	; (8008b94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b76:	4808      	ldr	r0, [pc, #32]	; (8008b98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b78:	f7ff fea1 	bl	80088be <USBD_GetString>
 8008b7c:	e004      	b.n	8008b88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	4904      	ldr	r1, [pc, #16]	; (8008b94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b82:	4805      	ldr	r0, [pc, #20]	; (8008b98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b84:	f7ff fe9b 	bl	80088be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b88:	4b02      	ldr	r3, [pc, #8]	; (8008b94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000940 	.word	0x20000940
 8008b98:	0800f7bc 	.word	0x0800f7bc

08008b9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d105      	bne.n	8008bba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	4907      	ldr	r1, [pc, #28]	; (8008bd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bb2:	4808      	ldr	r0, [pc, #32]	; (8008bd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bb4:	f7ff fe83 	bl	80088be <USBD_GetString>
 8008bb8:	e004      	b.n	8008bc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	4904      	ldr	r1, [pc, #16]	; (8008bd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bbe:	4805      	ldr	r0, [pc, #20]	; (8008bd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bc0:	f7ff fe7d 	bl	80088be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bc4:	4b02      	ldr	r3, [pc, #8]	; (8008bd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000940 	.word	0x20000940
 8008bd4:	0800f7c8 	.word	0x0800f7c8

08008bd8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	4603      	mov	r3, r0
 8008be0:	6039      	str	r1, [r7, #0]
 8008be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	220c      	movs	r2, #12
 8008be8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008bea:	4b03      	ldr	r3, [pc, #12]	; (8008bf8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	20000140 	.word	0x20000140

08008bfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c02:	4b0f      	ldr	r3, [pc, #60]	; (8008c40 <Get_SerialNum+0x44>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c08:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <Get_SerialNum+0x48>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c0e:	4b0e      	ldr	r3, [pc, #56]	; (8008c48 <Get_SerialNum+0x4c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4413      	add	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d009      	beq.n	8008c36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c22:	2208      	movs	r2, #8
 8008c24:	4909      	ldr	r1, [pc, #36]	; (8008c4c <Get_SerialNum+0x50>)
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 f814 	bl	8008c54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c2c:	2204      	movs	r2, #4
 8008c2e:	4908      	ldr	r1, [pc, #32]	; (8008c50 <Get_SerialNum+0x54>)
 8008c30:	68b8      	ldr	r0, [r7, #8]
 8008c32:	f000 f80f 	bl	8008c54 <IntToUnicode>
  }
}
 8008c36:	bf00      	nop
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	1fff7a10 	.word	0x1fff7a10
 8008c44:	1fff7a14 	.word	0x1fff7a14
 8008c48:	1fff7a18 	.word	0x1fff7a18
 8008c4c:	20000152 	.word	0x20000152
 8008c50:	20000162 	.word	0x20000162

08008c54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]
 8008c6a:	e027      	b.n	8008cbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	0f1b      	lsrs	r3, r3, #28
 8008c70:	2b09      	cmp	r3, #9
 8008c72:	d80b      	bhi.n	8008c8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	0f1b      	lsrs	r3, r3, #28
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	4619      	mov	r1, r3
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	440b      	add	r3, r1
 8008c84:	3230      	adds	r2, #48	; 0x30
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	e00a      	b.n	8008ca2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	0f1b      	lsrs	r3, r3, #28
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	4619      	mov	r1, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	440b      	add	r3, r1
 8008c9c:	3237      	adds	r2, #55	; 0x37
 8008c9e:	b2d2      	uxtb	r2, r2
 8008ca0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	011b      	lsls	r3, r3, #4
 8008ca6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	3301      	adds	r3, #1
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	75fb      	strb	r3, [r7, #23]
 8008cbc:	7dfa      	ldrb	r2, [r7, #23]
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d3d3      	bcc.n	8008c6c <IntToUnicode+0x18>
  }
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
 8008cc8:	371c      	adds	r7, #28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
	...

08008cd4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	; 0x28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cdc:	f107 0314 	add.w	r3, r7, #20
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	605a      	str	r2, [r3, #4]
 8008ce6:	609a      	str	r2, [r3, #8]
 8008ce8:	60da      	str	r2, [r3, #12]
 8008cea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cf4:	d13a      	bne.n	8008d6c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	613b      	str	r3, [r7, #16]
 8008cfa:	4b1e      	ldr	r3, [pc, #120]	; (8008d74 <HAL_PCD_MspInit+0xa0>)
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfe:	4a1d      	ldr	r2, [pc, #116]	; (8008d74 <HAL_PCD_MspInit+0xa0>)
 8008d00:	f043 0301 	orr.w	r3, r3, #1
 8008d04:	6313      	str	r3, [r2, #48]	; 0x30
 8008d06:	4b1b      	ldr	r3, [pc, #108]	; (8008d74 <HAL_PCD_MspInit+0xa0>)
 8008d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	613b      	str	r3, [r7, #16]
 8008d10:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d12:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d20:	2303      	movs	r3, #3
 8008d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d24:	230a      	movs	r3, #10
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d28:	f107 0314 	add.w	r3, r7, #20
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4812      	ldr	r0, [pc, #72]	; (8008d78 <HAL_PCD_MspInit+0xa4>)
 8008d30:	f7f9 fad0 	bl	80022d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d34:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <HAL_PCD_MspInit+0xa0>)
 8008d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d38:	4a0e      	ldr	r2, [pc, #56]	; (8008d74 <HAL_PCD_MspInit+0xa0>)
 8008d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d3e:	6353      	str	r3, [r2, #52]	; 0x34
 8008d40:	2300      	movs	r3, #0
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <HAL_PCD_MspInit+0xa0>)
 8008d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d48:	4a0a      	ldr	r2, [pc, #40]	; (8008d74 <HAL_PCD_MspInit+0xa0>)
 8008d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d4e:	6453      	str	r3, [r2, #68]	; 0x44
 8008d50:	4b08      	ldr	r3, [pc, #32]	; (8008d74 <HAL_PCD_MspInit+0xa0>)
 8008d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d58:	60fb      	str	r3, [r7, #12]
 8008d5a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2100      	movs	r1, #0
 8008d60:	2043      	movs	r0, #67	; 0x43
 8008d62:	f7f9 fa64 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d66:	2043      	movs	r0, #67	; 0x43
 8008d68:	f7f9 fa7d 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d6c:	bf00      	nop
 8008d6e:	3728      	adds	r7, #40	; 0x28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40023800 	.word	0x40023800
 8008d78:	40020000 	.word	0x40020000

08008d7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d90:	4619      	mov	r1, r3
 8008d92:	4610      	mov	r0, r2
 8008d94:	f7fe fd82 	bl	800789c <USBD_LL_SetupStage>
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008db2:	78fa      	ldrb	r2, [r7, #3]
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	4613      	mov	r3, r2
 8008db8:	00db      	lsls	r3, r3, #3
 8008dba:	1a9b      	subs	r3, r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	440b      	add	r3, r1
 8008dc0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	f7fe fdbc 	bl	8007946 <USBD_LL_DataOutStage>
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	460b      	mov	r3, r1
 8008de0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008de8:	78fa      	ldrb	r2, [r7, #3]
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	4613      	mov	r3, r2
 8008dee:	00db      	lsls	r3, r3, #3
 8008df0:	1a9b      	subs	r3, r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	3348      	adds	r3, #72	; 0x48
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	78fb      	ldrb	r3, [r7, #3]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f7fe fe05 	bl	8007a0c <USBD_LL_DataInStage>
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe ff19 	bl	8007c50 <USBD_LL_SOF>
}
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d102      	bne.n	8008e40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]
 8008e3e:	e008      	b.n	8008e52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d102      	bne.n	8008e4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	73fb      	strb	r3, [r7, #15]
 8008e4c:	e001      	b.n	8008e52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008e4e:	f7f8 fb03 	bl	8001458 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e58:	7bfa      	ldrb	r2, [r7, #15]
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fe feb9 	bl	8007bd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fe fe65 	bl	8007b38 <USBD_LL_Reset>
}
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe feb4 	bl	8007bf4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	6812      	ldr	r2, [r2, #0]
 8008e9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e9e:	f043 0301 	orr.w	r3, r3, #1
 8008ea2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008eac:	4b04      	ldr	r3, [pc, #16]	; (8008ec0 <HAL_PCD_SuspendCallback+0x48>)
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	4a03      	ldr	r2, [pc, #12]	; (8008ec0 <HAL_PCD_SuspendCallback+0x48>)
 8008eb2:	f043 0306 	orr.w	r3, r3, #6
 8008eb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	e000ed00 	.word	0xe000ed00

08008ec4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fea4 	bl	8007c20 <USBD_LL_Resume>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ef2:	78fa      	ldrb	r2, [r7, #3]
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe fef2 	bl	8007ce0 <USBD_LL_IsoOUTIncomplete>
}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe feba 	bl	8007c94 <USBD_LL_IsoINIncomplete>
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe fef8 	bl	8007d2c <USBD_LL_DevConnected>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe fef5 	bl	8007d42 <USBD_LL_DevDisconnected>
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d13c      	bne.n	8008fea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f70:	4a20      	ldr	r2, [pc, #128]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a1e      	ldr	r2, [pc, #120]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008f7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f80:	4b1c      	ldr	r3, [pc, #112]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008f82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008f88:	4b1a      	ldr	r3, [pc, #104]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008f8a:	2206      	movs	r2, #6
 8008f8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f8e:	4b19      	ldr	r3, [pc, #100]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008f90:	2202      	movs	r2, #2
 8008f92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f94:	4b17      	ldr	r3, [pc, #92]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f9a:	4b16      	ldr	r3, [pc, #88]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008fa0:	4b14      	ldr	r3, [pc, #80]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fa6:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fac:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008fb2:	4b10      	ldr	r3, [pc, #64]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fb8:	4b0e      	ldr	r3, [pc, #56]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fbe:	480d      	ldr	r0, [pc, #52]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008fc0:	f7f9 fb4d 	bl	800265e <HAL_PCD_Init>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008fca:	f7f8 fa45 	bl	8001458 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fce:	2180      	movs	r1, #128	; 0x80
 8008fd0:	4808      	ldr	r0, [pc, #32]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008fd2:	f7fa fcc6 	bl	8003962 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fd6:	2240      	movs	r2, #64	; 0x40
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4806      	ldr	r0, [pc, #24]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008fdc:	f7fa fc7a 	bl	80038d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008fe0:	2280      	movs	r2, #128	; 0x80
 8008fe2:	2101      	movs	r1, #1
 8008fe4:	4803      	ldr	r0, [pc, #12]	; (8008ff4 <USBD_LL_Init+0x94>)
 8008fe6:	f7fa fc75 	bl	80038d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	20000b40 	.word	0x20000b40

08008ff8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800900e:	4618      	mov	r0, r3
 8009010:	f7f9 fc49 	bl	80028a6 <HAL_PCD_Start>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f97e 	bl	800931c <USBD_Get_USB_Status>
 8009020:	4603      	mov	r3, r0
 8009022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009024:	7bbb      	ldrb	r3, [r7, #14]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	4608      	mov	r0, r1
 8009038:	4611      	mov	r1, r2
 800903a:	461a      	mov	r2, r3
 800903c:	4603      	mov	r3, r0
 800903e:	70fb      	strb	r3, [r7, #3]
 8009040:	460b      	mov	r3, r1
 8009042:	70bb      	strb	r3, [r7, #2]
 8009044:	4613      	mov	r3, r2
 8009046:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009056:	78bb      	ldrb	r3, [r7, #2]
 8009058:	883a      	ldrh	r2, [r7, #0]
 800905a:	78f9      	ldrb	r1, [r7, #3]
 800905c:	f7fa f85a 	bl	8003114 <HAL_PCD_EP_Open>
 8009060:	4603      	mov	r3, r0
 8009062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f958 	bl	800931c <USBD_Get_USB_Status>
 800906c:	4603      	mov	r3, r0
 800906e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009070:	7bbb      	ldrb	r3, [r7, #14]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	460b      	mov	r3, r1
 8009084:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f7fa f8a3 	bl	80031e4 <HAL_PCD_EP_Close>
 800909e:	4603      	mov	r3, r0
 80090a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 f939 	bl	800931c <USBD_Get_USB_Status>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090d2:	78fa      	ldrb	r2, [r7, #3]
 80090d4:	4611      	mov	r1, r2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fa f963 	bl	80033a2 <HAL_PCD_EP_SetStall>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 f91a 	bl	800931c <USBD_Get_USB_Status>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009110:	78fa      	ldrb	r2, [r7, #3]
 8009112:	4611      	mov	r1, r2
 8009114:	4618      	mov	r0, r3
 8009116:	f7fa f9a8 	bl	800346a <HAL_PCD_EP_ClrStall>
 800911a:	4603      	mov	r3, r0
 800911c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	4618      	mov	r0, r3
 8009122:	f000 f8fb 	bl	800931c <USBD_Get_USB_Status>
 8009126:	4603      	mov	r3, r0
 8009128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800912a:	7bbb      	ldrb	r3, [r7, #14]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009146:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800914c:	2b00      	cmp	r3, #0
 800914e:	da0b      	bge.n	8009168 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009156:	68f9      	ldr	r1, [r7, #12]
 8009158:	4613      	mov	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	1a9b      	subs	r3, r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	333e      	adds	r3, #62	; 0x3e
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	e00b      	b.n	8009180 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009168:	78fb      	ldrb	r3, [r7, #3]
 800916a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800916e:	68f9      	ldr	r1, [r7, #12]
 8009170:	4613      	mov	r3, r2
 8009172:	00db      	lsls	r3, r3, #3
 8009174:	1a9b      	subs	r3, r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	440b      	add	r3, r1
 800917a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800917e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009180:	4618      	mov	r0, r3
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091a6:	78fa      	ldrb	r2, [r7, #3]
 80091a8:	4611      	mov	r1, r2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7f9 ff8d 	bl	80030ca <HAL_PCD_SetAddress>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f8b0 	bl	800931c <USBD_Get_USB_Status>
 80091bc:	4603      	mov	r3, r0
 80091be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b086      	sub	sp, #24
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	607a      	str	r2, [r7, #4]
 80091d4:	603b      	str	r3, [r7, #0]
 80091d6:	460b      	mov	r3, r1
 80091d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091e8:	7af9      	ldrb	r1, [r7, #11]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	f7fa f88e 	bl	800330e <HAL_PCD_EP_Transmit>
 80091f2:	4603      	mov	r3, r0
 80091f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 f88f 	bl	800931c <USBD_Get_USB_Status>
 80091fe:	4603      	mov	r3, r0
 8009200:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009202:	7dbb      	ldrb	r3, [r7, #22]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	607a      	str	r2, [r7, #4]
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	460b      	mov	r3, r1
 800921a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800922a:	7af9      	ldrb	r1, [r7, #11]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	f7fa f822 	bl	8003278 <HAL_PCD_EP_Receive>
 8009234:	4603      	mov	r3, r0
 8009236:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009238:	7dfb      	ldrb	r3, [r7, #23]
 800923a:	4618      	mov	r0, r3
 800923c:	f000 f86e 	bl	800931c <USBD_Get_USB_Status>
 8009240:	4603      	mov	r3, r0
 8009242:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009244:	7dbb      	ldrb	r3, [r7, #22]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d002      	beq.n	8009268 <HAL_PCDEx_LPM_Callback+0x18>
 8009262:	2b01      	cmp	r3, #1
 8009264:	d01f      	beq.n	80092a6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009266:	e03b      	b.n	80092e0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d007      	beq.n	8009280 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009270:	f7f7 ff1e 	bl	80010b0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009274:	4b1c      	ldr	r3, [pc, #112]	; (80092e8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	4a1b      	ldr	r2, [pc, #108]	; (80092e8 <HAL_PCDEx_LPM_Callback+0x98>)
 800927a:	f023 0306 	bic.w	r3, r3, #6
 800927e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6812      	ldr	r2, [r2, #0]
 800928e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009292:	f023 0301 	bic.w	r3, r3, #1
 8009296:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fcbe 	bl	8007c20 <USBD_LL_Resume>
    break;
 80092a4:	e01c      	b.n	80092e0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6812      	ldr	r2, [r2, #0]
 80092b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092b8:	f043 0301 	orr.w	r3, r3, #1
 80092bc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe fc95 	bl	8007bf4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d005      	beq.n	80092de <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092d2:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <HAL_PCDEx_LPM_Callback+0x98>)
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	4a04      	ldr	r2, [pc, #16]	; (80092e8 <HAL_PCDEx_LPM_Callback+0x98>)
 80092d8:	f043 0306 	orr.w	r3, r3, #6
 80092dc:	6113      	str	r3, [r2, #16]
    break;
 80092de:	bf00      	nop
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	e000ed00 	.word	0xe000ed00

080092ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092f4:	4b03      	ldr	r3, [pc, #12]	; (8009304 <USBD_static_malloc+0x18>)
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20000650 	.word	0x20000650

08009308 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]

}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	2b03      	cmp	r3, #3
 800932e:	d817      	bhi.n	8009360 <USBD_Get_USB_Status+0x44>
 8009330:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <USBD_Get_USB_Status+0x1c>)
 8009332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009336:	bf00      	nop
 8009338:	08009349 	.word	0x08009349
 800933c:	0800934f 	.word	0x0800934f
 8009340:	08009355 	.word	0x08009355
 8009344:	0800935b 	.word	0x0800935b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
    break;
 800934c:	e00b      	b.n	8009366 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800934e:	2303      	movs	r3, #3
 8009350:	73fb      	strb	r3, [r7, #15]
    break;
 8009352:	e008      	b.n	8009366 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009354:	2301      	movs	r3, #1
 8009356:	73fb      	strb	r3, [r7, #15]
    break;
 8009358:	e005      	b.n	8009366 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800935a:	2303      	movs	r3, #3
 800935c:	73fb      	strb	r3, [r7, #15]
    break;
 800935e:	e002      	b.n	8009366 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	73fb      	strb	r3, [r7, #15]
    break;
 8009364:	bf00      	nop
  }
  return usb_status;
 8009366:	7bfb      	ldrb	r3, [r7, #15]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	4608      	mov	r0, r1
 800937e:	4611      	mov	r1, r2
 8009380:	461a      	mov	r2, r3
 8009382:	4603      	mov	r3, r0
 8009384:	70fb      	strb	r3, [r7, #3]
 8009386:	460b      	mov	r3, r1
 8009388:	70bb      	strb	r3, [r7, #2]
 800938a:	4613      	mov	r3, r2
 800938c:	707b      	strb	r3, [r7, #1]
                return 0;
 800938e:	2300      	movs	r3, #0
        }
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	4608      	mov	r0, r1
 80093a6:	4611      	mov	r1, r2
 80093a8:	461a      	mov	r2, r3
 80093aa:	4603      	mov	r3, r0
 80093ac:	70fb      	strb	r3, [r7, #3]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70bb      	strb	r3, [r7, #2]
 80093b2:	4613      	mov	r3, r2
 80093b4:	707b      	strb	r3, [r7, #1]
                return 0;
 80093b6:	2300      	movs	r3, #0
        }
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
                return 0;
 80093cc:	2300      	movs	r3, #0
        }
 80093ce:	4618      	mov	r0, r3
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
                return 0;
 80093e2:	2300      	movs	r3, #0
        }
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
                return 0;
 80093f8:	2300      	movs	r3, #0
        }
 80093fa:	4618      	mov	r0, r3
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 8009406:	b480      	push	{r7}
 8009408:	b083      	sub	sp, #12
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	70fb      	strb	r3, [r7, #3]
                return;
 8009412:	bf00      	nop
        } // Note used for hubs only!
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800941e:	b480      	push	{r7}
 8009420:	b083      	sub	sp, #12
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	460b      	mov	r3, r1
 8009428:	807b      	strh	r3, [r7, #2]
 800942a:	4613      	mov	r3, r2
 800942c:	803b      	strh	r3, [r7, #0]
                return false;
 800942e:	2300      	movs	r3, #0
        }
 8009430:	4618      	mov	r0, r3
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
                return false;
 8009448:	2300      	movs	r3, #0
        }
 800944a:	4618      	mov	r0, r3
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 8009456:	b480      	push	{r7}
 8009458:	b083      	sub	sp, #12
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
                return true;
 8009462:	2301      	movs	r3, #1
        }
 8009464:	4618      	mov	r0, r3
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 8009478:	687b      	ldr	r3, [r7, #4]
        };
 800947a:	4618      	mov	r0, r3
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 8009486:	b480      	push	{r7}
 8009488:	b085      	sub	sp, #20
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	2b0f      	cmp	r3, #15
 8009498:	d812      	bhi.n	80094c0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800949a:	7bfa      	ldrb	r2, [r7, #15]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	321e      	adds	r2, #30
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d107      	bne.n	80094b8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 80094a8:	7bfa      	ldrb	r2, [r7, #15]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	321e      	adds	r2, #30
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	e004      	b.n	80094c2 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
 80094ba:	3301      	adds	r3, #1
 80094bc:	73fb      	strb	r3, [r7, #15]
 80094be:	e7e9      	b.n	8009494 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 80094c0:	23d3      	movs	r3, #211	; 0xd3
        };
 80094c2:	4618      	mov	r0, r3
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	701a      	strb	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	705a      	strb	r2, [r3, #1]
 80094e2:	2200      	movs	r2, #0
 80094e4:	709a      	strb	r2, [r3, #2]
 80094e6:	2200      	movs	r2, #0
 80094e8:	70da      	strb	r2, [r3, #3]
 80094ea:	2200      	movs	r2, #0
 80094ec:	711a      	strb	r2, [r3, #4]
        };
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4618      	mov	r0, r3
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	711a      	strb	r2, [r3, #4]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	715a      	strb	r2, [r3, #5]
        };
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781a      	ldrb	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	715a      	strb	r2, [r3, #5]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	795a      	ldrb	r2, [r3, #5]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	711a      	strb	r2, [r3, #4]
        };
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	601a      	str	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	711a      	strb	r2, [r3, #4]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	80da      	strh	r2, [r3, #6]
        };
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4618      	mov	r0, r3
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	601a      	str	r2, [r3, #0]
                countDown = 0;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	80da      	strh	r2, [r3, #6]
        };
 8009596:	bf00      	nop
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 80095a2:	b480      	push	{r7}
 80095a4:	b085      	sub	sp, #20
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	607a      	str	r2, [r7, #4]
 80095ae:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	791b      	ldrb	r3, [r3, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d009      	beq.n	80095d0 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 80095bc:	e029      	b.n	8009612 <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	887a      	ldrh	r2, [r7, #2]
 80095c2:	80da      	strh	r2, [r3, #6]
                                nStage++;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	791b      	ldrb	r3, [r3, #4]
 80095c8:	3301      	adds	r3, #1
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	88db      	ldrh	r3, [r3, #6]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d015      	beq.n	8009604 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d011      	beq.n	8009604 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	88db      	ldrh	r3, [r3, #6]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	80da      	strh	r2, [r3, #6]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	1c5a      	adds	r2, r3, #1
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	801a      	strh	r2, [r3, #0]
 8009602:	e7e5      	b.n	80095d0 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	88db      	ldrh	r3, [r3, #6]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d102      	bne.n	8009612 <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	88db      	ldrh	r3, [r3, #6]
 8009616:	2b00      	cmp	r3, #0
 8009618:	bf0c      	ite	eq
 800961a:	2301      	moveq	r3, #1
 800961c:	2300      	movne	r3, #0
 800961e:	b2db      	uxtb	r3, r3
        };
 8009620:	4618      	mov	r0, r3
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	461a      	mov	r2, r3
 800963a:	4603      	mov	r3, r0
 800963c:	70fb      	strb	r3, [r7, #3]
 800963e:	460b      	mov	r3, r1
 8009640:	70bb      	strb	r3, [r7, #2]
 8009642:	4613      	mov	r3, r2
 8009644:	707b      	strb	r3, [r7, #1]
        };
 8009646:	bf00      	nop
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
	...

08009654 <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	4a04      	ldr	r2, [pc, #16]	; (8009670 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	0800f964 	.word	0x0800f964

08009674 <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	4a04      	ldr	r2, [pc, #16]	; (8009690 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4618      	mov	r0, r3
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	0800f94c 	.word	0x0800f94c

08009694 <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
                return bAddress;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 80096a2:	4618      	mov	r0, r3
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 80096ae:	b480      	push	{r7}
 80096b0:	b083      	sub	sp, #12
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 80096d4:	78fb      	ldrb	r3, [r7, #3]
 80096d6:	2be0      	cmp	r3, #224	; 0xe0
 80096d8:	bf0c      	ite	eq
 80096da:	2301      	moveq	r3, #1
 80096dc:	2300      	movne	r3, #0
 80096de:	b2db      	uxtb	r3, r3
        };
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	807b      	strh	r3, [r7, #2]
 80096f8:	4613      	mov	r3, r2
 80096fa:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 80096fc:	887b      	ldrh	r3, [r7, #2]
 80096fe:	f640 225c 	movw	r2, #2652	; 0xa5c
 8009702:	4293      	cmp	r3, r2
 8009704:	d104      	bne.n	8009710 <_ZN3BTD8VIDPIDOKEtt+0x24>
 8009706:	883b      	ldrh	r3, [r7, #0]
 8009708:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800970c:	4293      	cmp	r3, r2
 800970e:	d009      	beq.n	8009724 <_ZN3BTD8VIDPIDOKEtt+0x38>
 8009710:	887b      	ldrh	r3, [r7, #2]
 8009712:	f240 520d 	movw	r2, #1293	; 0x50d
 8009716:	4293      	cmp	r3, r2
 8009718:	d106      	bne.n	8009728 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800971a:	883b      	ldrh	r3, [r7, #0]
 800971c:	f240 625a 	movw	r2, #1626	; 0x65a
 8009720:	4293      	cmp	r3, r2
 8009722:	d101      	bne.n	8009728 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 8009724:	2301      	movs	r3, #1
 8009726:	e02d      	b.n	8009784 <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	7d1b      	ldrb	r3, [r3, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d113      	bne.n	8009758 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	7d5b      	ldrb	r3, [r3, #21]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10f      	bne.n	8009758 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	7d9b      	ldrb	r3, [r3, #22]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10b      	bne.n	8009758 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	7ddb      	ldrb	r3, [r3, #23]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d107      	bne.n	8009758 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	7e1b      	ldrb	r3, [r3, #24]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d103      	bne.n	8009758 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	7e5b      	ldrb	r3, [r3, #25]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d014      	beq.n	8009782 <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 8009758:	887b      	ldrh	r3, [r7, #2]
 800975a:	f240 524c 	movw	r2, #1356	; 0x54c
 800975e:	4293      	cmp	r3, r2
 8009760:	d10f      	bne.n	8009782 <_ZN3BTD8VIDPIDOKEtt+0x96>
 8009762:	883b      	ldrh	r3, [r7, #0]
 8009764:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009768:	d009      	beq.n	800977e <_ZN3BTD8VIDPIDOKEtt+0x92>
 800976a:	883b      	ldrh	r3, [r7, #0]
 800976c:	f240 422f 	movw	r2, #1071	; 0x42f
 8009770:	4293      	cmp	r3, r2
 8009772:	d004      	beq.n	800977e <_ZN3BTD8VIDPIDOKEtt+0x92>
 8009774:	883b      	ldrh	r3, [r7, #0]
 8009776:	f240 32d5 	movw	r2, #981	; 0x3d5
 800977a:	4293      	cmp	r3, r2
 800977c:	d101      	bne.n	8009782 <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800977e:	2301      	movs	r3, #1
 8009780:	e000      	b.n	8009784 <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 8009782:	2300      	movs	r3, #0
        };
 8009784:	4618      	mov	r0, r3
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff ff59 	bl	8009654 <_ZN15USBDeviceConfigC1Ev>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3304      	adds	r3, #4
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff ff64 	bl	8009674 <_ZN17UsbConfigXtracterC1Ev>
 80097ac:	4a2b      	ldr	r2, [pc, #172]	; (800985c <_ZN3BTDC1EP3USB+0xcc>)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	4a2b      	ldr	r2, [pc, #172]	; (8009860 <_ZN3BTDC1EP3USB+0xd0>)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	605a      	str	r2, [r3, #4]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	661a      	str	r2, [r3, #96]	; 0x60
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 8009814:	2300      	movs	r3, #0
 8009816:	73fb      	strb	r3, [r7, #15]
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	2b03      	cmp	r3, #3
 800981c:	d80a      	bhi.n	8009834 <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	3318      	adds	r3, #24
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	2200      	movs	r2, #0
 800982a:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	3301      	adds	r3, #1
 8009830:	73fb      	strb	r3, [r7, #15]
 8009832:	e7f1      	b.n	8009818 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fa83 	bl	8009d40 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d006      	beq.n	8009850 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	4611      	mov	r1, r2
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff fe1b 	bl	8009486 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	0800f90c 	.word	0x0800f90c
 8009860:	0800f940 	.word	0x0800f940

08009864 <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 8009864:	b590      	push	{r4, r7, lr}
 8009866:	b08f      	sub	sp, #60	; 0x3c
 8009868:	af02      	add	r7, sp, #8
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	4608      	mov	r0, r1
 800986e:	4611      	mov	r1, r2
 8009870:	461a      	mov	r2, r3
 8009872:	4603      	mov	r3, r0
 8009874:	70fb      	strb	r3, [r7, #3]
 8009876:	460b      	mov	r3, r1
 8009878:	70bb      	strb	r3, [r7, #2]
 800987a:	4613      	mov	r3, r2
 800987c:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800987e:	2312      	movs	r3, #18
 8009880:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 8009884:	f107 0308 	add.w	r3, r7, #8
 8009888:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800988a:	2300      	movs	r3, #0
 800988c:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800988e:	2300      	movs	r3, #0
 8009890:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fa54 	bl	8009d40 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff fde7 	bl	8009470 <_ZN3USB14GetAddressPoolEv>
 80098a2:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 80098ae:	23d9      	movs	r3, #217	; 0xd9
 80098b0:	e087      	b.n	80099c2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2100      	movs	r1, #0
 80098ba:	69f8      	ldr	r0, [r7, #28]
 80098bc:	4798      	blx	r3
 80098be:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80098c6:	23d6      	movs	r3, #214	; 0xd6
 80098c8:	e07b      	b.n	80099c2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 80098d2:	23d7      	movs	r3, #215	; 0xd7
 80098d4:	e075      	b.n	80099c2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f103 0251 	add.w	r2, r3, #81	; 0x51
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	787a      	ldrb	r2, [r7, #1]
 80098ea:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80098f0:	f107 0308 	add.w	r3, r7, #8
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	2312      	movs	r3, #18
 80098f8:	2200      	movs	r2, #0
 80098fa:	2100      	movs	r1, #0
 80098fc:	f005 fa6b 	bl	800edd6 <_ZN3USB11getDevDescrEhhtPh>
 8009900:	4603      	mov	r3, r0
 8009902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	6a3a      	ldr	r2, [r7, #32]
 800990a:	601a      	str	r2, [r3, #0]

        if(rcode)
 800990c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009910:	2b00      	cmp	r3, #0
 8009912:	d146      	bne.n	80099a2 <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3304      	adds	r3, #4
 800991a:	681c      	ldr	r4, [r3, #0]
 800991c:	78bb      	ldrb	r3, [r7, #2]
 800991e:	78f9      	ldrb	r1, [r7, #3]
 8009920:	2200      	movs	r2, #0
 8009922:	69f8      	ldr	r0, [r7, #28]
 8009924:	47a0      	blx	r4
 8009926:	4603      	mov	r3, r0
 8009928:	461a      	mov	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800993a:	23d4      	movs	r3, #212	; 0xd4
 800993c:	e041      	b.n	80099c2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	791b      	ldrb	r3, [r3, #4]
 8009942:	2b09      	cmp	r3, #9
 8009944:	d017      	beq.n	8009976 <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 8009946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009948:	79da      	ldrb	r2, [r3, #7]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 8009950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009952:	7c5a      	ldrb	r2, [r3, #17]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800995a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995c:	891b      	ldrh	r3, [r3, #8]
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	895b      	ldrh	r3, [r3, #10]
 800996a:	b29a      	uxth	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 8009972:	23e0      	movs	r3, #224	; 0xe0
 8009974:	e025      	b.n	80099c2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 8009976:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009982:	2300      	movs	r3, #0
 8009984:	2200      	movs	r2, #0
 8009986:	f005 fac3 	bl	800ef10 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800998a:	23d1      	movs	r3, #209	; 0xd1
 800998c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3308      	adds	r3, #8
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	4798      	blx	r3
        return rcode;
 800999c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099a0:	e00f      	b.n	80099c2 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 80099a2:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 80099a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099a8:	2b0d      	cmp	r3, #13
 80099aa:	d002      	beq.n	80099b2 <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 80099ac:	23e1      	movs	r3, #225	; 0xe1
 80099ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	3308      	adds	r3, #8
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
        return rcode;
 80099be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 80099c2:	4618      	mov	r0, r3
 80099c4:	3734      	adds	r7, #52	; 0x34
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd90      	pop	{r4, r7, pc}
	...

080099cc <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b096      	sub	sp, #88	; 0x58
 80099d0:	af02      	add	r7, sp, #8
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	4608      	mov	r0, r1
 80099d6:	4611      	mov	r1, r2
 80099d8:	461a      	mov	r2, r3
 80099da:	4603      	mov	r3, r0
 80099dc:	70fb      	strb	r3, [r7, #3]
 80099de:	460b      	mov	r3, r1
 80099e0:	70bb      	strb	r3, [r7, #2]
 80099e2:	4613      	mov	r3, r2
 80099e4:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80099ec:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff fd37 	bl	8009470 <_ZN3USB14GetAddressPoolEv>
 8009a02:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 8009a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009a10:	4611      	mov	r1, r2
 8009a12:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009a14:	4798      	blx	r3
 8009a16:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 8009a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8009a1e:	23d6      	movs	r3, #214	; 0xd6
 8009a20:	e189      	b.n	8009d36 <_ZN3BTD4InitEhhb+0x36a>
        }

        delay(300); // Assign new address to the device
 8009a22:	48b8      	ldr	r0, [pc, #736]	; (8009d04 <_ZN3BTD4InitEhhb+0x338>)
 8009a24:	f7f8 f892 	bl	8001b4c <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a32:	2200      	movs	r2, #0
 8009a34:	2100      	movs	r1, #0
 8009a36:	f005 fa6b 	bl	800ef10 <_ZN3USB7setAddrEhhh>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 8009a40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d003      	beq.n	8009a50 <_ZN3BTD4InitEhhb+0x84>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 8009a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	719a      	strb	r2, [r3, #6]
                goto Fail;
 8009a4e:	e16a      	b.n	8009d26 <_ZN3BTD4InitEhhb+0x35a>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 8009a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a52:	2200      	movs	r2, #0
 8009a54:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 8009a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009a62:	4611      	mov	r1, r2
 8009a64:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009a66:	4798      	blx	r3
 8009a68:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 8009a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <_ZN3BTD4InitEhhb+0xa8>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8009a70:	23d6      	movs	r3, #214	; 0xd6
 8009a72:	e160      	b.n	8009d36 <_ZN3BTD4InitEhhb+0x36a>
        }

        p->lowspeed = lowspeed;
 8009a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a76:	787a      	ldrb	r2, [r7, #1]
 8009a78:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3351      	adds	r3, #81	; 0x51
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f004 f8fe 	bl	800dc8a <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 8009a94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f040 8128 	bne.w	8009cee <_ZN3BTD4InitEhhb+0x322>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009aa4:	f240 524c 	movw	r2, #1356	; 0x54c
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d177      	bne.n	8009b9c <_ZN3BTD4InitEhhb+0x1d0>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009ab2:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009ab6:	d00d      	beq.n	8009ad4 <_ZN3BTD4InitEhhb+0x108>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009abe:	f240 422f 	movw	r2, #1071	; 0x42f
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d006      	beq.n	8009ad4 <_ZN3BTD4InitEhhb+0x108>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009acc:	f240 32d5 	movw	r2, #981	; 0x3d5
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d163      	bne.n	8009b9c <_ZN3BTD4InitEhhb+0x1d0>
                delay(100);
 8009ad4:	488c      	ldr	r0, [pc, #560]	; (8009d08 <_ZN3BTD4InitEhhb+0x33c>)
 8009ad6:	f7f8 f839 	bl	8001b4c <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009aea:	2301      	movs	r3, #1
 8009aec:	f005 fa40 	bl	800ef70 <_ZN3USB7setConfEhhh>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009af6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f040 80f9 	bne.w	8009cf2 <_ZN3BTD4InitEhhb+0x326>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	7d1b      	ldrb	r3, [r3, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d113      	bne.n	8009b30 <_ZN3BTD4InitEhhb+0x164>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	7d5b      	ldrb	r3, [r3, #21]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10f      	bne.n	8009b30 <_ZN3BTD4InitEhhb+0x164>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7d9b      	ldrb	r3, [r3, #22]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10b      	bne.n	8009b30 <_ZN3BTD4InitEhhb+0x164>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	7ddb      	ldrb	r3, [r3, #23]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d107      	bne.n	8009b30 <_ZN3BTD4InitEhhb+0x164>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	7e1b      	ldrb	r3, [r3, #24]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d103      	bne.n	8009b30 <_ZN3BTD4InitEhhb+0x164>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	7e5b      	ldrb	r3, [r3, #25]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d019      	beq.n	8009b64 <_ZN3BTD4InitEhhb+0x198>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009b36:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009b3a:	d006      	beq.n	8009b4a <_ZN3BTD4InitEhhb+0x17e>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009b42:	f240 422f 	movw	r2, #1071	; 0x42f
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d106      	bne.n	8009b58 <_ZN3BTD4InitEhhb+0x18c>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	3314      	adds	r3, #20
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f002 f8c3 	bl	800bcdc <_ZN3BTD9setBdaddrEPh>
 8009b56:	e005      	b.n	8009b64 <_ZN3BTD4InitEhhb+0x198>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	3314      	adds	r3, #20
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f002 f8fc 	bl	800bd5c <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009b74:	2300      	movs	r3, #0
 8009b76:	f005 f9fb 	bl	800ef70 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009b84:	2300      	movs	r3, #0
 8009b86:	2200      	movs	r2, #0
 8009b88:	f005 f9c2 	bl	800ef10 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3308      	adds	r3, #8
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 8009b98:	23d1      	movs	r3, #209	; 0xd1
 8009b9a:	e0cc      	b.n	8009d36 <_ZN3BTD4InitEhhb+0x36a>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009ba2:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009ba6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d25e      	bcs.n	8009c6c <_ZN3BTD4InitEhhb+0x2a0>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009bb4:	f640 225c 	movw	r2, #2652	; 0xa5c
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d106      	bne.n	8009bca <_ZN3BTD4InitEhhb+0x1fe>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009bc2:	f242 12e8 	movw	r2, #8680	; 0x21e8
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d00d      	beq.n	8009be6 <_ZN3BTD4InitEhhb+0x21a>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009bd0:	f240 520d 	movw	r2, #1293	; 0x50d
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d120      	bne.n	8009c1a <_ZN3BTD4InitEhhb+0x24e>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009bde:	f240 625a 	movw	r2, #1626	; 0x65a
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d119      	bne.n	8009c1a <_ZN3BTD4InitEhhb+0x24e>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	1d1a      	adds	r2, r3, #4
 8009bea:	f107 0308 	add.w	r3, r7, #8
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f002 f907 	bl	800be04 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009c00:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009c04:	f107 0308 	add.w	r3, r7, #8
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f005 f932 	bl	800ee76 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009c12:	4603      	mov	r3, r0
 8009c14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009c18:	e018      	b.n	8009c4c <_ZN3BTD4InitEhhb+0x280>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	1d1a      	adds	r2, r3, #4
 8009c1e:	f107 0308 	add.w	r3, r7, #8
 8009c22:	4611      	mov	r1, r2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f002 f93b 	bl	800bea0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009c34:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009c38:	f107 0308 	add.w	r3, r7, #8
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	2200      	movs	r2, #0
 8009c42:	f005 f918 	bl	800ee76 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 8009c4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d150      	bne.n	8009cf6 <_ZN3BTD4InitEhhb+0x32a>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d805      	bhi.n	8009c6a <_ZN3BTD4InitEhhb+0x29e>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009c5e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009c62:	3301      	adds	r3, #1
 8009c64:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009c68:	e79b      	b.n	8009ba2 <_ZN3BTD4InitEhhb+0x1d6>
                                break;
 8009c6a:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009c72:	2b03      	cmp	r3, #3
 8009c74:	d94a      	bls.n	8009d0c <_ZN3BTD4InitEhhb+0x340>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3351      	adds	r3, #81	; 0x51
 8009c8a:	f003 fffe 	bl	800dc8a <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009c94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d12e      	bne.n	8009cfa <_ZN3BTD4InitEhhb+0x32e>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009cb2:	f005 f95d 	bl	800ef70 <_ZN3USB7setConfEhhh>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009cbc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d11c      	bne.n	8009cfe <_ZN3BTD4InitEhhb+0x332>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2264      	movs	r2, #100	; 0x64
 8009cc8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 8009cea:	2300      	movs	r3, #0
 8009cec:	e023      	b.n	8009d36 <_ZN3BTD4InitEhhb+0x36a>
                goto FailSetDevTblEntry;
 8009cee:	bf00      	nop
 8009cf0:	e019      	b.n	8009d26 <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 8009cf2:	bf00      	nop
 8009cf4:	e017      	b.n	8009d26 <_ZN3BTD4InitEhhb+0x35a>
                                goto FailGetConfDescr;
 8009cf6:	bf00      	nop
 8009cf8:	e015      	b.n	8009d26 <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetDevTblEntry;
 8009cfa:	bf00      	nop
 8009cfc:	e013      	b.n	8009d26 <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 8009cfe:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 8009d00:	e011      	b.n	8009d26 <_ZN3BTD4InitEhhb+0x35a>
 8009d02:	bf00      	nop
 8009d04:	000493e0 	.word	0x000493e0
 8009d08:	000186a0 	.word	0x000186a0
                        goto FailUnknownDevice;
 8009d0c:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009d18:	2300      	movs	r3, #0
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f005 f8f8 	bl	800ef10 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 8009d20:	23d1      	movs	r3, #209	; 0xd1
 8009d22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	4798      	blx	r3
        return rcode;
 8009d32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3750      	adds	r7, #80	; 0x50
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop

08009d40 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73fb      	strb	r3, [r7, #15]
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	d845      	bhi.n	8009dde <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 8009d52:	7bfa      	ldrb	r2, [r7, #15]
 8009d54:	6879      	ldr	r1, [r7, #4]
 8009d56:	4613      	mov	r3, r2
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	4413      	add	r3, r2
 8009d5c:	440b      	add	r3, r1
 8009d5e:	3351      	adds	r3, #81	; 0x51
 8009d60:	2200      	movs	r2, #0
 8009d62:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <_ZN3BTD10InitializeEv+0x2e>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	e000      	b.n	8009d70 <_ZN3BTD10InitializeEv+0x30>
 8009d6e:	2008      	movs	r0, #8
 8009d70:	7bfa      	ldrb	r2, [r7, #15]
 8009d72:	6879      	ldr	r1, [r7, #4]
 8009d74:	4613      	mov	r3, r2
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	4413      	add	r3, r2
 8009d7a:	440b      	add	r3, r1
 8009d7c:	3352      	adds	r3, #82	; 0x52
 8009d7e:	4602      	mov	r2, r0
 8009d80:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 8009d82:	7bfa      	ldrb	r2, [r7, #15]
 8009d84:	6879      	ldr	r1, [r7, #4]
 8009d86:	4613      	mov	r3, r2
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	4413      	add	r3, r2
 8009d8c:	440b      	add	r3, r1
 8009d8e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009d92:	78d3      	ldrb	r3, [r2, #3]
 8009d94:	f36f 0300 	bfc	r3, #0, #1
 8009d98:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 8009d9a:	7bfa      	ldrb	r2, [r7, #15]
 8009d9c:	6879      	ldr	r1, [r7, #4]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	4413      	add	r3, r2
 8009da4:	440b      	add	r3, r1
 8009da6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009daa:	78d3      	ldrb	r3, [r2, #3]
 8009dac:	f36f 0341 	bfc	r3, #1, #1
 8009db0:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <_ZN3BTD10InitializeEv+0x7c>
 8009db8:	2101      	movs	r1, #1
 8009dba:	e000      	b.n	8009dbe <_ZN3BTD10InitializeEv+0x7e>
 8009dbc:	210f      	movs	r1, #15
 8009dbe:	7bfa      	ldrb	r2, [r7, #15]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	4413      	add	r3, r2
 8009dc8:	4403      	add	r3, r0
 8009dca:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009dce:	78d3      	ldrb	r3, [r2, #3]
 8009dd0:	f361 0387 	bfi	r3, r1, #2, #6
 8009dd4:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	73fb      	strb	r3, [r7, #15]
 8009ddc:	e7b6      	b.n	8009d4c <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009dde:	2300      	movs	r3, #0
 8009de0:	73fb      	strb	r3, [r7, #15]
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d81c      	bhi.n	8009e22 <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	3318      	adds	r3, #24
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d010      	beq.n	8009e1a <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	3318      	adds	r3, #24
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	6859      	ldr	r1, [r3, #4]
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	3318      	adds	r3, #24
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3308      	adds	r3, #8
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4608      	mov	r0, r1
 8009e18:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	73fb      	strb	r3, [r7, #15]
 8009e20:	e7df      	b.n	8009de2 <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 8009e78:	bf00      	nop
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	4608      	mov	r0, r1
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	70fb      	strb	r3, [r7, #3]
 8009e92:	460b      	mov	r3, r1
 8009e94:	70bb      	strb	r3, [r7, #2]
 8009e96:	4613      	mov	r3, r2
 8009e98:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 8009e9a:	787b      	ldrb	r3, [r7, #1]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d15d      	bne.n	8009f5c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	78fa      	ldrb	r2, [r7, #3]
 8009ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	78db      	ldrb	r3, [r3, #3]
 8009eac:	f003 0303 	and.w	r3, r3, #3
 8009eb0:	2b03      	cmp	r3, #3
 8009eb2:	d114      	bne.n	8009ede <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	789b      	ldrb	r3, [r3, #2]
 8009eb8:	b25b      	sxtb	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	da0f      	bge.n	8009ede <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 8009ec2:	7bfa      	ldrb	r2, [r7, #15]
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	4413      	add	r3, r2
 8009ecc:	440b      	add	r3, r1
 8009ece:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009ed2:	78d3      	ldrb	r3, [r2, #3]
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	f361 0387 	bfi	r3, r1, #2, #6
 8009eda:	70d3      	strb	r3, [r2, #3]
 8009edc:	e00e      	b.n	8009efc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	78db      	ldrb	r3, [r3, #3]
 8009ee2:	f003 0303 	and.w	r3, r3, #3
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d13a      	bne.n	8009f60 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	789b      	ldrb	r3, [r3, #2]
 8009eee:	b25b      	sxtb	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	da01      	bge.n	8009ef8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	e000      	b.n	8009efa <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 8009ef8:	2303      	movs	r3, #3
 8009efa:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	789b      	ldrb	r3, [r3, #2]
 8009f00:	7bfa      	ldrb	r2, [r7, #15]
 8009f02:	f003 030f 	and.w	r3, r3, #15
 8009f06:	b2d8      	uxtb	r0, r3
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	005b      	lsls	r3, r3, #1
 8009f0e:	4413      	add	r3, r2
 8009f10:	440b      	add	r3, r1
 8009f12:	3351      	adds	r3, #81	; 0x51
 8009f14:	4602      	mov	r2, r0
 8009f16:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	889b      	ldrh	r3, [r3, #4]
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	7bfa      	ldrb	r2, [r7, #15]
 8009f20:	b2d8      	uxtb	r0, r3
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	4613      	mov	r3, r2
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	4413      	add	r3, r2
 8009f2a:	440b      	add	r3, r1
 8009f2c:	3352      	adds	r3, #82	; 0x52
 8009f2e:	4602      	mov	r2, r0
 8009f30:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	799b      	ldrb	r3, [r3, #6]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d204      	bcs.n	8009f4a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	799a      	ldrb	r2, [r3, #6]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009f50:	3301      	adds	r3, #1
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8009f5a:	e002      	b.n	8009f62 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 8009f5c:	bf00      	nop
 8009f5e:	e000      	b.n	8009f62 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 8009f60:	bf00      	nop
}
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 8009f6c:	f1a0 0004 	sub.w	r0, r0, #4
 8009f70:	f7ff bf86 	b.w	8009e80 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

08009f74 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7ff fedf 	bl	8009d40 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7ff fa72 	bl	8009470 <_ZN3USB14GetAddressPoolEv>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	3208      	adds	r2, #8
 8009f92:	6812      	ldr	r2, [r2, #0]
 8009f94:	6879      	ldr	r1, [r7, #4]
 8009f96:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	4790      	blx	r2
        return 0;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8009fb6:	f083 0301 	eor.w	r3, r3, #1
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <_ZN3BTD4PollEv+0x1c>
                return 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	e025      	b.n	800a010 <_ZN3BTD4PollEv+0x68>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 8009fc4:	f7f7 fdb6 	bl	8001b34 <HAL_GetTick>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	4a13      	ldr	r2, [pc, #76]	; (800a018 <_ZN3BTD4PollEv+0x70>)
 8009fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd0:	099a      	lsrs	r2, r3, #6
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	43db      	mvns	r3, r3
 8009fda:	0fdb      	lsrs	r3, r3, #31
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d015      	beq.n	800a00e <_ZN3BTD4PollEv+0x66>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 8009fe2:	f7f7 fda7 	bl	8001b34 <HAL_GetTick>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	4a0b      	ldr	r2, [pc, #44]	; (800a018 <_ZN3BTD4PollEv+0x70>)
 8009fea:	fba2 2303 	umull	r2, r3, r2, r3
 8009fee:	099b      	lsrs	r3, r3, #6
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8009ff6:	441a      	add	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f80d 	bl	800a01c <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fb24 	bl	800a650 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fe4d 	bl	800aca8 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	10624dd3 	.word	0x10624dd3

0800a01c <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800a01c:	b5b0      	push	{r4, r5, r7, lr}
 800a01e:	b088      	sub	sp, #32
 800a020:	af02      	add	r7, sp, #8
 800a022:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800a024:	2340      	movs	r3, #64	; 0x40
 800a026:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3389      	adds	r3, #137	; 0x89
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800a042:	f107 050c 	add.w	r5, r7, #12
 800a046:	9201      	str	r2, [sp, #4]
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	462b      	mov	r3, r5
 800a04c:	4622      	mov	r2, r4
 800a04e:	f003 ff84 	bl	800df5a <_ZN3USB10inTransferEhhPtPhh>
 800a052:	4603      	mov	r3, r0
 800a054:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <_ZN3BTD14HCI_event_taskEv+0x48>
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	2b04      	cmp	r3, #4
 800a060:	f040 82f1 	bne.w	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a06a:	3b01      	subs	r3, #1
 800a06c:	2b35      	cmp	r3, #53	; 0x35
 800a06e:	f200 82ea 	bhi.w	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
 800a072:	a201      	add	r2, pc, #4	; (adr r2, 800a078 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a078:	0800a259 	.word	0x0800a259
 800a07c:	0800a2b9 	.word	0x0800a2b9
 800a080:	0800a411 	.word	0x0800a411
 800a084:	0800a4fb 	.word	0x0800a4fb
 800a088:	0800a46d 	.word	0x0800a46d
 800a08c:	0800a5b9 	.word	0x0800a5b9
 800a090:	0800a49f 	.word	0x0800a49f
 800a094:	0800a631 	.word	0x0800a631
 800a098:	0800a631 	.word	0x0800a631
 800a09c:	0800a647 	.word	0x0800a647
 800a0a0:	0800a647 	.word	0x0800a647
 800a0a4:	0800a631 	.word	0x0800a631
 800a0a8:	0800a631 	.word	0x0800a631
 800a0ac:	0800a151 	.word	0x0800a151
 800a0b0:	0800a631 	.word	0x0800a631
 800a0b4:	0800a647 	.word	0x0800a647
 800a0b8:	0800a647 	.word	0x0800a647
 800a0bc:	0800a631 	.word	0x0800a631
 800a0c0:	0800a631 	.word	0x0800a631
 800a0c4:	0800a647 	.word	0x0800a647
 800a0c8:	0800a647 	.word	0x0800a647
 800a0cc:	0800a587 	.word	0x0800a587
 800a0d0:	0800a5b1 	.word	0x0800a5b1
 800a0d4:	0800a631 	.word	0x0800a631
 800a0d8:	0800a631 	.word	0x0800a631
 800a0dc:	0800a631 	.word	0x0800a631
 800a0e0:	0800a631 	.word	0x0800a631
 800a0e4:	0800a647 	.word	0x0800a647
 800a0e8:	0800a647 	.word	0x0800a647
 800a0ec:	0800a647 	.word	0x0800a647
 800a0f0:	0800a647 	.word	0x0800a647
 800a0f4:	0800a631 	.word	0x0800a631
 800a0f8:	0800a647 	.word	0x0800a647
 800a0fc:	0800a647 	.word	0x0800a647
 800a100:	0800a647 	.word	0x0800a647
 800a104:	0800a647 	.word	0x0800a647
 800a108:	0800a647 	.word	0x0800a647
 800a10c:	0800a647 	.word	0x0800a647
 800a110:	0800a647 	.word	0x0800a647
 800a114:	0800a647 	.word	0x0800a647
 800a118:	0800a647 	.word	0x0800a647
 800a11c:	0800a647 	.word	0x0800a647
 800a120:	0800a647 	.word	0x0800a647
 800a124:	0800a647 	.word	0x0800a647
 800a128:	0800a647 	.word	0x0800a647
 800a12c:	0800a647 	.word	0x0800a647
 800a130:	0800a647 	.word	0x0800a647
 800a134:	0800a647 	.word	0x0800a647
 800a138:	0800a621 	.word	0x0800a621
 800a13c:	0800a631 	.word	0x0800a631
 800a140:	0800a629 	.word	0x0800a629
 800a144:	0800a647 	.word	0x0800a647
 800a148:	0800a647 	.word	0x0800a647
 800a14c:	0800a631 	.word	0x0800a631
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800a156:	2b00      	cmp	r3, #0
 800a158:	f040 826c 	bne.w	800a634 <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a162:	f043 0301 	orr.w	r3, r3, #1
 800a166:	b29a      	uxth	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a174:	2b01      	cmp	r3, #1
 800a176:	d114      	bne.n	800a1a2 <_ZN3BTD14HCI_event_taskEv+0x186>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a17e:	2b10      	cmp	r3, #16
 800a180:	d10f      	bne.n	800a1a2 <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a198:	b29a      	uxth	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800a1a0:	e059      	b.n	800a256 <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d12a      	bne.n	800a202 <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a1b2:	2b10      	cmp	r3, #16
 800a1b4:	d125      	bne.n	800a202 <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d114      	bne.n	800a1ee <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10f      	bne.n	800a1ee <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800a1d4:	f003 0308 	and.w	r3, r3, #8
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d004      	beq.n	800a1e6 <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800a1e4:	e003      	b.n	800a1ee <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800a200:	e029      	b.n	800a256 <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a208:	2b09      	cmp	r3, #9
 800a20a:	f040 8213 	bne.w	800a634 <_ZN3BTD14HCI_event_taskEv+0x618>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a214:	2b10      	cmp	r3, #16
 800a216:	f040 820d 	bne.w	800a634 <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800a21a:	2300      	movs	r3, #0
 800a21c:	75fb      	strb	r3, [r7, #23]
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	2b05      	cmp	r3, #5
 800a222:	d80e      	bhi.n	800a242 <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	1d9a      	adds	r2, r3, #6
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	6879      	ldr	r1, [r7, #4]
 800a22c:	440a      	add	r2, r1
 800a22e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	4413      	add	r3, r2
 800a236:	460a      	mov	r2, r1
 800a238:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
 800a23c:	3301      	adds	r3, #1
 800a23e:	75fb      	strb	r3, [r7, #23]
 800a240:	e7ed      	b.n	800a21e <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a248:	f043 0320 	orr.w	r3, r3, #32
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800a254:	e1ee      	b.n	800a634 <_ZN3BTD14HCI_event_taskEv+0x618>
 800a256:	e1ed      	b.n	800a634 <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d921      	bls.n	800a2a6 <_ZN3BTD14HCI_event_taskEv+0x28a>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d104      	bne.n	800a276 <_ZN3BTD14HCI_event_taskEv+0x25a>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a272:	2b00      	cmp	r3, #0
 800a274:	d017      	beq.n	800a2a6 <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	220a      	movs	r2, #10
 800a2a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800a2b6:	e1c6      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f000 81ba 	beq.w	800a638 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	75bb      	strb	r3, [r7, #22]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a2ce:	7dba      	ldrb	r2, [r7, #22]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	f080 81b1 	bcs.w	800a638 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a2dc:	00db      	lsls	r3, r3, #3
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	7dbb      	ldrb	r3, [r7, #22]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	0049      	lsls	r1, r1, #1
 800a2e6:	440b      	add	r3, r1
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	4413      	add	r3, r2
 800a2ec:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	757b      	strb	r3, [r7, #21]
 800a2f2:	7d7b      	ldrb	r3, [r7, #21]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d811      	bhi.n	800a31c <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800a2f8:	7d7b      	ldrb	r3, [r7, #21]
 800a2fa:	1d1a      	adds	r2, r3, #4
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
 800a2fe:	441a      	add	r2, r3
 800a300:	7d7b      	ldrb	r3, [r7, #21]
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	440a      	add	r2, r1
 800a306:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	4413      	add	r3, r2
 800a30e:	460a      	mov	r2, r1
 800a310:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800a314:	7d7b      	ldrb	r3, [r7, #21]
 800a316:	3301      	adds	r3, #1
 800a318:	757b      	strb	r3, [r7, #21]
 800a31a:	e7ea      	b.n	800a2f2 <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a322:	2b00      	cmp	r3, #0
 800a324:	d038      	beq.n	800a398 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d133      	bne.n	800a398 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a336:	2b05      	cmp	r3, #5
 800a338:	d12e      	bne.n	800a398 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a340:	f003 030c 	and.w	r3, r3, #12
 800a344:	2b00      	cmp	r3, #0
 800a346:	d027      	beq.n	800a398 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800a350:	2300      	movs	r3, #0
 800a352:	753b      	strb	r3, [r7, #20]
 800a354:	7d3b      	ldrb	r3, [r7, #20]
 800a356:	2b05      	cmp	r3, #5
 800a358:	d814      	bhi.n	800a384 <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a35a:	7d3b      	ldrb	r3, [r7, #20]
 800a35c:	1cd9      	adds	r1, r3, #3
 800a35e:	7dba      	ldrb	r2, [r7, #22]
 800a360:	4613      	mov	r3, r2
 800a362:	005b      	lsls	r3, r3, #1
 800a364:	4413      	add	r3, r2
 800a366:	005b      	lsls	r3, r3, #1
 800a368:	18ca      	adds	r2, r1, r3
 800a36a:	7d3b      	ldrb	r3, [r7, #20]
 800a36c:	6879      	ldr	r1, [r7, #4]
 800a36e:	440a      	add	r2, r1
 800a370:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	4413      	add	r3, r2
 800a378:	460a      	mov	r2, r1
 800a37a:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a37c:	7d3b      	ldrb	r3, [r7, #20]
 800a37e:	3301      	adds	r3, #1
 800a380:	753b      	strb	r3, [r7, #20]
 800a382:	e7e7      	b.n	800a354 <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a38a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a38e:	b29a      	uxth	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a396:	e03a      	b.n	800a40e <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d031      	beq.n	800a406 <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a3a8:	f003 030f 	and.w	r3, r3, #15
 800a3ac:	2b05      	cmp	r3, #5
 800a3ae:	d12a      	bne.n	800a406 <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a3b6:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d023      	beq.n	800a406 <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800a3be:	2300      	movs	r3, #0
 800a3c0:	74fb      	strb	r3, [r7, #19]
 800a3c2:	7cfb      	ldrb	r3, [r7, #19]
 800a3c4:	2b05      	cmp	r3, #5
 800a3c6:	d814      	bhi.n	800a3f2 <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a3c8:	7cfb      	ldrb	r3, [r7, #19]
 800a3ca:	1cd9      	adds	r1, r3, #3
 800a3cc:	7dba      	ldrb	r2, [r7, #22]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	4413      	add	r3, r2
 800a3d4:	005b      	lsls	r3, r3, #1
 800a3d6:	18ca      	adds	r2, r1, r3
 800a3d8:	7cfb      	ldrb	r3, [r7, #19]
 800a3da:	6879      	ldr	r1, [r7, #4]
 800a3dc:	440a      	add	r2, r1
 800a3de:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	460a      	mov	r2, r1
 800a3e8:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a3ea:	7cfb      	ldrb	r3, [r7, #19]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	74fb      	strb	r3, [r7, #19]
 800a3f0:	e7e7      	b.n	800a3c2 <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a404:	e003      	b.n	800a40e <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a406:	7dbb      	ldrb	r3, [r7, #22]
 800a408:	3301      	adds	r3, #1
 800a40a:	75bb      	strb	r3, [r7, #22]
 800a40c:	e75c      	b.n	800a2c8 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800a40e:	e113      	b.n	800a638 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d11a      	bne.n	800a462 <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a432:	b21a      	sxth	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a43a:	021b      	lsls	r3, r3, #8
 800a43c:	b21b      	sxth	r3, r3
 800a43e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a442:	b21b      	sxth	r3, r3
 800a444:	4313      	orrs	r3, r2
 800a446:	b21b      	sxth	r3, r3
 800a448:	b29a      	uxth	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a454:	f043 0302 	orr.w	r3, r3, #2
 800a458:	b29a      	uxth	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800a460:	e0f1      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2206      	movs	r2, #6
 800a466:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a46a:	e0ec      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a472:	2b00      	cmp	r3, #0
 800a474:	f040 80e2 	bne.w	800a63c <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a47e:	f043 0304 	orr.w	r3, r3, #4
 800a482:	b29a      	uxth	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a490:	f023 0302 	bic.w	r3, r3, #2
 800a494:	b29a      	uxth	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a49c:	e0ce      	b.n	800a63c <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f040 80cb 	bne.w	800a640 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	74bb      	strb	r3, [r7, #18]
 800a4ae:	7cbb      	ldrb	r3, [r7, #18]
 800a4b0:	2b1d      	cmp	r3, #29
 800a4b2:	d818      	bhi.n	800a4e6 <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800a4b4:	7cbb      	ldrb	r3, [r7, #18]
 800a4b6:	f103 0209 	add.w	r2, r3, #9
 800a4ba:	7cbb      	ldrb	r3, [r7, #18]
 800a4bc:	6879      	ldr	r1, [r7, #4]
 800a4be:	440a      	add	r2, r1
 800a4c0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	460a      	mov	r2, r1
 800a4ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800a4ce:	7cbb      	ldrb	r3, [r7, #18]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d003      	beq.n	800a4e4 <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a4dc:	7cbb      	ldrb	r3, [r7, #18]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	74bb      	strb	r3, [r7, #18]
 800a4e2:	e7e4      	b.n	800a4ae <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800a4e4:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a4ec:	f043 0308 	orr.w	r3, r3, #8
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a4f8:	e0a2      	b.n	800a640 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	747b      	strb	r3, [r7, #17]
 800a4fe:	7c7b      	ldrb	r3, [r7, #17]
 800a500:	2b05      	cmp	r3, #5
 800a502:	d80e      	bhi.n	800a522 <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800a504:	7c7b      	ldrb	r3, [r7, #17]
 800a506:	1c9a      	adds	r2, r3, #2
 800a508:	7c7b      	ldrb	r3, [r7, #17]
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	440a      	add	r2, r1
 800a50e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	4413      	add	r3, r2
 800a516:	460a      	mov	r2, r1
 800a518:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800a51a:	7c7b      	ldrb	r3, [r7, #17]
 800a51c:	3301      	adds	r3, #1
 800a51e:	747b      	strb	r3, [r7, #17]
 800a520:	e7ed      	b.n	800a4fe <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800a522:	2300      	movs	r3, #0
 800a524:	743b      	strb	r3, [r7, #16]
 800a526:	7c3b      	ldrb	r3, [r7, #16]
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d810      	bhi.n	800a54e <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800a52c:	7c3b      	ldrb	r3, [r7, #16]
 800a52e:	f103 0208 	add.w	r2, r3, #8
 800a532:	7c3b      	ldrb	r3, [r7, #16]
 800a534:	6879      	ldr	r1, [r7, #4]
 800a536:	440a      	add	r2, r1
 800a538:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	4413      	add	r3, r2
 800a540:	460a      	mov	r2, r1
 800a542:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800a546:	7c3b      	ldrb	r3, [r7, #16]
 800a548:	3301      	adds	r3, #1
 800a54a:	743b      	strb	r3, [r7, #16]
 800a54c:	e7eb      	b.n	800a526 <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	2b05      	cmp	r3, #5
 800a55a:	d10a      	bne.n	800a572 <_ZN3BTD14HCI_event_taskEv+0x556>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a562:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a578:	f043 0310 	orr.w	r3, r3, #16
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800a584:	e05f      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 feec 	bl	800b36e <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800a596:	e056      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d003      	beq.n	800a5a8 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fee4 	bl	800b36e <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800a5a6:	e04e      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 ff93 	bl	800b4d4 <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800a5ae:	e04a      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 ffca 	bl	800b54a <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800a5b6:	e046      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d123      	bne.n	800a60a <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00c      	beq.n	800a5e6 <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5d2:	f083 0301 	eor.w	r3, r3, #1
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d004      	beq.n	800a5e6 <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800a5e4:	e02e      	b.n	800a644 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d029      	beq.n	800a644 <_ZN3BTD14HCI_event_taskEv+0x628>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a5f6:	f083 0301 	eor.w	r3, r3, #1
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d021      	beq.n	800a644 <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800a608:	e01c      	b.n	800a644 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	8b5b      	ldrh	r3, [r3, #26]
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f001 f882 	bl	800b71a <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2210      	movs	r2, #16
 800a61a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a61e:	e011      	b.n	800a644 <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 ffcd 	bl	800b5c0 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800a626:	e00e      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 f810 	bl	800b64e <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800a62e:	e00a      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800a630:	bf00      	nop
 800a632:	e008      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a634:	bf00      	nop
 800a636:	e006      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a638:	bf00      	nop
 800a63a:	e004      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a63c:	bf00      	nop
 800a63e:	e002      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a640:	bf00      	nop
 800a642:	e000      	b.n	800a646 <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a644:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800a646:	bf00      	nop
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bdb0      	pop	{r4, r5, r7, pc}
 800a64e:	bf00      	nop

0800a650 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a65e:	2b13      	cmp	r3, #19
 800a660:	f200 82ef 	bhi.w	800ac42 <_ZN3BTD8HCI_taskEv+0x5f2>
 800a664:	a201      	add	r2, pc, #4	; (adr r2, 800a66c <_ZN3BTD8HCI_taskEv+0x1c>)
 800a666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66a:	bf00      	nop
 800a66c:	0800a6bd 	.word	0x0800a6bd
 800a670:	0800a6f7 	.word	0x0800a6f7
 800a674:	0800a77d 	.word	0x0800a77d
 800a678:	0800a79d 	.word	0x0800a79d
 800a67c:	0800a7bd 	.word	0x0800a7bd
 800a680:	0800a811 	.word	0x0800a811
 800a684:	0800a8b7 	.word	0x0800a8b7
 800a688:	0800a8e5 	.word	0x0800a8e5
 800a68c:	0800a91f 	.word	0x0800a91f
 800a690:	0800a947 	.word	0x0800a947
 800a694:	0800a97d 	.word	0x0800a97d
 800a698:	0800a9db 	.word	0x0800a9db
 800a69c:	0800aa19 	.word	0x0800aa19
 800a6a0:	0800ab3f 	.word	0x0800ab3f
 800a6a4:	0800ac43 	.word	0x0800ac43
 800a6a8:	0800ab85 	.word	0x0800ab85
 800a6ac:	0800abb3 	.word	0x0800abb3
 800a6b0:	0800a847 	.word	0x0800a847
 800a6b4:	0800a87d 	.word	0x0800a87d
 800a6b8:	0800a89d 	.word	0x0800a89d
                case HCI_INIT_STATE:
                        hci_counter++;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	f240 82b4 	bls.w	800ac46 <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fb7d 	bl	800adde <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800a6f4:	e2a7      	b.n	800ac46 <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00b      	beq.n	800a72c <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2202      	movs	r2, #2
 800a720:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f001 f830 	bl	800b78a <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800a72a:	e28e      	b.n	800ac4a <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a738:	429a      	cmp	r2, r3
 800a73a:	f240 8286 	bls.w	800ac4a <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a744:	461a      	mov	r2, r3
 800a746:	0092      	lsls	r2, r2, #2
 800a748:	4413      	add	r3, r2
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a75a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a75e:	d904      	bls.n	800a76a <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a766:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800a77a:	e266      	b.n	800ac4a <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 8261 	beq.w	800ac4e <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2203      	movs	r2, #3
 800a790:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fb72 	bl	800ae7e <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800a79a:	e258      	b.n	800ac4e <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a7a2:	f003 0320 	and.w	r3, r3, #32
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 8253 	beq.w	800ac52 <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fb8a 	bl	800aec6 <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2204      	movs	r2, #4
 800a7b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a7ba:	e24a      	b.n	800ac52 <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 8245 	beq.w	800ac56 <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00a      	beq.n	800a7ea <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fc5d 	bl	800b09a <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2205      	movs	r2, #5
 800a7e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a7e8:	e235      	b.n	800ac56 <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d008      	beq.n	800a806 <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fb89 	bl	800af0e <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2211      	movs	r2, #17
 800a800:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a804:	e227      	b.n	800ac56 <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2206      	movs	r2, #6
 800a80a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a80e:	e222      	b.n	800ac56 <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 821d 	beq.w	800ac5a <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a826:	2b00      	cmp	r3, #0
 800a828:	d008      	beq.n	800a83c <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a82a:	2100      	movs	r1, #0
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fb6e 	bl	800af0e <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2211      	movs	r2, #17
 800a836:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a83a:	e20e      	b.n	800ac5a <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2206      	movs	r2, #6
 800a840:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a844:	e209      	b.n	800ac5a <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a84c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 8204 	beq.w	800ac5e <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d008      	beq.n	800a872 <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800a860:	2101      	movs	r1, #1
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fc9d 	bl	800b1a2 <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2212      	movs	r2, #18
 800a86c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a870:	e1f5      	b.n	800ac5e <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2206      	movs	r2, #6
 800a876:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a87a:	e1f0      	b.n	800ac5e <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 81eb 	beq.w	800ac62 <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fc4d 	bl	800b12c <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2213      	movs	r2, #19
 800a896:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a89a:	e1e2      	b.n	800ac62 <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f000 81dd 	beq.w	800ac66 <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2206      	movs	r2, #6
 800a8b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a8b4:	e1d7      	b.n	800ac66 <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d104      	bne.n	800a8ca <_ZN3BTD8HCI_taskEv+0x27a>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d007      	beq.n	800a8da <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fc8f 	bl	800b1ee <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2207      	movs	r2, #7
 800a8d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800a8d8:	e1d8      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	220a      	movs	r2, #10
 800a8de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a8e2:	e1d3      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 81bb 	beq.w	800ac6a <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fcb2 	bl	800b25e <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a900:	2b00      	cmp	r3, #0
 800a902:	d007      	beq.n	800a914 <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fb74 	bl	800aff2 <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	220c      	movs	r2, #12
 800a90e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800a912:	e1aa      	b.n	800ac6a <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2208      	movs	r2, #8
 800a918:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a91c:	e1a5      	b.n	800ac6a <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 81a0 	beq.w	800ac6e <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fcac 	bl	800b294 <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2209      	movs	r2, #9
 800a940:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a944:	e193      	b.n	800ac6e <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a94c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 818e 	beq.w	800ac72 <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a95c:	f003 0302 	and.w	r3, r3, #2
 800a960:	2b00      	cmp	r3, #0
 800a962:	d007      	beq.n	800a974 <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fead 	bl	800b6c4 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	220a      	movs	r2, #10
 800a96e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800a972:	e17e      	b.n	800ac72 <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fc8d 	bl	800b294 <_ZN3BTD11hci_connectEv>
                        break;
 800a97a:	e17a      	b.n	800ac72 <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a982:	f083 0301 	eor.w	r3, r3, #1
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 8174 	beq.w	800ac76 <_ZN3BTD8HCI_taskEv+0x626>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a994:	f083 0301 	eor.w	r3, r3, #1
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 816b 	beq.w	800ac76 <_ZN3BTD8HCI_taskEv+0x626>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a9a6:	f083 0301 	eor.w	r3, r3, #1
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 8162 	beq.w	800ac76 <_ZN3BTD8HCI_taskEv+0x626>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a9b8:	f083 0301 	eor.w	r3, r3, #1
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 8159 	beq.w	800ac76 <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fa29 	bl	800ae1c <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	220b      	movs	r2, #11
 800a9d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a9d8:	e14d      	b.n	800ac76 <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a9e0:	f003 0310 	and.w	r3, r3, #16
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00a      	beq.n	800a9fe <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 faff 	bl	800aff2 <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	220c      	movs	r2, #12
 800a9f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800a9fc:	e13d      	b.n	800ac7a <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 8136 	beq.w	800ac7a <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2210      	movs	r2, #16
 800aa12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800aa16:	e130      	b.n	800ac7a <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aa1e:	f003 0308 	and.w	r3, r3, #8
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 812b 	beq.w	800ac7e <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	3322      	adds	r3, #34	; 0x22
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	4999      	ldr	r1, [pc, #612]	; (800ac94 <_ZN3BTD8HCI_taskEv+0x644>)
 800aa30:	4618      	mov	r0, r3
 800aa32:	f004 fe71 	bl	800f718 <strncmp>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d147      	bne.n	800aacc <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3322      	adds	r3, #34	; 0x22
 800aa60:	2216      	movs	r2, #22
 800aa62:	498d      	ldr	r1, [pc, #564]	; (800ac98 <_ZN3BTD8HCI_taskEv+0x648>)
 800aa64:	4618      	mov	r0, r3
 800aa66:	f004 fe57 	bl	800f718 <strncmp>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d104      	bne.n	800aa7a <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa78:	e028      	b.n	800aacc <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	3322      	adds	r3, #34	; 0x22
 800aa7e:	2216      	movs	r2, #22
 800aa80:	4986      	ldr	r1, [pc, #536]	; (800ac9c <_ZN3BTD8HCI_taskEv+0x64c>)
 800aa82:	4618      	mov	r0, r3
 800aa84:	f004 fe48 	bl	800f718 <strncmp>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d110      	bne.n	800aab0 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2201      	movs	r2, #1
 800aa92:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaae:	e00d      	b.n	800aacc <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3322      	adds	r3, #34	; 0x22
 800aab4:	2213      	movs	r2, #19
 800aab6:	497a      	ldr	r1, [pc, #488]	; (800aca0 <_ZN3BTD8HCI_taskEv+0x650>)
 800aab8:	4618      	mov	r0, r3
 800aaba:	f004 fe2d 	bl	800f718 <strncmp>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d103      	bne.n	800aacc <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d117      	bne.n	800ab06 <_ZN3BTD8HCI_taskEv+0x4b6>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800aadc:	2b25      	cmp	r3, #37	; 0x25
 800aade:	d112      	bne.n	800ab06 <_ZN3BTD8HCI_taskEv+0x4b6>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800aae6:	2b08      	cmp	r3, #8
 800aae8:	d10d      	bne.n	800ab06 <_ZN3BTD8HCI_taskEv+0x4b6>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3322      	adds	r3, #34	; 0x22
 800aaee:	2213      	movs	r2, #19
 800aaf0:	496c      	ldr	r1, [pc, #432]	; (800aca4 <_ZN3BTD8HCI_taskEv+0x654>)
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f004 fe10 	bl	800f718 <strncmp>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d103      	bne.n	800ab06 <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d104      	bne.n	800ab1a <_ZN3BTD8HCI_taskEv+0x4ca>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d009      	beq.n	800ab2e <_ZN3BTD8HCI_taskEv+0x4de>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d004      	beq.n	800ab2e <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2208      	movs	r2, #8
 800ab28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800ab2c:	e0a7      	b.n	800ac7e <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fa17 	bl	800af62 <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	220d      	movs	r2, #13
 800ab38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ab3c:	e09f      	b.n	800ac7e <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 809a 	beq.w	800ac82 <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d003      	beq.n	800ab60 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	220f      	movs	r2, #15
 800ab7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ab82:	e07e      	b.n	800ac82 <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ab9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab9e:	d972      	bls.n	800ac86 <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	220a      	movs	r2, #10
 800abac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800abb0:	e069      	b.n	800ac86 <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800abb8:	f003 0304 	and.w	r3, r3, #4
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d064      	beq.n	800ac8a <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	3389      	adds	r3, #137	; 0x89
 800abcc:	2240      	movs	r2, #64	; 0x40
 800abce:	2100      	movs	r1, #0
 800abd0:	4618      	mov	r0, r3
 800abd2:	f004 fd55 	bl	800f680 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	33c9      	adds	r3, #201	; 0xc9
 800abda:	2240      	movs	r2, #64	; 0x40
 800abdc:	2100      	movs	r1, #0
 800abde:	4618      	mov	r0, r3
 800abe0:	f004 fd4e 	bl	800f680 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	220a      	movs	r2, #10
 800ac3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ac40:	e023      	b.n	800ac8a <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800ac42:	bf00      	nop
 800ac44:	e022      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac46:	bf00      	nop
 800ac48:	e020      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac4a:	bf00      	nop
 800ac4c:	e01e      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac4e:	bf00      	nop
 800ac50:	e01c      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac52:	bf00      	nop
 800ac54:	e01a      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac56:	bf00      	nop
 800ac58:	e018      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac5a:	bf00      	nop
 800ac5c:	e016      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac5e:	bf00      	nop
 800ac60:	e014      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac62:	bf00      	nop
 800ac64:	e012      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac66:	bf00      	nop
 800ac68:	e010      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac6a:	bf00      	nop
 800ac6c:	e00e      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac6e:	bf00      	nop
 800ac70:	e00c      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac72:	bf00      	nop
 800ac74:	e00a      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac76:	bf00      	nop
 800ac78:	e008      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac7a:	bf00      	nop
 800ac7c:	e006      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac7e:	bf00      	nop
 800ac80:	e004      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac82:	bf00      	nop
 800ac84:	e002      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac86:	bf00      	nop
 800ac88:	e000      	b.n	800ac8c <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac8a:	bf00      	nop
        }
}
 800ac8c:	bf00      	nop
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	0800f7d8 	.word	0x0800f7d8
 800ac98:	0800f7e4 	.word	0x0800f7e4
 800ac9c:	0800f7fc 	.word	0x0800f7fc
 800aca0:	0800f814 	.word	0x0800f814
 800aca4:	0800f828 	.word	0x0800f828

0800aca8 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800aca8:	b5b0      	push	{r4, r5, r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af02      	add	r7, sp, #8
 800acae:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800acb0:	2340      	movs	r3, #64	; 0x40
 800acb2:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	33c9      	adds	r3, #201	; 0xc9
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800acce:	f107 050a 	add.w	r5, r7, #10
 800acd2:	9201      	str	r2, [sp, #4]
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	462b      	mov	r3, r5
 800acd8:	4622      	mov	r2, r4
 800acda:	f003 f93e 	bl	800df5a <_ZN3USB10inTransferEhhPtPhh>
 800acde:	4603      	mov	r3, r0
 800ace0:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800ace2:	7b7b      	ldrb	r3, [r7, #13]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d125      	bne.n	800ad34 <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800ace8:	897b      	ldrh	r3, [r7, #10]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d022      	beq.n	800ad34 <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800acee:	2300      	movs	r3, #0
 800acf0:	73fb      	strb	r3, [r7, #15]
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	d81d      	bhi.n	800ad34 <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	3318      	adds	r3, #24
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4413      	add	r3, r2
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d011      	beq.n	800ad2c <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	3318      	adds	r3, #24
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	6858      	ldr	r0, [r3, #4]
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	3318      	adds	r3, #24
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	32c9      	adds	r2, #201	; 0xc9
 800ad28:	4611      	mov	r1, r2
 800ad2a:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	73fb      	strb	r3, [r7, #15]
 800ad32:	e7de      	b.n	800acf2 <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ad34:	2300      	movs	r3, #0
 800ad36:	73bb      	strb	r3, [r7, #14]
 800ad38:	7bbb      	ldrb	r3, [r7, #14]
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	d81c      	bhi.n	800ad78 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	3318      	adds	r3, #24
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d010      	beq.n	800ad70 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	3318      	adds	r3, #24
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	6859      	ldr	r1, [r3, #4]
 800ad5a:	7bbb      	ldrb	r3, [r7, #14]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	3318      	adds	r3, #24
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3304      	adds	r3, #4
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ad70:	7bbb      	ldrb	r3, [r7, #14]
 800ad72:	3301      	adds	r3, #1
 800ad74:	73bb      	strb	r3, [r7, #14]
 800ad76:	e7df      	b.n	800ad38 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800ad78:	bf00      	nop
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bdb0      	pop	{r4, r5, r7, pc}

0800ad80 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08c      	sub	sp, #48	; 0x30
 800ad84:	af08      	add	r7, sp, #32
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ad94:	f023 0301 	bic.w	r3, r3, #1
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800adb0:	2300      	movs	r3, #0
 800adb2:	9307      	str	r3, [sp, #28]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	9306      	str	r3, [sp, #24]
 800adb8:	88fb      	ldrh	r3, [r7, #6]
 800adba:	9305      	str	r3, [sp, #20]
 800adbc:	88fb      	ldrh	r3, [r7, #6]
 800adbe:	9304      	str	r3, [sp, #16]
 800adc0:	2300      	movs	r3, #0
 800adc2:	9303      	str	r3, [sp, #12]
 800adc4:	2300      	movs	r3, #0
 800adc6:	9302      	str	r3, [sp, #8]
 800adc8:	2300      	movs	r3, #0
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	2300      	movs	r3, #0
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	2320      	movs	r3, #32
 800add2:	f002 ffea 	bl	800ddaa <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800add6:	bf00      	nop
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2203      	movs	r2, #3
 800adf2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	220c      	movs	r2, #12
 800adfa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	3389      	adds	r3, #137	; 0x89
 800ae0a:	2203      	movs	r2, #3
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7ff ffb6 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ae2a:	f023 0310 	bic.w	r3, r3, #16
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	221a      	movs	r2, #26
 800ae3a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	220c      	movs	r2, #12
 800ae42:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d004      	beq.n	800ae60 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2203      	movs	r2, #3
 800ae5a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800ae5e:	e003      	b.n	800ae68 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2202      	movs	r2, #2
 800ae64:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3389      	adds	r3, #137	; 0x89
 800ae6c:	2204      	movs	r2, #4
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7ff ff85 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800ae76:	bf00      	nop
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ae8c:	f023 0320 	bic.w	r3, r3, #32
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2209      	movs	r2, #9
 800ae9c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2210      	movs	r2, #16
 800aea4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3389      	adds	r3, #137	; 0x89
 800aeb4:	2203      	movs	r2, #3
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7ff ff61 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800aebe:	bf00      	nop
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b082      	sub	sp, #8
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2210      	movs	r2, #16
 800aeec:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	3389      	adds	r3, #137	; 0x89
 800aefc:	2203      	movs	r2, #3
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff ff3d 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800af06:	bf00      	nop
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800af20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af24:	b29a      	uxth	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2204      	movs	r2, #4
 800af30:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2210      	movs	r2, #16
 800af38:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	78fa      	ldrb	r2, [r7, #3]
 800af48:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3389      	adds	r3, #137	; 0x89
 800af50:	2204      	movs	r2, #4
 800af52:	4619      	mov	r1, r3
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7ff ff13 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800af5a:	bf00      	nop
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800af62:	b580      	push	{r7, lr}
 800af64:	b082      	sub	sp, #8
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800af70:	f023 0302 	bic.w	r3, r3, #2
 800af74:	b29a      	uxth	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2209      	movs	r2, #9
 800af80:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2204      	movs	r2, #4
 800af88:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2207      	movs	r2, #7
 800af90:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	7f1a      	ldrb	r2, [r3, #28]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	7f5a      	ldrb	r2, [r3, #29]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	7f9a      	ldrb	r2, [r3, #30]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	7fda      	ldrb	r2, [r3, #31]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 2020 	ldrb.w	r2, [r3, #32]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3389      	adds	r3, #137	; 0x89
 800afe0:	220a      	movs	r2, #10
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff fecb 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800afea:	bf00      	nop
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b082      	sub	sp, #8
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b000:	f023 0308 	bic.w	r3, r3, #8
 800b004:	b29a      	uxth	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2219      	movs	r2, #25
 800b010:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2204      	movs	r2, #4
 800b018:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	220a      	movs	r2, #10
 800b020:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	7f1a      	ldrb	r2, [r3, #28]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	7f5a      	ldrb	r2, [r3, #29]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	7f9a      	ldrb	r2, [r3, #30]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	7fda      	ldrb	r2, [r3, #31]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	3389      	adds	r3, #137	; 0x89
 800b088:	220d      	movs	r2, #13
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7ff fe77 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b092:	bf00      	nop
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800b09a:	b590      	push	{r4, r7, lr}
 800b09c:	b085      	sub	sp, #20
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2213      	movs	r2, #19
 800b0a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	220c      	movs	r2, #12
 800b0b0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800b0b4:	6838      	ldr	r0, [r7, #0]
 800b0b6:	f7f5 f8a5 	bl	8000204 <strlen>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	3301      	adds	r3, #1
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	73fb      	strb	r3, [r7, #15]
 800b0cc:	7bfc      	ldrb	r4, [r7, #15]
 800b0ce:	6838      	ldr	r0, [r7, #0]
 800b0d0:	f7f5 f898 	bl	8000204 <strlen>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	429c      	cmp	r4, r3
 800b0d8:	d20e      	bcs.n	800b0f8 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	441a      	add	r2, r3
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	3303      	adds	r3, #3
 800b0e4:	7811      	ldrb	r1, [r2, #0]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	460a      	mov	r2, r1
 800b0ec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	73fb      	strb	r3, [r7, #15]
 800b0f6:	e7e9      	b.n	800b0cc <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	3303      	adds	r3, #3
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	4413      	add	r3, r2
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800b10c:	6838      	ldr	r0, [r7, #0]
 800b10e:	f7f5 f879 	bl	8000204 <strlen>
 800b112:	4603      	mov	r3, r0
 800b114:	b29b      	uxth	r3, r3
 800b116:	3304      	adds	r3, #4
 800b118:	b29b      	uxth	r3, r3
 800b11a:	461a      	mov	r2, r3
 800b11c:	4621      	mov	r1, r4
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff fe2e 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b124:	bf00      	nop
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd90      	pop	{r4, r7, pc}

0800b12c <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	220c      	movs	r2, #12
 800b140:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2208      	movs	r2, #8
 800b148:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	22ff      	movs	r2, #255	; 0xff
 800b150:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	22ff      	movs	r2, #255	; 0xff
 800b158:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	22ff      	movs	r2, #255	; 0xff
 800b160:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	22ff      	movs	r2, #255	; 0xff
 800b168:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	22ff      	movs	r2, #255	; 0xff
 800b170:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	221f      	movs	r2, #31
 800b178:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	22ff      	movs	r2, #255	; 0xff
 800b180:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3389      	adds	r3, #137	; 0x89
 800b190:	220b      	movs	r2, #11
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff fdf3 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b19a:	bf00      	nop
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2256      	movs	r2, #86	; 0x56
 800b1b2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	220c      	movs	r2, #12
 800b1ba:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800b1c6:	78fb      	ldrb	r3, [r7, #3]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	e000      	b.n	800b1d2 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	3389      	adds	r3, #137	; 0x89
 800b1dc:	2204      	movs	r2, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff fdcd 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b1e6:	bf00      	nop
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b1fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b200:	b29a      	uxth	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2204      	movs	r2, #4
 800b214:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2205      	movs	r2, #5
 800b21c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2233      	movs	r2, #51	; 0x33
 800b224:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	228b      	movs	r2, #139	; 0x8b
 800b22c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	229e      	movs	r2, #158	; 0x9e
 800b234:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2230      	movs	r2, #48	; 0x30
 800b23c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	220a      	movs	r2, #10
 800b244:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3389      	adds	r3, #137	; 0x89
 800b24c:	2208      	movs	r2, #8
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7ff fd95 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b256:	bf00      	nop
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800b25e:	b580      	push	{r7, lr}
 800b260:	b082      	sub	sp, #8
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2202      	movs	r2, #2
 800b26a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2204      	movs	r2, #4
 800b272:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3389      	adds	r3, #137	; 0x89
 800b282:	2203      	movs	r2, #3
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff fd7a 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b28c:	bf00      	nop
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	331c      	adds	r3, #28
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f804 	bl	800b2b0 <_ZN3BTD11hci_connectEPh>
}
 800b2a8:	bf00      	nop
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b2c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2205      	movs	r2, #5
 800b2d0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2204      	movs	r2, #4
 800b2d8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	220d      	movs	r2, #13
 800b2e0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	781a      	ldrb	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	785a      	ldrb	r2, [r3, #1]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	789a      	ldrb	r2, [r3, #2]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	78da      	ldrb	r2, [r3, #3]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	791a      	ldrb	r2, [r3, #4]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	795a      	ldrb	r2, [r3, #5]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2218      	movs	r2, #24
 800b324:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	22cc      	movs	r2, #204	; 0xcc
 800b32c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3389      	adds	r3, #137	; 0x89
 800b35c:	2210      	movs	r2, #16
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7ff fd0d 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b366:	bf00      	nop
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800b36e:	b590      	push	{r4, r7, lr}
 800b370:	b085      	sub	sp, #20
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	220d      	movs	r2, #13
 800b37a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2204      	movs	r2, #4
 800b382:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2217      	movs	r2, #23
 800b38a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	7f1a      	ldrb	r2, [r3, #28]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	7f5a      	ldrb	r2, [r3, #29]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	7f9a      	ldrb	r2, [r3, #30]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	7fda      	ldrb	r2, [r3, #31]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d03f      	beq.n	800b458 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2206      	movs	r2, #6
 800b3dc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d013      	beq.n	800b412 <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	73fb      	strb	r3, [r7, #15]
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
 800b3f0:	2b05      	cmp	r3, #5
 800b3f2:	d822      	bhi.n	800b43a <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800b3f4:	7bfa      	ldrb	r2, [r7, #15]
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
 800b3f8:	330a      	adds	r3, #10
 800b3fa:	6879      	ldr	r1, [r7, #4]
 800b3fc:	440a      	add	r2, r1
 800b3fe:	7d11      	ldrb	r1, [r2, #20]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	4413      	add	r3, r2
 800b404:	460a      	mov	r2, r1
 800b406:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
 800b40c:	3301      	adds	r3, #1
 800b40e:	73fb      	strb	r3, [r7, #15]
 800b410:	e7ed      	b.n	800b3ee <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800b412:	2300      	movs	r3, #0
 800b414:	73bb      	strb	r3, [r7, #14]
 800b416:	7bbb      	ldrb	r3, [r7, #14]
 800b418:	2b05      	cmp	r3, #5
 800b41a:	d80e      	bhi.n	800b43a <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800b41c:	7bba      	ldrb	r2, [r7, #14]
 800b41e:	7bbb      	ldrb	r3, [r7, #14]
 800b420:	330a      	adds	r3, #10
 800b422:	6879      	ldr	r1, [r7, #4]
 800b424:	440a      	add	r2, r1
 800b426:	7f11      	ldrb	r1, [r2, #28]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	4413      	add	r3, r2
 800b42c:	460a      	mov	r2, r1
 800b42e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b432:	7bbb      	ldrb	r3, [r7, #14]
 800b434:	3301      	adds	r3, #1
 800b436:	73bb      	strb	r3, [r7, #14]
 800b438:	e7ed      	b.n	800b416 <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800b43a:	2310      	movs	r3, #16
 800b43c:	737b      	strb	r3, [r7, #13]
 800b43e:	7b7b      	ldrb	r3, [r7, #13]
 800b440:	2b19      	cmp	r3, #25
 800b442:	d83c      	bhi.n	800b4be <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800b444:	7b7b      	ldrb	r3, [r7, #13]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	4413      	add	r3, r2
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800b450:	7b7b      	ldrb	r3, [r7, #13]
 800b452:	3301      	adds	r3, #1
 800b454:	737b      	strb	r3, [r7, #13]
 800b456:	e7f2      	b.n	800b43e <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7f4 fed1 	bl	8000204 <strlen>
 800b462:	4603      	mov	r3, r0
 800b464:	b2da      	uxtb	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b46c:	2300      	movs	r3, #0
 800b46e:	733b      	strb	r3, [r7, #12]
 800b470:	7b3c      	ldrb	r4, [r7, #12]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	4618      	mov	r0, r3
 800b478:	f7f4 fec4 	bl	8000204 <strlen>
 800b47c:	4603      	mov	r3, r0
 800b47e:	429c      	cmp	r4, r3
 800b480:	d20f      	bcs.n	800b4a2 <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	691a      	ldr	r2, [r3, #16]
 800b486:	7b3b      	ldrb	r3, [r7, #12]
 800b488:	441a      	add	r2, r3
 800b48a:	7b3b      	ldrb	r3, [r7, #12]
 800b48c:	330a      	adds	r3, #10
 800b48e:	7811      	ldrb	r1, [r2, #0]
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	4413      	add	r3, r2
 800b494:	460a      	mov	r2, r1
 800b496:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b49a:	7b3b      	ldrb	r3, [r7, #12]
 800b49c:	3301      	adds	r3, #1
 800b49e:	733b      	strb	r3, [r7, #12]
 800b4a0:	e7e6      	b.n	800b470 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800b4a2:	7b3b      	ldrb	r3, [r7, #12]
 800b4a4:	2b0f      	cmp	r3, #15
 800b4a6:	d80a      	bhi.n	800b4be <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800b4a8:	7b3b      	ldrb	r3, [r7, #12]
 800b4aa:	330a      	adds	r3, #10
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800b4b6:	7b3b      	ldrb	r3, [r7, #12]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	733b      	strb	r3, [r7, #12]
 800b4bc:	e7f1      	b.n	800b4a2 <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	3389      	adds	r3, #137	; 0x89
 800b4c2:	221a      	movs	r2, #26
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7ff fc5a 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b4cc:	bf00      	nop
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd90      	pop	{r4, r7, pc}

0800b4d4 <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	220e      	movs	r2, #14
 800b4e0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2204      	movs	r2, #4
 800b4e8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2206      	movs	r2, #6
 800b4f0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	7f1a      	ldrb	r2, [r3, #28]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	7f5a      	ldrb	r2, [r3, #29]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	7f9a      	ldrb	r2, [r3, #30]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	7fda      	ldrb	r2, [r3, #31]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3389      	adds	r3, #137	; 0x89
 800b538:	2209      	movs	r2, #9
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff fc1f 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b542:	bf00      	nop
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	220c      	movs	r2, #12
 800b556:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2204      	movs	r2, #4
 800b55e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2206      	movs	r2, #6
 800b566:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	7f1a      	ldrb	r2, [r3, #28]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	7f5a      	ldrb	r2, [r3, #29]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	7f9a      	ldrb	r2, [r3, #30]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	7fda      	ldrb	r2, [r3, #31]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	3389      	adds	r3, #137	; 0x89
 800b5ae:	2209      	movs	r2, #9
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7ff fbe4 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b5b8:	bf00      	nop
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	222b      	movs	r2, #43	; 0x2b
 800b5cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2204      	movs	r2, #4
 800b5d4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2209      	movs	r2, #9
 800b5dc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	7f1a      	ldrb	r2, [r3, #28]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	7f5a      	ldrb	r2, [r3, #29]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	7f9a      	ldrb	r2, [r3, #30]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	7fda      	ldrb	r2, [r3, #31]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2203      	movs	r2, #3
 800b624:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3389      	adds	r3, #137	; 0x89
 800b63c:	220c      	movs	r2, #12
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7ff fb9d 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b646:	bf00      	nop
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800b64e:	b580      	push	{r7, lr}
 800b650:	b082      	sub	sp, #8
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	222c      	movs	r2, #44	; 0x2c
 800b65a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2204      	movs	r2, #4
 800b662:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2206      	movs	r2, #6
 800b66a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	7f1a      	ldrb	r2, [r3, #28]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	7f5a      	ldrb	r2, [r3, #29]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	7f9a      	ldrb	r2, [r3, #30]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	7fda      	ldrb	r2, [r3, #31]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	3389      	adds	r3, #137	; 0x89
 800b6b2:	2209      	movs	r2, #9
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7ff fb62 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b6bc:	bf00      	nop
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2211      	movs	r2, #17
 800b6d0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2204      	movs	r2, #4
 800b6d8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2202      	movs	r2, #2
 800b6e0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	8b5b      	ldrh	r3, [r3, #26]
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	8b5b      	ldrh	r3, [r3, #26]
 800b6f4:	121b      	asrs	r3, r3, #8
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	f003 030f 	and.w	r3, r3, #15
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	3389      	adds	r3, #137	; 0x89
 800b708:	2205      	movs	r2, #5
 800b70a:	4619      	mov	r1, r3
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7ff fb37 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b082      	sub	sp, #8
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	460b      	mov	r3, r1
 800b724:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b72c:	f023 0304 	bic.w	r3, r3, #4
 800b730:	b29a      	uxth	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2206      	movs	r2, #6
 800b73c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2204      	movs	r2, #4
 800b744:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2203      	movs	r2, #3
 800b74c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800b750:	887b      	ldrh	r3, [r7, #2]
 800b752:	b2da      	uxtb	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800b75a:	887b      	ldrh	r3, [r7, #2]
 800b75c:	121b      	asrs	r3, r3, #8
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	f003 030f 	and.w	r3, r3, #15
 800b764:	b2da      	uxtb	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2213      	movs	r2, #19
 800b770:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3389      	adds	r3, #137	; 0x89
 800b778:	2206      	movs	r2, #6
 800b77a:	4619      	mov	r1, r3
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f7ff faff 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b782:	bf00      	nop
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b082      	sub	sp, #8
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2224      	movs	r2, #36	; 0x24
 800b796:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	220c      	movs	r2, #12
 800b79e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2203      	movs	r2, #3
 800b7a6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2204      	movs	r2, #4
 800b7ae:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2208      	movs	r2, #8
 800b7b6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3389      	adds	r3, #137	; 0x89
 800b7c6:	2206      	movs	r2, #6
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7ff fad8 	bl	800ad80 <_ZN3BTD11HCI_CommandEPht>
}
 800b7d0:	bf00      	nop
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800b7d8:	b5b0      	push	{r4, r5, r7, lr}
 800b7da:	b08a      	sub	sp, #40	; 0x28
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	607a      	str	r2, [r7, #4]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	817b      	strh	r3, [r7, #10]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800b7ec:	466b      	mov	r3, sp
 800b7ee:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800b7f0:	7a7b      	ldrb	r3, [r7, #9]
 800b7f2:	1ddc      	adds	r4, r3, #7
 800b7f4:	61bc      	str	r4, [r7, #24]
 800b7f6:	4623      	mov	r3, r4
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f04f 0100 	mov.w	r1, #0
 800b800:	f04f 0200 	mov.w	r2, #0
 800b804:	f04f 0300 	mov.w	r3, #0
 800b808:	00cb      	lsls	r3, r1, #3
 800b80a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b80e:	00c2      	lsls	r2, r0, #3
 800b810:	4623      	mov	r3, r4
 800b812:	3301      	adds	r3, #1
 800b814:	4618      	mov	r0, r3
 800b816:	f04f 0100 	mov.w	r1, #0
 800b81a:	f04f 0200 	mov.w	r2, #0
 800b81e:	f04f 0300 	mov.w	r3, #0
 800b822:	00cb      	lsls	r3, r1, #3
 800b824:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b828:	00c2      	lsls	r2, r0, #3
 800b82a:	4623      	mov	r3, r4
 800b82c:	3301      	adds	r3, #1
 800b82e:	3307      	adds	r3, #7
 800b830:	08db      	lsrs	r3, r3, #3
 800b832:	00db      	lsls	r3, r3, #3
 800b834:	ebad 0d03 	sub.w	sp, sp, r3
 800b838:	ab02      	add	r3, sp, #8
 800b83a:	3300      	adds	r3, #0
 800b83c:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800b83e:	897b      	ldrh	r3, [r7, #10]
 800b840:	b2da      	uxtb	r2, r3
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800b846:	897b      	ldrh	r3, [r7, #10]
 800b848:	121b      	asrs	r3, r3, #8
 800b84a:	b25b      	sxtb	r3, r3
 800b84c:	f003 030f 	and.w	r3, r3, #15
 800b850:	b25b      	sxtb	r3, r3
 800b852:	f043 0320 	orr.w	r3, r3, #32
 800b856:	b25b      	sxtb	r3, r3
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800b85e:	7a7b      	ldrb	r3, [r7, #9]
 800b860:	3304      	adds	r3, #4
 800b862:	b2da      	uxtb	r2, r3
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800b868:	7a7b      	ldrb	r3, [r7, #9]
 800b86a:	3304      	adds	r3, #4
 800b86c:	121b      	asrs	r3, r3, #8
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	7a7a      	ldrb	r2, [r7, #9]
 800b878:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800b87a:	7a7b      	ldrb	r3, [r7, #9]
 800b87c:	121b      	asrs	r3, r3, #8
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800b88a:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800b892:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800b894:	2300      	movs	r3, #0
 800b896:	83fb      	strh	r3, [r7, #30]
 800b898:	7a7b      	ldrb	r3, [r7, #9]
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	8bfa      	ldrh	r2, [r7, #30]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d20b      	bcs.n	800b8ba <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800b8a2:	8bfb      	ldrh	r3, [r7, #30]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	441a      	add	r2, r3
 800b8a8:	8bfb      	ldrh	r3, [r7, #30]
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	7811      	ldrb	r1, [r2, #0]
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800b8b2:	8bfb      	ldrh	r3, [r7, #30]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	83fb      	strh	r3, [r7, #30]
 800b8b8:	e7ee      	b.n	800b898 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800b8ca:	7a7b      	ldrb	r3, [r7, #9]
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	b29c      	uxth	r4, r3
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	4623      	mov	r3, r4
 800b8d8:	f002 fc4a 	bl	800e170 <_ZN3USB11outTransferEhhtPh>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800b8e0:	7cfb      	ldrb	r3, [r7, #19]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800b8e6:	4804      	ldr	r0, [pc, #16]	; (800b8f8 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x120>)
 800b8e8:	f7f6 f930 	bl	8001b4c <HAL_Delay>
 800b8ec:	46ad      	mov	sp, r5
}
 800b8ee:	bf00      	nop
 800b8f0:	3720      	adds	r7, #32
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bdb0      	pop	{r4, r5, r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	000186a0 	.word	0x000186a0

0800b8fc <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b086      	sub	sp, #24
 800b900:	af02      	add	r7, sp, #8
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	607b      	str	r3, [r7, #4]
 800b906:	460b      	mov	r3, r1
 800b908:	817b      	strh	r3, [r7, #10]
 800b90a:	4613      	mov	r3, r2
 800b90c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2202      	movs	r2, #2
 800b912:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	7a7a      	ldrb	r2, [r7, #9]
 800b91a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2204      	movs	r2, #4
 800b922:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800b92e:	8b3b      	ldrh	r3, [r7, #24]
 800b930:	b2da      	uxtb	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800b938:	8b3b      	ldrh	r3, [r7, #24]
 800b93a:	121b      	asrs	r3, r3, #8
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	781a      	ldrb	r2, [r3, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	785a      	ldrb	r2, [r3, #1]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b95e:	8979      	ldrh	r1, [r7, #10]
 800b960:	2300      	movs	r3, #0
 800b962:	9301      	str	r3, [sp, #4]
 800b964:	2301      	movs	r3, #1
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	2308      	movs	r3, #8
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f7ff ff34 	bl	800b7d8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b970:	bf00      	nop
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800b978:	b580      	push	{r7, lr}
 800b97a:	b086      	sub	sp, #24
 800b97c:	af02      	add	r7, sp, #8
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	607b      	str	r3, [r7, #4]
 800b982:	460b      	mov	r3, r1
 800b984:	817b      	strh	r3, [r7, #10]
 800b986:	4613      	mov	r3, r2
 800b988:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2203      	movs	r2, #3
 800b98e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	7a7a      	ldrb	r2, [r7, #9]
 800b996:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2208      	movs	r2, #8
 800b99e:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	781a      	ldrb	r2, [r3, #0]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	785a      	ldrb	r2, [r3, #1]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	781a      	ldrb	r2, [r3, #0]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	785a      	ldrb	r2, [r3, #1]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	7f3a      	ldrb	r2, [r7, #28]
 800b9d6:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b9f8:	8979      	ldrh	r1, [r7, #10]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	2301      	movs	r3, #1
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	230c      	movs	r3, #12
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f7ff fee7 	bl	800b7d8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ba0a:	bf00      	nop
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b086      	sub	sp, #24
 800ba16:	af02      	add	r7, sp, #8
 800ba18:	60f8      	str	r0, [r7, #12]
 800ba1a:	607b      	str	r3, [r7, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	817b      	strh	r3, [r7, #10]
 800ba20:	4613      	mov	r3, r2
 800ba22:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2204      	movs	r2, #4
 800ba28:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	7a7a      	ldrb	r2, [r7, #9]
 800ba30:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2208      	movs	r2, #8
 800ba38:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	781a      	ldrb	r2, [r3, #0]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	785a      	ldrb	r2, [r3, #1]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2202      	movs	r2, #2
 800ba74:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	22ff      	movs	r2, #255	; 0xff
 800ba7c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	22ff      	movs	r2, #255	; 0xff
 800ba84:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ba8e:	8979      	ldrh	r1, [r7, #10]
 800ba90:	2300      	movs	r3, #0
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	2301      	movs	r3, #1
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	230c      	movs	r3, #12
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fe9c 	bl	800b7d8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800baa0:	bf00      	nop
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b086      	sub	sp, #24
 800baac:	af02      	add	r7, sp, #8
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	607b      	str	r3, [r7, #4]
 800bab2:	460b      	mov	r3, r1
 800bab4:	817b      	strh	r3, [r7, #10]
 800bab6:	4613      	mov	r3, r2
 800bab8:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2205      	movs	r2, #5
 800babe:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	7a7a      	ldrb	r2, [r7, #9]
 800bac6:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	220a      	movs	r2, #10
 800bace:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	781a      	ldrb	r2, [r3, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	785a      	ldrb	r2, [r3, #1]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2201      	movs	r2, #1
 800bb12:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2202      	movs	r2, #2
 800bb1a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	22a0      	movs	r2, #160	; 0xa0
 800bb22:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2202      	movs	r2, #2
 800bb2a:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bb34:	8979      	ldrh	r1, [r7, #10]
 800bb36:	2300      	movs	r3, #0
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	230e      	movs	r3, #14
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f7ff fe49 	bl	800b7d8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bb46:	bf00      	nop
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b086      	sub	sp, #24
 800bb52:	af02      	add	r7, sp, #8
 800bb54:	60f8      	str	r0, [r7, #12]
 800bb56:	607b      	str	r3, [r7, #4]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	817b      	strh	r3, [r7, #10]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2206      	movs	r2, #6
 800bb64:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	7a7a      	ldrb	r2, [r7, #9]
 800bb6c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2204      	movs	r2, #4
 800bb74:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	781a      	ldrb	r2, [r3, #0]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	785a      	ldrb	r2, [r3, #1]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	781a      	ldrb	r2, [r3, #0]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	785a      	ldrb	r2, [r3, #1]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bbae:	8979      	ldrh	r1, [r7, #10]
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	9301      	str	r3, [sp, #4]
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	2308      	movs	r3, #8
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f7ff fe0c 	bl	800b7d8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bbc0:	bf00      	nop
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af02      	add	r7, sp, #8
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	607b      	str	r3, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	817b      	strh	r3, [r7, #10]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2207      	movs	r2, #7
 800bbde:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	7a7a      	ldrb	r2, [r7, #9]
 800bbe6:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2204      	movs	r2, #4
 800bbee:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	781a      	ldrb	r2, [r3, #0]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	785a      	ldrb	r2, [r3, #1]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	781a      	ldrb	r2, [r3, #0]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	785a      	ldrb	r2, [r3, #1]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bc28:	8979      	ldrh	r1, [r7, #10]
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	2301      	movs	r3, #1
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	2308      	movs	r3, #8
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f7ff fdcf 	bl	800b7d8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bc3a:	bf00      	nop
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b084      	sub	sp, #16
 800bc46:	af02      	add	r7, sp, #8
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	4608      	mov	r0, r1
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	461a      	mov	r2, r3
 800bc50:	4603      	mov	r3, r0
 800bc52:	807b      	strh	r3, [r7, #2]
 800bc54:	460b      	mov	r3, r1
 800bc56:	707b      	strb	r3, [r7, #1]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	220b      	movs	r2, #11
 800bc60:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	787a      	ldrb	r2, [r7, #1]
 800bc68:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2208      	movs	r2, #8
 800bc70:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	783a      	ldrb	r2, [r7, #0]
 800bc80:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	7c3a      	ldrb	r2, [r7, #16]
 800bc88:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bcc2:	8879      	ldrh	r1, [r7, #2]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	9301      	str	r3, [sp, #4]
 800bcc8:	2301      	movs	r3, #1
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	230c      	movs	r3, #12
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7ff fd82 	bl	800b7d8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bcd4:	bf00      	nop
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08e      	sub	sp, #56	; 0x38
 800bce0:	af08      	add	r7, sp, #32
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800bce6:	2301      	movs	r3, #1
 800bce8:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800bcea:	2300      	movs	r3, #0
 800bcec:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800bcee:	2300      	movs	r3, #0
 800bcf0:	75fb      	strb	r3, [r7, #23]
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
 800bcf4:	2b05      	cmp	r3, #5
 800bcf6:	d811      	bhi.n	800bd1c <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
 800bcfa:	f1c3 0305 	rsb	r3, r3, #5
 800bcfe:	461a      	mov	r2, r3
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	441a      	add	r2, r3
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	3302      	adds	r3, #2
 800bd08:	7812      	ldrb	r2, [r2, #0]
 800bd0a:	f107 0118 	add.w	r1, r7, #24
 800bd0e:	440b      	add	r3, r1
 800bd10:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	3301      	adds	r3, #1
 800bd18:	75fb      	strb	r3, [r7, #23]
 800bd1a:	e7ea      	b.n	800bcf2 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9307      	str	r3, [sp, #28]
 800bd30:	f107 030c 	add.w	r3, r7, #12
 800bd34:	9306      	str	r3, [sp, #24]
 800bd36:	2308      	movs	r3, #8
 800bd38:	9305      	str	r3, [sp, #20]
 800bd3a:	2308      	movs	r3, #8
 800bd3c:	9304      	str	r3, [sp, #16]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	9303      	str	r3, [sp, #12]
 800bd42:	2303      	movs	r3, #3
 800bd44:	9302      	str	r3, [sp, #8]
 800bd46:	23f5      	movs	r3, #245	; 0xf5
 800bd48:	9301      	str	r3, [sp, #4]
 800bd4a:	2309      	movs	r3, #9
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	2321      	movs	r3, #33	; 0x21
 800bd50:	f002 f82b 	bl	800ddaa <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800bd54:	bf00      	nop
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08e      	sub	sp, #56	; 0x38
 800bd60:	af08      	add	r7, sp, #32
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800bd66:	2305      	movs	r3, #5
 800bd68:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800bd6a:	2310      	movs	r3, #16
 800bd6c:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800bd72:	2302      	movs	r3, #2
 800bd74:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800bd76:	2312      	movs	r3, #18
 800bd78:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	75fb      	strb	r3, [r7, #23]
 800bd7e:	7dfb      	ldrb	r3, [r7, #23]
 800bd80:	2b05      	cmp	r3, #5
 800bd82:	d80e      	bhi.n	800bda2 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800bd84:	7dfb      	ldrb	r3, [r7, #23]
 800bd86:	683a      	ldr	r2, [r7, #0]
 800bd88:	441a      	add	r2, r3
 800bd8a:	7dfb      	ldrb	r3, [r7, #23]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	7812      	ldrb	r2, [r2, #0]
 800bd90:	f107 0118 	add.w	r1, r7, #24
 800bd94:	440b      	add	r3, r1
 800bd96:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800bd9a:	7dfb      	ldrb	r3, [r7, #23]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	75fb      	strb	r3, [r7, #23]
 800bda0:	e7ed      	b.n	800bd7e <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	9307      	str	r3, [sp, #28]
 800bdb6:	f107 030c 	add.w	r3, r7, #12
 800bdba:	9306      	str	r3, [sp, #24]
 800bdbc:	230b      	movs	r3, #11
 800bdbe:	9305      	str	r3, [sp, #20]
 800bdc0:	230b      	movs	r3, #11
 800bdc2:	9304      	str	r3, [sp, #16]
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	9303      	str	r3, [sp, #12]
 800bdc8:	2303      	movs	r3, #3
 800bdca:	9302      	str	r3, [sp, #8]
 800bdcc:	2305      	movs	r3, #5
 800bdce:	9301      	str	r3, [sp, #4]
 800bdd0:	2309      	movs	r3, #9
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	2321      	movs	r3, #33	; 0x21
 800bdd6:	f001 ffe8 	bl	800ddaa <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800bdda:	bf00      	nop
 800bddc:	3718      	adds	r7, #24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	4a04      	ldr	r2, [pc, #16]	; (800be00 <_ZN13USBReadParserC1Ev+0x1c>)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	601a      	str	r2, [r3, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	0800f958 	.word	0x0800f958

0800be04 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4618      	mov	r0, r3
 800be12:	f7ff ffe7 	bl	800bde4 <_ZN13USBReadParserC1Ev>
 800be16:	4a21      	ldr	r2, [pc, #132]	; (800be9c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	601a      	str	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	605a      	str	r2, [r3, #4]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3308      	adds	r3, #8
 800be26:	4618      	mov	r0, r3
 800be28:	f7fd fb51 	bl	80094ce <_ZN16MultiValueBufferC1Ev>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	3310      	adds	r3, #16
 800be30:	4618      	mov	r0, r3
 800be32:	f7fd fb63 	bl	80094fc <_ZN20MultiByteValueParserC1Ev>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	3318      	adds	r3, #24
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fd fb8a 	bl	8009554 <_ZN11ByteSkipperC1Ev>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f103 0220 	add.w	r2, r3, #32
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f103 0210 	add.w	r2, r3, #16
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	3308      	adds	r3, #8
 800be76:	4619      	mov	r1, r3
 800be78:	4610      	mov	r0, r2
 800be7a:	f7fd fb53 	bl	8009524 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f103 0218 	add.w	r2, r3, #24
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	3308      	adds	r3, #8
 800be88:	4619      	mov	r1, r3
 800be8a:	4610      	mov	r0, r2
 800be8c:	f7fd fb76 	bl	800957c <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4618      	mov	r0, r3
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	0800f900 	.word	0x0800f900

0800bea0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4618      	mov	r0, r3
 800beae:	f7ff ff99 	bl	800bde4 <_ZN13USBReadParserC1Ev>
 800beb2:	4a21      	ldr	r2, [pc, #132]	; (800bf38 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	601a      	str	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	605a      	str	r2, [r3, #4]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	3308      	adds	r3, #8
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fd fb03 	bl	80094ce <_ZN16MultiValueBufferC1Ev>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3310      	adds	r3, #16
 800becc:	4618      	mov	r0, r3
 800bece:	f7fd fb15 	bl	80094fc <_ZN20MultiByteValueParserC1Ev>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3318      	adds	r3, #24
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fd fb3c 	bl	8009554 <_ZN11ByteSkipperC1Ev>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f103 0220 	add.w	r2, r3, #32
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f103 0210 	add.w	r2, r3, #16
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3308      	adds	r3, #8
 800bf12:	4619      	mov	r1, r3
 800bf14:	4610      	mov	r0, r2
 800bf16:	f7fd fb05 	bl	8009524 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f103 0218 	add.w	r2, r3, #24
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3308      	adds	r3, #8
 800bf24:	4619      	mov	r1, r3
 800bf26:	4610      	mov	r0, r2
 800bf28:	f7fd fb28 	bl	800957c <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	0800f8f4 	.word	0x0800f8f4

0800bf3c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	607a      	str	r2, [r7, #4]
 800bf46:	603b      	str	r3, [r7, #0]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800bf4c:	897b      	ldrh	r3, [r7, #10]
 800bf4e:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800bf54:	8afb      	ldrh	r3, [r7, #22]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00f      	beq.n	800bf7a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800bf5a:	f107 0216 	add.w	r2, r7, #22
 800bf5e:	f107 0310 	add.w	r3, r7, #16
 800bf62:	4619      	mov	r1, r3
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f000 f82d 	bl	800bfc4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	f083 0301 	eor.w	r3, r3, #1
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d100      	bne.n	800bf78 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800bf76:	e7ed      	b.n	800bf54 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800bf78:	bf00      	nop
}
 800bf7a:	3718      	adds	r7, #24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	607a      	str	r2, [r7, #4]
 800bf8a:	603b      	str	r3, [r7, #0]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800bf90:	897b      	ldrh	r3, [r7, #10]
 800bf92:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800bf98:	8afb      	ldrh	r3, [r7, #22]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00f      	beq.n	800bfbe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800bf9e:	f107 0216 	add.w	r2, r7, #22
 800bfa2:	f107 0310 	add.w	r3, r7, #16
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f000 f981 	bl	800c2b0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	f083 0301 	eor.w	r3, r3, #1
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d100      	bne.n	800bfbc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800bfba:	e7ed      	b.n	800bf98 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800bfbc:	bf00      	nop
}
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800bfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfc6:	b089      	sub	sp, #36	; 0x24
 800bfc8:	af02      	add	r7, sp, #8
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	3320      	adds	r3, #32
 800bfd4:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	3320      	adds	r3, #32
 800bfda:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfe2:	2b04      	cmp	r3, #4
 800bfe4:	f200 815e 	bhi.w	800c2a4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800bfe8:	a201      	add	r2, pc, #4	; (adr r2, 800bff0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800bfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfee:	bf00      	nop
 800bff0:	0800c005 	.word	0x0800c005
 800bff4:	0800c025 	.word	0x0800c025
 800bff8:	0800c067 	.word	0x0800c067
 800bffc:	0800c07b 	.word	0x0800c07b
 800c000:	0800c13f 	.word	0x0800c13f
                case 0:
                        theBuffer.valueSize = 2;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2202      	movs	r2, #2
 800c008:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f103 0210 	add.w	r2, r3, #16
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3308      	adds	r3, #8
 800c014:	4619      	mov	r1, r3
 800c016:	4610      	mov	r0, r2
 800c018:	f7fd fa84 	bl	8009524 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3310      	adds	r3, #16
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	68b9      	ldr	r1, [r7, #8]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f003 fa8f 	bl	800f550 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c032:	4603      	mov	r3, r0
 800c034:	f083 0301 	eor.w	r3, r3, #1
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800c03e:	2300      	movs	r3, #0
 800c040:	e131      	b.n	800c2a6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c048:	781a      	ldrb	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c056:	785a      	ldrb	r2, [r3, #1]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2202      	movs	r2, #2
 800c062:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	3320      	adds	r3, #32
 800c06a:	1c9a      	adds	r2, r3, #2
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2203      	movs	r2, #3
 800c076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c080:	3b02      	subs	r3, #2
 800c082:	2b1f      	cmp	r3, #31
 800c084:	d847      	bhi.n	800c116 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800c086:	a201      	add	r2, pc, #4	; (adr r2, 800c08c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800c088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c08c:	0800c117 	.word	0x0800c117
 800c090:	0800c117 	.word	0x0800c117
 800c094:	0800c10d 	.word	0x0800c10d
 800c098:	0800c117 	.word	0x0800c117
 800c09c:	0800c117 	.word	0x0800c117
 800c0a0:	0800c117 	.word	0x0800c117
 800c0a4:	0800c117 	.word	0x0800c117
 800c0a8:	0800c117 	.word	0x0800c117
 800c0ac:	0800c117 	.word	0x0800c117
 800c0b0:	0800c117 	.word	0x0800c117
 800c0b4:	0800c117 	.word	0x0800c117
 800c0b8:	0800c117 	.word	0x0800c117
 800c0bc:	0800c117 	.word	0x0800c117
 800c0c0:	0800c117 	.word	0x0800c117
 800c0c4:	0800c117 	.word	0x0800c117
 800c0c8:	0800c117 	.word	0x0800c117
 800c0cc:	0800c117 	.word	0x0800c117
 800c0d0:	0800c117 	.word	0x0800c117
 800c0d4:	0800c117 	.word	0x0800c117
 800c0d8:	0800c117 	.word	0x0800c117
 800c0dc:	0800c117 	.word	0x0800c117
 800c0e0:	0800c117 	.word	0x0800c117
 800c0e4:	0800c117 	.word	0x0800c117
 800c0e8:	0800c117 	.word	0x0800c117
 800c0ec:	0800c117 	.word	0x0800c117
 800c0f0:	0800c117 	.word	0x0800c117
 800c0f4:	0800c117 	.word	0x0800c117
 800c0f8:	0800c117 	.word	0x0800c117
 800c0fc:	0800c117 	.word	0x0800c117
 800c100:	0800c117 	.word	0x0800c117
 800c104:	0800c117 	.word	0x0800c117
 800c108:	0800c117 	.word	0x0800c117
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800c114:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c11c:	3b02      	subs	r3, #2
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f103 0210 	add.w	r2, r3, #16
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3308      	adds	r3, #8
 800c12e:	4619      	mov	r1, r3
 800c130:	4610      	mov	r0, r2
 800c132:	f7fd f9f7 	bl	8009524 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2204      	movs	r2, #4
 800c13a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c144:	2b05      	cmp	r3, #5
 800c146:	d055      	beq.n	800c1f4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800c148:	2b05      	cmp	r3, #5
 800c14a:	f300 8085 	bgt.w	800c258 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d002      	beq.n	800c158 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800c152:	2b04      	cmp	r3, #4
 800c154:	d015      	beq.n	800c182 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800c156:	e07f      	b.n	800c258 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3310      	adds	r3, #16
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	68b9      	ldr	r1, [r7, #8]
 800c160:	4618      	mov	r0, r3
 800c162:	f003 f9f5 	bl	800f550 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c166:	4603      	mov	r3, r0
 800c168:	f083 0301 	eor.w	r3, r3, #1
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d001      	beq.n	800c176 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800c172:	2300      	movs	r3, #0
 800c174:	e097      	b.n	800c2a6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	795a      	ldrb	r2, [r3, #5]
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800c180:	e086      	b.n	800c290 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	3310      	adds	r3, #16
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	68b9      	ldr	r1, [r7, #8]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f003 f9e0 	bl	800f550 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c190:	4603      	mov	r3, r0
 800c192:	f083 0301 	eor.w	r3, r3, #1
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800c19c:	2300      	movs	r3, #0
 800c19e:	e082      	b.n	800c2a6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	795b      	ldrb	r3, [r3, #5]
 800c1a4:	2be0      	cmp	r3, #224	; 0xe0
 800c1a6:	d16c      	bne.n	800c282 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	799b      	ldrb	r3, [r3, #6]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d16a      	bne.n	800c286 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d004      	beq.n	800c1c4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	79db      	ldrb	r3, [r3, #7]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d104      	bne.n	800c1cc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800c1c2:	e065      	b.n	800c290 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	79db      	ldrb	r3, [r3, #7]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d15e      	bne.n	800c28a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	789a      	ldrb	r2, [r3, #2]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	78da      	ldrb	r2, [r3, #3]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	79da      	ldrb	r2, [r3, #7]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c1f2:	e04d      	b.n	800c290 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	3310      	adds	r3, #16
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	68b9      	ldr	r1, [r7, #8]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f003 f9a7 	bl	800f550 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c202:	4603      	mov	r3, r0
 800c204:	f083 0301 	eor.w	r3, r3, #1
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c20e:	2300      	movs	r3, #0
 800c210:	e049      	b.n	800c2a6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d038      	beq.n	800c28e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d034      	beq.n	800c28e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6858      	ldr	r0, [r3, #4]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681c      	ldr	r4, [r3, #0]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	3220      	adds	r2, #32
 800c24c:	9201      	str	r2, [sp, #4]
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	4633      	mov	r3, r6
 800c252:	462a      	mov	r2, r5
 800c254:	47a0      	blx	r4
                                        break;
 800c256:	e01a      	b.n	800c28e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f103 0018 	add.w	r0, r3, #24
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c264:	b29b      	uxth	r3, r3
 800c266:	3b02      	subs	r3, #2
 800c268:	b29b      	uxth	r3, r3
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	68b9      	ldr	r1, [r7, #8]
 800c26e:	f7fd f998 	bl	80095a2 <_ZN11ByteSkipper4SkipEPPhPtt>
 800c272:	4603      	mov	r3, r0
 800c274:	f083 0301 	eor.w	r3, r3, #1
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d008      	beq.n	800c290 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c27e:	2300      	movs	r3, #0
 800c280:	e011      	b.n	800c2a6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c282:	bf00      	nop
 800c284:	e004      	b.n	800c290 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c286:	bf00      	nop
 800c288:	e002      	b.n	800c290 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c28a:	bf00      	nop
 800c28c:	e000      	b.n	800c290 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c28e:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f103 0220 	add.w	r2, r3, #32
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800c2a4:	2301      	movs	r3, #1
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	371c      	adds	r7, #28
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ae:	bf00      	nop

0800c2b0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800c2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b2:	b089      	sub	sp, #36	; 0x24
 800c2b4:	af02      	add	r7, sp, #8
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	3320      	adds	r3, #32
 800c2c0:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	3320      	adds	r3, #32
 800c2c6:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2ce:	2b04      	cmp	r3, #4
 800c2d0:	f200 815e 	bhi.w	800c590 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800c2d4:	a201      	add	r2, pc, #4	; (adr r2, 800c2dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800c2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2da:	bf00      	nop
 800c2dc:	0800c2f1 	.word	0x0800c2f1
 800c2e0:	0800c311 	.word	0x0800c311
 800c2e4:	0800c353 	.word	0x0800c353
 800c2e8:	0800c367 	.word	0x0800c367
 800c2ec:	0800c42b 	.word	0x0800c42b
                        theBuffer.valueSize = 2;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f103 0210 	add.w	r2, r3, #16
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	3308      	adds	r3, #8
 800c300:	4619      	mov	r1, r3
 800c302:	4610      	mov	r0, r2
 800c304:	f7fd f90e 	bl	8009524 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	3310      	adds	r3, #16
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	68b9      	ldr	r1, [r7, #8]
 800c318:	4618      	mov	r0, r3
 800c31a:	f003 f919 	bl	800f550 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c31e:	4603      	mov	r3, r0
 800c320:	f083 0301 	eor.w	r3, r3, #1
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800c32a:	2300      	movs	r3, #0
 800c32c:	e131      	b.n	800c592 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c334:	781a      	ldrb	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c342:	785a      	ldrb	r2, [r3, #1]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2202      	movs	r2, #2
 800c34e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3320      	adds	r3, #32
 800c356:	1c9a      	adds	r2, r3, #2
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2203      	movs	r2, #3
 800c362:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c36c:	3b02      	subs	r3, #2
 800c36e:	2b1f      	cmp	r3, #31
 800c370:	d847      	bhi.n	800c402 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800c372:	a201      	add	r2, pc, #4	; (adr r2, 800c378 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800c374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c378:	0800c403 	.word	0x0800c403
 800c37c:	0800c403 	.word	0x0800c403
 800c380:	0800c3f9 	.word	0x0800c3f9
 800c384:	0800c403 	.word	0x0800c403
 800c388:	0800c403 	.word	0x0800c403
 800c38c:	0800c403 	.word	0x0800c403
 800c390:	0800c403 	.word	0x0800c403
 800c394:	0800c403 	.word	0x0800c403
 800c398:	0800c403 	.word	0x0800c403
 800c39c:	0800c403 	.word	0x0800c403
 800c3a0:	0800c403 	.word	0x0800c403
 800c3a4:	0800c403 	.word	0x0800c403
 800c3a8:	0800c403 	.word	0x0800c403
 800c3ac:	0800c403 	.word	0x0800c403
 800c3b0:	0800c403 	.word	0x0800c403
 800c3b4:	0800c403 	.word	0x0800c403
 800c3b8:	0800c403 	.word	0x0800c403
 800c3bc:	0800c403 	.word	0x0800c403
 800c3c0:	0800c403 	.word	0x0800c403
 800c3c4:	0800c403 	.word	0x0800c403
 800c3c8:	0800c403 	.word	0x0800c403
 800c3cc:	0800c403 	.word	0x0800c403
 800c3d0:	0800c403 	.word	0x0800c403
 800c3d4:	0800c403 	.word	0x0800c403
 800c3d8:	0800c403 	.word	0x0800c403
 800c3dc:	0800c403 	.word	0x0800c403
 800c3e0:	0800c403 	.word	0x0800c403
 800c3e4:	0800c403 	.word	0x0800c403
 800c3e8:	0800c403 	.word	0x0800c403
 800c3ec:	0800c403 	.word	0x0800c403
 800c3f0:	0800c403 	.word	0x0800c403
 800c3f4:	0800c403 	.word	0x0800c403
                                        isGoodInterface = false;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800c400:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c408:	3b02      	subs	r3, #2
 800c40a:	b2da      	uxtb	r2, r3
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f103 0210 	add.w	r2, r3, #16
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	3308      	adds	r3, #8
 800c41a:	4619      	mov	r1, r3
 800c41c:	4610      	mov	r0, r2
 800c41e:	f7fd f881 	bl	8009524 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2204      	movs	r2, #4
 800c426:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c430:	2b05      	cmp	r3, #5
 800c432:	d055      	beq.n	800c4e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800c434:	2b05      	cmp	r3, #5
 800c436:	f300 8085 	bgt.w	800c544 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d002      	beq.n	800c444 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800c43e:	2b04      	cmp	r3, #4
 800c440:	d015      	beq.n	800c46e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800c442:	e07f      	b.n	800c544 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	3310      	adds	r3, #16
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	68b9      	ldr	r1, [r7, #8]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f003 f87f 	bl	800f550 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c452:	4603      	mov	r3, r0
 800c454:	f083 0301 	eor.w	r3, r3, #1
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d001      	beq.n	800c462 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800c45e:	2300      	movs	r3, #0
 800c460:	e097      	b.n	800c592 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	795a      	ldrb	r2, [r3, #5]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800c46c:	e086      	b.n	800c57c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	3310      	adds	r3, #16
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	68b9      	ldr	r1, [r7, #8]
 800c476:	4618      	mov	r0, r3
 800c478:	f003 f86a 	bl	800f550 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c47c:	4603      	mov	r3, r0
 800c47e:	f083 0301 	eor.w	r3, r3, #1
 800c482:	b2db      	uxtb	r3, r3
 800c484:	2b00      	cmp	r3, #0
 800c486:	d001      	beq.n	800c48c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800c488:	2300      	movs	r3, #0
 800c48a:	e082      	b.n	800c592 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	795b      	ldrb	r3, [r3, #5]
 800c490:	2bff      	cmp	r3, #255	; 0xff
 800c492:	d16c      	bne.n	800c56e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	799b      	ldrb	r3, [r3, #6]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d16a      	bne.n	800c572 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d004      	beq.n	800c4b0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	79db      	ldrb	r3, [r3, #7]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d104      	bne.n	800c4b8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800c4ae:	e065      	b.n	800c57c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	79db      	ldrb	r3, [r3, #7]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d15e      	bne.n	800c576 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	789a      	ldrb	r2, [r3, #2]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	78da      	ldrb	r2, [r3, #3]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	79da      	ldrb	r2, [r3, #7]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c4de:	e04d      	b.n	800c57c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	3310      	adds	r3, #16
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	68b9      	ldr	r1, [r7, #8]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f003 f831 	bl	800f550 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	f083 0301 	eor.w	r3, r3, #1
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d001      	beq.n	800c4fe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	e049      	b.n	800c592 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c504:	2b00      	cmp	r3, #0
 800c506:	d038      	beq.n	800c57a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d034      	beq.n	800c57a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6858      	ldr	r0, [r3, #4]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681c      	ldr	r4, [r3, #0]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	3220      	adds	r2, #32
 800c538:	9201      	str	r2, [sp, #4]
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	4633      	mov	r3, r6
 800c53e:	462a      	mov	r2, r5
 800c540:	47a0      	blx	r4
                                        break;
 800c542:	e01a      	b.n	800c57a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f103 0018 	add.w	r0, r3, #24
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c550:	b29b      	uxth	r3, r3
 800c552:	3b02      	subs	r3, #2
 800c554:	b29b      	uxth	r3, r3
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	68b9      	ldr	r1, [r7, #8]
 800c55a:	f7fd f822 	bl	80095a2 <_ZN11ByteSkipper4SkipEPPhPtt>
 800c55e:	4603      	mov	r3, r0
 800c560:	f083 0301 	eor.w	r3, r3, #1
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	d008      	beq.n	800c57c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c56a:	2300      	movs	r3, #0
 800c56c:	e011      	b.n	800c592 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c56e:	bf00      	nop
 800c570:	e004      	b.n	800c57c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c572:	bf00      	nop
 800c574:	e002      	b.n	800c57c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c576:	bf00      	nop
 800c578:	e000      	b.n	800c57c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c57a:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f103 0220 	add.w	r2, r3, #32
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800c590:	2301      	movs	r3, #1
}
 800c592:	4618      	mov	r0, r3
 800c594:	371c      	adds	r7, #28
 800c596:	46bd      	mov	sp, r7
 800c598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c59a:	bf00      	nop

0800c59c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	73fb      	strb	r3, [r7, #15]
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
 800c5ac:	2b03      	cmp	r3, #3
 800c5ae:	d815      	bhi.n	800c5dc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	3318      	adds	r3, #24
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	4413      	add	r3, r2
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d109      	bne.n	800c5d4 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	3318      	adds	r3, #24
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800c5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5d2:	e005      	b.n	800c5e0 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c5d4:	7bfb      	ldrb	r3, [r7, #15]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	73fb      	strb	r3, [r7, #15]
 800c5da:	e7e6      	b.n	800c5aa <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800c5dc:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
 800c5f6:	4a0a      	ldr	r2, [pc, #40]	; (800c620 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d005      	beq.n	800c616 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	6879      	ldr	r1, [r7, #4]
 800c610:	4618      	mov	r0, r3
 800c612:	f7ff ffc3 	bl	800c59c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4618      	mov	r0, r3
 800c61a:	3708      	adds	r7, #8
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	0800f9bc 	.word	0x0800f9bc

0800c624 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800c624:	b480      	push	{r7}
 800c626:	b085      	sub	sp, #20
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	4613      	mov	r3, r2
 800c630:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	461a      	mov	r2, r3
 800c638:	88fb      	ldrh	r3, [r7, #6]
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d10b      	bne.n	800c658 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	3301      	adds	r3, #1
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	461a      	mov	r2, r3
 800c648:	88fb      	ldrh	r3, [r7, #6]
 800c64a:	121b      	asrs	r3, r3, #8
 800c64c:	f043 0320 	orr.w	r3, r3, #32
 800c650:	429a      	cmp	r2, r3
 800c652:	d101      	bne.n	800c658 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c654:	2301      	movs	r3, #1
 800c656:	e000      	b.n	800c65a <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800c658:	2300      	movs	r3, #0
        }
 800c65a:	4618      	mov	r0, r3
 800c65c:	3714      	adds	r7, #20
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr

0800c666 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800c666:	b480      	push	{r7}
 800c668:	b085      	sub	sp, #20
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	460b      	mov	r3, r1
 800c670:	607a      	str	r2, [r7, #4]
 800c672:	72fb      	strb	r3, [r7, #11]
                return;
 800c674:	bf00      	nop
        };
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
                return;
 800c688:	bf00      	nop
        };
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
                return;
 800c69c:	bf00      	nop
        }
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	603b      	str	r3, [r7, #0]
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	68b9      	ldr	r1, [r7, #8]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7ff ff95 	bl	800c5ec <_ZN16BluetoothServiceC1EP3BTD>
 800c6c2:	4a1f      	ldr	r2, [pc, #124]	; (800c740 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	601a      	str	r2, [r3, #0]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	75fb      	strb	r3, [r7, #23]
 800c6d4:	7dfb      	ldrb	r3, [r7, #23]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d809      	bhi.n	800c6ee <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800c6da:	7dfa      	ldrb	r2, [r7, #23]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	3208      	adds	r2, #8
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c6e6:	7dfb      	ldrb	r3, [r7, #23]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	75fb      	strb	r3, [r7, #23]
 800c6ec:	e7f2      	b.n	800c6d4 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	79fa      	ldrb	r2, [r7, #7]
 800c6f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	683a      	ldr	r2, [r7, #0]
 800c6fe:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2250      	movs	r2, #80	; 0x50
 800c704:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2270      	movs	r2, #112	; 0x70
 800c714:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2271      	movs	r2, #113	; 0x71
 800c724:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f000 f807 	bl	800c744 <_ZN5BTHID5ResetEv>
}
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	4618      	mov	r0, r3
 800c73a:	3718      	adds	r7, #24
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	0800f990 	.word	0x0800f990

0800c744 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
        connected = false;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	220a      	movs	r2, #10
 800c76c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3320      	adds	r3, #32
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	4798      	blx	r3
}
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800c78a:	b590      	push	{r4, r7, lr}
 800c78c:	b085      	sub	sp, #20
 800c78e:	af02      	add	r7, sp, #8
 800c790:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d014      	beq.n	800c7c6 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6898      	ldr	r0, [r3, #8]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	8999      	ldrh	r1, [r3, #12]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	7d1b      	ldrb	r3, [r3, #20]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	751a      	strb	r2, [r3, #20]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	7d1a      	ldrb	r2, [r3, #20]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f103 041b 	add.w	r4, r3, #27
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	336f      	adds	r3, #111	; 0x6f
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	4623      	mov	r3, r4
 800c7c2:	f7ff f9c4 	bl	800bb4e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6898      	ldr	r0, [r3, #8]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	8999      	ldrh	r1, [r3, #12]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	7d1b      	ldrb	r3, [r3, #20]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	751a      	strb	r2, [r3, #20]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	7d1a      	ldrb	r2, [r3, #20]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f103 0418 	add.w	r4, r3, #24
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	336d      	adds	r3, #109	; 0x6d
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	4623      	mov	r3, r4
 800c7ec:	f7ff f9af 	bl	800bb4e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	220e      	movs	r2, #14
 800c800:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2209      	movs	r2, #9
 800c806:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800c80a:	bf00      	nop
 800c80c:	370c      	adds	r7, #12
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd90      	pop	{r4, r7, pc}
	...

0800c814 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800c814:	b590      	push	{r4, r7, lr}
 800c816:	b087      	sub	sp, #28
 800c818:	af02      	add	r7, sp, #8
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	7d5b      	ldrb	r3, [r3, #21]
 800c822:	f083 0301 	eor.w	r3, r3, #1
 800c826:	b2db      	uxtb	r3, r3
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d023      	beq.n	800c874 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	3308      	adds	r3, #8
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	2b02      	cmp	r3, #2
 800c834:	d11e      	bne.n	800c874 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	330c      	adds	r3, #12
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	461a      	mov	r2, r3
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	330d      	adds	r3, #13
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	021b      	lsls	r3, r3, #8
 800c846:	4313      	orrs	r3, r2
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d113      	bne.n	800c874 <_ZN5BTHID7ACLDataEPh+0x60>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	7a9b      	ldrb	r3, [r3, #10]
 800c852:	f083 0301 	eor.w	r3, r3, #1
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00b      	beq.n	800c874 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	2201      	movs	r2, #1
 800c862:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	8b5a      	ldrh	r2, [r3, #26]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	220a      	movs	r2, #10
 800c872:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	7a5b      	ldrb	r3, [r3, #9]
 800c87a:	f083 0301 	eor.w	r3, r3, #1
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	2b00      	cmp	r3, #0
 800c882:	d03a      	beq.n	800c8fa <_ZN5BTHID7ACLDataEPh+0xe6>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d034      	beq.n	800c8fa <_ZN5BTHID7ACLDataEPh+0xe6>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	7d5b      	ldrb	r3, [r3, #21]
 800c894:	f083 0301 	eor.w	r3, r3, #1
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d02d      	beq.n	800c8fa <_ZN5BTHID7ACLDataEPh+0xe6>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c8a4:	f083 0301 	eor.w	r3, r3, #1
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d025      	beq.n	800c8fa <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	3308      	adds	r3, #8
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	d120      	bne.n	800c8fa <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	330c      	adds	r3, #12
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	330d      	adds	r3, #13
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	021b      	lsls	r3, r3, #8
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	2b11      	cmp	r3, #17
 800c8cc:	d115      	bne.n	800c8fa <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	8b5a      	ldrh	r2, [r3, #26]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	899b      	ldrh	r3, [r3, #12]
 800c900:	461a      	mov	r2, r3
 800c902:	6839      	ldr	r1, [r7, #0]
 800c904:	f7ff fe8e 	bl	800c624 <_ZN16BluetoothService14checkHciHandleEPht>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f000 83dd 	beq.w	800d0ca <_ZN5BTHID7ACLDataEPh+0x8b6>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	3306      	adds	r3, #6
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	461a      	mov	r2, r3
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	3307      	adds	r3, #7
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	021b      	lsls	r3, r3, #8
 800c920:	4313      	orrs	r3, r2
 800c922:	2b01      	cmp	r3, #1
 800c924:	f040 829b 	bne.w	800ce5e <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	3308      	adds	r3, #8
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	2b01      	cmp	r3, #1
 800c930:	f000 83c5 	beq.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	3308      	adds	r3, #8
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	2b03      	cmp	r3, #3
 800c93c:	f040 808d 	bne.w	800ca5a <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	3310      	adds	r3, #16
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	461a      	mov	r2, r3
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	3311      	adds	r3, #17
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	021b      	lsls	r3, r3, #8
 800c950:	4313      	orrs	r3, r2
 800c952:	2b00      	cmp	r3, #0
 800c954:	f040 83b3 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	3312      	adds	r3, #18
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	461a      	mov	r2, r3
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	3313      	adds	r3, #19
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	021b      	lsls	r3, r3, #8
 800c968:	4313      	orrs	r3, r2
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f040 83a7 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	330e      	adds	r3, #14
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d124      	bne.n	800c9ca <_ZN5BTHID7ACLDataEPh+0x1b6>
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	330f      	adds	r3, #15
 800c984:	781a      	ldrb	r2, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d11c      	bne.n	800c9ca <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	7a5a      	ldrb	r2, [r3, #9]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	7b1a      	ldrb	r2, [r3, #12]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	7b5a      	ldrb	r2, [r3, #13]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	7d1b      	ldrb	r3, [r3, #20]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	b2da      	uxtb	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6898      	ldr	r0, [r3, #8]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	8999      	ldrh	r1, [r3, #12]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7d1a      	ldrb	r2, [r3, #20]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	331b      	adds	r3, #27
 800c9c4:	f7ff f825 	bl	800ba12 <_ZN3BTD20l2cap_config_requestEthPh>
 800c9c8:	e379      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	330e      	adds	r3, #14
 800c9ce:	781a      	ldrb	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d11a      	bne.n	800ca10 <_ZN5BTHID7ACLDataEPh+0x1fc>
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	330f      	adds	r3, #15
 800c9de:	781a      	ldrb	r2, [r3, #0]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d112      	bne.n	800ca10 <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	7a5a      	ldrb	r2, [r3, #9]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	7b1a      	ldrb	r2, [r3, #12]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	7b5a      	ldrb	r2, [r3, #13]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	f043 0204 	orr.w	r2, r3, #4
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	611a      	str	r2, [r3, #16]
 800ca0e:	e356      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	330e      	adds	r3, #14
 800ca14:	781a      	ldrb	r2, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	f040 834e 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	330f      	adds	r3, #15
 800ca26:	781a      	ldrb	r2, [r3, #0]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	f040 8345 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	7a5a      	ldrb	r2, [r3, #9]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	7b1a      	ldrb	r2, [r3, #12]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	7b5a      	ldrb	r2, [r3, #13]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	611a      	str	r2, [r3, #16]
 800ca58:	e331      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	3308      	adds	r3, #8
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	d15a      	bne.n	800cb1a <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	330c      	adds	r3, #12
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	330d      	adds	r3, #13
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	021b      	lsls	r3, r3, #8
 800ca74:	4313      	orrs	r3, r2
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d112      	bne.n	800caa0 <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	7a5a      	ldrb	r2, [r3, #9]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	7b9a      	ldrb	r2, [r3, #14]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	7bda      	ldrb	r2, [r3, #15]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	611a      	str	r2, [r3, #16]
 800ca9e:	e30e      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	330c      	adds	r3, #12
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	461a      	mov	r2, r3
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	330d      	adds	r3, #13
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	021b      	lsls	r3, r3, #8
 800cab0:	4313      	orrs	r3, r2
 800cab2:	2b11      	cmp	r3, #17
 800cab4:	d112      	bne.n	800cadc <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	7a5a      	ldrb	r2, [r3, #9]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	7b9a      	ldrb	r2, [r3, #14]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	7bda      	ldrb	r2, [r3, #15]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	f043 0201 	orr.w	r2, r3, #1
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	611a      	str	r2, [r3, #16]
 800cada:	e2f0      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	330c      	adds	r3, #12
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	461a      	mov	r2, r3
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	330d      	adds	r3, #13
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	021b      	lsls	r3, r3, #8
 800caec:	4313      	orrs	r3, r2
 800caee:	2b13      	cmp	r3, #19
 800caf0:	f040 82e5 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        identifier = l2capinbuf[9];
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	7a5a      	ldrb	r2, [r3, #9]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	7b9a      	ldrb	r2, [r3, #14]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	7bda      	ldrb	r2, [r3, #15]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	f043 0210 	orr.w	r2, r3, #16
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	611a      	str	r2, [r3, #16]
 800cb18:	e2d1      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b05      	cmp	r3, #5
 800cb22:	d15e      	bne.n	800cbe2 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	3310      	adds	r3, #16
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	3311      	adds	r3, #17
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	021b      	lsls	r3, r3, #8
 800cb34:	4313      	orrs	r3, r2
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f040 82c1 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	330c      	adds	r3, #12
 800cb40:	781a      	ldrb	r2, [r3, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d112      	bne.n	800cb72 <_ZN5BTHID7ACLDataEPh+0x35e>
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	330d      	adds	r3, #13
 800cb50:	781a      	ldrb	r2, [r3, #0]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d10a      	bne.n	800cb72 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	7a5a      	ldrb	r2, [r3, #9]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	611a      	str	r2, [r3, #16]
 800cb70:	e2a5      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	330c      	adds	r3, #12
 800cb76:	781a      	ldrb	r2, [r3, #0]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d112      	bne.n	800cba8 <_ZN5BTHID7ACLDataEPh+0x394>
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	330d      	adds	r3, #13
 800cb86:	781a      	ldrb	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d10a      	bne.n	800cba8 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	7a5a      	ldrb	r2, [r3, #9]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	f043 0202 	orr.w	r2, r3, #2
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	611a      	str	r2, [r3, #16]
 800cba6:	e28a      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	330c      	adds	r3, #12
 800cbac:	781a      	ldrb	r2, [r3, #0]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	f040 8282 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	330d      	adds	r3, #13
 800cbbe:	781a      	ldrb	r2, [r3, #0]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	f040 8279 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	7a5a      	ldrb	r2, [r3, #9]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	f043 0220 	orr.w	r2, r3, #32
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	611a      	str	r2, [r3, #16]
 800cbe0:	e26d      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	2b04      	cmp	r3, #4
 800cbea:	d155      	bne.n	800cc98 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	330c      	adds	r3, #12
 800cbf0:	781a      	ldrb	r2, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d113      	bne.n	800cc24 <_ZN5BTHID7ACLDataEPh+0x410>
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	330d      	adds	r3, #13
 800cc00:	781a      	ldrb	r2, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d10b      	bne.n	800cc24 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6898      	ldr	r0, [r3, #8]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	8999      	ldrh	r1, [r3, #12]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	3309      	adds	r3, #9
 800cc18:	781a      	ldrb	r2, [r3, #0]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	331b      	adds	r3, #27
 800cc1e:	f7fe ff43 	bl	800baa8 <_ZN3BTD21l2cap_config_responseEthPh>
 800cc22:	e24c      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	330c      	adds	r3, #12
 800cc28:	781a      	ldrb	r2, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d113      	bne.n	800cc5c <_ZN5BTHID7ACLDataEPh+0x448>
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	330d      	adds	r3, #13
 800cc38:	781a      	ldrb	r2, [r3, #0]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d10b      	bne.n	800cc5c <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6898      	ldr	r0, [r3, #8]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	8999      	ldrh	r1, [r3, #12]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	3309      	adds	r3, #9
 800cc50:	781a      	ldrb	r2, [r3, #0]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	3316      	adds	r3, #22
 800cc56:	f7fe ff27 	bl	800baa8 <_ZN3BTD21l2cap_config_responseEthPh>
 800cc5a:	e230      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	330c      	adds	r3, #12
 800cc60:	781a      	ldrb	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	f040 8228 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	330d      	adds	r3, #13
 800cc72:	781a      	ldrb	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	f040 821f 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6898      	ldr	r0, [r3, #8]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	8999      	ldrh	r1, [r3, #12]
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	3309      	adds	r3, #9
 800cc8c:	781a      	ldrb	r2, [r3, #0]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3318      	adds	r3, #24
 800cc92:	f7fe ff09 	bl	800baa8 <_ZN3BTD21l2cap_config_responseEthPh>
 800cc96:	e212      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	2b06      	cmp	r3, #6
 800cca0:	d170      	bne.n	800cd84 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	330c      	adds	r3, #12
 800cca6:	781a      	ldrb	r2, [r3, #0]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d112      	bne.n	800ccd8 <_ZN5BTHID7ACLDataEPh+0x4c4>
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	330d      	adds	r3, #13
 800ccb6:	781a      	ldrb	r2, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d10a      	bne.n	800ccd8 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	7a5a      	ldrb	r2, [r3, #9]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	611a      	str	r2, [r3, #16]
 800ccd6:	e1f2      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	330c      	adds	r3, #12
 800ccdc:	781a      	ldrb	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d121      	bne.n	800cd2c <_ZN5BTHID7ACLDataEPh+0x518>
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	330d      	adds	r3, #13
 800ccec:	781a      	ldrb	r2, [r3, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d119      	bne.n	800cd2c <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	7a5a      	ldrb	r2, [r3, #9]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6898      	ldr	r0, [r3, #8]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	8999      	ldrh	r1, [r3, #12]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	7d1a      	ldrb	r2, [r3, #20]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	3316      	adds	r3, #22
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	4623      	mov	r3, r4
 800cd1a:	f7fe ff55 	bl	800bbc8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3308      	adds	r3, #8
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	4798      	blx	r3
 800cd2a:	e1c8      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	330c      	adds	r3, #12
 800cd30:	781a      	ldrb	r2, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	f040 81c0 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	330d      	adds	r3, #13
 800cd42:	781a      	ldrb	r2, [r3, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	f040 81b7 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	7a5a      	ldrb	r2, [r3, #9]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6898      	ldr	r0, [r3, #8]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	8999      	ldrh	r1, [r3, #12]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	7d1a      	ldrb	r2, [r3, #20]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	3318      	adds	r3, #24
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	4623      	mov	r3, r4
 800cd72:	f7fe ff29 	bl	800bbc8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3308      	adds	r3, #8
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	4798      	blx	r3
 800cd82:	e19c      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	3308      	adds	r3, #8
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	2b07      	cmp	r3, #7
 800cd8c:	d14c      	bne.n	800ce28 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	330c      	adds	r3, #12
 800cd92:	781a      	ldrb	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	7edb      	ldrb	r3, [r3, #27]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d111      	bne.n	800cdc0 <_ZN5BTHID7ACLDataEPh+0x5ac>
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	330d      	adds	r3, #13
 800cda0:	781a      	ldrb	r2, [r3, #0]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	7f1b      	ldrb	r3, [r3, #28]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d10a      	bne.n	800cdc0 <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	7a5a      	ldrb	r2, [r3, #9]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	611a      	str	r2, [r3, #16]
 800cdbe:	e17e      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	330c      	adds	r3, #12
 800cdc4:	781a      	ldrb	r2, [r3, #0]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	7d9b      	ldrb	r3, [r3, #22]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d111      	bne.n	800cdf2 <_ZN5BTHID7ACLDataEPh+0x5de>
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	330d      	adds	r3, #13
 800cdd2:	781a      	ldrb	r2, [r3, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	7ddb      	ldrb	r3, [r3, #23]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d10a      	bne.n	800cdf2 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	7a5a      	ldrb	r2, [r3, #9]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	f043 0208 	orr.w	r2, r3, #8
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	611a      	str	r2, [r3, #16]
 800cdf0:	e165      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	330c      	adds	r3, #12
 800cdf6:	781a      	ldrb	r2, [r3, #0]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	7e1b      	ldrb	r3, [r3, #24]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	f040 815e 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	330d      	adds	r3, #13
 800ce06:	781a      	ldrb	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	7e5b      	ldrb	r3, [r3, #25]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	f040 8156 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	7a5a      	ldrb	r2, [r3, #9]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	611a      	str	r2, [r3, #16]
 800ce26:	e14a      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	2b0a      	cmp	r3, #10
 800ce30:	f040 8145 	bne.w	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	7a5a      	ldrb	r2, [r3, #9]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6898      	ldr	r0, [r3, #8]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	8999      	ldrh	r1, [r3, #12]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	7d1a      	ldrb	r2, [r3, #20]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	330c      	adds	r3, #12
 800ce4c:	781c      	ldrb	r4, [r3, #0]
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	330d      	adds	r3, #13
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	4623      	mov	r3, r4
 800ce58:	f7fe fef3 	bl	800bc42 <_ZN3BTD26l2cap_information_responseEthhh>
 800ce5c:	e12f      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	3306      	adds	r3, #6
 800ce62:	781a      	ldrb	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	f040 8087 	bne.w	800cf7e <_ZN5BTHID7ACLDataEPh+0x76a>
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	3307      	adds	r3, #7
 800ce74:	781a      	ldrb	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d17e      	bne.n	800cf7e <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	3308      	adds	r3, #8
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	d131      	bne.n	800ceee <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2203      	movs	r2, #3
 800ce8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	7a5a      	ldrb	r2, [r3, #9]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	7a9a      	ldrb	r2, [r3, #10]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2205      	movs	r2, #5
 800ceb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	3328      	adds	r3, #40	; 0x28
 800cee2:	220a      	movs	r2, #10
 800cee4:	4619      	mov	r1, r3
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 fb7a 	bl	800d5e0 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800ceec:	e0e4      	b.n	800d0b8 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	3308      	adds	r3, #8
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	2b04      	cmp	r3, #4
 800cef6:	d131      	bne.n	800cf5c <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2205      	movs	r2, #5
 800cefc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	7a5a      	ldrb	r2, [r3, #9]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	7a9a      	ldrb	r2, [r3, #10]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2205      	movs	r2, #5
 800cf20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2202      	movs	r2, #2
 800cf30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2235      	movs	r2, #53	; 0x35
 800cf38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	3328      	adds	r3, #40	; 0x28
 800cf50:	220a      	movs	r2, #10
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fb43 	bl	800d5e0 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cf5a:	e0ad      	b.n	800d0b8 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	3308      	adds	r3, #8
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	2b06      	cmp	r3, #6
 800cf64:	f040 80a8 	bne.w	800d0b8 <_ZN5BTHID7ACLDataEPh+0x8a4>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	3309      	adds	r3, #9
 800cf6c:	7819      	ldrb	r1, [r3, #0]
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	330a      	adds	r3, #10
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	461a      	mov	r2, r3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fb4c 	bl	800d614 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cf7c:	e09c      	b.n	800d0b8 <_ZN5BTHID7ACLDataEPh+0x8a4>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	3306      	adds	r3, #6
 800cf82:	781a      	ldrb	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d166      	bne.n	800d05c <_ZN5BTHID7ACLDataEPh+0x848>
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	3307      	adds	r3, #7
 800cf92:	781a      	ldrb	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d15e      	bne.n	800d05c <_ZN5BTHID7ACLDataEPh+0x848>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2ba1      	cmp	r3, #161	; 0xa1
 800cfa6:	f040 8089 	bne.w	800d0bc <_ZN5BTHID7ACLDataEPh+0x8a8>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800cfaa:	f7f4 fdc3 	bl	8001b34 <HAL_GetTick>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	4a48      	ldr	r2, [pc, #288]	; (800d0d4 <_ZN5BTHID7ACLDataEPh+0x8c0>)
 800cfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfb6:	099a      	lsrs	r2, r3, #6
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	3305      	adds	r3, #5
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	021b      	lsls	r3, r3, #8
 800cfc4:	b21a      	sxth	r2, r3
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	3304      	adds	r3, #4
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	b21b      	sxth	r3, r3
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	b21b      	sxth	r3, r3
 800cfd2:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	3314      	adds	r3, #20
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	89fa      	ldrh	r2, [r7, #14]
 800cfde:	b2d2      	uxtb	r2, r2
 800cfe0:	3a01      	subs	r2, #1
 800cfe2:	b2d1      	uxtb	r1, r2
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	3209      	adds	r2, #9
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	3309      	adds	r3, #9
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d002      	beq.n	800cffc <_ZN5BTHID7ACLDataEPh+0x7e8>
 800cff6:	2b02      	cmp	r3, #2
 800cff8:	d016      	beq.n	800d028 <_ZN5BTHID7ACLDataEPh+0x814>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800cffa:	e05f      	b.n	800d0bc <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6a1b      	ldr	r3, [r3, #32]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d027      	beq.n	800d054 <_ZN5BTHID7ACLDataEPh+0x840>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6a18      	ldr	r0, [r3, #32]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6a1b      	ldr	r3, [r3, #32]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681c      	ldr	r4, [r3, #0]
 800d010:	89fb      	ldrh	r3, [r7, #14]
 800d012:	b2db      	uxtb	r3, r3
 800d014:	3b02      	subs	r3, #2
 800d016:	b2da      	uxtb	r2, r3
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	330a      	adds	r3, #10
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	4613      	mov	r3, r2
 800d020:	2200      	movs	r2, #0
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	47a0      	blx	r4
                                                break;
 800d026:	e015      	b.n	800d054 <_ZN5BTHID7ACLDataEPh+0x840>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d013      	beq.n	800d058 <_ZN5BTHID7ACLDataEPh+0x844>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681c      	ldr	r4, [r3, #0]
 800d03c:	89fb      	ldrh	r3, [r7, #14]
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	3b02      	subs	r3, #2
 800d042:	b2da      	uxtb	r2, r3
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	330a      	adds	r3, #10
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	4613      	mov	r3, r2
 800d04c:	2200      	movs	r2, #0
 800d04e:	6879      	ldr	r1, [r7, #4]
 800d050:	47a0      	blx	r4
                                                break;
 800d052:	e001      	b.n	800d058 <_ZN5BTHID7ACLDataEPh+0x844>
                                                break;
 800d054:	bf00      	nop
 800d056:	e031      	b.n	800d0bc <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                break;
 800d058:	bf00      	nop
                        }
 800d05a:	e02f      	b.n	800d0bc <_ZN5BTHID7ACLDataEPh+0x8a8>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	3306      	adds	r3, #6
 800d060:	781a      	ldrb	r2, [r3, #0]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800d068:	429a      	cmp	r2, r3
 800d06a:	d128      	bne.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	3307      	adds	r3, #7
 800d070:	781a      	ldrb	r2, [r3, #0]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800d078:	429a      	cmp	r2, r3
 800d07a:	d120      	bne.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	3308      	adds	r3, #8
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	2ba3      	cmp	r3, #163	; 0xa3
 800d084:	d11b      	bne.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	3305      	adds	r3, #5
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	021b      	lsls	r3, r3, #8
 800d08e:	b21a      	sxth	r2, r3
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	3304      	adds	r3, #4
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	b21b      	sxth	r3, r3
 800d098:	4313      	orrs	r3, r2
 800d09a:	b21b      	sxth	r3, r3
 800d09c:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	3318      	adds	r3, #24
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	89ba      	ldrh	r2, [r7, #12]
 800d0a8:	b2d2      	uxtb	r2, r2
 800d0aa:	3a01      	subs	r2, #1
 800d0ac:	b2d1      	uxtb	r1, r2
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	3209      	adds	r2, #9
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	4798      	blx	r3
 800d0b6:	e002      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d0b8:	bf00      	nop
 800d0ba:	e000      	b.n	800d0be <_ZN5BTHID7ACLDataEPh+0x8aa>
                        }
 800d0bc:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f80a 	bl	800d0d8 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f8b9 	bl	800d23c <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800d0ca:	bf00      	nop
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd90      	pop	{r4, r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	10624dd3 	.word	0x10624dd3

0800d0d8 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800d0d8:	b5b0      	push	{r4, r5, r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af02      	add	r7, sp, #8
 800d0de:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	7e9b      	ldrb	r3, [r3, #26]
 800d0e4:	2b0e      	cmp	r3, #14
 800d0e6:	f000 8086 	beq.w	800d1f6 <_ZN5BTHID8SDP_taskEv+0x11e>
 800d0ea:	2b0e      	cmp	r3, #14
 800d0ec:	f300 80a1 	bgt.w	800d232 <_ZN5BTHID8SDP_taskEv+0x15a>
 800d0f0:	2b0a      	cmp	r3, #10
 800d0f2:	d002      	beq.n	800d0fa <_ZN5BTHID8SDP_taskEv+0x22>
 800d0f4:	2b0b      	cmp	r3, #11
 800d0f6:	d06a      	beq.n	800d1ce <_ZN5BTHID8SDP_taskEv+0xf6>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800d0f8:	e09b      	b.n	800d232 <_ZN5BTHID8SDP_taskEv+0x15a>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	691b      	ldr	r3, [r3, #16]
 800d0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d102:	2b00      	cmp	r3, #0
 800d104:	d043      	beq.n	800d18e <_ZN5BTHID8SDP_taskEv+0xb6>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6898      	ldr	r0, [r3, #8]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	8999      	ldrh	r1, [r3, #12]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	7d1a      	ldrb	r2, [r3, #20]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	331b      	adds	r3, #27
 800d128:	2501      	movs	r5, #1
 800d12a:	9501      	str	r5, [sp, #4]
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	4623      	mov	r3, r4
 800d130:	f7fe fc22 	bl	800b978 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d138:	f7f4 fd08 	bl	8001b4c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6898      	ldr	r0, [r3, #8]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	8999      	ldrh	r1, [r3, #12]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	7d1a      	ldrb	r2, [r3, #20]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	331b      	adds	r3, #27
 800d152:	2500      	movs	r5, #0
 800d154:	9501      	str	r5, [sp, #4]
 800d156:	9300      	str	r3, [sp, #0]
 800d158:	4623      	mov	r3, r4
 800d15a:	f7fe fc0d 	bl	800b978 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	7d1b      	ldrb	r3, [r3, #20]
 800d162:	3301      	adds	r3, #1
 800d164:	b2da      	uxtb	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d16a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d16e:	f7f4 fced 	bl	8001b4c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6898      	ldr	r0, [r3, #8]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	8999      	ldrh	r1, [r3, #12]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	7d1a      	ldrb	r2, [r3, #20]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	331b      	adds	r3, #27
 800d182:	f7fe fc46 	bl	800ba12 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	220b      	movs	r2, #11
 800d18a:	769a      	strb	r2, [r3, #26]
                        break;
 800d18c:	e04c      	b.n	800d228 <_ZN5BTHID8SDP_taskEv+0x150>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d196:	2b00      	cmp	r3, #0
 800d198:	d046      	beq.n	800d228 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6898      	ldr	r0, [r3, #8]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	8999      	ldrh	r1, [r3, #12]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	7d1a      	ldrb	r2, [r3, #20]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	331b      	adds	r3, #27
 800d1c4:	9300      	str	r3, [sp, #0]
 800d1c6:	4623      	mov	r3, r4
 800d1c8:	f7fe fcfe 	bl	800bbc8 <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 800d1cc:	e02c      	b.n	800d228 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d028      	beq.n	800d22c <_ZN5BTHID8SDP_taskEv+0x154>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	220a      	movs	r2, #10
 800d1f2:	769a      	strb	r2, [r3, #26]
                        break;
 800d1f4:	e01a      	b.n	800d22c <_ZN5BTHID8SDP_taskEv+0x154>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	691b      	ldr	r3, [r3, #16]
 800d1fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d016      	beq.n	800d230 <_ZN5BTHID8SDP_taskEv+0x158>
                                pBtd->hci_disconnect(hci_handle);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	689a      	ldr	r2, [r3, #8]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	899b      	ldrh	r3, [r3, #12]
 800d20a:	4619      	mov	r1, r3
 800d20c:	4610      	mov	r0, r2
 800d20e:	f7fe fa84 	bl	800b71a <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d218:	819a      	strh	r2, [r3, #12]
                                Reset();
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3308      	adds	r3, #8
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	4798      	blx	r3
                        break;
 800d226:	e003      	b.n	800d230 <_ZN5BTHID8SDP_taskEv+0x158>
                        break;
 800d228:	bf00      	nop
 800d22a:	e002      	b.n	800d232 <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800d22c:	bf00      	nop
 800d22e:	e000      	b.n	800d232 <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800d230:	bf00      	nop
}
 800d232:	bf00      	nop
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d23c <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 800d23c:	b5b0      	push	{r4, r5, r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af02      	add	r7, sp, #8
 800d242:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d24a:	3b01      	subs	r3, #1
 800d24c:	2b08      	cmp	r3, #8
 800d24e:	f200 812f 	bhi.w	800d4b0 <_ZN5BTHID10L2CAP_taskEv+0x274>
 800d252:	a201      	add	r2, pc, #4	; (adr r2, 800d258 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 800d254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d258:	0800d48f 	.word	0x0800d48f
 800d25c:	0800d327 	.word	0x0800d327
 800d260:	0800d35f 	.word	0x0800d35f
 800d264:	0800d27d 	.word	0x0800d27d
 800d268:	0800d45b 	.word	0x0800d45b
 800d26c:	0800d29b 	.word	0x0800d29b
 800d270:	0800d3a9 	.word	0x0800d3a9
 800d274:	0800d3df 	.word	0x0800d3df
 800d278:	0800d41b 	.word	0x0800d41b
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	f003 0302 	and.w	r3, r3, #2
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 8104 	beq.w	800d492 <_ZN5BTHID10L2CAP_taskEv+0x256>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 f9fd 	bl	800d68a <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2206      	movs	r2, #6
 800d294:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d298:	e0fb      	b.n	800d492 <_ZN5BTHID10L2CAP_taskEv+0x256>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	f003 0310 	and.w	r3, r3, #16
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f000 80f7 	beq.w	800d496 <_ZN5BTHID10L2CAP_taskEv+0x25a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6898      	ldr	r0, [r3, #8]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	8999      	ldrh	r1, [r3, #12]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	7d1a      	ldrb	r2, [r3, #20]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	3318      	adds	r3, #24
 800d2be:	2501      	movs	r5, #1
 800d2c0:	9501      	str	r5, [sp, #4]
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	4623      	mov	r3, r4
 800d2c6:	f7fe fb57 	bl	800b978 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d2ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d2ce:	f7f4 fc3d 	bl	8001b4c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6898      	ldr	r0, [r3, #8]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	8999      	ldrh	r1, [r3, #12]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	7d1a      	ldrb	r2, [r3, #20]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	3318      	adds	r3, #24
 800d2e8:	2500      	movs	r5, #0
 800d2ea:	9501      	str	r5, [sp, #4]
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	4623      	mov	r3, r4
 800d2f0:	f7fe fb42 	bl	800b978 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	7d1b      	ldrb	r3, [r3, #20]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d304:	f7f4 fc22 	bl	8001b4c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6898      	ldr	r0, [r3, #8]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	8999      	ldrh	r1, [r3, #12]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	7d1a      	ldrb	r2, [r3, #20]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	3318      	adds	r3, #24
 800d318:	f7fe fb7b 	bl	800ba12 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2208      	movs	r2, #8
 800d320:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d324:	e0b7      	b.n	800d496 <_ZN5BTHID10L2CAP_taskEv+0x25a>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	691b      	ldr	r3, [r3, #16]
 800d32a:	f003 0304 	and.w	r3, r3, #4
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f000 80b3 	beq.w	800d49a <_ZN5BTHID10L2CAP_taskEv+0x25e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	7d1b      	ldrb	r3, [r3, #20]
 800d338:	3301      	adds	r3, #1
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6898      	ldr	r0, [r3, #8]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	8999      	ldrh	r1, [r3, #12]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	7d1a      	ldrb	r2, [r3, #20]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	3316      	adds	r3, #22
 800d350:	f7fe fb5f 	bl	800ba12 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2203      	movs	r2, #3
 800d358:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d35c:	e09d      	b.n	800d49a <_ZN5BTHID10L2CAP_taskEv+0x25e>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	691b      	ldr	r3, [r3, #16]
 800d362:	f003 0302 	and.w	r3, r3, #2
 800d366:	2b00      	cmp	r3, #0
 800d368:	f000 8099 	beq.w	800d49e <_ZN5BTHID10L2CAP_taskEv+0x262>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f98c 	bl	800d68a <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 800d372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d376:	f7f4 fbe9 	bl	8001b4c <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	7d1b      	ldrb	r3, [r3, #20]
 800d37e:	3301      	adds	r3, #1
 800d380:	b2da      	uxtb	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6898      	ldr	r0, [r3, #8]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	8999      	ldrh	r1, [r3, #12]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	7d1a      	ldrb	r2, [r3, #20]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	336d      	adds	r3, #109	; 0x6d
 800d396:	2413      	movs	r4, #19
 800d398:	9400      	str	r4, [sp, #0]
 800d39a:	f7fe faaf 	bl	800b8fc <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2207      	movs	r2, #7
 800d3a2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d3a6:	e07a      	b.n	800d49e <_ZN5BTHID10L2CAP_taskEv+0x262>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	691b      	ldr	r3, [r3, #16]
 800d3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d076      	beq.n	800d4a2 <_ZN5BTHID10L2CAP_taskEv+0x266>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	7d1b      	ldrb	r3, [r3, #20]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6898      	ldr	r0, [r3, #8]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	8999      	ldrh	r1, [r3, #12]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	7d1a      	ldrb	r2, [r3, #20]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	3318      	adds	r3, #24
 800d3d0:	f7fe fb1f 	bl	800ba12 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2208      	movs	r2, #8
 800d3d8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d3dc:	e061      	b.n	800d4a2 <_ZN5BTHID10L2CAP_taskEv+0x266>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	f003 0320 	and.w	r3, r3, #32
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d05d      	beq.n	800d4a6 <_ZN5BTHID10L2CAP_taskEv+0x26a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	689b      	ldr	r3, [r3, #8]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2201      	movs	r2, #1
 800d402:	755a      	strb	r2, [r3, #21]
                                onInit();
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3310      	adds	r3, #16
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d418:	e045      	b.n	800d4a6 <_ZN5BTHID10L2CAP_taskEv+0x26a>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d422:	2b00      	cmp	r3, #0
 800d424:	d041      	beq.n	800d4aa <_ZN5BTHID10L2CAP_taskEv+0x26e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	7d1b      	ldrb	r3, [r3, #20]
 800d42a:	3301      	adds	r3, #1
 800d42c:	b2da      	uxtb	r2, r3
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6898      	ldr	r0, [r3, #8]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	8999      	ldrh	r1, [r3, #12]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	7d1a      	ldrb	r2, [r3, #20]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f103 0416 	add.w	r4, r3, #22
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	336b      	adds	r3, #107	; 0x6b
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	4623      	mov	r3, r4
 800d44c:	f7fe fb7f 	bl	800bb4e <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2205      	movs	r2, #5
 800d454:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d458:	e027      	b.n	800d4aa <_ZN5BTHID10L2CAP_taskEv+0x26e>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	691b      	ldr	r3, [r3, #16]
 800d45e:	f003 0308 	and.w	r3, r3, #8
 800d462:	2b00      	cmp	r3, #0
 800d464:	d023      	beq.n	800d4ae <_ZN5BTHID10L2CAP_taskEv+0x272>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	689a      	ldr	r2, [r3, #8]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	899b      	ldrh	r3, [r3, #12]
 800d46e:	4619      	mov	r1, r3
 800d470:	4610      	mov	r0, r2
 800d472:	f7fe f952 	bl	800b71a <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d47c:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d48c:	e00f      	b.n	800d4ae <_ZN5BTHID10L2CAP_taskEv+0x272>
                        break;
 800d48e:	bf00      	nop
 800d490:	e00e      	b.n	800d4b0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d492:	bf00      	nop
 800d494:	e00c      	b.n	800d4b0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d496:	bf00      	nop
 800d498:	e00a      	b.n	800d4b0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d49a:	bf00      	nop
 800d49c:	e008      	b.n	800d4b0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d49e:	bf00      	nop
 800d4a0:	e006      	b.n	800d4b0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d4a2:	bf00      	nop
 800d4a4:	e004      	b.n	800d4b0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d4a6:	bf00      	nop
 800d4a8:	e002      	b.n	800d4b0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d4aa:	bf00      	nop
 800d4ac:	e000      	b.n	800d4b0 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d4ae:	bf00      	nop
        }
}
 800d4b0:	bf00      	nop
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bdb0      	pop	{r4, r5, r7, pc}

0800d4b8 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 800d4b8:	b5b0      	push	{r4, r5, r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af02      	add	r7, sp, #8
 800d4be:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	f040 8086 	bne.w	800d5d8 <_ZN5BTHID3RunEv+0x120>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	689b      	ldr	r3, [r3, #8]
 800d4d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d03a      	beq.n	800d54e <_ZN5BTHID3RunEv+0x96>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	7a5b      	ldrb	r3, [r3, #9]
 800d4de:	f083 0301 	eor.w	r3, r3, #1
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d032      	beq.n	800d54e <_ZN5BTHID3RunEv+0x96>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	7d5b      	ldrb	r3, [r3, #21]
 800d4ec:	f083 0301 	eor.w	r3, r3, #1
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d02b      	beq.n	800d54e <_ZN5BTHID3RunEv+0x96>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d4fc:	f083 0301 	eor.w	r3, r3, #1
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	d023      	beq.n	800d54e <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	2201      	movs	r2, #1
 800d50c:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2201      	movs	r2, #1
 800d512:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	8b5a      	ldrh	r2, [r3, #26]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6898      	ldr	r0, [r3, #8]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	8999      	ldrh	r1, [r3, #12]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	7d1a      	ldrb	r2, [r3, #20]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	336b      	adds	r3, #107	; 0x6b
 800d53c:	2411      	movs	r4, #17
 800d53e:	9400      	str	r4, [sp, #0]
 800d540:	f7fe f9dc 	bl	800b8fc <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2202      	movs	r2, #2
 800d548:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 800d54c:	e043      	b.n	800d5d6 <_ZN5BTHID3RunEv+0x11e>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	f003 0301 	and.w	r3, r3, #1
 800d556:	2b00      	cmp	r3, #0
 800d558:	d03d      	beq.n	800d5d6 <_ZN5BTHID3RunEv+0x11e>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6898      	ldr	r0, [r3, #8]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	8999      	ldrh	r1, [r3, #12]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	7d1a      	ldrb	r2, [r3, #20]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	3316      	adds	r3, #22
 800d570:	2501      	movs	r5, #1
 800d572:	9501      	str	r5, [sp, #4]
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	4623      	mov	r3, r4
 800d578:	f7fe f9fe 	bl	800b978 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d57c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d580:	f7f4 fae4 	bl	8001b4c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6898      	ldr	r0, [r3, #8]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	8999      	ldrh	r1, [r3, #12]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	7d1a      	ldrb	r2, [r3, #20]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	3316      	adds	r3, #22
 800d59a:	2500      	movs	r5, #0
 800d59c:	9501      	str	r5, [sp, #4]
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	4623      	mov	r3, r4
 800d5a2:	f7fe f9e9 	bl	800b978 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	7d1b      	ldrb	r3, [r3, #20]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	b2da      	uxtb	r2, r3
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d5b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d5b6:	f7f4 fac9 	bl	8001b4c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6898      	ldr	r0, [r3, #8]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	8999      	ldrh	r1, [r3, #12]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	7d1a      	ldrb	r2, [r3, #20]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	3316      	adds	r3, #22
 800d5ca:	f7fe fa22 	bl	800ba12 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2204      	movs	r2, #4
 800d5d2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 800d5d6:	bf00      	nop
        }
}
 800d5d8:	bf00      	nop
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bdb0      	pop	{r4, r5, r7, pc}

0800d5e0 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 800d5e0:	b590      	push	{r4, r7, lr}
 800d5e2:	b087      	sub	sp, #28
 800d5e4:	af02      	add	r7, sp, #8
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6898      	ldr	r0, [r3, #8]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	8999      	ldrh	r1, [r3, #12]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	7edb      	ldrb	r3, [r3, #27]
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	7f12      	ldrb	r2, [r2, #28]
 800d5fe:	79fc      	ldrb	r4, [r7, #7]
 800d600:	9201      	str	r2, [sp, #4]
 800d602:	9300      	str	r3, [sp, #0]
 800d604:	4623      	mov	r3, r4
 800d606:	68ba      	ldr	r2, [r7, #8]
 800d608:	f7fe f8e6 	bl	800b7d8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d60c:	bf00      	nop
 800d60e:	3714      	adds	r7, #20
 800d610:	46bd      	mov	sp, r7
 800d612:	bd90      	pop	{r4, r7, pc}

0800d614 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	460b      	mov	r3, r1
 800d61e:	70fb      	strb	r3, [r7, #3]
 800d620:	4613      	mov	r3, r2
 800d622:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2207      	movs	r2, #7
 800d628:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	78fa      	ldrb	r2, [r7, #3]
 800d630:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	78ba      	ldrb	r2, [r7, #2]
 800d638:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2205      	movs	r2, #5
 800d648:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2202      	movs	r2, #2
 800d658:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2235      	movs	r2, #53	; 0x35
 800d660:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	3328      	adds	r3, #40	; 0x28
 800d678:	220a      	movs	r2, #10
 800d67a:	4619      	mov	r1, r3
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7ff ffaf 	bl	800d5e0 <_ZN5BTHID11SDP_CommandEPhh>
}
 800d682:	bf00      	nop
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 800d68a:	b590      	push	{r4, r7, lr}
 800d68c:	b087      	sub	sp, #28
 800d68e:	af02      	add	r7, sp, #8
 800d690:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d008      	beq.n	800d6ae <_ZN5BTHID11setProtocolEv+0x24>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d003      	beq.n	800d6ae <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d6b4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6898      	ldr	r0, [r3, #8]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	8999      	ldrh	r1, [r3, #12]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	7d9b      	ldrb	r3, [r3, #22]
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	7dd2      	ldrb	r2, [r2, #23]
 800d6cc:	f107 040f 	add.w	r4, r7, #15
 800d6d0:	9201      	str	r2, [sp, #4]
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	4622      	mov	r2, r4
 800d6d8:	f7fe f87e 	bl	800b7d8 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d6dc:	bf00      	nop
 800d6de:	3714      	adds	r7, #20
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd90      	pop	{r4, r7, pc}

0800d6e4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 800d6f0:	78fb      	ldrb	r3, [r7, #3]
 800d6f2:	2b03      	cmp	r3, #3
 800d6f4:	d86e      	bhi.n	800d7d4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 800d6f6:	a201      	add	r2, pc, #4	; (adr r2, 800d6fc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 800d6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6fc:	0800d70d 	.word	0x0800d70d
 800d700:	0800d73f 	.word	0x0800d73f
 800d704:	0800d771 	.word	0x0800d771
 800d708:	0800d7a3 	.word	0x0800d7a3
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	7a1b      	ldrb	r3, [r3, #8]
 800d710:	f003 030f 	and.w	r3, r3, #15
 800d714:	b2db      	uxtb	r3, r3
 800d716:	2b07      	cmp	r3, #7
 800d718:	d00d      	beq.n	800d736 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	7a1b      	ldrb	r3, [r3, #8]
 800d71e:	f003 030f 	and.w	r3, r3, #15
 800d722:	b2db      	uxtb	r3, r3
 800d724:	2b00      	cmp	r3, #0
 800d726:	d006      	beq.n	800d736 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	7a1b      	ldrb	r3, [r3, #8]
 800d72c:	f003 030f 	and.w	r3, r3, #15
 800d730:	b2db      	uxtb	r3, r3
 800d732:	2b01      	cmp	r3, #1
 800d734:	d101      	bne.n	800d73a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 800d736:	2301      	movs	r3, #1
 800d738:	e04d      	b.n	800d7d6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d73a:	2300      	movs	r3, #0
 800d73c:	e04b      	b.n	800d7d6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	7a1b      	ldrb	r3, [r3, #8]
 800d742:	f003 030f 	and.w	r3, r3, #15
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d00d      	beq.n	800d768 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	7a1b      	ldrb	r3, [r3, #8]
 800d750:	f003 030f 	and.w	r3, r3, #15
 800d754:	b2db      	uxtb	r3, r3
 800d756:	2b02      	cmp	r3, #2
 800d758:	d006      	beq.n	800d768 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	7a1b      	ldrb	r3, [r3, #8]
 800d75e:	f003 030f 	and.w	r3, r3, #15
 800d762:	b2db      	uxtb	r3, r3
 800d764:	2b03      	cmp	r3, #3
 800d766:	d101      	bne.n	800d76c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 800d768:	2301      	movs	r3, #1
 800d76a:	e034      	b.n	800d7d6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d76c:	2300      	movs	r3, #0
 800d76e:	e032      	b.n	800d7d6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	7a1b      	ldrb	r3, [r3, #8]
 800d774:	f003 030f 	and.w	r3, r3, #15
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b03      	cmp	r3, #3
 800d77c:	d00d      	beq.n	800d79a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	7a1b      	ldrb	r3, [r3, #8]
 800d782:	f003 030f 	and.w	r3, r3, #15
 800d786:	b2db      	uxtb	r3, r3
 800d788:	2b04      	cmp	r3, #4
 800d78a:	d006      	beq.n	800d79a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	7a1b      	ldrb	r3, [r3, #8]
 800d790:	f003 030f 	and.w	r3, r3, #15
 800d794:	b2db      	uxtb	r3, r3
 800d796:	2b05      	cmp	r3, #5
 800d798:	d101      	bne.n	800d79e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 800d79a:	2301      	movs	r3, #1
 800d79c:	e01b      	b.n	800d7d6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	e019      	b.n	800d7d6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	7a1b      	ldrb	r3, [r3, #8]
 800d7a6:	f003 030f 	and.w	r3, r3, #15
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	2b05      	cmp	r3, #5
 800d7ae:	d00d      	beq.n	800d7cc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	7a1b      	ldrb	r3, [r3, #8]
 800d7b4:	f003 030f 	and.w	r3, r3, #15
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	2b06      	cmp	r3, #6
 800d7bc:	d006      	beq.n	800d7cc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	7a1b      	ldrb	r3, [r3, #8]
 800d7c2:	f003 030f 	and.w	r3, r3, #15
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	2b07      	cmp	r3, #7
 800d7ca:	d101      	bne.n	800d7d0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	e002      	b.n	800d7d6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	e000      	b.n	800d7d6 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 800d7d4:	2300      	movs	r3, #0
        }
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	370c      	adds	r7, #12
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop

0800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	2b03      	cmp	r3, #3
 800d7f4:	d806      	bhi.n	800d804 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 800d7f6:	78fb      	ldrb	r3, [r7, #3]
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f7ff ff72 	bl	800d6e4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d800:	4603      	mov	r3, r0
 800d802:	e011      	b.n	800d828 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d80c:	4619      	mov	r1, r3
 800d80e:	78fb      	ldrb	r3, [r7, #3]
 800d810:	4a07      	ldr	r2, [pc, #28]	; (800d830 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 800d812:	4413      	add	r3, r2
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	fa21 f303 	lsr.w	r3, r1, r3
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	2b00      	cmp	r3, #0
 800d820:	bf14      	ite	ne
 800d822:	2301      	movne	r3, #1
 800d824:	2300      	moveq	r3, #0
 800d826:	b2db      	uxtb	r3, r3
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	0800f9d0 	.word	0x0800f9d0

0800d834 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 800d840:	78fb      	ldrb	r3, [r7, #3]
 800d842:	4a1b      	ldr	r2, [pc, #108]	; (800d8b0 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 800d844:	4413      	add	r3, r2
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	461a      	mov	r2, r3
 800d84a:	2301      	movs	r3, #1
 800d84c:	4093      	lsls	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d856:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d85a:	021b      	lsls	r3, r3, #8
 800d85c:	4313      	orrs	r3, r2
 800d85e:	461a      	mov	r2, r3
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	4013      	ands	r3, r2
 800d864:	2b00      	cmp	r3, #0
 800d866:	bf14      	ite	ne
 800d868:	2301      	movne	r3, #1
 800d86a:	2300      	moveq	r3, #0
 800d86c:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d874:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d878:	021b      	lsls	r3, r3, #8
 800d87a:	4313      	orrs	r3, r2
 800d87c:	461a      	mov	r2, r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	43db      	mvns	r3, r3
 800d882:	4013      	ands	r3, r2
 800d884:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	b2d1      	uxtb	r1, r2
 800d88c:	2000      	movs	r0, #0
 800d88e:	4301      	orrs	r1, r0
 800d890:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800d894:	0a12      	lsrs	r2, r2, #8
 800d896:	b292      	uxth	r2, r2
 800d898:	2100      	movs	r1, #0
 800d89a:	430a      	orrs	r2, r1
 800d89c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 800d8a0:	7afb      	ldrb	r3, [r7, #11]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3714      	adds	r7, #20
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	0800f9d0 	.word	0x0800f9d0

0800d8b4 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 800d8c0:	78fb      	ldrb	r3, [r7, #3]
 800d8c2:	2b08      	cmp	r3, #8
 800d8c4:	d102      	bne.n	800d8cc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	7adb      	ldrb	r3, [r3, #11]
 800d8ca:	e006      	b.n	800d8da <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 800d8cc:	78fb      	ldrb	r3, [r7, #3]
 800d8ce:	2b09      	cmp	r3, #9
 800d8d0:	d102      	bne.n	800d8d8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	7b1b      	ldrb	r3, [r3, #12]
 800d8d6:	e000      	b.n	800d8da <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	370c      	adds	r7, #12
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr

0800d8e6 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 800d8e6:	b480      	push	{r7}
 800d8e8:	b083      	sub	sp, #12
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 800d8f2:	78fb      	ldrb	r3, [r7, #3]
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	791b      	ldrb	r3, [r3, #4]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 800d906:	b580      	push	{r7, lr}
 800d908:	b086      	sub	sp, #24
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	60f8      	str	r0, [r7, #12]
 800d90e:	460b      	mov	r3, r1
 800d910:	607a      	str	r2, [r7, #4]
 800d912:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 800d914:	7afb      	ldrb	r3, [r7, #11]
 800d916:	2b01      	cmp	r3, #1
 800d918:	f240 80a6 	bls.w	800da68 <_ZN9PS4Parser5ParseEhPh+0x162>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f000 80a2 	beq.w	800da68 <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d10e      	bne.n	800d94a <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	1d18      	adds	r0, r3, #4
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	1c59      	adds	r1, r3, #1
 800d934:	7afb      	ldrb	r3, [r7, #11]
 800d936:	3b01      	subs	r3, #1
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	2b3c      	cmp	r3, #60	; 0x3c
 800d93c:	bf28      	it	cs
 800d93e:	233c      	movcs	r3, #60	; 0x3c
 800d940:	b2db      	uxtb	r3, r3
 800d942:	461a      	mov	r2, r3
 800d944:	f001 fe8e 	bl	800f664 <memcpy>
 800d948:	e016      	b.n	800d978 <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	2b11      	cmp	r3, #17
 800d950:	f040 8098 	bne.w	800da84 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 800d954:	7afb      	ldrb	r3, [r7, #11]
 800d956:	2b03      	cmp	r3, #3
 800d958:	f240 8096 	bls.w	800da88 <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	1d18      	adds	r0, r3, #4
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	1cd9      	adds	r1, r3, #3
 800d964:	7afb      	ldrb	r3, [r7, #11]
 800d966:	3b03      	subs	r3, #3
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	2b3c      	cmp	r3, #60	; 0x3c
 800d96c:	bf28      	it	cs
 800d96e:	233c      	movcs	r3, #60	; 0x3c
 800d970:	b2db      	uxtb	r3, r3
 800d972:	461a      	mov	r2, r3
 800d974:	f001 fe76 	bl	800f664 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	689b      	ldr	r3, [r3, #8]
 800d97c:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d984:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d988:	429a      	cmp	r2, r3
 800d98a:	d06d      	beq.n	800da68 <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d994:	461a      	mov	r2, r3
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d99a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d99e:	43db      	mvns	r3, r3
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	b2d1      	uxtb	r1, r2
 800d9aa:	2000      	movs	r0, #0
 800d9ac:	4301      	orrs	r1, r0
 800d9ae:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800d9b2:	0a12      	lsrs	r2, r2, #8
 800d9b4:	b292      	uxth	r2, r2
 800d9b6:	2100      	movs	r1, #0
 800d9b8:	430a      	orrs	r2, r1
 800d9ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800d9c6:	68fa      	ldr	r2, [r7, #12]
 800d9c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d9ca:	f361 0317 	bfi	r3, r1, #0, #24
 800d9ce:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f7ff fe84 	bl	800d6e4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d003      	beq.n	800d9ea <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 800d9e2:	7dfb      	ldrb	r3, [r7, #23]
 800d9e4:	f043 0301 	orr.w	r3, r3, #1
 800d9e8:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 800d9ea:	2101      	movs	r1, #1
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f7ff fe79 	bl	800d6e4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d003      	beq.n	800da00 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 800d9f8:	7dfb      	ldrb	r3, [r7, #23]
 800d9fa:	f043 0302 	orr.w	r3, r3, #2
 800d9fe:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 800da00:	2102      	movs	r1, #2
 800da02:	68f8      	ldr	r0, [r7, #12]
 800da04:	f7ff fe6e 	bl	800d6e4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d003      	beq.n	800da16 <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 800da0e:	7dfb      	ldrb	r3, [r7, #23]
 800da10:	f043 0304 	orr.w	r3, r3, #4
 800da14:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 800da16:	2103      	movs	r1, #3
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f7ff fe63 	bl	800d6e4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d003      	beq.n	800da2c <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 800da24:	7dfb      	ldrb	r3, [r7, #23]
 800da26:	f043 0308 	orr.w	r3, r3, #8
 800da2a:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800da32:	7dfa      	ldrb	r2, [r7, #23]
 800da34:	429a      	cmp	r2, r3
 800da36:	d017      	beq.n	800da68 <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800da3e:	b25b      	sxtb	r3, r3
 800da40:	43db      	mvns	r3, r3
 800da42:	b25a      	sxtb	r2, r3
 800da44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da48:	4013      	ands	r3, r2
 800da4a:	b25b      	sxtb	r3, r3
 800da4c:	f003 030f 	and.w	r3, r3, #15
 800da50:	b2d9      	uxtb	r1, r3
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800da58:	f361 0303 	bfi	r3, r1, #0, #4
 800da5c:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	7dfa      	ldrb	r2, [r7, #23]
 800da64:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00b      	beq.n	800da8a <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	3246      	adds	r2, #70	; 0x46
 800da7c:	4611      	mov	r1, r2
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	4798      	blx	r3
 800da82:	e002      	b.n	800da8a <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 800da84:	bf00      	nop
 800da86:	e000      	b.n	800da8a <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 800da88:	bf00      	nop
}
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 800da90:	b480      	push	{r7}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800da98:	2300      	movs	r3, #0
 800da9a:	73fb      	strb	r3, [r7, #15]
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
 800da9e:	2b03      	cmp	r3, #3
 800daa0:	d808      	bhi.n	800dab4 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 800daa2:	7bfb      	ldrb	r3, [r7, #15]
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	4413      	add	r3, r2
 800daa8:	227f      	movs	r2, #127	; 0x7f
 800daaa:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800daac:	7bfb      	ldrb	r3, [r7, #15]
 800daae:	3301      	adds	r3, #1
 800dab0:	73fb      	strb	r3, [r7, #15]
 800dab2:	e7f3      	b.n	800da9c <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	6893      	ldr	r3, [r2, #8]
 800dab8:	f36f 0317 	bfc	r3, #0, #24
 800dabc:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800dac2:	f36f 0317 	bfc	r3, #0, #24
 800dac6:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800dac8:	2300      	movs	r3, #0
 800daca:	73fb      	strb	r3, [r7, #15]
 800dacc:	7bfb      	ldrb	r3, [r7, #15]
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d808      	bhi.n	800dae4 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	4413      	add	r3, r2
 800dad8:	2200      	movs	r2, #0
 800dada:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	3301      	adds	r3, #1
 800dae0:	73fb      	strb	r3, [r7, #15]
 800dae2:	e7f3      	b.n	800dacc <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]
 800dae8:	7bfb      	ldrb	r3, [r7, #15]
 800daea:	2b02      	cmp	r3, #2
 800daec:	d81b      	bhi.n	800db26 <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800daee:	2300      	movs	r3, #0
 800daf0:	73bb      	strb	r3, [r7, #14]
 800daf2:	7bbb      	ldrb	r3, [r7, #14]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d812      	bhi.n	800db1e <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 800daf8:	7bfa      	ldrb	r2, [r7, #15]
 800dafa:	7bbb      	ldrb	r3, [r7, #14]
 800dafc:	6879      	ldr	r1, [r7, #4]
 800dafe:	0098      	lsls	r0, r3, #2
 800db00:	4613      	mov	r3, r2
 800db02:	00db      	lsls	r3, r3, #3
 800db04:	4413      	add	r3, r2
 800db06:	4403      	add	r3, r0
 800db08:	440b      	add	r3, r1
 800db0a:	f103 0220 	add.w	r2, r3, #32
 800db0e:	7993      	ldrb	r3, [r2, #6]
 800db10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db14:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800db16:	7bbb      	ldrb	r3, [r7, #14]
 800db18:	3301      	adds	r3, #1
 800db1a:	73bb      	strb	r3, [r7, #14]
 800db1c:	e7e9      	b.n	800daf2 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
 800db20:	3301      	adds	r3, #1
 800db22:	73fb      	strb	r3, [r7, #15]
 800db24:	e7e0      	b.n	800dae8 <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	7a13      	ldrb	r3, [r2, #8]
 800db2a:	2108      	movs	r1, #8
 800db2c:	f361 0303 	bfi	r3, r1, #0, #4
 800db30:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800db38:	2108      	movs	r1, #8
 800db3a:	f361 0303 	bfi	r3, r1, #0, #4
 800db3e:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800db48:	f36f 0303 	bfc	r3, #0, #4
 800db4c:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2200      	movs	r2, #0
 800db90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 800dba8:	bf00      	nop
 800dbaa:	3714      	adds	r7, #20
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr

0800dbb4 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	2180      	movs	r1, #128	; 0x80
 800dbba:	4803      	ldr	r0, [pc, #12]	; (800dbc8 <_ZN2P95IsSetEv+0x14>)
 800dbbc:	f7f4 fd1e 	bl	80025fc <HAL_GPIO_ReadPin>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	40020800 	.word	0x40020800

0800dbcc <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f001 f9f3 	bl	800efc0 <_ZN8MAX3421eI3P102P9EC1Ev>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f001 fa0b 	bl	800eff8 <_ZN15AddressPoolImplILh16EEC1Ev>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 800dbea:	4b05      	ldr	r3, [pc, #20]	; (800dc00 <_ZN3USBC1Ev+0x34>)
 800dbec:	2211      	movs	r2, #17
 800dbee:	701a      	strb	r2, [r3, #0]
        init();
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 f807 	bl	800dc04 <_ZN3USB4initEv>
}
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	20000665 	.word	0x20000665

0800dc04 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 800dc14:	bf00      	nop
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	460b      	mov	r3, r1
 800dc2a:	70fb      	strb	r3, [r7, #3]
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	78fa      	ldrb	r2, [r7, #3]
 800dc34:	4611      	mov	r1, r2
 800dc36:	4618      	mov	r0, r3
 800dc38:	f001 fa18 	bl	800f06c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800dc3c:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d003      	beq.n	800dc4c <_ZN3USB14getEpInfoEntryEhh+0x2c>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d101      	bne.n	800dc50 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	e018      	b.n	800dc82 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 800dc56:	2300      	movs	r3, #0
 800dc58:	74fb      	strb	r3, [r7, #19]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	795b      	ldrb	r3, [r3, #5]
 800dc5e:	7cfa      	ldrb	r2, [r7, #19]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d20d      	bcs.n	800dc80 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	78ba      	ldrb	r2, [r7, #2]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d101      	bne.n	800dc72 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	e007      	b.n	800dc82 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	3303      	adds	r3, #3
 800dc76:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 800dc78:	7cfb      	ldrb	r3, [r7, #19]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	74fb      	strb	r3, [r7, #19]
 800dc7e:	e7ec      	b.n	800dc5a <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 800dc80:	2300      	movs	r3, #0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3718      	adds	r7, #24
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b086      	sub	sp, #24
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	60f8      	str	r0, [r7, #12]
 800dc92:	607b      	str	r3, [r7, #4]
 800dc94:	460b      	mov	r3, r1
 800dc96:	72fb      	strb	r3, [r7, #11]
 800dc98:	4613      	mov	r3, r2
 800dc9a:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d101      	bne.n	800dca6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 800dca2:	23d8      	movs	r3, #216	; 0xd8
 800dca4:	e015      	b.n	800dcd2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	7afa      	ldrb	r2, [r7, #11]
 800dcaa:	4611      	mov	r1, r2
 800dcac:	4618      	mov	r0, r3
 800dcae:	f001 f9dd 	bl	800f06c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800dcb2:	6178      	str	r0, [r7, #20]

        if(!p)
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d101      	bne.n	800dcbe <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dcba:	23d6      	movs	r3, #214	; 0xd6
 800dcbc:	e009      	b.n	800dcd2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	7afa      	ldrb	r2, [r7, #11]
 800dcc2:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	7aba      	ldrb	r2, [r7, #10]
 800dcce:	715a      	strb	r2, [r3, #5]

        return 0;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3718      	adds	r7, #24
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b086      	sub	sp, #24
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	60f8      	str	r0, [r7, #12]
 800dce2:	607b      	str	r3, [r7, #4]
 800dce4:	460b      	mov	r3, r1
 800dce6:	72fb      	strb	r3, [r7, #11]
 800dce8:	4613      	mov	r3, r2
 800dcea:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	7afa      	ldrb	r2, [r7, #11]
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f001 f9ba 	bl	800f06c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800dcf8:	6178      	str	r0, [r7, #20]

        if(!p)
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d101      	bne.n	800dd04 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dd00:	23d6      	movs	r3, #214	; 0xd6
 800dd02:	e04e      	b.n	800dda2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 800dd0c:	23d7      	movs	r3, #215	; 0xd7
 800dd0e:	e048      	b.n	800dda2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 800dd10:	7aba      	ldrb	r2, [r7, #10]
 800dd12:	7afb      	ldrb	r3, [r7, #11]
 800dd14:	4619      	mov	r1, r3
 800dd16:	68f8      	ldr	r0, [r7, #12]
 800dd18:	f7ff ff82 	bl	800dc20 <_ZN3USB14getEpInfoEntryEhh>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d101      	bne.n	800dd2e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 800dd2a:	23db      	movs	r3, #219	; 0xdb
 800dd2c:	e039      	b.n	800dda2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	789b      	ldrb	r3, [r3, #2]
 800dd34:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	2b0f      	cmp	r3, #15
 800dd3c:	bf28      	it	cs
 800dd3e:	230f      	movcs	r3, #15
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	461a      	mov	r2, r3
 800dd44:	2301      	movs	r3, #1
 800dd46:	4093      	lsls	r3, r2
 800dd48:	b29a      	uxth	r2, r3
 800dd4a:	6a3b      	ldr	r3, [r7, #32]
 800dd4c:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 800dd4e:	6a3b      	ldr	r3, [r7, #32]
 800dd50:	881b      	ldrh	r3, [r3, #0]
 800dd52:	3b01      	subs	r3, #1
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	6a3b      	ldr	r3, [r7, #32]
 800dd58:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 800dd5a:	7afb      	ldrb	r3, [r7, #11]
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	21e0      	movs	r1, #224	; 0xe0
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f7f3 fbd5 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 800dd66:	21d8      	movs	r1, #216	; 0xd8
 800dd68:	68f8      	ldr	r0, [r7, #12]
 800dd6a:	f7f3 fc23 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	799b      	ldrb	r3, [r3, #6]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d009      	beq.n	800dd8e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800dd80:	7cfb      	ldrb	r3, [r7, #19]
 800dd82:	4313      	orrs	r3, r2
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	f043 0302 	orr.w	r3, r3, #2
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	e003      	b.n	800dd96 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 800dd8e:	7cfb      	ldrb	r3, [r7, #19]
 800dd90:	f023 0306 	bic.w	r3, r3, #6
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	461a      	mov	r2, r3
 800dd98:	21d8      	movs	r1, #216	; 0xd8
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	f7f3 fbb8 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3718      	adds	r7, #24
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 800ddaa:	b590      	push	{r4, r7, lr}
 800ddac:	b08b      	sub	sp, #44	; 0x2c
 800ddae:	af02      	add	r7, sp, #8
 800ddb0:	6078      	str	r0, [r7, #4]
 800ddb2:	4608      	mov	r0, r1
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	4603      	mov	r3, r0
 800ddba:	70fb      	strb	r3, [r7, #3]
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	70bb      	strb	r3, [r7, #2]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800ddd0:	f107 000c 	add.w	r0, r7, #12
 800ddd4:	78ba      	ldrb	r2, [r7, #2]
 800ddd6:	78f9      	ldrb	r1, [r7, #3]
 800ddd8:	f107 030a 	add.w	r3, r7, #10
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	4603      	mov	r3, r0
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7ff ff7a 	bl	800dcda <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800dde6:	4603      	mov	r3, r0
 800dde8:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 800ddea:	7ffb      	ldrb	r3, [r7, #31]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d001      	beq.n	800ddf4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 800ddf0:	7ffb      	ldrb	r3, [r7, #31]
 800ddf2:	e0ae      	b.n	800df52 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 800ddf4:	787b      	ldrb	r3, [r7, #1]
 800ddf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	bfcc      	ite	gt
 800ddfe:	2301      	movgt	r3, #1
 800de00:	2300      	movle	r3, #0
 800de02:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 800de04:	787b      	ldrb	r3, [r7, #1]
 800de06:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 800de08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800de0c:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 800de0e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800de12:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 800de14:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800de18:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 800de1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de1c:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 800de1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800de22:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 800de24:	f107 0310 	add.w	r3, r7, #16
 800de28:	2208      	movs	r2, #8
 800de2a:	2120      	movs	r1, #32
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f001 f943 	bl	800f0b8 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 800de32:	897b      	ldrh	r3, [r7, #10]
 800de34:	78ba      	ldrb	r2, [r7, #2]
 800de36:	2110      	movs	r1, #16
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 fb01 	bl	800e440 <_ZN3USB11dispatchPktEhht>
 800de3e:	4603      	mov	r3, r0
 800de40:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 800de42:	7ffb      	ldrb	r3, [r7, #31]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 800de48:	7ffb      	ldrb	r3, [r7, #31]
 800de4a:	e082      	b.n	800df52 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 800de4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d072      	beq.n	800df38 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 800de52:	7efb      	ldrb	r3, [r7, #27]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d057      	beq.n	800df08 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 800de58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800de5c:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 800de5e:	68fa      	ldr	r2, [r7, #12]
 800de60:	7893      	ldrb	r3, [r2, #2]
 800de62:	f043 0302 	orr.w	r3, r3, #2
 800de66:	7093      	strb	r3, [r2, #2]

                        while(left) {
 800de68:	8bbb      	ldrh	r3, [r7, #28]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d05f      	beq.n	800df2e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 800de6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800de72:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 800de74:	68f9      	ldr	r1, [r7, #12]
 800de76:	897a      	ldrh	r2, [r7, #10]
 800de78:	f107 0008 	add.w	r0, r7, #8
 800de7c:	2300      	movs	r3, #0
 800de7e:	9301      	str	r3, [sp, #4]
 800de80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	4603      	mov	r3, r0
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f8a6 	bl	800dfd8 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800de8c:	4603      	mov	r3, r0
 800de8e:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 800de90:	7ffb      	ldrb	r3, [r7, #31]
 800de92:	2b06      	cmp	r3, #6
 800de94:	d114      	bne.n	800dec0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800de96:	21f8      	movs	r1, #248	; 0xf8
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7f3 fb8b 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800de9e:	4603      	mov	r3, r0
 800dea0:	f003 0320 	and.w	r3, r3, #32
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	bf0c      	ite	eq
 800dea8:	2301      	moveq	r3, #1
 800deaa:	2300      	movne	r3, #0
 800deac:	b2db      	uxtb	r3, r3
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	f003 0301 	and.w	r3, r3, #1
 800deb4:	b2d9      	uxtb	r1, r3
 800deb6:	7893      	ldrb	r3, [r2, #2]
 800deb8:	f361 0341 	bfi	r3, r1, #1, #1
 800debc:	7093      	strb	r3, [r2, #2]
 800debe:	e7d3      	b.n	800de68 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 800dec0:	7ffb      	ldrb	r3, [r7, #31]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 800dec6:	7ffb      	ldrb	r3, [r7, #31]
 800dec8:	e043      	b.n	800df52 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 800deca:	7ffb      	ldrb	r3, [r7, #31]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d111      	bne.n	800def4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 800ded0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d00e      	beq.n	800def4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 800ded6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681c      	ldr	r4, [r3, #0]
 800dedc:	8939      	ldrh	r1, [r7, #8]
 800dede:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800dee2:	8bbb      	ldrh	r3, [r7, #28]
 800dee4:	1ad3      	subs	r3, r2, r3
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	833b      	strh	r3, [r7, #24]
 800deea:	f107 0318 	add.w	r3, r7, #24
 800deee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800def0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800def2:	47a0      	blx	r4

                                left -= read;
 800def4:	893b      	ldrh	r3, [r7, #8]
 800def6:	8bba      	ldrh	r2, [r7, #28]
 800def8:	1ad3      	subs	r3, r2, r3
 800defa:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 800defc:	893b      	ldrh	r3, [r7, #8]
 800defe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800df02:	429a      	cmp	r2, r3
 800df04:	d812      	bhi.n	800df2c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 800df06:	e7af      	b.n	800de68 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	7893      	ldrb	r3, [r2, #2]
 800df0c:	f043 0301 	orr.w	r3, r3, #1
 800df10:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 800df12:	68f9      	ldr	r1, [r7, #12]
 800df14:	897a      	ldrh	r2, [r7, #10]
 800df16:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 800df1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	4603      	mov	r3, r0
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 f957 	bl	800e1d4 <_ZN3USB11OutTransferEP6EpInfottPh>
 800df26:	4603      	mov	r3, r0
 800df28:	77fb      	strb	r3, [r7, #31]
 800df2a:	e000      	b.n	800df2e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 800df2c:	bf00      	nop
                }
                if(rcode) //return error
 800df2e:	7ffb      	ldrb	r3, [r7, #31]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d001      	beq.n	800df38 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 800df34:	7ffb      	ldrb	r3, [r7, #31]
 800df36:	e00c      	b.n	800df52 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800df38:	7efb      	ldrb	r3, [r7, #27]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d001      	beq.n	800df42 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 800df3e:	21a0      	movs	r1, #160	; 0xa0
 800df40:	e000      	b.n	800df44 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 800df42:	2180      	movs	r1, #128	; 0x80
 800df44:	897b      	ldrh	r3, [r7, #10]
 800df46:	78ba      	ldrb	r2, [r7, #2]
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 fa79 	bl	800e440 <_ZN3USB11dispatchPktEhht>
 800df4e:	4603      	mov	r3, r0
 800df50:	bf00      	nop
}
 800df52:	4618      	mov	r0, r3
 800df54:	3724      	adds	r7, #36	; 0x24
 800df56:	46bd      	mov	sp, r7
 800df58:	bd90      	pop	{r4, r7, pc}

0800df5a <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b08a      	sub	sp, #40	; 0x28
 800df5e:	af02      	add	r7, sp, #8
 800df60:	60f8      	str	r0, [r7, #12]
 800df62:	607b      	str	r3, [r7, #4]
 800df64:	460b      	mov	r3, r1
 800df66:	72fb      	strb	r3, [r7, #11]
 800df68:	4613      	mov	r3, r2
 800df6a:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 800df6c:	2300      	movs	r3, #0
 800df6e:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 800df70:	2300      	movs	r3, #0
 800df72:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800df74:	f107 0018 	add.w	r0, r7, #24
 800df78:	7aba      	ldrb	r2, [r7, #10]
 800df7a:	7af9      	ldrb	r1, [r7, #11]
 800df7c:	f107 0316 	add.w	r3, r7, #22
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	4603      	mov	r3, r0
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f7ff fea8 	bl	800dcda <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800df8a:	4603      	mov	r3, r0
 800df8c:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 800df8e:	7ffb      	ldrb	r3, [r7, #31]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d010      	beq.n	800dfb6 <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 800df94:	7ffb      	ldrb	r3, [r7, #31]
 800df96:	2181      	movs	r1, #129	; 0x81
 800df98:	4618      	mov	r0, r3
 800df9a:	f001 f8bb 	bl	800f114 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 800df9e:	7afb      	ldrb	r3, [r7, #11]
 800dfa0:	2181      	movs	r1, #129	; 0x81
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f001 f8b6 	bl	800f114 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 800dfa8:	7abb      	ldrb	r3, [r7, #10]
 800dfaa:	2181      	movs	r1, #129	; 0x81
 800dfac:	4618      	mov	r0, r3
 800dfae:	f001 f8b1 	bl	800f114 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 800dfb2:	7ffb      	ldrb	r3, [r7, #31]
 800dfb4:	e00c      	b.n	800dfd0 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 800dfb6:	69b9      	ldr	r1, [r7, #24]
 800dfb8:	8afa      	ldrh	r2, [r7, #22]
 800dfba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dfbe:	9301      	str	r3, [sp, #4]
 800dfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	68f8      	ldr	r0, [r7, #12]
 800dfc8:	f000 f806 	bl	800dfd8 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	bf00      	nop
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3720      	adds	r7, #32
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b086      	sub	sp, #24
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	603b      	str	r3, [r7, #0]
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	785b      	ldrb	r3, [r3, #1]
 800dff6:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	2200      	movs	r2, #0
 800dffc:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	789b      	ldrb	r3, [r3, #2]
 800e002:	f003 0302 	and.w	r3, r3, #2
 800e006:	b2db      	uxtb	r3, r3
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 800e00c:	2320      	movs	r3, #32
 800e00e:	e000      	b.n	800e012 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 800e010:	2310      	movs	r3, #16
 800e012:	461a      	mov	r2, r3
 800e014:	21e8      	movs	r1, #232	; 0xe8
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f7f3 fa7a 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	781a      	ldrb	r2, [r3, #0]
 800e020:	88fb      	ldrh	r3, [r7, #6]
 800e022:	2100      	movs	r1, #0
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f000 fa0b 	bl	800e440 <_ZN3USB11dispatchPktEhht>
 800e02a:	4603      	mov	r3, r0
 800e02c:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 800e02e:	7dfb      	ldrb	r3, [r7, #23]
 800e030:	2b06      	cmp	r3, #6
 800e032:	d123      	bne.n	800e07c <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 800e034:	21f8      	movs	r1, #248	; 0xf8
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f7f3 fabc 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e03c:	4603      	mov	r3, r0
 800e03e:	f003 0310 	and.w	r3, r3, #16
 800e042:	2b00      	cmp	r3, #0
 800e044:	bf0c      	ite	eq
 800e046:	2301      	moveq	r3, #1
 800e048:	2300      	movne	r3, #0
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	f003 0301 	and.w	r3, r3, #1
 800e050:	b2d9      	uxtb	r1, r3
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	7893      	ldrb	r3, [r2, #2]
 800e056:	f361 0341 	bfi	r3, r1, #1, #1
 800e05a:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	789b      	ldrb	r3, [r3, #2]
 800e060:	f003 0302 	and.w	r3, r3, #2
 800e064:	b2db      	uxtb	r3, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	d001      	beq.n	800e06e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 800e06a:	2320      	movs	r3, #32
 800e06c:	e000      	b.n	800e070 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 800e06e:	2310      	movs	r3, #16
 800e070:	461a      	mov	r2, r3
 800e072:	21e8      	movs	r1, #232	; 0xe8
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f7f3 fa4b 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 800e07a:	e072      	b.n	800e162 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18a>
                }
                if(rcode) {
 800e07c:	7dfb      	ldrb	r3, [r7, #23]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d170      	bne.n	800e164 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18c>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 800e082:	21c8      	movs	r1, #200	; 0xc8
 800e084:	68f8      	ldr	r0, [r7, #12]
 800e086:	f7f3 fa95 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e08a:	4603      	mov	r3, r0
 800e08c:	f003 0304 	and.w	r3, r3, #4
 800e090:	2b00      	cmp	r3, #0
 800e092:	bf0c      	ite	eq
 800e094:	2301      	moveq	r3, #1
 800e096:	2300      	movne	r3, #0
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d002      	beq.n	800e0a4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 800e09e:	23f0      	movs	r3, #240	; 0xf0
 800e0a0:	75fb      	strb	r3, [r7, #23]
                        break;
 800e0a2:	e060      	b.n	800e166 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 800e0a4:	2130      	movs	r1, #48	; 0x30
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f7f3 fa84 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 800e0b0:	7dba      	ldrb	r2, [r7, #22]
 800e0b2:	8a7b      	ldrh	r3, [r7, #18]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	dd01      	ble.n	800e0bc <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 800e0b8:	8a7b      	ldrh	r3, [r7, #18]
 800e0ba:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	8a7a      	ldrh	r2, [r7, #18]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 800e0cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	da01      	bge.n	800e0d8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 800e0d8:	7dba      	ldrb	r2, [r7, #22]
 800e0da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	bfa8      	it	ge
 800e0e2:	4613      	movge	r3, r2
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	6a3b      	ldr	r3, [r7, #32]
 800e0e8:	2108      	movs	r1, #8
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f001 f81e 	bl	800f12c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 800e0f0:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 800e0f2:	2204      	movs	r2, #4
 800e0f4:	21c8      	movs	r1, #200	; 0xc8
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f7f3 fa0a 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	881a      	ldrh	r2, [r3, #0]
 800e100:	7dbb      	ldrb	r3, [r7, #22]
 800e102:	b29b      	uxth	r3, r3
 800e104:	4413      	add	r3, r2
 800e106:	b29a      	uxth	r2, r3
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 800e10c:	7dba      	ldrb	r2, [r7, #22]
 800e10e:	7c7b      	ldrb	r3, [r7, #17]
 800e110:	429a      	cmp	r2, r3
 800e112:	d304      	bcc.n	800e11e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	881b      	ldrh	r3, [r3, #0]
 800e118:	8a7a      	ldrh	r2, [r7, #18]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d813      	bhi.n	800e146 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 800e11e:	21f8      	movs	r1, #248	; 0xf8
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f7f3 fa47 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e126:	4603      	mov	r3, r0
 800e128:	f003 0310 	and.w	r3, r3, #16
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d001      	beq.n	800e134 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 800e130:	2101      	movs	r1, #1
 800e132:	e000      	b.n	800e136 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 800e134:	2100      	movs	r1, #0
 800e136:	68ba      	ldr	r2, [r7, #8]
 800e138:	7893      	ldrb	r3, [r2, #2]
 800e13a:	f361 0341 	bfi	r3, r1, #1, #1
 800e13e:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 800e140:	2300      	movs	r3, #0
 800e142:	75fb      	strb	r3, [r7, #23]
                        break;
 800e144:	e00f      	b.n	800e166 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                } else if(bInterval > 0)
 800e146:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f43f af66 	beq.w	800e01c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 800e150:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e158:	fb02 f303 	mul.w	r3, r2, r3
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7f3 fcf5 	bl	8001b4c <HAL_Delay>
        } //while( 1 )
 800e162:	e75b      	b.n	800e01c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 800e164:	bf00      	nop
        return ( rcode);
 800e166:	7dfb      	ldrb	r3, [r7, #23]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3718      	adds	r7, #24
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 800e170:	b580      	push	{r7, lr}
 800e172:	b088      	sub	sp, #32
 800e174:	af02      	add	r7, sp, #8
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	4608      	mov	r0, r1
 800e17a:	4611      	mov	r1, r2
 800e17c:	461a      	mov	r2, r3
 800e17e:	4603      	mov	r3, r0
 800e180:	70fb      	strb	r3, [r7, #3]
 800e182:	460b      	mov	r3, r1
 800e184:	70bb      	strb	r3, [r7, #2]
 800e186:	4613      	mov	r3, r2
 800e188:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 800e18a:	2300      	movs	r3, #0
 800e18c:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 800e18e:	2300      	movs	r3, #0
 800e190:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800e192:	f107 0010 	add.w	r0, r7, #16
 800e196:	78ba      	ldrb	r2, [r7, #2]
 800e198:	78f9      	ldrb	r1, [r7, #3]
 800e19a:	f107 030e 	add.w	r3, r7, #14
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f7ff fd99 	bl	800dcda <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 800e1ac:	7dfb      	ldrb	r3, [r7, #23]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 800e1b2:	7dfb      	ldrb	r3, [r7, #23]
 800e1b4:	e00a      	b.n	800e1cc <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 800e1b6:	6939      	ldr	r1, [r7, #16]
 800e1b8:	89fa      	ldrh	r2, [r7, #14]
 800e1ba:	8838      	ldrh	r0, [r7, #0]
 800e1bc:	6a3b      	ldr	r3, [r7, #32]
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 f806 	bl	800e1d4 <_ZN3USB11OutTransferEP6EpInfottPh>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	bf00      	nop
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b08a      	sub	sp, #40	; 0x28
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	4611      	mov	r1, r2
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	80fb      	strh	r3, [r7, #6]
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f2:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 800e1f4:	88bb      	ldrh	r3, [r7, #4]
 800e1f6:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	785b      	ldrb	r3, [r3, #1]
 800e1fc:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 800e1fe:	7efb      	ldrb	r3, [r7, #27]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 800e204:	7efb      	ldrb	r3, [r7, #27]
 800e206:	2b40      	cmp	r3, #64	; 0x40
 800e208:	d901      	bls.n	800e20e <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 800e20a:	23da      	movs	r3, #218	; 0xda
 800e20c:	e111      	b.n	800e432 <_ZN3USB11OutTransferEP6EpInfottPh+0x25e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e20e:	f7f3 fc91 	bl	8001b34 <HAL_GetTick>
 800e212:	4603      	mov	r3, r0
 800e214:	4a89      	ldr	r2, [pc, #548]	; (800e43c <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800e216:	fba2 2303 	umull	r2, r3, r2, r3
 800e21a:	099b      	lsrs	r3, r3, #6
 800e21c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e220:	3308      	adds	r3, #8
 800e222:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	789b      	ldrb	r3, [r3, #2]
 800e228:	f003 0301 	and.w	r3, r3, #1
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <_ZN3USB11OutTransferEP6EpInfottPh+0x62>
 800e232:	2380      	movs	r3, #128	; 0x80
 800e234:	e000      	b.n	800e238 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
 800e236:	2340      	movs	r3, #64	; 0x40
 800e238:	461a      	mov	r2, r3
 800e23a:	21e8      	movs	r1, #232	; 0xe8
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f7f3 f967 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 800e242:	8bbb      	ldrh	r3, [r7, #28]
 800e244:	2b00      	cmp	r3, #0
 800e246:	f000 80de 	beq.w	800e406 <_ZN3USB11OutTransferEP6EpInfottPh+0x232>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 800e24a:	2300      	movs	r3, #0
 800e24c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 800e250:	2300      	movs	r3, #0
 800e252:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 800e254:	7efb      	ldrb	r3, [r7, #27]
 800e256:	b29b      	uxth	r3, r3
 800e258:	8bba      	ldrh	r2, [r7, #28]
 800e25a:	4293      	cmp	r3, r2
 800e25c:	bf28      	it	cs
 800e25e:	4613      	movcs	r3, r2
 800e260:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 800e262:	8a7b      	ldrh	r3, [r7, #18]
 800e264:	b2da      	uxtb	r2, r3
 800e266:	6a3b      	ldr	r3, [r7, #32]
 800e268:	2110      	movs	r1, #16
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f000 ff24 	bl	800f0b8 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 800e270:	8a7b      	ldrh	r3, [r7, #18]
 800e272:	b2db      	uxtb	r3, r3
 800e274:	461a      	mov	r2, r3
 800e276:	2138      	movs	r1, #56	; 0x38
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f7f3 f949 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	f043 0320 	orr.w	r3, r3, #32
 800e286:	b2db      	uxtb	r3, r3
 800e288:	461a      	mov	r2, r3
 800e28a:	21f0      	movs	r1, #240	; 0xf0
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	f7f3 f93f 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e292:	21c8      	movs	r1, #200	; 0xc8
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f7f3 f98d 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e29a:	4603      	mov	r3, r0
 800e29c:	b25b      	sxtb	r3, r3
 800e29e:	43db      	mvns	r3, r3
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	09db      	lsrs	r3, r3, #7
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d000      	beq.n	800e2ac <_ZN3USB11OutTransferEP6EpInfottPh+0xd8>
 800e2aa:	e7f2      	b.n	800e292 <_ZN3USB11OutTransferEP6EpInfottPh+0xbe>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e2ac:	2280      	movs	r2, #128	; 0x80
 800e2ae:	21c8      	movs	r1, #200	; 0xc8
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	f7f3 f92d 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 800e2b6:	21f8      	movs	r1, #248	; 0xf8
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f7f3 f97b 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	f003 030f 	and.w	r3, r3, #15
 800e2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00c      	beq.n	800e2ea <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800e2d0:	f7f3 fc30 	bl	8001b34 <HAL_GetTick>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	4a59      	ldr	r2, [pc, #356]	; (800e43c <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800e2d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e2dc:	099a      	lsrs	r2, r3, #6
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	da01      	bge.n	800e2ea <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e000      	b.n	800e2ec <_ZN3USB11OutTransferEP6EpInfottPh+0x118>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f000 8081 	beq.w	800e3f4 <_ZN3USB11OutTransferEP6EpInfottPh+0x220>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 800e2f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2f6:	2b0e      	cmp	r3, #14
 800e2f8:	d012      	beq.n	800e320 <_ZN3USB11OutTransferEP6EpInfottPh+0x14c>
 800e2fa:	2b0e      	cmp	r3, #14
 800e2fc:	f300 8085 	bgt.w	800e40a <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
 800e300:	2b04      	cmp	r3, #4
 800e302:	d002      	beq.n	800e30a <_ZN3USB11OutTransferEP6EpInfottPh+0x136>
 800e304:	2b06      	cmp	r3, #6
 800e306:	d015      	beq.n	800e334 <_ZN3USB11OutTransferEP6EpInfottPh+0x160>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 800e308:	e07f      	b.n	800e40a <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
                                        nak_count++;
 800e30a:	8bfb      	ldrh	r3, [r7, #30]
 800e30c:	3301      	adds	r3, #1
 800e30e:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 800e310:	88fb      	ldrh	r3, [r7, #6]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d032      	beq.n	800e37c <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
 800e316:	8bfa      	ldrh	r2, [r7, #30]
 800e318:	88fb      	ldrh	r3, [r7, #6]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d12e      	bne.n	800e37c <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
                                                goto breakout;
 800e31e:	e075      	b.n	800e40c <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        retry_count++;
 800e320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e324:	3301      	adds	r3, #1
 800e326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 800e32a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e32e:	2b03      	cmp	r3, #3
 800e330:	d126      	bne.n	800e380 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ac>
                                                goto breakout;
 800e332:	e06b      	b.n	800e40c <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800e334:	21f8      	movs	r1, #248	; 0xf8
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f7f3 f93c 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e33c:	4603      	mov	r3, r0
 800e33e:	f003 0320 	and.w	r3, r3, #32
 800e342:	2b00      	cmp	r3, #0
 800e344:	bf0c      	ite	eq
 800e346:	2301      	moveq	r3, #1
 800e348:	2300      	movne	r3, #0
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	f003 0301 	and.w	r3, r3, #1
 800e350:	b2d9      	uxtb	r1, r3
 800e352:	68ba      	ldr	r2, [r7, #8]
 800e354:	7893      	ldrb	r3, [r2, #2]
 800e356:	f361 0300 	bfi	r3, r1, #0, #1
 800e35a:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	789b      	ldrb	r3, [r3, #2]
 800e360:	f003 0301 	and.w	r3, r3, #1
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	d001      	beq.n	800e36e <_ZN3USB11OutTransferEP6EpInfottPh+0x19a>
 800e36a:	2380      	movs	r3, #128	; 0x80
 800e36c:	e000      	b.n	800e370 <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
 800e36e:	2340      	movs	r3, #64	; 0x40
 800e370:	461a      	mov	r2, r3
 800e372:	21e8      	movs	r1, #232	; 0xe8
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f7f3 f8cb 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 800e37a:	e002      	b.n	800e382 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800e37c:	bf00      	nop
 800e37e:	e000      	b.n	800e382 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800e380:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 800e382:	2200      	movs	r2, #0
 800e384:	2138      	movs	r1, #56	; 0x38
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f7f3 f8c2 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	461a      	mov	r2, r3
 800e392:	2110      	movs	r1, #16
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	f7f3 f8bb 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 800e39a:	8a7b      	ldrh	r3, [r7, #18]
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	461a      	mov	r2, r3
 800e3a0:	2138      	movs	r1, #56	; 0x38
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f7f3 f8b4 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	f043 0320 	orr.w	r3, r3, #32
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	21f0      	movs	r1, #240	; 0xf0
 800e3b6:	68f8      	ldr	r0, [r7, #12]
 800e3b8:	f7f3 f8aa 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e3bc:	21c8      	movs	r1, #200	; 0xc8
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f7f3 f8f8 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	b25b      	sxtb	r3, r3
 800e3c8:	43db      	mvns	r3, r3
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	09db      	lsrs	r3, r3, #7
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d000      	beq.n	800e3d6 <_ZN3USB11OutTransferEP6EpInfottPh+0x202>
 800e3d4:	e7f2      	b.n	800e3bc <_ZN3USB11OutTransferEP6EpInfottPh+0x1e8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e3d6:	2280      	movs	r2, #128	; 0x80
 800e3d8:	21c8      	movs	r1, #200	; 0xc8
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f7f3 f898 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 800e3e0:	21f8      	movs	r1, #248	; 0xf8
 800e3e2:	68f8      	ldr	r0, [r7, #12]
 800e3e4:	f7f3 f8e6 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	f003 030f 	and.w	r3, r3, #15
 800e3ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e3f2:	e769      	b.n	800e2c8 <_ZN3USB11OutTransferEP6EpInfottPh+0xf4>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 800e3f4:	8bba      	ldrh	r2, [r7, #28]
 800e3f6:	8a7b      	ldrh	r3, [r7, #18]
 800e3f8:	1ad3      	subs	r3, r2, r3
 800e3fa:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 800e3fc:	8a7b      	ldrh	r3, [r7, #18]
 800e3fe:	6a3a      	ldr	r2, [r7, #32]
 800e400:	4413      	add	r3, r2
 800e402:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 800e404:	e71d      	b.n	800e242 <_ZN3USB11OutTransferEP6EpInfottPh+0x6e>
        }//while( bytes_left...
breakout:
 800e406:	bf00      	nop
 800e408:	e000      	b.n	800e40c <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        goto breakout;
 800e40a:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 800e40c:	21f8      	movs	r1, #248	; 0xf8
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f7f3 f8d0 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e414:	4603      	mov	r3, r0
 800e416:	f003 0320 	and.w	r3, r3, #32
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d001      	beq.n	800e422 <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>
 800e41e:	2101      	movs	r1, #1
 800e420:	e000      	b.n	800e424 <_ZN3USB11OutTransferEP6EpInfottPh+0x250>
 800e422:	2100      	movs	r1, #0
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	7893      	ldrb	r3, [r2, #2]
 800e428:	f361 0300 	bfi	r3, r1, #0, #1
 800e42c:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 800e42e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e432:	4618      	mov	r0, r3
 800e434:	3728      	adds	r7, #40	; 0x28
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	10624dd3 	.word	0x10624dd3

0800e440 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	4608      	mov	r0, r1
 800e44a:	4611      	mov	r1, r2
 800e44c:	461a      	mov	r2, r3
 800e44e:	4603      	mov	r3, r0
 800e450:	70fb      	strb	r3, [r7, #3]
 800e452:	460b      	mov	r3, r1
 800e454:	70bb      	strb	r3, [r7, #2]
 800e456:	4613      	mov	r3, r2
 800e458:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e45a:	f7f3 fb6b 	bl	8001b34 <HAL_GetTick>
 800e45e:	4603      	mov	r3, r0
 800e460:	4a38      	ldr	r2, [pc, #224]	; (800e544 <_ZN3USB11dispatchPktEhht+0x104>)
 800e462:	fba2 2303 	umull	r2, r3, r2, r3
 800e466:	099b      	lsrs	r3, r3, #6
 800e468:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e46c:	3308      	adds	r3, #8
 800e46e:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 800e470:	2300      	movs	r3, #0
 800e472:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 800e474:	2300      	movs	r3, #0
 800e476:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 800e478:	2300      	movs	r3, #0
 800e47a:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e47c:	f7f3 fb5a 	bl	8001b34 <HAL_GetTick>
 800e480:	4603      	mov	r3, r0
 800e482:	4a30      	ldr	r2, [pc, #192]	; (800e544 <_ZN3USB11dispatchPktEhht+0x104>)
 800e484:	fba2 2303 	umull	r2, r3, r2, r3
 800e488:	099a      	lsrs	r2, r3, #6
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	0fdb      	lsrs	r3, r3, #31
 800e490:	b2db      	uxtb	r3, r3
 800e492:	2b00      	cmp	r3, #0
 800e494:	d050      	beq.n	800e538 <_ZN3USB11dispatchPktEhht+0xf8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 800e496:	78fa      	ldrb	r2, [r7, #3]
 800e498:	78bb      	ldrb	r3, [r7, #2]
 800e49a:	4313      	orrs	r3, r2
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	461a      	mov	r2, r3
 800e4a0:	21f0      	movs	r1, #240	; 0xf0
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7f3 f834 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 800e4a8:	23ff      	movs	r3, #255	; 0xff
 800e4aa:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 800e4ac:	f7f3 fb42 	bl	8001b34 <HAL_GetTick>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	4a24      	ldr	r2, [pc, #144]	; (800e544 <_ZN3USB11dispatchPktEhht+0x104>)
 800e4b4:	fba2 2303 	umull	r2, r3, r2, r3
 800e4b8:	099a      	lsrs	r2, r3, #6
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	0fdb      	lsrs	r3, r3, #31
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d010      	beq.n	800e4e8 <_ZN3USB11dispatchPktEhht+0xa8>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 800e4c6:	21c8      	movs	r1, #200	; 0xc8
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7f3 f873 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 800e4d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	dae8      	bge.n	800e4ac <_ZN3USB11dispatchPktEhht+0x6c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 800e4da:	2280      	movs	r2, #128	; 0x80
 800e4dc:	21c8      	movs	r1, #200	; 0xc8
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f7f3 f816 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 800e4e8:	21f8      	movs	r1, #248	; 0xf8
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7f3 f862 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	f003 030f 	and.w	r3, r3, #15
 800e4f6:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 800e4f8:	7dfb      	ldrb	r3, [r7, #23]
 800e4fa:	2b04      	cmp	r3, #4
 800e4fc:	d002      	beq.n	800e504 <_ZN3USB11dispatchPktEhht+0xc4>
 800e4fe:	2b0e      	cmp	r3, #14
 800e500:	d00c      	beq.n	800e51c <_ZN3USB11dispatchPktEhht+0xdc>
 800e502:	e013      	b.n	800e52c <_ZN3USB11dispatchPktEhht+0xec>
                        case hrNAK:
                                nak_count++;
 800e504:	8abb      	ldrh	r3, [r7, #20]
 800e506:	3301      	adds	r3, #1
 800e508:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 800e50a:	883b      	ldrh	r3, [r7, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00f      	beq.n	800e530 <_ZN3USB11dispatchPktEhht+0xf0>
 800e510:	8aba      	ldrh	r2, [r7, #20]
 800e512:	883b      	ldrh	r3, [r7, #0]
 800e514:	429a      	cmp	r2, r3
 800e516:	d10b      	bne.n	800e530 <_ZN3USB11dispatchPktEhht+0xf0>
                                        return (rcode);
 800e518:	7dfb      	ldrb	r3, [r7, #23]
 800e51a:	e00e      	b.n	800e53a <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 800e51c:	7dbb      	ldrb	r3, [r7, #22]
 800e51e:	3301      	adds	r3, #1
 800e520:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 800e522:	7dbb      	ldrb	r3, [r7, #22]
 800e524:	2b03      	cmp	r3, #3
 800e526:	d105      	bne.n	800e534 <_ZN3USB11dispatchPktEhht+0xf4>
                                        return (rcode);
 800e528:	7dfb      	ldrb	r3, [r7, #23]
 800e52a:	e006      	b.n	800e53a <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        default:
                                return (rcode);
 800e52c:	7dfb      	ldrb	r3, [r7, #23]
 800e52e:	e004      	b.n	800e53a <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
 800e530:	bf00      	nop
 800e532:	e7a3      	b.n	800e47c <_ZN3USB11dispatchPktEhht+0x3c>
                                break;
 800e534:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e536:	e7a1      	b.n	800e47c <_ZN3USB11dispatchPktEhht+0x3c>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 800e538:	7dfb      	ldrb	r3, [r7, #23]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3718      	adds	r7, #24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	10624dd3 	.word	0x10624dd3

0800e548 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 800e550:	2300      	movs	r3, #0
 800e552:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 fe17 	bl	800f188 <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 fe2c 	bl	800f1b8 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 800e560:	4603      	mov	r3, r0
 800e562:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 800e564:	7b3b      	ldrb	r3, [r7, #12]
 800e566:	2b03      	cmp	r3, #3
 800e568:	d832      	bhi.n	800e5d0 <_ZN3USB4TaskEv+0x88>
 800e56a:	a201      	add	r2, pc, #4	; (adr r2, 800e570 <_ZN3USB4TaskEv+0x28>)
 800e56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e570:	0800e58d 	.word	0x0800e58d
 800e574:	0800e581 	.word	0x0800e581
 800e578:	0800e5a9 	.word	0x0800e5a9
 800e57c:	0800e5a5 	.word	0x0800e5a5
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 800e580:	4bc7      	ldr	r3, [pc, #796]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e582:	2213      	movs	r2, #19
 800e584:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e586:	2300      	movs	r3, #0
 800e588:	73fb      	strb	r3, [r7, #15]
                        break;
 800e58a:	e021      	b.n	800e5d0 <_ZN3USB4TaskEv+0x88>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 800e58c:	4bc4      	ldr	r3, [pc, #784]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e594:	2b10      	cmp	r3, #16
 800e596:	d002      	beq.n	800e59e <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 800e598:	4bc1      	ldr	r3, [pc, #772]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e59a:	2211      	movs	r2, #17
 800e59c:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	73fb      	strb	r3, [r7, #15]
                        break;
 800e5a2:	e015      	b.n	800e5d0 <_ZN3USB4TaskEv+0x88>
                case LSHOST:

                        lowspeed = true;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 800e5a8:	4bbd      	ldr	r3, [pc, #756]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5b0:	2b10      	cmp	r3, #16
 800e5b2:	d10c      	bne.n	800e5ce <_ZN3USB4TaskEv+0x86>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 800e5b4:	f7f3 fabe 	bl	8001b34 <HAL_GetTick>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	4aba      	ldr	r2, [pc, #744]	; (800e8a4 <_ZN3USB4TaskEv+0x35c>)
 800e5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800e5c0:	099b      	lsrs	r3, r3, #6
 800e5c2:	33c8      	adds	r3, #200	; 0xc8
 800e5c4:	4ab8      	ldr	r2, [pc, #736]	; (800e8a8 <_ZN3USB4TaskEv+0x360>)
 800e5c6:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 800e5c8:	4bb5      	ldr	r3, [pc, #724]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e5ca:	2220      	movs	r2, #32
 800e5cc:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 800e5ce:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	73bb      	strb	r3, [r7, #14]
 800e5d4:	7bbb      	ldrb	r3, [r7, #14]
 800e5d6:	2b0f      	cmp	r3, #15
 800e5d8:	d81b      	bhi.n	800e612 <_ZN3USB4TaskEv+0xca>
                if(devConfig[i])
 800e5da:	7bba      	ldrb	r2, [r7, #14]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	321e      	adds	r2, #30
 800e5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d010      	beq.n	800e60a <_ZN3USB4TaskEv+0xc2>
                        rcode = devConfig[i]->Poll();
 800e5e8:	7bba      	ldrb	r2, [r7, #14]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	321e      	adds	r2, #30
 800e5ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5f2:	7bba      	ldrb	r2, [r7, #14]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	321e      	adds	r2, #30
 800e5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	330c      	adds	r3, #12
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4608      	mov	r0, r1
 800e604:	4798      	blx	r3
 800e606:	4603      	mov	r3, r0
 800e608:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e60a:	7bbb      	ldrb	r3, [r7, #14]
 800e60c:	3301      	adds	r3, #1
 800e60e:	73bb      	strb	r3, [r7, #14]
 800e610:	e7e0      	b.n	800e5d4 <_ZN3USB4TaskEv+0x8c>

        switch(usb_task_state) {
 800e612:	4ba3      	ldr	r3, [pc, #652]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	2ba0      	cmp	r3, #160	; 0xa0
 800e618:	f000 812f 	beq.w	800e87a <_ZN3USB4TaskEv+0x332>
 800e61c:	2ba0      	cmp	r3, #160	; 0xa0
 800e61e:	f300 813b 	bgt.w	800e898 <_ZN3USB4TaskEv+0x350>
 800e622:	2b90      	cmp	r3, #144	; 0x90
 800e624:	f000 812b 	beq.w	800e87e <_ZN3USB4TaskEv+0x336>
 800e628:	2b90      	cmp	r3, #144	; 0x90
 800e62a:	f300 8135 	bgt.w	800e898 <_ZN3USB4TaskEv+0x350>
 800e62e:	2b80      	cmp	r3, #128	; 0x80
 800e630:	f000 810a 	beq.w	800e848 <_ZN3USB4TaskEv+0x300>
 800e634:	2b80      	cmp	r3, #128	; 0x80
 800e636:	f300 812f 	bgt.w	800e898 <_ZN3USB4TaskEv+0x350>
 800e63a:	2b51      	cmp	r3, #81	; 0x51
 800e63c:	f000 80f2 	beq.w	800e824 <_ZN3USB4TaskEv+0x2dc>
 800e640:	2b51      	cmp	r3, #81	; 0x51
 800e642:	f300 8129 	bgt.w	800e898 <_ZN3USB4TaskEv+0x350>
 800e646:	2b40      	cmp	r3, #64	; 0x40
 800e648:	dc6a      	bgt.n	800e720 <_ZN3USB4TaskEv+0x1d8>
 800e64a:	2b11      	cmp	r3, #17
 800e64c:	f2c0 8124 	blt.w	800e898 <_ZN3USB4TaskEv+0x350>
 800e650:	3b11      	subs	r3, #17
 800e652:	2b2f      	cmp	r3, #47	; 0x2f
 800e654:	f200 8120 	bhi.w	800e898 <_ZN3USB4TaskEv+0x350>
 800e658:	a201      	add	r2, pc, #4	; (adr r2, 800e660 <_ZN3USB4TaskEv+0x118>)
 800e65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e65e:	bf00      	nop
 800e660:	0800e727 	.word	0x0800e727
 800e664:	0800e883 	.word	0x0800e883
 800e668:	0800e883 	.word	0x0800e883
 800e66c:	0800e899 	.word	0x0800e899
 800e670:	0800e899 	.word	0x0800e899
 800e674:	0800e899 	.word	0x0800e899
 800e678:	0800e899 	.word	0x0800e899
 800e67c:	0800e899 	.word	0x0800e899
 800e680:	0800e899 	.word	0x0800e899
 800e684:	0800e899 	.word	0x0800e899
 800e688:	0800e899 	.word	0x0800e899
 800e68c:	0800e899 	.word	0x0800e899
 800e690:	0800e899 	.word	0x0800e899
 800e694:	0800e899 	.word	0x0800e899
 800e698:	0800e899 	.word	0x0800e899
 800e69c:	0800e777 	.word	0x0800e777
 800e6a0:	0800e899 	.word	0x0800e899
 800e6a4:	0800e899 	.word	0x0800e899
 800e6a8:	0800e899 	.word	0x0800e899
 800e6ac:	0800e899 	.word	0x0800e899
 800e6b0:	0800e899 	.word	0x0800e899
 800e6b4:	0800e899 	.word	0x0800e899
 800e6b8:	0800e899 	.word	0x0800e899
 800e6bc:	0800e899 	.word	0x0800e899
 800e6c0:	0800e899 	.word	0x0800e899
 800e6c4:	0800e899 	.word	0x0800e899
 800e6c8:	0800e899 	.word	0x0800e899
 800e6cc:	0800e899 	.word	0x0800e899
 800e6d0:	0800e899 	.word	0x0800e899
 800e6d4:	0800e899 	.word	0x0800e899
 800e6d8:	0800e899 	.word	0x0800e899
 800e6dc:	0800e79b 	.word	0x0800e79b
 800e6e0:	0800e899 	.word	0x0800e899
 800e6e4:	0800e899 	.word	0x0800e899
 800e6e8:	0800e899 	.word	0x0800e899
 800e6ec:	0800e899 	.word	0x0800e899
 800e6f0:	0800e899 	.word	0x0800e899
 800e6f4:	0800e899 	.word	0x0800e899
 800e6f8:	0800e899 	.word	0x0800e899
 800e6fc:	0800e899 	.word	0x0800e899
 800e700:	0800e899 	.word	0x0800e899
 800e704:	0800e899 	.word	0x0800e899
 800e708:	0800e899 	.word	0x0800e899
 800e70c:	0800e899 	.word	0x0800e899
 800e710:	0800e899 	.word	0x0800e899
 800e714:	0800e899 	.word	0x0800e899
 800e718:	0800e899 	.word	0x0800e899
 800e71c:	0800e7ad 	.word	0x0800e7ad
 800e720:	2b50      	cmp	r3, #80	; 0x50
 800e722:	d063      	beq.n	800e7ec <_ZN3USB4TaskEv+0x2a4>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 800e724:	e0b8      	b.n	800e898 <_ZN3USB4TaskEv+0x350>
                        init();
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f7ff fa6c 	bl	800dc04 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e72c:	2300      	movs	r3, #0
 800e72e:	737b      	strb	r3, [r7, #13]
 800e730:	7b7b      	ldrb	r3, [r7, #13]
 800e732:	2b0f      	cmp	r3, #15
 800e734:	d81b      	bhi.n	800e76e <_ZN3USB4TaskEv+0x226>
                                if(devConfig[i])
 800e736:	7b7a      	ldrb	r2, [r7, #13]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	321e      	adds	r2, #30
 800e73c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d010      	beq.n	800e766 <_ZN3USB4TaskEv+0x21e>
                                        rcode = devConfig[i]->Release();
 800e744:	7b7a      	ldrb	r2, [r7, #13]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	321e      	adds	r2, #30
 800e74a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e74e:	7b7a      	ldrb	r2, [r7, #13]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	321e      	adds	r2, #30
 800e754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	3308      	adds	r3, #8
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4608      	mov	r0, r1
 800e760:	4798      	blx	r3
 800e762:	4603      	mov	r3, r0
 800e764:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e766:	7b7b      	ldrb	r3, [r7, #13]
 800e768:	3301      	adds	r3, #1
 800e76a:	737b      	strb	r3, [r7, #13]
 800e76c:	e7e0      	b.n	800e730 <_ZN3USB4TaskEv+0x1e8>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 800e76e:	4b4c      	ldr	r3, [pc, #304]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e770:	2212      	movs	r2, #18
 800e772:	701a      	strb	r2, [r3, #0]
                        break;
 800e774:	e090      	b.n	800e898 <_ZN3USB4TaskEv+0x350>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 800e776:	f7f3 f9dd 	bl	8001b34 <HAL_GetTick>
 800e77a:	4603      	mov	r3, r0
 800e77c:	4a49      	ldr	r2, [pc, #292]	; (800e8a4 <_ZN3USB4TaskEv+0x35c>)
 800e77e:	fba2 2303 	umull	r2, r3, r2, r3
 800e782:	099a      	lsrs	r2, r3, #6
 800e784:	4b48      	ldr	r3, [pc, #288]	; (800e8a8 <_ZN3USB4TaskEv+0x360>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	43db      	mvns	r3, r3
 800e78c:	0fdb      	lsrs	r3, r3, #31
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	2b00      	cmp	r3, #0
 800e792:	d078      	beq.n	800e886 <_ZN3USB4TaskEv+0x33e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800e794:	4b42      	ldr	r3, [pc, #264]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e796:	2230      	movs	r2, #48	; 0x30
 800e798:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e79a:	2201      	movs	r2, #1
 800e79c:	21e8      	movs	r1, #232	; 0xe8
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7f2 feb6 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 800e7a4:	4b3e      	ldr	r3, [pc, #248]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e7a6:	2240      	movs	r2, #64	; 0x40
 800e7a8:	701a      	strb	r2, [r3, #0]
                        break;
 800e7aa:	e075      	b.n	800e898 <_ZN3USB4TaskEv+0x350>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 800e7ac:	21e8      	movs	r1, #232	; 0xe8
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7f2 ff00 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	f003 0301 	and.w	r3, r3, #1
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	bf0c      	ite	eq
 800e7be:	2301      	moveq	r3, #1
 800e7c0:	2300      	movne	r3, #0
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d060      	beq.n	800e88a <_ZN3USB4TaskEv+0x342>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 800e7c8:	21d8      	movs	r1, #216	; 0xd8
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7f2 fef2 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	f043 0308 	orr.w	r3, r3, #8
 800e7d6:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 800e7d8:	7b3b      	ldrb	r3, [r7, #12]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	21d8      	movs	r1, #216	; 0xd8
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7f2 fe96 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 800e7e4:	4b2e      	ldr	r3, [pc, #184]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e7e6:	2250      	movs	r2, #80	; 0x50
 800e7e8:	701a      	strb	r2, [r3, #0]
                        break;
 800e7ea:	e04e      	b.n	800e88a <_ZN3USB4TaskEv+0x342>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 800e7ec:	21c8      	movs	r1, #200	; 0xc8
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7f2 fee0 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	bf14      	ite	ne
 800e7fe:	2301      	movne	r3, #1
 800e800:	2300      	moveq	r3, #0
 800e802:	b2db      	uxtb	r3, r3
 800e804:	2b00      	cmp	r3, #0
 800e806:	d042      	beq.n	800e88e <_ZN3USB4TaskEv+0x346>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 800e808:	4b25      	ldr	r3, [pc, #148]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e80a:	2251      	movs	r2, #81	; 0x51
 800e80c:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 800e80e:	f7f3 f991 	bl	8001b34 <HAL_GetTick>
 800e812:	4603      	mov	r3, r0
 800e814:	4a23      	ldr	r2, [pc, #140]	; (800e8a4 <_ZN3USB4TaskEv+0x35c>)
 800e816:	fba2 2303 	umull	r2, r3, r2, r3
 800e81a:	099b      	lsrs	r3, r3, #6
 800e81c:	3314      	adds	r3, #20
 800e81e:	4a22      	ldr	r2, [pc, #136]	; (800e8a8 <_ZN3USB4TaskEv+0x360>)
 800e820:	6013      	str	r3, [r2, #0]
                        break;
 800e822:	e034      	b.n	800e88e <_ZN3USB4TaskEv+0x346>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 800e824:	f7f3 f986 	bl	8001b34 <HAL_GetTick>
 800e828:	4603      	mov	r3, r0
 800e82a:	4a1e      	ldr	r2, [pc, #120]	; (800e8a4 <_ZN3USB4TaskEv+0x35c>)
 800e82c:	fba2 2303 	umull	r2, r3, r2, r3
 800e830:	099a      	lsrs	r2, r3, #6
 800e832:	4b1d      	ldr	r3, [pc, #116]	; (800e8a8 <_ZN3USB4TaskEv+0x360>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	43db      	mvns	r3, r3
 800e83a:	0fdb      	lsrs	r3, r3, #31
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d027      	beq.n	800e892 <_ZN3USB4TaskEv+0x34a>
 800e842:	4b17      	ldr	r3, [pc, #92]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e844:	2280      	movs	r2, #128	; 0x80
 800e846:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 800e848:	7bfb      	ldrb	r3, [r7, #15]
 800e84a:	2200      	movs	r2, #0
 800e84c:	2100      	movs	r1, #0
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f000 f928 	bl	800eaa4 <_ZN3USB11ConfiguringEhhb>
 800e854:	4603      	mov	r3, r0
 800e856:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 800e858:	7afb      	ldrb	r3, [r7, #11]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d009      	beq.n	800e872 <_ZN3USB4TaskEv+0x32a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 800e85e:	7afb      	ldrb	r3, [r7, #11]
 800e860:	2bd2      	cmp	r3, #210	; 0xd2
 800e862:	d018      	beq.n	800e896 <_ZN3USB4TaskEv+0x34e>
                                        usb_error = rcode;
 800e864:	4a11      	ldr	r2, [pc, #68]	; (800e8ac <_ZN3USB4TaskEv+0x364>)
 800e866:	7afb      	ldrb	r3, [r7, #11]
 800e868:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 800e86a:	4b0d      	ldr	r3, [pc, #52]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e86c:	22a0      	movs	r2, #160	; 0xa0
 800e86e:	701a      	strb	r2, [r3, #0]
                        break;
 800e870:	e011      	b.n	800e896 <_ZN3USB4TaskEv+0x34e>
                                usb_task_state = USB_STATE_RUNNING;
 800e872:	4b0b      	ldr	r3, [pc, #44]	; (800e8a0 <_ZN3USB4TaskEv+0x358>)
 800e874:	2290      	movs	r2, #144	; 0x90
 800e876:	701a      	strb	r2, [r3, #0]
                        break;
 800e878:	e00d      	b.n	800e896 <_ZN3USB4TaskEv+0x34e>
                        break;
 800e87a:	bf00      	nop
 800e87c:	e00c      	b.n	800e898 <_ZN3USB4TaskEv+0x350>
                        break;
 800e87e:	bf00      	nop
 800e880:	e00a      	b.n	800e898 <_ZN3USB4TaskEv+0x350>
                        break;
 800e882:	bf00      	nop
 800e884:	e008      	b.n	800e898 <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800e886:	bf00      	nop
 800e888:	e006      	b.n	800e898 <_ZN3USB4TaskEv+0x350>
                        break;
 800e88a:	bf00      	nop
 800e88c:	e004      	b.n	800e898 <_ZN3USB4TaskEv+0x350>
                        break;
 800e88e:	bf00      	nop
 800e890:	e002      	b.n	800e898 <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800e892:	bf00      	nop
 800e894:	e000      	b.n	800e898 <_ZN3USB4TaskEv+0x350>
                        break;
 800e896:	bf00      	nop
}
 800e898:	bf00      	nop
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	20000665 	.word	0x20000665
 800e8a4:	10624dd3 	.word	0x10624dd3
 800e8a8:	20000668 	.word	0x20000668
 800e8ac:	20000664 	.word	0x20000664

0800e8b0 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b086      	sub	sp, #24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	4608      	mov	r0, r1
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	461a      	mov	r2, r3
 800e8be:	4603      	mov	r3, r0
 800e8c0:	70fb      	strb	r3, [r7, #3]
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	70bb      	strb	r3, [r7, #2]
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	617b      	str	r3, [r7, #20]
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f000 fbc8 	bl	800f06c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800e8dc:	6178      	str	r0, [r7, #20]

        if(!p0)
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d101      	bne.n	800e8e8 <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e8e4:	23d6      	movs	r3, #214	; 0xd6
 800e8e6:	e03a      	b.n	800e95e <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d101      	bne.n	800e8f4 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 800e8f0:	23d7      	movs	r3, #215	; 0xd7
 800e8f2:	e034      	b.n	800e95e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	787a      	ldrb	r2, [r7, #1]
 800e8f8:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	78bb      	ldrb	r3, [r7, #2]
 800e8fe:	78f9      	ldrb	r1, [r7, #3]
 800e900:	2200      	movs	r2, #0
 800e902:	f000 fc67 	bl	800f1d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 800e906:	4603      	mov	r3, r0
 800e908:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 800e90a:	7bfb      	ldrb	r3, [r7, #15]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d101      	bne.n	800e914 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800e910:	23d4      	movs	r3, #212	; 0xd4
 800e912:	e024      	b.n	800e95e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	7bfa      	ldrb	r2, [r7, #15]
 800e918:	4611      	mov	r1, r2
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 fba6 	bl	800f06c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800e920:	6138      	str	r0, [r7, #16]

        if(!p)
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d101      	bne.n	800e92c <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e928:	23d6      	movs	r3, #214	; 0xd6
 800e92a:	e018      	b.n	800e95e <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	787a      	ldrb	r2, [r7, #1]
 800e930:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 800e932:	7bfb      	ldrb	r3, [r7, #15]
 800e934:	2200      	movs	r2, #0
 800e936:	2100      	movs	r1, #0
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 fae9 	bl	800ef10 <_ZN3USB7setAddrEhhh>
 800e93e:	4603      	mov	r3, r0
 800e940:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 800e942:	7bbb      	ldrb	r3, [r7, #14]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d009      	beq.n	800e95c <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	7bfa      	ldrb	r2, [r7, #15]
 800e94c:	4611      	mov	r1, r2
 800e94e:	4618      	mov	r0, r3
 800e950:	f000 fcd8 	bl	800f304 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 800e954:	2300      	movs	r3, #0
 800e956:	73fb      	strb	r3, [r7, #15]
                return rcode;
 800e958:	7bbb      	ldrb	r3, [r7, #14]
 800e95a:	e000      	b.n	800e95e <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 800e95c:	2300      	movs	r3, #0
};
 800e95e:	4618      	mov	r0, r3
 800e960:	3718      	adds	r7, #24
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
	...

0800e968 <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 800e968:	b590      	push	{r4, r7, lr}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	4608      	mov	r0, r1
 800e972:	4611      	mov	r1, r2
 800e974:	461a      	mov	r2, r3
 800e976:	4603      	mov	r3, r0
 800e978:	70fb      	strb	r3, [r7, #3]
 800e97a:	460b      	mov	r3, r1
 800e97c:	70bb      	strb	r3, [r7, #2]
 800e97e:	4613      	mov	r3, r2
 800e980:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 800e982:	2300      	movs	r3, #0
 800e984:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 800e986:	78fa      	ldrb	r2, [r7, #3]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	321e      	adds	r2, #30
 800e98c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e990:	78fa      	ldrb	r2, [r7, #3]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	321e      	adds	r2, #30
 800e996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	3304      	adds	r3, #4
 800e99e:	681c      	ldr	r4, [r3, #0]
 800e9a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9a4:	787a      	ldrb	r2, [r7, #1]
 800e9a6:	78b9      	ldrb	r1, [r7, #2]
 800e9a8:	47a0      	blx	r4
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 800e9ae:	7bbb      	ldrb	r3, [r7, #14]
 800e9b0:	2be0      	cmp	r3, #224	; 0xe0
 800e9b2:	d11c      	bne.n	800e9ee <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 800e9b4:	78bb      	ldrb	r3, [r7, #2]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d108      	bne.n	800e9cc <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	21e8      	movs	r1, #232	; 0xe8
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7f2 fda6 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800e9c4:	4835      	ldr	r0, [pc, #212]	; (800ea9c <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800e9c6:	f7f3 f8c1 	bl	8001b4c <HAL_Delay>
 800e9ca:	e022      	b.n	800ea12 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800e9cc:	78ba      	ldrb	r2, [r7, #2]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	321e      	adds	r2, #30
 800e9d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e9d6:	78ba      	ldrb	r2, [r7, #2]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	321e      	adds	r2, #30
 800e9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	3314      	adds	r3, #20
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	787a      	ldrb	r2, [r7, #1]
 800e9e8:	4611      	mov	r1, r2
 800e9ea:	4798      	blx	r3
 800e9ec:	e011      	b.n	800ea12 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800e9ee:	7bbb      	ldrb	r3, [r7, #14]
 800e9f0:	2b0d      	cmp	r3, #13
 800e9f2:	d109      	bne.n	800ea08 <_ZN3USB13AttemptConfigEhhhb+0xa0>
 800e9f4:	7bfb      	ldrb	r3, [r7, #15]
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	d806      	bhi.n	800ea08 <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 800e9fa:	4829      	ldr	r0, [pc, #164]	; (800eaa0 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800e9fc:	f7f3 f8a6 	bl	8001b4c <HAL_Delay>
                retries++;
 800ea00:	7bfb      	ldrb	r3, [r7, #15]
 800ea02:	3301      	adds	r3, #1
 800ea04:	73fb      	strb	r3, [r7, #15]
                goto again;
 800ea06:	e7be      	b.n	800e986 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 800ea08:	7bbb      	ldrb	r3, [r7, #14]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d001      	beq.n	800ea12 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 800ea0e:	7bbb      	ldrb	r3, [r7, #14]
 800ea10:	e03f      	b.n	800ea92 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 800ea12:	78fa      	ldrb	r2, [r7, #3]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	321e      	adds	r2, #30
 800ea18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea1c:	78fa      	ldrb	r2, [r7, #3]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	321e      	adds	r2, #30
 800ea22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	681c      	ldr	r4, [r3, #0]
 800ea2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ea2e:	787a      	ldrb	r2, [r7, #1]
 800ea30:	78b9      	ldrb	r1, [r7, #2]
 800ea32:	47a0      	blx	r4
 800ea34:	4603      	mov	r3, r0
 800ea36:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800ea38:	7bbb      	ldrb	r3, [r7, #14]
 800ea3a:	2b0d      	cmp	r3, #13
 800ea3c:	d109      	bne.n	800ea52 <_ZN3USB13AttemptConfigEhhhb+0xea>
 800ea3e:	7bfb      	ldrb	r3, [r7, #15]
 800ea40:	2b02      	cmp	r3, #2
 800ea42:	d806      	bhi.n	800ea52 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 800ea44:	4816      	ldr	r0, [pc, #88]	; (800eaa0 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800ea46:	f7f3 f881 	bl	8001b4c <HAL_Delay>
                retries++;
 800ea4a:	7bfb      	ldrb	r3, [r7, #15]
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	73fb      	strb	r3, [r7, #15]
                goto again;
 800ea50:	e799      	b.n	800e986 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 800ea52:	7bbb      	ldrb	r3, [r7, #14]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d01b      	beq.n	800ea90 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 800ea58:	78bb      	ldrb	r3, [r7, #2]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d108      	bne.n	800ea70 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800ea5e:	2201      	movs	r2, #1
 800ea60:	21e8      	movs	r1, #232	; 0xe8
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f7f2 fd54 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800ea68:	480c      	ldr	r0, [pc, #48]	; (800ea9c <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800ea6a:	f7f3 f86f 	bl	8001b4c <HAL_Delay>
 800ea6e:	e00f      	b.n	800ea90 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800ea70:	78ba      	ldrb	r2, [r7, #2]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	321e      	adds	r2, #30
 800ea76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea7a:	78ba      	ldrb	r2, [r7, #2]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	321e      	adds	r2, #30
 800ea80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	3314      	adds	r3, #20
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	787a      	ldrb	r2, [r7, #1]
 800ea8c:	4611      	mov	r1, r2
 800ea8e:	4798      	blx	r3
                }
        }
        return rcode;
 800ea90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3714      	adds	r7, #20
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd90      	pop	{r4, r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	00018e70 	.word	0x00018e70
 800eaa0:	000186a0 	.word	0x000186a0

0800eaa4 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b090      	sub	sp, #64	; 0x40
 800eaa8:	af02      	add	r7, sp, #8
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	4608      	mov	r0, r1
 800eaae:	4611      	mov	r1, r2
 800eab0:	461a      	mov	r2, r3
 800eab2:	4603      	mov	r3, r0
 800eab4:	70fb      	strb	r3, [r7, #3]
 800eab6:	460b      	mov	r3, r1
 800eab8:	70bb      	strb	r3, [r7, #2]
 800eaba:	4613      	mov	r3, r2
 800eabc:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 800eac4:	f107 030c 	add.w	r3, r7, #12
 800eac8:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 800eaca:	2300      	movs	r3, #0
 800eacc:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 800eace:	2300      	movs	r3, #0
 800ead0:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 800ead2:	2300      	movs	r3, #0
 800ead4:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 800ead6:	2308      	movs	r3, #8
 800ead8:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 800eada:	7abb      	ldrb	r3, [r7, #10]
 800eadc:	f36f 0300 	bfc	r3, #0, #1
 800eae0:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 800eae2:	7abb      	ldrb	r3, [r7, #10]
 800eae4:	f36f 0341 	bfc	r3, #1, #1
 800eae8:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 800eaea:	7abb      	ldrb	r3, [r7, #10]
 800eaec:	220f      	movs	r2, #15
 800eaee:	f362 0387 	bfi	r3, r2, #2, #6
 800eaf2:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7fa fcbb 	bl	8009470 <_ZN3USB14GetAddressPoolEv>
 800eafa:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 800eafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	2100      	movs	r1, #0
 800eb04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb06:	4798      	blx	r3
 800eb08:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 800eb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d101      	bne.n	800eb14 <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800eb10:	23d6      	movs	r3, #214	; 0xd6
 800eb12:	e15c      	b.n	800edce <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 800eb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 800eb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1c:	f107 0208 	add.w	r2, r7, #8
 800eb20:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 800eb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb24:	787a      	ldrb	r2, [r7, #1]
 800eb26:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 800eb28:	f107 030c 	add.w	r3, r7, #12
 800eb2c:	9300      	str	r3, [sp, #0]
 800eb2e:	2312      	movs	r3, #18
 800eb30:	2200      	movs	r2, #0
 800eb32:	2100      	movs	r1, #0
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 f94e 	bl	800edd6 <_ZN3USB11getDevDescrEhhtPh>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 800eb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb44:	601a      	str	r2, [r3, #0]

        if(rcode) {
 800eb46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d002      	beq.n	800eb54 <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 800eb4e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eb52:	e13c      	b.n	800edce <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 800eb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb56:	7a1a      	ldrb	r2, [r3, #8]
 800eb58:	7a5b      	ldrb	r3, [r3, #9]
 800eb5a:	021b      	lsls	r3, r3, #8
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 800eb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb62:	7a9a      	ldrb	r2, [r3, #10]
 800eb64:	7adb      	ldrb	r3, [r3, #11]
 800eb66:	021b      	lsls	r3, r3, #8
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 800eb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6e:	791b      	ldrb	r3, [r3, #4]
 800eb70:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 800eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb74:	795b      	ldrb	r3, [r3, #5]
 800eb76:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800eb78:	2300      	movs	r3, #0
 800eb7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eb7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb82:	2b0f      	cmp	r3, #15
 800eb84:	f200 8081 	bhi.w	800ec8a <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800eb88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	321e      	adds	r2, #30
 800eb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d06e      	beq.n	800ec76 <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800eb98:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	321e      	adds	r2, #30
 800eba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eba4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	321e      	adds	r2, #30
 800ebac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	3310      	adds	r3, #16
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4608      	mov	r0, r1
 800ebb8:	4798      	blx	r3
 800ebba:	4603      	mov	r3, r0
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	bf14      	ite	ne
 800ebc0:	2301      	movne	r3, #1
 800ebc2:	2300      	moveq	r3, #0
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d157      	bne.n	800ec7a <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 800ebca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	321e      	adds	r2, #30
 800ebd2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ebd6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	321e      	adds	r2, #30
 800ebde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	3320      	adds	r3, #32
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	7fba      	ldrb	r2, [r7, #30]
 800ebea:	4611      	mov	r1, r2
 800ebec:	4798      	blx	r3
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d02b      	beq.n	800ec4c <_ZN3USB11ConfiguringEhhb+0x1a8>
 800ebf4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	321e      	adds	r2, #30
 800ebfc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ec00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	321e      	adds	r2, #30
 800ec08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	3318      	adds	r3, #24
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	8c3a      	ldrh	r2, [r7, #32]
 800ec14:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800ec16:	4798      	blx	r3
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d114      	bne.n	800ec48 <_ZN3USB11ConfiguringEhhb+0x1a4>
 800ec1e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	321e      	adds	r2, #30
 800ec26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ec2a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	321e      	adds	r2, #30
 800ec32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	331c      	adds	r3, #28
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	7ffa      	ldrb	r2, [r7, #31]
 800ec3e:	4611      	mov	r1, r2
 800ec40:	4798      	blx	r3
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d001      	beq.n	800ec4c <_ZN3USB11ConfiguringEhhb+0x1a8>
 800ec48:	2301      	movs	r3, #1
 800ec4a:	e000      	b.n	800ec4e <_ZN3USB11ConfiguringEhhb+0x1aa>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d014      	beq.n	800ec7c <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800ec52:	78b8      	ldrb	r0, [r7, #2]
 800ec54:	78fa      	ldrb	r2, [r7, #3]
 800ec56:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ec5a:	787b      	ldrb	r3, [r7, #1]
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	4603      	mov	r3, r0
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7ff fe81 	bl	800e968 <_ZN3USB13AttemptConfigEhhhb>
 800ec66:	4603      	mov	r3, r0
 800ec68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 800ec6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec70:	2bd1      	cmp	r3, #209	; 0xd1
 800ec72:	d109      	bne.n	800ec88 <_ZN3USB11ConfiguringEhhb+0x1e4>
 800ec74:	e002      	b.n	800ec7c <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800ec76:	bf00      	nop
 800ec78:	e000      	b.n	800ec7c <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ec7a:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ec7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec80:	3301      	adds	r3, #1
 800ec82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ec86:	e77a      	b.n	800eb7e <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 800ec88:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 800ec8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec8e:	2b0f      	cmp	r3, #15
 800ec90:	d802      	bhi.n	800ec98 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 800ec92:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec96:	e09a      	b.n	800edce <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ec98:	2300      	movs	r3, #0
 800ec9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ec9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eca2:	2b0f      	cmp	r3, #15
 800eca4:	f200 8088 	bhi.w	800edb8 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 800eca8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	321e      	adds	r2, #30
 800ecb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d074      	beq.n	800eda2 <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ecb8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	321e      	adds	r2, #30
 800ecc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ecc4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	321e      	adds	r2, #30
 800eccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	3310      	adds	r3, #16
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4608      	mov	r0, r1
 800ecd8:	4798      	blx	r3
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	bf14      	ite	ne
 800ece0:	2301      	movne	r3, #1
 800ece2:	2300      	moveq	r3, #0
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d15d      	bne.n	800eda6 <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ecea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	321e      	adds	r2, #30
 800ecf2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ecf6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	321e      	adds	r2, #30
 800ecfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	3320      	adds	r3, #32
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	7fba      	ldrb	r2, [r7, #30]
 800ed0a:	4611      	mov	r1, r2
 800ed0c:	4798      	blx	r3
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d02b      	beq.n	800ed6c <_ZN3USB11ConfiguringEhhb+0x2c8>
 800ed14:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	321e      	adds	r2, #30
 800ed1c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed20:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	321e      	adds	r2, #30
 800ed28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	3318      	adds	r3, #24
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	8c3a      	ldrh	r2, [r7, #32]
 800ed34:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800ed36:	4798      	blx	r3
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d114      	bne.n	800ed68 <_ZN3USB11ConfiguringEhhb+0x2c4>
 800ed3e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	321e      	adds	r2, #30
 800ed46:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed4a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	321e      	adds	r2, #30
 800ed52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	331c      	adds	r3, #28
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	7ffa      	ldrb	r2, [r7, #31]
 800ed5e:	4611      	mov	r1, r2
 800ed60:	4798      	blx	r3
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d001      	beq.n	800ed6c <_ZN3USB11ConfiguringEhhb+0x2c8>
 800ed68:	2301      	movs	r3, #1
 800ed6a:	e000      	b.n	800ed6e <_ZN3USB11ConfiguringEhhb+0x2ca>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d11b      	bne.n	800edaa <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800ed72:	78b8      	ldrb	r0, [r7, #2]
 800ed74:	78fa      	ldrb	r2, [r7, #3]
 800ed76:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ed7a:	787b      	ldrb	r3, [r7, #1]
 800ed7c:	9300      	str	r3, [sp, #0]
 800ed7e:	4603      	mov	r3, r0
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7ff fdf1 	bl	800e968 <_ZN3USB13AttemptConfigEhhhb>
 800ed86:	4603      	mov	r3, r0
 800ed88:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 800ed8c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed90:	2bd1      	cmp	r3, #209	; 0xd1
 800ed92:	d00b      	beq.n	800edac <_ZN3USB11ConfiguringEhhb+0x308>
 800ed94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed98:	2bd9      	cmp	r3, #217	; 0xd9
 800ed9a:	d007      	beq.n	800edac <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 800ed9c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eda0:	e015      	b.n	800edce <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 800eda2:	bf00      	nop
 800eda4:	e002      	b.n	800edac <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800eda6:	bf00      	nop
 800eda8:	e000      	b.n	800edac <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800edaa:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800edac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edb0:	3301      	adds	r3, #1
 800edb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800edb6:	e772      	b.n	800ec9e <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 800edb8:	787b      	ldrb	r3, [r7, #1]
 800edba:	78ba      	ldrb	r2, [r7, #2]
 800edbc:	78f9      	ldrb	r1, [r7, #3]
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f7ff fd76 	bl	800e8b0 <_ZN3USB17DefaultAddressingEhhb>
 800edc4:	4603      	mov	r3, r0
 800edc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 800edca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3738      	adds	r7, #56	; 0x38
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b08a      	sub	sp, #40	; 0x28
 800edda:	af08      	add	r7, sp, #32
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	4608      	mov	r0, r1
 800ede0:	4611      	mov	r1, r2
 800ede2:	461a      	mov	r2, r3
 800ede4:	4603      	mov	r3, r0
 800ede6:	70fb      	strb	r3, [r7, #3]
 800ede8:	460b      	mov	r3, r1
 800edea:	70bb      	strb	r3, [r7, #2]
 800edec:	4613      	mov	r3, r2
 800edee:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 800edf0:	78ba      	ldrb	r2, [r7, #2]
 800edf2:	78f9      	ldrb	r1, [r7, #3]
 800edf4:	2300      	movs	r3, #0
 800edf6:	9307      	str	r3, [sp, #28]
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	9306      	str	r3, [sp, #24]
 800edfc:	883b      	ldrh	r3, [r7, #0]
 800edfe:	9305      	str	r3, [sp, #20]
 800ee00:	883b      	ldrh	r3, [r7, #0]
 800ee02:	9304      	str	r3, [sp, #16]
 800ee04:	2300      	movs	r3, #0
 800ee06:	9303      	str	r3, [sp, #12]
 800ee08:	2301      	movs	r3, #1
 800ee0a:	9302      	str	r3, [sp, #8]
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	9301      	str	r3, [sp, #4]
 800ee10:	2306      	movs	r3, #6
 800ee12:	9300      	str	r3, [sp, #0]
 800ee14:	2380      	movs	r3, #128	; 0x80
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f7fe ffc7 	bl	800ddaa <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ee1c:	4603      	mov	r3, r0
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3708      	adds	r7, #8
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}

0800ee26 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b08a      	sub	sp, #40	; 0x28
 800ee2a:	af08      	add	r7, sp, #32
 800ee2c:	6078      	str	r0, [r7, #4]
 800ee2e:	4608      	mov	r0, r1
 800ee30:	4611      	mov	r1, r2
 800ee32:	461a      	mov	r2, r3
 800ee34:	4603      	mov	r3, r0
 800ee36:	70fb      	strb	r3, [r7, #3]
 800ee38:	460b      	mov	r3, r1
 800ee3a:	70bb      	strb	r3, [r7, #2]
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 800ee40:	78ba      	ldrb	r2, [r7, #2]
 800ee42:	78f9      	ldrb	r1, [r7, #3]
 800ee44:	2300      	movs	r3, #0
 800ee46:	9307      	str	r3, [sp, #28]
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	9306      	str	r3, [sp, #24]
 800ee4c:	883b      	ldrh	r3, [r7, #0]
 800ee4e:	9305      	str	r3, [sp, #20]
 800ee50:	883b      	ldrh	r3, [r7, #0]
 800ee52:	9304      	str	r3, [sp, #16]
 800ee54:	2300      	movs	r3, #0
 800ee56:	9303      	str	r3, [sp, #12]
 800ee58:	2302      	movs	r3, #2
 800ee5a:	9302      	str	r3, [sp, #8]
 800ee5c:	7c3b      	ldrb	r3, [r7, #16]
 800ee5e:	9301      	str	r3, [sp, #4]
 800ee60:	2306      	movs	r3, #6
 800ee62:	9300      	str	r3, [sp, #0]
 800ee64:	2380      	movs	r3, #128	; 0x80
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7fe ff9f 	bl	800ddaa <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ee6c:	4603      	mov	r3, r0
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3708      	adds	r7, #8
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b09e      	sub	sp, #120	; 0x78
 800ee7a:	af08      	add	r7, sp, #32
 800ee7c:	6078      	str	r0, [r7, #4]
 800ee7e:	4608      	mov	r0, r1
 800ee80:	4611      	mov	r1, r2
 800ee82:	461a      	mov	r2, r3
 800ee84:	4603      	mov	r3, r0
 800ee86:	70fb      	strb	r3, [r7, #3]
 800ee88:	460b      	mov	r3, r1
 800ee8a:	70bb      	strb	r3, [r7, #2]
 800ee8c:	4613      	mov	r3, r2
 800ee8e:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 800ee90:	2340      	movs	r3, #64	; 0x40
 800ee92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 800ee96:	f107 030c 	add.w	r3, r7, #12
 800ee9a:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 800ee9c:	78ba      	ldrb	r2, [r7, #2]
 800ee9e:	78f9      	ldrb	r1, [r7, #3]
 800eea0:	f107 030c 	add.w	r3, r7, #12
 800eea4:	9301      	str	r3, [sp, #4]
 800eea6:	787b      	ldrb	r3, [r7, #1]
 800eea8:	9300      	str	r3, [sp, #0]
 800eeaa:	2309      	movs	r3, #9
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7ff ffba 	bl	800ee26 <_ZN3USB12getConfDescrEhhthPh>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 800eeb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d002      	beq.n	800eec6 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 800eec0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eec4:	e020      	b.n	800ef08 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 800eec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eec8:	789a      	ldrb	r2, [r3, #2]
 800eeca:	78db      	ldrb	r3, [r3, #3]
 800eecc:	021b      	lsls	r3, r3, #8
 800eece:	4313      	orrs	r3, r2
 800eed0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 800eed4:	78ba      	ldrb	r2, [r7, #2]
 800eed6:	78f9      	ldrb	r1, [r7, #3]
 800eed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eeda:	9307      	str	r3, [sp, #28]
 800eedc:	f107 030c 	add.w	r3, r7, #12
 800eee0:	9306      	str	r3, [sp, #24]
 800eee2:	2340      	movs	r3, #64	; 0x40
 800eee4:	9305      	str	r3, [sp, #20]
 800eee6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800eeea:	9304      	str	r3, [sp, #16]
 800eeec:	2300      	movs	r3, #0
 800eeee:	9303      	str	r3, [sp, #12]
 800eef0:	2302      	movs	r3, #2
 800eef2:	9302      	str	r3, [sp, #8]
 800eef4:	787b      	ldrb	r3, [r7, #1]
 800eef6:	9301      	str	r3, [sp, #4]
 800eef8:	2306      	movs	r3, #6
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	2380      	movs	r3, #128	; 0x80
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f7fe ff53 	bl	800ddaa <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ef04:	4603      	mov	r3, r0
 800ef06:	bf00      	nop
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3758      	adds	r7, #88	; 0x58
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b08c      	sub	sp, #48	; 0x30
 800ef14:	af08      	add	r7, sp, #32
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	4608      	mov	r0, r1
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	4603      	mov	r3, r0
 800ef20:	70fb      	strb	r3, [r7, #3]
 800ef22:	460b      	mov	r3, r1
 800ef24:	70bb      	strb	r3, [r7, #2]
 800ef26:	4613      	mov	r3, r2
 800ef28:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 800ef2a:	78ba      	ldrb	r2, [r7, #2]
 800ef2c:	78f9      	ldrb	r1, [r7, #3]
 800ef2e:	2300      	movs	r3, #0
 800ef30:	9307      	str	r3, [sp, #28]
 800ef32:	2300      	movs	r3, #0
 800ef34:	9306      	str	r3, [sp, #24]
 800ef36:	2300      	movs	r3, #0
 800ef38:	9305      	str	r3, [sp, #20]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	9304      	str	r3, [sp, #16]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	9303      	str	r3, [sp, #12]
 800ef42:	2300      	movs	r3, #0
 800ef44:	9302      	str	r3, [sp, #8]
 800ef46:	787b      	ldrb	r3, [r7, #1]
 800ef48:	9301      	str	r3, [sp, #4]
 800ef4a:	2305      	movs	r3, #5
 800ef4c:	9300      	str	r3, [sp, #0]
 800ef4e:	2300      	movs	r3, #0
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f7fe ff2a 	bl	800ddaa <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ef56:	4603      	mov	r3, r0
 800ef58:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 800ef5a:	4804      	ldr	r0, [pc, #16]	; (800ef6c <_ZN3USB7setAddrEhhh+0x5c>)
 800ef5c:	f7f2 fdf6 	bl	8001b4c <HAL_Delay>
        return rcode;
 800ef60:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	000493e0 	.word	0x000493e0

0800ef70 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b08a      	sub	sp, #40	; 0x28
 800ef74:	af08      	add	r7, sp, #32
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	4608      	mov	r0, r1
 800ef7a:	4611      	mov	r1, r2
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	4603      	mov	r3, r0
 800ef80:	70fb      	strb	r3, [r7, #3]
 800ef82:	460b      	mov	r3, r1
 800ef84:	70bb      	strb	r3, [r7, #2]
 800ef86:	4613      	mov	r3, r2
 800ef88:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 800ef8a:	78ba      	ldrb	r2, [r7, #2]
 800ef8c:	78f9      	ldrb	r1, [r7, #3]
 800ef8e:	2300      	movs	r3, #0
 800ef90:	9307      	str	r3, [sp, #28]
 800ef92:	2300      	movs	r3, #0
 800ef94:	9306      	str	r3, [sp, #24]
 800ef96:	2300      	movs	r3, #0
 800ef98:	9305      	str	r3, [sp, #20]
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	9304      	str	r3, [sp, #16]
 800ef9e:	2300      	movs	r3, #0
 800efa0:	9303      	str	r3, [sp, #12]
 800efa2:	2300      	movs	r3, #0
 800efa4:	9302      	str	r3, [sp, #8]
 800efa6:	787b      	ldrb	r3, [r7, #1]
 800efa8:	9301      	str	r3, [sp, #4]
 800efaa:	2309      	movs	r3, #9
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	2300      	movs	r3, #0
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f7fe fefa 	bl	800ddaa <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800efb6:	4603      	mov	r3, r0
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
};
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4618      	mov	r0, r3
 800efcc:	370c      	adds	r7, #12
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr
	...

0800efd8 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	4a04      	ldr	r2, [pc, #16]	; (800eff4 <_ZN11AddressPoolC1Ev+0x1c>)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	601a      	str	r2, [r3, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4618      	mov	r0, r3
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	0800fa00 	.word	0x0800fa00

0800eff8 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4618      	mov	r0, r3
 800f004:	f7ff ffe8 	bl	800efd8 <_ZN11AddressPoolC1Ev>
 800f008:	4a17      	ldr	r2, [pc, #92]	; (800f068 <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	601a      	str	r2, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2200      	movs	r2, #0
 800f012:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 800f014:	2100      	movs	r1, #0
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f000 f990 	bl	800f33c <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2200      	movs	r2, #0
 800f020:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	1d1a      	adds	r2, r3, #4
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2200      	movs	r2, #0
 800f02e:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2208      	movs	r2, #8
 800f034:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	7993      	ldrb	r3, [r2, #6]
 800f03a:	f36f 0300 	bfc	r3, #0, #1
 800f03e:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	7993      	ldrb	r3, [r2, #6]
 800f044:	f36f 0341 	bfc	r3, #1, #1
 800f048:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	7993      	ldrb	r3, [r2, #6]
 800f04e:	210f      	movs	r1, #15
 800f050:	f361 0387 	bfi	r3, r1, #2, #6
 800f054:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f9a1 	bl	800f39e <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4618      	mov	r0, r3
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	0800f9ec 	.word	0x0800f9ec

0800f06c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	460b      	mov	r3, r1
 800f076:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 800f078:	78fb      	ldrb	r3, [r7, #3]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d102      	bne.n	800f084 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	3308      	adds	r3, #8
 800f082:	e014      	b.n	800f0ae <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 800f084:	78fb      	ldrb	r3, [r7, #3]
 800f086:	4619      	mov	r1, r3
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 f9a1 	bl	800f3d0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f08e:	4603      	mov	r3, r0
 800f090:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 800f092:	7bfb      	ldrb	r3, [r7, #15]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d008      	beq.n	800f0aa <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f103 0108 	add.w	r1, r3, #8
 800f09e:	7bfa      	ldrb	r2, [r7, #15]
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	1a9b      	subs	r3, r3, r2
 800f0a6:	440b      	add	r3, r1
 800f0a8:	e000      	b.n	800f0ac <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	bf00      	nop
        };
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
	...

0800f0b8 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b086      	sub	sp, #24
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	607b      	str	r3, [r7, #4]
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	72fb      	strb	r3, [r7, #11]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800f0ca:	f7f1 fb3d 	bl	8000748 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 800f0ce:	7afb      	ldrb	r3, [r7, #11]
 800f0d0:	f043 0302 	orr.w	r3, r3, #2
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 800f0d8:	f107 0117 	add.w	r1, r7, #23
 800f0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	480b      	ldr	r0, [pc, #44]	; (800f110 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800f0e4:	f7f5 fd8f 	bl	8004c06 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f0e8:	7abb      	ldrb	r3, [r7, #10]
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f0:	6879      	ldr	r1, [r7, #4]
 800f0f2:	4807      	ldr	r0, [pc, #28]	; (800f110 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800f0f4:	f7f5 fd87 	bl	8004c06 <HAL_SPI_Transmit>
        data_p += nbytes;
 800f0f8:	7abb      	ldrb	r3, [r7, #10]
 800f0fa:	687a      	ldr	r2, [r7, #4]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800f100:	f7f1 fb16 	bl	8000730 <_ZN3P103SetEv>
        return ( data_p);
 800f104:	687b      	ldr	r3, [r7, #4]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3718      	adds	r7, #24
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	200002fc 	.word	0x200002fc

0800f114 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 800f114:	b480      	push	{r7}
 800f116:	b083      	sub	sp, #12
 800f118:	af00      	add	r7, sp, #0
 800f11a:	4603      	mov	r3, r0
 800f11c:	6039      	str	r1, [r7, #0]
 800f11e:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 800f120:	bf00      	nop
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	607b      	str	r3, [r7, #4]
 800f136:	460b      	mov	r3, r1
 800f138:	72fb      	strb	r3, [r7, #11]
 800f13a:	4613      	mov	r3, r2
 800f13c:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800f13e:	f7f1 fb03 	bl	8000748 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 800f142:	f107 010b 	add.w	r1, r7, #11
 800f146:	f04f 33ff 	mov.w	r3, #4294967295
 800f14a:	2201      	movs	r2, #1
 800f14c:	480d      	ldr	r0, [pc, #52]	; (800f184 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800f14e:	f7f5 fd5a 	bl	8004c06 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 800f152:	7abb      	ldrb	r3, [r7, #10]
 800f154:	461a      	mov	r2, r3
 800f156:	2100      	movs	r1, #0
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 fa91 	bl	800f680 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f15e:	7abb      	ldrb	r3, [r7, #10]
 800f160:	b29a      	uxth	r2, r3
 800f162:	f04f 33ff 	mov.w	r3, #4294967295
 800f166:	6879      	ldr	r1, [r7, #4]
 800f168:	4806      	ldr	r0, [pc, #24]	; (800f184 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800f16a:	f7f5 fe88 	bl	8004e7e <HAL_SPI_Receive>
        data_p += nbytes;
 800f16e:	7abb      	ldrb	r3, [r7, #10]
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	4413      	add	r3, r2
 800f174:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800f176:	f7f1 fadb 	bl	8000730 <_ZN3P103SetEv>
        return ( data_p);
 800f17a:	687b      	ldr	r3, [r7, #4]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	200002fc 	.word	0x200002fc

0800f188 <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 800f190:	2300      	movs	r3, #0
 800f192:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 800f194:	f7fe fd0e 	bl	800dbb4 <_ZN2P95IsSetEv>
 800f198:	4603      	mov	r3, r0
 800f19a:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 800f19c:	7bbb      	ldrb	r3, [r7, #14]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d104      	bne.n	800f1ac <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 f937 	bl	800f416 <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 800f1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
	...

0800f1b8 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 800f1b8:	b480      	push	{r7}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
                return vbusState;
 800f1c0:	4b03      	ldr	r3, [pc, #12]	; (800f1d0 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 800f1c2:	781b      	ldrb	r3, [r3, #0]
        };
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr
 800f1d0:	2000064d 	.word	0x2000064d

0800f1d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	4608      	mov	r0, r1
 800f1de:	4611      	mov	r1, r2
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	70fb      	strb	r3, [r7, #3]
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	70bb      	strb	r3, [r7, #2]
 800f1ea:	4613      	mov	r3, r2
 800f1ec:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 800f1ee:	78fb      	ldrb	r3, [r7, #3]
 800f1f0:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 800f1f2:	7b3b      	ldrb	r3, [r7, #12]
 800f1f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d102      	bne.n	800f204 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 800f1fe:	787b      	ldrb	r3, [r7, #1]
 800f200:	2b07      	cmp	r3, #7
 800f202:	d901      	bls.n	800f208 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 800f204:	2300      	movs	r3, #0
 800f206:	e079      	b.n	800f2fc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 800f208:	78bb      	ldrb	r3, [r7, #2]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d005      	beq.n	800f21a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	79db      	ldrb	r3, [r3, #7]
 800f212:	2b07      	cmp	r3, #7
 800f214:	d101      	bne.n	800f21a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 800f216:	2300      	movs	r3, #0
 800f218:	e070      	b.n	800f2fc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 800f21a:	2100      	movs	r1, #0
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 f8d7 	bl	800f3d0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f222:	4603      	mov	r3, r0
 800f224:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 800f226:	7bfb      	ldrb	r3, [r7, #15]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d101      	bne.n	800f230 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 800f22c:	2300      	movs	r3, #0
 800f22e:	e065      	b.n	800f2fc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 800f230:	7b3b      	ldrb	r3, [r7, #12]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d124      	bne.n	800f280 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 800f236:	78bb      	ldrb	r3, [r7, #2]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00f      	beq.n	800f25c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 800f23c:	7bfa      	ldrb	r2, [r7, #15]
 800f23e:	6879      	ldr	r1, [r7, #4]
 800f240:	4613      	mov	r3, r2
 800f242:	00db      	lsls	r3, r3, #3
 800f244:	1a9b      	subs	r3, r3, r2
 800f246:	440b      	add	r3, r1
 800f248:	330c      	adds	r3, #12
 800f24a:	2241      	movs	r2, #65	; 0x41
 800f24c:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	79db      	ldrb	r3, [r3, #7]
 800f252:	3301      	adds	r3, #1
 800f254:	b2da      	uxtb	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	71da      	strb	r2, [r3, #7]
 800f25a:	e008      	b.n	800f26e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 800f25c:	7bfa      	ldrb	r2, [r7, #15]
 800f25e:	6879      	ldr	r1, [r7, #4]
 800f260:	4613      	mov	r3, r2
 800f262:	00db      	lsls	r3, r3, #3
 800f264:	1a9b      	subs	r3, r3, r2
 800f266:	440b      	add	r3, r1
 800f268:	330c      	adds	r3, #12
 800f26a:	2201      	movs	r2, #1
 800f26c:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 800f26e:	7bfa      	ldrb	r2, [r7, #15]
 800f270:	6879      	ldr	r1, [r7, #4]
 800f272:	4613      	mov	r3, r2
 800f274:	00db      	lsls	r3, r3, #3
 800f276:	1a9b      	subs	r3, r3, r2
 800f278:	440b      	add	r3, r1
 800f27a:	330c      	adds	r3, #12
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	e03d      	b.n	800f2fc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 800f280:	2300      	movs	r3, #0
 800f282:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 800f284:	7b3b      	ldrb	r3, [r7, #12]
 800f286:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f28a:	b2da      	uxtb	r2, r3
 800f28c:	7a3b      	ldrb	r3, [r7, #8]
 800f28e:	f362 03c5 	bfi	r3, r2, #3, #3
 800f292:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 800f294:	78bb      	ldrb	r3, [r7, #2]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d013      	beq.n	800f2c2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 800f29a:	7a3b      	ldrb	r3, [r7, #8]
 800f29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2a0:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	79db      	ldrb	r3, [r3, #7]
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	b2da      	uxtb	r2, r3
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	71da      	strb	r2, [r3, #7]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	79db      	ldrb	r3, [r3, #7]
 800f2b2:	f003 0307 	and.w	r3, r3, #7
 800f2b6:	b2da      	uxtb	r2, r3
 800f2b8:	7a3b      	ldrb	r3, [r7, #8]
 800f2ba:	f362 0302 	bfi	r3, r2, #0, #3
 800f2be:	723b      	strb	r3, [r7, #8]
 800f2c0:	e00b      	b.n	800f2da <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 800f2c2:	7a3b      	ldrb	r3, [r7, #8]
 800f2c4:	f36f 1386 	bfc	r3, #6, #1
 800f2c8:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 800f2ca:	787b      	ldrb	r3, [r7, #1]
 800f2cc:	f003 0307 	and.w	r3, r3, #7
 800f2d0:	b2da      	uxtb	r2, r3
 800f2d2:	7a3b      	ldrb	r3, [r7, #8]
 800f2d4:	f362 0302 	bfi	r3, r2, #0, #3
 800f2d8:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 800f2da:	7bfa      	ldrb	r2, [r7, #15]
 800f2dc:	6879      	ldr	r1, [r7, #4]
 800f2de:	4613      	mov	r3, r2
 800f2e0:	00db      	lsls	r3, r3, #3
 800f2e2:	1a9b      	subs	r3, r3, r2
 800f2e4:	440b      	add	r3, r1
 800f2e6:	330c      	adds	r3, #12
 800f2e8:	7a3a      	ldrb	r2, [r7, #8]
 800f2ea:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 800f2ec:	7bfa      	ldrb	r2, [r7, #15]
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	00db      	lsls	r3, r3, #3
 800f2f4:	1a9b      	subs	r3, r3, r2
 800f2f6:	440b      	add	r3, r1
 800f2f8:	330c      	adds	r3, #12
 800f2fa:	781b      	ldrb	r3, [r3, #0]
        };
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 800f304:	b580      	push	{r7, lr}
 800f306:	b084      	sub	sp, #16
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	460b      	mov	r3, r1
 800f30e:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 800f310:	78fb      	ldrb	r3, [r7, #3]
 800f312:	2b41      	cmp	r3, #65	; 0x41
 800f314:	d103      	bne.n	800f31e <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f000 f841 	bl	800f39e <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 800f31c:	e00b      	b.n	800f336 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 800f31e:	78fb      	ldrb	r3, [r7, #3]
 800f320:	4619      	mov	r1, r3
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 f854 	bl	800f3d0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f328:	4603      	mov	r3, r0
 800f32a:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 800f32c:	7bfb      	ldrb	r3, [r7, #15]
 800f32e:	4619      	mov	r1, r3
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 f893 	bl	800f45c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 800f336:	3710      	adds	r7, #16
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 800f33c:	b480      	push	{r7}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	460b      	mov	r3, r1
 800f346:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 800f348:	78fa      	ldrb	r2, [r7, #3]
 800f34a:	6879      	ldr	r1, [r7, #4]
 800f34c:	4613      	mov	r3, r2
 800f34e:	00db      	lsls	r3, r3, #3
 800f350:	1a9b      	subs	r3, r3, r2
 800f352:	440b      	add	r3, r1
 800f354:	330c      	adds	r3, #12
 800f356:	2200      	movs	r2, #0
 800f358:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 800f35a:	78fa      	ldrb	r2, [r7, #3]
 800f35c:	6879      	ldr	r1, [r7, #4]
 800f35e:	4613      	mov	r3, r2
 800f360:	00db      	lsls	r3, r3, #3
 800f362:	1a9b      	subs	r3, r3, r2
 800f364:	440b      	add	r3, r1
 800f366:	330d      	adds	r3, #13
 800f368:	2201      	movs	r2, #1
 800f36a:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 800f36c:	78fa      	ldrb	r2, [r7, #3]
 800f36e:	6879      	ldr	r1, [r7, #4]
 800f370:	4613      	mov	r3, r2
 800f372:	00db      	lsls	r3, r3, #3
 800f374:	1a9b      	subs	r3, r3, r2
 800f376:	440b      	add	r3, r1
 800f378:	330e      	adds	r3, #14
 800f37a:	2200      	movs	r2, #0
 800f37c:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 800f37e:	78fa      	ldrb	r2, [r7, #3]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	1d19      	adds	r1, r3, #4
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	4613      	mov	r3, r2
 800f388:	00db      	lsls	r3, r3, #3
 800f38a:	1a9b      	subs	r3, r3, r2
 800f38c:	4403      	add	r3, r0
 800f38e:	3308      	adds	r3, #8
 800f390:	6019      	str	r1, [r3, #0]
        };
 800f392:	bf00      	nop
 800f394:	370c      	adds	r7, #12
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr

0800f39e <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b084      	sub	sp, #16
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	73fb      	strb	r3, [r7, #15]
 800f3aa:	7bfb      	ldrb	r3, [r7, #15]
 800f3ac:	2b0f      	cmp	r3, #15
 800f3ae:	d808      	bhi.n	800f3c2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 800f3b0:	7bfb      	ldrb	r3, [r7, #15]
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f7ff ffc1 	bl	800f33c <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f3ba:	7bfb      	ldrb	r3, [r7, #15]
 800f3bc:	3301      	adds	r3, #1
 800f3be:	73fb      	strb	r3, [r7, #15]
 800f3c0:	e7f3      	b.n	800f3aa <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	71da      	strb	r2, [r3, #7]
        };
 800f3c8:	bf00      	nop
 800f3ca:	3710      	adds	r7, #16
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 800f3d0:	b480      	push	{r7}
 800f3d2:	b085      	sub	sp, #20
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	460b      	mov	r3, r1
 800f3da:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f3dc:	2301      	movs	r3, #1
 800f3de:	73fb      	strb	r3, [r7, #15]
 800f3e0:	7bfb      	ldrb	r3, [r7, #15]
 800f3e2:	2b0f      	cmp	r3, #15
 800f3e4:	d810      	bhi.n	800f408 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 800f3e6:	7bfa      	ldrb	r2, [r7, #15]
 800f3e8:	6879      	ldr	r1, [r7, #4]
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	00db      	lsls	r3, r3, #3
 800f3ee:	1a9b      	subs	r3, r3, r2
 800f3f0:	440b      	add	r3, r1
 800f3f2:	330c      	adds	r3, #12
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	78fa      	ldrb	r2, [r7, #3]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d101      	bne.n	800f400 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 800f3fc:	7bfb      	ldrb	r3, [r7, #15]
 800f3fe:	e004      	b.n	800f40a <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f400:	7bfb      	ldrb	r3, [r7, #15]
 800f402:	3301      	adds	r3, #1
 800f404:	73fb      	strb	r3, [r7, #15]
 800f406:	e7eb      	b.n	800f3e0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 800f408:	2300      	movs	r3, #0
        };
 800f40a:	4618      	mov	r0, r3
 800f40c:	3714      	adds	r7, #20
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr

0800f416 <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 800f416:	b580      	push	{r7, lr}
 800f418:	b084      	sub	sp, #16
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 800f41e:	2300      	movs	r3, #0
 800f420:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 800f422:	21c8      	movs	r1, #200	; 0xc8
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f7f2 f8c5 	bl	80015b4 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f42a:	4603      	mov	r3, r0
 800f42c:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 800f42e:	7bbb      	ldrb	r3, [r7, #14]
 800f430:	f003 0320 	and.w	r3, r3, #32
 800f434:	2b00      	cmp	r3, #0
 800f436:	d006      	beq.n	800f446 <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f7f2 f8dd 	bl	80015f8 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 800f43e:	7bfb      	ldrb	r3, [r7, #15]
 800f440:	f043 0320 	orr.w	r3, r3, #32
 800f444:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 800f446:	7bfb      	ldrb	r3, [r7, #15]
 800f448:	461a      	mov	r2, r3
 800f44a:	21c8      	movs	r1, #200	; 0xc8
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f7f2 f85f 	bl	8001510 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 800f452:	7bfb      	ldrb	r3, [r7, #15]
}
 800f454:	4618      	mov	r0, r3
 800f456:	3710      	adds	r7, #16
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	460b      	mov	r3, r1
 800f466:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 800f468:	78fb      	ldrb	r3, [r7, #3]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d03a      	beq.n	800f4e4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 800f46e:	78fa      	ldrb	r2, [r7, #3]
 800f470:	6879      	ldr	r1, [r7, #4]
 800f472:	4613      	mov	r3, r2
 800f474:	00db      	lsls	r3, r3, #3
 800f476:	1a9b      	subs	r3, r3, r2
 800f478:	440b      	add	r3, r1
 800f47a:	330c      	adds	r3, #12
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 800f480:	7b3b      	ldrb	r3, [r7, #12]
 800f482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f486:	b2db      	uxtb	r3, r3
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d025      	beq.n	800f4d8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f48c:	2301      	movs	r3, #1
 800f48e:	73fb      	strb	r3, [r7, #15]
 800f490:	7bfb      	ldrb	r3, [r7, #15]
 800f492:	461a      	mov	r2, r3
 800f494:	7b39      	ldrb	r1, [r7, #12]
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 f828 	bl	800f4ec <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 800f49c:	4603      	mov	r3, r0
 800f49e:	73fb      	strb	r3, [r7, #15]
 800f4a0:	7bfb      	ldrb	r3, [r7, #15]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	bf14      	ite	ne
 800f4a6:	2301      	movne	r3, #1
 800f4a8:	2300      	moveq	r3, #0
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d005      	beq.n	800f4bc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 800f4b0:	7bfb      	ldrb	r3, [r7, #15]
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7ff ffd1 	bl	800f45c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f4ba:	e7e9      	b.n	800f490 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	79db      	ldrb	r3, [r3, #7]
 800f4c0:	7b3a      	ldrb	r2, [r7, #12]
 800f4c2:	f3c2 0202 	ubfx	r2, r2, #0, #3
 800f4c6:	b2d2      	uxtb	r2, r2
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d105      	bne.n	800f4d8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	79db      	ldrb	r3, [r3, #7]
 800f4d0:	3b01      	subs	r3, #1
 800f4d2:	b2da      	uxtb	r2, r3
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 800f4d8:	78fb      	ldrb	r3, [r7, #3]
 800f4da:	4619      	mov	r1, r3
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7ff ff2d 	bl	800f33c <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 800f4e2:	e000      	b.n	800f4e6 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 800f4e4:	bf00      	nop
        }
 800f4e6:	3710      	adds	r7, #16
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 800f4ec:	b480      	push	{r7}
 800f4ee:	b085      	sub	sp, #20
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	7039      	strb	r1, [r7, #0]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f4fa:	78fb      	ldrb	r3, [r7, #3]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d004      	beq.n	800f50a <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f500:	78fb      	ldrb	r3, [r7, #3]
 800f502:	2b0f      	cmp	r3, #15
 800f504:	d801      	bhi.n	800f50a <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f506:	78fb      	ldrb	r3, [r7, #3]
 800f508:	e000      	b.n	800f50c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 800f50a:	2301      	movs	r3, #1
 800f50c:	73fb      	strb	r3, [r7, #15]
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
 800f510:	2b0f      	cmp	r3, #15
 800f512:	d816      	bhi.n	800f542 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 800f514:	7bfa      	ldrb	r2, [r7, #15]
 800f516:	6879      	ldr	r1, [r7, #4]
 800f518:	4613      	mov	r3, r2
 800f51a:	00db      	lsls	r3, r3, #3
 800f51c:	1a9b      	subs	r3, r3, r2
 800f51e:	440b      	add	r3, r1
 800f520:	3308      	adds	r3, #8
 800f522:	791b      	ldrb	r3, [r3, #4]
 800f524:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800f528:	b2da      	uxtb	r2, r3
 800f52a:	783b      	ldrb	r3, [r7, #0]
 800f52c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f530:	b2db      	uxtb	r3, r3
 800f532:	429a      	cmp	r2, r3
 800f534:	d101      	bne.n	800f53a <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 800f536:	7bfb      	ldrb	r3, [r7, #15]
 800f538:	e004      	b.n	800f544 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f53a:	7bfb      	ldrb	r3, [r7, #15]
 800f53c:	3301      	adds	r3, #1
 800f53e:	73fb      	strb	r3, [r7, #15]
 800f540:	e7e5      	b.n	800f50e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 800f542:	2300      	movs	r3, #0
        };
 800f544:	4618      	mov	r0, r3
 800f546:	3714      	adds	r7, #20
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 800f550:	b480      	push	{r7}
 800f552:	b085      	sub	sp, #20
 800f554:	af00      	add	r7, sp, #0
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d101      	bne.n	800f568 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 800f564:	2300      	movs	r3, #0
 800f566:	e031      	b.n	800f5cc <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	791b      	ldrb	r3, [r3, #4]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d022      	beq.n	800f5b6 <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	881b      	ldrh	r3, [r3, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d01e      	beq.n	800f5b6 <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	68f9      	ldr	r1, [r7, #12]
 800f582:	7949      	ldrb	r1, [r1, #5]
 800f584:	4608      	mov	r0, r1
 800f586:	68f9      	ldr	r1, [r7, #12]
 800f588:	7909      	ldrb	r1, [r1, #4]
 800f58a:	1a41      	subs	r1, r0, r1
 800f58c:	440b      	add	r3, r1
 800f58e:	7812      	ldrb	r2, [r2, #0]
 800f590:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	791b      	ldrb	r3, [r3, #4]
 800f596:	3b01      	subs	r3, #1
 800f598:	b2da      	uxtb	r2, r3
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	711a      	strb	r2, [r3, #4]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	881b      	ldrh	r3, [r3, #0]
 800f5a2:	3b01      	subs	r3, #1
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	801a      	strh	r2, [r3, #0]
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	1c5a      	adds	r2, r3, #1
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	601a      	str	r2, [r3, #0]
 800f5b4:	e7d8      	b.n	800f568 <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	791b      	ldrb	r3, [r3, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d001      	beq.n	800f5c2 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	e004      	b.n	800f5cc <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	795a      	ldrb	r2, [r3, #5]
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	711a      	strb	r2, [r3, #4]
        return true;
 800f5ca:	2301      	movs	r3, #1
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3714      	adds	r7, #20
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr

0800f5d8 <__cxa_pure_virtual>:
 800f5d8:	b508      	push	{r3, lr}
 800f5da:	f000 f80d 	bl	800f5f8 <_ZSt9terminatev>

0800f5de <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f5de:	b508      	push	{r3, lr}
 800f5e0:	4780      	blx	r0
 800f5e2:	f000 f80e 	bl	800f602 <abort>
	...

0800f5e8 <_ZSt13get_terminatev>:
 800f5e8:	4b02      	ldr	r3, [pc, #8]	; (800f5f4 <_ZSt13get_terminatev+0xc>)
 800f5ea:	6818      	ldr	r0, [r3, #0]
 800f5ec:	f3bf 8f5b 	dmb	ish
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	2000016c 	.word	0x2000016c

0800f5f8 <_ZSt9terminatev>:
 800f5f8:	b508      	push	{r3, lr}
 800f5fa:	f7ff fff5 	bl	800f5e8 <_ZSt13get_terminatev>
 800f5fe:	f7ff ffee 	bl	800f5de <_ZN10__cxxabiv111__terminateEPFvvE>

0800f602 <abort>:
 800f602:	b508      	push	{r3, lr}
 800f604:	2006      	movs	r0, #6
 800f606:	f000 f86b 	bl	800f6e0 <raise>
 800f60a:	2001      	movs	r0, #1
 800f60c:	f7f2 f9e2 	bl	80019d4 <_exit>

0800f610 <__errno>:
 800f610:	4b01      	ldr	r3, [pc, #4]	; (800f618 <__errno+0x8>)
 800f612:	6818      	ldr	r0, [r3, #0]
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop
 800f618:	20000170 	.word	0x20000170

0800f61c <__libc_init_array>:
 800f61c:	b570      	push	{r4, r5, r6, lr}
 800f61e:	4d0d      	ldr	r5, [pc, #52]	; (800f654 <__libc_init_array+0x38>)
 800f620:	4c0d      	ldr	r4, [pc, #52]	; (800f658 <__libc_init_array+0x3c>)
 800f622:	1b64      	subs	r4, r4, r5
 800f624:	10a4      	asrs	r4, r4, #2
 800f626:	2600      	movs	r6, #0
 800f628:	42a6      	cmp	r6, r4
 800f62a:	d109      	bne.n	800f640 <__libc_init_array+0x24>
 800f62c:	4d0b      	ldr	r5, [pc, #44]	; (800f65c <__libc_init_array+0x40>)
 800f62e:	4c0c      	ldr	r4, [pc, #48]	; (800f660 <__libc_init_array+0x44>)
 800f630:	f000 f884 	bl	800f73c <_init>
 800f634:	1b64      	subs	r4, r4, r5
 800f636:	10a4      	asrs	r4, r4, #2
 800f638:	2600      	movs	r6, #0
 800f63a:	42a6      	cmp	r6, r4
 800f63c:	d105      	bne.n	800f64a <__libc_init_array+0x2e>
 800f63e:	bd70      	pop	{r4, r5, r6, pc}
 800f640:	f855 3b04 	ldr.w	r3, [r5], #4
 800f644:	4798      	blx	r3
 800f646:	3601      	adds	r6, #1
 800f648:	e7ee      	b.n	800f628 <__libc_init_array+0xc>
 800f64a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f64e:	4798      	blx	r3
 800f650:	3601      	adds	r6, #1
 800f652:	e7f2      	b.n	800f63a <__libc_init_array+0x1e>
 800f654:	0800fa74 	.word	0x0800fa74
 800f658:	0800fa74 	.word	0x0800fa74
 800f65c:	0800fa74 	.word	0x0800fa74
 800f660:	0800fa7c 	.word	0x0800fa7c

0800f664 <memcpy>:
 800f664:	440a      	add	r2, r1
 800f666:	4291      	cmp	r1, r2
 800f668:	f100 33ff 	add.w	r3, r0, #4294967295
 800f66c:	d100      	bne.n	800f670 <memcpy+0xc>
 800f66e:	4770      	bx	lr
 800f670:	b510      	push	{r4, lr}
 800f672:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f67a:	4291      	cmp	r1, r2
 800f67c:	d1f9      	bne.n	800f672 <memcpy+0xe>
 800f67e:	bd10      	pop	{r4, pc}

0800f680 <memset>:
 800f680:	4402      	add	r2, r0
 800f682:	4603      	mov	r3, r0
 800f684:	4293      	cmp	r3, r2
 800f686:	d100      	bne.n	800f68a <memset+0xa>
 800f688:	4770      	bx	lr
 800f68a:	f803 1b01 	strb.w	r1, [r3], #1
 800f68e:	e7f9      	b.n	800f684 <memset+0x4>

0800f690 <_raise_r>:
 800f690:	291f      	cmp	r1, #31
 800f692:	b538      	push	{r3, r4, r5, lr}
 800f694:	4604      	mov	r4, r0
 800f696:	460d      	mov	r5, r1
 800f698:	d904      	bls.n	800f6a4 <_raise_r+0x14>
 800f69a:	2316      	movs	r3, #22
 800f69c:	6003      	str	r3, [r0, #0]
 800f69e:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a2:	bd38      	pop	{r3, r4, r5, pc}
 800f6a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f6a6:	b112      	cbz	r2, 800f6ae <_raise_r+0x1e>
 800f6a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6ac:	b94b      	cbnz	r3, 800f6c2 <_raise_r+0x32>
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f000 f830 	bl	800f714 <_getpid_r>
 800f6b4:	462a      	mov	r2, r5
 800f6b6:	4601      	mov	r1, r0
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6be:	f000 b817 	b.w	800f6f0 <_kill_r>
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d00a      	beq.n	800f6dc <_raise_r+0x4c>
 800f6c6:	1c59      	adds	r1, r3, #1
 800f6c8:	d103      	bne.n	800f6d2 <_raise_r+0x42>
 800f6ca:	2316      	movs	r3, #22
 800f6cc:	6003      	str	r3, [r0, #0]
 800f6ce:	2001      	movs	r0, #1
 800f6d0:	e7e7      	b.n	800f6a2 <_raise_r+0x12>
 800f6d2:	2400      	movs	r4, #0
 800f6d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f6d8:	4628      	mov	r0, r5
 800f6da:	4798      	blx	r3
 800f6dc:	2000      	movs	r0, #0
 800f6de:	e7e0      	b.n	800f6a2 <_raise_r+0x12>

0800f6e0 <raise>:
 800f6e0:	4b02      	ldr	r3, [pc, #8]	; (800f6ec <raise+0xc>)
 800f6e2:	4601      	mov	r1, r0
 800f6e4:	6818      	ldr	r0, [r3, #0]
 800f6e6:	f7ff bfd3 	b.w	800f690 <_raise_r>
 800f6ea:	bf00      	nop
 800f6ec:	20000170 	.word	0x20000170

0800f6f0 <_kill_r>:
 800f6f0:	b538      	push	{r3, r4, r5, lr}
 800f6f2:	4d07      	ldr	r5, [pc, #28]	; (800f710 <_kill_r+0x20>)
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	4608      	mov	r0, r1
 800f6fa:	4611      	mov	r1, r2
 800f6fc:	602b      	str	r3, [r5, #0]
 800f6fe:	f7f2 f959 	bl	80019b4 <_kill>
 800f702:	1c43      	adds	r3, r0, #1
 800f704:	d102      	bne.n	800f70c <_kill_r+0x1c>
 800f706:	682b      	ldr	r3, [r5, #0]
 800f708:	b103      	cbz	r3, 800f70c <_kill_r+0x1c>
 800f70a:	6023      	str	r3, [r4, #0]
 800f70c:	bd38      	pop	{r3, r4, r5, pc}
 800f70e:	bf00      	nop
 800f710:	20000f48 	.word	0x20000f48

0800f714 <_getpid_r>:
 800f714:	f7f2 b946 	b.w	80019a4 <_getpid>

0800f718 <strncmp>:
 800f718:	b510      	push	{r4, lr}
 800f71a:	b16a      	cbz	r2, 800f738 <strncmp+0x20>
 800f71c:	3901      	subs	r1, #1
 800f71e:	1884      	adds	r4, r0, r2
 800f720:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f724:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f728:	4293      	cmp	r3, r2
 800f72a:	d103      	bne.n	800f734 <strncmp+0x1c>
 800f72c:	42a0      	cmp	r0, r4
 800f72e:	d001      	beq.n	800f734 <strncmp+0x1c>
 800f730:	2b00      	cmp	r3, #0
 800f732:	d1f5      	bne.n	800f720 <strncmp+0x8>
 800f734:	1a98      	subs	r0, r3, r2
 800f736:	bd10      	pop	{r4, pc}
 800f738:	4610      	mov	r0, r2
 800f73a:	e7fc      	b.n	800f736 <strncmp+0x1e>

0800f73c <_init>:
 800f73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f73e:	bf00      	nop
 800f740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f742:	bc08      	pop	{r3}
 800f744:	469e      	mov	lr, r3
 800f746:	4770      	bx	lr

0800f748 <_fini>:
 800f748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74a:	bf00      	nop
 800f74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f74e:	bc08      	pop	{r3}
 800f750:	469e      	mov	lr, r3
 800f752:	4770      	bx	lr
