
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ac0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002148  08015c90  08015c90  00025c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017dd8  08017dd8  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  08017dd8  08017dd8  00027dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017de0  08017de0  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017de0  08017de0  00027de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017de8  08017de8  00027de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08017dec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ec0  20000188  08017f74  00030188  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006048  08017f74  00036048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00072e56  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a941  00000000  00000000  000a300e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002df0  00000000  00000000  000ad950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c18  00000000  00000000  000b0740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fc2e  00000000  00000000  000b3358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037f01  00000000  00000000  000e2f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9ffd  00000000  00000000  0011ae87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00214e84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c794  00000000  00000000  00214ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000188 	.word	0x20000188
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015c78 	.word	0x08015c78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000018c 	.word	0x2000018c
 800020c:	08015c78 	.word	0x08015c78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	68b9      	ldr	r1, [r7, #8]
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f000 f805 	bl	8000618 <_ZN5Print5printEli>
 800060e:	4603      	mov	r3, r0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d109      	bne.n	800063e <_ZN5Print5printEli+0x26>
    return write(n);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	e029      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d11d      	bne.n	8000680 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	da12      	bge.n	8000670 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800064a:	212d      	movs	r1, #45	; 0x2d
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ffc1 	bl	80005d4 <_ZN5Print5printEc>
 8000652:	4603      	mov	r3, r0
 8000654:	617b      	str	r3, [r7, #20]
      n = -n;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	425b      	negs	r3, r3
 800065a:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	220a      	movs	r2, #10
 8000660:	4619      	mov	r1, r3
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f000 f819 	bl	800069a <_ZN5Print11printNumberEmh>
 8000668:	4602      	mov	r2, r0
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4413      	add	r3, r2
 800066e:	e010      	b.n	8000692 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	220a      	movs	r2, #10
 8000674:	4619      	mov	r1, r3
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f000 f80f 	bl	800069a <_ZN5Print11printNumberEmh>
 800067c:	4603      	mov	r3, r0
 800067e:	e008      	b.n	8000692 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f000 f806 	bl	800069a <_ZN5Print11printNumberEmh>
 800068e:	4603      	mov	r3, r0
 8000690:	bf00      	nop
  }
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b090      	sub	sp, #64	; 0x40
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	3320      	adds	r3, #32
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80006b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d801      	bhi.n	80006c0 <_ZN5Print11printNumberEmh+0x26>
 80006bc:	230a      	movs	r3, #10
 80006be:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 80006ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	79f9      	ldrb	r1, [r7, #7]
 80006d8:	fb11 f303 	smulbb	r3, r1, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80006e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d804      	bhi.n	80006f6 <_ZN5Print11printNumberEmh+0x5c>
 80006ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006f0:	3330      	adds	r3, #48	; 0x30
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	e003      	b.n	80006fe <_ZN5Print11printNumberEmh+0x64>
 80006f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006fa:	3337      	adds	r3, #55	; 0x37
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000700:	3a01      	subs	r2, #1
 8000702:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000706:	7013      	strb	r3, [r2, #0]
  } while(n);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d000      	beq.n	8000710 <_ZN5Print11printNumberEmh+0x76>
  do {
 800070e:	e7d7      	b.n	80006c0 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f7ff ff00 	bl	8000518 <_ZN5Print5writeEPKc>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3740      	adds	r7, #64	; 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1cf9      	adds	r1, r7, #3
 8000738:	2201      	movs	r2, #1
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	4798      	blx	r3
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6918      	ldr	r0, [r3, #16]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	b29a      	uxth	r2, r3
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	6979      	ldr	r1, [r7, #20]
 8000766:	f006 ff5e 	bl	8007626 <HAL_UART_Transmit>
	return size;
 800076a:	687b      	ldr	r3, [r7, #4]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6918      	ldr	r0, [r3, #16]
 8000780:	f107 010f 	add.w	r1, r7, #15
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	2201      	movs	r2, #1
 800078a:	f006 ffde 	bl	800774a <HAL_UART_Receive>
	return data;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	return -1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <eeprom_read_byte>:
  * @brief  Function reads a byte from emulated eeprom (flash)
  * @param  pos : address to read
  * @retval byte : data read from eeprom
  */
uint8_t eeprom_read_byte(const uint32_t pos)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    /* with actual EEPROM, pos is a relative address */
    data = *(__IO uint8_t *)(DATA_EEPROM_BASE + pos);
  }
  return (uint8_t)data;
#else
  eeprom_buffer_fill();
 80007e4:	f000 f83e 	bl	8000864 <eeprom_buffer_fill>
  return eeprom_buffered_read_byte(pos);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 f817 	bl	800081c <eeprom_buffered_read_byte>
 80007ee:	4603      	mov	r3, r0
#endif /* _EEPROM_BASE */
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <eeprom_write_byte>:
  * @param  pos : address to write
  * @param  value : value to write
  * @retval none
  */
void eeprom_write_byte(uint32_t pos, uint8_t value)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
      HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, (pos + DATA_EEPROM_BASE), (uint32_t)value);
      HAL_FLASHEx_DATAEEPROM_Lock();
    }
  }
#else
  eeprom_buffered_write_byte(pos, value);
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	4619      	mov	r1, r3
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f817 	bl	800083c <eeprom_buffered_write_byte>
  eeprom_buffer_flush();
 800080e:	f000 f83b 	bl	8000888 <eeprom_buffer_flush>
#endif /* _EEPROM_BASE */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <eeprom_buffered_read_byte>:
  * @brief  Function reads a byte from the eeprom buffer
  * @param  pos : address to read
  * @retval byte : data read from eeprom
  */
uint8_t eeprom_buffered_read_byte(const uint32_t pos)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  return eeprom_buffer[pos];
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <eeprom_buffered_read_byte+0x1c>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	200001a8 	.word	0x200001a8

0800083c <eeprom_buffered_write_byte>:
  * @param  pos : address to write
  * @param  value : value to write
  * @retval none
  */
void eeprom_buffered_write_byte(uint32_t pos, uint8_t value)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
  eeprom_buffer[pos] = value;
 8000848:	4a05      	ldr	r2, [pc, #20]	; (8000860 <eeprom_buffered_write_byte+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	78fa      	ldrb	r2, [r7, #3]
 8000850:	701a      	strb	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	200001a8 	.word	0x200001a8

08000864 <eeprom_buffer_fill>:
  * @brief  This function copies the data from flash into the buffer
  * @param  none
  * @retval none
  */
void eeprom_buffer_fill(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  memcpy(eeprom_buffer, (uint8_t *)(FLASH_BASE_ADDRESS), E2END + 1);
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <eeprom_buffer_fill+0x1c>)
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <eeprom_buffer_fill+0x20>)
 800086c:	4610      	mov	r0, r2
 800086e:	4619      	mov	r1, r3
 8000870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000874:	461a      	mov	r2, r3
 8000876:	f015 f993 	bl	8015ba0 <memcpy>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001a8 	.word	0x200001a8
 8000884:	0807fe00 	.word	0x0807fe00

08000888 <eeprom_buffer_flush>:
  * @brief  This function writes the buffer content into the flash
  * @param  none
  * @retval none
  */
void eeprom_buffer_flush(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t offset = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t address = FLASH_BASE_ADDRESS;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <eeprom_buffer_flush+0x8c>)
 8000894:	623b      	str	r3, [r7, #32]
  uint32_t address_end = FLASH_BASE_ADDRESS + E2END;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <eeprom_buffer_flush+0x90>)
 8000898:	61fb      	str	r3, [r7, #28]
      }
    }
    HAL_FLASH_Lock();
  }
#else
  uint32_t SectorError = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
#if defined(STM32H7xx)
  uint64_t data[4] = {0x0000};
#else
  uint32_t data = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
#endif

  /* ERASING page */
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
#if defined(STM32H7xx)
  EraseInitStruct.Banks = FLASH_BANK_NUMBER;
#endif
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
  EraseInitStruct.Sector = FLASH_DATA_SECTOR;
 80008aa:	2307      	movs	r3, #7
 80008ac:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]

  HAL_FLASH_Unlock();
 80008b2:	f002 faed 	bl	8002e90 <HAL_FLASH_Unlock>

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK) {
 80008b6:	1d3a      	adds	r2, r7, #4
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fc58 	bl	8003174 <HAL_FLASHEx_Erase>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d11e      	bne.n	8000908 <eeprom_buffer_flush+0x80>
    while (address <= address_end) {
 80008ca:	e019      	b.n	8000900 <eeprom_buffer_flush+0x78>
      memcpy(&data, eeprom_buffer + offset, 8 * sizeof(uint32_t));
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, address, (uint32_t)data) == HAL_OK) {
        address += 32;
        offset += 32;
#else
      memcpy(&data, eeprom_buffer + offset, sizeof(uint32_t));
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <eeprom_buffer_flush+0x94>)
 80008d0:	4413      	add	r3, r2
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	603b      	str	r3, [r7, #0]
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) == HAL_OK) {
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	6a39      	ldr	r1, [r7, #32]
 80008e0:	2002      	movs	r0, #2
 80008e2:	f002 fa81 	bl	8002de8 <HAL_FLASH_Program>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d106      	bne.n	80008fa <eeprom_buffer_flush+0x72>
        address += 4;
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	3304      	adds	r3, #4
 80008f0:	623b      	str	r3, [r7, #32]
        offset += 4;
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	3304      	adds	r3, #4
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
 80008f8:	e002      	b.n	8000900 <eeprom_buffer_flush+0x78>
#endif
      } else {
        address = address_end + 1;
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3301      	adds	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
    while (address <= address_end) {
 8000900:	6a3a      	ldr	r2, [r7, #32]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	429a      	cmp	r2, r3
 8000906:	d9e1      	bls.n	80008cc <eeprom_buffer_flush+0x44>
      }
    }
  }
  HAL_FLASH_Lock();
 8000908:	f002 fae4 	bl	8002ed4 <HAL_FLASH_Lock>
#endif
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	0807fe00 	.word	0x0807fe00
 8000918:	0807ffff 	.word	0x0807ffff
 800091c:	200001a8 	.word	0x200001a8

08000920 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <_ZN5PrintC1Ev+0x24>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	08016d24 	.word	0x08016d24

08000948 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ffe4 	bl	8000920 <_ZN5PrintC1Ev>
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <_ZN6StreamC1Ev+0x28>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	08016ebc 	.word	0x08016ebc

08000974 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ffe1 	bl	8000948 <_ZN6StreamC1Ev>
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	611a      	str	r2, [r3, #16]
	};
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	08016d34 	.word	0x08016d34

080009a0 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <_ZN2P910SetDirReadEv+0x24>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <_ZN2P910SetDirReadEv+0x24>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <_ZN2P910SetDirReadEv+0x24>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	4903      	ldr	r1, [pc, #12]	; (80009c4 <_ZN2P910SetDirReadEv+0x24>)
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <_ZN2P910SetDirReadEv+0x28>)
 80009ba:	f002 fcfd 	bl	80033b8 <HAL_GPIO_Init>
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200003a8 	.word	0x200003a8
 80009c8:	40020800 	.word	0x40020800

080009cc <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	2201      	movs	r2, #1
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <_ZN3P103SetEv+0x14>)
 80009d6:	f002 fe9b 	bl	8003710 <HAL_GPIO_WritePin>
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40020400 	.word	0x40020400

080009e4 <_ZN3P105ClearEv>:
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	2200      	movs	r2, #0
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <_ZN3P105ClearEv+0x14>)
 80009ee:	f002 fe8f 	bl	8003710 <HAL_GPIO_WritePin>
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40020400 	.word	0x40020400

080009fc <_ZN3P1011SetDirWriteEv>:
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <_ZN3P1011SetDirWriteEv+0x28>)
 8000a02:	2240      	movs	r2, #64	; 0x40
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <_ZN3P1011SetDirWriteEv+0x28>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <_ZN3P1011SetDirWriteEv+0x28>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <_ZN3P1011SetDirWriteEv+0x28>)
 8000a14:	2203      	movs	r2, #3
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	4902      	ldr	r1, [pc, #8]	; (8000a24 <_ZN3P1011SetDirWriteEv+0x28>)
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <_ZN3P1011SetDirWriteEv+0x2c>)
 8000a1c:	f002 fccc 	bl	80033b8 <HAL_GPIO_Init>
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200003bc 	.word	0x200003bc
 8000a28:	40020400 	.word	0x40020400

08000a2c <_ZN3BTD11pairWithHIDEv>:

        /** True if an Xbox One S Controller is Connecting. */
        bool incomingXboxOneS;
 
        /** Call this function to pair with a HID device */
        void pairWithHID() {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2206      	movs	r2, #6
 8000a46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
        };
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d004      	beq.n	8000a70 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ffde 	bl	8000a2c <_ZN3BTD11pairWithHIDEv>
        };
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	4798      	blx	r3
                OnInitBTHID();
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	331c      	adds	r3, #28
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	4798      	blx	r3
        };
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8000aa2:	b480      	push	{r7}
 8000aa4:	b085      	sub	sp, #20
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	72fb      	strb	r3, [r7, #11]
                return;
 8000ab0:	bf00      	nop
        }
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_ZN9PS4ParserC1Ev+0x20>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
                Reset();
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f012 fee8 	bl	80138a0 <_ZN9PS4Parser5ResetEv>
        };
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08016eb0 	.word	0x08016eb0

08000ae0 <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 f81c 	bl	8000b2a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	2b20      	cmp	r3, #32
 8000b0a:	d105      	bne.n	8000b18 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 8000b0c:	22ff      	movs	r2, #255	; 0xff
 8000b0e:	2100      	movs	r1, #0
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 f80a 	bl	8000b2a <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000b16:	e004      	b.n	8000b22 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	21ff      	movs	r1, #255	; 0xff
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 f804 	bl	8000b2a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	70fb      	strb	r3, [r7, #3]
 8000b36:	4613      	mov	r3, r2
 8000b38:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	78fa      	ldrb	r2, [r7, #3]
 8000b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	78ba      	ldrb	r2, [r7, #2]
 8000b46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	4608      	mov	r0, r1
 8000b68:	4611      	mov	r1, r2
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	70fb      	strb	r3, [r7, #3]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70bb      	strb	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	78fa      	ldrb	r2, [r7, #3]
 8000b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	78ba      	ldrb	r2, [r7, #2]
 8000b84:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	787a      	ldrb	r2, [r7, #1]
 8000b8c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2201      	movs	r2, #1
 8000b94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	141b      	asrs	r3, r3, #16
 8000bb2:	b2d9      	uxtb	r1, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	121b      	asrs	r3, r3, #8
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffcd 	bl	8000b5e <_ZN9PS4Parser6setLedEhhh>
        };
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	f011 fb90 	bl	8012308 <_ZN5BTHIDC1EP3BTDbPKc>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3378      	adds	r3, #120	; 0x78
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff65 	bl	8000abc <_ZN9PS4ParserC1Ev>
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3378      	adds	r3, #120	; 0x78
 8000c02:	4618      	mov	r0, r3
 8000c04:	f012 fe4c 	bl	80138a0 <_ZN9PS4Parser5ResetEv>
        };
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	08016e74 	.word	0x08016e74
 8000c18:	08016ea4 	.word	0x08016ea4

08000c1c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	72fb      	strb	r3, [r7, #11]
                if(incomingPSController_global)
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <_ZN5PS4BT14ParseBTHIDDataEhPh+0x2c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d006      	beq.n	8000c58 <_ZN5PS4BT14ParseBTHIDDataEhPh+0x24>
                PS4Parser::Parse(len, buf);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	3378      	adds	r3, #120	; 0x78
 8000c4e:	7af9      	ldrb	r1, [r7, #11]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f012 fd4a 	bl	80136ec <_ZN9PS4Parser5ParseEhPh>
        };
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200003d0 	.word	0x200003d0

08000c64 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3378      	adds	r3, #120	; 0x78
 8000c70:	4618      	mov	r0, r3
 8000c72:	f012 fe15 	bl	80138a0 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 f855 	bl	8000d26 <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d105      	bne.n	8000c90 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3378      	adds	r3, #120	; 0x78
 8000c88:	21ff      	movs	r1, #255	; 0xff
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff8a 	bl	8000ba4 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3378      	adds	r3, #120	; 0x78
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f012 fdfb 	bl	80138a0 <_ZN9PS4Parser5ResetEv>
        };
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b096      	sub	sp, #88	; 0x58
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]

                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	224f      	movs	r2, #79	; 0x4f
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f014 ff79 	bl	8015bbc <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000cca:	2352      	movs	r3, #82	; 0x52
 8000ccc:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000cce:	2311      	movs	r3, #17
 8000cd0:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000cd6:	23ff      	movs	r3, #255	; 0xff
 8000cd8:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	785b      	ldrb	r3, [r3, #1]
 8000cde:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	789b      	ldrb	r3, [r3, #2]
 8000cea:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	78db      	ldrb	r3, [r3, #3]
 8000cf0:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	791b      	ldrb	r3, [r3, #4]
 8000cf6:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	795b      	ldrb	r3, [r3, #5]
 8000cfc:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	799b      	ldrb	r3, [r3, #6]
 8000d02:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2200      	movs	r2, #0
 8000d08:	71da      	strb	r2, [r3, #7]
                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	224f      	movs	r2, #79	; 0x4f
 8000d10:	4619      	mov	r1, r3
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f81a 	bl	8000d4c <_ZN5PS4BT11HID_CommandEPhh>

        };
 8000d18:	bf00      	nop
 8000d1a:	3758      	adds	r7, #88	; 0x58
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000d20:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000d24:	e7c5      	b.n	8000cb2 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000d26 <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000d2e:	2343      	movs	r3, #67	; 0x43
 8000d30:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000d32:	2302      	movs	r3, #2
 8000d34:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f000 f804 	bl	8000d4c <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	4613      	mov	r3, r2
 8000d58:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6898      	ldr	r0, [r3, #8]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	8999      	ldrh	r1, [r3, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	7d9b      	ldrb	r3, [r3, #22]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	7dd2      	ldrb	r2, [r2, #23]
 8000d6a:	79fc      	ldrb	r4, [r7, #7]
 8000d6c:	9201      	str	r2, [sp, #4]
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	4623      	mov	r3, r4
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f010 fb02 	bl	801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd90      	pop	{r4, r7, pc}

08000d80 <_ZN14XBOXONESParserC1Ev>:

/** This class parses all the data sent by the Xbox One S controller */
class XBOXONESParser {
public:
        /** Constructor for the XBOXONESParser class. */
        XBOXONESParser() {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <_ZN14XBOXONESParserC1Ev+0x20>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	601a      	str	r2, [r3, #0]
                Reset();
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f014 fcf2 	bl	8015778 <_ZN14XBOXONESParser5ResetEv>
        };
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	08016e68 	.word	0x08016e68

08000da4 <_ZN10XBOXONESBTC1EP3BTDb>:
        /**
         * Constructor for the XBOXONESBT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         */
        XBOXONESBT(BTD *p, bool pair = false) :
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	4613      	mov	r3, r2
 8000db0:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair) {
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	79fa      	ldrb	r2, [r7, #7]
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <_ZN10XBOXONESBTC1EP3BTDb+0x50>)
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	f011 faa5 	bl	8012308 <_ZN5BTHIDC1EP3BTDbPKc>
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3378      	adds	r3, #120	; 0x78
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ffdc 	bl	8000d80 <_ZN14XBOXONESParserC1Ev>
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <_ZN10XBOXONESBTC1EP3BTDb+0x54>)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <_ZN10XBOXONESBTC1EP3BTDb+0x58>)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	679a      	str	r2, [r3, #120]	; 0x78
                XBOXONESParser::Reset();
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3378      	adds	r3, #120	; 0x78
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f014 fccd 	bl	8015778 <_ZN14XBOXONESParser5ResetEv>
                pBtd->useSimplePairing = true; // The Xbox One S controller only works via simple pairing
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        };
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	08015c90 	.word	0x08015c90
 8000df8:	08016e2c 	.word	0x08016e2c
 8000dfc:	08016e5c 	.word	0x08016e5c

08000e00 <_ZN10XBOXONESBT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	72fb      	strb	r3, [r7, #11]

                XBOXONESParser::Parse(len, buf);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3378      	adds	r3, #120	; 0x78
 8000e12:	7af9      	ldrb	r1, [r7, #11]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f014 fbb8 	bl	801558c <_ZN14XBOXONESParser5ParseEhPh>

        };
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_ZN10XBOXONESBT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
                XBOXONESParser::Reset();
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3378      	adds	r3, #120	; 0x78
 8000e30:	4618      	mov	r0, r3
 8000e32:	f014 fca1 	bl	8015778 <_ZN14XBOXONESParser5ResetEv>
        };
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_ZN10XBOXONESBT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
                XBOXONESParser::Reset();
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3378      	adds	r3, #120	; 0x78
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f014 fc94 	bl	8015778 <_ZN14XBOXONESParser5ResetEv>
        };
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_ZN10XBOXONESBT16sendOutputReportEPhh>:
        /**@}*/

        /** @name XBOXONESParser implementation */
        virtual void sendOutputReport(uint8_t *data, uint8_t nbytes) {
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	4613      	mov	r3, r2
 8000e64:	71fb      	strb	r3, [r7, #7]
                buf[0] = 0xA2; // HID BT DATA (0xA0) | Report Type (Output 0x02)
                buf[1] = 0x03; // Report ID
                memcpy(buf + 2, data, nbytes);

                // Send the Bluetooth DATA output report on the interrupt channel
                pBtd->L2CAP_Command(hci_handle, buf, sizeof(buf), interrupt_scid[0], interrupt_scid[1]);
 8000e66:	466b      	mov	r3, sp
 8000e68:	461e      	mov	r6, r3
                uint8_t buf[nbytes + 2];
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	1c5c      	adds	r4, r3, #1
 8000e6e:	617c      	str	r4, [r7, #20]
 8000e70:	4623      	mov	r3, r4
 8000e72:	3301      	adds	r3, #1
 8000e74:	4618      	mov	r0, r3
 8000e76:	f04f 0100 	mov.w	r1, #0
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	00cb      	lsls	r3, r1, #3
 8000e84:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e88:	00c2      	lsls	r2, r0, #3
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f04f 0100 	mov.w	r1, #0
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	00cb      	lsls	r3, r1, #3
 8000e9e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ea2:	00c2      	lsls	r2, r0, #3
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	3307      	adds	r3, #7
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	ebad 0d03 	sub.w	sp, sp, r3
 8000eb2:	ab02      	add	r3, sp, #8
 8000eb4:	3300      	adds	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
                buf[0] = 0xA2; // HID BT DATA (0xA0) | Report Type (Output 0x02)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	22a2      	movs	r2, #162	; 0xa2
 8000ebc:	701a      	strb	r2, [r3, #0]
                buf[1] = 0x03; // Report ID
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	705a      	strb	r2, [r3, #1]
                memcpy(buf + 2, data, nbytes);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f014 fe67 	bl	8015ba0 <memcpy>
                pBtd->L2CAP_Command(hci_handle, buf, sizeof(buf), interrupt_scid[0], interrupt_scid[1]);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6898      	ldr	r0, [r3, #8]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	8999      	ldrh	r1, [r3, #12]
 8000eda:	693d      	ldr	r5, [r7, #16]
 8000edc:	b2e3      	uxtb	r3, r4
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2dc      	uxtb	r4, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	7e1b      	ldrb	r3, [r3, #24]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	7e52      	ldrb	r2, [r2, #25]
 8000eea:	9201      	str	r2, [sp, #4]
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	4623      	mov	r3, r4
 8000ef0:	462a      	mov	r2, r5
 8000ef2:	f010 fa43 	bl	801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>
 8000ef6:	46b5      	mov	sp, r6
        };
 8000ef8:	bf00      	nop
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f00 <_ZThn120_N10XBOXONESBT16sendOutputReportEPhh>:
        virtual void sendOutputReport(uint8_t *data, uint8_t nbytes) {
 8000f00:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000f04:	e7a8      	b.n	8000e58 <_ZN10XBOXONESBT16sendOutputReportEPhh>
	...

08000f08 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
    {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0c:	f001 fe24 	bl	8002b58 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f8e6 	bl	80010e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f000 fa44 	bl	80013a0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000f18:	f000 fa14 	bl	8001344 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000f1c:	f000 f9d6 	bl	80012cc <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000f20:	f00c fdec 	bl	800dafc <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000f24:	f000 f974 	bl	8001210 <_ZL13MX_TIM14_Initv>
  MX_I2C1_Init();
 8000f28:	f000 f99c 	bl	8001264 <_ZL12MX_I2C1_Initv>

  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* For the USB Host Shield Library*/
  SPI_Handle = hspi1;
 8000f2c:	4a4a      	ldr	r2, [pc, #296]	; (8001058 <main+0x150>)
 8000f2e:	4b4b      	ldr	r3, [pc, #300]	; (800105c <main+0x154>)
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	2358      	movs	r3, #88	; 0x58
 8000f36:	461a      	mov	r2, r3
 8000f38:	f014 fe32 	bl	8015ba0 <memcpy>
  UART_Handle = huart2;
 8000f3c:	4a48      	ldr	r2, [pc, #288]	; (8001060 <main+0x158>)
 8000f3e:	4b49      	ldr	r3, [pc, #292]	; (8001064 <main+0x15c>)
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	2344      	movs	r3, #68	; 0x44
 8000f46:	461a      	mov	r2, r3
 8000f48:	f014 fe2a 	bl	8015ba0 <memcpy>
  //ssd1306_TestFPS();
  /* The Primary Timer, since using freeRTOS, not using systick */
  HAL_TIM_Base_Start_IT(&htim14);
 8000f4c:	4846      	ldr	r0, [pc, #280]	; (8001068 <main+0x160>)
 8000f4e:	f006 f8c9 	bl	80070e4 <HAL_TIM_Base_Start_IT>

  /* Verify our CPU Frequency
   * We should get a 500ms delay here */
  Serial.print(F("\r\nCPU Frequency is: "));
 8000f52:	4946      	ldr	r1, [pc, #280]	; (800106c <main+0x164>)
 8000f54:	4846      	ldr	r0, [pc, #280]	; (8001070 <main+0x168>)
 8000f56:	f7ff fb21 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq() / 1000000;
 8000f5a:	f004 faeb 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a44      	ldr	r2, [pc, #272]	; (8001074 <main+0x16c>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	0c9b      	lsrs	r3, r3, #18
 8000f68:	4a43      	ldr	r2, [pc, #268]	; (8001078 <main+0x170>)
 8000f6a:	6013      	str	r3, [r2, #0]
  Serial.print((int) cpu_freq);
 8000f6c:	4b42      	ldr	r3, [pc, #264]	; (8001078 <main+0x170>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	220a      	movs	r2, #10
 8000f72:	4619      	mov	r1, r3
 8000f74:	483e      	ldr	r0, [pc, #248]	; (8001070 <main+0x168>)
 8000f76:	f7ff fb3f 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print("MHz");
 8000f7a:	4940      	ldr	r1, [pc, #256]	; (800107c <main+0x174>)
 8000f7c:	483c      	ldr	r0, [pc, #240]	; (8001070 <main+0x168>)
 8000f7e:	f7ff fb1b 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000f82:	493f      	ldr	r1, [pc, #252]	; (8001080 <main+0x178>)
 8000f84:	483a      	ldr	r0, [pc, #232]	; (8001070 <main+0x168>)
 8000f86:	f7ff fb17 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <main+0x160>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b3c      	ldr	r3, [pc, #240]	; (8001084 <main+0x17c>)
 8000f94:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500);
 8000f96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f9a:	f001 fe1f 	bl	8002bdc <HAL_Delay>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <main+0x160>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <main+0x17c>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <main+0x17c>)
 8000fb0:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000fb2:	4935      	ldr	r1, [pc, #212]	; (8001088 <main+0x180>)
 8000fb4:	482e      	ldr	r0, [pc, #184]	; (8001070 <main+0x168>)
 8000fb6:	f7ff faff 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int) timer_val / 10);
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <main+0x17c>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	4a33      	ldr	r2, [pc, #204]	; (800108c <main+0x184>)
 8000fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc4:	08db      	lsrs	r3, r3, #3
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	220a      	movs	r2, #10
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4828      	ldr	r0, [pc, #160]	; (8001070 <main+0x168>)
 8000fce:	f7ff fb13 	bl	80005f8 <_ZN5Print5printEii>
  Serial.print(" ms");
 8000fd2:	492f      	ldr	r1, [pc, #188]	; (8001090 <main+0x188>)
 8000fd4:	4826      	ldr	r0, [pc, #152]	; (8001070 <main+0x168>)
 8000fd6:	f7ff faef 	bl	80005b8 <_ZN5Print5printEPKc>

//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;
  Serial.print((int) hal_gettick);
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <main+0x18c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	220a      	movs	r2, #10
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4823      	ldr	r0, [pc, #140]	; (8001070 <main+0x168>)
 8000fe4:	f7ff fb08 	bl	80005f8 <_ZN5Print5printEii>

  /* USER CODE END 2 */
  /* Init scheduler */

  ssd1306_Init();
 8000fe8:	f008 f9be 	bl	8009368 <ssd1306_Init>
  osKernelInitialize();
 8000fec:	f00a f834 	bl	800b058 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000ff0:	4a29      	ldr	r2, [pc, #164]	; (8001098 <main+0x190>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4829      	ldr	r0, [pc, #164]	; (800109c <main+0x194>)
 8000ff6:	f00a f879 	bl	800b0ec <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <main+0x198>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8001000:	4a28      	ldr	r2, [pc, #160]	; (80010a4 <main+0x19c>)
 8001002:	2100      	movs	r1, #0
 8001004:	4828      	ldr	r0, [pc, #160]	; (80010a8 <main+0x1a0>)
 8001006:	f00a f871 	bl	800b0ec <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <main+0x1a4>)
 800100e:	6013      	str	r3, [r2, #0]

  /* creation of controllerJoin */
  controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 8001010:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <main+0x1a8>)
 8001012:	2100      	movs	r1, #0
 8001014:	4827      	ldr	r0, [pc, #156]	; (80010b4 <main+0x1ac>)
 8001016:	f00a f869 	bl	800b0ec <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <main+0x1b0>)
 800101e:	6013      	str	r3, [r2, #0]

  /* creation of buttonPress */
  buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 8001020:	4a26      	ldr	r2, [pc, #152]	; (80010bc <main+0x1b4>)
 8001022:	2100      	movs	r1, #0
 8001024:	4826      	ldr	r0, [pc, #152]	; (80010c0 <main+0x1b8>)
 8001026:	f00a f861 	bl	800b0ec <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a25      	ldr	r2, [pc, #148]	; (80010c4 <main+0x1bc>)
 800102e:	6013      	str	r3, [r2, #0]

  /* creation of updateLCD */
  updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 8001030:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <main+0x1c0>)
 8001032:	2100      	movs	r1, #0
 8001034:	4825      	ldr	r0, [pc, #148]	; (80010cc <main+0x1c4>)
 8001036:	f00a f859 	bl	800b0ec <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <main+0x1c8>)
 800103e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* creation of getLatencies, Used to Meaesure latencies of tasks*/
  getLatencies = osThreadNew(StartGetLatencies, NULL, &getLatencies_attributes);
 8001040:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <main+0x1cc>)
 8001042:	2100      	movs	r1, #0
 8001044:	4824      	ldr	r0, [pc, #144]	; (80010d8 <main+0x1d0>)
 8001046:	f00a f851 	bl	800b0ec <osThreadNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a23      	ldr	r2, [pc, #140]	; (80010dc <main+0x1d4>)
 800104e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001050:	f00a f826 	bl	800b0a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001054:	e7fe      	b.n	8001054 <main+0x14c>
 8001056:	bf00      	nop
 8001058:	2000052c 	.word	0x2000052c
 800105c:	20000430 	.word	0x20000430
 8001060:	20000584 	.word	0x20000584
 8001064:	20000488 	.word	0x20000488
 8001068:	200004cc 	.word	0x200004cc
 800106c:	08015ce0 	.word	0x08015ce0
 8001070:	200005c8 	.word	0x200005c8
 8001074:	431bde83 	.word	0x431bde83
 8001078:	20000934 	.word	0x20000934
 800107c:	08015cf8 	.word	0x08015cf8
 8001080:	08015cfc 	.word	0x08015cfc
 8001084:	20000938 	.word	0x20000938
 8001088:	08015d04 	.word	0x08015d04
 800108c:	cccccccd 	.word	0xcccccccd
 8001090:	08015d18 	.word	0x08015d18
 8001094:	2000093c 	.word	0x2000093c
 8001098:	08016d4c 	.word	0x08016d4c
 800109c:	080015c9 	.word	0x080015c9
 80010a0:	20000514 	.word	0x20000514
 80010a4:	08016d70 	.word	0x08016d70
 80010a8:	08002059 	.word	0x08002059
 80010ac:	20000518 	.word	0x20000518
 80010b0:	08016d94 	.word	0x08016d94
 80010b4:	080020a9 	.word	0x080020a9
 80010b8:	2000051c 	.word	0x2000051c
 80010bc:	08016db8 	.word	0x08016db8
 80010c0:	08002101 	.word	0x08002101
 80010c4:	20000520 	.word	0x20000520
 80010c8:	08016ddc 	.word	0x08016ddc
 80010cc:	080021ad 	.word	0x080021ad
 80010d0:	20000524 	.word	0x20000524
 80010d4:	08016e00 	.word	0x08016e00
 80010d8:	08001565 	.word	0x08001565
 80010dc:	20000528 	.word	0x20000528

080010e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
    {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0ac      	sub	sp, #176	; 0xb0
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010ea:	2234      	movs	r2, #52	; 0x34
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f014 fd64 	bl	8015bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	225c      	movs	r2, #92	; 0x5c
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f014 fd55 	bl	8015bbc <memset>

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <SystemClock_Config+0x128>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a3b      	ldr	r2, [pc, #236]	; (8001208 <SystemClock_Config+0x128>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b39      	ldr	r3, [pc, #228]	; (8001208 <SystemClock_Config+0x128>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b36      	ldr	r3, [pc, #216]	; (800120c <SystemClock_Config+0x12c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a35      	ldr	r2, [pc, #212]	; (800120c <SystemClock_Config+0x12c>)
 8001138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <SystemClock_Config+0x12c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114a:	2301      	movs	r3, #1
 800114c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001164:	2304      	movs	r3, #4
 8001166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800116a:	23a8      	movs	r3, #168	; 0xa8
 800116c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001176:	2307      	movs	r3, #7
 8001178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001182:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001186:	4618      	mov	r0, r3
 8001188:	f004 ff16 	bl	8005fb8 <HAL_RCC_OscConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	bf14      	ite	ne
 8001192:	2301      	movne	r3, #1
 8001194:	2300      	moveq	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xc0>
      {
    Error_Handler();
 800119c:	f001 f93a 	bl	8002414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	66bb      	str	r3, [r7, #104]	; 0x68
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2302      	movs	r3, #2
 80011a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011bc:	2105      	movs	r1, #5
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 f8d2 	bl	8005368 <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bf14      	ite	ne
 80011ca:	2301      	movne	r3, #1
 80011cc:	2300      	moveq	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0xf8>
      {
    Error_Handler();
 80011d4:	f001 f91e 	bl	8002414 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80011de:	2300      	movs	r3, #0
 80011e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4618      	mov	r0, r3
 80011e8:	f004 fa0a 	bl	8005600 <HAL_RCCEx_PeriphCLKConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bf14      	ite	ne
 80011f2:	2301      	movne	r3, #1
 80011f4:	2300      	moveq	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x120>
      {
    Error_Handler();
 80011fc:	f001 f90a 	bl	8002414 <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	37b0      	adds	r7, #176	; 0xb0
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <_ZL13MX_TIM14_Initv>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
    {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <_ZL13MX_TIM14_Initv+0x4c>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <_ZL13MX_TIM14_Initv+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168 / 2) * 100 - 1;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <_ZL13MX_TIM14_Initv+0x4c>)
 800121c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001220:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <_ZL13MX_TIM14_Initv+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000 - 1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <_ZL13MX_TIM14_Initv+0x4c>)
 800122a:	f242 720f 	movw	r2, #9999	; 0x270f
 800122e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <_ZL13MX_TIM14_Initv+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <_ZL13MX_TIM14_Initv+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <_ZL13MX_TIM14_Initv+0x4c>)
 800123e:	f005 ff01 	bl	8007044 <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <_ZL13MX_TIM14_Initv+0x46>
      {
    Error_Handler();
 8001252:	f001 f8df 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200004cc 	.word	0x200004cc
 8001260:	40002000 	.word	0x40002000

08001264 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
    {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800126a:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <_ZL12MX_I2C1_Initv+0x60>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001270:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <_ZL12MX_I2C1_Initv+0x64>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <_ZL12MX_I2C1_Initv+0x5c>)
 80012a2:	f002 fa4f 	bl	8003744 <HAL_I2C_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf14      	ite	ne
 80012ac:	2301      	movne	r3, #1
 80012ae:	2300      	moveq	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <_ZL12MX_I2C1_Initv+0x56>
      {
    Error_Handler();
 80012b6:	f001 f8ad 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200003dc 	.word	0x200003dc
 80012c4:	40005400 	.word	0x40005400
 80012c8:	000186a0 	.word	0x000186a0

080012cc <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
    {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <_ZL12MX_SPI1_Initv+0x74>)
 80012d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 80012d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 80012f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 8001300:	2218      	movs	r2, #24
 8001302:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 8001312:	2200      	movs	r2, #0
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 8001318:	220a      	movs	r2, #10
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <_ZL12MX_SPI1_Initv+0x70>)
 800131e:	f005 f8e9 	bl	80064f4 <HAL_SPI_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <_ZL12MX_SPI1_Initv+0x6a>
      {
    Error_Handler();
 8001332:	f001 f86f 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000430 	.word	0x20000430
 8001340:	40013000 	.word	0x40013000

08001344 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
    {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <_ZL19MX_USART2_UART_Initv+0x54>)
 800134a:	4a14      	ldr	r2, [pc, #80]	; (800139c <_ZL19MX_USART2_UART_Initv+0x58>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <_ZL19MX_USART2_UART_Initv+0x54>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <_ZL19MX_USART2_UART_Initv+0x54>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137a:	4807      	ldr	r0, [pc, #28]	; (8001398 <_ZL19MX_USART2_UART_Initv+0x54>)
 800137c:	f006 f906 	bl	800758c <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	bf14      	ite	ne
 8001386:	2301      	movne	r3, #1
 8001388:	2300      	moveq	r3, #0
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <_ZL19MX_USART2_UART_Initv+0x50>
      {
    Error_Handler();
 8001390:	f001 f840 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000488 	.word	0x20000488
 800139c:	40004400 	.word	0x40004400

080013a0 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
    {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b36      	ldr	r3, [pc, #216]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a35      	ldr	r2, [pc, #212]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a2e      	ldr	r2, [pc, #184]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 80013dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a27      	ldr	r2, [pc, #156]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <_ZL12MX_GPIO_Initv+0xf4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <_ZL12MX_GPIO_Initv+0xf8>)
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4818      	ldr	r0, [pc, #96]	; (800149c <_ZL12MX_GPIO_Initv+0xfc>)
 800143c:	f001 ffbc 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144a:	2301      	movs	r3, #1
 800144c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4812      	ldr	r0, [pc, #72]	; (80014a0 <_ZL12MX_GPIO_Initv+0x100>)
 8001456:	f001 ffaf 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800145a:	2310      	movs	r3, #16
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001462:	2301      	movs	r3, #1
 8001464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <_ZL12MX_GPIO_Initv+0x104>)
 800146e:	f001 ffa3 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <_ZL12MX_GPIO_Initv+0x104>)
 8001488:	f001 ff96 	bl	80033b8 <HAL_GPIO_Init>
}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	10210000 	.word	0x10210000
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400

080014a8 <_Z23ProcessKeyCodeInContexth>:

/* USER CODE BEGIN 4 */
void ProcessKeyCodeInContext(uint8_t keyCode)
    {
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  /*Updates the display_no
   * We could also just call display funcitons directly here, but since we have extra processing speed
   * Let's play with freeRTOS */
  if (display_no == 0) { /* This is the status screen, show if controller or not connected */
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10d      	bne.n	80014d6 <_Z23ProcessKeyCodeInContexth+0x2e>
    if (keyCode == BACK_BTN)
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d103      	bne.n	80014c8 <_Z23ProcessKeyCodeInContexth+0x20>
      display_no = 1;
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
 80014c6:	e01e      	b.n	8001506 <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d11b      	bne.n	8001506 <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 1;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	e017      	b.n	8001506 <_Z23ProcessKeyCodeInContexth+0x5e>
  } else if (display_no == 1) { /* Pair Controller Screen */
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d113      	bne.n	8001506 <_Z23ProcessKeyCodeInContexth+0x5e>
    if (keyCode == BACK_BTN)
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d103      	bne.n	80014ec <_Z23ProcessKeyCodeInContexth+0x44>
      display_no = 0;
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e00c      	b.n	8001506 <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d103      	bne.n	80014fa <_Z23ProcessKeyCodeInContexth+0x52>
      display_no = 0;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <_Z23ProcessKeyCodeInContexth+0x78>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	e005      	b.n	8001506 <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == SELECT_BTN) {
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b05      	cmp	r3, #5
 80014fe:	d102      	bne.n	8001506 <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 7; /* Only get to the pair status screen from here */
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <_Z23ProcessKeyCodeInContexth+0x78>)
 8001502:	2207      	movs	r2, #7
 8001504:	701a      	strb	r2, [r3, #0]
  } else if (display_no == 2) {

  }
//  Serial.print("\r\nDisplay no is: ");
//  Serial.print(display_no);
  display_run_once = 0;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <_Z23ProcessKeyCodeInContexth+0x7c>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
  display_force_update = 1;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <_Z23ProcessKeyCodeInContexth+0x80>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000940 	.word	0x20000940
 8001524:	20000944 	.word	0x20000944
 8001528:	20000943 	.word	0x20000943

0800152c <_Z3maplllll>:
//From wiring project
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	69b9      	ldr	r1, [r7, #24]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	1a8a      	subs	r2, r1, r2
 8001546:	fb02 f203 	mul.w	r2, r2, r3
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1acb      	subs	r3, r1, r3
 8001550:	fb92 f2f3 	sdiv	r2, r2, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4413      	add	r3, r2
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_Z17StartGetLatenciesPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartGetLatencies(void *argument)
    {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetLatencies */
  /* Infinite loop */
  for (;;)
      {
#if rtos_delay_view //this is just used to measure the delay of StartGetBT task
    if (timer_val_getBT >= 7) {
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_Z17StartGetLatenciesPv+0x50>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	2b06      	cmp	r3, #6
 8001572:	d90a      	bls.n	800158a <_Z17StartGetLatenciesPv+0x26>
      Serial.print("\r\nWarning High CPU/BT Latency, getBT latency is: ");
 8001574:	4910      	ldr	r1, [pc, #64]	; (80015b8 <_Z17StartGetLatenciesPv+0x54>)
 8001576:	4811      	ldr	r0, [pc, #68]	; (80015bc <_Z17StartGetLatenciesPv+0x58>)
 8001578:	f7ff f81e 	bl	80005b8 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getBT);
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <_Z17StartGetLatenciesPv+0x50>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	220a      	movs	r2, #10
 8001582:	4619      	mov	r1, r3
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <_Z17StartGetLatenciesPv+0x58>)
 8001586:	f7ff f837 	bl	80005f8 <_ZN5Print5printEii>
    }
    if (timer_val_getUSB >= 4) {
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <_Z17StartGetLatenciesPv+0x5c>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d90a      	bls.n	80015a8 <_Z17StartGetLatenciesPv+0x44>
      Serial.print("\r\nWarning High CPU/USB Latency, getUSB latency is: ");
 8001592:	490c      	ldr	r1, [pc, #48]	; (80015c4 <_Z17StartGetLatenciesPv+0x60>)
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <_Z17StartGetLatenciesPv+0x58>)
 8001596:	f7ff f80f 	bl	80005b8 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getUSB);
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <_Z17StartGetLatenciesPv+0x5c>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	220a      	movs	r2, #10
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <_Z17StartGetLatenciesPv+0x58>)
 80015a4:	f7ff f828 	bl	80005f8 <_ZN5Print5printEii>
    //Serial.print(" ");
//    Serial.print(rumble_brequest_sent);
    //Serial.print("\r\nController Idle Time: ");
//    Serial.print(button_press_idle);
#endif
    osDelay(1000);
 80015a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ac:	f009 fe30 	bl	800b210 <osDelay>
    if (timer_val_getBT >= 7) {
 80015b0:	e7dc      	b.n	800156c <_Z17StartGetLatenciesPv+0x8>
 80015b2:	bf00      	nop
 80015b4:	20000946 	.word	0x20000946
 80015b8:	08015d1c 	.word	0x08015d1c
 80015bc:	200005c8 	.word	0x200005c8
 80015c0:	20000948 	.word	0x20000948
 80015c4:	08015d50 	.word	0x08015d50

080015c8 <_Z10StartGetBTPv>:
  /* USER CODE END StartGetLatencies */
}
/* USER CODE END 4 */

void StartGetBT(void *argument)
    {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 80015d0:	48ad      	ldr	r0, [pc, #692]	; (8001888 <_Z10StartGetBTPv+0x2c0>)
 80015d2:	f000 ff2d 	bl	8002430 <_ZN8MAX3421eI3P102P9E4InitEv>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	bf0c      	ite	eq
 80015de:	2301      	moveq	r3, #1
 80015e0:	2300      	movne	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d004      	beq.n	80015f2 <_Z10StartGetBTPv+0x2a>
    Serial.print(F("\r\nOSC did not start"));
 80015e8:	49a8      	ldr	r1, [pc, #672]	; (800188c <_Z10StartGetBTPv+0x2c4>)
 80015ea:	48a9      	ldr	r0, [pc, #676]	; (8001890 <_Z10StartGetBTPv+0x2c8>)
 80015ec:	f7fe ffd6 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
    while (1)
 80015f0:	e7fe      	b.n	80015f0 <_Z10StartGetBTPv+0x28>
      ; // Halt
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 80015f2:	49a8      	ldr	r1, [pc, #672]	; (8001894 <_Z10StartGetBTPv+0x2cc>)
 80015f4:	48a6      	ldr	r0, [pc, #664]	; (8001890 <_Z10StartGetBTPv+0x2c8>)
 80015f6:	f7fe ffd1 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 80015fa:	4ba7      	ldr	r3, [pc, #668]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 8001600:	4ba5      	ldr	r3, [pc, #660]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 8001602:	2200      	movs	r2, #0
 8001604:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 8001606:	4ba4      	ldr	r3, [pc, #656]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 8001608:	2200      	movs	r2, #0
 800160a:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 800160c:	4ba2      	ldr	r3, [pc, #648]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 800160e:	2200      	movs	r2, #0
 8001610:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 8001612:	4ba1      	ldr	r3, [pc, #644]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 8001618:	4b9f      	ldr	r3, [pc, #636]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 800161a:	2200      	movs	r2, #0
 800161c:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 800161e:	4a9e      	ldr	r2, [pc, #632]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 8001620:	7993      	ldrb	r3, [r2, #6]
 8001622:	f36f 0300 	bfc	r3, #0, #1
 8001626:	7193      	strb	r3, [r2, #6]

  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 8001628:	4b9c      	ldr	r3, [pc, #624]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 800162e:	4b9b      	ldr	r3, [pc, #620]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001630:	2214      	movs	r2, #20
 8001632:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 8001634:	4b99      	ldr	r3, [pc, #612]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001636:	2200      	movs	r2, #0
 8001638:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 800163a:	4b98      	ldr	r3, [pc, #608]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 800163c:	2200      	movs	r2, #0
 800163e:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 8001640:	4b96      	ldr	r3, [pc, #600]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001642:	2200      	movs	r2, #0
 8001644:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001648:	2200      	movs	r2, #0
 800164a:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 800164c:	4b93      	ldr	r3, [pc, #588]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 800164e:	2200      	movs	r2, #0
 8001650:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 8001652:	4b92      	ldr	r3, [pc, #584]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001654:	2200      	movs	r2, #0
 8001656:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 8001658:	4b90      	ldr	r3, [pc, #576]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 800165a:	2200      	movs	r2, #0
 800165c:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 800165e:	4b8f      	ldr	r3, [pc, #572]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001660:	2200      	movs	r2, #0
 8001662:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 8001664:	4b8d      	ldr	r3, [pc, #564]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001666:	2200      	movs	r2, #0
 8001668:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 800166a:	4b8c      	ldr	r3, [pc, #560]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 800166c:	2200      	movs	r2, #0
 800166e:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 8001670:	4b8a      	ldr	r3, [pc, #552]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001672:	2200      	movs	r2, #0
 8001674:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 8001676:	4b89      	ldr	r3, [pc, #548]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001678:	2200      	movs	r2, #0
 800167a:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 800167c:	4b87      	ldr	r3, [pc, #540]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 800167e:	2200      	movs	r2, #0
 8001680:	825a      	strh	r2, [r3, #18]
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}
#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 8001682:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <_Z10StartGetBTPv+0x2d8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b86      	ldr	r3, [pc, #536]	; (80018a4 <_Z10StartGetBTPv+0x2dc>)
 800168c:	801a      	strh	r2, [r3, #0]
#endif
    Usb.Task();
 800168e:	487e      	ldr	r0, [pc, #504]	; (8001888 <_Z10StartGetBTPv+0x2c0>)
 8001690:	f012 fe66 	bl	8014360 <_ZN3USB4TaskEv>
    if (Btd.incomingPSController) {
 8001694:	4b84      	ldr	r3, [pc, #528]	; (80018a8 <_Z10StartGetBTPv+0x2e0>)
 8001696:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 82c3 	beq.w	8001c26 <_Z10StartGetBTPv+0x65e>
      ps4_connected = 1;
 80016a0:	4b82      	ldr	r3, [pc, #520]	; (80018ac <_Z10StartGetBTPv+0x2e4>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
      LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 80016a6:	2100      	movs	r1, #0
 80016a8:	4881      	ldr	r0, [pc, #516]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 80016aa:	f012 f80e 	bl	80136ca <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b80      	ldr	r3, [pc, #512]	; (80018b4 <_Z10StartGetBTPv+0x2ec>)
 80016b4:	701a      	strb	r2, [r3, #0]
      LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 80016b6:	2101      	movs	r1, #1
 80016b8:	487d      	ldr	r0, [pc, #500]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 80016ba:	f012 f806 	bl	80136ca <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b7d      	ldr	r3, [pc, #500]	; (80018b8 <_Z10StartGetBTPv+0x2f0>)
 80016c4:	701a      	strb	r2, [r3, #0]
      RightHatX_val = PS4.getAnalogHat(RightHatX);
 80016c6:	2102      	movs	r1, #2
 80016c8:	4879      	ldr	r0, [pc, #484]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 80016ca:	f011 fffe 	bl	80136ca <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b7a      	ldr	r3, [pc, #488]	; (80018bc <_Z10StartGetBTPv+0x2f4>)
 80016d4:	701a      	strb	r2, [r3, #0]
      RightHatY_val = PS4.getAnalogHat(RightHatY);
 80016d6:	2103      	movs	r1, #3
 80016d8:	4875      	ldr	r0, [pc, #468]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 80016da:	f011 fff6 	bl	80136ca <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b77      	ldr	r3, [pc, #476]	; (80018c0 <_Z10StartGetBTPv+0x2f8>)
 80016e4:	701a      	strb	r2, [r3, #0]
				gameHID.Joy2Y = 0;
				xboxHID.rightStickX = 0;
				xboxHID.rightStickY = 0;
			}
#elif !deadzone_enable
      gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 80016e6:	2100      	movs	r1, #0
 80016e8:	4871      	ldr	r0, [pc, #452]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 80016ea:	f011 ffee 	bl	80136ca <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80016ee:	4603      	mov	r3, r0
 80016f0:	3b80      	subs	r3, #128	; 0x80
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	4b68      	ldr	r3, [pc, #416]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 80016f8:	709a      	strb	r2, [r3, #2]
      gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 80016fa:	2101      	movs	r1, #1
 80016fc:	486c      	ldr	r0, [pc, #432]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 80016fe:	f011 ffe4 	bl	80136ca <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001702:	4603      	mov	r3, r0
 8001704:	3b80      	subs	r3, #128	; 0x80
 8001706:	b2db      	uxtb	r3, r3
 8001708:	b25a      	sxtb	r2, r3
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 800170c:	70da      	strb	r2, [r3, #3]
      xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 800170e:	4b62      	ldr	r3, [pc, #392]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 8001710:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21a      	sxth	r2, r3
 8001718:	4b60      	ldr	r3, [pc, #384]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 800171a:	819a      	strh	r2, [r3, #12]
      xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 800171c:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 800171e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b21a      	sxth	r2, r3
 8001726:	4b5d      	ldr	r3, [pc, #372]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001728:	81da      	strh	r2, [r3, #14]
      /* The Y axis by default is inverted on the Xbox */
      xboxHID.leftStickY = -xboxHID.leftStickY - 128;
 800172a:	4b5c      	ldr	r3, [pc, #368]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 800172c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001730:	b29a      	uxth	r2, r3
 8001732:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	b29b      	uxth	r3, r3
 800173a:	b21a      	sxth	r2, r3
 800173c:	4b57      	ldr	r3, [pc, #348]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 800173e:	81da      	strh	r2, [r3, #14]

      gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8001740:	2102      	movs	r1, #2
 8001742:	485b      	ldr	r0, [pc, #364]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 8001744:	f011 ffc1 	bl	80136ca <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001748:	4603      	mov	r3, r0
 800174a:	3b80      	subs	r3, #128	; 0x80
 800174c:	b2db      	uxtb	r3, r3
 800174e:	b25a      	sxtb	r2, r3
 8001750:	4b51      	ldr	r3, [pc, #324]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 8001752:	711a      	strb	r2, [r3, #4]
      gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8001754:	2103      	movs	r1, #3
 8001756:	4856      	ldr	r0, [pc, #344]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 8001758:	f011 ffb7 	bl	80136ca <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800175c:	4603      	mov	r3, r0
 800175e:	3b80      	subs	r3, #128	; 0x80
 8001760:	b2db      	uxtb	r3, r3
 8001762:	b25a      	sxtb	r2, r3
 8001764:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 8001766:	715a      	strb	r2, [r3, #5]
      xboxHID.rightStickX = gameHID.Joy2X << 8;
 8001768:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 800176a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	b21a      	sxth	r2, r3
 8001772:	4b4a      	ldr	r3, [pc, #296]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001774:	821a      	strh	r2, [r3, #16]
      xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001776:	4b48      	ldr	r3, [pc, #288]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 8001778:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001782:	825a      	strh	r2, [r3, #18]

      /* The Y axis by default is inverted on the Xbox */
      xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 8001784:	4b45      	ldr	r3, [pc, #276]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001786:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800178a:	b29a      	uxth	r2, r3
 800178c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	b29b      	uxth	r3, r3
 8001794:	b21a      	sxth	r2, r3
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001798:	825a      	strh	r2, [r3, #18]
#endif
      xboxHID.L = PS4.getAnalogButton(L2);
 800179a:	2108      	movs	r1, #8
 800179c:	4844      	ldr	r0, [pc, #272]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 800179e:	f011 ff7b 	bl	8013698 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 80017a8:	729a      	strb	r2, [r3, #10]
      xboxHID.R = PS4.getAnalogButton(R2);
 80017aa:	2109      	movs	r1, #9
 80017ac:	4840      	ldr	r0, [pc, #256]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 80017ae:	f011 ff73 	bl	8013698 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b39      	ldr	r3, [pc, #228]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 80017b8:	72da      	strb	r2, [r3, #11]
      gameHID.Joy_LT = xboxHID.L - 128;
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 80017bc:	7a9b      	ldrb	r3, [r3, #10]
 80017be:	3b80      	subs	r3, #128	; 0x80
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	b25a      	sxtb	r2, r3
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 80017c6:	701a      	strb	r2, [r3, #0]
      gameHID.Joy_RT = xboxHID.R - 128;
 80017c8:	4b34      	ldr	r3, [pc, #208]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 80017ca:	7adb      	ldrb	r3, [r3, #11]
 80017cc:	3b80      	subs	r3, #128	; 0x80
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	b25a      	sxtb	r2, r3
 80017d2:	4b31      	ldr	r3, [pc, #196]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 80017d4:	705a      	strb	r2, [r3, #1]

      if (PS4.getButtonClick(PS)) {
 80017d6:	2110      	movs	r1, #16
 80017d8:	4835      	ldr	r0, [pc, #212]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 80017da:	f011 ff1d 	bl	8013618 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <_Z10StartGetBTPv+0x22e>
        PS4.disconnect();
 80017e4:	4837      	ldr	r0, [pc, #220]	; (80018c4 <_Z10StartGetBTPv+0x2fc>)
 80017e6:	f010 fe00 	bl	80123ea <_ZN5BTHID10disconnectEv>
        display_run_once = 0;
 80017ea:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <_Z10StartGetBTPv+0x300>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
        rumble_once = 0;
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <_Z10StartGetBTPv+0x304>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
      }

      if (PS4.getButtonPress(TRIANGLE)) {
 80017f6:	210c      	movs	r1, #12
 80017f8:	482d      	ldr	r0, [pc, #180]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 80017fa:	f011 fee5 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00b      	beq.n	800181c <_Z10StartGetBTPv+0x254>
        gameHID.ps4ButtonsTag.button_triangle = 1;
 8001804:	4a24      	ldr	r2, [pc, #144]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 8001806:	79d3      	ldrb	r3, [r2, #7]
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0xFF;
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001810:	22ff      	movs	r2, #255	; 0xff
 8001812:	71da      	strb	r2, [r3, #7]
        button_press_idle = 0;
 8001814:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <_Z10StartGetBTPv+0x308>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e007      	b.n	800182c <_Z10StartGetBTPv+0x264>
      } else {
        gameHID.ps4ButtonsTag.button_triangle = 0;
 800181c:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 800181e:	79d3      	ldrb	r3, [r2, #7]
 8001820:	f36f 0300 	bfc	r3, #0, #1
 8001824:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0;
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001828:	2200      	movs	r2, #0
 800182a:	71da      	strb	r2, [r3, #7]
      }

      if (PS4.getButtonPress(CIRCLE)) {
 800182c:	210d      	movs	r1, #13
 800182e:	4820      	ldr	r0, [pc, #128]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 8001830:	f011 feca 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <_Z10StartGetBTPv+0x28a>
        gameHID.ps4ButtonsTag.button_circle = 1;
 800183a:	4a17      	ldr	r2, [pc, #92]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 800183c:	7993      	ldrb	r3, [r2, #6]
 800183e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001842:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0xFF;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	715a      	strb	r2, [r3, #5]
        button_press_idle = 0;
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <_Z10StartGetBTPv+0x308>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e007      	b.n	8001862 <_Z10StartGetBTPv+0x29a>
      } else {
        gameHID.ps4ButtonsTag.button_circle = 0;
 8001852:	4a11      	ldr	r2, [pc, #68]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 8001854:	7993      	ldrb	r3, [r2, #6]
 8001856:	f36f 13c7 	bfc	r3, #7, #1
 800185a:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 800185e:	2200      	movs	r2, #0
 8001860:	715a      	strb	r2, [r3, #5]
      }

      if (PS4.getButtonPress(CROSS)) {
 8001862:	210e      	movs	r1, #14
 8001864:	4812      	ldr	r0, [pc, #72]	; (80018b0 <_Z10StartGetBTPv+0x2e8>)
 8001866:	f011 feaf 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d031      	beq.n	80018d4 <_Z10StartGetBTPv+0x30c>
        gameHID.ps4ButtonsTag.button_cross = 1;
 8001870:	4a09      	ldr	r2, [pc, #36]	; (8001898 <_Z10StartGetBTPv+0x2d0>)
 8001872:	7993      	ldrb	r3, [r2, #6]
 8001874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001878:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0xFF;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <_Z10StartGetBTPv+0x2d4>)
 800187c:	22ff      	movs	r2, #255	; 0xff
 800187e:	711a      	strb	r2, [r3, #4]
        button_press_idle = 0;
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_Z10StartGetBTPv+0x308>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e02d      	b.n	80018e4 <_Z10StartGetBTPv+0x31c>
 8001888:	200005dc 	.word	0x200005dc
 800188c:	08015d84 	.word	0x08015d84
 8001890:	200005c8 	.word	0x200005c8
 8001894:	08015d98 	.word	0x08015d98
 8001898:	2000094c 	.word	0x2000094c
 800189c:	20000954 	.word	0x20000954
 80018a0:	200004cc 	.word	0x200004cc
 80018a4:	20000946 	.word	0x20000946
 80018a8:	20000698 	.word	0x20000698
 80018ac:	2000092d 	.word	0x2000092d
 80018b0:	20000840 	.word	0x20000840
 80018b4:	2000092e 	.word	0x2000092e
 80018b8:	2000092f 	.word	0x2000092f
 80018bc:	20000930 	.word	0x20000930
 80018c0:	20000931 	.word	0x20000931
 80018c4:	200007c8 	.word	0x200007c8
 80018c8:	20000944 	.word	0x20000944
 80018cc:	2000092c 	.word	0x2000092c
 80018d0:	2000096c 	.word	0x2000096c
      } else {
        gameHID.ps4ButtonsTag.button_cross = 0;
 80018d4:	4aac      	ldr	r2, [pc, #688]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 80018d6:	7993      	ldrb	r3, [r2, #6]
 80018d8:	f36f 1386 	bfc	r3, #6, #1
 80018dc:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0;
 80018de:	4bab      	ldr	r3, [pc, #684]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	711a      	strb	r2, [r3, #4]
      }

      if (PS4.getButtonPress(SQUARE)) {
 80018e4:	210f      	movs	r1, #15
 80018e6:	48aa      	ldr	r0, [pc, #680]	; (8001b90 <_Z10StartGetBTPv+0x5c8>)
 80018e8:	f011 fe6e 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00b      	beq.n	800190a <_Z10StartGetBTPv+0x342>
        gameHID.ps4ButtonsTag.button_square = 1;
 80018f2:	4aa5      	ldr	r2, [pc, #660]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 80018f4:	79d3      	ldrb	r3, [r2, #7]
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0xFF;
 80018fc:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 80018fe:	22ff      	movs	r2, #255	; 0xff
 8001900:	719a      	strb	r2, [r3, #6]
        button_press_idle = 0;
 8001902:	4ba4      	ldr	r3, [pc, #656]	; (8001b94 <_Z10StartGetBTPv+0x5cc>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e007      	b.n	800191a <_Z10StartGetBTPv+0x352>
      } else {
        gameHID.ps4ButtonsTag.button_square = 0;
 800190a:	4a9f      	ldr	r2, [pc, #636]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 800190c:	79d3      	ldrb	r3, [r2, #7]
 800190e:	f36f 0341 	bfc	r3, #1, #1
 8001912:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0;
 8001914:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001916:	2200      	movs	r2, #0
 8001918:	719a      	strb	r2, [r3, #6]
      }

      if (PS4.getButtonPress(UP)) {
 800191a:	2100      	movs	r1, #0
 800191c:	489c      	ldr	r0, [pc, #624]	; (8001b90 <_Z10StartGetBTPv+0x5c8>)
 800191e:	f011 fe53 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00c      	beq.n	8001942 <_Z10StartGetBTPv+0x37a>
        gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8001928:	4a97      	ldr	r2, [pc, #604]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 800192a:	79d3      	ldrb	r3, [r2, #7]
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DUP;
 8001932:	4b96      	ldr	r3, [pc, #600]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001934:	789b      	ldrb	r3, [r3, #2]
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	b2da      	uxtb	r2, r3
 800193c:	4b93      	ldr	r3, [pc, #588]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 800193e:	709a      	strb	r2, [r3, #2]
 8001940:	e00b      	b.n	800195a <_Z10StartGetBTPv+0x392>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8001942:	4a91      	ldr	r2, [pc, #580]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001944:	79d3      	ldrb	r3, [r2, #7]
 8001946:	f36f 0382 	bfc	r3, #2, #1
 800194a:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 800194c:	4b8f      	ldr	r3, [pc, #572]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 800194e:	789b      	ldrb	r3, [r3, #2]
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b8d      	ldr	r3, [pc, #564]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001958:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(RIGHT)) {
 800195a:	2101      	movs	r1, #1
 800195c:	488c      	ldr	r0, [pc, #560]	; (8001b90 <_Z10StartGetBTPv+0x5c8>)
 800195e:	f011 fe33 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00c      	beq.n	8001982 <_Z10StartGetBTPv+0x3ba>
        gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8001968:	4a87      	ldr	r2, [pc, #540]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 800196a:	79d3      	ldrb	r3, [r2, #7]
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DRIGHT;
 8001972:	4b86      	ldr	r3, [pc, #536]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001974:	789b      	ldrb	r3, [r3, #2]
 8001976:	f043 0308 	orr.w	r3, r3, #8
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b83      	ldr	r3, [pc, #524]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 800197e:	709a      	strb	r2, [r3, #2]
 8001980:	e00b      	b.n	800199a <_Z10StartGetBTPv+0x3d2>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001982:	4a81      	ldr	r2, [pc, #516]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001984:	79d3      	ldrb	r3, [r2, #7]
 8001986:	f36f 03c3 	bfc	r3, #3, #1
 800198a:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 800198c:	4b7f      	ldr	r3, [pc, #508]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 800198e:	789b      	ldrb	r3, [r3, #2]
 8001990:	f023 0308 	bic.w	r3, r3, #8
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001998:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(DOWN)) {
 800199a:	2102      	movs	r1, #2
 800199c:	487c      	ldr	r0, [pc, #496]	; (8001b90 <_Z10StartGetBTPv+0x5c8>)
 800199e:	f011 fe13 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00c      	beq.n	80019c2 <_Z10StartGetBTPv+0x3fa>
        gameHID.ps4ButtonsTag.button_dpad_down = 1;
 80019a8:	4a77      	ldr	r2, [pc, #476]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 80019aa:	79d3      	ldrb	r3, [r2, #7]
 80019ac:	f043 0320 	orr.w	r3, r3, #32
 80019b0:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DDOWN;
 80019b2:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 80019b4:	789b      	ldrb	r3, [r3, #2]
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 80019be:	709a      	strb	r2, [r3, #2]
 80019c0:	e00b      	b.n	80019da <_Z10StartGetBTPv+0x412>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_down = 0;
 80019c2:	4a71      	ldr	r2, [pc, #452]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 80019c4:	79d3      	ldrb	r3, [r2, #7]
 80019c6:	f36f 1345 	bfc	r3, #5, #1
 80019ca:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 80019cc:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 80019ce:	789b      	ldrb	r3, [r3, #2]
 80019d0:	f023 0302 	bic.w	r3, r3, #2
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 80019d8:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(LEFT)) {
 80019da:	2103      	movs	r1, #3
 80019dc:	486c      	ldr	r0, [pc, #432]	; (8001b90 <_Z10StartGetBTPv+0x5c8>)
 80019de:	f011 fdf3 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00c      	beq.n	8001a02 <_Z10StartGetBTPv+0x43a>
        gameHID.ps4ButtonsTag.button_dpad_left = 1;
 80019e8:	4a67      	ldr	r2, [pc, #412]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 80019ea:	79d3      	ldrb	r3, [r2, #7]
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DLEFT;
 80019f2:	4b66      	ldr	r3, [pc, #408]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 80019f4:	789b      	ldrb	r3, [r3, #2]
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 80019fe:	709a      	strb	r2, [r3, #2]
 8001a00:	e00b      	b.n	8001a1a <_Z10StartGetBTPv+0x452>

      } else {
        gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8001a02:	4a61      	ldr	r2, [pc, #388]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001a04:	79d3      	ldrb	r3, [r2, #7]
 8001a06:	f36f 1304 	bfc	r3, #4, #1
 8001a0a:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001a0e:	789b      	ldrb	r3, [r3, #2]
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001a18:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(L1)) {
 8001a1a:	210a      	movs	r1, #10
 8001a1c:	485c      	ldr	r0, [pc, #368]	; (8001b90 <_Z10StartGetBTPv+0x5c8>)
 8001a1e:	f011 fdd3 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00b      	beq.n	8001a40 <_Z10StartGetBTPv+0x478>
        gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8001a28:	4a57      	ldr	r2, [pc, #348]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001a2a:	7993      	ldrb	r3, [r2, #6]
 8001a2c:	f043 0320 	orr.w	r3, r3, #32
 8001a30:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0xFF;
 8001a32:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001a34:	22ff      	movs	r2, #255	; 0xff
 8001a36:	725a      	strb	r2, [r3, #9]
        button_press_idle = 0;
 8001a38:	4b56      	ldr	r3, [pc, #344]	; (8001b94 <_Z10StartGetBTPv+0x5cc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e007      	b.n	8001a50 <_Z10StartGetBTPv+0x488>

      } else {
        gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001a40:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001a42:	7993      	ldrb	r3, [r2, #6]
 8001a44:	f36f 1345 	bfc	r3, #5, #1
 8001a48:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0;
 8001a4a:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	725a      	strb	r2, [r3, #9]
      }

      if (PS4.getButtonPress(L3)) {
 8001a50:	2106      	movs	r1, #6
 8001a52:	484f      	ldr	r0, [pc, #316]	; (8001b90 <_Z10StartGetBTPv+0x5c8>)
 8001a54:	f011 fdb8 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00f      	beq.n	8001a7e <_Z10StartGetBTPv+0x4b6>
        gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8001a5e:	4a4a      	ldr	r2, [pc, #296]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001a60:	79d3      	ldrb	r3, [r2, #7]
 8001a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a66:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_LS_BTN;
 8001a68:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001a6a:	789b      	ldrb	r3, [r3, #2]
 8001a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001a74:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001a76:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <_Z10StartGetBTPv+0x5cc>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e00b      	b.n	8001a96 <_Z10StartGetBTPv+0x4ce>
      } else {
        gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001a7e:	4a42      	ldr	r2, [pc, #264]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001a80:	79d3      	ldrb	r3, [r2, #7]
 8001a82:	f36f 1386 	bfc	r3, #6, #1
 8001a86:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 8001a88:	4b40      	ldr	r3, [pc, #256]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001a8a:	789b      	ldrb	r3, [r3, #2]
 8001a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001a94:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(R1)) {
 8001a96:	210b      	movs	r1, #11
 8001a98:	483d      	ldr	r0, [pc, #244]	; (8001b90 <_Z10StartGetBTPv+0x5c8>)
 8001a9a:	f011 fd95 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00b      	beq.n	8001abc <_Z10StartGetBTPv+0x4f4>
        gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8001aa4:	4a38      	ldr	r2, [pc, #224]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001aa6:	7993      	ldrb	r3, [r2, #6]
 8001aa8:	f043 0310 	orr.w	r3, r3, #16
 8001aac:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0xFF;
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001ab0:	22ff      	movs	r2, #255	; 0xff
 8001ab2:	721a      	strb	r2, [r3, #8]
        button_press_idle = 0;
 8001ab4:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <_Z10StartGetBTPv+0x5cc>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e007      	b.n	8001acc <_Z10StartGetBTPv+0x504>
      } else {
        gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8001abc:	4a32      	ldr	r2, [pc, #200]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001abe:	7993      	ldrb	r3, [r2, #6]
 8001ac0:	f36f 1304 	bfc	r3, #4, #1
 8001ac4:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0;
 8001ac6:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	721a      	strb	r2, [r3, #8]
      }

      if (PS4.getButtonPress(R3)) {
 8001acc:	2107      	movs	r1, #7
 8001ace:	4830      	ldr	r0, [pc, #192]	; (8001b90 <_Z10StartGetBTPv+0x5c8>)
 8001ad0:	f011 fd7a 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00f      	beq.n	8001afa <_Z10StartGetBTPv+0x532>
        gameHID.ps4ButtonsTag.button_right_thumb = 1;
 8001ada:	4a2b      	ldr	r2, [pc, #172]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001adc:	79d3      	ldrb	r3, [r2, #7]
 8001ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae2:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_RS_BTN;
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001af0:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001af2:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <_Z10StartGetBTPv+0x5cc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e00b      	b.n	8001b12 <_Z10StartGetBTPv+0x54a>
      } else {
        gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8001afa:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001afc:	79d3      	ldrb	r3, [r2, #7]
 8001afe:	f36f 13c7 	bfc	r3, #7, #1
 8001b02:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001b06:	789b      	ldrb	r3, [r3, #2]
 8001b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001b10:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(SHARE)) {
 8001b12:	2104      	movs	r1, #4
 8001b14:	481e      	ldr	r0, [pc, #120]	; (8001b90 <_Z10StartGetBTPv+0x5c8>)
 8001b16:	f011 fd57 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00f      	beq.n	8001b40 <_Z10StartGetBTPv+0x578>
        gameHID.ps4ButtonsTag.button_share = 1;
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001b22:	7993      	ldrb	r3, [r2, #6]
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_BACK_BTN;
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	f043 0320 	orr.w	r3, r3, #32
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001b36:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <_Z10StartGetBTPv+0x5cc>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e00b      	b.n	8001b58 <_Z10StartGetBTPv+0x590>
      } else {
        gameHID.ps4ButtonsTag.button_share = 0;
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001b42:	7993      	ldrb	r3, [r2, #6]
 8001b44:	f36f 03c3 	bfc	r3, #3, #1
 8001b48:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001b4c:	789b      	ldrb	r3, [r3, #2]
 8001b4e:	f023 0320 	bic.w	r3, r3, #32
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001b56:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(OPTIONS)) {
 8001b58:	2105      	movs	r1, #5
 8001b5a:	480d      	ldr	r0, [pc, #52]	; (8001b90 <_Z10StartGetBTPv+0x5c8>)
 8001b5c:	f011 fd34 	bl	80135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d018      	beq.n	8001b98 <_Z10StartGetBTPv+0x5d0>
        gameHID.ps4ButtonsTag.button_start = 1;
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <_Z10StartGetBTPv+0x5c0>)
 8001b68:	7993      	ldrb	r3, [r2, #6]
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_START_BTN;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001b72:	789b      	ldrb	r3, [r3, #2]
 8001b74:	f043 0310 	orr.w	r3, r3, #16
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <_Z10StartGetBTPv+0x5c4>)
 8001b7c:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <_Z10StartGetBTPv+0x5cc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e014      	b.n	8001bb0 <_Z10StartGetBTPv+0x5e8>
 8001b86:	bf00      	nop
 8001b88:	2000094c 	.word	0x2000094c
 8001b8c:	20000954 	.word	0x20000954
 8001b90:	20000840 	.word	0x20000840
 8001b94:	2000096c 	.word	0x2000096c
      } else {
        gameHID.ps4ButtonsTag.button_start = 0;
 8001b98:	4aa8      	ldr	r2, [pc, #672]	; (8001e3c <_Z10StartGetBTPv+0x874>)
 8001b9a:	7993      	ldrb	r3, [r2, #6]
 8001b9c:	f36f 0382 	bfc	r3, #2, #1
 8001ba0:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 8001ba2:	4ba7      	ldr	r3, [pc, #668]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001ba4:	789b      	ldrb	r3, [r3, #2]
 8001ba6:	f023 0310 	bic.w	r3, r3, #16
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	4ba4      	ldr	r3, [pc, #656]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001bae:	709a      	strb	r2, [r3, #2]
      }

      /*We don't want to spam the PS4 controller with rumble updates
       * If we do not do this, latency increases greatly */
      new_rumble_val_L = rx_buf[3];
 8001bb0:	4ba4      	ldr	r3, [pc, #656]	; (8001e44 <_Z10StartGetBTPv+0x87c>)
 8001bb2:	78da      	ldrb	r2, [r3, #3]
 8001bb4:	4ba4      	ldr	r3, [pc, #656]	; (8001e48 <_Z10StartGetBTPv+0x880>)
 8001bb6:	701a      	strb	r2, [r3, #0]
      new_rumble_val_R = rx_buf[5];
 8001bb8:	4ba2      	ldr	r3, [pc, #648]	; (8001e44 <_Z10StartGetBTPv+0x87c>)
 8001bba:	795a      	ldrb	r2, [r3, #5]
 8001bbc:	4ba3      	ldr	r3, [pc, #652]	; (8001e4c <_Z10StartGetBTPv+0x884>)
 8001bbe:	701a      	strb	r2, [r3, #0]

      if (new_rumble_val_L != old_rumble_val_L || new_rumble_val_R != old_rumble_val_R) {
 8001bc0:	4ba1      	ldr	r3, [pc, #644]	; (8001e48 <_Z10StartGetBTPv+0x880>)
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	4ba2      	ldr	r3, [pc, #648]	; (8001e50 <_Z10StartGetBTPv+0x888>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d105      	bne.n	8001bd8 <_Z10StartGetBTPv+0x610>
 8001bcc:	4b9f      	ldr	r3, [pc, #636]	; (8001e4c <_Z10StartGetBTPv+0x884>)
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	4ba0      	ldr	r3, [pc, #640]	; (8001e54 <_Z10StartGetBTPv+0x88c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d00f      	beq.n	8001bf8 <_Z10StartGetBTPv+0x630>
        PS4.setRumbleOn(new_rumble_val_L, new_rumble_val_R);
 8001bd8:	4b9b      	ldr	r3, [pc, #620]	; (8001e48 <_Z10StartGetBTPv+0x880>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4a9b      	ldr	r2, [pc, #620]	; (8001e4c <_Z10StartGetBTPv+0x884>)
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	489d      	ldr	r0, [pc, #628]	; (8001e58 <_Z10StartGetBTPv+0x890>)
 8001be4:	f7fe ffa1 	bl	8000b2a <_ZN9PS4Parser11setRumbleOnEhh>
        old_rumble_val_L = new_rumble_val_L;
 8001be8:	4b97      	ldr	r3, [pc, #604]	; (8001e48 <_Z10StartGetBTPv+0x880>)
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	4b98      	ldr	r3, [pc, #608]	; (8001e50 <_Z10StartGetBTPv+0x888>)
 8001bee:	701a      	strb	r2, [r3, #0]
        old_rumble_val_R = new_rumble_val_R;
 8001bf0:	4b96      	ldr	r3, [pc, #600]	; (8001e4c <_Z10StartGetBTPv+0x884>)
 8001bf2:	781a      	ldrb	r2, [r3, #0]
 8001bf4:	4b97      	ldr	r3, [pc, #604]	; (8001e54 <_Z10StartGetBTPv+0x88c>)
 8001bf6:	701a      	strb	r2, [r3, #0]
      }
      /* After roughly 5+minutes of idle time, disconnect controller
       * Not the best solution since the rate the counter increases is based on BT Latency */
      if (button_press_idle > 400000) {
 8001bf8:	4b98      	ldr	r3, [pc, #608]	; (8001e5c <_Z10StartGetBTPv+0x894>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a98      	ldr	r2, [pc, #608]	; (8001e60 <_Z10StartGetBTPv+0x898>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d90b      	bls.n	8001c1a <_Z10StartGetBTPv+0x652>
        PS4.disconnect();
 8001c02:	4898      	ldr	r0, [pc, #608]	; (8001e64 <_Z10StartGetBTPv+0x89c>)
 8001c04:	f010 fbf1 	bl	80123ea <_ZN5BTHID10disconnectEv>
        rumble_once = 0;
 8001c08:	4b97      	ldr	r3, [pc, #604]	; (8001e68 <_Z10StartGetBTPv+0x8a0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
        button_press_idle = 0;
 8001c0e:	4b93      	ldr	r3, [pc, #588]	; (8001e5c <_Z10StartGetBTPv+0x894>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
        display_run_once = 0;
 8001c14:	4b95      	ldr	r3, [pc, #596]	; (8001e6c <_Z10StartGetBTPv+0x8a4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
      }
      button_press_idle++;
 8001c1a:	4b90      	ldr	r3, [pc, #576]	; (8001e5c <_Z10StartGetBTPv+0x894>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a8e      	ldr	r2, [pc, #568]	; (8001e5c <_Z10StartGetBTPv+0x894>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e1eb      	b.n	8001ffe <_Z10StartGetBTPv+0xa36>

    } else if(Btd.incomingXboxOneS) {
 8001c26:	4b92      	ldr	r3, [pc, #584]	; (8001e70 <_Z10StartGetBTPv+0x8a8>)
 8001c28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 81e6 	beq.w	8001ffe <_Z10StartGetBTPv+0xa36>
      xboxHID.leftStickX = XboxOneS.getAnalogHat(LeftHatX);
 8001c32:	2100      	movs	r1, #0
 8001c34:	488f      	ldr	r0, [pc, #572]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001c36:	f013 fc93 	bl	8015560 <_ZN14XBOXONESParser12getAnalogHatE13AnalogHatEnum>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b80      	ldr	r3, [pc, #512]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001c40:	819a      	strh	r2, [r3, #12]
      xboxHID.leftStickY = -XboxOneS.getAnalogHat(LeftHatY);
 8001c42:	2101      	movs	r1, #1
 8001c44:	488b      	ldr	r0, [pc, #556]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001c46:	f013 fc8b 	bl	8015560 <_ZN14XBOXONESParser12getAnalogHatE13AnalogHatEnum>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	425b      	negs	r3, r3
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	b21a      	sxth	r2, r3
 8001c54:	4b7a      	ldr	r3, [pc, #488]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001c56:	81da      	strh	r2, [r3, #14]
      /* The Y axis by default is inverted on the Xbox */
      xboxHID.rightStickX = XboxOneS.getAnalogHat(RightHatX);
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4886      	ldr	r0, [pc, #536]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001c5c:	f013 fc80 	bl	8015560 <_ZN14XBOXONESParser12getAnalogHatE13AnalogHatEnum>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001c66:	821a      	strh	r2, [r3, #16]
      xboxHID.rightStickY = -XboxOneS.getAnalogHat(RightHatY);
 8001c68:	2103      	movs	r1, #3
 8001c6a:	4882      	ldr	r0, [pc, #520]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001c6c:	f013 fc78 	bl	8015560 <_ZN14XBOXONESParser12getAnalogHatE13AnalogHatEnum>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	425b      	negs	r3, r3
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	4b71      	ldr	r3, [pc, #452]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001c7c:	825a      	strh	r2, [r3, #18]

      xboxHID.L = map(XboxOneS.getButtonPress(L2), 0, 1023, 0, 255);
 8001c7e:	2108      	movs	r1, #8
 8001c80:	487c      	ldr	r0, [pc, #496]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001c82:	f013 fbcb 	bl	801541c <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	23ff      	movs	r3, #255	; 0xff
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c94:	2100      	movs	r1, #0
 8001c96:	f7ff fc49 	bl	800152c <_Z3maplllll>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001ca0:	729a      	strb	r2, [r3, #10]
      xboxHID.R = map(XboxOneS.getButtonPress(R2), 0, 1023, 0, 255);
 8001ca2:	2109      	movs	r1, #9
 8001ca4:	4873      	ldr	r0, [pc, #460]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001ca6:	f013 fbb9 	bl	801541c <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4618      	mov	r0, r3
 8001cae:	23ff      	movs	r3, #255	; 0xff
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001cb8:	2100      	movs	r1, #0
 8001cba:	f7ff fc37 	bl	800152c <_Z3maplllll>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001cc4:	72da      	strb	r2, [r3, #11]

      if (PS4.getButtonClick(XBOX)) {
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	4863      	ldr	r0, [pc, #396]	; (8001e58 <_Z10StartGetBTPv+0x890>)
 8001cca:	f011 fca5 	bl	8013618 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <_Z10StartGetBTPv+0x71e>
        XboxOneS.disconnect();
 8001cd4:	4868      	ldr	r0, [pc, #416]	; (8001e78 <_Z10StartGetBTPv+0x8b0>)
 8001cd6:	f010 fb88 	bl	80123ea <_ZN5BTHID10disconnectEv>
        display_run_once = 0;
 8001cda:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <_Z10StartGetBTPv+0x8a4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
        rumble_once = 0;
 8001ce0:	4b61      	ldr	r3, [pc, #388]	; (8001e68 <_Z10StartGetBTPv+0x8a0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
      }

      if(XboxOneS.getButtonClick(A)) {
 8001ce6:	210d      	movs	r1, #13
 8001ce8:	4862      	ldr	r0, [pc, #392]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001cea:	f013 fbd1 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <_Z10StartGetBTPv+0x73a>
        xboxHID.A = 0xFF;
 8001cf4:	4b52      	ldr	r3, [pc, #328]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001cf6:	22ff      	movs	r2, #255	; 0xff
 8001cf8:	711a      	strb	r2, [r3, #4]
        button_press_idle = 0;
 8001cfa:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <_Z10StartGetBTPv+0x894>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e002      	b.n	8001d08 <_Z10StartGetBTPv+0x740>
      } else {
        xboxHID.A = 0;
 8001d02:	4b4f      	ldr	r3, [pc, #316]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	711a      	strb	r2, [r3, #4]
      }

      if(XboxOneS.getButtonClick(B)) {
 8001d08:	210c      	movs	r1, #12
 8001d0a:	485a      	ldr	r0, [pc, #360]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001d0c:	f013 fbc0 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <_Z10StartGetBTPv+0x75c>
        xboxHID.B = 0xFF;
 8001d16:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001d18:	22ff      	movs	r2, #255	; 0xff
 8001d1a:	715a      	strb	r2, [r3, #5]
        button_press_idle = 0;
 8001d1c:	4b4f      	ldr	r3, [pc, #316]	; (8001e5c <_Z10StartGetBTPv+0x894>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e002      	b.n	8001d2a <_Z10StartGetBTPv+0x762>
      } else {
        xboxHID.B = 0;
 8001d24:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	715a      	strb	r2, [r3, #5]
      }

      if(XboxOneS.getButtonClick(X)) {
 8001d2a:	210e      	movs	r1, #14
 8001d2c:	4851      	ldr	r0, [pc, #324]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001d2e:	f013 fbaf 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <_Z10StartGetBTPv+0x77e>
        xboxHID.X = 0xFF;
 8001d38:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001d3a:	22ff      	movs	r2, #255	; 0xff
 8001d3c:	719a      	strb	r2, [r3, #6]
        button_press_idle = 0;
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <_Z10StartGetBTPv+0x894>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e002      	b.n	8001d4c <_Z10StartGetBTPv+0x784>
      } else {
        xboxHID.X = 0;
 8001d46:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	719a      	strb	r2, [r3, #6]
      }

      if(XboxOneS.getButtonClick(Y)) {
 8001d4c:	210f      	movs	r1, #15
 8001d4e:	4849      	ldr	r0, [pc, #292]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001d50:	f013 fb9e 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <_Z10StartGetBTPv+0x7a0>
        xboxHID.Y = 0xFF;
 8001d5a:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001d5c:	22ff      	movs	r2, #255	; 0xff
 8001d5e:	71da      	strb	r2, [r3, #7]
        button_press_idle = 0;
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <_Z10StartGetBTPv+0x894>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e002      	b.n	8001d6e <_Z10StartGetBTPv+0x7a6>
      } else {
        xboxHID.Y = 0;
 8001d68:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	71da      	strb	r2, [r3, #7]
      }

      if(XboxOneS.getButtonClick(UP)) {
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4840      	ldr	r0, [pc, #256]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001d72:	f013 fb8d 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <_Z10StartGetBTPv+0x7c4>
        xboxHID.dButtons |= XBOX_DUP;
 8001d7c:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001d7e:	789b      	ldrb	r3, [r3, #2]
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001d88:	709a      	strb	r2, [r3, #2]
 8001d8a:	e006      	b.n	8001d9a <_Z10StartGetBTPv+0x7d2>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 8001d8c:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001d8e:	789b      	ldrb	r3, [r3, #2]
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001d98:	709a      	strb	r2, [r3, #2]
      }

      if(XboxOneS.getButtonClick(RIGHT)) {
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4835      	ldr	r0, [pc, #212]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001d9e:	f013 fb77 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <_Z10StartGetBTPv+0x7f0>
        xboxHID.dButtons |= XBOX_DRIGHT;
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001daa:	789b      	ldrb	r3, [r3, #2]
 8001dac:	f043 0308 	orr.w	r3, r3, #8
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001db4:	709a      	strb	r2, [r3, #2]
 8001db6:	e006      	b.n	8001dc6 <_Z10StartGetBTPv+0x7fe>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001dba:	789b      	ldrb	r3, [r3, #2]
 8001dbc:	f023 0308 	bic.w	r3, r3, #8
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001dc4:	709a      	strb	r2, [r3, #2]
      }

      if(XboxOneS.getButtonClick(DOWN)) {
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	482a      	ldr	r0, [pc, #168]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001dca:	f013 fb61 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <_Z10StartGetBTPv+0x81c>
        xboxHID.dButtons |= XBOX_DDOWN;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001dd6:	789b      	ldrb	r3, [r3, #2]
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001de0:	709a      	strb	r2, [r3, #2]
 8001de2:	e006      	b.n	8001df2 <_Z10StartGetBTPv+0x82a>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001de6:	789b      	ldrb	r3, [r3, #2]
 8001de8:	f023 0302 	bic.w	r3, r3, #2
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001df0:	709a      	strb	r2, [r3, #2]
      }

      if(XboxOneS.getButtonClick(LEFT)) {
 8001df2:	2103      	movs	r1, #3
 8001df4:	481f      	ldr	r0, [pc, #124]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001df6:	f013 fb4b 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <_Z10StartGetBTPv+0x848>
        xboxHID.dButtons |= XBOX_DLEFT;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001e02:	789b      	ldrb	r3, [r3, #2]
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001e0c:	709a      	strb	r2, [r3, #2]
 8001e0e:	e006      	b.n	8001e1e <_Z10StartGetBTPv+0x856>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001e12:	789b      	ldrb	r3, [r3, #2]
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001e1c:	709a      	strb	r2, [r3, #2]
      }

      if(XboxOneS.getButtonClick(L1)) {
 8001e1e:	210a      	movs	r1, #10
 8001e20:	4814      	ldr	r0, [pc, #80]	; (8001e74 <_Z10StartGetBTPv+0x8ac>)
 8001e22:	f013 fb35 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d027      	beq.n	8001e7c <_Z10StartGetBTPv+0x8b4>
        xboxHID.WHITE = 0xFF;
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <_Z10StartGetBTPv+0x878>)
 8001e2e:	22ff      	movs	r2, #255	; 0xff
 8001e30:	725a      	strb	r2, [r3, #9]
        button_press_idle = 0;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <_Z10StartGetBTPv+0x894>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e023      	b.n	8001e82 <_Z10StartGetBTPv+0x8ba>
 8001e3a:	bf00      	nop
 8001e3c:	2000094c 	.word	0x2000094c
 8001e40:	20000954 	.word	0x20000954
 8001e44:	200003d4 	.word	0x200003d4
 8001e48:	2000096a 	.word	0x2000096a
 8001e4c:	2000096b 	.word	0x2000096b
 8001e50:	20000968 	.word	0x20000968
 8001e54:	20000969 	.word	0x20000969
 8001e58:	20000840 	.word	0x20000840
 8001e5c:	2000096c 	.word	0x2000096c
 8001e60:	00061a80 	.word	0x00061a80
 8001e64:	200007c8 	.word	0x200007c8
 8001e68:	2000092c 	.word	0x2000092c
 8001e6c:	20000944 	.word	0x20000944
 8001e70:	20000698 	.word	0x20000698
 8001e74:	20000908 	.word	0x20000908
 8001e78:	20000890 	.word	0x20000890
      } else {
        xboxHID.WHITE = 0;
 8001e7c:	4b67      	ldr	r3, [pc, #412]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	725a      	strb	r2, [r3, #9]
      }

      if(XboxOneS.getButtonClick(R1)) {
 8001e82:	210b      	movs	r1, #11
 8001e84:	4866      	ldr	r0, [pc, #408]	; (8002020 <_Z10StartGetBTPv+0xa58>)
 8001e86:	f013 fb03 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <_Z10StartGetBTPv+0x8d6>
        xboxHID.BLACK = 0xFF;
 8001e90:	4b62      	ldr	r3, [pc, #392]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001e92:	22ff      	movs	r2, #255	; 0xff
 8001e94:	721a      	strb	r2, [r3, #8]
        button_press_idle = 0;
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <_Z10StartGetBTPv+0xa5c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e002      	b.n	8001ea4 <_Z10StartGetBTPv+0x8dc>
      } else {
        xboxHID.BLACK = 0;
 8001e9e:	4b5f      	ldr	r3, [pc, #380]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	721a      	strb	r2, [r3, #8]
      }

      if (XboxOneS.getButtonClick(L3)) {
 8001ea4:	2106      	movs	r1, #6
 8001ea6:	485e      	ldr	r0, [pc, #376]	; (8002020 <_Z10StartGetBTPv+0xa58>)
 8001ea8:	f013 faf2 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00f      	beq.n	8001ed2 <_Z10StartGetBTPv+0x90a>
        gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8001eb2:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <_Z10StartGetBTPv+0xa60>)
 8001eb4:	79d3      	ldrb	r3, [r2, #7]
 8001eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eba:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_LS_BTN;
 8001ebc:	4b57      	ldr	r3, [pc, #348]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001ebe:	789b      	ldrb	r3, [r3, #2]
 8001ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b55      	ldr	r3, [pc, #340]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001ec8:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001eca:	4b56      	ldr	r3, [pc, #344]	; (8002024 <_Z10StartGetBTPv+0xa5c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e00b      	b.n	8001eea <_Z10StartGetBTPv+0x922>
      } else {
        gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8001ed2:	4a55      	ldr	r2, [pc, #340]	; (8002028 <_Z10StartGetBTPv+0xa60>)
 8001ed4:	79d3      	ldrb	r3, [r2, #7]
 8001ed6:	f36f 1386 	bfc	r3, #6, #1
 8001eda:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 8001edc:	4b4f      	ldr	r3, [pc, #316]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001ede:	789b      	ldrb	r3, [r3, #2]
 8001ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4b4d      	ldr	r3, [pc, #308]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001ee8:	709a      	strb	r2, [r3, #2]
      }

      if (XboxOneS.getButtonClick(R3)) {
 8001eea:	2107      	movs	r1, #7
 8001eec:	484c      	ldr	r0, [pc, #304]	; (8002020 <_Z10StartGetBTPv+0xa58>)
 8001eee:	f013 facf 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <_Z10StartGetBTPv+0x946>
        xboxHID.dButtons |= XBOX_RS_BTN;
 8001ef8:	4b48      	ldr	r3, [pc, #288]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001efa:	789b      	ldrb	r3, [r3, #2]
 8001efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b46      	ldr	r3, [pc, #280]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001f04:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <_Z10StartGetBTPv+0xa5c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	e006      	b.n	8001f1c <_Z10StartGetBTPv+0x954>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 8001f0e:	4b43      	ldr	r3, [pc, #268]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001f10:	789b      	ldrb	r3, [r3, #2]
 8001f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b40      	ldr	r3, [pc, #256]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001f1a:	709a      	strb	r2, [r3, #2]
      }

      if (XboxOneS.getButtonClick(VIEW)) {
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	4840      	ldr	r0, [pc, #256]	; (8002020 <_Z10StartGetBTPv+0xa58>)
 8001f20:	f013 fab6 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <_Z10StartGetBTPv+0x978>
        xboxHID.dButtons |= XBOX_BACK_BTN;
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001f2c:	789b      	ldrb	r3, [r3, #2]
 8001f2e:	f043 0320 	orr.w	r3, r3, #32
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b39      	ldr	r3, [pc, #228]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001f36:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001f38:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <_Z10StartGetBTPv+0xa5c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e006      	b.n	8001f4e <_Z10StartGetBTPv+0x986>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001f42:	789b      	ldrb	r3, [r3, #2]
 8001f44:	f023 0320 	bic.w	r3, r3, #32
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001f4c:	709a      	strb	r2, [r3, #2]
      }

      if (XboxOneS.getButtonClick(MENU)) {
 8001f4e:	2105      	movs	r1, #5
 8001f50:	4833      	ldr	r0, [pc, #204]	; (8002020 <_Z10StartGetBTPv+0xa58>)
 8001f52:	f013 fa9d 	bl	8015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <_Z10StartGetBTPv+0x9aa>
        xboxHID.dButtons |= XBOX_START_BTN;
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001f5e:	789b      	ldrb	r3, [r3, #2]
 8001f60:	f043 0310 	orr.w	r3, r3, #16
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001f68:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <_Z10StartGetBTPv+0xa5c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e006      	b.n	8001f80 <_Z10StartGetBTPv+0x9b8>
      } else {
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 8001f72:	4b2a      	ldr	r3, [pc, #168]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001f74:	789b      	ldrb	r3, [r3, #2]
 8001f76:	f023 0310 	bic.w	r3, r3, #16
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <_Z10StartGetBTPv+0xa54>)
 8001f7e:	709a      	strb	r2, [r3, #2]
      }

      /*We don't want to spam the XboxOneS controller with rumble updates
       * If we do not do this, latency increases greatly */
      new_rumble_val_L = rx_buf[3];
 8001f80:	4b2a      	ldr	r3, [pc, #168]	; (800202c <_Z10StartGetBTPv+0xa64>)
 8001f82:	78da      	ldrb	r2, [r3, #3]
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <_Z10StartGetBTPv+0xa68>)
 8001f86:	701a      	strb	r2, [r3, #0]
      new_rumble_val_R = rx_buf[5];
 8001f88:	4b28      	ldr	r3, [pc, #160]	; (800202c <_Z10StartGetBTPv+0xa64>)
 8001f8a:	795a      	ldrb	r2, [r3, #5]
 8001f8c:	4b29      	ldr	r3, [pc, #164]	; (8002034 <_Z10StartGetBTPv+0xa6c>)
 8001f8e:	701a      	strb	r2, [r3, #0]

      if (new_rumble_val_L != old_rumble_val_L || new_rumble_val_R != old_rumble_val_R) {
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <_Z10StartGetBTPv+0xa68>)
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <_Z10StartGetBTPv+0xa70>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d105      	bne.n	8001fa8 <_Z10StartGetBTPv+0x9e0>
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <_Z10StartGetBTPv+0xa6c>)
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	4b26      	ldr	r3, [pc, #152]	; (800203c <_Z10StartGetBTPv+0xa74>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d014      	beq.n	8001fd2 <_Z10StartGetBTPv+0xa0a>
        XboxOneS.setRumbleOn(new_rumble_val_L, new_rumble_val_R, new_rumble_val_L, new_rumble_val_R);
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <_Z10StartGetBTPv+0xa68>)
 8001faa:	7819      	ldrb	r1, [r3, #0]
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <_Z10StartGetBTPv+0xa6c>)
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <_Z10StartGetBTPv+0xa68>)
 8001fb2:	7818      	ldrb	r0, [r3, #0]
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <_Z10StartGetBTPv+0xa6c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4818      	ldr	r0, [pc, #96]	; (8002020 <_Z10StartGetBTPv+0xa58>)
 8001fbe:	f013 fc21 	bl	8015804 <_ZN14XBOXONESParser11setRumbleOnEhhhh>
        old_rumble_val_L = new_rumble_val_L;
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <_Z10StartGetBTPv+0xa68>)
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <_Z10StartGetBTPv+0xa70>)
 8001fc8:	701a      	strb	r2, [r3, #0]
        old_rumble_val_R = new_rumble_val_R;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <_Z10StartGetBTPv+0xa6c>)
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <_Z10StartGetBTPv+0xa74>)
 8001fd0:	701a      	strb	r2, [r3, #0]
      }

      /* After roughly 5+minutes of idle time, disconnect controller
       * Not the best solution since the rate the counter increases is based on BT Latency */
      if (button_press_idle > 400000) {
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <_Z10StartGetBTPv+0xa5c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1a      	ldr	r2, [pc, #104]	; (8002040 <_Z10StartGetBTPv+0xa78>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d90b      	bls.n	8001ff4 <_Z10StartGetBTPv+0xa2c>
        XboxOneS.disconnect();
 8001fdc:	4819      	ldr	r0, [pc, #100]	; (8002044 <_Z10StartGetBTPv+0xa7c>)
 8001fde:	f010 fa04 	bl	80123ea <_ZN5BTHID10disconnectEv>
        rumble_once = 0;
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <_Z10StartGetBTPv+0xa80>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
        button_press_idle = 0;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <_Z10StartGetBTPv+0xa5c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
        display_run_once = 0;
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <_Z10StartGetBTPv+0xa84>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
      }
      button_press_idle++;
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <_Z10StartGetBTPv+0xa5c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <_Z10StartGetBTPv+0xa5c>)
 8001ffc:	6013      	str	r3, [r2, #0]
    }


#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getBT;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <_Z10StartGetBTPv+0xa88>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <_Z10StartGetBTPv+0xa8c>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	b29a      	uxth	r2, r3
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <_Z10StartGetBTPv+0xa8c>)
 8002010:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(1);
 8002012:	2001      	movs	r0, #1
 8002014:	f009 f8fc 	bl	800b210 <osDelay>
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 8002018:	f7ff bb33 	b.w	8001682 <_Z10StartGetBTPv+0xba>
 800201c:	20000954 	.word	0x20000954
 8002020:	20000908 	.word	0x20000908
 8002024:	2000096c 	.word	0x2000096c
 8002028:	2000094c 	.word	0x2000094c
 800202c:	200003d4 	.word	0x200003d4
 8002030:	2000096a 	.word	0x2000096a
 8002034:	2000096b 	.word	0x2000096b
 8002038:	20000968 	.word	0x20000968
 800203c:	20000969 	.word	0x20000969
 8002040:	00061a80 	.word	0x00061a80
 8002044:	20000890 	.word	0x20000890
 8002048:	2000092c 	.word	0x2000092c
 800204c:	20000944 	.word	0x20000944
 8002050:	200004cc 	.word	0x200004cc
 8002054:	20000946 	.word	0x20000946

08002058 <_Z12StartSendUSBPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
    {
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
  MX_USB_DEVICE_Init();
 8002060:	f00b fd4c 	bl	800dafc <MX_USB_DEVICE_Init>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
#endif

#if OG_XBOX_SETUP
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <_Z12StartSendUSBPv+0x40>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <_Z12StartSendUSBPv+0x44>)
 800206e:	801a      	strh	r2, [r3, #0]
#endif
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8002070:	2214      	movs	r2, #20
 8002072:	490b      	ldr	r1, [pc, #44]	; (80020a0 <_Z12StartSendUSBPv+0x48>)
 8002074:	480b      	ldr	r0, [pc, #44]	; (80020a4 <_Z12StartSendUSBPv+0x4c>)
 8002076:	f007 fd67 	bl	8009b48 <USBD_HID_SendReport>
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getUSB;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <_Z12StartSendUSBPv+0x40>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <_Z12StartSendUSBPv+0x44>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	b29a      	uxth	r2, r3
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <_Z12StartSendUSBPv+0x44>)
 800208c:	801a      	strh	r2, [r3, #0]
#endif
#endif
    osDelay(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f009 f8be 	bl	800b210 <osDelay>
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8002094:	e7e6      	b.n	8002064 <_Z12StartSendUSBPv+0xc>
 8002096:	bf00      	nop
 8002098:	200004cc 	.word	0x200004cc
 800209c:	20000948 	.word	0x20000948
 80020a0:	20000954 	.word	0x20000954
 80020a4:	2000576c 	.word	0x2000576c

080020a8 <_Z19StartControllerJoinPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
    {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for (;;)
      {
    if (PS4.connected() && !rumble_once) {
 80020b0:	4810      	ldr	r0, [pc, #64]	; (80020f4 <_Z19StartControllerJoinPv+0x4c>)
 80020b2:	f7fe fdb3 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <_Z19StartControllerJoinPv+0x20>
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <_Z19StartControllerJoinPv+0x50>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <_Z19StartControllerJoinPv+0x20>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <_Z19StartControllerJoinPv+0x22>
 80020c8:	2300      	movs	r3, #0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00d      	beq.n	80020ea <_Z19StartControllerJoinPv+0x42>
      PS4.setRumbleOn(RumbleLow);
 80020ce:	2120      	movs	r1, #32
 80020d0:	480a      	ldr	r0, [pc, #40]	; (80020fc <_Z19StartControllerJoinPv+0x54>)
 80020d2:	f7fe fd12 	bl	8000afa <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
      osDelay(500);
 80020d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020da:	f009 f899 	bl	800b210 <osDelay>
      PS4.setRumbleOff();
 80020de:	4807      	ldr	r0, [pc, #28]	; (80020fc <_Z19StartControllerJoinPv+0x54>)
 80020e0:	f7fe fcfe 	bl	8000ae0 <_ZN9PS4Parser12setRumbleOffEv>
      rumble_once = 1;
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <_Z19StartControllerJoinPv+0x50>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
    }
    osDelay(300);
 80020ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020ee:	f009 f88f 	bl	800b210 <osDelay>
    if (PS4.connected() && !rumble_once) {
 80020f2:	e7dd      	b.n	80020b0 <_Z19StartControllerJoinPv+0x8>
 80020f4:	200007c8 	.word	0x200007c8
 80020f8:	2000092c 	.word	0x2000092c
 80020fc:	20000840 	.word	0x20000840

08002100 <_Z16StartButtonPressPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonPress */
void StartButtonPress(void *argument)
    {
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPress */
  /* Infinite loop */
  for (;;)
      {
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8002108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800210c:	4820      	ldr	r0, [pc, #128]	; (8002190 <_Z16StartButtonPressPv+0x90>)
 800210e:	f001 fae7 	bl	80036e0 <HAL_GPIO_ReadPin>
 8002112:	4603      	mov	r3, r0
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8002118:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800211c:	481d      	ldr	r0, [pc, #116]	; (8002194 <_Z16StartButtonPressPv+0x94>)
 800211e:	f001 fadf 	bl	80036e0 <HAL_GPIO_ReadPin>
 8002122:	4603      	mov	r3, r0
 8002124:	005b      	lsls	r3, r3, #1
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8002126:	b25b      	sxtb	r3, r3
 8002128:	4323      	orrs	r3, r4
 800212a:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(FORWARD_BTN_GPIO) << 0);
 800212c:	2110      	movs	r1, #16
 800212e:	4819      	ldr	r0, [pc, #100]	; (8002194 <_Z16StartButtonPressPv+0x94>)
 8002130:	f001 fad6 	bl	80036e0 <HAL_GPIO_ReadPin>
 8002134:	4603      	mov	r3, r0
 8002136:	b25b      	sxtb	r3, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8002138:	4323      	orrs	r3, r4
 800213a:	b25b      	sxtb	r3, r3
 800213c:	b2da      	uxtb	r2, r3
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <_Z16StartButtonPressPv+0x98>)
 8002140:	701a      	strb	r2, [r3, #0]

    if (BUTTON_PRESSED) {
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <_Z16StartButtonPressPv+0x98>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b07      	cmp	r3, #7
 8002148:	d018      	beq.n	800217c <_Z16StartButtonPressPv+0x7c>
      if (buttonDebounced == 1) {  // you only get here if the same button combination has been pressed for 100mS
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <_Z16StartButtonPressPv+0x9c>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d110      	bne.n	8002174 <_Z16StartButtonPressPv+0x74>
        if (buttonProcessed == 0) { // here's where we do the real work on the keyboard, and ensure we only do it once/keypress
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <_Z16StartButtonPressPv+0xa0>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d116      	bne.n	8002188 <_Z16StartButtonPressPv+0x88>
          buttonProcessed = 1;
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <_Z16StartButtonPressPv+0xa0>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
          ProcessKeyCodeInContext(keyCode);
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <_Z16StartButtonPressPv+0x98>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f99f 	bl	80014a8 <_Z23ProcessKeyCodeInContexth>
          Serial.print("Button Pressed\n");
 800216a:	490e      	ldr	r1, [pc, #56]	; (80021a4 <_Z16StartButtonPressPv+0xa4>)
 800216c:	480e      	ldr	r0, [pc, #56]	; (80021a8 <_Z16StartButtonPressPv+0xa8>)
 800216e:	f7fe fa23 	bl	80005b8 <_ZN5Print5printEPKc>
 8002172:	e009      	b.n	8002188 <_Z16StartButtonPressPv+0x88>
        }
      } else {
        buttonDebounced = true;
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <_Z16StartButtonPressPv+0x9c>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e005      	b.n	8002188 <_Z16StartButtonPressPv+0x88>
      }
    } else {
      buttonDebounced = false;
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <_Z16StartButtonPressPv+0x9c>)
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
      buttonProcessed = false;
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <_Z16StartButtonPressPv+0xa0>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
    }
//  	Serial.print("\r\n");
//  	Serial.print(keyCode);
    osDelay(100);
 8002188:	2064      	movs	r0, #100	; 0x64
 800218a:	f009 f841 	bl	800b210 <osDelay>
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 800218e:	e7bb      	b.n	8002108 <_Z16StartButtonPressPv+0x8>
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400
 8002198:	20000000 	.word	0x20000000
 800219c:	20000941 	.word	0x20000941
 80021a0:	20000942 	.word	0x20000942
 80021a4:	08015db8 	.word	0x08015db8
 80021a8:	200005c8 	.word	0x200005c8

080021ac <_Z14StartUpdateLCDPv>:
 * @brief Function implementing the updateLCD thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  //ssd1306_TestAll();
  //ssd1306_Fill(Black_);
  //ssd1306_UpdateScreen();
  for (;;) {
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14);
 80021b4:	4b7e      	ldr	r3, [pc, #504]	; (80023b0 <_Z14StartUpdateLCDPv+0x204>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	4b7d      	ldr	r3, [pc, #500]	; (80023b4 <_Z14StartUpdateLCDPv+0x208>)
 80021be:	801a      	strh	r2, [r3, #0]
#endif
    if (display_run_once == 0) {
 80021c0:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <_Z14StartUpdateLCDPv+0x20c>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 80e4 	bne.w	8002392 <_Z14StartUpdateLCDPv+0x1e6>
      ssd1306_Fill(Black_);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f007 f936 	bl	800943c <ssd1306_Fill>
      ssd1306_UpdateScreen();
 80021d0:	f007 f958 	bl	8009484 <ssd1306_UpdateScreen>
      switch (display_no) {
 80021d4:	4b79      	ldr	r3, [pc, #484]	; (80023bc <_Z14StartUpdateLCDPv+0x210>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b07      	cmp	r3, #7
 80021da:	f000 80a8 	beq.w	800232e <_Z14StartUpdateLCDPv+0x182>
 80021de:	2b07      	cmp	r3, #7
 80021e0:	f300 80d7 	bgt.w	8002392 <_Z14StartUpdateLCDPv+0x1e6>
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <_Z14StartUpdateLCDPv+0x44>
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	f000 808a 	beq.w	8002302 <_Z14StartUpdateLCDPv+0x156>
 80021ee:	e0d0      	b.n	8002392 <_Z14StartUpdateLCDPv+0x1e6>
        case 0: {
          Serial.print("\nInside case 0\n");
 80021f0:	4973      	ldr	r1, [pc, #460]	; (80023c0 <_Z14StartUpdateLCDPv+0x214>)
 80021f2:	4874      	ldr	r0, [pc, #464]	; (80023c4 <_Z14StartUpdateLCDPv+0x218>)
 80021f4:	f7fe f9e0 	bl	80005b8 <_ZN5Print5printEPKc>
          uint8_t alternate_print = 1;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
          if (!PS4.connected()) {
 80021fc:	4872      	ldr	r0, [pc, #456]	; (80023c8 <_Z14StartUpdateLCDPv+0x21c>)
 80021fe:	f7fe fd0d 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 8002202:	4603      	mov	r3, r0
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d017      	beq.n	800223e <_Z14StartUpdateLCDPv+0x92>
            ssd1306_SetCursor((128 - 11 * 3) / 2, 0);
 800220e:	2100      	movs	r1, #0
 8002210:	202f      	movs	r0, #47	; 0x2f
 8002212:	f007 fa6d 	bl	80096f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Not", Font_11x18, White_);
 8002216:	4a6d      	ldr	r2, [pc, #436]	; (80023cc <_Z14StartUpdateLCDPv+0x220>)
 8002218:	2301      	movs	r3, #1
 800221a:	ca06      	ldmia	r2, {r1, r2}
 800221c:	486c      	ldr	r0, [pc, #432]	; (80023d0 <_Z14StartUpdateLCDPv+0x224>)
 800221e:	f007 fa41 	bl	80096a4 <ssd1306_WriteString>
            display_force_update = 0;
 8002222:	4b6c      	ldr	r3, [pc, #432]	; (80023d4 <_Z14StartUpdateLCDPv+0x228>)
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 8002228:	211a      	movs	r1, #26
 800222a:	200e      	movs	r0, #14
 800222c:	f007 fa60 	bl	80096f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 8002230:	4a66      	ldr	r2, [pc, #408]	; (80023cc <_Z14StartUpdateLCDPv+0x220>)
 8002232:	2301      	movs	r3, #1
 8002234:	ca06      	ldmia	r2, {r1, r2}
 8002236:	4868      	ldr	r0, [pc, #416]	; (80023d8 <_Z14StartUpdateLCDPv+0x22c>)
 8002238:	f007 fa34 	bl	80096a4 <ssd1306_WriteString>
 800223c:	e017      	b.n	800226e <_Z14StartUpdateLCDPv+0xc2>
          } else if (PS4.connected()) {
 800223e:	4862      	ldr	r0, [pc, #392]	; (80023c8 <_Z14StartUpdateLCDPv+0x21c>)
 8002240:	f7fe fcec 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d011      	beq.n	800226e <_Z14StartUpdateLCDPv+0xc2>
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 800224a:	211a      	movs	r1, #26
 800224c:	200e      	movs	r0, #14
 800224e:	f007 fa4f 	bl	80096f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 8002252:	4a5e      	ldr	r2, [pc, #376]	; (80023cc <_Z14StartUpdateLCDPv+0x220>)
 8002254:	2301      	movs	r3, #1
 8002256:	ca06      	ldmia	r2, {r1, r2}
 8002258:	485f      	ldr	r0, [pc, #380]	; (80023d8 <_Z14StartUpdateLCDPv+0x22c>)
 800225a:	f007 fa23 	bl	80096a4 <ssd1306_WriteString>
            alternate_print = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
            display_run_once = 1;
 8002262:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <_Z14StartUpdateLCDPv+0x20c>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
            display_force_update = 0;
 8002268:	4b5a      	ldr	r3, [pc, #360]	; (80023d4 <_Z14StartUpdateLCDPv+0x228>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
          }
          ssd1306_UpdateScreen();
 800226e:	f007 f909 	bl	8009484 <ssd1306_UpdateScreen>
          Serial.print("\nInside case 0-1\n");
 8002272:	495a      	ldr	r1, [pc, #360]	; (80023dc <_Z14StartUpdateLCDPv+0x230>)
 8002274:	4853      	ldr	r0, [pc, #332]	; (80023c4 <_Z14StartUpdateLCDPv+0x218>)
 8002276:	f7fe f99f 	bl	80005b8 <_ZN5Print5printEPKc>
          while (!PS4.connected() && display_force_update == 0) {
 800227a:	4853      	ldr	r0, [pc, #332]	; (80023c8 <_Z14StartUpdateLCDPv+0x21c>)
 800227c:	f7fe fcce 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 8002280:	4603      	mov	r3, r0
 8002282:	f083 0301 	eor.w	r3, r3, #1
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <_Z14StartUpdateLCDPv+0xec>
 800228c:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <_Z14StartUpdateLCDPv+0x228>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <_Z14StartUpdateLCDPv+0xec>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <_Z14StartUpdateLCDPv+0xee>
 8002298:	2300      	movs	r3, #0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <_Z14StartUpdateLCDPv+0xfa>
            osDelay(100);
 800229e:	2064      	movs	r0, #100	; 0x64
 80022a0:	f008 ffb6 	bl	800b210 <osDelay>
          while (!PS4.connected() && display_force_update == 0) {
 80022a4:	e7e9      	b.n	800227a <_Z14StartUpdateLCDPv+0xce>
          }
          /* If the user presses a Button, interrupt and show next screen */
          if (display_force_update == 1) {
 80022a6:	4b4b      	ldr	r3, [pc, #300]	; (80023d4 <_Z14StartUpdateLCDPv+0x228>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d106      	bne.n	80022bc <_Z14StartUpdateLCDPv+0x110>
            display_force_update = 0;
 80022ae:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <_Z14StartUpdateLCDPv+0x228>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
            display_run_once = 0;
 80022b4:	4b40      	ldr	r3, [pc, #256]	; (80023b8 <_Z14StartUpdateLCDPv+0x20c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
            break;
 80022ba:	e06a      	b.n	8002392 <_Z14StartUpdateLCDPv+0x1e6>
          }
          /* When the controller is finally paired, update current screen
           * Only runs if the first PS4.connected() above does not run*/
          if (PS4.connected() && alternate_print) {
 80022bc:	4842      	ldr	r0, [pc, #264]	; (80023c8 <_Z14StartUpdateLCDPv+0x21c>)
 80022be:	f7fe fcad 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <_Z14StartUpdateLCDPv+0x126>
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <_Z14StartUpdateLCDPv+0x126>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <_Z14StartUpdateLCDPv+0x128>
 80022d2:	2300      	movs	r3, #0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d05b      	beq.n	8002390 <_Z14StartUpdateLCDPv+0x1e4>
            ssd1306_Fill(Black_);
 80022d8:	2000      	movs	r0, #0
 80022da:	f007 f8af 	bl	800943c <ssd1306_Fill>
            ssd1306_UpdateScreen();
 80022de:	f007 f8d1 	bl	8009484 <ssd1306_UpdateScreen>
            //				    ssd1306_SetCursor(25,0);
            //				    ssd1306_WriteString("Status:", Font_11x18, White_);
            ssd1306_SetCursor((128 - 11 * 10) / 2, 26);
 80022e2:	211a      	movs	r1, #26
 80022e4:	2009      	movs	r0, #9
 80022e6:	f007 fa03 	bl	80096f0 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected!", Font_11x18, White_);
 80022ea:	4a38      	ldr	r2, [pc, #224]	; (80023cc <_Z14StartUpdateLCDPv+0x220>)
 80022ec:	2301      	movs	r3, #1
 80022ee:	ca06      	ldmia	r2, {r1, r2}
 80022f0:	483b      	ldr	r0, [pc, #236]	; (80023e0 <_Z14StartUpdateLCDPv+0x234>)
 80022f2:	f007 f9d7 	bl	80096a4 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 80022f6:	f007 f8c5 	bl	8009484 <ssd1306_UpdateScreen>
            display_run_once = 1;
 80022fa:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <_Z14StartUpdateLCDPv+0x20c>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
          }
          break;
 8002300:	e046      	b.n	8002390 <_Z14StartUpdateLCDPv+0x1e4>
        }

        case 1:
          display_run_once = 1;
 8002302:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <_Z14StartUpdateLCDPv+0x20c>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 8002308:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <_Z14StartUpdateLCDPv+0x228>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 800230e:	2000      	movs	r0, #0
 8002310:	f007 f894 	bl	800943c <ssd1306_Fill>
          ssd1306_SetCursor((128 - 11 * 5) / 2, 0);
 8002314:	2100      	movs	r1, #0
 8002316:	2024      	movs	r0, #36	; 0x24
 8002318:	f007 f9ea 	bl	80096f0 <ssd1306_SetCursor>
          ssd1306_WriteString("Pair?", Font_11x18, White_);
 800231c:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <_Z14StartUpdateLCDPv+0x220>)
 800231e:	2301      	movs	r3, #1
 8002320:	ca06      	ldmia	r2, {r1, r2}
 8002322:	4830      	ldr	r0, [pc, #192]	; (80023e4 <_Z14StartUpdateLCDPv+0x238>)
 8002324:	f007 f9be 	bl	80096a4 <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8002328:	f007 f8ac 	bl	8009484 <ssd1306_UpdateScreen>
          break;
 800232c:	e031      	b.n	8002392 <_Z14StartUpdateLCDPv+0x1e6>

        case 7:
          Serial.print("Hi");
 800232e:	492e      	ldr	r1, [pc, #184]	; (80023e8 <_Z14StartUpdateLCDPv+0x23c>)
 8002330:	4824      	ldr	r0, [pc, #144]	; (80023c4 <_Z14StartUpdateLCDPv+0x218>)
 8002332:	f7fe f941 	bl	80005b8 <_ZN5Print5printEPKc>
          display_run_once = 1;
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <_Z14StartUpdateLCDPv+0x20c>)
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <_Z14StartUpdateLCDPv+0x228>)
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 8002342:	2000      	movs	r0, #0
 8002344:	f007 f87a 	bl	800943c <ssd1306_Fill>
          ssd1306_UpdateScreen();
 8002348:	f007 f89c 	bl	8009484 <ssd1306_UpdateScreen>
          ssd1306_SetCursor((128 - 11 * 10) / 2, 0);
 800234c:	2100      	movs	r1, #0
 800234e:	2009      	movs	r0, #9
 8002350:	f007 f9ce 	bl	80096f0 <ssd1306_SetCursor>
          ssd1306_WriteString("Pairing...", Font_11x18, White_);
 8002354:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <_Z14StartUpdateLCDPv+0x220>)
 8002356:	2301      	movs	r3, #1
 8002358:	ca06      	ldmia	r2, {r1, r2}
 800235a:	4824      	ldr	r0, [pc, #144]	; (80023ec <_Z14StartUpdateLCDPv+0x240>)
 800235c:	f007 f9a2 	bl	80096a4 <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8002360:	f007 f890 	bl	8009484 <ssd1306_UpdateScreen>

          PS4.pair();
 8002364:	4818      	ldr	r0, [pc, #96]	; (80023c8 <_Z14StartUpdateLCDPv+0x21c>)
 8002366:	f7fe fb76 	bl	8000a56 <_ZN5BTHID4pairEv>
          while (PS4.connected() == 0) {
 800236a:	4817      	ldr	r0, [pc, #92]	; (80023c8 <_Z14StartUpdateLCDPv+0x21c>)
 800236c:	f7fe fc56 	bl	8000c1c <_ZN5PS4BT9connectedEv>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	bf0c      	ite	eq
 8002376:	2301      	moveq	r3, #1
 8002378:	2300      	movne	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <_Z14StartUpdateLCDPv+0x1d6>
 8002380:	e7f3      	b.n	800236a <_Z14StartUpdateLCDPv+0x1be>

          }

          display_no = 0;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <_Z14StartUpdateLCDPv+0x210>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
          display_run_once = 0;
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <_Z14StartUpdateLCDPv+0x20c>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]

          //ssd1306_SetCursor((128 - 11 * 10) / 2, 26);
          //ssd1306_WriteString("Paired!", Font_11x18, White_);
          //ssd1306_UpdateScreen();
          break;
 800238e:	e000      	b.n	8002392 <_Z14StartUpdateLCDPv+0x1e6>
          break;
 8002390:	bf00      	nop
      }
    }
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_LCD;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <_Z14StartUpdateLCDPv+0x204>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	b29a      	uxth	r2, r3
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <_Z14StartUpdateLCDPv+0x208>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <_Z14StartUpdateLCDPv+0x208>)
 80023a4:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(100);
 80023a6:	2064      	movs	r0, #100	; 0x64
 80023a8:	f008 ff32 	bl	800b210 <osDelay>
  }
 80023ac:	e702      	b.n	80021b4 <_Z14StartUpdateLCDPv+0x8>
 80023ae:	bf00      	nop
 80023b0:	200004cc 	.word	0x200004cc
 80023b4:	2000094a 	.word	0x2000094a
 80023b8:	20000944 	.word	0x20000944
 80023bc:	20000940 	.word	0x20000940
 80023c0:	08015dc8 	.word	0x08015dc8
 80023c4:	200005c8 	.word	0x200005c8
 80023c8:	200007c8 	.word	0x200007c8
 80023cc:	20000010 	.word	0x20000010
 80023d0:	08015dd8 	.word	0x08015dd8
 80023d4:	20000943 	.word	0x20000943
 80023d8:	08015ddc 	.word	0x08015ddc
 80023dc:	08015de8 	.word	0x08015de8
 80023e0:	08015dfc 	.word	0x08015dfc
 80023e4:	08015e08 	.word	0x08015e08
 80023e8:	08015e10 	.word	0x08015e10
 80023ec:	08015e14 	.word	0x08015e14

080023f0 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END StartUpdateLCD */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002402:	f000 fbcb 	bl	8002b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40001c00 	.word	0x40001c00

08002414 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
    {
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  Serial.print("\r\nSomething went wrong!");
 8002418:	4903      	ldr	r1, [pc, #12]	; (8002428 <Error_Handler+0x14>)
 800241a:	4804      	ldr	r0, [pc, #16]	; (800242c <Error_Handler+0x18>)
 800241c:	f7fe f8cc 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002424:	e7fe      	b.n	8002424 <Error_Handler+0x10>
 8002426:	bf00      	nop
 8002428:	08015e20 	.word	0x08015e20
 800242c:	200005c8 	.word	0x200005c8

08002430 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8002438:	f7fe fae0 	bl	80009fc <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 800243c:	f7fe fac6 	bl	80009cc <_ZN3P103SetEv>
        spi::init();
 8002440:	f000 f845 	bl	80024ce <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8002444:	f7fe faac 	bl	80009a0 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8002448:	2218      	movs	r2, #24
 800244a:	2188      	movs	r1, #136	; 0x88
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f845 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f864 	bl	8002520 <_ZN8MAX3421eI3P102P9E5resetEv>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf0c      	ite	eq
 800245e:	2301      	moveq	r3, #1
 8002460:	2300      	movne	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
 800246c:	e02b      	b.n	80024c6 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 800246e:	22c1      	movs	r2, #193	; 0xc1
 8002470:	21d8      	movs	r1, #216	; 0xd8
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f832 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8002478:	2260      	movs	r2, #96	; 0x60
 800247a:	21d0      	movs	r1, #208	; 0xd0
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f82d 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8002482:	2204      	movs	r2, #4
 8002484:	21e8      	movs	r1, #232	; 0xe8
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f828 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 800248c:	21e8      	movs	r1, #232	; 0xe8
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f876 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002494:	4603      	mov	r3, r0
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	bf0c      	ite	eq
 800249e:	2301      	moveq	r3, #1
 80024a0:	2300      	movne	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d000      	beq.n	80024aa <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 80024a8:	e7f0      	b.n	800248c <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f88a 	bl	80025c4 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 80024b0:	2220      	movs	r2, #32
 80024b2:	21c8      	movs	r1, #200	; 0xc8
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f811 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 80024ba:	2201      	movs	r2, #1
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f80c 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
        }
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
 80024e8:	4613      	mov	r3, r2
 80024ea:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 80024ec:	f7fe fa7a 	bl	80009e4 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 80024fa:	78bb      	ldrb	r3, [r7, #2]
 80024fc:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 80024fe:	f107 010c 	add.w	r1, r7, #12
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	2202      	movs	r2, #2
 8002508:	4804      	ldr	r0, [pc, #16]	; (800251c <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 800250a:	f004 f87c 	bl	8006606 <HAL_SPI_Transmit>
        SPI_SS::Set();
 800250e:	f7fe fa5d 	bl	80009cc <_ZN3P103SetEv>
        return;
 8002512:	bf00      	nop
};
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000052c 	.word	0x2000052c

08002520 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 800252c:	2220      	movs	r2, #32
 800252e:	2178      	movs	r1, #120	; 0x78
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffd3 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8002536:	2200      	movs	r2, #0
 8002538:	2178      	movs	r1, #120	; 0x78
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffce 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8002540:	89fb      	ldrh	r3, [r7, #14]
 8002542:	3301      	adds	r3, #1
 8002544:	81fb      	strh	r3, [r7, #14]
 8002546:	89fb      	ldrh	r3, [r7, #14]
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00f      	beq.n	8002576 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8002556:	2168      	movs	r1, #104	; 0x68
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f811 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800255e:	4603      	mov	r3, r0
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d100      	bne.n	8002574 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8002572:	e7e5      	b.n	8002540 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8002574:	bf00      	nop
        return ( i);
 8002576:	89fb      	ldrh	r3, [r7, #14]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 800258c:	f7fe fa2a 	bl	80009e4 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8002590:	1cf9      	adds	r1, r7, #3
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	2201      	movs	r2, #1
 8002598:	4809      	ldr	r0, [pc, #36]	; (80025c0 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800259a:	f004 f834 	bl	8006606 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 80025a2:	f107 010f 	add.w	r1, r7, #15
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	2201      	movs	r2, #1
 80025ac:	4804      	ldr	r0, [pc, #16]	; (80025c0 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 80025ae:	f004 f966 	bl	800687e <HAL_SPI_Receive>
        SPI_SS::Set();
 80025b2:	f7fe fa0b 	bl	80009cc <_ZN3P103SetEv>
        return (rv);
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	2000052c 	.word	0x2000052c

080025c4 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 80025cc:	21f8      	movs	r1, #248	; 0xf8
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ffd6 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025de:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2bc0      	cmp	r3, #192	; 0xc0
 80025e4:	d04a      	beq.n	800267c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 80025e6:	2bc0      	cmp	r3, #192	; 0xc0
 80025e8:	dc55      	bgt.n	8002696 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80025ea:	2b80      	cmp	r3, #128	; 0x80
 80025ec:	d006      	beq.n	80025fc <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 80025ee:	2b80      	cmp	r3, #128	; 0x80
 80025f0:	dc51      	bgt.n	8002696 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d046      	beq.n	8002684 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 80025f6:	2b40      	cmp	r3, #64	; 0x40
 80025f8:	d020      	beq.n	800263c <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 80025fa:	e04c      	b.n	8002696 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80025fc:	21d8      	movs	r1, #216	; 0xd8
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ffbe 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002604:	4603      	mov	r3, r0
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8002618:	22c9      	movs	r2, #201	; 0xc9
 800261a:	21d8      	movs	r1, #216	; 0xd8
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff5d 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8002622:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002624:	2202      	movs	r2, #2
 8002626:	701a      	strb	r2, [r3, #0]
                        break;
 8002628:	e035      	b.n	8002696 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800262a:	22cb      	movs	r2, #203	; 0xcb
 800262c:	21d8      	movs	r1, #216	; 0xd8
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ff54 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002636:	2203      	movs	r2, #3
 8002638:	701a      	strb	r2, [r3, #0]
                        break;
 800263a:	e02c      	b.n	8002696 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 800263c:	21d8      	movs	r1, #216	; 0xd8
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ff9e 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002644:	4603      	mov	r3, r0
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8002658:	22cb      	movs	r2, #203	; 0xcb
 800265a:	21d8      	movs	r1, #216	; 0xd8
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ff3d 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002664:	2203      	movs	r2, #3
 8002666:	701a      	strb	r2, [r3, #0]
                        break;
 8002668:	e015      	b.n	8002696 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800266a:	22c9      	movs	r2, #201	; 0xc9
 800266c:	21d8      	movs	r1, #216	; 0xd8
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ff34 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002676:	2202      	movs	r2, #2
 8002678:	701a      	strb	r2, [r3, #0]
                        break;
 800267a:	e00c      	b.n	8002696 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
                        break;
 8002682:	e008      	b.n	8002696 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8002684:	22d1      	movs	r2, #209	; 0xd1
 8002686:	21d8      	movs	r1, #216	; 0xd8
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff27 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
                        break;
 8002694:	bf00      	nop
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000970 	.word	0x20000970

080026a4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d11a      	bne.n	80026ea <_Z41__static_initialization_and_destruction_0ii+0x46>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d115      	bne.n	80026ea <_Z41__static_initialization_and_destruction_0ii+0x46>
SerialClass Serial(&huart2);
 80026be:	490d      	ldr	r1, [pc, #52]	; (80026f4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80026c2:	f7fe f957 	bl	8000974 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80026c6:	480d      	ldr	r0, [pc, #52]	; (80026fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80026c8:	f011 f988 	bl	80139dc <_ZN3USBC1Ev>
BTD Btd(&Usb);
 80026cc:	490b      	ldr	r1, [pc, #44]	; (80026fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80026ce:	480c      	ldr	r0, [pc, #48]	; (8002700 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80026d0:	f00c f91c 	bl	800e90c <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	4909      	ldr	r1, [pc, #36]	; (8002700 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80026da:	480b      	ldr	r0, [pc, #44]	; (8002708 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80026dc:	f7fe fa76 	bl	8000bcc <_ZN5PS4BTC1EP3BTDbPKc>
XBOXONESBT XboxOneS(&Btd);
 80026e0:	2200      	movs	r2, #0
 80026e2:	4907      	ldr	r1, [pc, #28]	; (8002700 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80026e4:	4809      	ldr	r0, [pc, #36]	; (800270c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80026e6:	f7fe fb5d 	bl	8000da4 <_ZN10XBOXONESBTC1EP3BTDb>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000488 	.word	0x20000488
 80026f8:	200005c8 	.word	0x200005c8
 80026fc:	200005dc 	.word	0x200005dc
 8002700:	20000698 	.word	0x20000698
 8002704:	08015c90 	.word	0x08015c90
 8002708:	200007c8 	.word	0x200007c8
 800270c:	20000890 	.word	0x20000890

08002710 <_GLOBAL__sub_I_incomingPSController_global>:
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
 8002714:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002718:	2001      	movs	r0, #1
 800271a:	f7ff ffc3 	bl	80026a4 <_Z41__static_initialization_and_destruction_0ii>
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_MspInit+0x54>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4a11      	ldr	r2, [pc, #68]	; (8002774 <HAL_MspInit+0x54>)
 8002730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002734:	6453      	str	r3, [r2, #68]	; 0x44
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_MspInit+0x54>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	603b      	str	r3, [r7, #0]
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_MspInit+0x54>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_MspInit+0x54>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_MspInit+0x54>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	210f      	movs	r1, #15
 8002762:	f06f 0001 	mvn.w	r0, #1
 8002766:	f000 fb15 	bl	8002d94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a19      	ldr	r2, [pc, #100]	; (80027fc <HAL_I2C_MspInit+0x84>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d12c      	bne.n	80027f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_I2C_MspInit+0x88>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a17      	ldr	r2, [pc, #92]	; (8002800 <HAL_I2C_MspInit+0x88>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_I2C_MspInit+0x88>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027bc:	2312      	movs	r3, #18
 80027be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c0:	2301      	movs	r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c4:	2303      	movs	r3, #3
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027c8:	2304      	movs	r3, #4
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4619      	mov	r1, r3
 80027d2:	480c      	ldr	r0, [pc, #48]	; (8002804 <HAL_I2C_MspInit+0x8c>)
 80027d4:	f000 fdf0 	bl	80033b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_I2C_MspInit+0x88>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	4a07      	ldr	r2, [pc, #28]	; (8002800 <HAL_I2C_MspInit+0x88>)
 80027e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027e6:	6413      	str	r3, [r2, #64]	; 0x40
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_I2C_MspInit+0x88>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027f4:	bf00      	nop
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40005400 	.word	0x40005400
 8002800:	40023800 	.word	0x40023800
 8002804:	40020400 	.word	0x40020400

08002808 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a19      	ldr	r2, [pc, #100]	; (800288c <HAL_SPI_MspInit+0x84>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12b      	bne.n	8002882 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_SPI_MspInit+0x88>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a17      	ldr	r2, [pc, #92]	; (8002890 <HAL_SPI_MspInit+0x88>)
 8002834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_SPI_MspInit+0x88>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_SPI_MspInit+0x88>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <HAL_SPI_MspInit+0x88>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_SPI_MspInit+0x88>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002862:	23e0      	movs	r3, #224	; 0xe0
 8002864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286e:	2303      	movs	r3, #3
 8002870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002872:	2305      	movs	r3, #5
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	4619      	mov	r1, r3
 800287c:	4805      	ldr	r0, [pc, #20]	; (8002894 <HAL_SPI_MspInit+0x8c>)
 800287e:	f000 fd9b 	bl	80033b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	; 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40013000 	.word	0x40013000
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000

08002898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_TIM_Base_MspInit+0x48>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d115      	bne.n	80028d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_TIM_Base_MspInit+0x4c>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <HAL_TIM_Base_MspInit+0x4c>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_TIM_Base_MspInit+0x4c>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2105      	movs	r1, #5
 80028ca:	202d      	movs	r0, #45	; 0x2d
 80028cc:	f000 fa62 	bl	8002d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80028d0:	202d      	movs	r0, #45	; 0x2d
 80028d2:	f000 fa7b 	bl	8002dcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40002000 	.word	0x40002000
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_UART_MspInit+0x84>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d12b      	bne.n	8002962 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_UART_MspInit+0x88>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a17      	ldr	r2, [pc, #92]	; (8002970 <HAL_UART_MspInit+0x88>)
 8002914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_UART_MspInit+0x88>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_UART_MspInit+0x88>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_UART_MspInit+0x88>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HAL_UART_MspInit+0x88>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002942:	230c      	movs	r3, #12
 8002944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294e:	2303      	movs	r3, #3
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002952:	2307      	movs	r3, #7
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	4805      	ldr	r0, [pc, #20]	; (8002974 <HAL_UART_MspInit+0x8c>)
 800295e:	f000 fd2b 	bl	80033b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002962:	bf00      	nop
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40004400 	.word	0x40004400
 8002970:	40023800 	.word	0x40023800
 8002974:	40020000 	.word	0x40020000

08002978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08c      	sub	sp, #48	; 0x30
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8002988:	2200      	movs	r2, #0
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	202c      	movs	r0, #44	; 0x2c
 800298e:	f000 fa01 	bl	8002d94 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002992:	202c      	movs	r0, #44	; 0x2c
 8002994:	f000 fa1a 	bl	8002dcc <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <HAL_InitTick+0xa4>)
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <HAL_InitTick+0xa4>)
 80029a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a6:	6413      	str	r3, [r2, #64]	; 0x40
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <HAL_InitTick+0xa4>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029b4:	f107 0210 	add.w	r2, r7, #16
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f002 fdec 	bl	800559c <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029c4:	f002 fdc2 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 80029c8:	4603      	mov	r3, r0
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_InitTick+0xa8>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	0c9b      	lsrs	r3, r3, #18
 80029d8:	3b01      	subs	r3, #1
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_InitTick+0xac>)
 80029de:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <HAL_InitTick+0xb0>)
 80029e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_InitTick+0xac>)
 80029e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029e8:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 80029ea:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <HAL_InitTick+0xac>)
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <HAL_InitTick+0xac>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_InitTick+0xac>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 80029fc:	4809      	ldr	r0, [pc, #36]	; (8002a24 <HAL_InitTick+0xac>)
 80029fe:	f004 fb21 	bl	8007044 <HAL_TIM_Base_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d104      	bne.n	8002a12 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8002a08:	4806      	ldr	r0, [pc, #24]	; (8002a24 <HAL_InitTick+0xac>)
 8002a0a:	f004 fb6b 	bl	80070e4 <HAL_TIM_Base_Start_IT>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	e000      	b.n	8002a14 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3730      	adds	r7, #48	; 0x30
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	431bde83 	.word	0x431bde83
 8002a24:	200056c0 	.word	0x200056c0
 8002a28:	40001c00 	.word	0x40001c00

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <NMI_Handler+0x4>

08002a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <MemManage_Handler+0x4>

08002a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a42:	e7fe      	b.n	8002a42 <BusFault_Handler+0x4>

08002a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <UsageFault_Handler+0x4>

08002a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002a5e:	f004 fbb1 	bl	80071c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200056c0 	.word	0x200056c0

08002a6c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002a72:	f004 fba7 	bl	80071c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200004cc 	.word	0x200004cc

08002a80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <OTG_FS_IRQHandler+0x10>)
 8002a86:	f001 fc0f 	bl	80042a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20005c3c 	.word	0x20005c3c

08002a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
	return 1;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_kill>:

int _kill(int pid, int sig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002aae:	f013 f84d 	bl	8015b4c <__errno>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2216      	movs	r2, #22
 8002ab6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_exit>:

void _exit (int status)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ffe7 	bl	8002aa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ad6:	e7fe      	b.n	8002ad6 <_exit+0x12>

08002ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <SystemInit+0x28>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <SystemInit+0x28>)
 8002ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <SystemInit+0x28>)
 8002aee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002af2:	609a      	str	r2, [r3, #8]
#endif
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b0a:	e003      	b.n	8002b14 <LoopCopyDataInit>

08002b0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b12:	3104      	adds	r1, #4

08002b14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b14:	480b      	ldr	r0, [pc, #44]	; (8002b44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b1c:	d3f6      	bcc.n	8002b0c <CopyDataInit>
  ldr  r2, =_sbss
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b20:	e002      	b.n	8002b28 <LoopFillZerobss>

08002b22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b24:	f842 3b04 	str.w	r3, [r2], #4

08002b28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b2c:	d3f9      	bcc.n	8002b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b2e:	f7ff ffd3 	bl	8002ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b32:	f013 f811 	bl	8015b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b36:	f7fe f9e7 	bl	8000f08 <main>
  bx  lr    
 8002b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b40:	08017dec 	.word	0x08017dec
  ldr  r0, =_sdata
 8002b44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b48:	20000188 	.word	0x20000188
  ldr  r2, =_sbss
 8002b4c:	20000188 	.word	0x20000188
  ldr  r3, = _ebss
 8002b50:	20006048 	.word	0x20006048

08002b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC_IRQHandler>
	...

08002b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_Init+0x40>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <HAL_Init+0x40>)
 8002b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_Init+0x40>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <HAL_Init+0x40>)
 8002b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <HAL_Init+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <HAL_Init+0x40>)
 8002b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b80:	2003      	movs	r0, #3
 8002b82:	f000 f8fc 	bl	8002d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7ff fef6 	bl	8002978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b8c:	f7ff fdc8 	bl	8002720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023c00 	.word	0x40023c00

08002b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_IncTick+0x20>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_IncTick+0x24>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_IncTick+0x24>)
 8002bae:	6013      	str	r3, [r2, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	2000000c 	.word	0x2000000c
 8002bc0:	20005708 	.word	0x20005708

08002bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <HAL_GetTick+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20005708 	.word	0x20005708

08002bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff ffee 	bl	8002bc4 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d005      	beq.n	8002c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_Delay+0x44>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c02:	bf00      	nop
 8002c04:	f7ff ffde 	bl	8002bc4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d8f7      	bhi.n	8002c04 <HAL_Delay+0x28>
  {
  }
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2000000c 	.word	0x2000000c

08002c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c40:	4013      	ands	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c56:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	60d3      	str	r3, [r2, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <__NVIC_GetPriorityGrouping+0x18>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	f003 0307 	and.w	r3, r3, #7
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db0b      	blt.n	8002cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	4907      	ldr	r1, [pc, #28]	; (8002cc0 <__NVIC_EnableIRQ+0x38>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2001      	movs	r0, #1
 8002caa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f1c3 0307 	rsb	r3, r3, #7
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	bf28      	it	cs
 8002d36:	2304      	movcs	r3, #4
 8002d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d902      	bls.n	8002d48 <NVIC_EncodePriority+0x30>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b03      	subs	r3, #3
 8002d46:	e000      	b.n	8002d4a <NVIC_EncodePriority+0x32>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43d9      	mvns	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	4313      	orrs	r3, r2
         );
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ff4c 	bl	8002c24 <__NVIC_SetPriorityGrouping>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da6:	f7ff ff61 	bl	8002c6c <__NVIC_GetPriorityGrouping>
 8002daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	6978      	ldr	r0, [r7, #20]
 8002db2:	f7ff ffb1 	bl	8002d18 <NVIC_EncodePriority>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff80 	bl	8002cc4 <__NVIC_SetPriority>
}
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff54 	bl	8002c88 <__NVIC_EnableIRQ>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <HAL_FLASH_Program+0xa0>)
 8002dfc:	7e1b      	ldrb	r3, [r3, #24]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_FLASH_Program+0x1e>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e03b      	b.n	8002e7e <HAL_FLASH_Program+0x96>
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <HAL_FLASH_Program+0xa0>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e10:	f000 f870 	bl	8002ef4 <FLASH_WaitForLastOperation>
 8002e14:	4603      	mov	r3, r0
 8002e16:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d12b      	bne.n	8002e76 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d105      	bne.n	8002e30 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002e24:	783b      	ldrb	r3, [r7, #0]
 8002e26:	4619      	mov	r1, r3
 8002e28:	68b8      	ldr	r0, [r7, #8]
 8002e2a:	f000 f91b 	bl	8003064 <FLASH_Program_Byte>
 8002e2e:	e016      	b.n	8002e5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d105      	bne.n	8002e42 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002e36:	883b      	ldrh	r3, [r7, #0]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	68b8      	ldr	r0, [r7, #8]
 8002e3c:	f000 f8ee 	bl	800301c <FLASH_Program_HalfWord>
 8002e40:	e00d      	b.n	8002e5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d105      	bne.n	8002e54 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	68b8      	ldr	r0, [r7, #8]
 8002e4e:	f000 f8c3 	bl	8002fd8 <FLASH_Program_Word>
 8002e52:	e004      	b.n	8002e5e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e58:	68b8      	ldr	r0, [r7, #8]
 8002e5a:	f000 f88b 	bl	8002f74 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e62:	f000 f847 	bl	8002ef4 <FLASH_WaitForLastOperation>
 8002e66:	4603      	mov	r3, r0
 8002e68:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_FLASH_Program+0xa4>)
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	4a07      	ldr	r2, [pc, #28]	; (8002e8c <HAL_FLASH_Program+0xa4>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e76:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <HAL_FLASH_Program+0xa0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	2000570c 	.word	0x2000570c
 8002e8c:	40023c00 	.word	0x40023c00

08002e90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_FLASH_Unlock+0x38>)
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	da0b      	bge.n	8002eba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_FLASH_Unlock+0x38>)
 8002ea4:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_FLASH_Unlock+0x3c>)
 8002ea6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <HAL_FLASH_Unlock+0x38>)
 8002eaa:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_FLASH_Unlock+0x40>)
 8002eac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_FLASH_Unlock+0x38>)
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	da01      	bge.n	8002eba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002eba:	79fb      	ldrb	r3, [r7, #7]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	40023c00 	.word	0x40023c00
 8002ecc:	45670123 	.word	0x45670123
 8002ed0:	cdef89ab 	.word	0xcdef89ab

08002ed4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_FLASH_Lock+0x1c>)
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_FLASH_Lock+0x1c>)
 8002ede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ee2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40023c00 	.word	0x40023c00

08002ef4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f00:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <FLASH_WaitForLastOperation+0x78>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f06:	f7ff fe5d 	bl	8002bc4 <HAL_GetTick>
 8002f0a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002f0c:	e010      	b.n	8002f30 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d00c      	beq.n	8002f30 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <FLASH_WaitForLastOperation+0x38>
 8002f1c:	f7ff fe52 	bl	8002bc4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d201      	bcs.n	8002f30 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e019      	b.n	8002f64 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <FLASH_WaitForLastOperation+0x7c>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e8      	bne.n	8002f0e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <FLASH_WaitForLastOperation+0x7c>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <FLASH_WaitForLastOperation+0x7c>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <FLASH_WaitForLastOperation+0x7c>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002f5a:	f000 f8a5 	bl	80030a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
  
}  
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000570c 	.word	0x2000570c
 8002f70:	40023c00 	.word	0x40023c00

08002f74 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <FLASH_Program_DoubleWord+0x60>)
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <FLASH_Program_DoubleWord+0x60>)
 8002f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <FLASH_Program_DoubleWord+0x60>)
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <FLASH_Program_DoubleWord+0x60>)
 8002f92:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002f96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <FLASH_Program_DoubleWord+0x60>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <FLASH_Program_DoubleWord+0x60>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002faa:	f3bf 8f6f 	isb	sy
}
 8002fae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	000a      	movs	r2, r1
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	68f9      	ldr	r1, [r7, #12]
 8002fc2:	3104      	adds	r1, #4
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40023c00 	.word	0x40023c00

08002fd8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <FLASH_Program_Word+0x40>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	4a0c      	ldr	r2, [pc, #48]	; (8003018 <FLASH_Program_Word+0x40>)
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <FLASH_Program_Word+0x40>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <FLASH_Program_Word+0x40>)
 8002ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <FLASH_Program_Word+0x40>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	4a06      	ldr	r2, [pc, #24]	; (8003018 <FLASH_Program_Word+0x40>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	601a      	str	r2, [r3, #0]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40023c00 	.word	0x40023c00

0800301c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003028:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <FLASH_Program_HalfWord+0x44>)
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <FLASH_Program_HalfWord+0x44>)
 800302e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003032:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <FLASH_Program_HalfWord+0x44>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <FLASH_Program_HalfWord+0x44>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <FLASH_Program_HalfWord+0x44>)
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	4a06      	ldr	r2, [pc, #24]	; (8003060 <FLASH_Program_HalfWord+0x44>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	801a      	strh	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40023c00 	.word	0x40023c00

08003064 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <FLASH_Program_Byte+0x40>)
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <FLASH_Program_Byte+0x40>)
 8003076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800307c:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <FLASH_Program_Byte+0x40>)
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <FLASH_Program_Byte+0x40>)
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003084:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <FLASH_Program_Byte+0x40>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4a06      	ldr	r2, [pc, #24]	; (80030a4 <FLASH_Program_Byte+0x40>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	701a      	strb	r2, [r3, #0]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40023c00 	.word	0x40023c00

080030a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80030ac:	4b2f      	ldr	r3, [pc, #188]	; (800316c <FLASH_SetErrorCode+0xc4>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80030b8:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f043 0310 	orr.w	r3, r3, #16
 80030c0:	4a2b      	ldr	r2, [pc, #172]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 80030c2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80030c4:	4b29      	ldr	r3, [pc, #164]	; (800316c <FLASH_SetErrorCode+0xc4>)
 80030c6:	2210      	movs	r2, #16
 80030c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80030ca:	4b28      	ldr	r3, [pc, #160]	; (800316c <FLASH_SetErrorCode+0xc4>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80030d6:	4b26      	ldr	r3, [pc, #152]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f043 0308 	orr.w	r3, r3, #8
 80030de:	4a24      	ldr	r2, [pc, #144]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 80030e0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <FLASH_SetErrorCode+0xc4>)
 80030e4:	2220      	movs	r2, #32
 80030e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80030e8:	4b20      	ldr	r3, [pc, #128]	; (800316c <FLASH_SetErrorCode+0xc4>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80030f4:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 80030fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003100:	4b1a      	ldr	r3, [pc, #104]	; (800316c <FLASH_SetErrorCode+0xc4>)
 8003102:	2240      	movs	r2, #64	; 0x40
 8003104:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003106:	4b19      	ldr	r3, [pc, #100]	; (800316c <FLASH_SetErrorCode+0xc4>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f043 0302 	orr.w	r3, r3, #2
 800311a:	4a15      	ldr	r2, [pc, #84]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 800311c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <FLASH_SetErrorCode+0xc4>)
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <FLASH_SetErrorCode+0xc4>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 800313a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <FLASH_SetErrorCode+0xc4>)
 800313e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003142:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <FLASH_SetErrorCode+0xc4>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	f043 0320 	orr.w	r3, r3, #32
 8003158:	4a05      	ldr	r2, [pc, #20]	; (8003170 <FLASH_SetErrorCode+0xc8>)
 800315a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <FLASH_SetErrorCode+0xc4>)
 800315e:	2202      	movs	r2, #2
 8003160:	60da      	str	r2, [r3, #12]
  }
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40023c00 	.word	0x40023c00
 8003170:	2000570c 	.word	0x2000570c

08003174 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003186:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_FLASHEx_Erase+0xd8>)
 8003188:	7e1b      	ldrb	r3, [r3, #24]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_FLASHEx_Erase+0x1e>
 800318e:	2302      	movs	r3, #2
 8003190:	e058      	b.n	8003244 <HAL_FLASHEx_Erase+0xd0>
 8003192:	4b2e      	ldr	r3, [pc, #184]	; (800324c <HAL_FLASHEx_Erase+0xd8>)
 8003194:	2201      	movs	r2, #1
 8003196:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003198:	f24c 3050 	movw	r0, #50000	; 0xc350
 800319c:	f7ff feaa 	bl	8002ef4 <FLASH_WaitForLastOperation>
 80031a0:	4603      	mov	r3, r0
 80031a2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d148      	bne.n	800323c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d115      	bne.n	80031e6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f000 f844 	bl	8003254 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031d0:	f7ff fe90 	bl	8002ef4 <FLASH_WaitForLastOperation>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_FLASHEx_Erase+0xdc>)
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_FLASHEx_Erase+0xdc>)
 80031de:	f023 0304 	bic.w	r3, r3, #4
 80031e2:	6113      	str	r3, [r2, #16]
 80031e4:	e028      	b.n	8003238 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	e01c      	b.n	8003228 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	4619      	mov	r1, r3
 80031f6:	68b8      	ldr	r0, [r7, #8]
 80031f8:	f000 f850 	bl	800329c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003200:	f7ff fe78 	bl	8002ef4 <FLASH_WaitForLastOperation>
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_FLASHEx_Erase+0xdc>)
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	4a10      	ldr	r2, [pc, #64]	; (8003250 <HAL_FLASHEx_Erase+0xdc>)
 800320e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003212:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	601a      	str	r2, [r3, #0]
          break;
 8003220:	e00a      	b.n	8003238 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	3301      	adds	r3, #1
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4413      	add	r3, r2
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	429a      	cmp	r2, r3
 8003236:	d3da      	bcc.n	80031ee <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8003238:	f000 f878 	bl	800332c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <HAL_FLASHEx_Erase+0xd8>)
 800323e:	2200      	movs	r2, #0
 8003240:	761a      	strb	r2, [r3, #24]

  return status;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	2000570c 	.word	0x2000570c
 8003250:	40023c00 	.word	0x40023c00

08003254 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <FLASH_MassErase+0x44>)
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <FLASH_MassErase+0x44>)
 8003266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <FLASH_MassErase+0x44>)
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	4a09      	ldr	r2, [pc, #36]	; (8003298 <FLASH_MassErase+0x44>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003278:	4b07      	ldr	r3, [pc, #28]	; (8003298 <FLASH_MassErase+0x44>)
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	4313      	orrs	r3, r2
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <FLASH_MassErase+0x44>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6113      	str	r3, [r2, #16]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40023c00 	.word	0x40023c00

0800329c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	e010      	b.n	80032da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d103      	bne.n	80032c6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80032be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e009      	b.n	80032da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d103      	bne.n	80032d4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80032cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e002      	b.n	80032da <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80032d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <FLASH_Erase_Sector+0x8c>)
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	4a12      	ldr	r2, [pc, #72]	; (8003328 <FLASH_Erase_Sector+0x8c>)
 80032e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <FLASH_Erase_Sector+0x8c>)
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	490f      	ldr	r1, [pc, #60]	; (8003328 <FLASH_Erase_Sector+0x8c>)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <FLASH_Erase_Sector+0x8c>)
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <FLASH_Erase_Sector+0x8c>)
 80032f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80032fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <FLASH_Erase_Sector+0x8c>)
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4313      	orrs	r3, r2
 8003308:	4a07      	ldr	r2, [pc, #28]	; (8003328 <FLASH_Erase_Sector+0x8c>)
 800330a:	f043 0302 	orr.w	r3, r3, #2
 800330e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <FLASH_Erase_Sector+0x8c>)
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	4a04      	ldr	r2, [pc, #16]	; (8003328 <FLASH_Erase_Sector+0x8c>)
 8003316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331a:	6113      	str	r3, [r2, #16]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40023c00 	.word	0x40023c00

0800332c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003330:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <FLASH_FlushCaches+0x88>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003338:	2b00      	cmp	r3, #0
 800333a:	d017      	beq.n	800336c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <FLASH_FlushCaches+0x88>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <FLASH_FlushCaches+0x88>)
 8003342:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003346:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <FLASH_FlushCaches+0x88>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <FLASH_FlushCaches+0x88>)
 800334e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <FLASH_FlushCaches+0x88>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <FLASH_FlushCaches+0x88>)
 800335a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800335e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <FLASH_FlushCaches+0x88>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <FLASH_FlushCaches+0x88>)
 8003366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800336a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <FLASH_FlushCaches+0x88>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003374:	2b00      	cmp	r3, #0
 8003376:	d017      	beq.n	80033a8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <FLASH_FlushCaches+0x88>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a0d      	ldr	r2, [pc, #52]	; (80033b4 <FLASH_FlushCaches+0x88>)
 800337e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003382:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <FLASH_FlushCaches+0x88>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <FLASH_FlushCaches+0x88>)
 800338a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <FLASH_FlushCaches+0x88>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <FLASH_FlushCaches+0x88>)
 8003396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800339a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <FLASH_FlushCaches+0x88>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <FLASH_FlushCaches+0x88>)
 80033a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033a6:	6013      	str	r3, [r2, #0]
  }
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023c00 	.word	0x40023c00

080033b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	e165      	b.n	80036a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d4:	2201      	movs	r2, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	f040 8154 	bne.w	800369a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d005      	beq.n	800340a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003406:	2b02      	cmp	r3, #2
 8003408:	d130      	bne.n	800346c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	2203      	movs	r2, #3
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003440:	2201      	movs	r2, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 0201 	and.w	r2, r3, #1
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b03      	cmp	r3, #3
 8003476:	d017      	beq.n	80034a8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d123      	bne.n	80034fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	08da      	lsrs	r2, r3, #3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3208      	adds	r2, #8
 80034bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	220f      	movs	r2, #15
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	08da      	lsrs	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3208      	adds	r2, #8
 80034f6:	69b9      	ldr	r1, [r7, #24]
 80034f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0203 	and.w	r2, r3, #3
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80ae 	beq.w	800369a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	4b5d      	ldr	r3, [pc, #372]	; (80036b8 <HAL_GPIO_Init+0x300>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	4a5c      	ldr	r2, [pc, #368]	; (80036b8 <HAL_GPIO_Init+0x300>)
 8003548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800354c:	6453      	str	r3, [r2, #68]	; 0x44
 800354e:	4b5a      	ldr	r3, [pc, #360]	; (80036b8 <HAL_GPIO_Init+0x300>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800355a:	4a58      	ldr	r2, [pc, #352]	; (80036bc <HAL_GPIO_Init+0x304>)
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	3302      	adds	r3, #2
 8003562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	220f      	movs	r2, #15
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4f      	ldr	r2, [pc, #316]	; (80036c0 <HAL_GPIO_Init+0x308>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d025      	beq.n	80035d2 <HAL_GPIO_Init+0x21a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4e      	ldr	r2, [pc, #312]	; (80036c4 <HAL_GPIO_Init+0x30c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01f      	beq.n	80035ce <HAL_GPIO_Init+0x216>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4d      	ldr	r2, [pc, #308]	; (80036c8 <HAL_GPIO_Init+0x310>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d019      	beq.n	80035ca <HAL_GPIO_Init+0x212>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4c      	ldr	r2, [pc, #304]	; (80036cc <HAL_GPIO_Init+0x314>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <HAL_GPIO_Init+0x20e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4b      	ldr	r2, [pc, #300]	; (80036d0 <HAL_GPIO_Init+0x318>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00d      	beq.n	80035c2 <HAL_GPIO_Init+0x20a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4a      	ldr	r2, [pc, #296]	; (80036d4 <HAL_GPIO_Init+0x31c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <HAL_GPIO_Init+0x206>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a49      	ldr	r2, [pc, #292]	; (80036d8 <HAL_GPIO_Init+0x320>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_GPIO_Init+0x202>
 80035b6:	2306      	movs	r3, #6
 80035b8:	e00c      	b.n	80035d4 <HAL_GPIO_Init+0x21c>
 80035ba:	2307      	movs	r3, #7
 80035bc:	e00a      	b.n	80035d4 <HAL_GPIO_Init+0x21c>
 80035be:	2305      	movs	r3, #5
 80035c0:	e008      	b.n	80035d4 <HAL_GPIO_Init+0x21c>
 80035c2:	2304      	movs	r3, #4
 80035c4:	e006      	b.n	80035d4 <HAL_GPIO_Init+0x21c>
 80035c6:	2303      	movs	r3, #3
 80035c8:	e004      	b.n	80035d4 <HAL_GPIO_Init+0x21c>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e002      	b.n	80035d4 <HAL_GPIO_Init+0x21c>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_GPIO_Init+0x21c>
 80035d2:	2300      	movs	r3, #0
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	f002 0203 	and.w	r2, r2, #3
 80035da:	0092      	lsls	r2, r2, #2
 80035dc:	4093      	lsls	r3, r2
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e4:	4935      	ldr	r1, [pc, #212]	; (80036bc <HAL_GPIO_Init+0x304>)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	3302      	adds	r3, #2
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f2:	4b3a      	ldr	r3, [pc, #232]	; (80036dc <HAL_GPIO_Init+0x324>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003616:	4a31      	ldr	r2, [pc, #196]	; (80036dc <HAL_GPIO_Init+0x324>)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800361c:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <HAL_GPIO_Init+0x324>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003640:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_GPIO_Init+0x324>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003646:	4b25      	ldr	r3, [pc, #148]	; (80036dc <HAL_GPIO_Init+0x324>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800366a:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <HAL_GPIO_Init+0x324>)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <HAL_GPIO_Init+0x324>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003694:	4a11      	ldr	r2, [pc, #68]	; (80036dc <HAL_GPIO_Init+0x324>)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3301      	adds	r3, #1
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b0f      	cmp	r3, #15
 80036a4:	f67f ae96 	bls.w	80033d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40013800 	.word	0x40013800
 80036c0:	40020000 	.word	0x40020000
 80036c4:	40020400 	.word	0x40020400
 80036c8:	40020800 	.word	0x40020800
 80036cc:	40020c00 	.word	0x40020c00
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40021400 	.word	0x40021400
 80036d8:	40021800 	.word	0x40021800
 80036dc:	40013c00 	.word	0x40013c00

080036e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e001      	b.n	8003702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	807b      	strh	r3, [r7, #2]
 800371c:	4613      	mov	r3, r2
 800371e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003720:	787b      	ldrb	r3, [r7, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800372c:	e003      	b.n	8003736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800372e:	887b      	ldrh	r3, [r7, #2]
 8003730:	041a      	lsls	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	619a      	str	r2, [r3, #24]
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e12b      	b.n	80039ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff f804 	bl	8002778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a8:	f001 fed0 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4a81      	ldr	r2, [pc, #516]	; (80039b8 <HAL_I2C_Init+0x274>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d807      	bhi.n	80037c8 <HAL_I2C_Init+0x84>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a80      	ldr	r2, [pc, #512]	; (80039bc <HAL_I2C_Init+0x278>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	bf94      	ite	ls
 80037c0:	2301      	movls	r3, #1
 80037c2:	2300      	movhi	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e006      	b.n	80037d6 <HAL_I2C_Init+0x92>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a7d      	ldr	r2, [pc, #500]	; (80039c0 <HAL_I2C_Init+0x27c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bf94      	ite	ls
 80037d0:	2301      	movls	r3, #1
 80037d2:	2300      	movhi	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0e7      	b.n	80039ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a78      	ldr	r2, [pc, #480]	; (80039c4 <HAL_I2C_Init+0x280>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0c9b      	lsrs	r3, r3, #18
 80037e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a6a      	ldr	r2, [pc, #424]	; (80039b8 <HAL_I2C_Init+0x274>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d802      	bhi.n	8003818 <HAL_I2C_Init+0xd4>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3301      	adds	r3, #1
 8003816:	e009      	b.n	800382c <HAL_I2C_Init+0xe8>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	4a69      	ldr	r2, [pc, #420]	; (80039c8 <HAL_I2C_Init+0x284>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	3301      	adds	r3, #1
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	430b      	orrs	r3, r1
 8003832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800383e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	495c      	ldr	r1, [pc, #368]	; (80039b8 <HAL_I2C_Init+0x274>)
 8003848:	428b      	cmp	r3, r1
 800384a:	d819      	bhi.n	8003880 <HAL_I2C_Init+0x13c>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1e59      	subs	r1, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fbb1 f3f3 	udiv	r3, r1, r3
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003860:	400b      	ands	r3, r1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_I2C_Init+0x138>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1e59      	subs	r1, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fbb1 f3f3 	udiv	r3, r1, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387a:	e051      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 800387c:	2304      	movs	r3, #4
 800387e:	e04f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d111      	bne.n	80038ac <HAL_I2C_Init+0x168>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e012      	b.n	80038d2 <HAL_I2C_Init+0x18e>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e58      	subs	r0, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	0099      	lsls	r1, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Init+0x196>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e022      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10e      	bne.n	8003900 <HAL_I2C_Init+0x1bc>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1e58      	subs	r0, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	440b      	add	r3, r1
 80038f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f4:	3301      	adds	r3, #1
 80038f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fe:	e00f      	b.n	8003920 <HAL_I2C_Init+0x1dc>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	6809      	ldr	r1, [r1, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800394e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6911      	ldr	r1, [r2, #16]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	4311      	orrs	r1, r2
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	430b      	orrs	r3, r1
 8003962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	000186a0 	.word	0x000186a0
 80039bc:	001e847f 	.word	0x001e847f
 80039c0:	003d08ff 	.word	0x003d08ff
 80039c4:	431bde83 	.word	0x431bde83
 80039c8:	10624dd3 	.word	0x10624dd3

080039cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	461a      	mov	r2, r3
 80039da:	4603      	mov	r3, r0
 80039dc:	817b      	strh	r3, [r7, #10]
 80039de:	460b      	mov	r3, r1
 80039e0:	813b      	strh	r3, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039e6:	f7ff f8ed 	bl	8002bc4 <HAL_GetTick>
 80039ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	f040 80d9 	bne.w	8003bac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2319      	movs	r3, #25
 8003a00:	2201      	movs	r2, #1
 8003a02:	496d      	ldr	r1, [pc, #436]	; (8003bb8 <HAL_I2C_Mem_Write+0x1ec>)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f971 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0cc      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2C_Mem_Write+0x56>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e0c5      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d007      	beq.n	8003a48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2221      	movs	r2, #33	; 0x21
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a4d      	ldr	r2, [pc, #308]	; (8003bbc <HAL_I2C_Mem_Write+0x1f0>)
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a8a:	88f8      	ldrh	r0, [r7, #6]
 8003a8c:	893a      	ldrh	r2, [r7, #8]
 8003a8e:	8979      	ldrh	r1, [r7, #10]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	4603      	mov	r3, r0
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f890 	bl	8003bc0 <I2C_RequestMemoryWrite>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d052      	beq.n	8003b4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e081      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f9f2 	bl	8003e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d107      	bne.n	8003ad2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06b      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d11b      	bne.n	8003b4c <HAL_I2C_Mem_Write+0x180>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1aa      	bne.n	8003aaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f9de 	bl	8003f1a <I2C_WaitOnBTFFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00d      	beq.n	8003b80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d107      	bne.n	8003b7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e016      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	00100002 	.word	0x00100002
 8003bbc:	ffff0000 	.word	0xffff0000

08003bc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	817b      	strh	r3, [r7, #10]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	813b      	strh	r3, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f878 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c10:	d103      	bne.n	8003c1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e05f      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c1e:	897b      	ldrh	r3, [r7, #10]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	6a3a      	ldr	r2, [r7, #32]
 8003c32:	492d      	ldr	r1, [pc, #180]	; (8003ce8 <I2C_RequestMemoryWrite+0x128>)
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f8b0 	bl	8003d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e04c      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5c:	6a39      	ldr	r1, [r7, #32]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f91a 	bl	8003e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d107      	bne.n	8003c82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e02b      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d105      	bne.n	8003c98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8c:	893b      	ldrh	r3, [r7, #8]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	611a      	str	r2, [r3, #16]
 8003c96:	e021      	b.n	8003cdc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c98:	893b      	ldrh	r3, [r7, #8]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca8:	6a39      	ldr	r1, [r7, #32]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f8f4 	bl	8003e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00d      	beq.n	8003cd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d107      	bne.n	8003cce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ccc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e005      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd2:	893b      	ldrh	r3, [r7, #8]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	00010002 	.word	0x00010002

08003cec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cfc:	e025      	b.n	8003d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d021      	beq.n	8003d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d06:	f7fe ff5d 	bl	8002bc4 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d302      	bcc.n	8003d1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d116      	bne.n	8003d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e023      	b.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d10d      	bne.n	8003d70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf0c      	ite	eq
 8003d66:	2301      	moveq	r3, #1
 8003d68:	2300      	movne	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	e00c      	b.n	8003d8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bf0c      	ite	eq
 8003d82:	2301      	moveq	r3, #1
 8003d84:	2300      	movne	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d0b6      	beq.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003da8:	e051      	b.n	8003e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db8:	d123      	bne.n	8003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f043 0204 	orr.w	r2, r3, #4
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e046      	b.n	8003e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d021      	beq.n	8003e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0a:	f7fe fedb 	bl	8002bc4 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d302      	bcc.n	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d116      	bne.n	8003e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f043 0220 	orr.w	r2, r3, #32
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e020      	b.n	8003e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	0c1b      	lsrs	r3, r3, #16
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d10c      	bne.n	8003e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4013      	ands	r3, r2
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bf14      	ite	ne
 8003e6a:	2301      	movne	r3, #1
 8003e6c:	2300      	moveq	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	e00b      	b.n	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	43da      	mvns	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d18d      	bne.n	8003daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ea4:	e02d      	b.n	8003f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f878 	bl	8003f9c <I2C_IsAcknowledgeFailed>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e02d      	b.n	8003f12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d021      	beq.n	8003f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebe:	f7fe fe81 	bl	8002bc4 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d302      	bcc.n	8003ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d116      	bne.n	8003f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f043 0220 	orr.w	r2, r3, #32
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e007      	b.n	8003f12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0c:	2b80      	cmp	r3, #128	; 0x80
 8003f0e:	d1ca      	bne.n	8003ea6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f26:	e02d      	b.n	8003f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f837 	bl	8003f9c <I2C_IsAcknowledgeFailed>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e02d      	b.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3e:	d021      	beq.n	8003f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f40:	f7fe fe40 	bl	8002bc4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d116      	bne.n	8003f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e007      	b.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d1ca      	bne.n	8003f28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb2:	d11b      	bne.n	8003fec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	f043 0204 	orr.w	r2, r3, #4
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffc:	b08f      	sub	sp, #60	; 0x3c
 8003ffe:	af0a      	add	r7, sp, #40	; 0x28
 8004000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e116      	b.n	800423a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f009 fea8 	bl	800dd7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2203      	movs	r2, #3
 8004030:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f003 ff47 	bl	8007ede <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	687e      	ldr	r6, [r7, #4]
 8004058:	466d      	mov	r5, sp
 800405a:	f106 0410 	add.w	r4, r6, #16
 800405e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004066:	e894 0003 	ldmia.w	r4, {r0, r1}
 800406a:	e885 0003 	stmia.w	r5, {r0, r1}
 800406e:	1d33      	adds	r3, r6, #4
 8004070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004072:	6838      	ldr	r0, [r7, #0]
 8004074:	f003 fe1e 	bl	8007cb4 <USB_CoreInit>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2202      	movs	r2, #2
 8004082:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0d7      	b.n	800423a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2100      	movs	r1, #0
 8004090:	4618      	mov	r0, r3
 8004092:	f003 ff35 	bl	8007f00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	e04a      	b.n	8004132 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	333d      	adds	r3, #61	; 0x3d
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040b0:	7bfa      	ldrb	r2, [r7, #15]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	333c      	adds	r3, #60	; 0x3c
 80040c0:	7bfa      	ldrb	r2, [r7, #15]
 80040c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	b298      	uxth	r0, r3
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	3342      	adds	r3, #66	; 0x42
 80040d8:	4602      	mov	r2, r0
 80040da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040dc:	7bfa      	ldrb	r2, [r7, #15]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	333f      	adds	r3, #63	; 0x3f
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040f0:	7bfa      	ldrb	r2, [r7, #15]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	3344      	adds	r3, #68	; 0x44
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	3348      	adds	r3, #72	; 0x48
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004118:	7bfa      	ldrb	r2, [r7, #15]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	3350      	adds	r3, #80	; 0x50
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	3301      	adds	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	429a      	cmp	r2, r3
 800413a:	d3af      	bcc.n	800409c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800413c:	2300      	movs	r3, #0
 800413e:	73fb      	strb	r3, [r7, #15]
 8004140:	e044      	b.n	80041cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004142:	7bfa      	ldrb	r2, [r7, #15]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004158:	7bfa      	ldrb	r2, [r7, #15]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004184:	7bfa      	ldrb	r2, [r7, #15]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041b0:	7bfa      	ldrb	r2, [r7, #15]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	3301      	adds	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
 80041cc:	7bfa      	ldrb	r2, [r7, #15]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d3b5      	bcc.n	8004142 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	687e      	ldr	r6, [r7, #4]
 80041de:	466d      	mov	r5, sp
 80041e0:	f106 0410 	add.w	r4, r6, #16
 80041e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80041f4:	1d33      	adds	r3, r6, #4
 80041f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041f8:	6838      	ldr	r0, [r7, #0]
 80041fa:	f003 feab 	bl	8007f54 <USB_DevInit>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e014      	b.n	800423a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2b01      	cmp	r3, #1
 8004226:	d102      	bne.n	800422e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f001 f879 	bl	8005320 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f004 fee6 	bl	8009004 <USB_DevDisconnect>

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004242 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_PCD_Start+0x1c>
 800425a:	2302      	movs	r3, #2
 800425c:	e020      	b.n	80042a0 <HAL_PCD_Start+0x5e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	2b01      	cmp	r3, #1
 800426c:	d109      	bne.n	8004282 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004272:	2b01      	cmp	r3, #1
 8004274:	d005      	beq.n	8004282 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f003 fe18 	bl	8007ebc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f004 fe96 	bl	8008fc2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b08d      	sub	sp, #52	; 0x34
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f004 ff54 	bl	800916c <USB_GetMode>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f040 83ca 	bne.w	8004a60 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 feb8 	bl	8009046 <USB_ReadInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 83c0 	beq.w	8004a5e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f004 feaf 	bl	8009046 <USB_ReadInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d107      	bne.n	8004302 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f002 0202 	and.w	r2, r2, #2
 8004300:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f004 fe9d 	bl	8009046 <USB_ReadInterrupts>
 800430c:	4603      	mov	r3, r0
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b10      	cmp	r3, #16
 8004314:	d161      	bne.n	80043da <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699a      	ldr	r2, [r3, #24]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0210 	bic.w	r2, r2, #16
 8004324:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	3304      	adds	r3, #4
 8004344:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	0c5b      	lsrs	r3, r3, #17
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	2b02      	cmp	r3, #2
 8004350:	d124      	bne.n	800439c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d035      	beq.n	80043ca <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800436c:	b29b      	uxth	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	6a38      	ldr	r0, [r7, #32]
 8004372:	f004 fd03 	bl	8008d7c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004382:	441a      	add	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	699a      	ldr	r2, [r3, #24]
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	091b      	lsrs	r3, r3, #4
 8004390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004394:	441a      	add	r2, r3
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	619a      	str	r2, [r3, #24]
 800439a:	e016      	b.n	80043ca <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	0c5b      	lsrs	r3, r3, #17
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	2b06      	cmp	r3, #6
 80043a6:	d110      	bne.n	80043ca <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043ae:	2208      	movs	r2, #8
 80043b0:	4619      	mov	r1, r3
 80043b2:	6a38      	ldr	r0, [r7, #32]
 80043b4:	f004 fce2 	bl	8008d7c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043c4:	441a      	add	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0210 	orr.w	r2, r2, #16
 80043d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f004 fe31 	bl	8009046 <USB_ReadInterrupts>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043ee:	d16e      	bne.n	80044ce <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f004 fe37 	bl	800906c <USB_ReadDevAllOutEpInterrupt>
 80043fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004400:	e062      	b.n	80044c8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d057      	beq.n	80044bc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	4611      	mov	r1, r2
 8004416:	4618      	mov	r0, r3
 8004418:	f004 fe5c 	bl	80090d4 <USB_ReadDevOutEPInterrupt>
 800441c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00c      	beq.n	8004442 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	461a      	mov	r2, r3
 8004436:	2301      	movs	r3, #1
 8004438:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800443a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fdc5 	bl	8004fcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00c      	beq.n	8004466 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004458:	461a      	mov	r2, r3
 800445a:	2308      	movs	r3, #8
 800445c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800445e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 febf 	bl	80051e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	461a      	mov	r2, r3
 800447e:	2310      	movs	r3, #16
 8004480:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b00      	cmp	r3, #0
 800448a:	d008      	beq.n	800449e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004498:	461a      	mov	r2, r3
 800449a:	2320      	movs	r3, #32
 800449c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b4:	461a      	mov	r2, r3
 80044b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	3301      	adds	r3, #1
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d199      	bne.n	8004402 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f004 fdb7 	bl	8009046 <USB_ReadInterrupts>
 80044d8:	4603      	mov	r3, r0
 80044da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044e2:	f040 80c0 	bne.w	8004666 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f004 fdd8 	bl	80090a0 <USB_ReadDevAllInEpInterrupt>
 80044f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80044f6:	e0b2      	b.n	800465e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80a7 	beq.w	8004652 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f004 fdfe 	bl	8009110 <USB_ReadDevInEPInterrupt>
 8004514:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d057      	beq.n	80045d0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	2201      	movs	r2, #1
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	43db      	mvns	r3, r3
 800453a:	69f9      	ldr	r1, [r7, #28]
 800453c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004540:	4013      	ands	r3, r2
 8004542:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	461a      	mov	r2, r3
 8004552:	2301      	movs	r3, #1
 8004554:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d132      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	3348      	adds	r3, #72	; 0x48
 800456e:	6819      	ldr	r1, [r3, #0]
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4403      	add	r3, r0
 800457e:	3344      	adds	r3, #68	; 0x44
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4419      	add	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4403      	add	r3, r0
 8004592:	3348      	adds	r3, #72	; 0x48
 8004594:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	d113      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x31c>
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	3350      	adds	r3, #80	; 0x50
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d108      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045bc:	461a      	mov	r2, r3
 80045be:	2101      	movs	r1, #1
 80045c0:	f004 fe06 	bl	80091d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	4619      	mov	r1, r3
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f009 fc57 	bl	800de7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	461a      	mov	r2, r3
 80045e8:	2308      	movs	r3, #8
 80045ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004602:	461a      	mov	r2, r3
 8004604:	2310      	movs	r3, #16
 8004606:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461e:	461a      	mov	r2, r3
 8004620:	2340      	movs	r3, #64	; 0x40
 8004622:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463a:	461a      	mov	r2, r3
 800463c:	2302      	movs	r3, #2
 800463e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800464a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fc30 	bl	8004eb2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	3301      	adds	r3, #1
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	f47f af49 	bne.w	80044f8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f004 fceb 	bl	8009046 <USB_ReadInterrupts>
 8004670:	4603      	mov	r3, r0
 8004672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800467a:	d122      	bne.n	80046c2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004696:	2b01      	cmp	r3, #1
 8004698:	d108      	bne.n	80046ac <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80046a2:	2100      	movs	r1, #0
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f009 fe27 	bl	800e2f8 <HAL_PCDEx_LPM_Callback>
 80046aa:	e002      	b.n	80046b2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f009 fc5d 	bl	800df6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80046c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f004 fcbd 	bl	8009046 <USB_ReadInterrupts>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d6:	d112      	bne.n	80046fe <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d102      	bne.n	80046ee <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f009 fc19 	bl	800df20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80046fc:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f004 fc9f 	bl	8009046 <USB_ReadInterrupts>
 8004708:	4603      	mov	r3, r0
 800470a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800470e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004712:	d121      	bne.n	8004758 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004722:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800472a:	2b00      	cmp	r3, #0
 800472c:	d111      	bne.n	8004752 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	f003 020f 	and.w	r2, r3, #15
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004748:	2101      	movs	r1, #1
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f009 fdd4 	bl	800e2f8 <HAL_PCDEx_LPM_Callback>
 8004750:	e002      	b.n	8004758 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f009 fbe4 	bl	800df20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f004 fc72 	bl	8009046 <USB_ReadInterrupts>
 8004762:	4603      	mov	r3, r0
 8004764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476c:	f040 80c7 	bne.w	80048fe <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2110      	movs	r1, #16
 800478a:	4618      	mov	r0, r3
 800478c:	f003 fd40 	bl	8008210 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004790:	2300      	movs	r3, #0
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004794:	e056      	b.n	8004844 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a2:	461a      	mov	r2, r3
 80047a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047c8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047da:	0151      	lsls	r1, r2, #5
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	440a      	add	r2, r1
 80047e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f6:	461a      	mov	r2, r3
 80047f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004818:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800481c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800483c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	3301      	adds	r3, #1
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800484a:	429a      	cmp	r2, r3
 800484c:	d3a3      	bcc.n	8004796 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800485c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004860:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800487a:	f043 030b 	orr.w	r3, r3, #11
 800487e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004890:	f043 030b 	orr.w	r3, r3, #11
 8004894:	6453      	str	r3, [r2, #68]	; 0x44
 8004896:	e015      	b.n	80048c4 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80048ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048be:	f043 030b 	orr.w	r3, r3, #11
 80048c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048e8:	461a      	mov	r2, r3
 80048ea:	f004 fc71 	bl	80091d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80048fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f004 fb9f 	bl	8009046 <USB_ReadInterrupts>
 8004908:	4603      	mov	r3, r0
 800490a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800490e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004912:	d124      	bne.n	800495e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f004 fc35 	bl	8009188 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f003 fcd5 	bl	80082d2 <USB_GetDevSpeed>
 8004928:	4603      	mov	r3, r0
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681c      	ldr	r4, [r3, #0]
 8004934:	f000 fdfe 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 8004938:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800493e:	b2db      	uxtb	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	4620      	mov	r0, r4
 8004944:	f003 fa18 	bl	8007d78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f009 fac0 	bl	800dece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800495c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f004 fb6f 	bl	8009046 <USB_ReadInterrupts>
 8004968:	4603      	mov	r3, r0
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b08      	cmp	r3, #8
 8004970:	d10a      	bne.n	8004988 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f009 fa9d 	bl	800deb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f002 0208 	and.w	r2, r2, #8
 8004986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f004 fb5a 	bl	8009046 <USB_ReadInterrupts>
 8004992:	4603      	mov	r3, r0
 8004994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499c:	d10f      	bne.n	80049be <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f009 faff 	bl	800dfac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80049bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f004 fb3f 	bl	8009046 <USB_ReadInterrupts>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d2:	d10f      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f009 fad2 	bl	800df88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80049f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f004 fb24 	bl	8009046 <USB_ReadInterrupts>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a08:	d10a      	bne.n	8004a20 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f009 fae0 	bl	800dfd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f004 fb0e 	bl	8009046 <USB_ReadInterrupts>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d115      	bne.n	8004a60 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f009 fad0 	bl	800dfec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
 8004a5c:	e000      	b.n	8004a60 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004a5e:	bf00      	nop
    }
  }
}
 8004a60:	3734      	adds	r7, #52	; 0x34
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd90      	pop	{r4, r7, pc}

08004a66 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_PCD_SetAddress+0x1a>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e013      	b.n	8004aa8 <HAL_PCD_SetAddress+0x42>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	78fa      	ldrb	r2, [r7, #3]
 8004a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	4611      	mov	r1, r2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f004 fa6c 	bl	8008f76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	4608      	mov	r0, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	461a      	mov	r2, r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	70fb      	strb	r3, [r7, #3]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	803b      	strh	r3, [r7, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da0f      	bge.n	8004af6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	f003 020f 	and.w	r2, r3, #15
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	3338      	adds	r3, #56	; 0x38
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	3304      	adds	r3, #4
 8004aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	705a      	strb	r2, [r3, #1]
 8004af4:	e00f      	b.n	8004b16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 020f 	and.w	r2, r3, #15
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b22:	883a      	ldrh	r2, [r7, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	78ba      	ldrb	r2, [r7, #2]
 8004b2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d004      	beq.n	8004b40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b40:	78bb      	ldrb	r3, [r7, #2]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d102      	bne.n	8004b4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_PCD_EP_Open+0xaa>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e00e      	b.n	8004b78 <HAL_PCD_EP_Open+0xc8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f003 fbd7 	bl	800831c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004b76:	7afb      	ldrb	r3, [r7, #11]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da0f      	bge.n	8004bb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	f003 020f 	and.w	r2, r3, #15
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	3338      	adds	r3, #56	; 0x38
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3304      	adds	r3, #4
 8004baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	705a      	strb	r2, [r3, #1]
 8004bb2:	e00f      	b.n	8004bd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 020f 	and.w	r2, r3, #15
 8004bba:	4613      	mov	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4413      	add	r3, r2
 8004bca:	3304      	adds	r3, #4
 8004bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_PCD_EP_Close+0x6e>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e00e      	b.n	8004c0c <HAL_PCD_EP_Close+0x8c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f003 fc15 	bl	800842c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	460b      	mov	r3, r1
 8004c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c24:	7afb      	ldrb	r3, [r7, #11]
 8004c26:	f003 020f 	and.w	r2, r3, #15
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2200      	movs	r2, #0
 8004c54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c56:	7afb      	ldrb	r3, [r7, #11]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d102      	bne.n	8004c70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c70:	7afb      	ldrb	r3, [r7, #11]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	6979      	ldr	r1, [r7, #20]
 8004c88:	f003 fef0 	bl	8008a6c <USB_EP0StartXfer>
 8004c8c:	e008      	b.n	8004ca0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6979      	ldr	r1, [r7, #20]
 8004c9c:	f003 fca2 	bl	80085e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b086      	sub	sp, #24
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cba:	7afb      	ldrb	r3, [r7, #11]
 8004cbc:	f003 020f 	and.w	r2, r3, #15
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	3338      	adds	r3, #56	; 0x38
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4413      	add	r3, r2
 8004cce:	3304      	adds	r3, #4
 8004cd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cea:	7afb      	ldrb	r3, [r7, #11]
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d102      	bne.n	8004d04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d04:	7afb      	ldrb	r3, [r7, #11]
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6979      	ldr	r1, [r7, #20]
 8004d1c:	f003 fea6 	bl	8008a6c <USB_EP0StartXfer>
 8004d20:	e008      	b.n	8004d34 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	f003 fc58 	bl	80085e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	f003 020f 	and.w	r2, r3, #15
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d901      	bls.n	8004d5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e050      	b.n	8004dfe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	da0f      	bge.n	8004d84 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	f003 020f 	and.w	r2, r3, #15
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	3338      	adds	r3, #56	; 0x38
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	4413      	add	r3, r2
 8004d78:	3304      	adds	r3, #4
 8004d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	705a      	strb	r2, [r3, #1]
 8004d82:	e00d      	b.n	8004da0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	4613      	mov	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	3304      	adds	r3, #4
 8004d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_PCD_EP_SetStall+0x82>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e01e      	b.n	8004dfe <HAL_PCD_EP_SetStall+0xc0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68f9      	ldr	r1, [r7, #12]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f003 fffd 	bl	8008dce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	b2d9      	uxtb	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004dee:	461a      	mov	r2, r3
 8004df0:	f004 f9ee 	bl	80091d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	f003 020f 	and.w	r2, r3, #15
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d901      	bls.n	8004e24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e042      	b.n	8004eaa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da0f      	bge.n	8004e4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	f003 020f 	and.w	r2, r3, #15
 8004e32:	4613      	mov	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	3338      	adds	r3, #56	; 0x38
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4413      	add	r3, r2
 8004e40:	3304      	adds	r3, #4
 8004e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	705a      	strb	r2, [r3, #1]
 8004e4a:	e00f      	b.n	8004e6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	f003 020f 	and.w	r2, r3, #15
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4413      	add	r3, r2
 8004e62:	3304      	adds	r3, #4
 8004e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e72:	78fb      	ldrb	r3, [r7, #3]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_PCD_EP_ClrStall+0x86>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e00e      	b.n	8004eaa <HAL_PCD_EP_ClrStall+0xa4>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68f9      	ldr	r1, [r7, #12]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f004 f805 	bl	8008eaa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b08a      	sub	sp, #40	; 0x28
 8004eb6:	af02      	add	r7, sp, #8
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	3338      	adds	r3, #56	; 0x38
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d901      	bls.n	8004eea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e06c      	b.n	8004fc4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d902      	bls.n	8004f06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	3303      	adds	r3, #3
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f0e:	e02b      	b.n	8004f68 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	69fa      	ldr	r2, [r7, #28]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d902      	bls.n	8004f2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	3303      	adds	r3, #3
 8004f30:	089b      	lsrs	r3, r3, #2
 8004f32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68d9      	ldr	r1, [r3, #12]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	4603      	mov	r3, r0
 8004f4a:	6978      	ldr	r0, [r7, #20]
 8004f4c:	f003 fee1 	bl	8008d12 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	441a      	add	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	441a      	add	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d809      	bhi.n	8004f92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d203      	bcs.n	8004f92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1be      	bne.n	8004f10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d811      	bhi.n	8004fc2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	6939      	ldr	r1, [r7, #16]
 8004fba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	333c      	adds	r3, #60	; 0x3c
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	f040 80a0 	bne.w	8005144 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d015      	beq.n	800503a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a72      	ldr	r2, [pc, #456]	; (80051dc <PCD_EP_OutXfrComplete_int+0x210>)
 8005012:	4293      	cmp	r3, r2
 8005014:	f240 80dd 	bls.w	80051d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80d7 	beq.w	80051d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	461a      	mov	r2, r3
 8005032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005036:	6093      	str	r3, [r2, #8]
 8005038:	e0cb      	b.n	80051d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d009      	beq.n	8005058 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	461a      	mov	r2, r3
 8005052:	2320      	movs	r3, #32
 8005054:	6093      	str	r3, [r2, #8]
 8005056:	e0bc      	b.n	80051d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800505e:	2b00      	cmp	r3, #0
 8005060:	f040 80b7 	bne.w	80051d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a5d      	ldr	r2, [pc, #372]	; (80051dc <PCD_EP_OutXfrComplete_int+0x210>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d90f      	bls.n	800508c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005082:	461a      	mov	r2, r3
 8005084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005088:	6093      	str	r3, [r2, #8]
 800508a:	e0a2      	b.n	80051d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800509e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	0159      	lsls	r1, r3, #5
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	440b      	add	r3, r1
 80050a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80050b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	4613      	mov	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4403      	add	r3, r0
 80050c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80050c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050da:	6819      	ldr	r1, [r3, #0]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4403      	add	r3, r0
 80050ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4419      	add	r1, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4403      	add	r3, r0
 8005100:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005104:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d114      	bne.n	8005136 <PCD_EP_OutXfrComplete_int+0x16a>
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d108      	bne.n	8005136 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800512e:	461a      	mov	r2, r3
 8005130:	2101      	movs	r1, #1
 8005132:	f004 f84d 	bl	80091d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f008 fe83 	bl	800de48 <HAL_PCD_DataOutStageCallback>
 8005142:	e046      	b.n	80051d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a26      	ldr	r2, [pc, #152]	; (80051e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d124      	bne.n	8005196 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	461a      	mov	r2, r3
 8005164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005168:	6093      	str	r3, [r2, #8]
 800516a:	e032      	b.n	80051d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	461a      	mov	r2, r3
 8005184:	2320      	movs	r3, #32
 8005186:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f008 fe5a 	bl	800de48 <HAL_PCD_DataOutStageCallback>
 8005194:	e01d      	b.n	80051d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d114      	bne.n	80051c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d108      	bne.n	80051c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051be:	461a      	mov	r2, r3
 80051c0:	2100      	movs	r1, #0
 80051c2:	f004 f805 	bl	80091d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	4619      	mov	r1, r3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f008 fe3b 	bl	800de48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	4f54300a 	.word	0x4f54300a
 80051e0:	4f54310a 	.word	0x4f54310a

080051e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	333c      	adds	r3, #60	; 0x3c
 80051fc:	3304      	adds	r3, #4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4a15      	ldr	r2, [pc, #84]	; (800526c <PCD_EP_OutSetupPacket_int+0x88>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d90e      	bls.n	8005238 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005220:	2b00      	cmp	r3, #0
 8005222:	d009      	beq.n	8005238 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	461a      	mov	r2, r3
 8005232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005236:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f008 fdf3 	bl	800de24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a0a      	ldr	r2, [pc, #40]	; (800526c <PCD_EP_OutSetupPacket_int+0x88>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d90c      	bls.n	8005260 <PCD_EP_OutSetupPacket_int+0x7c>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d108      	bne.n	8005260 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005258:	461a      	mov	r2, r3
 800525a:	2101      	movs	r1, #1
 800525c:	f003 ffb8 	bl	80091d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	4f54300a 	.word	0x4f54300a

08005270 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
 800527c:	4613      	mov	r3, r2
 800527e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d107      	bne.n	800529e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800528e:	883b      	ldrh	r3, [r7, #0]
 8005290:	0419      	lsls	r1, r3, #16
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	430a      	orrs	r2, r1
 800529a:	629a      	str	r2, [r3, #40]	; 0x28
 800529c:	e028      	b.n	80052f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	0c1b      	lsrs	r3, r3, #16
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	4413      	add	r3, r2
 80052aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052ac:	2300      	movs	r3, #0
 80052ae:	73fb      	strb	r3, [r7, #15]
 80052b0:	e00d      	b.n	80052ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	3340      	adds	r3, #64	; 0x40
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	4413      	add	r3, r2
 80052c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	3301      	adds	r3, #1
 80052cc:	73fb      	strb	r3, [r7, #15]
 80052ce:	7bfa      	ldrb	r2, [r7, #15]
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d3ec      	bcc.n	80052b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80052d8:	883b      	ldrh	r3, [r7, #0]
 80052da:	0418      	lsls	r0, r3, #16
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6819      	ldr	r1, [r3, #0]
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	4302      	orrs	r2, r0
 80052e8:	3340      	adds	r3, #64	; 0x40
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	887a      	ldrh	r2, [r7, #2]
 8005310:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005352:	f043 0303 	orr.w	r3, r3, #3
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0cc      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800537c:	4b68      	ldr	r3, [pc, #416]	; (8005520 <HAL_RCC_ClockConfig+0x1b8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d90c      	bls.n	80053a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538a:	4b65      	ldr	r3, [pc, #404]	; (8005520 <HAL_RCC_ClockConfig+0x1b8>)
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005392:	4b63      	ldr	r3, [pc, #396]	; (8005520 <HAL_RCC_ClockConfig+0x1b8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d001      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0b8      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d020      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053bc:	4b59      	ldr	r3, [pc, #356]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	4a58      	ldr	r2, [pc, #352]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053d4:	4b53      	ldr	r3, [pc, #332]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a52      	ldr	r2, [pc, #328]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e0:	4b50      	ldr	r3, [pc, #320]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	494d      	ldr	r1, [pc, #308]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d044      	beq.n	8005488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d107      	bne.n	8005416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005406:	4b47      	ldr	r3, [pc, #284]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d119      	bne.n	8005446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e07f      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d003      	beq.n	8005426 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005422:	2b03      	cmp	r3, #3
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005426:	4b3f      	ldr	r3, [pc, #252]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e06f      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005436:	4b3b      	ldr	r3, [pc, #236]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e067      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005446:	4b37      	ldr	r3, [pc, #220]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f023 0203 	bic.w	r2, r3, #3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	4934      	ldr	r1, [pc, #208]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	4313      	orrs	r3, r2
 8005456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005458:	f7fd fbb4 	bl	8002bc4 <HAL_GetTick>
 800545c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545e:	e00a      	b.n	8005476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005460:	f7fd fbb0 	bl	8002bc4 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	f241 3288 	movw	r2, #5000	; 0x1388
 800546e:	4293      	cmp	r3, r2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e04f      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	4b2b      	ldr	r3, [pc, #172]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 020c 	and.w	r2, r3, #12
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	429a      	cmp	r2, r3
 8005486:	d1eb      	bne.n	8005460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005488:	4b25      	ldr	r3, [pc, #148]	; (8005520 <HAL_RCC_ClockConfig+0x1b8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d20c      	bcs.n	80054b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005496:	4b22      	ldr	r3, [pc, #136]	; (8005520 <HAL_RCC_ClockConfig+0x1b8>)
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <HAL_RCC_ClockConfig+0x1b8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e032      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054bc:	4b19      	ldr	r3, [pc, #100]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4916      	ldr	r1, [pc, #88]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054da:	4b12      	ldr	r3, [pc, #72]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	490e      	ldr	r1, [pc, #56]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054ee:	f000 fbb1 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 80054f2:	4602      	mov	r2, r0
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	490a      	ldr	r1, [pc, #40]	; (8005528 <HAL_RCC_ClockConfig+0x1c0>)
 8005500:	5ccb      	ldrb	r3, [r1, r3]
 8005502:	fa22 f303 	lsr.w	r3, r2, r3
 8005506:	4a09      	ldr	r2, [pc, #36]	; (800552c <HAL_RCC_ClockConfig+0x1c4>)
 8005508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_RCC_ClockConfig+0x1c8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7fd fa32 	bl	8002978 <HAL_InitTick>

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40023c00 	.word	0x40023c00
 8005524:	40023800 	.word	0x40023800
 8005528:	08016ed4 	.word	0x08016ed4
 800552c:	20000004 	.word	0x20000004
 8005530:	20000008 	.word	0x20000008

08005534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005538:	4b03      	ldr	r3, [pc, #12]	; (8005548 <HAL_RCC_GetHCLKFreq+0x14>)
 800553a:	681b      	ldr	r3, [r3, #0]
}
 800553c:	4618      	mov	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	20000004 	.word	0x20000004

0800554c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005550:	f7ff fff0 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b05      	ldr	r3, [pc, #20]	; (800556c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	0a9b      	lsrs	r3, r3, #10
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	4903      	ldr	r1, [pc, #12]	; (8005570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40023800 	.word	0x40023800
 8005570:	08016ee4 	.word	0x08016ee4

08005574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005578:	f7ff ffdc 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 800557c:	4602      	mov	r2, r0
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	0b5b      	lsrs	r3, r3, #13
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	4903      	ldr	r1, [pc, #12]	; (8005598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800558a:	5ccb      	ldrb	r3, [r1, r3]
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40023800 	.word	0x40023800
 8005598:	08016ee4 	.word	0x08016ee4

0800559c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	220f      	movs	r2, #15
 80055aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055ac:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0203 	and.w	r2, r3, #3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055b8:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCC_GetClockConfig+0x5c>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	08db      	lsrs	r3, r3, #3
 80055d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055de:	4b07      	ldr	r3, [pc, #28]	; (80055fc <HAL_RCC_GetClockConfig+0x60>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 020f 	and.w	r2, r3, #15
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	601a      	str	r2, [r3, #0]
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40023800 	.word	0x40023800
 80055fc:	40023c00 	.word	0x40023c00

08005600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08c      	sub	sp, #48	; 0x30
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d010      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005638:	4b6f      	ldr	r3, [pc, #444]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800563a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800563e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	496c      	ldr	r1, [pc, #432]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005656:	2301      	movs	r3, #1
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d010      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005666:	4b64      	ldr	r3, [pc, #400]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	4960      	ldr	r1, [pc, #384]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005684:	2301      	movs	r3, #1
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d017      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005694:	4b58      	ldr	r3, [pc, #352]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800569a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	4955      	ldr	r1, [pc, #340]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b2:	d101      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80056b4:	2301      	movs	r3, #1
 80056b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80056c0:	2301      	movs	r3, #1
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d017      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056d0:	4b49      	ldr	r3, [pc, #292]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056de:	4946      	ldr	r1, [pc, #280]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ee:	d101      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80056f0:	2301      	movs	r3, #1
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80056fc:	2301      	movs	r3, #1
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 808a 	beq.w	8005822 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]
 8005712:	4b39      	ldr	r3, [pc, #228]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	4a38      	ldr	r2, [pc, #224]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571c:	6413      	str	r3, [r2, #64]	; 0x40
 800571e:	4b36      	ldr	r3, [pc, #216]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005726:	60bb      	str	r3, [r7, #8]
 8005728:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800572a:	4b34      	ldr	r3, [pc, #208]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a33      	ldr	r2, [pc, #204]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005734:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005736:	f7fd fa45 	bl	8002bc4 <HAL_GetTick>
 800573a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800573c:	e008      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800573e:	f7fd fa41 	bl	8002bc4 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e278      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005750:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800575c:	4b26      	ldr	r3, [pc, #152]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005764:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02f      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005774:	6a3a      	ldr	r2, [r7, #32]
 8005776:	429a      	cmp	r2, r3
 8005778:	d028      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800577a:	4b1f      	ldr	r3, [pc, #124]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005782:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005784:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005786:	2201      	movs	r2, #1
 8005788:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800578a:	4b1d      	ldr	r3, [pc, #116]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005790:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005796:	4b18      	ldr	r3, [pc, #96]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d114      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fd fa0f 	bl	8002bc4 <HAL_GetTick>
 80057a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a8:	e00a      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057aa:	f7fd fa0b 	bl	8002bc4 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e240      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c0:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0ee      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d8:	d114      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80057da:	4b07      	ldr	r3, [pc, #28]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ee:	4902      	ldr	r1, [pc, #8]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	608b      	str	r3, [r1, #8]
 80057f4:	e00c      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80057f6:	bf00      	nop
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40007000 	.word	0x40007000
 8005800:	42470e40 	.word	0x42470e40
 8005804:	4b4a      	ldr	r3, [pc, #296]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	4a49      	ldr	r2, [pc, #292]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800580a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800580e:	6093      	str	r3, [r2, #8]
 8005810:	4b47      	ldr	r3, [pc, #284]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800581c:	4944      	ldr	r1, [pc, #272]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800581e:	4313      	orrs	r3, r2
 8005820:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005834:	4b3f      	ldr	r3, [pc, #252]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005836:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005844:	4b3a      	ldr	r3, [pc, #232]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005852:	4937      	ldr	r1, [pc, #220]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005866:	4b32      	ldr	r3, [pc, #200]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800586c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005874:	492e      	ldr	r1, [pc, #184]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d011      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005888:	4b29      	ldr	r3, [pc, #164]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800588a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	4926      	ldr	r1, [pc, #152]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058a6:	d101      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80058a8:	2301      	movs	r3, #1
 80058aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80058b8:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80058ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	491a      	ldr	r1, [pc, #104]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d011      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80058dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e8:	4911      	ldr	r1, [pc, #68]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058f8:	d101      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80058fa:	2301      	movs	r3, #1
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d005      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800590c:	f040 80ff 	bne.w	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005910:	4b09      	ldr	r3, [pc, #36]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005916:	f7fd f955 	bl	8002bc4 <HAL_GetTick>
 800591a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800591c:	e00e      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800591e:	f7fd f951 	bl	8002bc4 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d907      	bls.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e188      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005930:	40023800 	.word	0x40023800
 8005934:	424711e0 	.word	0x424711e0
 8005938:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800593c:	4b7e      	ldr	r3, [pc, #504]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1ea      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d009      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005964:	2b00      	cmp	r3, #0
 8005966:	d028      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d124      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005970:	4b71      	ldr	r3, [pc, #452]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005976:	0c1b      	lsrs	r3, r3, #16
 8005978:	f003 0303 	and.w	r3, r3, #3
 800597c:	3301      	adds	r3, #1
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005982:	4b6d      	ldr	r3, [pc, #436]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005988:	0e1b      	lsrs	r3, r3, #24
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	019b      	lsls	r3, r3, #6
 800599a:	431a      	orrs	r2, r3
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	3b01      	subs	r3, #1
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	431a      	orrs	r2, r3
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	061b      	lsls	r3, r3, #24
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	071b      	lsls	r3, r3, #28
 80059b2:	4961      	ldr	r1, [pc, #388]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ce:	d00a      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d035      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e4:	d130      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80059e6:	4b54      	ldr	r3, [pc, #336]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ec:	0c1b      	lsrs	r3, r3, #16
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	3301      	adds	r3, #1
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059f8:	4b4f      	ldr	r3, [pc, #316]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fe:	0f1b      	lsrs	r3, r3, #28
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	019b      	lsls	r3, r3, #6
 8005a10:	431a      	orrs	r2, r3
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	3b01      	subs	r3, #1
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	061b      	lsls	r3, r3, #24
 8005a22:	431a      	orrs	r2, r3
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	071b      	lsls	r3, r3, #28
 8005a28:	4943      	ldr	r1, [pc, #268]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a30:	4b41      	ldr	r3, [pc, #260]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a36:	f023 021f 	bic.w	r2, r3, #31
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	493d      	ldr	r1, [pc, #244]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d029      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5c:	d124      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005a5e:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a64:	0c1b      	lsrs	r3, r3, #16
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a70:	4b31      	ldr	r3, [pc, #196]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a76:	0f1b      	lsrs	r3, r3, #28
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	019b      	lsls	r3, r3, #6
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	3b01      	subs	r3, #1
 8005a92:	041b      	lsls	r3, r3, #16
 8005a94:	431a      	orrs	r2, r3
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	061b      	lsls	r3, r3, #24
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	071b      	lsls	r3, r3, #28
 8005aa0:	4925      	ldr	r1, [pc, #148]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d016      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	019b      	lsls	r3, r3, #6
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	041b      	lsls	r3, r3, #16
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	071b      	lsls	r3, r3, #28
 8005ada:	4917      	ldr	r1, [pc, #92]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ae2:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae8:	f7fd f86c 	bl	8002bc4 <HAL_GetTick>
 8005aec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aee:	e008      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005af0:	f7fd f868 	bl	8002bc4 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e09f      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b02:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0f0      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	f040 8095 	bne.w	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b16:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b1c:	f7fd f852 	bl	8002bc4 <HAL_GetTick>
 8005b20:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b22:	e00f      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005b24:	f7fd f84e 	bl	8002bc4 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d908      	bls.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e085      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005b36:	bf00      	nop
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	42470068 	.word	0x42470068
 8005b40:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b44:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b50:	d0e8      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d02b      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d127      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005b7a:	4b34      	ldr	r3, [pc, #208]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b80:	0c1b      	lsrs	r3, r3, #16
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	3301      	adds	r3, #1
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699a      	ldr	r2, [r3, #24]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	019b      	lsls	r3, r3, #6
 8005b96:	431a      	orrs	r2, r3
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	061b      	lsls	r3, r3, #24
 8005ba8:	4928      	ldr	r1, [pc, #160]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005bb0:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	4922      	ldr	r1, [pc, #136]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01d      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bde:	d118      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	0e1b      	lsrs	r3, r3, #24
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	019b      	lsls	r3, r3, #6
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	085b      	lsrs	r3, r3, #1
 8005c00:	3b01      	subs	r3, #1
 8005c02:	041b      	lsls	r3, r3, #16
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	061b      	lsls	r3, r3, #24
 8005c0a:	4910      	ldr	r1, [pc, #64]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c12:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c18:	f7fc ffd4 	bl	8002bc4 <HAL_GetTick>
 8005c1c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c20:	f7fc ffd0 	bl	8002bc4 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e007      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c3e:	d1ef      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3730      	adds	r7, #48	; 0x30
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	42470070 	.word	0x42470070

08005c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c58:	b088      	sub	sp, #32
 8005c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c70:	4bce      	ldr	r3, [pc, #824]	; (8005fac <HAL_RCC_GetSysClockFreq+0x358>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 030c 	and.w	r3, r3, #12
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	f200 818d 	bhi.w	8005f98 <HAL_RCC_GetSysClockFreq+0x344>
 8005c7e:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <HAL_RCC_GetSysClockFreq+0x30>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08005f99 	.word	0x08005f99
 8005c8c:	08005f99 	.word	0x08005f99
 8005c90:	08005f99 	.word	0x08005f99
 8005c94:	08005cbf 	.word	0x08005cbf
 8005c98:	08005f99 	.word	0x08005f99
 8005c9c:	08005f99 	.word	0x08005f99
 8005ca0:	08005f99 	.word	0x08005f99
 8005ca4:	08005cc5 	.word	0x08005cc5
 8005ca8:	08005f99 	.word	0x08005f99
 8005cac:	08005f99 	.word	0x08005f99
 8005cb0:	08005f99 	.word	0x08005f99
 8005cb4:	08005e39 	.word	0x08005e39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cb8:	4bbd      	ldr	r3, [pc, #756]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005cba:	61bb      	str	r3, [r7, #24]
       break;
 8005cbc:	e16f      	b.n	8005f9e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cbe:	4bbd      	ldr	r3, [pc, #756]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x360>)
 8005cc0:	61bb      	str	r3, [r7, #24]
      break;
 8005cc2:	e16c      	b.n	8005f9e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cc4:	4bb9      	ldr	r3, [pc, #740]	; (8005fac <HAL_RCC_GetSysClockFreq+0x358>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ccc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cce:	4bb7      	ldr	r3, [pc, #732]	; (8005fac <HAL_RCC_GetSysClockFreq+0x358>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d053      	beq.n	8005d82 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cda:	4bb4      	ldr	r3, [pc, #720]	; (8005fac <HAL_RCC_GetSysClockFreq+0x358>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	099b      	lsrs	r3, r3, #6
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cea:	f04f 0100 	mov.w	r1, #0
 8005cee:	ea02 0400 	and.w	r4, r2, r0
 8005cf2:	603c      	str	r4, [r7, #0]
 8005cf4:	400b      	ands	r3, r1
 8005cf6:	607b      	str	r3, [r7, #4]
 8005cf8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	4629      	mov	r1, r5
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	014b      	lsls	r3, r1, #5
 8005d0a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d0e:	0142      	lsls	r2, r0, #5
 8005d10:	4610      	mov	r0, r2
 8005d12:	4619      	mov	r1, r3
 8005d14:	4623      	mov	r3, r4
 8005d16:	1ac0      	subs	r0, r0, r3
 8005d18:	462b      	mov	r3, r5
 8005d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	018b      	lsls	r3, r1, #6
 8005d28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d2c:	0182      	lsls	r2, r0, #6
 8005d2e:	1a12      	subs	r2, r2, r0
 8005d30:	eb63 0301 	sbc.w	r3, r3, r1
 8005d34:	f04f 0000 	mov.w	r0, #0
 8005d38:	f04f 0100 	mov.w	r1, #0
 8005d3c:	00d9      	lsls	r1, r3, #3
 8005d3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d42:	00d0      	lsls	r0, r2, #3
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4621      	mov	r1, r4
 8005d4a:	1852      	adds	r2, r2, r1
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	eb43 0101 	adc.w	r1, r3, r1
 8005d52:	460b      	mov	r3, r1
 8005d54:	f04f 0000 	mov.w	r0, #0
 8005d58:	f04f 0100 	mov.w	r1, #0
 8005d5c:	0259      	lsls	r1, r3, #9
 8005d5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005d62:	0250      	lsls	r0, r2, #9
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	f7fa fa54 	bl	8000220 <__aeabi_uldivmod>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	e04c      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d82:	4b8a      	ldr	r3, [pc, #552]	; (8005fac <HAL_RCC_GetSysClockFreq+0x358>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	099b      	lsrs	r3, r3, #6
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d92:	f04f 0100 	mov.w	r1, #0
 8005d96:	ea02 0a00 	and.w	sl, r2, r0
 8005d9a:	ea03 0b01 	and.w	fp, r3, r1
 8005d9e:	4650      	mov	r0, sl
 8005da0:	4659      	mov	r1, fp
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	014b      	lsls	r3, r1, #5
 8005dac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005db0:	0142      	lsls	r2, r0, #5
 8005db2:	4610      	mov	r0, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	ebb0 000a 	subs.w	r0, r0, sl
 8005dba:	eb61 010b 	sbc.w	r1, r1, fp
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	f04f 0300 	mov.w	r3, #0
 8005dc6:	018b      	lsls	r3, r1, #6
 8005dc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005dcc:	0182      	lsls	r2, r0, #6
 8005dce:	1a12      	subs	r2, r2, r0
 8005dd0:	eb63 0301 	sbc.w	r3, r3, r1
 8005dd4:	f04f 0000 	mov.w	r0, #0
 8005dd8:	f04f 0100 	mov.w	r1, #0
 8005ddc:	00d9      	lsls	r1, r3, #3
 8005dde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005de2:	00d0      	lsls	r0, r2, #3
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	eb12 020a 	adds.w	r2, r2, sl
 8005dec:	eb43 030b 	adc.w	r3, r3, fp
 8005df0:	f04f 0000 	mov.w	r0, #0
 8005df4:	f04f 0100 	mov.w	r1, #0
 8005df8:	0299      	lsls	r1, r3, #10
 8005dfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005dfe:	0290      	lsls	r0, r2, #10
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4610      	mov	r0, r2
 8005e06:	4619      	mov	r1, r3
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	f7fa fa06 	bl	8000220 <__aeabi_uldivmod>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4613      	mov	r3, r2
 8005e1a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e1c:	4b63      	ldr	r3, [pc, #396]	; (8005fac <HAL_RCC_GetSysClockFreq+0x358>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	0c1b      	lsrs	r3, r3, #16
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	3301      	adds	r3, #1
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e34:	61bb      	str	r3, [r7, #24]
      break;
 8005e36:	e0b2      	b.n	8005f9e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e38:	4b5c      	ldr	r3, [pc, #368]	; (8005fac <HAL_RCC_GetSysClockFreq+0x358>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e40:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e42:	4b5a      	ldr	r3, [pc, #360]	; (8005fac <HAL_RCC_GetSysClockFreq+0x358>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d04d      	beq.n	8005eea <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4e:	4b57      	ldr	r3, [pc, #348]	; (8005fac <HAL_RCC_GetSysClockFreq+0x358>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	099b      	lsrs	r3, r3, #6
 8005e54:	461a      	mov	r2, r3
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e5e:	f04f 0100 	mov.w	r1, #0
 8005e62:	ea02 0800 	and.w	r8, r2, r0
 8005e66:	ea03 0901 	and.w	r9, r3, r1
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	014b      	lsls	r3, r1, #5
 8005e78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e7c:	0142      	lsls	r2, r0, #5
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4619      	mov	r1, r3
 8005e82:	ebb0 0008 	subs.w	r0, r0, r8
 8005e86:	eb61 0109 	sbc.w	r1, r1, r9
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	018b      	lsls	r3, r1, #6
 8005e94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e98:	0182      	lsls	r2, r0, #6
 8005e9a:	1a12      	subs	r2, r2, r0
 8005e9c:	eb63 0301 	sbc.w	r3, r3, r1
 8005ea0:	f04f 0000 	mov.w	r0, #0
 8005ea4:	f04f 0100 	mov.w	r1, #0
 8005ea8:	00d9      	lsls	r1, r3, #3
 8005eaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eae:	00d0      	lsls	r0, r2, #3
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	eb12 0208 	adds.w	r2, r2, r8
 8005eb8:	eb43 0309 	adc.w	r3, r3, r9
 8005ebc:	f04f 0000 	mov.w	r0, #0
 8005ec0:	f04f 0100 	mov.w	r1, #0
 8005ec4:	0259      	lsls	r1, r3, #9
 8005ec6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005eca:	0250      	lsls	r0, r2, #9
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	f7fa f9a0 	bl	8000220 <__aeabi_uldivmod>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	61fb      	str	r3, [r7, #28]
 8005ee8:	e04a      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eea:	4b30      	ldr	r3, [pc, #192]	; (8005fac <HAL_RCC_GetSysClockFreq+0x358>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	099b      	lsrs	r3, r3, #6
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005efa:	f04f 0100 	mov.w	r1, #0
 8005efe:	ea02 0400 	and.w	r4, r2, r0
 8005f02:	ea03 0501 	and.w	r5, r3, r1
 8005f06:	4620      	mov	r0, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	014b      	lsls	r3, r1, #5
 8005f14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f18:	0142      	lsls	r2, r0, #5
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	1b00      	subs	r0, r0, r4
 8005f20:	eb61 0105 	sbc.w	r1, r1, r5
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	018b      	lsls	r3, r1, #6
 8005f2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f32:	0182      	lsls	r2, r0, #6
 8005f34:	1a12      	subs	r2, r2, r0
 8005f36:	eb63 0301 	sbc.w	r3, r3, r1
 8005f3a:	f04f 0000 	mov.w	r0, #0
 8005f3e:	f04f 0100 	mov.w	r1, #0
 8005f42:	00d9      	lsls	r1, r3, #3
 8005f44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f48:	00d0      	lsls	r0, r2, #3
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	1912      	adds	r2, r2, r4
 8005f50:	eb45 0303 	adc.w	r3, r5, r3
 8005f54:	f04f 0000 	mov.w	r0, #0
 8005f58:	f04f 0100 	mov.w	r1, #0
 8005f5c:	0299      	lsls	r1, r3, #10
 8005f5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f62:	0290      	lsls	r0, r2, #10
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	f7fa f954 	bl	8000220 <__aeabi_uldivmod>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005f80:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <HAL_RCC_GetSysClockFreq+0x358>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	0f1b      	lsrs	r3, r3, #28
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	61bb      	str	r3, [r7, #24]
      break;
 8005f96:	e002      	b.n	8005f9e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005f9a:	61bb      	str	r3, [r7, #24]
      break;
 8005f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3720      	adds	r7, #32
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005faa:	bf00      	nop
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	00f42400 	.word	0x00f42400
 8005fb4:	007a1200 	.word	0x007a1200

08005fb8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e28d      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 8083 	beq.w	80060de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005fd8:	4b94      	ldr	r3, [pc, #592]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 030c 	and.w	r3, r3, #12
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d019      	beq.n	8006018 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005fe4:	4b91      	ldr	r3, [pc, #580]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d106      	bne.n	8005ffe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005ff0:	4b8e      	ldr	r3, [pc, #568]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ffc:	d00c      	beq.n	8006018 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ffe:	4b8b      	ldr	r3, [pc, #556]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006006:	2b0c      	cmp	r3, #12
 8006008:	d112      	bne.n	8006030 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800600a:	4b88      	ldr	r3, [pc, #544]	; (800622c <HAL_RCC_OscConfig+0x274>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006016:	d10b      	bne.n	8006030 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006018:	4b84      	ldr	r3, [pc, #528]	; (800622c <HAL_RCC_OscConfig+0x274>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d05b      	beq.n	80060dc <HAL_RCC_OscConfig+0x124>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d157      	bne.n	80060dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e25a      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006038:	d106      	bne.n	8006048 <HAL_RCC_OscConfig+0x90>
 800603a:	4b7c      	ldr	r3, [pc, #496]	; (800622c <HAL_RCC_OscConfig+0x274>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a7b      	ldr	r2, [pc, #492]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e01d      	b.n	8006084 <HAL_RCC_OscConfig+0xcc>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006050:	d10c      	bne.n	800606c <HAL_RCC_OscConfig+0xb4>
 8006052:	4b76      	ldr	r3, [pc, #472]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a75      	ldr	r2, [pc, #468]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	4b73      	ldr	r3, [pc, #460]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a72      	ldr	r2, [pc, #456]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e00b      	b.n	8006084 <HAL_RCC_OscConfig+0xcc>
 800606c:	4b6f      	ldr	r3, [pc, #444]	; (800622c <HAL_RCC_OscConfig+0x274>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a6e      	ldr	r2, [pc, #440]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	4b6c      	ldr	r3, [pc, #432]	; (800622c <HAL_RCC_OscConfig+0x274>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a6b      	ldr	r2, [pc, #428]	; (800622c <HAL_RCC_OscConfig+0x274>)
 800607e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d013      	beq.n	80060b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608c:	f7fc fd9a 	bl	8002bc4 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006094:	f7fc fd96 	bl	8002bc4 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b64      	cmp	r3, #100	; 0x64
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e21f      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a6:	4b61      	ldr	r3, [pc, #388]	; (800622c <HAL_RCC_OscConfig+0x274>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCC_OscConfig+0xdc>
 80060b2:	e014      	b.n	80060de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b4:	f7fc fd86 	bl	8002bc4 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060bc:	f7fc fd82 	bl	8002bc4 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b64      	cmp	r3, #100	; 0x64
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e20b      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ce:	4b57      	ldr	r3, [pc, #348]	; (800622c <HAL_RCC_OscConfig+0x274>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x104>
 80060da:	e000      	b.n	80060de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d06f      	beq.n	80061ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80060ea:	4b50      	ldr	r3, [pc, #320]	; (800622c <HAL_RCC_OscConfig+0x274>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 030c 	and.w	r3, r3, #12
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d017      	beq.n	8006126 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80060f6:	4b4d      	ldr	r3, [pc, #308]	; (800622c <HAL_RCC_OscConfig+0x274>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d105      	bne.n	800610e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006102:	4b4a      	ldr	r3, [pc, #296]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00b      	beq.n	8006126 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800610e:	4b47      	ldr	r3, [pc, #284]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006116:	2b0c      	cmp	r3, #12
 8006118:	d11c      	bne.n	8006154 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800611a:	4b44      	ldr	r3, [pc, #272]	; (800622c <HAL_RCC_OscConfig+0x274>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d116      	bne.n	8006154 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006126:	4b41      	ldr	r3, [pc, #260]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d005      	beq.n	800613e <HAL_RCC_OscConfig+0x186>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d001      	beq.n	800613e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e1d3      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613e:	4b3b      	ldr	r3, [pc, #236]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4937      	ldr	r1, [pc, #220]	; (800622c <HAL_RCC_OscConfig+0x274>)
 800614e:	4313      	orrs	r3, r2
 8006150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006152:	e03a      	b.n	80061ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d020      	beq.n	800619e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800615c:	4b34      	ldr	r3, [pc, #208]	; (8006230 <HAL_RCC_OscConfig+0x278>)
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006162:	f7fc fd2f 	bl	8002bc4 <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800616a:	f7fc fd2b 	bl	8002bc4 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e1b4      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617c:	4b2b      	ldr	r3, [pc, #172]	; (800622c <HAL_RCC_OscConfig+0x274>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006188:	4b28      	ldr	r3, [pc, #160]	; (800622c <HAL_RCC_OscConfig+0x274>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4925      	ldr	r1, [pc, #148]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]
 800619c:	e015      	b.n	80061ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800619e:	4b24      	ldr	r3, [pc, #144]	; (8006230 <HAL_RCC_OscConfig+0x278>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fc fd0e 	bl	8002bc4 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ac:	f7fc fd0a 	bl	8002bc4 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e193      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061be:	4b1b      	ldr	r3, [pc, #108]	; (800622c <HAL_RCC_OscConfig+0x274>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d036      	beq.n	8006244 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d016      	beq.n	800620c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061de:	4b15      	ldr	r3, [pc, #84]	; (8006234 <HAL_RCC_OscConfig+0x27c>)
 80061e0:	2201      	movs	r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e4:	f7fc fcee 	bl	8002bc4 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061ec:	f7fc fcea 	bl	8002bc4 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e173      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061fe:	4b0b      	ldr	r3, [pc, #44]	; (800622c <HAL_RCC_OscConfig+0x274>)
 8006200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0f0      	beq.n	80061ec <HAL_RCC_OscConfig+0x234>
 800620a:	e01b      	b.n	8006244 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800620c:	4b09      	ldr	r3, [pc, #36]	; (8006234 <HAL_RCC_OscConfig+0x27c>)
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006212:	f7fc fcd7 	bl	8002bc4 <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006218:	e00e      	b.n	8006238 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800621a:	f7fc fcd3 	bl	8002bc4 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d907      	bls.n	8006238 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e15c      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
 800622c:	40023800 	.word	0x40023800
 8006230:	42470000 	.word	0x42470000
 8006234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006238:	4b8a      	ldr	r3, [pc, #552]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 800623a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1ea      	bne.n	800621a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8097 	beq.w	8006380 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006252:	2300      	movs	r3, #0
 8006254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006256:	4b83      	ldr	r3, [pc, #524]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10f      	bne.n	8006282 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	4b7f      	ldr	r3, [pc, #508]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	4a7e      	ldr	r2, [pc, #504]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 800626c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006270:	6413      	str	r3, [r2, #64]	; 0x40
 8006272:	4b7c      	ldr	r3, [pc, #496]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627a:	60bb      	str	r3, [r7, #8]
 800627c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006282:	4b79      	ldr	r3, [pc, #484]	; (8006468 <HAL_RCC_OscConfig+0x4b0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d118      	bne.n	80062c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800628e:	4b76      	ldr	r3, [pc, #472]	; (8006468 <HAL_RCC_OscConfig+0x4b0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a75      	ldr	r2, [pc, #468]	; (8006468 <HAL_RCC_OscConfig+0x4b0>)
 8006294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800629a:	f7fc fc93 	bl	8002bc4 <HAL_GetTick>
 800629e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a0:	e008      	b.n	80062b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a2:	f7fc fc8f 	bl	8002bc4 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e118      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b4:	4b6c      	ldr	r3, [pc, #432]	; (8006468 <HAL_RCC_OscConfig+0x4b0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0f0      	beq.n	80062a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d106      	bne.n	80062d6 <HAL_RCC_OscConfig+0x31e>
 80062c8:	4b66      	ldr	r3, [pc, #408]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 80062ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062cc:	4a65      	ldr	r2, [pc, #404]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	6713      	str	r3, [r2, #112]	; 0x70
 80062d4:	e01c      	b.n	8006310 <HAL_RCC_OscConfig+0x358>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d10c      	bne.n	80062f8 <HAL_RCC_OscConfig+0x340>
 80062de:	4b61      	ldr	r3, [pc, #388]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 80062e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e2:	4a60      	ldr	r2, [pc, #384]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 80062e4:	f043 0304 	orr.w	r3, r3, #4
 80062e8:	6713      	str	r3, [r2, #112]	; 0x70
 80062ea:	4b5e      	ldr	r3, [pc, #376]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	4a5d      	ldr	r2, [pc, #372]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 80062f0:	f043 0301 	orr.w	r3, r3, #1
 80062f4:	6713      	str	r3, [r2, #112]	; 0x70
 80062f6:	e00b      	b.n	8006310 <HAL_RCC_OscConfig+0x358>
 80062f8:	4b5a      	ldr	r3, [pc, #360]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 80062fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fc:	4a59      	ldr	r2, [pc, #356]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	6713      	str	r3, [r2, #112]	; 0x70
 8006304:	4b57      	ldr	r3, [pc, #348]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 8006306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006308:	4a56      	ldr	r2, [pc, #344]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 800630a:	f023 0304 	bic.w	r3, r3, #4
 800630e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d015      	beq.n	8006344 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006318:	f7fc fc54 	bl	8002bc4 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631e:	e00a      	b.n	8006336 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006320:	f7fc fc50 	bl	8002bc4 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f241 3288 	movw	r2, #5000	; 0x1388
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e0d7      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006336:	4b4b      	ldr	r3, [pc, #300]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 8006338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0ee      	beq.n	8006320 <HAL_RCC_OscConfig+0x368>
 8006342:	e014      	b.n	800636e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006344:	f7fc fc3e 	bl	8002bc4 <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800634a:	e00a      	b.n	8006362 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800634c:	f7fc fc3a 	bl	8002bc4 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	f241 3288 	movw	r2, #5000	; 0x1388
 800635a:	4293      	cmp	r3, r2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e0c1      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006362:	4b40      	ldr	r3, [pc, #256]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 8006364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1ee      	bne.n	800634c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d105      	bne.n	8006380 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006374:	4b3b      	ldr	r3, [pc, #236]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 8006376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006378:	4a3a      	ldr	r2, [pc, #232]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 800637a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800637e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 80ad 	beq.w	80064e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800638a:	4b36      	ldr	r3, [pc, #216]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 030c 	and.w	r3, r3, #12
 8006392:	2b08      	cmp	r3, #8
 8006394:	d060      	beq.n	8006458 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d145      	bne.n	800642a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800639e:	4b33      	ldr	r3, [pc, #204]	; (800646c <HAL_RCC_OscConfig+0x4b4>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a4:	f7fc fc0e 	bl	8002bc4 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ac:	f7fc fc0a 	bl	8002bc4 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e093      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063be:	4b29      	ldr	r3, [pc, #164]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f0      	bne.n	80063ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69da      	ldr	r2, [r3, #28]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	019b      	lsls	r3, r3, #6
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	085b      	lsrs	r3, r3, #1
 80063e2:	3b01      	subs	r3, #1
 80063e4:	041b      	lsls	r3, r3, #16
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	061b      	lsls	r3, r3, #24
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	071b      	lsls	r3, r3, #28
 80063f6:	491b      	ldr	r1, [pc, #108]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063fc:	4b1b      	ldr	r3, [pc, #108]	; (800646c <HAL_RCC_OscConfig+0x4b4>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006402:	f7fc fbdf 	bl	8002bc4 <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800640a:	f7fc fbdb 	bl	8002bc4 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e064      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800641c:	4b11      	ldr	r3, [pc, #68]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0f0      	beq.n	800640a <HAL_RCC_OscConfig+0x452>
 8006428:	e05c      	b.n	80064e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800642a:	4b10      	ldr	r3, [pc, #64]	; (800646c <HAL_RCC_OscConfig+0x4b4>)
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fc fbc8 	bl	8002bc4 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006438:	f7fc fbc4 	bl	8002bc4 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e04d      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644a:	4b06      	ldr	r3, [pc, #24]	; (8006464 <HAL_RCC_OscConfig+0x4ac>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x480>
 8006456:	e045      	b.n	80064e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d107      	bne.n	8006470 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e040      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
 8006464:	40023800 	.word	0x40023800
 8006468:	40007000 	.word	0x40007000
 800646c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006470:	4b1f      	ldr	r3, [pc, #124]	; (80064f0 <HAL_RCC_OscConfig+0x538>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d030      	beq.n	80064e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006488:	429a      	cmp	r2, r3
 800648a:	d129      	bne.n	80064e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d122      	bne.n	80064e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064a0:	4013      	ands	r3, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d119      	bne.n	80064e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	3b01      	subs	r3, #1
 80064ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064bc:	429a      	cmp	r2, r3
 80064be:	d10f      	bne.n	80064e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d107      	bne.n	80064e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064dc:	429a      	cmp	r2, r3
 80064de:	d001      	beq.n	80064e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e000      	b.n	80064e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40023800 	.word	0x40023800

080064f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e07b      	b.n	80065fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d108      	bne.n	8006520 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006516:	d009      	beq.n	800652c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	61da      	str	r2, [r3, #28]
 800651e:	e005      	b.n	800652c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fc f95e 	bl	8002808 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006562:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b0:	ea42 0103 	orr.w	r1, r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	0c1b      	lsrs	r3, r3, #16
 80065ca:	f003 0104 	and.w	r1, r3, #4
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	f003 0210 	and.w	r2, r3, #16
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b088      	sub	sp, #32
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	603b      	str	r3, [r7, #0]
 8006612:	4613      	mov	r3, r2
 8006614:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_SPI_Transmit+0x22>
 8006624:	2302      	movs	r3, #2
 8006626:	e126      	b.n	8006876 <HAL_SPI_Transmit+0x270>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006630:	f7fc fac8 	bl	8002bc4 <HAL_GetTick>
 8006634:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b01      	cmp	r3, #1
 8006644:	d002      	beq.n	800664c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006646:	2302      	movs	r3, #2
 8006648:	77fb      	strb	r3, [r7, #31]
    goto error;
 800664a:	e10b      	b.n	8006864 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_SPI_Transmit+0x52>
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800665c:	e102      	b.n	8006864 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2203      	movs	r2, #3
 8006662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	88fa      	ldrh	r2, [r7, #6]
 8006676:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	88fa      	ldrh	r2, [r7, #6]
 800667c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a4:	d10f      	bne.n	80066c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d007      	beq.n	80066e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ec:	d14b      	bne.n	8006786 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <HAL_SPI_Transmit+0xf6>
 80066f6:	8afb      	ldrh	r3, [r7, #22]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d13e      	bne.n	800677a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	1c9a      	adds	r2, r3, #2
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006720:	e02b      	b.n	800677a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b02      	cmp	r3, #2
 800672e:	d112      	bne.n	8006756 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	881a      	ldrh	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	1c9a      	adds	r2, r3, #2
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	86da      	strh	r2, [r3, #54]	; 0x36
 8006754:	e011      	b.n	800677a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006756:	f7fc fa35 	bl	8002bc4 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d803      	bhi.n	800676e <HAL_SPI_Transmit+0x168>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676c:	d102      	bne.n	8006774 <HAL_SPI_Transmit+0x16e>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d102      	bne.n	800677a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006778:	e074      	b.n	8006864 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1ce      	bne.n	8006722 <HAL_SPI_Transmit+0x11c>
 8006784:	e04c      	b.n	8006820 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <HAL_SPI_Transmit+0x18e>
 800678e:	8afb      	ldrh	r3, [r7, #22]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d140      	bne.n	8006816 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	330c      	adds	r3, #12
 800679e:	7812      	ldrb	r2, [r2, #0]
 80067a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	3b01      	subs	r3, #1
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067ba:	e02c      	b.n	8006816 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d113      	bne.n	80067f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	330c      	adds	r3, #12
 80067d4:	7812      	ldrb	r2, [r2, #0]
 80067d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80067f0:	e011      	b.n	8006816 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067f2:	f7fc f9e7 	bl	8002bc4 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d803      	bhi.n	800680a <HAL_SPI_Transmit+0x204>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006808:	d102      	bne.n	8006810 <HAL_SPI_Transmit+0x20a>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d102      	bne.n	8006816 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006814:	e026      	b.n	8006864 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1cd      	bne.n	80067bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 fbcb 	bl	8006fc0 <SPI_EndRxTxTransaction>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10a      	bne.n	8006854 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800683e:	2300      	movs	r3, #0
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	77fb      	strb	r3, [r7, #31]
 8006860:	e000      	b.n	8006864 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006862:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006874:	7ffb      	ldrb	r3, [r7, #31]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b088      	sub	sp, #32
 8006882:	af02      	add	r7, sp, #8
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	4613      	mov	r3, r2
 800688c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800689a:	d112      	bne.n	80068c2 <HAL_SPI_Receive+0x44>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10e      	bne.n	80068c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2204      	movs	r2, #4
 80068a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80068ac:	88fa      	ldrh	r2, [r7, #6]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	4613      	mov	r3, r2
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f8f1 	bl	8006aa0 <HAL_SPI_TransmitReceive>
 80068be:	4603      	mov	r3, r0
 80068c0:	e0ea      	b.n	8006a98 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <HAL_SPI_Receive+0x52>
 80068cc:	2302      	movs	r3, #2
 80068ce:	e0e3      	b.n	8006a98 <HAL_SPI_Receive+0x21a>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068d8:	f7fc f974 	bl	8002bc4 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d002      	beq.n	80068f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80068ea:	2302      	movs	r3, #2
 80068ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068ee:	e0ca      	b.n	8006a86 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <HAL_SPI_Receive+0x7e>
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006900:	e0c1      	b.n	8006a86 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2204      	movs	r2, #4
 8006906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	88fa      	ldrh	r2, [r7, #6]
 800691a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	88fa      	ldrh	r2, [r7, #6]
 8006920:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006948:	d10f      	bne.n	800696a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006958:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006968:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d007      	beq.n	8006988 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006986:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d162      	bne.n	8006a56 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006990:	e02e      	b.n	80069f0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b01      	cmp	r3, #1
 800699e:	d115      	bne.n	80069cc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f103 020c 	add.w	r2, r3, #12
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	7812      	ldrb	r2, [r2, #0]
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069ca:	e011      	b.n	80069f0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069cc:	f7fc f8fa 	bl	8002bc4 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d803      	bhi.n	80069e4 <HAL_SPI_Receive+0x166>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d102      	bne.n	80069ea <HAL_SPI_Receive+0x16c>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80069ee:	e04a      	b.n	8006a86 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1cb      	bne.n	8006992 <HAL_SPI_Receive+0x114>
 80069fa:	e031      	b.n	8006a60 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d113      	bne.n	8006a32 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	b292      	uxth	r2, r2
 8006a16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	1c9a      	adds	r2, r3, #2
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a30:	e011      	b.n	8006a56 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a32:	f7fc f8c7 	bl	8002bc4 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d803      	bhi.n	8006a4a <HAL_SPI_Receive+0x1cc>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a48:	d102      	bne.n	8006a50 <HAL_SPI_Receive+0x1d2>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a54:	e017      	b.n	8006a86 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1cd      	bne.n	80069fc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fa45 	bl	8006ef4 <SPI_EndRxTransaction>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
 8006a82:	e000      	b.n	8006a86 <HAL_SPI_Receive+0x208>
  }

error :
 8006a84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08c      	sub	sp, #48	; 0x30
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_SPI_TransmitReceive+0x26>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e18a      	b.n	8006ddc <HAL_SPI_TransmitReceive+0x33c>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ace:	f7fc f879 	bl	8002bc4 <HAL_GetTick>
 8006ad2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006ae4:	887b      	ldrh	r3, [r7, #2]
 8006ae6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d00f      	beq.n	8006b10 <HAL_SPI_TransmitReceive+0x70>
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006af6:	d107      	bne.n	8006b08 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <HAL_SPI_TransmitReceive+0x68>
 8006b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d003      	beq.n	8006b10 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006b08:	2302      	movs	r3, #2
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b0e:	e15b      	b.n	8006dc8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <HAL_SPI_TransmitReceive+0x82>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <HAL_SPI_TransmitReceive+0x82>
 8006b1c:	887b      	ldrh	r3, [r7, #2]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d103      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b28:	e14e      	b.n	8006dc8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d003      	beq.n	8006b3e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2205      	movs	r2, #5
 8006b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	887a      	ldrh	r2, [r7, #2]
 8006b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	887a      	ldrh	r2, [r7, #2]
 8006b54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	887a      	ldrh	r2, [r7, #2]
 8006b60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	887a      	ldrh	r2, [r7, #2]
 8006b66:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7e:	2b40      	cmp	r3, #64	; 0x40
 8006b80:	d007      	beq.n	8006b92 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b9a:	d178      	bne.n	8006c8e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <HAL_SPI_TransmitReceive+0x10a>
 8006ba4:	8b7b      	ldrh	r3, [r7, #26]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d166      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	881a      	ldrh	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	1c9a      	adds	r2, r3, #2
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bce:	e053      	b.n	8006c78 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d11b      	bne.n	8006c16 <HAL_SPI_TransmitReceive+0x176>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d016      	beq.n	8006c16 <HAL_SPI_TransmitReceive+0x176>
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d113      	bne.n	8006c16 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	881a      	ldrh	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	1c9a      	adds	r2, r3, #2
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d119      	bne.n	8006c58 <HAL_SPI_TransmitReceive+0x1b8>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d014      	beq.n	8006c58 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	b292      	uxth	r2, r2
 8006c3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	1c9a      	adds	r2, r3, #2
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c54:	2301      	movs	r3, #1
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c58:	f7fb ffb4 	bl	8002bc4 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d807      	bhi.n	8006c78 <HAL_SPI_TransmitReceive+0x1d8>
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6e:	d003      	beq.n	8006c78 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c76:	e0a7      	b.n	8006dc8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1a6      	bne.n	8006bd0 <HAL_SPI_TransmitReceive+0x130>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1a1      	bne.n	8006bd0 <HAL_SPI_TransmitReceive+0x130>
 8006c8c:	e07c      	b.n	8006d88 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <HAL_SPI_TransmitReceive+0x1fc>
 8006c96:	8b7b      	ldrh	r3, [r7, #26]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d16b      	bne.n	8006d74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	330c      	adds	r3, #12
 8006ca6:	7812      	ldrb	r2, [r2, #0]
 8006ca8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cc2:	e057      	b.n	8006d74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d11c      	bne.n	8006d0c <HAL_SPI_TransmitReceive+0x26c>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d017      	beq.n	8006d0c <HAL_SPI_TransmitReceive+0x26c>
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d114      	bne.n	8006d0c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	7812      	ldrb	r2, [r2, #0]
 8006cee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d119      	bne.n	8006d4e <HAL_SPI_TransmitReceive+0x2ae>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d014      	beq.n	8006d4e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d4e:	f7fb ff39 	bl	8002bc4 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d803      	bhi.n	8006d66 <HAL_SPI_TransmitReceive+0x2c6>
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d64:	d102      	bne.n	8006d6c <HAL_SPI_TransmitReceive+0x2cc>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d72:	e029      	b.n	8006dc8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1a2      	bne.n	8006cc4 <HAL_SPI_TransmitReceive+0x224>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d19d      	bne.n	8006cc4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f917 	bl	8006fc0 <SPI_EndRxTxTransaction>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006da4:	e010      	b.n	8006dc8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10b      	bne.n	8006dc6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dae:	2300      	movs	r3, #0
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	e000      	b.n	8006dc8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006dc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3730      	adds	r7, #48	; 0x30
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	4613      	mov	r3, r2
 8006df2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006df4:	f7fb fee6 	bl	8002bc4 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	1a9b      	subs	r3, r3, r2
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	4413      	add	r3, r2
 8006e02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e04:	f7fb fede 	bl	8002bc4 <HAL_GetTick>
 8006e08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e0a:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	015b      	lsls	r3, r3, #5
 8006e10:	0d1b      	lsrs	r3, r3, #20
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	fb02 f303 	mul.w	r3, r2, r3
 8006e18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e1a:	e054      	b.n	8006ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d050      	beq.n	8006ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e24:	f7fb fece 	bl	8002bc4 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d902      	bls.n	8006e3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d13d      	bne.n	8006eb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e52:	d111      	bne.n	8006e78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e5c:	d004      	beq.n	8006e68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e66:	d107      	bne.n	8006e78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e80:	d10f      	bne.n	8006ea2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e017      	b.n	8006ee6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	bf0c      	ite	eq
 8006ed6:	2301      	moveq	r3, #1
 8006ed8:	2300      	movne	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d19b      	bne.n	8006e1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3720      	adds	r7, #32
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000004 	.word	0x20000004

08006ef4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f08:	d111      	bne.n	8006f2e <SPI_EndRxTransaction+0x3a>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f12:	d004      	beq.n	8006f1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1c:	d107      	bne.n	8006f2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f36:	d12a      	bne.n	8006f8e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f40:	d012      	beq.n	8006f68 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2180      	movs	r1, #128	; 0x80
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff ff49 	bl	8006de4 <SPI_WaitFlagStateUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d02d      	beq.n	8006fb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e026      	b.n	8006fb6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2101      	movs	r1, #1
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f7ff ff36 	bl	8006de4 <SPI_WaitFlagStateUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01a      	beq.n	8006fb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f82:	f043 0220 	orr.w	r2, r3, #32
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e013      	b.n	8006fb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2200      	movs	r2, #0
 8006f96:	2101      	movs	r1, #1
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f7ff ff23 	bl	8006de4 <SPI_WaitFlagStateUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa8:	f043 0220 	orr.w	r2, r3, #32
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e000      	b.n	8006fb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af02      	add	r7, sp, #8
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fcc:	4b1b      	ldr	r3, [pc, #108]	; (800703c <SPI_EndRxTxTransaction+0x7c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1b      	ldr	r2, [pc, #108]	; (8007040 <SPI_EndRxTxTransaction+0x80>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	0d5b      	lsrs	r3, r3, #21
 8006fd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fdc:	fb02 f303 	mul.w	r3, r2, r3
 8006fe0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fea:	d112      	bne.n	8007012 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff fef4 	bl	8006de4 <SPI_WaitFlagStateUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d016      	beq.n	8007030 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	f043 0220 	orr.w	r2, r3, #32
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e00f      	b.n	8007032 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	3b01      	subs	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007028:	2b80      	cmp	r3, #128	; 0x80
 800702a:	d0f2      	beq.n	8007012 <SPI_EndRxTxTransaction+0x52>
 800702c:	e000      	b.n	8007030 <SPI_EndRxTxTransaction+0x70>
        break;
 800702e:	bf00      	nop
  }

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20000004 	.word	0x20000004
 8007040:	165e9f81 	.word	0x165e9f81

08007044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e041      	b.n	80070da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fb fc14 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	4619      	mov	r1, r3
 8007082:	4610      	mov	r0, r2
 8007084:	f000 f9ce 	bl	8007424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d001      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e04e      	b.n	800719a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0201 	orr.w	r2, r2, #1
 8007112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a23      	ldr	r2, [pc, #140]	; (80071a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d022      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x80>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007126:	d01d      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x80>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1f      	ldr	r2, [pc, #124]	; (80071ac <HAL_TIM_Base_Start_IT+0xc8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d018      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x80>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1e      	ldr	r2, [pc, #120]	; (80071b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x80>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1c      	ldr	r2, [pc, #112]	; (80071b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00e      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x80>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1b      	ldr	r2, [pc, #108]	; (80071b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d009      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x80>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a19      	ldr	r2, [pc, #100]	; (80071bc <HAL_TIM_Base_Start_IT+0xd8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x80>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a18      	ldr	r2, [pc, #96]	; (80071c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d111      	bne.n	8007188 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b06      	cmp	r3, #6
 8007174:	d010      	beq.n	8007198 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0201 	orr.w	r2, r2, #1
 8007184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007186:	e007      	b.n	8007198 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0201 	orr.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40010000 	.word	0x40010000
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800
 80071b4:	40000c00 	.word	0x40000c00
 80071b8:	40010400 	.word	0x40010400
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40001800 	.word	0x40001800

080071c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d122      	bne.n	8007220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d11b      	bne.n	8007220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0202 	mvn.w	r2, #2
 80071f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	f003 0303 	and.w	r3, r3, #3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f8ee 	bl	80073e8 <HAL_TIM_IC_CaptureCallback>
 800720c:	e005      	b.n	800721a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f8e0 	bl	80073d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f8f1 	bl	80073fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b04      	cmp	r3, #4
 800722c:	d122      	bne.n	8007274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b04      	cmp	r3, #4
 800723a:	d11b      	bne.n	8007274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0204 	mvn.w	r2, #4
 8007244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8c4 	bl	80073e8 <HAL_TIM_IC_CaptureCallback>
 8007260:	e005      	b.n	800726e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f8b6 	bl	80073d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f8c7 	bl	80073fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b08      	cmp	r3, #8
 8007280:	d122      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b08      	cmp	r3, #8
 800728e:	d11b      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f06f 0208 	mvn.w	r2, #8
 8007298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2204      	movs	r2, #4
 800729e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f89a 	bl	80073e8 <HAL_TIM_IC_CaptureCallback>
 80072b4:	e005      	b.n	80072c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f88c 	bl	80073d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f89d 	bl	80073fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f003 0310 	and.w	r3, r3, #16
 80072d2:	2b10      	cmp	r3, #16
 80072d4:	d122      	bne.n	800731c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f003 0310 	and.w	r3, r3, #16
 80072e0:	2b10      	cmp	r3, #16
 80072e2:	d11b      	bne.n	800731c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0210 	mvn.w	r2, #16
 80072ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2208      	movs	r2, #8
 80072f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f870 	bl	80073e8 <HAL_TIM_IC_CaptureCallback>
 8007308:	e005      	b.n	8007316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f862 	bl	80073d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f873 	bl	80073fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b01      	cmp	r3, #1
 8007328:	d10e      	bne.n	8007348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b01      	cmp	r3, #1
 8007336:	d107      	bne.n	8007348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0201 	mvn.w	r2, #1
 8007340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fb f854 	bl	80023f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007352:	2b80      	cmp	r3, #128	; 0x80
 8007354:	d10e      	bne.n	8007374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007360:	2b80      	cmp	r3, #128	; 0x80
 8007362:	d107      	bne.n	8007374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800736c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f902 	bl	8007578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737e:	2b40      	cmp	r3, #64	; 0x40
 8007380:	d10e      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	d107      	bne.n	80073a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f838 	bl	8007410 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f003 0320 	and.w	r3, r3, #32
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d10e      	bne.n	80073cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d107      	bne.n	80073cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0220 	mvn.w	r2, #32
 80073c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f8cc 	bl	8007564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a40      	ldr	r2, [pc, #256]	; (8007538 <TIM_Base_SetConfig+0x114>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d013      	beq.n	8007464 <TIM_Base_SetConfig+0x40>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007442:	d00f      	beq.n	8007464 <TIM_Base_SetConfig+0x40>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a3d      	ldr	r2, [pc, #244]	; (800753c <TIM_Base_SetConfig+0x118>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00b      	beq.n	8007464 <TIM_Base_SetConfig+0x40>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a3c      	ldr	r2, [pc, #240]	; (8007540 <TIM_Base_SetConfig+0x11c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d007      	beq.n	8007464 <TIM_Base_SetConfig+0x40>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a3b      	ldr	r2, [pc, #236]	; (8007544 <TIM_Base_SetConfig+0x120>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d003      	beq.n	8007464 <TIM_Base_SetConfig+0x40>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a3a      	ldr	r2, [pc, #232]	; (8007548 <TIM_Base_SetConfig+0x124>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d108      	bne.n	8007476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a2f      	ldr	r2, [pc, #188]	; (8007538 <TIM_Base_SetConfig+0x114>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d02b      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007484:	d027      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a2c      	ldr	r2, [pc, #176]	; (800753c <TIM_Base_SetConfig+0x118>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d023      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a2b      	ldr	r2, [pc, #172]	; (8007540 <TIM_Base_SetConfig+0x11c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d01f      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a2a      	ldr	r2, [pc, #168]	; (8007544 <TIM_Base_SetConfig+0x120>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d01b      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a29      	ldr	r2, [pc, #164]	; (8007548 <TIM_Base_SetConfig+0x124>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d017      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a28      	ldr	r2, [pc, #160]	; (800754c <TIM_Base_SetConfig+0x128>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d013      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a27      	ldr	r2, [pc, #156]	; (8007550 <TIM_Base_SetConfig+0x12c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00f      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a26      	ldr	r2, [pc, #152]	; (8007554 <TIM_Base_SetConfig+0x130>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a25      	ldr	r2, [pc, #148]	; (8007558 <TIM_Base_SetConfig+0x134>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d007      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a24      	ldr	r2, [pc, #144]	; (800755c <TIM_Base_SetConfig+0x138>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d003      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a23      	ldr	r2, [pc, #140]	; (8007560 <TIM_Base_SetConfig+0x13c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d108      	bne.n	80074e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a0a      	ldr	r2, [pc, #40]	; (8007538 <TIM_Base_SetConfig+0x114>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d003      	beq.n	800751c <TIM_Base_SetConfig+0xf8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a0c      	ldr	r2, [pc, #48]	; (8007548 <TIM_Base_SetConfig+0x124>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d103      	bne.n	8007524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	615a      	str	r2, [r3, #20]
}
 800752a:	bf00      	nop
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40010000 	.word	0x40010000
 800753c:	40000400 	.word	0x40000400
 8007540:	40000800 	.word	0x40000800
 8007544:	40000c00 	.word	0x40000c00
 8007548:	40010400 	.word	0x40010400
 800754c:	40014000 	.word	0x40014000
 8007550:	40014400 	.word	0x40014400
 8007554:	40014800 	.word	0x40014800
 8007558:	40001800 	.word	0x40001800
 800755c:	40001c00 	.word	0x40001c00
 8007560:	40002000 	.word	0x40002000

08007564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e03f      	b.n	800761e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fb f998 	bl	80028e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2224      	movs	r2, #36	; 0x24
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f9a7 	bl	8007924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	695a      	ldr	r2, [r3, #20]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2220      	movs	r2, #32
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b08a      	sub	sp, #40	; 0x28
 800762a:	af02      	add	r7, sp, #8
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	603b      	str	r3, [r7, #0]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b20      	cmp	r3, #32
 8007644:	d17c      	bne.n	8007740 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_UART_Transmit+0x2c>
 800764c:	88fb      	ldrh	r3, [r7, #6]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e075      	b.n	8007742 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_UART_Transmit+0x3e>
 8007660:	2302      	movs	r3, #2
 8007662:	e06e      	b.n	8007742 <HAL_UART_Transmit+0x11c>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2221      	movs	r2, #33	; 0x21
 8007676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800767a:	f7fb faa3 	bl	8002bc4 <HAL_GetTick>
 800767e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	88fa      	ldrh	r2, [r7, #6]
 8007684:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	88fa      	ldrh	r2, [r7, #6]
 800768a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007694:	d108      	bne.n	80076a8 <HAL_UART_Transmit+0x82>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d104      	bne.n	80076a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	e003      	b.n	80076b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076b8:	e02a      	b.n	8007710 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2200      	movs	r2, #0
 80076c2:	2180      	movs	r1, #128	; 0x80
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 f8e2 	bl	800788e <UART_WaitOnFlagUntilTimeout>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e036      	b.n	8007742 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10b      	bne.n	80076f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	3302      	adds	r3, #2
 80076ee:	61bb      	str	r3, [r7, #24]
 80076f0:	e007      	b.n	8007702 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	781a      	ldrb	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	3301      	adds	r3, #1
 8007700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007706:	b29b      	uxth	r3, r3
 8007708:	3b01      	subs	r3, #1
 800770a:	b29a      	uxth	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1cf      	bne.n	80076ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2200      	movs	r2, #0
 8007722:	2140      	movs	r1, #64	; 0x40
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f8b2 	bl	800788e <UART_WaitOnFlagUntilTimeout>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e006      	b.n	8007742 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	e000      	b.n	8007742 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007740:	2302      	movs	r3, #2
  }
}
 8007742:	4618      	mov	r0, r3
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b08a      	sub	sp, #40	; 0x28
 800774e:	af02      	add	r7, sp, #8
 8007750:	60f8      	str	r0, [r7, #12]
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	603b      	str	r3, [r7, #0]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b20      	cmp	r3, #32
 8007768:	f040 808c 	bne.w	8007884 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_UART_Receive+0x2e>
 8007772:	88fb      	ldrh	r3, [r7, #6]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e084      	b.n	8007886 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_UART_Receive+0x40>
 8007786:	2302      	movs	r3, #2
 8007788:	e07d      	b.n	8007886 <HAL_UART_Receive+0x13c>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2222      	movs	r2, #34	; 0x22
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077a6:	f7fb fa0d 	bl	8002bc4 <HAL_GetTick>
 80077aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c0:	d108      	bne.n	80077d4 <HAL_UART_Receive+0x8a>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	e003      	b.n	80077dc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80077e4:	e043      	b.n	800786e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2200      	movs	r2, #0
 80077ee:	2120      	movs	r1, #32
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 f84c 	bl	800788e <UART_WaitOnFlagUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e042      	b.n	8007886 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10c      	bne.n	8007820 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	b29b      	uxth	r3, r3
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	b29a      	uxth	r2, r3
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	3302      	adds	r3, #2
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	e01f      	b.n	8007860 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007828:	d007      	beq.n	800783a <HAL_UART_Receive+0xf0>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <HAL_UART_Receive+0xfe>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	e008      	b.n	800785a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007854:	b2da      	uxtb	r2, r3
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	3301      	adds	r3, #1
 800785e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1b6      	bne.n	80077e6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	e000      	b.n	8007886 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007884:	2302      	movs	r3, #2
  }
}
 8007886:	4618      	mov	r0, r3
 8007888:	3720      	adds	r7, #32
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	603b      	str	r3, [r7, #0]
 800789a:	4613      	mov	r3, r2
 800789c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800789e:	e02c      	b.n	80078fa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d028      	beq.n	80078fa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d007      	beq.n	80078be <UART_WaitOnFlagUntilTimeout+0x30>
 80078ae:	f7fb f989 	bl	8002bc4 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d21d      	bcs.n	80078fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078cc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	695a      	ldr	r2, [r3, #20]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0201 	bic.w	r2, r2, #1
 80078dc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e00f      	b.n	800791a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4013      	ands	r3, r2
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	429a      	cmp	r2, r3
 8007908:	bf0c      	ite	eq
 800790a:	2301      	moveq	r3, #1
 800790c:	2300      	movne	r3, #0
 800790e:	b2db      	uxtb	r3, r3
 8007910:	461a      	mov	r2, r3
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	429a      	cmp	r2, r3
 8007916:	d0c3      	beq.n	80078a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	b09f      	sub	sp, #124	; 0x7c
 800792a:	af00      	add	r7, sp, #0
 800792c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800792e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793a:	68d9      	ldr	r1, [r3, #12]
 800793c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	ea40 0301 	orr.w	r3, r0, r1
 8007944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	431a      	orrs	r2, r3
 8007950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	431a      	orrs	r2, r3
 8007956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	4313      	orrs	r3, r2
 800795c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800795e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007968:	f021 010c 	bic.w	r1, r1, #12
 800796c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007972:	430b      	orrs	r3, r1
 8007974:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007982:	6999      	ldr	r1, [r3, #24]
 8007984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	ea40 0301 	orr.w	r3, r0, r1
 800798c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800798e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4bc5      	ldr	r3, [pc, #788]	; (8007ca8 <UART_SetConfig+0x384>)
 8007994:	429a      	cmp	r2, r3
 8007996:	d004      	beq.n	80079a2 <UART_SetConfig+0x7e>
 8007998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	4bc3      	ldr	r3, [pc, #780]	; (8007cac <UART_SetConfig+0x388>)
 800799e:	429a      	cmp	r2, r3
 80079a0:	d103      	bne.n	80079aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079a2:	f7fd fde7 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
 80079a6:	6778      	str	r0, [r7, #116]	; 0x74
 80079a8:	e002      	b.n	80079b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079aa:	f7fd fdcf 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 80079ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b8:	f040 80b6 	bne.w	8007b28 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079be:	461c      	mov	r4, r3
 80079c0:	f04f 0500 	mov.w	r5, #0
 80079c4:	4622      	mov	r2, r4
 80079c6:	462b      	mov	r3, r5
 80079c8:	1891      	adds	r1, r2, r2
 80079ca:	6439      	str	r1, [r7, #64]	; 0x40
 80079cc:	415b      	adcs	r3, r3
 80079ce:	647b      	str	r3, [r7, #68]	; 0x44
 80079d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079d4:	1912      	adds	r2, r2, r4
 80079d6:	eb45 0303 	adc.w	r3, r5, r3
 80079da:	f04f 0000 	mov.w	r0, #0
 80079de:	f04f 0100 	mov.w	r1, #0
 80079e2:	00d9      	lsls	r1, r3, #3
 80079e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079e8:	00d0      	lsls	r0, r2, #3
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	1911      	adds	r1, r2, r4
 80079f0:	6639      	str	r1, [r7, #96]	; 0x60
 80079f2:	416b      	adcs	r3, r5
 80079f4:	667b      	str	r3, [r7, #100]	; 0x64
 80079f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f04f 0300 	mov.w	r3, #0
 8007a00:	1891      	adds	r1, r2, r2
 8007a02:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a04:	415b      	adcs	r3, r3
 8007a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007a10:	f7f8 fc06 	bl	8000220 <__aeabi_uldivmod>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4ba5      	ldr	r3, [pc, #660]	; (8007cb0 <UART_SetConfig+0x38c>)
 8007a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	011e      	lsls	r6, r3, #4
 8007a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a24:	461c      	mov	r4, r3
 8007a26:	f04f 0500 	mov.w	r5, #0
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	462b      	mov	r3, r5
 8007a2e:	1891      	adds	r1, r2, r2
 8007a30:	6339      	str	r1, [r7, #48]	; 0x30
 8007a32:	415b      	adcs	r3, r3
 8007a34:	637b      	str	r3, [r7, #52]	; 0x34
 8007a36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a3a:	1912      	adds	r2, r2, r4
 8007a3c:	eb45 0303 	adc.w	r3, r5, r3
 8007a40:	f04f 0000 	mov.w	r0, #0
 8007a44:	f04f 0100 	mov.w	r1, #0
 8007a48:	00d9      	lsls	r1, r3, #3
 8007a4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a4e:	00d0      	lsls	r0, r2, #3
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	1911      	adds	r1, r2, r4
 8007a56:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a58:	416b      	adcs	r3, r5
 8007a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	461a      	mov	r2, r3
 8007a62:	f04f 0300 	mov.w	r3, #0
 8007a66:	1891      	adds	r1, r2, r2
 8007a68:	62b9      	str	r1, [r7, #40]	; 0x28
 8007a6a:	415b      	adcs	r3, r3
 8007a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007a76:	f7f8 fbd3 	bl	8000220 <__aeabi_uldivmod>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4b8c      	ldr	r3, [pc, #560]	; (8007cb0 <UART_SetConfig+0x38c>)
 8007a80:	fba3 1302 	umull	r1, r3, r3, r2
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	2164      	movs	r1, #100	; 0x64
 8007a88:	fb01 f303 	mul.w	r3, r1, r3
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	3332      	adds	r3, #50	; 0x32
 8007a92:	4a87      	ldr	r2, [pc, #540]	; (8007cb0 <UART_SetConfig+0x38c>)
 8007a94:	fba2 2303 	umull	r2, r3, r2, r3
 8007a98:	095b      	lsrs	r3, r3, #5
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007aa0:	441e      	add	r6, r3
 8007aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f04f 0100 	mov.w	r1, #0
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	1894      	adds	r4, r2, r2
 8007ab0:	623c      	str	r4, [r7, #32]
 8007ab2:	415b      	adcs	r3, r3
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007aba:	1812      	adds	r2, r2, r0
 8007abc:	eb41 0303 	adc.w	r3, r1, r3
 8007ac0:	f04f 0400 	mov.w	r4, #0
 8007ac4:	f04f 0500 	mov.w	r5, #0
 8007ac8:	00dd      	lsls	r5, r3, #3
 8007aca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ace:	00d4      	lsls	r4, r2, #3
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	462b      	mov	r3, r5
 8007ad4:	1814      	adds	r4, r2, r0
 8007ad6:	653c      	str	r4, [r7, #80]	; 0x50
 8007ad8:	414b      	adcs	r3, r1
 8007ada:	657b      	str	r3, [r7, #84]	; 0x54
 8007adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f04f 0300 	mov.w	r3, #0
 8007ae6:	1891      	adds	r1, r2, r2
 8007ae8:	61b9      	str	r1, [r7, #24]
 8007aea:	415b      	adcs	r3, r3
 8007aec:	61fb      	str	r3, [r7, #28]
 8007aee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007af2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007af6:	f7f8 fb93 	bl	8000220 <__aeabi_uldivmod>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4b6c      	ldr	r3, [pc, #432]	; (8007cb0 <UART_SetConfig+0x38c>)
 8007b00:	fba3 1302 	umull	r1, r3, r3, r2
 8007b04:	095b      	lsrs	r3, r3, #5
 8007b06:	2164      	movs	r1, #100	; 0x64
 8007b08:	fb01 f303 	mul.w	r3, r1, r3
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	3332      	adds	r3, #50	; 0x32
 8007b12:	4a67      	ldr	r2, [pc, #412]	; (8007cb0 <UART_SetConfig+0x38c>)
 8007b14:	fba2 2303 	umull	r2, r3, r2, r3
 8007b18:	095b      	lsrs	r3, r3, #5
 8007b1a:	f003 0207 	and.w	r2, r3, #7
 8007b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4432      	add	r2, r6
 8007b24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b26:	e0b9      	b.n	8007c9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b2a:	461c      	mov	r4, r3
 8007b2c:	f04f 0500 	mov.w	r5, #0
 8007b30:	4622      	mov	r2, r4
 8007b32:	462b      	mov	r3, r5
 8007b34:	1891      	adds	r1, r2, r2
 8007b36:	6139      	str	r1, [r7, #16]
 8007b38:	415b      	adcs	r3, r3
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b40:	1912      	adds	r2, r2, r4
 8007b42:	eb45 0303 	adc.w	r3, r5, r3
 8007b46:	f04f 0000 	mov.w	r0, #0
 8007b4a:	f04f 0100 	mov.w	r1, #0
 8007b4e:	00d9      	lsls	r1, r3, #3
 8007b50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b54:	00d0      	lsls	r0, r2, #3
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	eb12 0804 	adds.w	r8, r2, r4
 8007b5e:	eb43 0905 	adc.w	r9, r3, r5
 8007b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f04f 0100 	mov.w	r1, #0
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	008b      	lsls	r3, r1, #2
 8007b76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b7a:	0082      	lsls	r2, r0, #2
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	4649      	mov	r1, r9
 8007b80:	f7f8 fb4e 	bl	8000220 <__aeabi_uldivmod>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4b49      	ldr	r3, [pc, #292]	; (8007cb0 <UART_SetConfig+0x38c>)
 8007b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	011e      	lsls	r6, r3, #4
 8007b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b94:	4618      	mov	r0, r3
 8007b96:	f04f 0100 	mov.w	r1, #0
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	1894      	adds	r4, r2, r2
 8007ba0:	60bc      	str	r4, [r7, #8]
 8007ba2:	415b      	adcs	r3, r3
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007baa:	1812      	adds	r2, r2, r0
 8007bac:	eb41 0303 	adc.w	r3, r1, r3
 8007bb0:	f04f 0400 	mov.w	r4, #0
 8007bb4:	f04f 0500 	mov.w	r5, #0
 8007bb8:	00dd      	lsls	r5, r3, #3
 8007bba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007bbe:	00d4      	lsls	r4, r2, #3
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	462b      	mov	r3, r5
 8007bc4:	1814      	adds	r4, r2, r0
 8007bc6:	64bc      	str	r4, [r7, #72]	; 0x48
 8007bc8:	414b      	adcs	r3, r1
 8007bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f04f 0100 	mov.w	r1, #0
 8007bd6:	f04f 0200 	mov.w	r2, #0
 8007bda:	f04f 0300 	mov.w	r3, #0
 8007bde:	008b      	lsls	r3, r1, #2
 8007be0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007be4:	0082      	lsls	r2, r0, #2
 8007be6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007bea:	f7f8 fb19 	bl	8000220 <__aeabi_uldivmod>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4b2f      	ldr	r3, [pc, #188]	; (8007cb0 <UART_SetConfig+0x38c>)
 8007bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8007bf8:	095b      	lsrs	r3, r3, #5
 8007bfa:	2164      	movs	r1, #100	; 0x64
 8007bfc:	fb01 f303 	mul.w	r3, r1, r3
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	3332      	adds	r3, #50	; 0x32
 8007c06:	4a2a      	ldr	r2, [pc, #168]	; (8007cb0 <UART_SetConfig+0x38c>)
 8007c08:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0c:	095b      	lsrs	r3, r3, #5
 8007c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c12:	441e      	add	r6, r3
 8007c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c16:	4618      	mov	r0, r3
 8007c18:	f04f 0100 	mov.w	r1, #0
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	1894      	adds	r4, r2, r2
 8007c22:	603c      	str	r4, [r7, #0]
 8007c24:	415b      	adcs	r3, r3
 8007c26:	607b      	str	r3, [r7, #4]
 8007c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2c:	1812      	adds	r2, r2, r0
 8007c2e:	eb41 0303 	adc.w	r3, r1, r3
 8007c32:	f04f 0400 	mov.w	r4, #0
 8007c36:	f04f 0500 	mov.w	r5, #0
 8007c3a:	00dd      	lsls	r5, r3, #3
 8007c3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c40:	00d4      	lsls	r4, r2, #3
 8007c42:	4622      	mov	r2, r4
 8007c44:	462b      	mov	r3, r5
 8007c46:	eb12 0a00 	adds.w	sl, r2, r0
 8007c4a:	eb43 0b01 	adc.w	fp, r3, r1
 8007c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f04f 0100 	mov.w	r1, #0
 8007c58:	f04f 0200 	mov.w	r2, #0
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	008b      	lsls	r3, r1, #2
 8007c62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c66:	0082      	lsls	r2, r0, #2
 8007c68:	4650      	mov	r0, sl
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	f7f8 fad8 	bl	8000220 <__aeabi_uldivmod>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <UART_SetConfig+0x38c>)
 8007c76:	fba3 1302 	umull	r1, r3, r3, r2
 8007c7a:	095b      	lsrs	r3, r3, #5
 8007c7c:	2164      	movs	r1, #100	; 0x64
 8007c7e:	fb01 f303 	mul.w	r3, r1, r3
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	3332      	adds	r3, #50	; 0x32
 8007c88:	4a09      	ldr	r2, [pc, #36]	; (8007cb0 <UART_SetConfig+0x38c>)
 8007c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	f003 020f 	and.w	r2, r3, #15
 8007c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4432      	add	r2, r6
 8007c9a:	609a      	str	r2, [r3, #8]
}
 8007c9c:	bf00      	nop
 8007c9e:	377c      	adds	r7, #124	; 0x7c
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40011000 	.word	0x40011000
 8007cac:	40011400 	.word	0x40011400
 8007cb0:	51eb851f 	.word	0x51eb851f

08007cb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	f107 001c 	add.w	r0, r7, #28
 8007cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d122      	bne.n	8007d12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d105      	bne.n	8007d06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 fac0 	bl	800928c <USB_CoreReset>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]
 8007d10:	e01a      	b.n	8007d48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 fab4 	bl	800928c <USB_CoreReset>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d106      	bne.n	8007d3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
 8007d3a:	e005      	b.n	8007d48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d10b      	bne.n	8007d66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f043 0206 	orr.w	r2, r3, #6
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f043 0220 	orr.w	r2, r3, #32
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d72:	b004      	add	sp, #16
 8007d74:	4770      	bx	lr
	...

08007d78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	4613      	mov	r3, r2
 8007d84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d165      	bne.n	8007e58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	4a41      	ldr	r2, [pc, #260]	; (8007e94 <USB_SetTurnaroundTime+0x11c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d906      	bls.n	8007da2 <USB_SetTurnaroundTime+0x2a>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	4a40      	ldr	r2, [pc, #256]	; (8007e98 <USB_SetTurnaroundTime+0x120>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d202      	bcs.n	8007da2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d9c:	230f      	movs	r3, #15
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	e062      	b.n	8007e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	4a3c      	ldr	r2, [pc, #240]	; (8007e98 <USB_SetTurnaroundTime+0x120>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d306      	bcc.n	8007db8 <USB_SetTurnaroundTime+0x40>
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	4a3b      	ldr	r2, [pc, #236]	; (8007e9c <USB_SetTurnaroundTime+0x124>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d202      	bcs.n	8007db8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007db2:	230e      	movs	r3, #14
 8007db4:	617b      	str	r3, [r7, #20]
 8007db6:	e057      	b.n	8007e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	4a38      	ldr	r2, [pc, #224]	; (8007e9c <USB_SetTurnaroundTime+0x124>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d306      	bcc.n	8007dce <USB_SetTurnaroundTime+0x56>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4a37      	ldr	r2, [pc, #220]	; (8007ea0 <USB_SetTurnaroundTime+0x128>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d202      	bcs.n	8007dce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007dc8:	230d      	movs	r3, #13
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	e04c      	b.n	8007e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	4a33      	ldr	r2, [pc, #204]	; (8007ea0 <USB_SetTurnaroundTime+0x128>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d306      	bcc.n	8007de4 <USB_SetTurnaroundTime+0x6c>
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	4a32      	ldr	r2, [pc, #200]	; (8007ea4 <USB_SetTurnaroundTime+0x12c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d802      	bhi.n	8007de4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007dde:	230c      	movs	r3, #12
 8007de0:	617b      	str	r3, [r7, #20]
 8007de2:	e041      	b.n	8007e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4a2f      	ldr	r2, [pc, #188]	; (8007ea4 <USB_SetTurnaroundTime+0x12c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d906      	bls.n	8007dfa <USB_SetTurnaroundTime+0x82>
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4a2e      	ldr	r2, [pc, #184]	; (8007ea8 <USB_SetTurnaroundTime+0x130>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d802      	bhi.n	8007dfa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007df4:	230b      	movs	r3, #11
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	e036      	b.n	8007e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	4a2a      	ldr	r2, [pc, #168]	; (8007ea8 <USB_SetTurnaroundTime+0x130>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d906      	bls.n	8007e10 <USB_SetTurnaroundTime+0x98>
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4a29      	ldr	r2, [pc, #164]	; (8007eac <USB_SetTurnaroundTime+0x134>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d802      	bhi.n	8007e10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e0a:	230a      	movs	r3, #10
 8007e0c:	617b      	str	r3, [r7, #20]
 8007e0e:	e02b      	b.n	8007e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4a26      	ldr	r2, [pc, #152]	; (8007eac <USB_SetTurnaroundTime+0x134>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d906      	bls.n	8007e26 <USB_SetTurnaroundTime+0xae>
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4a25      	ldr	r2, [pc, #148]	; (8007eb0 <USB_SetTurnaroundTime+0x138>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d202      	bcs.n	8007e26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007e20:	2309      	movs	r3, #9
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	e020      	b.n	8007e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4a21      	ldr	r2, [pc, #132]	; (8007eb0 <USB_SetTurnaroundTime+0x138>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d306      	bcc.n	8007e3c <USB_SetTurnaroundTime+0xc4>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	4a20      	ldr	r2, [pc, #128]	; (8007eb4 <USB_SetTurnaroundTime+0x13c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d802      	bhi.n	8007e3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e36:	2308      	movs	r3, #8
 8007e38:	617b      	str	r3, [r7, #20]
 8007e3a:	e015      	b.n	8007e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <USB_SetTurnaroundTime+0x13c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d906      	bls.n	8007e52 <USB_SetTurnaroundTime+0xda>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	4a1c      	ldr	r2, [pc, #112]	; (8007eb8 <USB_SetTurnaroundTime+0x140>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d202      	bcs.n	8007e52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e4c:	2307      	movs	r3, #7
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	e00a      	b.n	8007e68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007e52:	2306      	movs	r3, #6
 8007e54:	617b      	str	r3, [r7, #20]
 8007e56:	e007      	b.n	8007e68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d102      	bne.n	8007e64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007e5e:	2309      	movs	r3, #9
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	e001      	b.n	8007e68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007e64:	2309      	movs	r3, #9
 8007e66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	68da      	ldr	r2, [r3, #12]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	029b      	lsls	r3, r3, #10
 8007e7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007e80:	431a      	orrs	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	371c      	adds	r7, #28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	00d8acbf 	.word	0x00d8acbf
 8007e98:	00e4e1c0 	.word	0x00e4e1c0
 8007e9c:	00f42400 	.word	0x00f42400
 8007ea0:	01067380 	.word	0x01067380
 8007ea4:	011a499f 	.word	0x011a499f
 8007ea8:	01312cff 	.word	0x01312cff
 8007eac:	014ca43f 	.word	0x014ca43f
 8007eb0:	016e3600 	.word	0x016e3600
 8007eb4:	01a6ab1f 	.word	0x01a6ab1f
 8007eb8:	01e84800 	.word	0x01e84800

08007ebc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f043 0201 	orr.w	r2, r3, #1
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f023 0201 	bic.w	r2, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d106      	bne.n	8007f2c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60da      	str	r2, [r3, #12]
 8007f2a:	e00b      	b.n	8007f44 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60da      	str	r2, [r3, #12]
 8007f3e:	e001      	b.n	8007f44 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e003      	b.n	8007f4c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007f44:	2032      	movs	r0, #50	; 0x32
 8007f46:	f7fa fe49 	bl	8002bdc <HAL_Delay>

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f54:	b084      	sub	sp, #16
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b086      	sub	sp, #24
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f6e:	2300      	movs	r3, #0
 8007f70:	613b      	str	r3, [r7, #16]
 8007f72:	e009      	b.n	8007f88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	3340      	adds	r3, #64	; 0x40
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	2200      	movs	r2, #0
 8007f80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	3301      	adds	r3, #1
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	2b0e      	cmp	r3, #14
 8007f8c:	d9f2      	bls.n	8007f74 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d11c      	bne.n	8007fce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fa2:	f043 0302 	orr.w	r3, r3, #2
 8007fa6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	e005      	b.n	8007fda <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fec:	4619      	mov	r1, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	680b      	ldr	r3, [r1, #0]
 8007ff8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d10c      	bne.n	800801a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d104      	bne.n	8008010 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008006:	2100      	movs	r1, #0
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f949 	bl	80082a0 <USB_SetDevSpeed>
 800800e:	e008      	b.n	8008022 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008010:	2101      	movs	r1, #1
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f944 	bl	80082a0 <USB_SetDevSpeed>
 8008018:	e003      	b.n	8008022 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800801a:	2103      	movs	r1, #3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f93f 	bl	80082a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008022:	2110      	movs	r1, #16
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8f3 	bl	8008210 <USB_FlushTxFifo>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f911 	bl	800825c <USB_FlushRxFifo>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804a:	461a      	mov	r2, r3
 800804c:	2300      	movs	r3, #0
 800804e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008056:	461a      	mov	r2, r3
 8008058:	2300      	movs	r3, #0
 800805a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008062:	461a      	mov	r2, r3
 8008064:	2300      	movs	r3, #0
 8008066:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008068:	2300      	movs	r3, #0
 800806a:	613b      	str	r3, [r7, #16]
 800806c:	e043      	b.n	80080f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008084:	d118      	bne.n	80080b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10a      	bne.n	80080a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008098:	461a      	mov	r2, r3
 800809a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	e013      	b.n	80080ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ae:	461a      	mov	r2, r3
 80080b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	e008      	b.n	80080ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c4:	461a      	mov	r2, r3
 80080c6:	2300      	movs	r3, #0
 80080c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d6:	461a      	mov	r2, r3
 80080d8:	2300      	movs	r3, #0
 80080da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e8:	461a      	mov	r2, r3
 80080ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	3301      	adds	r3, #1
 80080f4:	613b      	str	r3, [r7, #16]
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d3b7      	bcc.n	800806e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	e043      	b.n	800818c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800811a:	d118      	bne.n	800814e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812e:	461a      	mov	r2, r3
 8008130:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	e013      	b.n	8008160 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008144:	461a      	mov	r2, r3
 8008146:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	e008      	b.n	8008160 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	461a      	mov	r2, r3
 800815c:	2300      	movs	r3, #0
 800815e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816c:	461a      	mov	r2, r3
 800816e:	2300      	movs	r3, #0
 8008170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4413      	add	r3, r2
 800817a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817e:	461a      	mov	r2, r3
 8008180:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008184:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	3301      	adds	r3, #1
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	429a      	cmp	r2, r3
 8008192:	d3b7      	bcc.n	8008104 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80081b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d105      	bne.n	80081c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	f043 0210 	orr.w	r2, r3, #16
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	699a      	ldr	r2, [r3, #24]
 80081cc:	4b0f      	ldr	r3, [pc, #60]	; (800820c <USB_DevInit+0x2b8>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d005      	beq.n	80081e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f043 0208 	orr.w	r2, r3, #8
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d107      	bne.n	80081fc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081f4:	f043 0304 	orr.w	r3, r3, #4
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008208:	b004      	add	sp, #16
 800820a:	4770      	bx	lr
 800820c:	803c3800 	.word	0x803c3800

08008210 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	019b      	lsls	r3, r3, #6
 8008222:	f043 0220 	orr.w	r2, r3, #32
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3301      	adds	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4a09      	ldr	r2, [pc, #36]	; (8008258 <USB_FlushTxFifo+0x48>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d901      	bls.n	800823c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e006      	b.n	800824a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b20      	cmp	r3, #32
 8008246:	d0f0      	beq.n	800822a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	00030d40 	.word	0x00030d40

0800825c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2210      	movs	r2, #16
 800826c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3301      	adds	r3, #1
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4a09      	ldr	r2, [pc, #36]	; (800829c <USB_FlushRxFifo+0x40>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d901      	bls.n	8008280 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e006      	b.n	800828e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	f003 0310 	and.w	r3, r3, #16
 8008288:	2b10      	cmp	r3, #16
 800828a:	d0f0      	beq.n	800826e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	00030d40 	.word	0x00030d40

080082a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082c0:	4313      	orrs	r3, r2
 80082c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b087      	sub	sp, #28
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 0306 	and.w	r3, r3, #6
 80082ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d102      	bne.n	80082f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80082f2:	2300      	movs	r3, #0
 80082f4:	75fb      	strb	r3, [r7, #23]
 80082f6:	e00a      	b.n	800830e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d002      	beq.n	8008304 <USB_GetDevSpeed+0x32>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b06      	cmp	r3, #6
 8008302:	d102      	bne.n	800830a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008304:	2302      	movs	r3, #2
 8008306:	75fb      	strb	r3, [r7, #23]
 8008308:	e001      	b.n	800830e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800830a:	230f      	movs	r3, #15
 800830c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800830e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008310:	4618      	mov	r0, r3
 8008312:	371c      	adds	r7, #28
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d13a      	bne.n	80083ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	f003 030f 	and.w	r3, r3, #15
 8008348:	2101      	movs	r1, #1
 800834a:	fa01 f303 	lsl.w	r3, r1, r3
 800834e:	b29b      	uxth	r3, r3
 8008350:	68f9      	ldr	r1, [r7, #12]
 8008352:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008356:	4313      	orrs	r3, r2
 8008358:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	4413      	add	r3, r2
 8008362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d155      	bne.n	800841c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	78db      	ldrb	r3, [r3, #3]
 800838a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800838c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	059b      	lsls	r3, r3, #22
 8008392:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008394:	4313      	orrs	r3, r2
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	440a      	add	r2, r1
 800839e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	e036      	b.n	800841c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b4:	69da      	ldr	r2, [r3, #28]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	f003 030f 	and.w	r3, r3, #15
 80083be:	2101      	movs	r1, #1
 80083c0:	fa01 f303 	lsl.w	r3, r1, r3
 80083c4:	041b      	lsls	r3, r3, #16
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083cc:	4313      	orrs	r3, r2
 80083ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d11a      	bne.n	800841c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	78db      	ldrb	r3, [r3, #3]
 8008400:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008402:	430b      	orrs	r3, r1
 8008404:	4313      	orrs	r3, r2
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	0151      	lsls	r1, r2, #5
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	440a      	add	r2, r1
 800840e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800841a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d161      	bne.n	800850c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800845a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800845e:	d11f      	bne.n	80084a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4413      	add	r3, r2
 8008468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	0151      	lsls	r1, r2, #5
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	440a      	add	r2, r1
 8008476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800847a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800847e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4413      	add	r3, r2
 8008488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	0151      	lsls	r1, r2, #5
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	440a      	add	r2, r1
 8008496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800849a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800849e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	f003 030f 	and.w	r3, r3, #15
 80084b0:	2101      	movs	r1, #1
 80084b2:	fa01 f303 	lsl.w	r3, r1, r3
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	43db      	mvns	r3, r3
 80084ba:	68f9      	ldr	r1, [r7, #12]
 80084bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084c0:	4013      	ands	r3, r2
 80084c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ca:	69da      	ldr	r2, [r3, #28]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	2101      	movs	r1, #1
 80084d6:	fa01 f303 	lsl.w	r3, r1, r3
 80084da:	b29b      	uxth	r3, r3
 80084dc:	43db      	mvns	r3, r3
 80084de:	68f9      	ldr	r1, [r7, #12]
 80084e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084e4:	4013      	ands	r3, r2
 80084e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	0159      	lsls	r1, r3, #5
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	440b      	add	r3, r1
 80084fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008502:	4619      	mov	r1, r3
 8008504:	4b35      	ldr	r3, [pc, #212]	; (80085dc <USB_DeactivateEndpoint+0x1b0>)
 8008506:	4013      	ands	r3, r2
 8008508:	600b      	str	r3, [r1, #0]
 800850a:	e060      	b.n	80085ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800851e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008522:	d11f      	bne.n	8008564 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	0151      	lsls	r1, r2, #5
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	440a      	add	r2, r1
 800853a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800853e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008542:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	440a      	add	r2, r1
 800855a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800855e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008562:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	2101      	movs	r1, #1
 8008576:	fa01 f303 	lsl.w	r3, r1, r3
 800857a:	041b      	lsls	r3, r3, #16
 800857c:	43db      	mvns	r3, r3
 800857e:	68f9      	ldr	r1, [r7, #12]
 8008580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008584:	4013      	ands	r3, r2
 8008586:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858e:	69da      	ldr	r2, [r3, #28]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	2101      	movs	r1, #1
 800859a:	fa01 f303 	lsl.w	r3, r1, r3
 800859e:	041b      	lsls	r3, r3, #16
 80085a0:	43db      	mvns	r3, r3
 80085a2:	68f9      	ldr	r1, [r7, #12]
 80085a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085a8:	4013      	ands	r3, r2
 80085aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	0159      	lsls	r1, r3, #5
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	440b      	add	r3, r1
 80085c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c6:	4619      	mov	r1, r3
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <USB_DeactivateEndpoint+0x1b4>)
 80085ca:	4013      	ands	r3, r2
 80085cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	ec337800 	.word	0xec337800
 80085e0:	eff37800 	.word	0xeff37800

080085e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08a      	sub	sp, #40	; 0x28
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	4613      	mov	r3, r2
 80085f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	2b01      	cmp	r3, #1
 8008602:	f040 815c 	bne.w	80088be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d132      	bne.n	8008674 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	0151      	lsls	r1, r2, #5
 8008620:	69fa      	ldr	r2, [r7, #28]
 8008622:	440a      	add	r2, r1
 8008624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008628:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800862c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	0151      	lsls	r1, r2, #5
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	440a      	add	r2, r1
 8008648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008650:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	0151      	lsls	r1, r2, #5
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	440a      	add	r2, r1
 8008668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866c:	0cdb      	lsrs	r3, r3, #19
 800866e:	04db      	lsls	r3, r3, #19
 8008670:	6113      	str	r3, [r2, #16]
 8008672:	e074      	b.n	800875e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	0151      	lsls	r1, r2, #5
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	440a      	add	r2, r1
 800868a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800868e:	0cdb      	lsrs	r3, r3, #19
 8008690:	04db      	lsls	r3, r3, #19
 8008692:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	0151      	lsls	r1, r2, #5
 80086a6:	69fa      	ldr	r2, [r7, #28]
 80086a8:	440a      	add	r2, r1
 80086aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c4:	691a      	ldr	r2, [r3, #16]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	6959      	ldr	r1, [r3, #20]
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	440b      	add	r3, r1
 80086d0:	1e59      	subs	r1, r3, #1
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80086da:	04d9      	lsls	r1, r3, #19
 80086dc:	4b9d      	ldr	r3, [pc, #628]	; (8008954 <USB_EPStartXfer+0x370>)
 80086de:	400b      	ands	r3, r1
 80086e0:	69b9      	ldr	r1, [r7, #24]
 80086e2:	0148      	lsls	r0, r1, #5
 80086e4:	69f9      	ldr	r1, [r7, #28]
 80086e6:	4401      	add	r1, r0
 80086e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80086ec:	4313      	orrs	r3, r2
 80086ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fc:	691a      	ldr	r2, [r3, #16]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008706:	69b9      	ldr	r1, [r7, #24]
 8008708:	0148      	lsls	r0, r1, #5
 800870a:	69f9      	ldr	r1, [r7, #28]
 800870c:	4401      	add	r1, r0
 800870e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008712:	4313      	orrs	r3, r2
 8008714:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	78db      	ldrb	r3, [r3, #3]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d11f      	bne.n	800875e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	4413      	add	r3, r2
 8008726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	0151      	lsls	r1, r2, #5
 8008730:	69fa      	ldr	r2, [r7, #28]
 8008732:	440a      	add	r2, r1
 8008734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008738:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800873c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	4413      	add	r3, r2
 8008746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	0151      	lsls	r1, r2, #5
 8008750:	69fa      	ldr	r2, [r7, #28]
 8008752:	440a      	add	r2, r1
 8008754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008758:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800875c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d14b      	bne.n	80087fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d009      	beq.n	8008780 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008778:	461a      	mov	r2, r3
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	78db      	ldrb	r3, [r3, #3]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d128      	bne.n	80087da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008794:	2b00      	cmp	r3, #0
 8008796:	d110      	bne.n	80087ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	0151      	lsls	r1, r2, #5
 80087aa:	69fa      	ldr	r2, [r7, #28]
 80087ac:	440a      	add	r2, r1
 80087ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	e00f      	b.n	80087da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	69fa      	ldr	r2, [r7, #28]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	0151      	lsls	r1, r2, #5
 80087ec:	69fa      	ldr	r2, [r7, #28]
 80087ee:	440a      	add	r2, r1
 80087f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	e12f      	b.n	8008a5c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	4413      	add	r3, r2
 8008804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	0151      	lsls	r1, r2, #5
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	440a      	add	r2, r1
 8008812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800881a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	78db      	ldrb	r3, [r3, #3]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d015      	beq.n	8008850 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 8117 	beq.w	8008a5c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f003 030f 	and.w	r3, r3, #15
 800883e:	2101      	movs	r1, #1
 8008840:	fa01 f303 	lsl.w	r3, r1, r3
 8008844:	69f9      	ldr	r1, [r7, #28]
 8008846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800884a:	4313      	orrs	r3, r2
 800884c:	634b      	str	r3, [r1, #52]	; 0x34
 800884e:	e105      	b.n	8008a5c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800885c:	2b00      	cmp	r3, #0
 800885e:	d110      	bne.n	8008882 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	0151      	lsls	r1, r2, #5
 8008872:	69fa      	ldr	r2, [r7, #28]
 8008874:	440a      	add	r2, r1
 8008876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800887a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800887e:	6013      	str	r3, [r2, #0]
 8008880:	e00f      	b.n	80088a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	0151      	lsls	r1, r2, #5
 8008894:	69fa      	ldr	r2, [r7, #28]
 8008896:	440a      	add	r2, r1
 8008898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800889c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	68d9      	ldr	r1, [r3, #12]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	781a      	ldrb	r2, [r3, #0]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	b298      	uxth	r0, r3
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	4603      	mov	r3, r0
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 fa2b 	bl	8008d12 <USB_WritePacket>
 80088bc:	e0ce      	b.n	8008a5c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	69fa      	ldr	r2, [r7, #28]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088d8:	0cdb      	lsrs	r3, r3, #19
 80088da:	04db      	lsls	r3, r3, #19
 80088dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	0151      	lsls	r1, r2, #5
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	440a      	add	r2, r1
 80088f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008900:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d126      	bne.n	8008958 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008916:	691a      	ldr	r2, [r3, #16]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008920:	69b9      	ldr	r1, [r7, #24]
 8008922:	0148      	lsls	r0, r1, #5
 8008924:	69f9      	ldr	r1, [r7, #28]
 8008926:	4401      	add	r1, r0
 8008928:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800892c:	4313      	orrs	r3, r2
 800892e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	0151      	lsls	r1, r2, #5
 8008942:	69fa      	ldr	r2, [r7, #28]
 8008944:	440a      	add	r2, r1
 8008946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800894e:	6113      	str	r3, [r2, #16]
 8008950:	e036      	b.n	80089c0 <USB_EPStartXfer+0x3dc>
 8008952:	bf00      	nop
 8008954:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	695a      	ldr	r2, [r3, #20]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	4413      	add	r3, r2
 8008962:	1e5a      	subs	r2, r3, #1
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	fbb2 f3f3 	udiv	r3, r2, r3
 800896c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897a:	691a      	ldr	r2, [r3, #16]
 800897c:	8afb      	ldrh	r3, [r7, #22]
 800897e:	04d9      	lsls	r1, r3, #19
 8008980:	4b39      	ldr	r3, [pc, #228]	; (8008a68 <USB_EPStartXfer+0x484>)
 8008982:	400b      	ands	r3, r1
 8008984:	69b9      	ldr	r1, [r7, #24]
 8008986:	0148      	lsls	r0, r1, #5
 8008988:	69f9      	ldr	r1, [r7, #28]
 800898a:	4401      	add	r1, r0
 800898c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008990:	4313      	orrs	r3, r2
 8008992:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	691a      	ldr	r2, [r3, #16]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	8af9      	ldrh	r1, [r7, #22]
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089b0:	69b9      	ldr	r1, [r7, #24]
 80089b2:	0148      	lsls	r0, r1, #5
 80089b4:	69f9      	ldr	r1, [r7, #28]
 80089b6:	4401      	add	r1, r0
 80089b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089bc:	4313      	orrs	r3, r2
 80089be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d10d      	bne.n	80089e2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d009      	beq.n	80089e2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	68d9      	ldr	r1, [r3, #12]
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089de:	460a      	mov	r2, r1
 80089e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	78db      	ldrb	r3, [r3, #3]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d128      	bne.n	8008a3c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d110      	bne.n	8008a1c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	69fa      	ldr	r2, [r7, #28]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	e00f      	b.n	8008a3c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	0151      	lsls	r1, r2, #5
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	440a      	add	r2, r1
 8008a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	0151      	lsls	r1, r2, #5
 8008a4e:	69fa      	ldr	r2, [r7, #28]
 8008a50:	440a      	add	r2, r1
 8008a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3720      	adds	r7, #32
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	1ff80000 	.word	0x1ff80000

08008a6c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4613      	mov	r3, r2
 8008a78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	785b      	ldrb	r3, [r3, #1]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	f040 80cd 	bne.w	8008c28 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d132      	bne.n	8008afc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	0151      	lsls	r1, r2, #5
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	440a      	add	r2, r1
 8008aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ab4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ab8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ad8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af4:	0cdb      	lsrs	r3, r3, #19
 8008af6:	04db      	lsls	r3, r3, #19
 8008af8:	6113      	str	r3, [r2, #16]
 8008afa:	e04e      	b.n	8008b9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	0151      	lsls	r1, r2, #5
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	440a      	add	r2, r1
 8008b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b16:	0cdb      	lsrs	r3, r3, #19
 8008b18:	04db      	lsls	r3, r3, #19
 8008b1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	0151      	lsls	r1, r2, #5
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	440a      	add	r2, r1
 8008b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b3e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	695a      	ldr	r2, [r3, #20]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d903      	bls.n	8008b54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	0151      	lsls	r1, r2, #5
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	440a      	add	r2, r1
 8008b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b80:	691a      	ldr	r2, [r3, #16]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b8a:	6939      	ldr	r1, [r7, #16]
 8008b8c:	0148      	lsls	r0, r1, #5
 8008b8e:	6979      	ldr	r1, [r7, #20]
 8008b90:	4401      	add	r1, r0
 8008b92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b96:	4313      	orrs	r3, r2
 8008b98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d11e      	bne.n	8008bde <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d009      	beq.n	8008bbc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	0151      	lsls	r1, r2, #5
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	440a      	add	r2, r1
 8008bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	e092      	b.n	8008d04 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	0151      	lsls	r1, r2, #5
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bfc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d07e      	beq.n	8008d04 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	2101      	movs	r1, #1
 8008c18:	fa01 f303 	lsl.w	r3, r1, r3
 8008c1c:	6979      	ldr	r1, [r7, #20]
 8008c1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c22:	4313      	orrs	r3, r2
 8008c24:	634b      	str	r3, [r1, #52]	; 0x34
 8008c26:	e06d      	b.n	8008d04 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c42:	0cdb      	lsrs	r3, r3, #19
 8008c44:	04db      	lsls	r3, r3, #19
 8008c46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	0151      	lsls	r1, r2, #5
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c6a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	0151      	lsls	r1, r2, #5
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	440a      	add	r2, r1
 8008c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca8:	691a      	ldr	r2, [r3, #16]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cb2:	6939      	ldr	r1, [r7, #16]
 8008cb4:	0148      	lsls	r0, r1, #5
 8008cb6:	6979      	ldr	r1, [r7, #20]
 8008cb8:	4401      	add	r1, r0
 8008cba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008cc2:	79fb      	ldrb	r3, [r7, #7]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d10d      	bne.n	8008ce4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d009      	beq.n	8008ce4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	68d9      	ldr	r1, [r3, #12]
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	460a      	mov	r2, r1
 8008ce2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	0151      	lsls	r1, r2, #5
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	440a      	add	r2, r1
 8008cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	371c      	adds	r7, #28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b089      	sub	sp, #36	; 0x24
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	60f8      	str	r0, [r7, #12]
 8008d1a:	60b9      	str	r1, [r7, #8]
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	461a      	mov	r2, r3
 8008d20:	460b      	mov	r3, r1
 8008d22:	71fb      	strb	r3, [r7, #7]
 8008d24:	4613      	mov	r3, r2
 8008d26:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008d30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d11a      	bne.n	8008d6e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d38:	88bb      	ldrh	r3, [r7, #4]
 8008d3a:	3303      	adds	r3, #3
 8008d3c:	089b      	lsrs	r3, r3, #2
 8008d3e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d40:	2300      	movs	r3, #0
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	e00f      	b.n	8008d66 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	031a      	lsls	r2, r3, #12
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d52:	461a      	mov	r2, r3
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	3301      	adds	r3, #1
 8008d64:	61bb      	str	r3, [r7, #24]
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d3eb      	bcc.n	8008d46 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3724      	adds	r7, #36	; 0x24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b089      	sub	sp, #36	; 0x24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	4613      	mov	r3, r2
 8008d88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008d92:	88fb      	ldrh	r3, [r7, #6]
 8008d94:	3303      	adds	r3, #3
 8008d96:	089b      	lsrs	r3, r3, #2
 8008d98:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	61bb      	str	r3, [r7, #24]
 8008d9e:	e00b      	b.n	8008db8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	601a      	str	r2, [r3, #0]
    pDest++;
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	3304      	adds	r3, #4
 8008db0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	3301      	adds	r3, #1
 8008db6:	61bb      	str	r3, [r7, #24]
 8008db8:	69ba      	ldr	r2, [r7, #24]
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d3ef      	bcc.n	8008da0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008dc0:	69fb      	ldr	r3, [r7, #28]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3724      	adds	r7, #36	; 0x24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d12c      	bne.n	8008e44 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	db12      	blt.n	8008e22 <USB_EPSetStall+0x54>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00f      	beq.n	8008e22 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e20:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	0151      	lsls	r1, r2, #5
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	440a      	add	r2, r1
 8008e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	e02b      	b.n	8008e9c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	db12      	blt.n	8008e7c <USB_EPSetStall+0xae>
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00f      	beq.n	8008e7c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e7a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b085      	sub	sp, #20
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d128      	bne.n	8008f18 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ee0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ee4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	78db      	ldrb	r3, [r3, #3]
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d003      	beq.n	8008ef6 <USB_EPClearStall+0x4c>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	78db      	ldrb	r3, [r3, #3]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d138      	bne.n	8008f68 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	0151      	lsls	r1, r2, #5
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	440a      	add	r2, r1
 8008f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f14:	6013      	str	r3, [r2, #0]
 8008f16:	e027      	b.n	8008f68 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	0151      	lsls	r1, r2, #5
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	440a      	add	r2, r1
 8008f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	78db      	ldrb	r3, [r3, #3]
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d003      	beq.n	8008f48 <USB_EPClearStall+0x9e>
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	78db      	ldrb	r3, [r3, #3]
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d10f      	bne.n	8008f68 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	0151      	lsls	r1, r2, #5
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	440a      	add	r2, r1
 8008f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f66:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b085      	sub	sp, #20
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f98:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	011b      	lsls	r3, r3, #4
 8008fa6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008faa:	68f9      	ldr	r1, [r7, #12]
 8008fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b085      	sub	sp, #20
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fdc:	f023 0303 	bic.w	r3, r3, #3
 8008fe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ff0:	f023 0302 	bic.w	r3, r3, #2
 8008ff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800901e:	f023 0303 	bic.w	r3, r3, #3
 8009022:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009032:	f043 0302 	orr.w	r3, r3, #2
 8009036:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009046:	b480      	push	{r7}
 8009048:	b085      	sub	sp, #20
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	4013      	ands	r3, r2
 800905c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800905e:	68fb      	ldr	r3, [r7, #12]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	4013      	ands	r3, r2
 800908e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	0c1b      	lsrs	r3, r3, #16
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	4013      	ands	r3, r2
 80090c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	b29b      	uxth	r3, r3
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	4013      	ands	r3, r2
 8009100:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009102:	68bb      	ldr	r3, [r7, #8]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009132:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	fa22 f303 	lsr.w	r3, r2, r3
 8009140:	01db      	lsls	r3, r3, #7
 8009142:	b2db      	uxtb	r3, r3
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	4313      	orrs	r3, r2
 8009148:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800914a:	78fb      	ldrb	r3, [r7, #3]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	4013      	ands	r3, r2
 800915c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800915e:	68bb      	ldr	r3, [r7, #8]
}
 8009160:	4618      	mov	r0, r3
 8009162:	371c      	adds	r7, #28
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	f003 0301 	and.w	r3, r3, #1
}
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80091a6:	f023 0307 	bic.w	r3, r3, #7
 80091aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	460b      	mov	r3, r1
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	333c      	adds	r3, #60	; 0x3c
 80091e6:	3304      	adds	r3, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	4a26      	ldr	r2, [pc, #152]	; (8009288 <USB_EP0_OutStart+0xb8>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d90a      	bls.n	800920a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009204:	d101      	bne.n	800920a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	e037      	b.n	800927a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009210:	461a      	mov	r2, r3
 8009212:	2300      	movs	r3, #0
 8009214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009238:	f043 0318 	orr.w	r3, r3, #24
 800923c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800924c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009250:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009252:	7afb      	ldrb	r3, [r7, #11]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d10f      	bne.n	8009278 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925e:	461a      	mov	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009272:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009276:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	4f54300a 	.word	0x4f54300a

0800928c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3301      	adds	r3, #1
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4a13      	ldr	r2, [pc, #76]	; (80092f0 <USB_CoreReset+0x64>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d901      	bls.n	80092aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e01b      	b.n	80092e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	daf2      	bge.n	8009298 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	f043 0201 	orr.w	r2, r3, #1
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3301      	adds	r3, #1
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4a09      	ldr	r2, [pc, #36]	; (80092f0 <USB_CoreReset+0x64>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d901      	bls.n	80092d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e006      	b.n	80092e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d0f0      	beq.n	80092c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	00030d40 	.word	0x00030d40

080092f4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80092f4:	b480      	push	{r7}
 80092f6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80092f8:	bf00      	nop
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
	...

08009304 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af04      	add	r7, sp, #16
 800930a:	4603      	mov	r3, r0
 800930c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800930e:	f04f 33ff 	mov.w	r3, #4294967295
 8009312:	9302      	str	r3, [sp, #8]
 8009314:	2301      	movs	r3, #1
 8009316:	9301      	str	r3, [sp, #4]
 8009318:	1dfb      	adds	r3, r7, #7
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	2301      	movs	r3, #1
 800931e:	2200      	movs	r2, #0
 8009320:	2178      	movs	r1, #120	; 0x78
 8009322:	4803      	ldr	r0, [pc, #12]	; (8009330 <ssd1306_WriteCommand+0x2c>)
 8009324:	f7fa fb52 	bl	80039cc <HAL_I2C_Mem_Write>
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	200003dc 	.word	0x200003dc

08009334 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af04      	add	r7, sp, #16
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	b29b      	uxth	r3, r3
 8009342:	f04f 32ff 	mov.w	r2, #4294967295
 8009346:	9202      	str	r2, [sp, #8]
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	2301      	movs	r3, #1
 8009350:	2240      	movs	r2, #64	; 0x40
 8009352:	2178      	movs	r1, #120	; 0x78
 8009354:	4803      	ldr	r0, [pc, #12]	; (8009364 <ssd1306_WriteData+0x30>)
 8009356:	f7fa fb39 	bl	80039cc <HAL_I2C_Mem_Write>
}
 800935a:	bf00      	nop
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	200003dc 	.word	0x200003dc

08009368 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800936c:	f7ff ffc2 	bl	80092f4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8009370:	2064      	movs	r0, #100	; 0x64
 8009372:	f7f9 fc33 	bl	8002bdc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8009376:	2000      	movs	r0, #0
 8009378:	f000 f9e6 	bl	8009748 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800937c:	2020      	movs	r0, #32
 800937e:	f7ff ffc1 	bl	8009304 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8009382:	2000      	movs	r0, #0
 8009384:	f7ff ffbe 	bl	8009304 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8009388:	20b0      	movs	r0, #176	; 0xb0
 800938a:	f7ff ffbb 	bl	8009304 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800938e:	20c8      	movs	r0, #200	; 0xc8
 8009390:	f7ff ffb8 	bl	8009304 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8009394:	2000      	movs	r0, #0
 8009396:	f7ff ffb5 	bl	8009304 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800939a:	2010      	movs	r0, #16
 800939c:	f7ff ffb2 	bl	8009304 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80093a0:	2040      	movs	r0, #64	; 0x40
 80093a2:	f7ff ffaf 	bl	8009304 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80093a6:	20ff      	movs	r0, #255	; 0xff
 80093a8:	f000 f9ba 	bl	8009720 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80093ac:	20a1      	movs	r0, #161	; 0xa1
 80093ae:	f7ff ffa9 	bl	8009304 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80093b2:	20a6      	movs	r0, #166	; 0xa6
 80093b4:	f7ff ffa6 	bl	8009304 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80093b8:	20a8      	movs	r0, #168	; 0xa8
 80093ba:	f7ff ffa3 	bl	8009304 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80093be:	203f      	movs	r0, #63	; 0x3f
 80093c0:	f7ff ffa0 	bl	8009304 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80093c4:	20a4      	movs	r0, #164	; 0xa4
 80093c6:	f7ff ff9d 	bl	8009304 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80093ca:	20d3      	movs	r0, #211	; 0xd3
 80093cc:	f7ff ff9a 	bl	8009304 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80093d0:	2000      	movs	r0, #0
 80093d2:	f7ff ff97 	bl	8009304 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80093d6:	20d5      	movs	r0, #213	; 0xd5
 80093d8:	f7ff ff94 	bl	8009304 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80093dc:	20f0      	movs	r0, #240	; 0xf0
 80093de:	f7ff ff91 	bl	8009304 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80093e2:	20d9      	movs	r0, #217	; 0xd9
 80093e4:	f7ff ff8e 	bl	8009304 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80093e8:	2022      	movs	r0, #34	; 0x22
 80093ea:	f7ff ff8b 	bl	8009304 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80093ee:	20da      	movs	r0, #218	; 0xda
 80093f0:	f7ff ff88 	bl	8009304 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80093f4:	2012      	movs	r0, #18
 80093f6:	f7ff ff85 	bl	8009304 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80093fa:	20db      	movs	r0, #219	; 0xdb
 80093fc:	f7ff ff82 	bl	8009304 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8009400:	2020      	movs	r0, #32
 8009402:	f7ff ff7f 	bl	8009304 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8009406:	208d      	movs	r0, #141	; 0x8d
 8009408:	f7ff ff7c 	bl	8009304 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800940c:	2014      	movs	r0, #20
 800940e:	f7ff ff79 	bl	8009304 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8009412:	2001      	movs	r0, #1
 8009414:	f000 f998 	bl	8009748 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black_);
 8009418:	2000      	movs	r0, #0
 800941a:	f000 f80f 	bl	800943c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800941e:	f000 f831 	bl	8009484 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8009422:	4b05      	ldr	r3, [pc, #20]	; (8009438 <ssd1306_Init+0xd0>)
 8009424:	2200      	movs	r2, #0
 8009426:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8009428:	4b03      	ldr	r3, [pc, #12]	; (8009438 <ssd1306_Init+0xd0>)
 800942a:	2200      	movs	r2, #0
 800942c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800942e:	4b02      	ldr	r3, [pc, #8]	; (8009438 <ssd1306_Init+0xd0>)
 8009430:	2201      	movs	r2, #1
 8009432:	715a      	strb	r2, [r3, #5]
}
 8009434:	bf00      	nop
 8009436:	bd80      	pop	{r7, pc}
 8009438:	20000d74 	.word	0x20000d74

0800943c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	e00d      	b.n	8009468 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black_) ? 0x00 : 0xFF;
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <ssd1306_Fill+0x1a>
 8009452:	2100      	movs	r1, #0
 8009454:	e000      	b.n	8009458 <ssd1306_Fill+0x1c>
 8009456:	21ff      	movs	r1, #255	; 0xff
 8009458:	4a09      	ldr	r2, [pc, #36]	; (8009480 <ssd1306_Fill+0x44>)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4413      	add	r3, r2
 800945e:	460a      	mov	r2, r1
 8009460:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3301      	adds	r3, #1
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800946e:	d3ed      	bcc.n	800944c <ssd1306_Fill+0x10>
    }
}
 8009470:	bf00      	nop
 8009472:	bf00      	nop
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	20000974 	.word	0x20000974

08009484 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800948a:	2300      	movs	r3, #0
 800948c:	71fb      	strb	r3, [r7, #7]
 800948e:	e016      	b.n	80094be <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	3b50      	subs	r3, #80	; 0x50
 8009494:	b2db      	uxtb	r3, r3
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff ff34 	bl	8009304 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800949c:	2000      	movs	r0, #0
 800949e:	f7ff ff31 	bl	8009304 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80094a2:	2010      	movs	r0, #16
 80094a4:	f7ff ff2e 	bl	8009304 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	01db      	lsls	r3, r3, #7
 80094ac:	4a08      	ldr	r2, [pc, #32]	; (80094d0 <ssd1306_UpdateScreen+0x4c>)
 80094ae:	4413      	add	r3, r2
 80094b0:	2180      	movs	r1, #128	; 0x80
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff ff3e 	bl	8009334 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80094b8:	79fb      	ldrb	r3, [r7, #7]
 80094ba:	3301      	adds	r3, #1
 80094bc:	71fb      	strb	r3, [r7, #7]
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	2b07      	cmp	r3, #7
 80094c2:	d9e5      	bls.n	8009490 <ssd1306_UpdateScreen+0xc>
    }
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20000974 	.word	0x20000974

080094d4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	71fb      	strb	r3, [r7, #7]
 80094de:	460b      	mov	r3, r1
 80094e0:	71bb      	strb	r3, [r7, #6]
 80094e2:	4613      	mov	r3, r2
 80094e4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80094e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	db48      	blt.n	8009580 <ssd1306_DrawPixel+0xac>
 80094ee:	79bb      	ldrb	r3, [r7, #6]
 80094f0:	2b3f      	cmp	r3, #63	; 0x3f
 80094f2:	d845      	bhi.n	8009580 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80094f4:	4b25      	ldr	r3, [pc, #148]	; (800958c <ssd1306_DrawPixel+0xb8>)
 80094f6:	791b      	ldrb	r3, [r3, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d006      	beq.n	800950a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80094fc:	797b      	ldrb	r3, [r7, #5]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	bf0c      	ite	eq
 8009502:	2301      	moveq	r3, #1
 8009504:	2300      	movne	r3, #0
 8009506:	b2db      	uxtb	r3, r3
 8009508:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White_) {
 800950a:	797b      	ldrb	r3, [r7, #5]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d11a      	bne.n	8009546 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8009510:	79fa      	ldrb	r2, [r7, #7]
 8009512:	79bb      	ldrb	r3, [r7, #6]
 8009514:	08db      	lsrs	r3, r3, #3
 8009516:	b2d8      	uxtb	r0, r3
 8009518:	4603      	mov	r3, r0
 800951a:	01db      	lsls	r3, r3, #7
 800951c:	4413      	add	r3, r2
 800951e:	4a1c      	ldr	r2, [pc, #112]	; (8009590 <ssd1306_DrawPixel+0xbc>)
 8009520:	5cd3      	ldrb	r3, [r2, r3]
 8009522:	b25a      	sxtb	r2, r3
 8009524:	79bb      	ldrb	r3, [r7, #6]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	2101      	movs	r1, #1
 800952c:	fa01 f303 	lsl.w	r3, r1, r3
 8009530:	b25b      	sxtb	r3, r3
 8009532:	4313      	orrs	r3, r2
 8009534:	b259      	sxtb	r1, r3
 8009536:	79fa      	ldrb	r2, [r7, #7]
 8009538:	4603      	mov	r3, r0
 800953a:	01db      	lsls	r3, r3, #7
 800953c:	4413      	add	r3, r2
 800953e:	b2c9      	uxtb	r1, r1
 8009540:	4a13      	ldr	r2, [pc, #76]	; (8009590 <ssd1306_DrawPixel+0xbc>)
 8009542:	54d1      	strb	r1, [r2, r3]
 8009544:	e01d      	b.n	8009582 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8009546:	79fa      	ldrb	r2, [r7, #7]
 8009548:	79bb      	ldrb	r3, [r7, #6]
 800954a:	08db      	lsrs	r3, r3, #3
 800954c:	b2d8      	uxtb	r0, r3
 800954e:	4603      	mov	r3, r0
 8009550:	01db      	lsls	r3, r3, #7
 8009552:	4413      	add	r3, r2
 8009554:	4a0e      	ldr	r2, [pc, #56]	; (8009590 <ssd1306_DrawPixel+0xbc>)
 8009556:	5cd3      	ldrb	r3, [r2, r3]
 8009558:	b25a      	sxtb	r2, r3
 800955a:	79bb      	ldrb	r3, [r7, #6]
 800955c:	f003 0307 	and.w	r3, r3, #7
 8009560:	2101      	movs	r1, #1
 8009562:	fa01 f303 	lsl.w	r3, r1, r3
 8009566:	b25b      	sxtb	r3, r3
 8009568:	43db      	mvns	r3, r3
 800956a:	b25b      	sxtb	r3, r3
 800956c:	4013      	ands	r3, r2
 800956e:	b259      	sxtb	r1, r3
 8009570:	79fa      	ldrb	r2, [r7, #7]
 8009572:	4603      	mov	r3, r0
 8009574:	01db      	lsls	r3, r3, #7
 8009576:	4413      	add	r3, r2
 8009578:	b2c9      	uxtb	r1, r1
 800957a:	4a05      	ldr	r2, [pc, #20]	; (8009590 <ssd1306_DrawPixel+0xbc>)
 800957c:	54d1      	strb	r1, [r2, r3]
 800957e:	e000      	b.n	8009582 <ssd1306_DrawPixel+0xae>
        return;
 8009580:	bf00      	nop
    }
}
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	20000d74 	.word	0x20000d74
 8009590:	20000974 	.word	0x20000974

08009594 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black_ or White_
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8009594:	b590      	push	{r4, r7, lr}
 8009596:	b089      	sub	sp, #36	; 0x24
 8009598:	af00      	add	r7, sp, #0
 800959a:	4604      	mov	r4, r0
 800959c:	1d38      	adds	r0, r7, #4
 800959e:	e880 0006 	stmia.w	r0, {r1, r2}
 80095a2:	461a      	mov	r2, r3
 80095a4:	4623      	mov	r3, r4
 80095a6:	73fb      	strb	r3, [r7, #15]
 80095a8:	4613      	mov	r3, r2
 80095aa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	2b1f      	cmp	r3, #31
 80095b0:	d902      	bls.n	80095b8 <ssd1306_WriteChar+0x24>
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	2b7e      	cmp	r3, #126	; 0x7e
 80095b6:	d901      	bls.n	80095bc <ssd1306_WriteChar+0x28>
        return 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	e06d      	b.n	8009698 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80095bc:	4b38      	ldr	r3, [pc, #224]	; (80096a0 <ssd1306_WriteChar+0x10c>)
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	461a      	mov	r2, r3
 80095c2:	793b      	ldrb	r3, [r7, #4]
 80095c4:	4413      	add	r3, r2
 80095c6:	2b80      	cmp	r3, #128	; 0x80
 80095c8:	dc06      	bgt.n	80095d8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80095ca:	4b35      	ldr	r3, [pc, #212]	; (80096a0 <ssd1306_WriteChar+0x10c>)
 80095cc:	885b      	ldrh	r3, [r3, #2]
 80095ce:	461a      	mov	r2, r3
 80095d0:	797b      	ldrb	r3, [r7, #5]
 80095d2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80095d4:	2b40      	cmp	r3, #64	; 0x40
 80095d6:	dd01      	ble.n	80095dc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	e05d      	b.n	8009698 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80095dc:	2300      	movs	r3, #0
 80095de:	61fb      	str	r3, [r7, #28]
 80095e0:	e04c      	b.n	800967c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	3b20      	subs	r3, #32
 80095e8:	7979      	ldrb	r1, [r7, #5]
 80095ea:	fb01 f303 	mul.w	r3, r1, r3
 80095ee:	4619      	mov	r1, r3
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	440b      	add	r3, r1
 80095f4:	005b      	lsls	r3, r3, #1
 80095f6:	4413      	add	r3, r2
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80095fc:	2300      	movs	r3, #0
 80095fe:	61bb      	str	r3, [r7, #24]
 8009600:	e034      	b.n	800966c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	fa02 f303 	lsl.w	r3, r2, r3
 800960a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d012      	beq.n	8009638 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8009612:	4b23      	ldr	r3, [pc, #140]	; (80096a0 <ssd1306_WriteChar+0x10c>)
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	b2da      	uxtb	r2, r3
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	b2db      	uxtb	r3, r3
 800961c:	4413      	add	r3, r2
 800961e:	b2d8      	uxtb	r0, r3
 8009620:	4b1f      	ldr	r3, [pc, #124]	; (80096a0 <ssd1306_WriteChar+0x10c>)
 8009622:	885b      	ldrh	r3, [r3, #2]
 8009624:	b2da      	uxtb	r2, r3
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	b2db      	uxtb	r3, r3
 800962a:	4413      	add	r3, r2
 800962c:	b2db      	uxtb	r3, r3
 800962e:	7bba      	ldrb	r2, [r7, #14]
 8009630:	4619      	mov	r1, r3
 8009632:	f7ff ff4f 	bl	80094d4 <ssd1306_DrawPixel>
 8009636:	e016      	b.n	8009666 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8009638:	4b19      	ldr	r3, [pc, #100]	; (80096a0 <ssd1306_WriteChar+0x10c>)
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	b2da      	uxtb	r2, r3
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	4413      	add	r3, r2
 8009644:	b2d8      	uxtb	r0, r3
 8009646:	4b16      	ldr	r3, [pc, #88]	; (80096a0 <ssd1306_WriteChar+0x10c>)
 8009648:	885b      	ldrh	r3, [r3, #2]
 800964a:	b2da      	uxtb	r2, r3
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	b2db      	uxtb	r3, r3
 8009650:	4413      	add	r3, r2
 8009652:	b2d9      	uxtb	r1, r3
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	2b00      	cmp	r3, #0
 8009658:	bf0c      	ite	eq
 800965a:	2301      	moveq	r3, #1
 800965c:	2300      	movne	r3, #0
 800965e:	b2db      	uxtb	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	f7ff ff37 	bl	80094d4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	3301      	adds	r3, #1
 800966a:	61bb      	str	r3, [r7, #24]
 800966c:	793b      	ldrb	r3, [r7, #4]
 800966e:	461a      	mov	r2, r3
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	4293      	cmp	r3, r2
 8009674:	d3c5      	bcc.n	8009602 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	3301      	adds	r3, #1
 800967a:	61fb      	str	r3, [r7, #28]
 800967c:	797b      	ldrb	r3, [r7, #5]
 800967e:	461a      	mov	r2, r3
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	4293      	cmp	r3, r2
 8009684:	d3ad      	bcc.n	80095e2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8009686:	4b06      	ldr	r3, [pc, #24]	; (80096a0 <ssd1306_WriteChar+0x10c>)
 8009688:	881a      	ldrh	r2, [r3, #0]
 800968a:	793b      	ldrb	r3, [r7, #4]
 800968c:	b29b      	uxth	r3, r3
 800968e:	4413      	add	r3, r2
 8009690:	b29a      	uxth	r2, r3
 8009692:	4b03      	ldr	r3, [pc, #12]	; (80096a0 <ssd1306_WriteChar+0x10c>)
 8009694:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8009696:	7bfb      	ldrb	r3, [r7, #15]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3724      	adds	r7, #36	; 0x24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd90      	pop	{r4, r7, pc}
 80096a0:	20000d74 	.word	0x20000d74

080096a4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	1d38      	adds	r0, r7, #4
 80096ae:	e880 0006 	stmia.w	r0, {r1, r2}
 80096b2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80096b4:	e012      	b.n	80096dc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	7818      	ldrb	r0, [r3, #0]
 80096ba:	78fb      	ldrb	r3, [r7, #3]
 80096bc:	1d3a      	adds	r2, r7, #4
 80096be:	ca06      	ldmia	r2, {r1, r2}
 80096c0:	f7ff ff68 	bl	8009594 <ssd1306_WriteChar>
 80096c4:	4603      	mov	r3, r0
 80096c6:	461a      	mov	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d002      	beq.n	80096d6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	e008      	b.n	80096e8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3301      	adds	r3, #1
 80096da:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e8      	bne.n	80096b6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	781b      	ldrb	r3, [r3, #0]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	460a      	mov	r2, r1
 80096fa:	71fb      	strb	r3, [r7, #7]
 80096fc:	4613      	mov	r3, r2
 80096fe:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	b29a      	uxth	r2, r3
 8009704:	4b05      	ldr	r3, [pc, #20]	; (800971c <ssd1306_SetCursor+0x2c>)
 8009706:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8009708:	79bb      	ldrb	r3, [r7, #6]
 800970a:	b29a      	uxth	r2, r3
 800970c:	4b03      	ldr	r3, [pc, #12]	; (800971c <ssd1306_SetCursor+0x2c>)
 800970e:	805a      	strh	r2, [r3, #2]
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	20000d74 	.word	0x20000d74

08009720 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800972a:	2381      	movs	r3, #129	; 0x81
 800972c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff fde7 	bl	8009304 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fde3 	bl	8009304 <ssd1306_WriteCommand>
}
 800973e:	bf00      	nop
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8009758:	23af      	movs	r3, #175	; 0xaf
 800975a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800975c:	4b08      	ldr	r3, [pc, #32]	; (8009780 <ssd1306_SetDisplayOn+0x38>)
 800975e:	2201      	movs	r2, #1
 8009760:	719a      	strb	r2, [r3, #6]
 8009762:	e004      	b.n	800976e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8009764:	23ae      	movs	r3, #174	; 0xae
 8009766:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8009768:	4b05      	ldr	r3, [pc, #20]	; (8009780 <ssd1306_SetDisplayOn+0x38>)
 800976a:	2200      	movs	r2, #0
 800976c:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff fdc7 	bl	8009304 <ssd1306_WriteCommand>
}
 8009776:	bf00      	nop
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20000d74 	.word	0x20000d74

08009784 <USBD_HID_Init>:
  * @retval status
  */
/* We have to add the dataout/ep_out function here to get USB pipe data out
 * This is only used with XBCD or THPS 2, every other XBOX game sends rumble through control requests */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009790:	2010      	movs	r0, #16
 8009792:	f004 fdff 	bl	800e394 <USBD_static_malloc>
 8009796:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d105      	bne.n	80097aa <USBD_HID_Init+0x26>
  {
	  //usb_failed = 1;
    pdev->pClassData = NULL;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80097a6:	2302      	movs	r3, #2
 80097a8:	e033      	b.n	8009812 <USBD_HID_Init+0x8e>
  }

  pdev->pClassData = (void *)hhid;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	7c1b      	ldrb	r3, [r3, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d107      	bne.n	80097ca <USBD_HID_Init+0x46>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2207      	movs	r2, #7
 80097be:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2207      	movs	r2, #7
 80097c4:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
 80097c8:	e006      	b.n	80097d8 <USBD_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2204      	movs	r2, #4
 80097ce:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2204      	movs	r2, #4
 80097d4:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80097d8:	2320      	movs	r3, #32
 80097da:	2203      	movs	r2, #3
 80097dc:	2181      	movs	r1, #129	; 0x81
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f004 fc79 	bl	800e0d6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 80097ea:	2306      	movs	r3, #6
 80097ec:	2203      	movs	r2, #3
 80097ee:	2102      	movs	r1, #2
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f004 fc70 	bl	800e0d6 <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  (void)USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR,(uint8_t*)rx_buf, HID_EPOUT_SIZE);
 80097fe:	2306      	movs	r3, #6
 8009800:	4a06      	ldr	r2, [pc, #24]	; (800981c <USBD_HID_Init+0x98>)
 8009802:	2102      	movs	r1, #2
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f004 fd55 	bl	800e2b4 <USBD_LL_PrepareReceive>

  hhid->state = HID_IDLE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	731a      	strb	r2, [r3, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();

  /* Prepare Out endpoint to receive 1st packet */

  return (uint8_t)USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	200003d4 	.word	0x200003d4

08009820 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800982c:	2181      	movs	r1, #129	; 0x81
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f004 fc77 	bl	800e122 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, HID_EPOUT_ADDR);
 8009840:	2102      	movs	r1, #2
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f004 fc6d 	bl	800e122 <USBD_LL_CloseEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800985e:	2b00      	cmp	r3, #0
 8009860:	d009      	beq.n	8009876 <USBD_HID_DeInit+0x56>
  {
    (void)USBD_free(pdev->pClassData);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009868:	4618      	mov	r0, r3
 800986a:	f004 fda1 	bl	800e3b0 <USBD_static_free>
    pdev->pClassData = NULL;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009890:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009896:	2300      	movs	r3, #0
 8009898:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d104      	bne.n	80098aa <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 80098a0:	4b9f      	ldr	r3, [pc, #636]	; (8009b20 <USBD_HID_Setup+0x2a0>)
 80098a2:	2201      	movs	r2, #1
 80098a4:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e136      	b.n	8009b18 <USBD_HID_Setup+0x298>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098b2:	2b40      	cmp	r3, #64	; 0x40
 80098b4:	f000 80e1 	beq.w	8009a7a <USBD_HID_Setup+0x1fa>
 80098b8:	2b40      	cmp	r3, #64	; 0x40
 80098ba:	f200 8124 	bhi.w	8009b06 <USBD_HID_Setup+0x286>
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d058      	beq.n	8009974 <USBD_HID_Setup+0xf4>
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	f040 811f 	bne.w	8009b06 <USBD_HID_Setup+0x286>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	785b      	ldrb	r3, [r3, #1]
 80098cc:	3b02      	subs	r3, #2
 80098ce:	2b09      	cmp	r3, #9
 80098d0:	d848      	bhi.n	8009964 <USBD_HID_Setup+0xe4>
 80098d2:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <USBD_HID_Setup+0x58>)
 80098d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d8:	0800992f 	.word	0x0800992f
 80098dc:	0800990f 	.word	0x0800990f
 80098e0:	08009965 	.word	0x08009965
 80098e4:	08009965 	.word	0x08009965
 80098e8:	08009965 	.word	0x08009965
 80098ec:	08009965 	.word	0x08009965
 80098f0:	08009965 	.word	0x08009965
 80098f4:	0800993f 	.word	0x0800993f
 80098f8:	0800991d 	.word	0x0800991d
 80098fc:	08009901 	.word	0x08009901
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	885b      	ldrh	r3, [r3, #2]
 8009904:	b2db      	uxtb	r3, r3
 8009906:	461a      	mov	r2, r3
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	601a      	str	r2, [r3, #0]
          break;
 800990c:	e031      	b.n	8009972 <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	2201      	movs	r2, #1
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 fada 	bl	800aece <USBD_CtlSendData>
          break;
 800991a:	e02a      	b.n	8009972 <USBD_HID_Setup+0xf2>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	885b      	ldrh	r3, [r3, #2]
 8009920:	0a1b      	lsrs	r3, r3, #8
 8009922:	b29b      	uxth	r3, r3
 8009924:	b2db      	uxtb	r3, r3
 8009926:	461a      	mov	r2, r3
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	605a      	str	r2, [r3, #4]
          break;
 800992c:	e021      	b.n	8009972 <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	3304      	adds	r3, #4
 8009932:	2201      	movs	r2, #1
 8009934:	4619      	mov	r1, r3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f001 fac9 	bl	800aece <USBD_CtlSendData>
          break;
 800993c:	e019      	b.n	8009972 <USBD_HID_Setup+0xf2>

        /*We need to get Control request data for the rumble data from the XBOX, we have to add this ourselves */
        case HID_REQ_SET_REPORT:
          rumble_flag = 1;
 800993e:	4b79      	ldr	r3, [pc, #484]	; (8009b24 <USBD_HID_Setup+0x2a4>)
 8009940:	2201      	movs	r2, #1
 8009942:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_ID = (uint8_t)(req->wValue);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	885b      	ldrh	r3, [r3, #2]
 8009948:	b2da      	uxtb	r2, r3
 800994a:	4b77      	ldr	r3, [pc, #476]	; (8009b28 <USBD_HID_Setup+0x2a8>)
 800994c:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_LENGTH = (uint8_t)(req->wLength);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	88db      	ldrh	r3, [r3, #6]
 8009952:	b2da      	uxtb	r2, r3
 8009954:	4b75      	ldr	r3, [pc, #468]	; (8009b2c <USBD_HID_Setup+0x2ac>)
 8009956:	701a      	strb	r2, [r3, #0]
          USBD_CtlPrepareRx (pdev, ctl_report_buf, HID_EPOUT_SIZE);
 8009958:	2206      	movs	r2, #6
 800995a:	4975      	ldr	r1, [pc, #468]	; (8009b30 <USBD_HID_Setup+0x2b0>)
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 fae2 	bl	800af26 <USBD_CtlPrepareRx>
          break;
 8009962:	e006      	b.n	8009972 <USBD_HID_Setup+0xf2>
//                            (uint8_t *)&Report_buf,
//                            8);
//          break;

        default:
          USBD_CtlError(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f001 fa40 	bl	800adec <USBD_CtlError>
          ret = USBD_FAIL;
 800996c:	2303      	movs	r3, #3
 800996e:	77fb      	strb	r3, [r7, #31]
          break;
 8009970:	bf00      	nop
      }
      break;
 8009972:	e0d0      	b.n	8009b16 <USBD_HID_Setup+0x296>
    case USB_REQ_TYPE_STANDARD:

      switch (req->bRequest)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	785b      	ldrb	r3, [r3, #1]
 8009978:	2b0b      	cmp	r3, #11
 800997a:	d875      	bhi.n	8009a68 <USBD_HID_Setup+0x1e8>
 800997c:	a201      	add	r2, pc, #4	; (adr r2, 8009984 <USBD_HID_Setup+0x104>)
 800997e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009982:	bf00      	nop
 8009984:	080099b5 	.word	0x080099b5
 8009988:	08009a77 	.word	0x08009a77
 800998c:	08009a69 	.word	0x08009a69
 8009990:	08009a69 	.word	0x08009a69
 8009994:	08009a69 	.word	0x08009a69
 8009998:	08009a69 	.word	0x08009a69
 800999c:	080099df 	.word	0x080099df
 80099a0:	08009a69 	.word	0x08009a69
 80099a4:	08009a69 	.word	0x08009a69
 80099a8:	08009a69 	.word	0x08009a69
 80099ac:	08009a17 	.word	0x08009a17
 80099b0:	08009a41 	.word	0x08009a41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d107      	bne.n	80099d0 <USBD_HID_Setup+0x150>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099c0:	f107 030e 	add.w	r3, r7, #14
 80099c4:	2202      	movs	r2, #2
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 fa80 	bl	800aece <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099ce:	e053      	b.n	8009a78 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 fa0a 	bl	800adec <USBD_CtlError>
            ret = USBD_FAIL;
 80099d8:	2303      	movs	r3, #3
 80099da:	77fb      	strb	r3, [r7, #31]
          break;
 80099dc:	e04c      	b.n	8009a78 <USBD_HID_Setup+0x1f8>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	885b      	ldrh	r3, [r3, #2]
 80099e2:	0a1b      	lsrs	r3, r3, #8
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	2b21      	cmp	r3, #33	; 0x21
 80099e8:	d10e      	bne.n	8009a08 <USBD_HID_Setup+0x188>
          {
            pbuf = USBD_HID_Desc;
 80099ea:	4b52      	ldr	r3, [pc, #328]	; (8009b34 <USBD_HID_Setup+0x2b4>)
 80099ec:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	88db      	ldrh	r3, [r3, #6]
 80099f2:	2b12      	cmp	r3, #18
 80099f4:	bf28      	it	cs
 80099f6:	2312      	movcs	r3, #18
 80099f8:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80099fa:	8afb      	ldrh	r3, [r7, #22]
 80099fc:	461a      	mov	r2, r3
 80099fe:	6939      	ldr	r1, [r7, #16]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 fa64 	bl	800aece <USBD_CtlSendData>
          break;
 8009a06:	e037      	b.n	8009a78 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 f9ee 	bl	800adec <USBD_CtlError>
            ret = USBD_FAIL;
 8009a10:	2303      	movs	r3, #3
 8009a12:	77fb      	strb	r3, [r7, #31]
            break;
 8009a14:	e030      	b.n	8009a78 <USBD_HID_Setup+0x1f8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d107      	bne.n	8009a32 <USBD_HID_Setup+0x1b2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	3308      	adds	r3, #8
 8009a26:	2201      	movs	r2, #1
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 fa4f 	bl	800aece <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a30:	e022      	b.n	8009a78 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 f9d9 	bl	800adec <USBD_CtlError>
            ret = USBD_FAIL;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	77fb      	strb	r3, [r7, #31]
          break;
 8009a3e:	e01b      	b.n	8009a78 <USBD_HID_Setup+0x1f8>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d106      	bne.n	8009a5a <USBD_HID_Setup+0x1da>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	885b      	ldrh	r3, [r3, #2]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	461a      	mov	r2, r3
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a58:	e00e      	b.n	8009a78 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 f9c5 	bl	800adec <USBD_CtlError>
            ret = USBD_FAIL;
 8009a62:	2303      	movs	r3, #3
 8009a64:	77fb      	strb	r3, [r7, #31]
          break;
 8009a66:	e007      	b.n	8009a78 <USBD_HID_Setup+0x1f8>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f001 f9be 	bl	800adec <USBD_CtlError>
          ret = USBD_FAIL;
 8009a70:	2303      	movs	r3, #3
 8009a72:	77fb      	strb	r3, [r7, #31]
          break;
 8009a74:	e000      	b.n	8009a78 <USBD_HID_Setup+0x1f8>
          break;
 8009a76:	bf00      	nop
      }
      break;
 8009a78:	e04d      	b.n	8009b16 <USBD_HID_Setup+0x296>
    /*This is for the og XBOX, this is the custom vendor request
     * We intercept these and return either the controller's capabilities
     * This is equivalent to the USB HID Descriptor which would normally be used for most devices */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 8009a7a:	4b2f      	ldr	r3, [pc, #188]	; (8009b38 <USBD_HID_Setup+0x2b8>)
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	4b2d      	ldr	r3, [pc, #180]	; (8009b38 <USBD_HID_Setup+0x2b8>)
 8009a84:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	785b      	ldrb	r3, [r3, #1]
 8009a8a:	2b06      	cmp	r3, #6
 8009a8c:	d10f      	bne.n	8009aae <USBD_HID_Setup+0x22e>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	885b      	ldrh	r3, [r3, #2]
 8009a92:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8009a96:	d10a      	bne.n	8009aae <USBD_HID_Setup+0x22e>
    		len = 16;
 8009a98:	2310      	movs	r3, #16
 8009a9a:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 8009a9c:	4b25      	ldr	r3, [pc, #148]	; (8009b34 <USBD_HID_Setup+0x2b4>)
 8009a9e:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8009aa0:	8afb      	ldrh	r3, [r7, #22]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	6939      	ldr	r1, [r7, #16]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f001 fa11 	bl	800aece <USBD_CtlSendData>
 8009aac:	e02a      	b.n	8009b04 <USBD_HID_Setup+0x284>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	785b      	ldrb	r3, [r3, #1]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d10f      	bne.n	8009ad6 <USBD_HID_Setup+0x256>
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	885b      	ldrh	r3, [r3, #2]
 8009aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009abe:	d10a      	bne.n	8009ad6 <USBD_HID_Setup+0x256>
    		len = 20;
 8009ac0:	2314      	movs	r3, #20
 8009ac2:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8009ac4:	4b1d      	ldr	r3, [pc, #116]	; (8009b3c <USBD_HID_Setup+0x2bc>)
 8009ac6:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8009ac8:	8afb      	ldrh	r3, [r7, #22]
 8009aca:	461a      	mov	r2, r3
 8009acc:	6939      	ldr	r1, [r7, #16]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f001 f9fd 	bl	800aece <USBD_CtlSendData>
 8009ad4:	e016      	b.n	8009b04 <USBD_HID_Setup+0x284>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	785b      	ldrb	r3, [r3, #1]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d11a      	bne.n	8009b14 <USBD_HID_Setup+0x294>
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	885b      	ldrh	r3, [r3, #2]
 8009ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ae6:	d115      	bne.n	8009b14 <USBD_HID_Setup+0x294>
    		rumble_brequest_sent = 1;
 8009ae8:	4b15      	ldr	r3, [pc, #84]	; (8009b40 <USBD_HID_Setup+0x2c0>)
 8009aea:	2201      	movs	r2, #1
 8009aec:	701a      	strb	r2, [r3, #0]
    		len = 6;
 8009aee:	2306      	movs	r3, #6
 8009af0:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8009af2:	4b14      	ldr	r3, [pc, #80]	; (8009b44 <USBD_HID_Setup+0x2c4>)
 8009af4:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8009af6:	8afb      	ldrh	r3, [r7, #22]
 8009af8:	461a      	mov	r2, r3
 8009afa:	6939      	ldr	r1, [r7, #16]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f001 f9e6 	bl	800aece <USBD_CtlSendData>
    	}
    break;
 8009b02:	e007      	b.n	8009b14 <USBD_HID_Setup+0x294>
 8009b04:	e006      	b.n	8009b14 <USBD_HID_Setup+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 f96f 	bl	800adec <USBD_CtlError>
      ret = USBD_FAIL;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	77fb      	strb	r3, [r7, #31]
      break;
 8009b12:	e000      	b.n	8009b16 <USBD_HID_Setup+0x296>
    break;
 8009b14:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b16:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3720      	adds	r7, #32
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20000d7e 	.word	0x20000d7e
 8009b24:	20000d8a 	.word	0x20000d8a
 8009b28:	20000d80 	.word	0x20000d80
 8009b2c:	20000d81 	.word	0x20000d81
 8009b30:	20000d84 	.word	0x20000d84
 8009b34:	20000090 	.word	0x20000090
 8009b38:	20000d7c 	.word	0x20000d7c
 8009b3c:	200000ac 	.word	0x200000ac
 8009b40:	20000d7f 	.word	0x20000d7f
 8009b44:	200000c0 	.word	0x200000c0

08009b48 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	4613      	mov	r3, r2
 8009b54:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b5c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e013      	b.n	8009b90 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d10c      	bne.n	8009b8e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	7b1b      	ldrb	r3, [r3, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d108      	bne.n	8009b8e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8009b82:	88fb      	ldrh	r3, [r7, #6]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	2181      	movs	r1, #129	; 0x81
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f004 fb72 	bl	800e272 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8009ba6:	4b03      	ldr	r3, [pc, #12]	; (8009bb4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	20000050 	.word	0x20000050

08009bb8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8009bc0:	bf00      	nop
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
	...

08009bd0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2220      	movs	r2, #32
 8009bdc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8009bde:	4b03      	ldr	r3, [pc, #12]	; (8009bec <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	20000070 	.word	0x20000070

08009bf0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c02:	2200      	movs	r2, #0
 8009c04:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USBD_HID_DataOut>:
/* DataOut will only run for THPS 2 or activating rumble in XBCD on a PC */
static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	70fb      	strb	r3, [r7, #3]
	dataout_ran++;
 8009c20:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <USBD_HID_DataOut+0x30>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	3301      	adds	r3, #1
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	4b06      	ldr	r3, [pc, #24]	; (8009c44 <USBD_HID_DataOut+0x30>)
 8009c2a:	701a      	strb	r2, [r3, #0]
	USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, (uint8_t*) (rx_buf), HID_EPOUT_SIZE);
 8009c2c:	2306      	movs	r3, #6
 8009c2e:	4a06      	ldr	r2, [pc, #24]	; (8009c48 <USBD_HID_DataOut+0x34>)
 8009c30:	2102      	movs	r1, #2
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f004 fb3e 	bl	800e2b4 <USBD_LL_PrepareReceive>
	return USBD_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20000d7d 	.word	0x20000d7d
 8009c48:	200003d4 	.word	0x200003d4

08009c4c <USBD_HID_EP0_RxReady>:
  * @retval status
  */
/*This is to put the rumble data from the USB control requests into rx_buf so we can read that in main
 * This is the standard way XBOX sends rumble data, this different from a PC which would send data through USB Out Pipe */
static uint8_t USBD_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
	if (rumble_flag) {
 8009c54:	4b10      	ldr	r3, [pc, #64]	; (8009c98 <USBD_HID_EP0_RxReady+0x4c>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d015      	beq.n	8009c88 <USBD_HID_EP0_RxReady+0x3c>
		rumble_flag = 0;
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <USBD_HID_EP0_RxReady+0x4c>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	701a      	strb	r2, [r3, #0]
		if (USBD_HID_Report_LENGTH == HID_EPOUT_SIZE) {
 8009c62:	4b0e      	ldr	r3, [pc, #56]	; (8009c9c <USBD_HID_EP0_RxReady+0x50>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b06      	cmp	r3, #6
 8009c68:	d10e      	bne.n	8009c88 <USBD_HID_EP0_RxReady+0x3c>
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	73fb      	strb	r3, [r7, #15]
 8009c6e:	e008      	b.n	8009c82 <USBD_HID_EP0_RxReady+0x36>
				rx_buf[i] = ctl_report_buf[i];
 8009c70:	7bfa      	ldrb	r2, [r7, #15]
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	490a      	ldr	r1, [pc, #40]	; (8009ca0 <USBD_HID_EP0_RxReady+0x54>)
 8009c76:	5c89      	ldrb	r1, [r1, r2]
 8009c78:	4a0a      	ldr	r2, [pc, #40]	; (8009ca4 <USBD_HID_EP0_RxReady+0x58>)
 8009c7a:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	73fb      	strb	r3, [r7, #15]
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
 8009c84:	2b05      	cmp	r3, #5
 8009c86:	d9f3      	bls.n	8009c70 <USBD_HID_EP0_RxReady+0x24>
			}
		}
	}
	return (uint8_t) USBD_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	20000d8a 	.word	0x20000d8a
 8009c9c:	20000d81 	.word	0x20000d81
 8009ca0:	20000d84 	.word	0x20000d84
 8009ca4:	200003d4 	.word	0x200003d4

08009ca8 <USBD_HID_EP0_TxSent>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_HID_EP0_TxSent(USBD_HandleTypeDef *pdev)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
//    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
//                                                              hhid->Report_buf[1]);
//    hhid->IsReportAvailable = 0U;
//  }

  return (uint8_t)USBD_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
	...

08009cc0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	220a      	movs	r2, #10
 8009ccc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8009cce:	4b03      	ldr	r3, [pc, #12]	; (8009cdc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	200000a0 	.word	0x200000a0

08009ce0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	4613      	mov	r3, r2
 8009cec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e01f      	b.n	8009d38 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	79fa      	ldrb	r2, [r7, #7]
 8009d2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f004 f96b 	bl	800e008 <USBD_LL_Init>
 8009d32:	4603      	mov	r3, r0
 8009d34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e016      	b.n	8009d86 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00b      	beq.n	8009d84 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	f107 020e 	add.w	r2, r7, #14
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4798      	blx	r3
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f004 f982 	bl	800e0a0 <USBD_LL_Start>
 8009d9c:	4603      	mov	r3, r0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009da6:	b480      	push	{r7}
 8009da8:	b083      	sub	sp, #12
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d009      	beq.n	8009dea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	78fa      	ldrb	r2, [r7, #3]
 8009de0:	4611      	mov	r1, r2
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	4798      	blx	r3
 8009de6:	4603      	mov	r3, r0
 8009de8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d007      	beq.n	8009e1a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	78fa      	ldrb	r2, [r7, #3]
 8009e14:	4611      	mov	r1, r2
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	4798      	blx	r3
  }

  return USBD_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 ff9e 	bl	800ad78 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e58:	f003 031f 	and.w	r3, r3, #31
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d01a      	beq.n	8009e96 <USBD_LL_SetupStage+0x72>
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d822      	bhi.n	8009eaa <USBD_LL_SetupStage+0x86>
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <USBD_LL_SetupStage+0x4a>
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d00a      	beq.n	8009e82 <USBD_LL_SetupStage+0x5e>
 8009e6c:	e01d      	b.n	8009eaa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fa62 	bl	800a340 <USBD_StdDevReq>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e80:	e020      	b.n	8009ec4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fad4 	bl	800a438 <USBD_StdItfReq>
 8009e90:	4603      	mov	r3, r0
 8009e92:	73fb      	strb	r3, [r7, #15]
      break;
 8009e94:	e016      	b.n	8009ec4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fb13 	bl	800a4ca <USBD_StdEPReq>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea8:	e00c      	b.n	8009ec4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009eb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f004 f951 	bl	800e160 <USBD_LL_StallEP>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ec2:	bf00      	nop
  }

  return ret;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b086      	sub	sp, #24
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	607a      	str	r2, [r7, #4]
 8009eda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009edc:	7afb      	ldrb	r3, [r7, #11]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d138      	bne.n	8009f54 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009ee8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ef0:	2b03      	cmp	r3, #3
 8009ef2:	d14a      	bne.n	8009f8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	689a      	ldr	r2, [r3, #8]
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d913      	bls.n	8009f28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	1ad2      	subs	r2, r2, r3
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	68da      	ldr	r2, [r3, #12]
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	4293      	cmp	r3, r2
 8009f18:	bf28      	it	cs
 8009f1a:	4613      	movcs	r3, r2
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f001 f81d 	bl	800af60 <USBD_CtlContinueRx>
 8009f26:	e030      	b.n	8009f8a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d10b      	bne.n	8009f4c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f001 f818 	bl	800af82 <USBD_CtlSendStatus>
 8009f52:	e01a      	b.n	8009f8a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b03      	cmp	r3, #3
 8009f5e:	d114      	bne.n	8009f8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00e      	beq.n	8009f8a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	7afa      	ldrb	r2, [r7, #11]
 8009f76:	4611      	mov	r1, r2
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	4798      	blx	r3
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
 8009f88:	e000      	b.n	8009f8c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	607a      	str	r2, [r7, #4]
 8009fa0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009fa2:	7afb      	ldrb	r3, [r7, #11]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d16b      	bne.n	800a080 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	3314      	adds	r3, #20
 8009fac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d156      	bne.n	800a066 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	689a      	ldr	r2, [r3, #8]
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d914      	bls.n	8009fee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	1ad2      	subs	r2, r2, r3
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 ff92 	bl	800af04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f004 f964 	bl	800e2b4 <USBD_LL_PrepareReceive>
 8009fec:	e03b      	b.n	800a066 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	68da      	ldr	r2, [r3, #12]
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d11c      	bne.n	800a034 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	685a      	ldr	r2, [r3, #4]
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a002:	429a      	cmp	r2, r3
 800a004:	d316      	bcc.n	800a034 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a010:	429a      	cmp	r2, r3
 800a012:	d20f      	bcs.n	800a034 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a014:	2200      	movs	r2, #0
 800a016:	2100      	movs	r1, #0
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 ff73 	bl	800af04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a026:	2300      	movs	r3, #0
 800a028:	2200      	movs	r2, #0
 800a02a:	2100      	movs	r1, #0
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f004 f941 	bl	800e2b4 <USBD_LL_PrepareReceive>
 800a032:	e018      	b.n	800a066 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d10b      	bne.n	800a058 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d005      	beq.n	800a058 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a058:	2180      	movs	r1, #128	; 0x80
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f004 f880 	bl	800e160 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 ffa1 	bl	800afa8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d122      	bne.n	800a0b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7ff fe98 	bl	8009da6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a07e:	e01a      	b.n	800a0b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a086:	b2db      	uxtb	r3, r3
 800a088:	2b03      	cmp	r3, #3
 800a08a:	d114      	bne.n	800a0b6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00e      	beq.n	800a0b6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	7afa      	ldrb	r2, [r7, #11]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	4798      	blx	r3
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a0b2:	7dfb      	ldrb	r3, [r7, #23]
 800a0b4:	e000      	b.n	800a0b8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e02f      	b.n	800a154 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00f      	beq.n	800a11e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d009      	beq.n	800a11e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	6852      	ldr	r2, [r2, #4]
 800a116:	b2d2      	uxtb	r2, r2
 800a118:	4611      	mov	r1, r2
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a11e:	2340      	movs	r3, #64	; 0x40
 800a120:	2200      	movs	r2, #0
 800a122:	2100      	movs	r1, #0
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f003 ffd6 	bl	800e0d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2240      	movs	r2, #64	; 0x40
 800a136:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a13a:	2340      	movs	r3, #64	; 0x40
 800a13c:	2200      	movs	r2, #0
 800a13e:	2180      	movs	r1, #128	; 0x80
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f003 ffc8 	bl	800e0d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2240      	movs	r2, #64	; 0x40
 800a150:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	460b      	mov	r3, r1
 800a166:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2204      	movs	r2, #4
 800a196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d106      	bne.n	800a1ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e012      	b.n	800a214 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d10b      	bne.n	800a212 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a232:	2303      	movs	r3, #3
 800a234:	e014      	b.n	800a260 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d10d      	bne.n	800a25e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d007      	beq.n	800a25e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	78fa      	ldrb	r2, [r7, #3]
 800a258:	4611      	mov	r1, r2
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a27e:	2303      	movs	r3, #3
 800a280:	e014      	b.n	800a2ac <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d10d      	bne.n	800a2aa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	2b00      	cmp	r3, #0
 800a298:	d007      	beq.n	800a2aa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	78fa      	ldrb	r2, [r7, #3]
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d009      	beq.n	800a2f8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	6852      	ldr	r2, [r2, #4]
 800a2f0:	b2d2      	uxtb	r2, r2
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	4798      	blx	r3
  }

  return USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a302:	b480      	push	{r7}
 800a304:	b087      	sub	sp, #28
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	3301      	adds	r3, #1
 800a318:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a320:	8a3b      	ldrh	r3, [r7, #16]
 800a322:	021b      	lsls	r3, r3, #8
 800a324:	b21a      	sxth	r2, r3
 800a326:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	b21b      	sxth	r3, r3
 800a32e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a330:	89fb      	ldrh	r3, [r7, #14]
}
 800a332:	4618      	mov	r0, r3
 800a334:	371c      	adds	r7, #28
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
	...

0800a340 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	73fb      	strb	r3, [r7, #15]

	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	4798      	blx	r3
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]

	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a368:	2b40      	cmp	r3, #64	; 0x40
 800a36a:	d005      	beq.n	800a378 <USBD_StdDevReq+0x38>
 800a36c:	2b40      	cmp	r3, #64	; 0x40
 800a36e:	d854      	bhi.n	800a41a <USBD_StdDevReq+0xda>
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00b      	beq.n	800a38c <USBD_StdDevReq+0x4c>
 800a374:	2b20      	cmp	r3, #32
 800a376:	d150      	bne.n	800a41a <USBD_StdDevReq+0xda>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	4798      	blx	r3
 800a386:	4603      	mov	r3, r0
 800a388:	73fb      	strb	r3, [r7, #15]
		  break;
 800a38a:	e04e      	b.n	800a42a <USBD_StdDevReq+0xea>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	785b      	ldrb	r3, [r3, #1]
 800a390:	2b09      	cmp	r3, #9
 800a392:	d83c      	bhi.n	800a40e <USBD_StdDevReq+0xce>
 800a394:	a201      	add	r2, pc, #4	; (adr r2, 800a39c <USBD_StdDevReq+0x5c>)
 800a396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39a:	bf00      	nop
 800a39c:	0800a3f1 	.word	0x0800a3f1
 800a3a0:	0800a405 	.word	0x0800a405
 800a3a4:	0800a40f 	.word	0x0800a40f
 800a3a8:	0800a3fb 	.word	0x0800a3fb
 800a3ac:	0800a40f 	.word	0x0800a40f
 800a3b0:	0800a3cf 	.word	0x0800a3cf
 800a3b4:	0800a3c5 	.word	0x0800a3c5
 800a3b8:	0800a40f 	.word	0x0800a40f
 800a3bc:	0800a3e7 	.word	0x0800a3e7
 800a3c0:	0800a3d9 	.word	0x0800a3d9
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f9e2 	bl	800a790 <USBD_GetDescriptor>
			  break;
 800a3cc:	e024      	b.n	800a418 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fb47 	bl	800aa64 <USBD_SetAddress>
			  break;
 800a3d6:	e01f      	b.n	800a418 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fb86 	bl	800aaec <USBD_SetConfig>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73fb      	strb	r3, [r7, #15]
			  break;
 800a3e4:	e018      	b.n	800a418 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fc25 	bl	800ac38 <USBD_GetConfig>
			  break;
 800a3ee:	e013      	b.n	800a418 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fc56 	bl	800aca4 <USBD_GetStatus>
			  break;
 800a3f8:	e00e      	b.n	800a418 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 800a3fa:	6839      	ldr	r1, [r7, #0]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fc85 	bl	800ad0c <USBD_SetFeature>
			  break;
 800a402:	e009      	b.n	800a418 <USBD_StdDevReq+0xd8>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 800a404:	6839      	ldr	r1, [r7, #0]
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fc94 	bl	800ad34 <USBD_ClrFeature>
			  break;
 800a40c:	e004      	b.n	800a418 <USBD_StdDevReq+0xd8>

			default:
			  USBD_CtlError(pdev, req);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fceb 	bl	800adec <USBD_CtlError>
			  break;
 800a416:	bf00      	nop
		  }
		  break;
 800a418:	e007      	b.n	800a42a <USBD_StdDevReq+0xea>

		default:
		  unknown_bmrequest = 1;
 800a41a:	4b06      	ldr	r3, [pc, #24]	; (800a434 <USBD_StdDevReq+0xf4>)
 800a41c:	2201      	movs	r2, #1
 800a41e:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fce2 	bl	800adec <USBD_CtlError>
		  break;
 800a428:	bf00      	nop
	  }

  return ret;
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000d8b 	.word	0x20000d8b

0800a438 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a44e:	2b40      	cmp	r3, #64	; 0x40
 800a450:	d005      	beq.n	800a45e <USBD_StdItfReq+0x26>
 800a452:	2b40      	cmp	r3, #64	; 0x40
 800a454:	d82f      	bhi.n	800a4b6 <USBD_StdItfReq+0x7e>
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <USBD_StdItfReq+0x26>
 800a45a:	2b20      	cmp	r3, #32
 800a45c:	d12b      	bne.n	800a4b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a464:	b2db      	uxtb	r3, r3
 800a466:	3b01      	subs	r3, #1
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d81d      	bhi.n	800a4a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	889b      	ldrh	r3, [r3, #4]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b01      	cmp	r3, #1
 800a474:	d813      	bhi.n	800a49e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	4798      	blx	r3
 800a484:	4603      	mov	r3, r0
 800a486:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	88db      	ldrh	r3, [r3, #6]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d110      	bne.n	800a4b2 <USBD_StdItfReq+0x7a>
 800a490:	7bfb      	ldrb	r3, [r7, #15]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10d      	bne.n	800a4b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 fd73 	bl	800af82 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a49c:	e009      	b.n	800a4b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a49e:	6839      	ldr	r1, [r7, #0]
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fca3 	bl	800adec <USBD_CtlError>
          break;
 800a4a6:	e004      	b.n	800a4b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fc9e 	bl	800adec <USBD_CtlError>
          break;
 800a4b0:	e000      	b.n	800a4b4 <USBD_StdItfReq+0x7c>
          break;
 800a4b2:	bf00      	nop
      }
      break;
 800a4b4:	e004      	b.n	800a4c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fc97 	bl	800adec <USBD_CtlError>
      break;
 800a4be:	bf00      	nop
  }

  return ret;
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	889b      	ldrh	r3, [r3, #4]
 800a4dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4e6:	2b40      	cmp	r3, #64	; 0x40
 800a4e8:	d007      	beq.n	800a4fa <USBD_StdEPReq+0x30>
 800a4ea:	2b40      	cmp	r3, #64	; 0x40
 800a4ec:	f200 8145 	bhi.w	800a77a <USBD_StdEPReq+0x2b0>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00c      	beq.n	800a50e <USBD_StdEPReq+0x44>
 800a4f4:	2b20      	cmp	r3, #32
 800a4f6:	f040 8140 	bne.w	800a77a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	4798      	blx	r3
 800a508:	4603      	mov	r3, r0
 800a50a:	73fb      	strb	r3, [r7, #15]
      break;
 800a50c:	e13a      	b.n	800a784 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	785b      	ldrb	r3, [r3, #1]
 800a512:	2b03      	cmp	r3, #3
 800a514:	d007      	beq.n	800a526 <USBD_StdEPReq+0x5c>
 800a516:	2b03      	cmp	r3, #3
 800a518:	f300 8129 	bgt.w	800a76e <USBD_StdEPReq+0x2a4>
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d07f      	beq.n	800a620 <USBD_StdEPReq+0x156>
 800a520:	2b01      	cmp	r3, #1
 800a522:	d03c      	beq.n	800a59e <USBD_StdEPReq+0xd4>
 800a524:	e123      	b.n	800a76e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d002      	beq.n	800a538 <USBD_StdEPReq+0x6e>
 800a532:	2b03      	cmp	r3, #3
 800a534:	d016      	beq.n	800a564 <USBD_StdEPReq+0x9a>
 800a536:	e02c      	b.n	800a592 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a538:	7bbb      	ldrb	r3, [r7, #14]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00d      	beq.n	800a55a <USBD_StdEPReq+0x90>
 800a53e:	7bbb      	ldrb	r3, [r7, #14]
 800a540:	2b80      	cmp	r3, #128	; 0x80
 800a542:	d00a      	beq.n	800a55a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a544:	7bbb      	ldrb	r3, [r7, #14]
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f003 fe09 	bl	800e160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a54e:	2180      	movs	r1, #128	; 0x80
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f003 fe05 	bl	800e160 <USBD_LL_StallEP>
 800a556:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a558:	e020      	b.n	800a59c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fc45 	bl	800adec <USBD_CtlError>
              break;
 800a562:	e01b      	b.n	800a59c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	885b      	ldrh	r3, [r3, #2]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10e      	bne.n	800a58a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <USBD_StdEPReq+0xc0>
 800a572:	7bbb      	ldrb	r3, [r7, #14]
 800a574:	2b80      	cmp	r3, #128	; 0x80
 800a576:	d008      	beq.n	800a58a <USBD_StdEPReq+0xc0>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	88db      	ldrh	r3, [r3, #6]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d104      	bne.n	800a58a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a580:	7bbb      	ldrb	r3, [r7, #14]
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f003 fdeb 	bl	800e160 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fcf9 	bl	800af82 <USBD_CtlSendStatus>

              break;
 800a590:	e004      	b.n	800a59c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fc29 	bl	800adec <USBD_CtlError>
              break;
 800a59a:	bf00      	nop
          }
          break;
 800a59c:	e0ec      	b.n	800a778 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d002      	beq.n	800a5b0 <USBD_StdEPReq+0xe6>
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d016      	beq.n	800a5dc <USBD_StdEPReq+0x112>
 800a5ae:	e030      	b.n	800a612 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00d      	beq.n	800a5d2 <USBD_StdEPReq+0x108>
 800a5b6:	7bbb      	ldrb	r3, [r7, #14]
 800a5b8:	2b80      	cmp	r3, #128	; 0x80
 800a5ba:	d00a      	beq.n	800a5d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5bc:	7bbb      	ldrb	r3, [r7, #14]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f003 fdcd 	bl	800e160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5c6:	2180      	movs	r1, #128	; 0x80
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f003 fdc9 	bl	800e160 <USBD_LL_StallEP>
 800a5ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5d0:	e025      	b.n	800a61e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fc09 	bl	800adec <USBD_CtlError>
              break;
 800a5da:	e020      	b.n	800a61e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	885b      	ldrh	r3, [r3, #2]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d11b      	bne.n	800a61c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d004      	beq.n	800a5f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a5ee:	7bbb      	ldrb	r3, [r7, #14]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f003 fdd3 	bl	800e19e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fcc2 	bl	800af82 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	4798      	blx	r3
 800a60c:	4603      	mov	r3, r0
 800a60e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a610:	e004      	b.n	800a61c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a612:	6839      	ldr	r1, [r7, #0]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fbe9 	bl	800adec <USBD_CtlError>
              break;
 800a61a:	e000      	b.n	800a61e <USBD_StdEPReq+0x154>
              break;
 800a61c:	bf00      	nop
          }
          break;
 800a61e:	e0ab      	b.n	800a778 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d002      	beq.n	800a632 <USBD_StdEPReq+0x168>
 800a62c:	2b03      	cmp	r3, #3
 800a62e:	d032      	beq.n	800a696 <USBD_StdEPReq+0x1cc>
 800a630:	e097      	b.n	800a762 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a632:	7bbb      	ldrb	r3, [r7, #14]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d007      	beq.n	800a648 <USBD_StdEPReq+0x17e>
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	2b80      	cmp	r3, #128	; 0x80
 800a63c:	d004      	beq.n	800a648 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fbd3 	bl	800adec <USBD_CtlError>
                break;
 800a646:	e091      	b.n	800a76c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	da0b      	bge.n	800a668 <USBD_StdEPReq+0x19e>
 800a650:	7bbb      	ldrb	r3, [r7, #14]
 800a652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	3310      	adds	r3, #16
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	4413      	add	r3, r2
 800a664:	3304      	adds	r3, #4
 800a666:	e00b      	b.n	800a680 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a668:	7bbb      	ldrb	r3, [r7, #14]
 800a66a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a66e:	4613      	mov	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	4413      	add	r3, r2
 800a67e:	3304      	adds	r3, #4
 800a680:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2200      	movs	r2, #0
 800a686:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2202      	movs	r2, #2
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fc1d 	bl	800aece <USBD_CtlSendData>
              break;
 800a694:	e06a      	b.n	800a76c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	da11      	bge.n	800a6c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	f003 020f 	and.w	r2, r3, #15
 800a6a4:	6879      	ldr	r1, [r7, #4]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	440b      	add	r3, r1
 800a6b0:	3324      	adds	r3, #36	; 0x24
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d117      	bne.n	800a6e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fb96 	bl	800adec <USBD_CtlError>
                  break;
 800a6c0:	e054      	b.n	800a76c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a6c2:	7bbb      	ldrb	r3, [r7, #14]
 800a6c4:	f003 020f 	and.w	r2, r3, #15
 800a6c8:	6879      	ldr	r1, [r7, #4]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4413      	add	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	440b      	add	r3, r1
 800a6d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d104      	bne.n	800a6e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fb83 	bl	800adec <USBD_CtlError>
                  break;
 800a6e6:	e041      	b.n	800a76c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	da0b      	bge.n	800a708 <USBD_StdEPReq+0x23e>
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
 800a6f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	3310      	adds	r3, #16
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	4413      	add	r3, r2
 800a704:	3304      	adds	r3, #4
 800a706:	e00b      	b.n	800a720 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a708:	7bbb      	ldrb	r3, [r7, #14]
 800a70a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a70e:	4613      	mov	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	4413      	add	r3, r2
 800a71e:	3304      	adds	r3, #4
 800a720:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a722:	7bbb      	ldrb	r3, [r7, #14]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <USBD_StdEPReq+0x264>
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	2b80      	cmp	r3, #128	; 0x80
 800a72c:	d103      	bne.n	800a736 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	2200      	movs	r2, #0
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	e00e      	b.n	800a754 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a736:	7bbb      	ldrb	r3, [r7, #14]
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f003 fd4e 	bl	800e1dc <USBD_LL_IsStallEP>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d003      	beq.n	800a74e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	2201      	movs	r2, #1
 800a74a:	601a      	str	r2, [r3, #0]
 800a74c:	e002      	b.n	800a754 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2200      	movs	r2, #0
 800a752:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2202      	movs	r2, #2
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fbb7 	bl	800aece <USBD_CtlSendData>
              break;
 800a760:	e004      	b.n	800a76c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fb41 	bl	800adec <USBD_CtlError>
              break;
 800a76a:	bf00      	nop
          }
          break;
 800a76c:	e004      	b.n	800a778 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a76e:	6839      	ldr	r1, [r7, #0]
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fb3b 	bl	800adec <USBD_CtlError>
          break;
 800a776:	bf00      	nop
      }
      break;
 800a778:	e004      	b.n	800a784 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a77a:	6839      	ldr	r1, [r7, #0]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fb35 	bl	800adec <USBD_CtlError>
      break;
 800a782:	bf00      	nop
  }

  return ret;
 800a784:	7bfb      	ldrb	r3, [r7, #15]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a79a:	2300      	movs	r3, #0
 800a79c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	885b      	ldrh	r3, [r3, #2]
 800a7aa:	0a1b      	lsrs	r3, r3, #8
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	2b06      	cmp	r3, #6
 800a7b2:	f200 8128 	bhi.w	800aa06 <USBD_GetDescriptor+0x276>
 800a7b6:	a201      	add	r2, pc, #4	; (adr r2, 800a7bc <USBD_GetDescriptor+0x2c>)
 800a7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7bc:	0800a7d9 	.word	0x0800a7d9
 800a7c0:	0800a7f1 	.word	0x0800a7f1
 800a7c4:	0800a831 	.word	0x0800a831
 800a7c8:	0800aa07 	.word	0x0800aa07
 800a7cc:	0800aa07 	.word	0x0800aa07
 800a7d0:	0800a9a7 	.word	0x0800a9a7
 800a7d4:	0800a9d3 	.word	0x0800a9d3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	7c12      	ldrb	r2, [r2, #16]
 800a7e4:	f107 0108 	add.w	r1, r7, #8
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	4798      	blx	r3
 800a7ec:	60f8      	str	r0, [r7, #12]
      break;
 800a7ee:	e112      	b.n	800aa16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	7c1b      	ldrb	r3, [r3, #16]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10d      	bne.n	800a814 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a800:	f107 0208 	add.w	r2, r7, #8
 800a804:	4610      	mov	r0, r2
 800a806:	4798      	blx	r3
 800a808:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3301      	adds	r3, #1
 800a80e:	2202      	movs	r2, #2
 800a810:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a812:	e100      	b.n	800aa16 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81c:	f107 0208 	add.w	r2, r7, #8
 800a820:	4610      	mov	r0, r2
 800a822:	4798      	blx	r3
 800a824:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3301      	adds	r3, #1
 800a82a:	2202      	movs	r2, #2
 800a82c:	701a      	strb	r2, [r3, #0]
      break;
 800a82e:	e0f2      	b.n	800aa16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	885b      	ldrh	r3, [r3, #2]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b05      	cmp	r3, #5
 800a838:	f200 80ac 	bhi.w	800a994 <USBD_GetDescriptor+0x204>
 800a83c:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <USBD_GetDescriptor+0xb4>)
 800a83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a842:	bf00      	nop
 800a844:	0800a85d 	.word	0x0800a85d
 800a848:	0800a891 	.word	0x0800a891
 800a84c:	0800a8c5 	.word	0x0800a8c5
 800a850:	0800a8f9 	.word	0x0800a8f9
 800a854:	0800a92d 	.word	0x0800a92d
 800a858:	0800a961 	.word	0x0800a961
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00b      	beq.n	800a880 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	7c12      	ldrb	r2, [r2, #16]
 800a874:	f107 0108 	add.w	r1, r7, #8
 800a878:	4610      	mov	r0, r2
 800a87a:	4798      	blx	r3
 800a87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a87e:	e091      	b.n	800a9a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fab2 	bl	800adec <USBD_CtlError>
            err++;
 800a888:	7afb      	ldrb	r3, [r7, #11]
 800a88a:	3301      	adds	r3, #1
 800a88c:	72fb      	strb	r3, [r7, #11]
          break;
 800a88e:	e089      	b.n	800a9a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00b      	beq.n	800a8b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	7c12      	ldrb	r2, [r2, #16]
 800a8a8:	f107 0108 	add.w	r1, r7, #8
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4798      	blx	r3
 800a8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8b2:	e077      	b.n	800a9a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fa98 	bl	800adec <USBD_CtlError>
            err++;
 800a8bc:	7afb      	ldrb	r3, [r7, #11]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8c2:	e06f      	b.n	800a9a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00b      	beq.n	800a8e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	7c12      	ldrb	r2, [r2, #16]
 800a8dc:	f107 0108 	add.w	r1, r7, #8
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	4798      	blx	r3
 800a8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8e6:	e05d      	b.n	800a9a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fa7e 	bl	800adec <USBD_CtlError>
            err++;
 800a8f0:	7afb      	ldrb	r3, [r7, #11]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8f6:	e055      	b.n	800a9a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00b      	beq.n	800a91c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	7c12      	ldrb	r2, [r2, #16]
 800a910:	f107 0108 	add.w	r1, r7, #8
 800a914:	4610      	mov	r0, r2
 800a916:	4798      	blx	r3
 800a918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a91a:	e043      	b.n	800a9a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fa64 	bl	800adec <USBD_CtlError>
            err++;
 800a924:	7afb      	ldrb	r3, [r7, #11]
 800a926:	3301      	adds	r3, #1
 800a928:	72fb      	strb	r3, [r7, #11]
          break;
 800a92a:	e03b      	b.n	800a9a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00b      	beq.n	800a950 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	7c12      	ldrb	r2, [r2, #16]
 800a944:	f107 0108 	add.w	r1, r7, #8
 800a948:	4610      	mov	r0, r2
 800a94a:	4798      	blx	r3
 800a94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a94e:	e029      	b.n	800a9a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fa4a 	bl	800adec <USBD_CtlError>
            err++;
 800a958:	7afb      	ldrb	r3, [r7, #11]
 800a95a:	3301      	adds	r3, #1
 800a95c:	72fb      	strb	r3, [r7, #11]
          break;
 800a95e:	e021      	b.n	800a9a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00b      	beq.n	800a984 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	7c12      	ldrb	r2, [r2, #16]
 800a978:	f107 0108 	add.w	r1, r7, #8
 800a97c:	4610      	mov	r0, r2
 800a97e:	4798      	blx	r3
 800a980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a982:	e00f      	b.n	800a9a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fa30 	bl	800adec <USBD_CtlError>
            err++;
 800a98c:	7afb      	ldrb	r3, [r7, #11]
 800a98e:	3301      	adds	r3, #1
 800a990:	72fb      	strb	r3, [r7, #11]
          break;
 800a992:	e007      	b.n	800a9a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fa28 	bl	800adec <USBD_CtlError>
          err++;
 800a99c:	7afb      	ldrb	r3, [r7, #11]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a9a2:	bf00      	nop
      }
      break;
 800a9a4:	e037      	b.n	800aa16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	7c1b      	ldrb	r3, [r3, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d109      	bne.n	800a9c2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b6:	f107 0208 	add.w	r2, r7, #8
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	4798      	blx	r3
 800a9be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9c0:	e029      	b.n	800aa16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fa11 	bl	800adec <USBD_CtlError>
        err++;
 800a9ca:	7afb      	ldrb	r3, [r7, #11]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	72fb      	strb	r3, [r7, #11]
      break;
 800a9d0:	e021      	b.n	800aa16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	7c1b      	ldrb	r3, [r3, #16]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10d      	bne.n	800a9f6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e2:	f107 0208 	add.w	r2, r7, #8
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	4798      	blx	r3
 800a9ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	2207      	movs	r2, #7
 800a9f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9f4:	e00f      	b.n	800aa16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f9f7 	bl	800adec <USBD_CtlError>
        err++;
 800a9fe:	7afb      	ldrb	r3, [r7, #11]
 800aa00:	3301      	adds	r3, #1
 800aa02:	72fb      	strb	r3, [r7, #11]
      break;
 800aa04:	e007      	b.n	800aa16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f9ef 	bl	800adec <USBD_CtlError>
      err++;
 800aa0e:	7afb      	ldrb	r3, [r7, #11]
 800aa10:	3301      	adds	r3, #1
 800aa12:	72fb      	strb	r3, [r7, #11]
      break;
 800aa14:	bf00      	nop
  }

  if (err != 0U)
 800aa16:	7afb      	ldrb	r3, [r7, #11]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d11e      	bne.n	800aa5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	88db      	ldrh	r3, [r3, #6]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d016      	beq.n	800aa52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aa24:	893b      	ldrh	r3, [r7, #8]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00e      	beq.n	800aa48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	88da      	ldrh	r2, [r3, #6]
 800aa2e:	893b      	ldrh	r3, [r7, #8]
 800aa30:	4293      	cmp	r3, r2
 800aa32:	bf28      	it	cs
 800aa34:	4613      	movcs	r3, r2
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa3a:	893b      	ldrh	r3, [r7, #8]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	68f9      	ldr	r1, [r7, #12]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fa44 	bl	800aece <USBD_CtlSendData>
 800aa46:	e009      	b.n	800aa5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f9ce 	bl	800adec <USBD_CtlError>
 800aa50:	e004      	b.n	800aa5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fa95 	bl	800af82 <USBD_CtlSendStatus>
 800aa58:	e000      	b.n	800aa5c <USBD_GetDescriptor+0x2cc>
    return;
 800aa5a:	bf00      	nop
  }
}
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop

0800aa64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	889b      	ldrh	r3, [r3, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d131      	bne.n	800aada <USBD_SetAddress+0x76>
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	88db      	ldrh	r3, [r3, #6]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d12d      	bne.n	800aada <USBD_SetAddress+0x76>
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	885b      	ldrh	r3, [r3, #2]
 800aa82:	2b7f      	cmp	r3, #127	; 0x7f
 800aa84:	d829      	bhi.n	800aada <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	885b      	ldrh	r3, [r3, #2]
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d104      	bne.n	800aaa8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa9e:	6839      	ldr	r1, [r7, #0]
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f9a3 	bl	800adec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa6:	e01d      	b.n	800aae4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	7bfa      	ldrb	r2, [r7, #15]
 800aaac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f003 fbbd 	bl	800e234 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fa61 	bl	800af82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d004      	beq.n	800aad0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2202      	movs	r2, #2
 800aaca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aace:	e009      	b.n	800aae4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad8:	e004      	b.n	800aae4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f985 	bl	800adec <USBD_CtlError>
  }
}
 800aae2:	bf00      	nop
 800aae4:	bf00      	nop
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	885b      	ldrh	r3, [r3, #2]
 800aafe:	b2da      	uxtb	r2, r3
 800ab00:	4b4c      	ldr	r3, [pc, #304]	; (800ac34 <USBD_SetConfig+0x148>)
 800ab02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab04:	4b4b      	ldr	r3, [pc, #300]	; (800ac34 <USBD_SetConfig+0x148>)
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d905      	bls.n	800ab18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f96c 	bl	800adec <USBD_CtlError>
    return USBD_FAIL;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e088      	b.n	800ac2a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d002      	beq.n	800ab2a <USBD_SetConfig+0x3e>
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d025      	beq.n	800ab74 <USBD_SetConfig+0x88>
 800ab28:	e071      	b.n	800ac0e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ab2a:	4b42      	ldr	r3, [pc, #264]	; (800ac34 <USBD_SetConfig+0x148>)
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d01c      	beq.n	800ab6c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ab32:	4b40      	ldr	r3, [pc, #256]	; (800ac34 <USBD_SetConfig+0x148>)
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	461a      	mov	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab3c:	4b3d      	ldr	r3, [pc, #244]	; (800ac34 <USBD_SetConfig+0x148>)
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7ff f93a 	bl	8009dbc <USBD_SetClassConfig>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d004      	beq.n	800ab5c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f949 	bl	800adec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab5a:	e065      	b.n	800ac28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fa10 	bl	800af82 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2203      	movs	r2, #3
 800ab66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab6a:	e05d      	b.n	800ac28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fa08 	bl	800af82 <USBD_CtlSendStatus>
      break;
 800ab72:	e059      	b.n	800ac28 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ab74:	4b2f      	ldr	r3, [pc, #188]	; (800ac34 <USBD_SetConfig+0x148>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d112      	bne.n	800aba2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2202      	movs	r2, #2
 800ab80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ab84:	4b2b      	ldr	r3, [pc, #172]	; (800ac34 <USBD_SetConfig+0x148>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab8e:	4b29      	ldr	r3, [pc, #164]	; (800ac34 <USBD_SetConfig+0x148>)
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7ff f92d 	bl	8009df4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f9f1 	bl	800af82 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aba0:	e042      	b.n	800ac28 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800aba2:	4b24      	ldr	r3, [pc, #144]	; (800ac34 <USBD_SetConfig+0x148>)
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	429a      	cmp	r2, r3
 800abae:	d02a      	beq.n	800ac06 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff f91b 	bl	8009df4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800abbe:	4b1d      	ldr	r3, [pc, #116]	; (800ac34 <USBD_SetConfig+0x148>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800abc8:	4b1a      	ldr	r3, [pc, #104]	; (800ac34 <USBD_SetConfig+0x148>)
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	4619      	mov	r1, r3
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7ff f8f4 	bl	8009dbc <USBD_SetClassConfig>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00f      	beq.n	800abfe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 f903 	bl	800adec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	b2db      	uxtb	r3, r3
 800abec:	4619      	mov	r1, r3
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff f900 	bl	8009df4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800abfc:	e014      	b.n	800ac28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f9bf 	bl	800af82 <USBD_CtlSendStatus>
      break;
 800ac04:	e010      	b.n	800ac28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f9bb 	bl	800af82 <USBD_CtlSendStatus>
      break;
 800ac0c:	e00c      	b.n	800ac28 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f8eb 	bl	800adec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac16:	4b07      	ldr	r3, [pc, #28]	; (800ac34 <USBD_SetConfig+0x148>)
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7ff f8e9 	bl	8009df4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ac22:	2303      	movs	r3, #3
 800ac24:	73fb      	strb	r3, [r7, #15]
      break;
 800ac26:	bf00      	nop
  }

  return ret;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20000d8c 	.word	0x20000d8c

0800ac38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	88db      	ldrh	r3, [r3, #6]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d004      	beq.n	800ac54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f8cd 	bl	800adec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ac52:	e023      	b.n	800ac9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	dc02      	bgt.n	800ac66 <USBD_GetConfig+0x2e>
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	dc03      	bgt.n	800ac6c <USBD_GetConfig+0x34>
 800ac64:	e015      	b.n	800ac92 <USBD_GetConfig+0x5a>
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d00b      	beq.n	800ac82 <USBD_GetConfig+0x4a>
 800ac6a:	e012      	b.n	800ac92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	3308      	adds	r3, #8
 800ac76:	2201      	movs	r2, #1
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f927 	bl	800aece <USBD_CtlSendData>
        break;
 800ac80:	e00c      	b.n	800ac9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	3304      	adds	r3, #4
 800ac86:	2201      	movs	r2, #1
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f91f 	bl	800aece <USBD_CtlSendData>
        break;
 800ac90:	e004      	b.n	800ac9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f8a9 	bl	800adec <USBD_CtlError>
        break;
 800ac9a:	bf00      	nop
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	3b01      	subs	r3, #1
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d81e      	bhi.n	800acfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	88db      	ldrh	r3, [r3, #6]
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d004      	beq.n	800acce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f890 	bl	800adec <USBD_CtlError>
        break;
 800accc:	e01a      	b.n	800ad04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d005      	beq.n	800acea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	f043 0202 	orr.w	r2, r3, #2
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	330c      	adds	r3, #12
 800acee:	2202      	movs	r2, #2
 800acf0:	4619      	mov	r1, r3
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f8eb 	bl	800aece <USBD_CtlSendData>
      break;
 800acf8:	e004      	b.n	800ad04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 f875 	bl	800adec <USBD_CtlError>
      break;
 800ad02:	bf00      	nop
  }
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	885b      	ldrh	r3, [r3, #2]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d106      	bne.n	800ad2c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2201      	movs	r2, #1
 800ad22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f92b 	bl	800af82 <USBD_CtlSendStatus>
  }
}
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	3b01      	subs	r3, #1
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d80b      	bhi.n	800ad64 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	885b      	ldrh	r3, [r3, #2]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d10c      	bne.n	800ad6e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f910 	bl	800af82 <USBD_CtlSendStatus>
      }
      break;
 800ad62:	e004      	b.n	800ad6e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f840 	bl	800adec <USBD_CtlError>
      break;
 800ad6c:	e000      	b.n	800ad70 <USBD_ClrFeature+0x3c>
      break;
 800ad6e:	bf00      	nop
  }
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	781a      	ldrb	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3301      	adds	r3, #1
 800ad92:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	781a      	ldrb	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7ff faad 	bl	800a302 <SWAPBYTE>
 800ada8:	4603      	mov	r3, r0
 800adaa:	461a      	mov	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	3301      	adds	r3, #1
 800adb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3301      	adds	r3, #1
 800adba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7ff faa0 	bl	800a302 <SWAPBYTE>
 800adc2:	4603      	mov	r3, r0
 800adc4:	461a      	mov	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	3301      	adds	r3, #1
 800adce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	3301      	adds	r3, #1
 800add4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f7ff fa93 	bl	800a302 <SWAPBYTE>
 800addc:	4603      	mov	r3, r0
 800adde:	461a      	mov	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	80da      	strh	r2, [r3, #6]
}
 800ade4:	bf00      	nop
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800adf6:	2180      	movs	r1, #128	; 0x80
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f003 f9b1 	bl	800e160 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800adfe:	2100      	movs	r1, #0
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f003 f9ad 	bl	800e160 <USBD_LL_StallEP>
}
 800ae06:	bf00      	nop
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b086      	sub	sp, #24
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d036      	beq.n	800ae92 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ae28:	6938      	ldr	r0, [r7, #16]
 800ae2a:	f000 f836 	bl	800ae9a <USBD_GetLen>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	3301      	adds	r3, #1
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	4413      	add	r3, r2
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	7812      	ldrb	r2, [r2, #0]
 800ae46:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae48:	7dfb      	ldrb	r3, [r7, #23]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ae4e:	7dfb      	ldrb	r3, [r7, #23]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	4413      	add	r3, r2
 800ae54:	2203      	movs	r2, #3
 800ae56:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ae5e:	e013      	b.n	800ae88 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	4413      	add	r3, r2
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	7812      	ldrb	r2, [r2, #0]
 800ae6a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	613b      	str	r3, [r7, #16]
    idx++;
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	3301      	adds	r3, #1
 800ae76:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	2200      	movs	r2, #0
 800ae80:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae82:	7dfb      	ldrb	r3, [r7, #23]
 800ae84:	3301      	adds	r3, #1
 800ae86:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1e7      	bne.n	800ae60 <USBD_GetString+0x52>
 800ae90:	e000      	b.n	800ae94 <USBD_GetString+0x86>
    return;
 800ae92:	bf00      	nop
  }
}
 800ae94:	3718      	adds	r7, #24
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b085      	sub	sp, #20
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aeaa:	e005      	b.n	800aeb8 <USBD_GetLen+0x1e>
  {
    len++;
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1f5      	bne.n	800aeac <USBD_GetLen+0x12>
  }

  return len;
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	60b9      	str	r1, [r7, #8]
 800aed8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2202      	movs	r2, #2
 800aede:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	2100      	movs	r1, #0
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f003 f9bc 	bl	800e272 <USBD_LL_Transmit>

  return USBD_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	2100      	movs	r1, #0
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f003 f9ab 	bl	800e272 <USBD_LL_Transmit>

  return USBD_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b084      	sub	sp, #16
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	60f8      	str	r0, [r7, #12]
 800af2e:	60b9      	str	r1, [r7, #8]
 800af30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2203      	movs	r2, #3
 800af36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	2100      	movs	r1, #0
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f003 f9af 	bl	800e2b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	2100      	movs	r1, #0
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f003 f99e 	bl	800e2b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2204      	movs	r2, #4
 800af8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af92:	2300      	movs	r3, #0
 800af94:	2200      	movs	r2, #0
 800af96:	2100      	movs	r1, #0
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f003 f96a 	bl	800e272 <USBD_LL_Transmit>

  return USBD_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2205      	movs	r2, #5
 800afb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afb8:	2300      	movs	r3, #0
 800afba:	2200      	movs	r2, #0
 800afbc:	2100      	movs	r1, #0
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f003 f978 	bl	800e2b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
	...

0800afd0 <__NVIC_SetPriority>:
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	4603      	mov	r3, r0
 800afd8:	6039      	str	r1, [r7, #0]
 800afda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800afdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	db0a      	blt.n	800affa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	490c      	ldr	r1, [pc, #48]	; (800b01c <__NVIC_SetPriority+0x4c>)
 800afea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afee:	0112      	lsls	r2, r2, #4
 800aff0:	b2d2      	uxtb	r2, r2
 800aff2:	440b      	add	r3, r1
 800aff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aff8:	e00a      	b.n	800b010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	b2da      	uxtb	r2, r3
 800affe:	4908      	ldr	r1, [pc, #32]	; (800b020 <__NVIC_SetPriority+0x50>)
 800b000:	79fb      	ldrb	r3, [r7, #7]
 800b002:	f003 030f 	and.w	r3, r3, #15
 800b006:	3b04      	subs	r3, #4
 800b008:	0112      	lsls	r2, r2, #4
 800b00a:	b2d2      	uxtb	r2, r2
 800b00c:	440b      	add	r3, r1
 800b00e:	761a      	strb	r2, [r3, #24]
}
 800b010:	bf00      	nop
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	e000e100 	.word	0xe000e100
 800b020:	e000ed00 	.word	0xe000ed00

0800b024 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b028:	4b05      	ldr	r3, [pc, #20]	; (800b040 <SysTick_Handler+0x1c>)
 800b02a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b02c:	f001 fcfe 	bl	800ca2c <xTaskGetSchedulerState>
 800b030:	4603      	mov	r3, r0
 800b032:	2b01      	cmp	r3, #1
 800b034:	d001      	beq.n	800b03a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b036:	f002 fae7 	bl	800d608 <xPortSysTickHandler>
  }
}
 800b03a:	bf00      	nop
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	e000e010 	.word	0xe000e010

0800b044 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b044:	b580      	push	{r7, lr}
 800b046:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b048:	2100      	movs	r1, #0
 800b04a:	f06f 0004 	mvn.w	r0, #4
 800b04e:	f7ff ffbf 	bl	800afd0 <__NVIC_SetPriority>
#endif
}
 800b052:	bf00      	nop
 800b054:	bd80      	pop	{r7, pc}
	...

0800b058 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b05e:	f3ef 8305 	mrs	r3, IPSR
 800b062:	603b      	str	r3, [r7, #0]
  return(result);
 800b064:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b06a:	f06f 0305 	mvn.w	r3, #5
 800b06e:	607b      	str	r3, [r7, #4]
 800b070:	e00c      	b.n	800b08c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b072:	4b0a      	ldr	r3, [pc, #40]	; (800b09c <osKernelInitialize+0x44>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d105      	bne.n	800b086 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b07a:	4b08      	ldr	r3, [pc, #32]	; (800b09c <osKernelInitialize+0x44>)
 800b07c:	2201      	movs	r2, #1
 800b07e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b080:	2300      	movs	r3, #0
 800b082:	607b      	str	r3, [r7, #4]
 800b084:	e002      	b.n	800b08c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b086:	f04f 33ff 	mov.w	r3, #4294967295
 800b08a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b08c:	687b      	ldr	r3, [r7, #4]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	20000d90 	.word	0x20000d90

0800b0a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0a6:	f3ef 8305 	mrs	r3, IPSR
 800b0aa:	603b      	str	r3, [r7, #0]
  return(result);
 800b0ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800b0b2:	f06f 0305 	mvn.w	r3, #5
 800b0b6:	607b      	str	r3, [r7, #4]
 800b0b8:	e010      	b.n	800b0dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b0ba:	4b0b      	ldr	r3, [pc, #44]	; (800b0e8 <osKernelStart+0x48>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d109      	bne.n	800b0d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b0c2:	f7ff ffbf 	bl	800b044 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b0c6:	4b08      	ldr	r3, [pc, #32]	; (800b0e8 <osKernelStart+0x48>)
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b0cc:	f001 f866 	bl	800c19c <vTaskStartScheduler>
      stat = osOK;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	607b      	str	r3, [r7, #4]
 800b0d4:	e002      	b.n	800b0dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b0dc:	687b      	ldr	r3, [r7, #4]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20000d90 	.word	0x20000d90

0800b0ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08e      	sub	sp, #56	; 0x38
 800b0f0:	af04      	add	r7, sp, #16
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0fc:	f3ef 8305 	mrs	r3, IPSR
 800b100:	617b      	str	r3, [r7, #20]
  return(result);
 800b102:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b104:	2b00      	cmp	r3, #0
 800b106:	d17e      	bne.n	800b206 <osThreadNew+0x11a>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d07b      	beq.n	800b206 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b10e:	2380      	movs	r3, #128	; 0x80
 800b110:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b112:	2318      	movs	r3, #24
 800b114:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b116:	2300      	movs	r3, #0
 800b118:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b11a:	f04f 33ff 	mov.w	r3, #4294967295
 800b11e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d045      	beq.n	800b1b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d002      	beq.n	800b134 <osThreadNew+0x48>
        name = attr->name;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d008      	beq.n	800b15a <osThreadNew+0x6e>
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	2b38      	cmp	r3, #56	; 0x38
 800b14c:	d805      	bhi.n	800b15a <osThreadNew+0x6e>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	2b00      	cmp	r3, #0
 800b158:	d001      	beq.n	800b15e <osThreadNew+0x72>
        return (NULL);
 800b15a:	2300      	movs	r3, #0
 800b15c:	e054      	b.n	800b208 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	089b      	lsrs	r3, r3, #2
 800b16c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00e      	beq.n	800b194 <osThreadNew+0xa8>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	2b5b      	cmp	r3, #91	; 0x5b
 800b17c:	d90a      	bls.n	800b194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b182:	2b00      	cmp	r3, #0
 800b184:	d006      	beq.n	800b194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	695b      	ldr	r3, [r3, #20]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d002      	beq.n	800b194 <osThreadNew+0xa8>
        mem = 1;
 800b18e:	2301      	movs	r3, #1
 800b190:	61bb      	str	r3, [r7, #24]
 800b192:	e010      	b.n	800b1b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10c      	bne.n	800b1b6 <osThreadNew+0xca>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d108      	bne.n	800b1b6 <osThreadNew+0xca>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d104      	bne.n	800b1b6 <osThreadNew+0xca>
          mem = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	61bb      	str	r3, [r7, #24]
 800b1b0:	e001      	b.n	800b1b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d110      	bne.n	800b1de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1c4:	9202      	str	r2, [sp, #8]
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	6a3a      	ldr	r2, [r7, #32]
 800b1d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 fe0c 	bl	800bdf0 <xTaskCreateStatic>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	613b      	str	r3, [r7, #16]
 800b1dc:	e013      	b.n	800b206 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d110      	bne.n	800b206 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	f107 0310 	add.w	r3, r7, #16
 800b1ec:	9301      	str	r3, [sp, #4]
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f000 fe57 	bl	800beaa <xTaskCreate>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d001      	beq.n	800b206 <osThreadNew+0x11a>
            hTask = NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b206:	693b      	ldr	r3, [r7, #16]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3728      	adds	r7, #40	; 0x28
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b218:	f3ef 8305 	mrs	r3, IPSR
 800b21c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b21e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <osDelay+0x1c>
    stat = osErrorISR;
 800b224:	f06f 0305 	mvn.w	r3, #5
 800b228:	60fb      	str	r3, [r7, #12]
 800b22a:	e007      	b.n	800b23c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 ff7c 	bl	800c134 <vTaskDelay>
    }
  }

  return (stat);
 800b23c:	68fb      	ldr	r3, [r7, #12]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	4a07      	ldr	r2, [pc, #28]	; (800b274 <vApplicationGetIdleTaskMemory+0x2c>)
 800b258:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	4a06      	ldr	r2, [pc, #24]	; (800b278 <vApplicationGetIdleTaskMemory+0x30>)
 800b25e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2280      	movs	r2, #128	; 0x80
 800b264:	601a      	str	r2, [r3, #0]
}
 800b266:	bf00      	nop
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	20000d94 	.word	0x20000d94
 800b278:	20000df0 	.word	0x20000df0

0800b27c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	4a07      	ldr	r2, [pc, #28]	; (800b2a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b28c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	4a06      	ldr	r2, [pc, #24]	; (800b2ac <vApplicationGetTimerTaskMemory+0x30>)
 800b292:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b29a:	601a      	str	r2, [r3, #0]
}
 800b29c:	bf00      	nop
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr
 800b2a8:	20000ff0 	.word	0x20000ff0
 800b2ac:	2000104c 	.word	0x2000104c

0800b2b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f103 0208 	add.w	r2, r3, #8
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f103 0208 	add.w	r2, r3, #8
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f103 0208 	add.w	r2, r3, #8
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b2fe:	bf00      	nop
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b30a:	b480      	push	{r7}
 800b30c:	b085      	sub	sp, #20
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	689a      	ldr	r2, [r3, #8]
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	1c5a      	adds	r2, r3, #1
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	601a      	str	r2, [r3, #0]
}
 800b346:	bf00      	nop
 800b348:	3714      	adds	r7, #20
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b352:	b480      	push	{r7}
 800b354:	b085      	sub	sp, #20
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b368:	d103      	bne.n	800b372 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	e00c      	b.n	800b38c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3308      	adds	r3, #8
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	e002      	b.n	800b380 <vListInsert+0x2e>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d2f6      	bcs.n	800b37a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	1c5a      	adds	r2, r3, #1
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	601a      	str	r2, [r3, #0]
}
 800b3b8:	bf00      	nop
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	6892      	ldr	r2, [r2, #8]
 800b3da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	6852      	ldr	r2, [r2, #4]
 800b3e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d103      	bne.n	800b3f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	689a      	ldr	r2, [r3, #8]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	1e5a      	subs	r2, r3, #1
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10a      	bne.n	800b442 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b430:	f383 8811 	msr	BASEPRI, r3
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b43e:	bf00      	nop
 800b440:	e7fe      	b.n	800b440 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b442:	f002 f84f 	bl	800d4e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b44e:	68f9      	ldr	r1, [r7, #12]
 800b450:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b452:	fb01 f303 	mul.w	r3, r1, r3
 800b456:	441a      	add	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b472:	3b01      	subs	r3, #1
 800b474:	68f9      	ldr	r1, [r7, #12]
 800b476:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b478:	fb01 f303 	mul.w	r3, r1, r3
 800b47c:	441a      	add	r2, r3
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	22ff      	movs	r2, #255	; 0xff
 800b486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	22ff      	movs	r2, #255	; 0xff
 800b48e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d114      	bne.n	800b4c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d01a      	beq.n	800b4d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	3310      	adds	r3, #16
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f001 f903 	bl	800c6b0 <xTaskRemoveFromEventList>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d012      	beq.n	800b4d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4b0:	4b0c      	ldr	r3, [pc, #48]	; (800b4e4 <xQueueGenericReset+0xcc>)
 800b4b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	e009      	b.n	800b4d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	3310      	adds	r3, #16
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7ff fef2 	bl	800b2b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3324      	adds	r3, #36	; 0x24
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff feed 	bl	800b2b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b4d6:	f002 f835 	bl	800d544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b4da:	2301      	movs	r3, #1
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	e000ed04 	.word	0xe000ed04

0800b4e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b08e      	sub	sp, #56	; 0x38
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10a      	bne.n	800b512 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b50e:	bf00      	nop
 800b510:	e7fe      	b.n	800b510 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d10a      	bne.n	800b52e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51c:	f383 8811 	msr	BASEPRI, r3
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b52a:	bf00      	nop
 800b52c:	e7fe      	b.n	800b52c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <xQueueGenericCreateStatic+0x52>
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <xQueueGenericCreateStatic+0x56>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e000      	b.n	800b540 <xQueueGenericCreateStatic+0x58>
 800b53e:	2300      	movs	r3, #0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10a      	bne.n	800b55a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	623b      	str	r3, [r7, #32]
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d102      	bne.n	800b566 <xQueueGenericCreateStatic+0x7e>
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d101      	bne.n	800b56a <xQueueGenericCreateStatic+0x82>
 800b566:	2301      	movs	r3, #1
 800b568:	e000      	b.n	800b56c <xQueueGenericCreateStatic+0x84>
 800b56a:	2300      	movs	r3, #0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	61fb      	str	r3, [r7, #28]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b586:	2350      	movs	r3, #80	; 0x50
 800b588:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	2b50      	cmp	r3, #80	; 0x50
 800b58e:	d00a      	beq.n	800b5a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	61bb      	str	r3, [r7, #24]
}
 800b5a2:	bf00      	nop
 800b5a4:	e7fe      	b.n	800b5a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00d      	beq.n	800b5ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	68b9      	ldr	r1, [r7, #8]
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f000 f805 	bl	800b5d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3730      	adds	r7, #48	; 0x30
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d103      	bne.n	800b5f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	69ba      	ldr	r2, [r7, #24]
 800b5f0:	601a      	str	r2, [r3, #0]
 800b5f2:	e002      	b.n	800b5fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b606:	2101      	movs	r1, #1
 800b608:	69b8      	ldr	r0, [r7, #24]
 800b60a:	f7ff ff05 	bl	800b418 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	78fa      	ldrb	r2, [r7, #3]
 800b612:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b616:	bf00      	nop
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08e      	sub	sp, #56	; 0x38
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
 800b62c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b62e:	2300      	movs	r3, #0
 800b630:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10a      	bne.n	800b652 <xQueueGenericSend+0x32>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b64e:	bf00      	nop
 800b650:	e7fe      	b.n	800b650 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d103      	bne.n	800b660 <xQueueGenericSend+0x40>
 800b658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <xQueueGenericSend+0x44>
 800b660:	2301      	movs	r3, #1
 800b662:	e000      	b.n	800b666 <xQueueGenericSend+0x46>
 800b664:	2300      	movs	r3, #0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10a      	bne.n	800b680 <xQueueGenericSend+0x60>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b67c:	bf00      	nop
 800b67e:	e7fe      	b.n	800b67e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	2b02      	cmp	r3, #2
 800b684:	d103      	bne.n	800b68e <xQueueGenericSend+0x6e>
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d101      	bne.n	800b692 <xQueueGenericSend+0x72>
 800b68e:	2301      	movs	r3, #1
 800b690:	e000      	b.n	800b694 <xQueueGenericSend+0x74>
 800b692:	2300      	movs	r3, #0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10a      	bne.n	800b6ae <xQueueGenericSend+0x8e>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69c:	f383 8811 	msr	BASEPRI, r3
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	623b      	str	r3, [r7, #32]
}
 800b6aa:	bf00      	nop
 800b6ac:	e7fe      	b.n	800b6ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6ae:	f001 f9bd 	bl	800ca2c <xTaskGetSchedulerState>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d102      	bne.n	800b6be <xQueueGenericSend+0x9e>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <xQueueGenericSend+0xa2>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e000      	b.n	800b6c4 <xQueueGenericSend+0xa4>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d10a      	bne.n	800b6de <xQueueGenericSend+0xbe>
	__asm volatile
 800b6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	61fb      	str	r3, [r7, #28]
}
 800b6da:	bf00      	nop
 800b6dc:	e7fe      	b.n	800b6dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6de:	f001 ff01 	bl	800d4e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d302      	bcc.n	800b6f4 <xQueueGenericSend+0xd4>
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	d129      	bne.n	800b748 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	68b9      	ldr	r1, [r7, #8]
 800b6f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6fa:	f000 fa0b 	bl	800bb14 <prvCopyDataToQueue>
 800b6fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b704:	2b00      	cmp	r3, #0
 800b706:	d010      	beq.n	800b72a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	3324      	adds	r3, #36	; 0x24
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 ffcf 	bl	800c6b0 <xTaskRemoveFromEventList>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d013      	beq.n	800b740 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b718:	4b3f      	ldr	r3, [pc, #252]	; (800b818 <xQueueGenericSend+0x1f8>)
 800b71a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	e00a      	b.n	800b740 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d007      	beq.n	800b740 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b730:	4b39      	ldr	r3, [pc, #228]	; (800b818 <xQueueGenericSend+0x1f8>)
 800b732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b740:	f001 ff00 	bl	800d544 <vPortExitCritical>
				return pdPASS;
 800b744:	2301      	movs	r3, #1
 800b746:	e063      	b.n	800b810 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d103      	bne.n	800b756 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b74e:	f001 fef9 	bl	800d544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b752:	2300      	movs	r3, #0
 800b754:	e05c      	b.n	800b810 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d106      	bne.n	800b76a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b75c:	f107 0314 	add.w	r3, r7, #20
 800b760:	4618      	mov	r0, r3
 800b762:	f001 f809 	bl	800c778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b766:	2301      	movs	r3, #1
 800b768:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b76a:	f001 feeb 	bl	800d544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b76e:	f000 fd7b 	bl	800c268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b772:	f001 feb7 	bl	800d4e4 <vPortEnterCritical>
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b77c:	b25b      	sxtb	r3, r3
 800b77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b782:	d103      	bne.n	800b78c <xQueueGenericSend+0x16c>
 800b784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b786:	2200      	movs	r2, #0
 800b788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b792:	b25b      	sxtb	r3, r3
 800b794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b798:	d103      	bne.n	800b7a2 <xQueueGenericSend+0x182>
 800b79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7a2:	f001 fecf 	bl	800d544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7a6:	1d3a      	adds	r2, r7, #4
 800b7a8:	f107 0314 	add.w	r3, r7, #20
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 fff8 	bl	800c7a4 <xTaskCheckForTimeOut>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d124      	bne.n	800b804 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b7ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7bc:	f000 faa2 	bl	800bd04 <prvIsQueueFull>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d018      	beq.n	800b7f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c8:	3310      	adds	r3, #16
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 ff1e 	bl	800c610 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b7d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7d6:	f000 fa2d 	bl	800bc34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b7da:	f000 fd53 	bl	800c284 <xTaskResumeAll>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f47f af7c 	bne.w	800b6de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	; (800b818 <xQueueGenericSend+0x1f8>)
 800b7e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	f3bf 8f4f 	dsb	sy
 800b7f2:	f3bf 8f6f 	isb	sy
 800b7f6:	e772      	b.n	800b6de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b7f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7fa:	f000 fa1b 	bl	800bc34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7fe:	f000 fd41 	bl	800c284 <xTaskResumeAll>
 800b802:	e76c      	b.n	800b6de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b806:	f000 fa15 	bl	800bc34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b80a:	f000 fd3b 	bl	800c284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b80e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b810:	4618      	mov	r0, r3
 800b812:	3738      	adds	r7, #56	; 0x38
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	e000ed04 	.word	0xe000ed04

0800b81c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b090      	sub	sp, #64	; 0x40
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10a      	bne.n	800b84a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d103      	bne.n	800b858 <xQueueGenericSendFromISR+0x3c>
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <xQueueGenericSendFromISR+0x40>
 800b858:	2301      	movs	r3, #1
 800b85a:	e000      	b.n	800b85e <xQueueGenericSendFromISR+0x42>
 800b85c:	2300      	movs	r3, #0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10a      	bne.n	800b878 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b874:	bf00      	nop
 800b876:	e7fe      	b.n	800b876 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d103      	bne.n	800b886 <xQueueGenericSendFromISR+0x6a>
 800b87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b882:	2b01      	cmp	r3, #1
 800b884:	d101      	bne.n	800b88a <xQueueGenericSendFromISR+0x6e>
 800b886:	2301      	movs	r3, #1
 800b888:	e000      	b.n	800b88c <xQueueGenericSendFromISR+0x70>
 800b88a:	2300      	movs	r3, #0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10a      	bne.n	800b8a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	623b      	str	r3, [r7, #32]
}
 800b8a2:	bf00      	nop
 800b8a4:	e7fe      	b.n	800b8a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8a6:	f001 feff 	bl	800d6a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b8aa:	f3ef 8211 	mrs	r2, BASEPRI
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	61fa      	str	r2, [r7, #28]
 800b8c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b8c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d302      	bcc.n	800b8d8 <xQueueGenericSendFromISR+0xbc>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	d12f      	bne.n	800b938 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	68b9      	ldr	r1, [r7, #8]
 800b8ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8ee:	f000 f911 	bl	800bb14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fa:	d112      	bne.n	800b922 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b900:	2b00      	cmp	r3, #0
 800b902:	d016      	beq.n	800b932 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b906:	3324      	adds	r3, #36	; 0x24
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 fed1 	bl	800c6b0 <xTaskRemoveFromEventList>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00e      	beq.n	800b932 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00b      	beq.n	800b932 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2201      	movs	r2, #1
 800b91e:	601a      	str	r2, [r3, #0]
 800b920:	e007      	b.n	800b932 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b922:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b926:	3301      	adds	r3, #1
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	b25a      	sxtb	r2, r3
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b932:	2301      	movs	r3, #1
 800b934:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b936:	e001      	b.n	800b93c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b938:	2300      	movs	r3, #0
 800b93a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b93e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b946:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3740      	adds	r7, #64	; 0x40
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
	...

0800b954 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b08c      	sub	sp, #48	; 0x30
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b960:	2300      	movs	r3, #0
 800b962:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10a      	bne.n	800b984 <xQueueReceive+0x30>
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	623b      	str	r3, [r7, #32]
}
 800b980:	bf00      	nop
 800b982:	e7fe      	b.n	800b982 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d103      	bne.n	800b992 <xQueueReceive+0x3e>
 800b98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d101      	bne.n	800b996 <xQueueReceive+0x42>
 800b992:	2301      	movs	r3, #1
 800b994:	e000      	b.n	800b998 <xQueueReceive+0x44>
 800b996:	2300      	movs	r3, #0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10a      	bne.n	800b9b2 <xQueueReceive+0x5e>
	__asm volatile
 800b99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	61fb      	str	r3, [r7, #28]
}
 800b9ae:	bf00      	nop
 800b9b0:	e7fe      	b.n	800b9b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9b2:	f001 f83b 	bl	800ca2c <xTaskGetSchedulerState>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d102      	bne.n	800b9c2 <xQueueReceive+0x6e>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <xQueueReceive+0x72>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e000      	b.n	800b9c8 <xQueueReceive+0x74>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <xQueueReceive+0x8e>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	61bb      	str	r3, [r7, #24]
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9e2:	f001 fd7f 	bl	800d4e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d01f      	beq.n	800ba32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9f2:	68b9      	ldr	r1, [r7, #8]
 800b9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9f6:	f000 f8f7 	bl	800bbe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fc:	1e5a      	subs	r2, r3, #1
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00f      	beq.n	800ba2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0c:	3310      	adds	r3, #16
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f000 fe4e 	bl	800c6b0 <xTaskRemoveFromEventList>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d007      	beq.n	800ba2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba1a:	4b3d      	ldr	r3, [pc, #244]	; (800bb10 <xQueueReceive+0x1bc>)
 800ba1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	f3bf 8f4f 	dsb	sy
 800ba26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba2a:	f001 fd8b 	bl	800d544 <vPortExitCritical>
				return pdPASS;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e069      	b.n	800bb06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d103      	bne.n	800ba40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba38:	f001 fd84 	bl	800d544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	e062      	b.n	800bb06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d106      	bne.n	800ba54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba46:	f107 0310 	add.w	r3, r7, #16
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 fe94 	bl	800c778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba50:	2301      	movs	r3, #1
 800ba52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba54:	f001 fd76 	bl	800d544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba58:	f000 fc06 	bl	800c268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba5c:	f001 fd42 	bl	800d4e4 <vPortEnterCritical>
 800ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba66:	b25b      	sxtb	r3, r3
 800ba68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6c:	d103      	bne.n	800ba76 <xQueueReceive+0x122>
 800ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba7c:	b25b      	sxtb	r3, r3
 800ba7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba82:	d103      	bne.n	800ba8c <xQueueReceive+0x138>
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	2200      	movs	r2, #0
 800ba88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba8c:	f001 fd5a 	bl	800d544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba90:	1d3a      	adds	r2, r7, #4
 800ba92:	f107 0310 	add.w	r3, r7, #16
 800ba96:	4611      	mov	r1, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 fe83 	bl	800c7a4 <xTaskCheckForTimeOut>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d123      	bne.n	800baec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800baa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baa6:	f000 f917 	bl	800bcd8 <prvIsQueueEmpty>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d017      	beq.n	800bae0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	3324      	adds	r3, #36	; 0x24
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	4611      	mov	r1, r2
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 fda9 	bl	800c610 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800babe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bac0:	f000 f8b8 	bl	800bc34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bac4:	f000 fbde 	bl	800c284 <xTaskResumeAll>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d189      	bne.n	800b9e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bace:	4b10      	ldr	r3, [pc, #64]	; (800bb10 <xQueueReceive+0x1bc>)
 800bad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	e780      	b.n	800b9e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bae2:	f000 f8a7 	bl	800bc34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bae6:	f000 fbcd 	bl	800c284 <xTaskResumeAll>
 800baea:	e77a      	b.n	800b9e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800baec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baee:	f000 f8a1 	bl	800bc34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800baf2:	f000 fbc7 	bl	800c284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800baf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baf8:	f000 f8ee 	bl	800bcd8 <prvIsQueueEmpty>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f43f af6f 	beq.w	800b9e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3730      	adds	r7, #48	; 0x30
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	e000ed04 	.word	0xe000ed04

0800bb14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb20:	2300      	movs	r3, #0
 800bb22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10d      	bne.n	800bb4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d14d      	bne.n	800bbd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f000 ff92 	bl	800ca68 <xTaskPriorityDisinherit>
 800bb44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	609a      	str	r2, [r3, #8]
 800bb4c:	e043      	b.n	800bbd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d119      	bne.n	800bb88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6858      	ldr	r0, [r3, #4]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	68b9      	ldr	r1, [r7, #8]
 800bb60:	f00a f81e 	bl	8015ba0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	685a      	ldr	r2, [r3, #4]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6c:	441a      	add	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d32b      	bcc.n	800bbd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	605a      	str	r2, [r3, #4]
 800bb86:	e026      	b.n	800bbd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	68d8      	ldr	r0, [r3, #12]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb90:	461a      	mov	r2, r3
 800bb92:	68b9      	ldr	r1, [r7, #8]
 800bb94:	f00a f804 	bl	8015ba0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	68da      	ldr	r2, [r3, #12]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba0:	425b      	negs	r3, r3
 800bba2:	441a      	add	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	68da      	ldr	r2, [r3, #12]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d207      	bcs.n	800bbc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbc:	425b      	negs	r3, r3
 800bbbe:	441a      	add	r2, r3
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d105      	bne.n	800bbd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	1c5a      	adds	r2, r3, #1
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bbde:	697b      	ldr	r3, [r7, #20]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d018      	beq.n	800bc2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	68da      	ldr	r2, [r3, #12]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc02:	441a      	add	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68da      	ldr	r2, [r3, #12]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d303      	bcc.n	800bc1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	68d9      	ldr	r1, [r3, #12]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc24:	461a      	mov	r2, r3
 800bc26:	6838      	ldr	r0, [r7, #0]
 800bc28:	f009 ffba 	bl	8015ba0 <memcpy>
	}
}
 800bc2c:	bf00      	nop
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc3c:	f001 fc52 	bl	800d4e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc48:	e011      	b.n	800bc6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d012      	beq.n	800bc78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	3324      	adds	r3, #36	; 0x24
 800bc56:	4618      	mov	r0, r3
 800bc58:	f000 fd2a 	bl	800c6b0 <xTaskRemoveFromEventList>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc62:	f000 fe01 	bl	800c868 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	dce9      	bgt.n	800bc4a <prvUnlockQueue+0x16>
 800bc76:	e000      	b.n	800bc7a <prvUnlockQueue+0x46>
					break;
 800bc78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	22ff      	movs	r2, #255	; 0xff
 800bc7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc82:	f001 fc5f 	bl	800d544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc86:	f001 fc2d 	bl	800d4e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc92:	e011      	b.n	800bcb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	691b      	ldr	r3, [r3, #16]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d012      	beq.n	800bcc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	3310      	adds	r3, #16
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 fd05 	bl	800c6b0 <xTaskRemoveFromEventList>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bcac:	f000 fddc 	bl	800c868 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dce9      	bgt.n	800bc94 <prvUnlockQueue+0x60>
 800bcc0:	e000      	b.n	800bcc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bcc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	22ff      	movs	r2, #255	; 0xff
 800bcc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bccc:	f001 fc3a 	bl	800d544 <vPortExitCritical>
}
 800bcd0:	bf00      	nop
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bce0:	f001 fc00 	bl	800d4e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d102      	bne.n	800bcf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bcec:	2301      	movs	r3, #1
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	e001      	b.n	800bcf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcf6:	f001 fc25 	bl	800d544 <vPortExitCritical>

	return xReturn;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3710      	adds	r7, #16
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd0c:	f001 fbea 	bl	800d4e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d102      	bne.n	800bd22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	60fb      	str	r3, [r7, #12]
 800bd20:	e001      	b.n	800bd26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd26:	f001 fc0d 	bl	800d544 <vPortExitCritical>

	return xReturn;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60fb      	str	r3, [r7, #12]
 800bd42:	e014      	b.n	800bd6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd44:	4a0f      	ldr	r2, [pc, #60]	; (800bd84 <vQueueAddToRegistry+0x50>)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10b      	bne.n	800bd68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd50:	490c      	ldr	r1, [pc, #48]	; (800bd84 <vQueueAddToRegistry+0x50>)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	683a      	ldr	r2, [r7, #0]
 800bd56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd5a:	4a0a      	ldr	r2, [pc, #40]	; (800bd84 <vQueueAddToRegistry+0x50>)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	00db      	lsls	r3, r3, #3
 800bd60:	4413      	add	r3, r2
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd66:	e006      	b.n	800bd76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	60fb      	str	r3, [r7, #12]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b07      	cmp	r3, #7
 800bd72:	d9e7      	bls.n	800bd44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd74:	bf00      	nop
 800bd76:	bf00      	nop
 800bd78:	3714      	adds	r7, #20
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	2000572c 	.word	0x2000572c

0800bd88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd98:	f001 fba4 	bl	800d4e4 <vPortEnterCritical>
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bda2:	b25b      	sxtb	r3, r3
 800bda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda8:	d103      	bne.n	800bdb2 <vQueueWaitForMessageRestricted+0x2a>
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdb8:	b25b      	sxtb	r3, r3
 800bdba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdbe:	d103      	bne.n	800bdc8 <vQueueWaitForMessageRestricted+0x40>
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdc8:	f001 fbbc 	bl	800d544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d106      	bne.n	800bde2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	3324      	adds	r3, #36	; 0x24
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	68b9      	ldr	r1, [r7, #8]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 fc3b 	bl	800c658 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bde2:	6978      	ldr	r0, [r7, #20]
 800bde4:	f7ff ff26 	bl	800bc34 <prvUnlockQueue>
	}
 800bde8:	bf00      	nop
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08e      	sub	sp, #56	; 0x38
 800bdf4:	af04      	add	r7, sp, #16
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10a      	bne.n	800be1a <xTaskCreateStatic+0x2a>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	623b      	str	r3, [r7, #32]
}
 800be16:	bf00      	nop
 800be18:	e7fe      	b.n	800be18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10a      	bne.n	800be36 <xTaskCreateStatic+0x46>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	61fb      	str	r3, [r7, #28]
}
 800be32:	bf00      	nop
 800be34:	e7fe      	b.n	800be34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be36:	235c      	movs	r3, #92	; 0x5c
 800be38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	2b5c      	cmp	r3, #92	; 0x5c
 800be3e:	d00a      	beq.n	800be56 <xTaskCreateStatic+0x66>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	61bb      	str	r3, [r7, #24]
}
 800be52:	bf00      	nop
 800be54:	e7fe      	b.n	800be54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d01e      	beq.n	800be9c <xTaskCreateStatic+0xac>
 800be5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be60:	2b00      	cmp	r3, #0
 800be62:	d01b      	beq.n	800be9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	2202      	movs	r2, #2
 800be72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be76:	2300      	movs	r3, #0
 800be78:	9303      	str	r3, [sp, #12]
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	9302      	str	r3, [sp, #8]
 800be7e:	f107 0314 	add.w	r3, r7, #20
 800be82:	9301      	str	r3, [sp, #4]
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	68b9      	ldr	r1, [r7, #8]
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f000 f850 	bl	800bf34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be96:	f000 f8dd 	bl	800c054 <prvAddNewTaskToReadyList>
 800be9a:	e001      	b.n	800bea0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800be9c:	2300      	movs	r3, #0
 800be9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bea0:	697b      	ldr	r3, [r7, #20]
	}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3728      	adds	r7, #40	; 0x28
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b08c      	sub	sp, #48	; 0x30
 800beae:	af04      	add	r7, sp, #16
 800beb0:	60f8      	str	r0, [r7, #12]
 800beb2:	60b9      	str	r1, [r7, #8]
 800beb4:	603b      	str	r3, [r7, #0]
 800beb6:	4613      	mov	r3, r2
 800beb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800beba:	88fb      	ldrh	r3, [r7, #6]
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4618      	mov	r0, r3
 800bec0:	f001 fc32 	bl	800d728 <pvPortMalloc>
 800bec4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00e      	beq.n	800beea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800becc:	205c      	movs	r0, #92	; 0x5c
 800bece:	f001 fc2b 	bl	800d728 <pvPortMalloc>
 800bed2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d003      	beq.n	800bee2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	631a      	str	r2, [r3, #48]	; 0x30
 800bee0:	e005      	b.n	800beee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bee2:	6978      	ldr	r0, [r7, #20]
 800bee4:	f001 fcec 	bl	800d8c0 <vPortFree>
 800bee8:	e001      	b.n	800beee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800beea:	2300      	movs	r3, #0
 800beec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d017      	beq.n	800bf24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800befc:	88fa      	ldrh	r2, [r7, #6]
 800befe:	2300      	movs	r3, #0
 800bf00:	9303      	str	r3, [sp, #12]
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	9302      	str	r3, [sp, #8]
 800bf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf08:	9301      	str	r3, [sp, #4]
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	9300      	str	r3, [sp, #0]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	68b9      	ldr	r1, [r7, #8]
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f000 f80e 	bl	800bf34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf18:	69f8      	ldr	r0, [r7, #28]
 800bf1a:	f000 f89b 	bl	800c054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	61bb      	str	r3, [r7, #24]
 800bf22:	e002      	b.n	800bf2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf24:	f04f 33ff 	mov.w	r3, #4294967295
 800bf28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf2a:	69bb      	ldr	r3, [r7, #24]
	}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3720      	adds	r7, #32
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	21a5      	movs	r1, #165	; 0xa5
 800bf4e:	f009 fe35 	bl	8015bbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	f023 0307 	bic.w	r3, r3, #7
 800bf6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	f003 0307 	and.w	r3, r3, #7
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00a      	beq.n	800bf8c <prvInitialiseNewTask+0x58>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	617b      	str	r3, [r7, #20]
}
 800bf88:	bf00      	nop
 800bf8a:	e7fe      	b.n	800bf8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d01f      	beq.n	800bfd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf92:	2300      	movs	r3, #0
 800bf94:	61fb      	str	r3, [r7, #28]
 800bf96:	e012      	b.n	800bfbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	7819      	ldrb	r1, [r3, #0]
 800bfa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	3334      	adds	r3, #52	; 0x34
 800bfa8:	460a      	mov	r2, r1
 800bfaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d006      	beq.n	800bfc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	61fb      	str	r3, [r7, #28]
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	2b0f      	cmp	r3, #15
 800bfc2:	d9e9      	bls.n	800bf98 <prvInitialiseNewTask+0x64>
 800bfc4:	e000      	b.n	800bfc8 <prvInitialiseNewTask+0x94>
			{
				break;
 800bfc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfd0:	e003      	b.n	800bfda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfdc:	2b37      	cmp	r3, #55	; 0x37
 800bfde:	d901      	bls.n	800bfe4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bfe0:	2337      	movs	r3, #55	; 0x37
 800bfe2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfe8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	2200      	movs	r2, #0
 800bff4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	3304      	adds	r3, #4
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7ff f978 	bl	800b2f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	3318      	adds	r3, #24
 800c004:	4618      	mov	r0, r3
 800c006:	f7ff f973 	bl	800b2f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c00e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c01e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c022:	2200      	movs	r2, #0
 800c024:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	68f9      	ldr	r1, [r7, #12]
 800c032:	69b8      	ldr	r0, [r7, #24]
 800c034:	f001 f928 	bl	800d288 <pxPortInitialiseStack>
 800c038:	4602      	mov	r2, r0
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d002      	beq.n	800c04a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c04a:	bf00      	nop
 800c04c:	3720      	adds	r7, #32
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c05c:	f001 fa42 	bl	800d4e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c060:	4b2d      	ldr	r3, [pc, #180]	; (800c118 <prvAddNewTaskToReadyList+0xc4>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3301      	adds	r3, #1
 800c066:	4a2c      	ldr	r2, [pc, #176]	; (800c118 <prvAddNewTaskToReadyList+0xc4>)
 800c068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c06a:	4b2c      	ldr	r3, [pc, #176]	; (800c11c <prvAddNewTaskToReadyList+0xc8>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d109      	bne.n	800c086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c072:	4a2a      	ldr	r2, [pc, #168]	; (800c11c <prvAddNewTaskToReadyList+0xc8>)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c078:	4b27      	ldr	r3, [pc, #156]	; (800c118 <prvAddNewTaskToReadyList+0xc4>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d110      	bne.n	800c0a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c080:	f000 fc16 	bl	800c8b0 <prvInitialiseTaskLists>
 800c084:	e00d      	b.n	800c0a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c086:	4b26      	ldr	r3, [pc, #152]	; (800c120 <prvAddNewTaskToReadyList+0xcc>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d109      	bne.n	800c0a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c08e:	4b23      	ldr	r3, [pc, #140]	; (800c11c <prvAddNewTaskToReadyList+0xc8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c098:	429a      	cmp	r2, r3
 800c09a:	d802      	bhi.n	800c0a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c09c:	4a1f      	ldr	r2, [pc, #124]	; (800c11c <prvAddNewTaskToReadyList+0xc8>)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0a2:	4b20      	ldr	r3, [pc, #128]	; (800c124 <prvAddNewTaskToReadyList+0xd0>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	4a1e      	ldr	r2, [pc, #120]	; (800c124 <prvAddNewTaskToReadyList+0xd0>)
 800c0aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c0ac:	4b1d      	ldr	r3, [pc, #116]	; (800c124 <prvAddNewTaskToReadyList+0xd0>)
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b8:	4b1b      	ldr	r3, [pc, #108]	; (800c128 <prvAddNewTaskToReadyList+0xd4>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d903      	bls.n	800c0c8 <prvAddNewTaskToReadyList+0x74>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c4:	4a18      	ldr	r2, [pc, #96]	; (800c128 <prvAddNewTaskToReadyList+0xd4>)
 800c0c6:	6013      	str	r3, [r2, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4413      	add	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4a15      	ldr	r2, [pc, #84]	; (800c12c <prvAddNewTaskToReadyList+0xd8>)
 800c0d6:	441a      	add	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4619      	mov	r1, r3
 800c0de:	4610      	mov	r0, r2
 800c0e0:	f7ff f913 	bl	800b30a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c0e4:	f001 fa2e 	bl	800d544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c0e8:	4b0d      	ldr	r3, [pc, #52]	; (800c120 <prvAddNewTaskToReadyList+0xcc>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00e      	beq.n	800c10e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c0f0:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <prvAddNewTaskToReadyList+0xc8>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d207      	bcs.n	800c10e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c0fe:	4b0c      	ldr	r3, [pc, #48]	; (800c130 <prvAddNewTaskToReadyList+0xdc>)
 800c100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c10e:	bf00      	nop
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20001920 	.word	0x20001920
 800c11c:	2000144c 	.word	0x2000144c
 800c120:	2000192c 	.word	0x2000192c
 800c124:	2000193c 	.word	0x2000193c
 800c128:	20001928 	.word	0x20001928
 800c12c:	20001450 	.word	0x20001450
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c13c:	2300      	movs	r3, #0
 800c13e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d017      	beq.n	800c176 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c146:	4b13      	ldr	r3, [pc, #76]	; (800c194 <vTaskDelay+0x60>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00a      	beq.n	800c164 <vTaskDelay+0x30>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	60bb      	str	r3, [r7, #8]
}
 800c160:	bf00      	nop
 800c162:	e7fe      	b.n	800c162 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c164:	f000 f880 	bl	800c268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c168:	2100      	movs	r1, #0
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fcea 	bl	800cb44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c170:	f000 f888 	bl	800c284 <xTaskResumeAll>
 800c174:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d107      	bne.n	800c18c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c17c:	4b06      	ldr	r3, [pc, #24]	; (800c198 <vTaskDelay+0x64>)
 800c17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c182:	601a      	str	r2, [r3, #0]
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c18c:	bf00      	nop
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	20001948 	.word	0x20001948
 800c198:	e000ed04 	.word	0xe000ed04

0800c19c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b08a      	sub	sp, #40	; 0x28
 800c1a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c1aa:	463a      	mov	r2, r7
 800c1ac:	1d39      	adds	r1, r7, #4
 800c1ae:	f107 0308 	add.w	r3, r7, #8
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7ff f848 	bl	800b248 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	9202      	str	r2, [sp, #8]
 800c1c0:	9301      	str	r3, [sp, #4]
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	460a      	mov	r2, r1
 800c1ca:	4921      	ldr	r1, [pc, #132]	; (800c250 <vTaskStartScheduler+0xb4>)
 800c1cc:	4821      	ldr	r0, [pc, #132]	; (800c254 <vTaskStartScheduler+0xb8>)
 800c1ce:	f7ff fe0f 	bl	800bdf0 <xTaskCreateStatic>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	4a20      	ldr	r2, [pc, #128]	; (800c258 <vTaskStartScheduler+0xbc>)
 800c1d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c1d8:	4b1f      	ldr	r3, [pc, #124]	; (800c258 <vTaskStartScheduler+0xbc>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d002      	beq.n	800c1e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	e001      	b.n	800c1ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d102      	bne.n	800c1f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c1f0:	f000 fcfc 	bl	800cbec <xTimerCreateTimerTask>
 800c1f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d116      	bne.n	800c22a <vTaskStartScheduler+0x8e>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	613b      	str	r3, [r7, #16]
}
 800c20e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c210:	4b12      	ldr	r3, [pc, #72]	; (800c25c <vTaskStartScheduler+0xc0>)
 800c212:	f04f 32ff 	mov.w	r2, #4294967295
 800c216:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c218:	4b11      	ldr	r3, [pc, #68]	; (800c260 <vTaskStartScheduler+0xc4>)
 800c21a:	2201      	movs	r2, #1
 800c21c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c21e:	4b11      	ldr	r3, [pc, #68]	; (800c264 <vTaskStartScheduler+0xc8>)
 800c220:	2200      	movs	r2, #0
 800c222:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c224:	f001 f8bc 	bl	800d3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c228:	e00e      	b.n	800c248 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c230:	d10a      	bne.n	800c248 <vTaskStartScheduler+0xac>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	60fb      	str	r3, [r7, #12]
}
 800c244:	bf00      	nop
 800c246:	e7fe      	b.n	800c246 <vTaskStartScheduler+0xaa>
}
 800c248:	bf00      	nop
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	08015e38 	.word	0x08015e38
 800c254:	0800c881 	.word	0x0800c881
 800c258:	20001944 	.word	0x20001944
 800c25c:	20001940 	.word	0x20001940
 800c260:	2000192c 	.word	0x2000192c
 800c264:	20001924 	.word	0x20001924

0800c268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c268:	b480      	push	{r7}
 800c26a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c26c:	4b04      	ldr	r3, [pc, #16]	; (800c280 <vTaskSuspendAll+0x18>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3301      	adds	r3, #1
 800c272:	4a03      	ldr	r2, [pc, #12]	; (800c280 <vTaskSuspendAll+0x18>)
 800c274:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c276:	bf00      	nop
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	20001948 	.word	0x20001948

0800c284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c28a:	2300      	movs	r3, #0
 800c28c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c28e:	2300      	movs	r3, #0
 800c290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c292:	4b42      	ldr	r3, [pc, #264]	; (800c39c <xTaskResumeAll+0x118>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10a      	bne.n	800c2b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	603b      	str	r3, [r7, #0]
}
 800c2ac:	bf00      	nop
 800c2ae:	e7fe      	b.n	800c2ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c2b0:	f001 f918 	bl	800d4e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c2b4:	4b39      	ldr	r3, [pc, #228]	; (800c39c <xTaskResumeAll+0x118>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	4a38      	ldr	r2, [pc, #224]	; (800c39c <xTaskResumeAll+0x118>)
 800c2bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2be:	4b37      	ldr	r3, [pc, #220]	; (800c39c <xTaskResumeAll+0x118>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d162      	bne.n	800c38c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c2c6:	4b36      	ldr	r3, [pc, #216]	; (800c3a0 <xTaskResumeAll+0x11c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d05e      	beq.n	800c38c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2ce:	e02f      	b.n	800c330 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d0:	4b34      	ldr	r3, [pc, #208]	; (800c3a4 <xTaskResumeAll+0x120>)
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	3318      	adds	r3, #24
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7ff f871 	bl	800b3c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7ff f86c 	bl	800b3c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f0:	4b2d      	ldr	r3, [pc, #180]	; (800c3a8 <xTaskResumeAll+0x124>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d903      	bls.n	800c300 <xTaskResumeAll+0x7c>
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fc:	4a2a      	ldr	r2, [pc, #168]	; (800c3a8 <xTaskResumeAll+0x124>)
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c304:	4613      	mov	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4a27      	ldr	r2, [pc, #156]	; (800c3ac <xTaskResumeAll+0x128>)
 800c30e:	441a      	add	r2, r3
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	3304      	adds	r3, #4
 800c314:	4619      	mov	r1, r3
 800c316:	4610      	mov	r0, r2
 800c318:	f7fe fff7 	bl	800b30a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c320:	4b23      	ldr	r3, [pc, #140]	; (800c3b0 <xTaskResumeAll+0x12c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c326:	429a      	cmp	r2, r3
 800c328:	d302      	bcc.n	800c330 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c32a:	4b22      	ldr	r3, [pc, #136]	; (800c3b4 <xTaskResumeAll+0x130>)
 800c32c:	2201      	movs	r2, #1
 800c32e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c330:	4b1c      	ldr	r3, [pc, #112]	; (800c3a4 <xTaskResumeAll+0x120>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1cb      	bne.n	800c2d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d001      	beq.n	800c342 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c33e:	f000 fb55 	bl	800c9ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c342:	4b1d      	ldr	r3, [pc, #116]	; (800c3b8 <xTaskResumeAll+0x134>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d010      	beq.n	800c370 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c34e:	f000 f847 	bl	800c3e0 <xTaskIncrementTick>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c358:	4b16      	ldr	r3, [pc, #88]	; (800c3b4 <xTaskResumeAll+0x130>)
 800c35a:	2201      	movs	r2, #1
 800c35c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	3b01      	subs	r3, #1
 800c362:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1f1      	bne.n	800c34e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c36a:	4b13      	ldr	r3, [pc, #76]	; (800c3b8 <xTaskResumeAll+0x134>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c370:	4b10      	ldr	r3, [pc, #64]	; (800c3b4 <xTaskResumeAll+0x130>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d009      	beq.n	800c38c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c378:	2301      	movs	r3, #1
 800c37a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c37c:	4b0f      	ldr	r3, [pc, #60]	; (800c3bc <xTaskResumeAll+0x138>)
 800c37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c38c:	f001 f8da 	bl	800d544 <vPortExitCritical>

	return xAlreadyYielded;
 800c390:	68bb      	ldr	r3, [r7, #8]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20001948 	.word	0x20001948
 800c3a0:	20001920 	.word	0x20001920
 800c3a4:	200018e0 	.word	0x200018e0
 800c3a8:	20001928 	.word	0x20001928
 800c3ac:	20001450 	.word	0x20001450
 800c3b0:	2000144c 	.word	0x2000144c
 800c3b4:	20001934 	.word	0x20001934
 800c3b8:	20001930 	.word	0x20001930
 800c3bc:	e000ed04 	.word	0xe000ed04

0800c3c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c3c6:	4b05      	ldr	r3, [pc, #20]	; (800c3dc <xTaskGetTickCount+0x1c>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c3cc:	687b      	ldr	r3, [r7, #4]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	370c      	adds	r7, #12
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	20001924 	.word	0x20001924

0800c3e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3ea:	4b4f      	ldr	r3, [pc, #316]	; (800c528 <xTaskIncrementTick+0x148>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f040 808f 	bne.w	800c512 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c3f4:	4b4d      	ldr	r3, [pc, #308]	; (800c52c <xTaskIncrementTick+0x14c>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c3fc:	4a4b      	ldr	r2, [pc, #300]	; (800c52c <xTaskIncrementTick+0x14c>)
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d120      	bne.n	800c44a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c408:	4b49      	ldr	r3, [pc, #292]	; (800c530 <xTaskIncrementTick+0x150>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00a      	beq.n	800c428 <xTaskIncrementTick+0x48>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	603b      	str	r3, [r7, #0]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <xTaskIncrementTick+0x46>
 800c428:	4b41      	ldr	r3, [pc, #260]	; (800c530 <xTaskIncrementTick+0x150>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	60fb      	str	r3, [r7, #12]
 800c42e:	4b41      	ldr	r3, [pc, #260]	; (800c534 <xTaskIncrementTick+0x154>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a3f      	ldr	r2, [pc, #252]	; (800c530 <xTaskIncrementTick+0x150>)
 800c434:	6013      	str	r3, [r2, #0]
 800c436:	4a3f      	ldr	r2, [pc, #252]	; (800c534 <xTaskIncrementTick+0x154>)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6013      	str	r3, [r2, #0]
 800c43c:	4b3e      	ldr	r3, [pc, #248]	; (800c538 <xTaskIncrementTick+0x158>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3301      	adds	r3, #1
 800c442:	4a3d      	ldr	r2, [pc, #244]	; (800c538 <xTaskIncrementTick+0x158>)
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	f000 fad1 	bl	800c9ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c44a:	4b3c      	ldr	r3, [pc, #240]	; (800c53c <xTaskIncrementTick+0x15c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	429a      	cmp	r2, r3
 800c452:	d349      	bcc.n	800c4e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c454:	4b36      	ldr	r3, [pc, #216]	; (800c530 <xTaskIncrementTick+0x150>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d104      	bne.n	800c468 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c45e:	4b37      	ldr	r3, [pc, #220]	; (800c53c <xTaskIncrementTick+0x15c>)
 800c460:	f04f 32ff 	mov.w	r2, #4294967295
 800c464:	601a      	str	r2, [r3, #0]
					break;
 800c466:	e03f      	b.n	800c4e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c468:	4b31      	ldr	r3, [pc, #196]	; (800c530 <xTaskIncrementTick+0x150>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c478:	693a      	ldr	r2, [r7, #16]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d203      	bcs.n	800c488 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c480:	4a2e      	ldr	r2, [pc, #184]	; (800c53c <xTaskIncrementTick+0x15c>)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c486:	e02f      	b.n	800c4e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	3304      	adds	r3, #4
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fe ff99 	bl	800b3c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c496:	2b00      	cmp	r3, #0
 800c498:	d004      	beq.n	800c4a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	3318      	adds	r3, #24
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7fe ff90 	bl	800b3c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a8:	4b25      	ldr	r3, [pc, #148]	; (800c540 <xTaskIncrementTick+0x160>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d903      	bls.n	800c4b8 <xTaskIncrementTick+0xd8>
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b4:	4a22      	ldr	r2, [pc, #136]	; (800c540 <xTaskIncrementTick+0x160>)
 800c4b6:	6013      	str	r3, [r2, #0]
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4bc:	4613      	mov	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	4413      	add	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4a1f      	ldr	r2, [pc, #124]	; (800c544 <xTaskIncrementTick+0x164>)
 800c4c6:	441a      	add	r2, r3
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	4610      	mov	r0, r2
 800c4d0:	f7fe ff1b 	bl	800b30a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d8:	4b1b      	ldr	r3, [pc, #108]	; (800c548 <xTaskIncrementTick+0x168>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d3b8      	bcc.n	800c454 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4e6:	e7b5      	b.n	800c454 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c4e8:	4b17      	ldr	r3, [pc, #92]	; (800c548 <xTaskIncrementTick+0x168>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ee:	4915      	ldr	r1, [pc, #84]	; (800c544 <xTaskIncrementTick+0x164>)
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	4413      	add	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	440b      	add	r3, r1
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d901      	bls.n	800c504 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c500:	2301      	movs	r3, #1
 800c502:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c504:	4b11      	ldr	r3, [pc, #68]	; (800c54c <xTaskIncrementTick+0x16c>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d007      	beq.n	800c51c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c50c:	2301      	movs	r3, #1
 800c50e:	617b      	str	r3, [r7, #20]
 800c510:	e004      	b.n	800c51c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c512:	4b0f      	ldr	r3, [pc, #60]	; (800c550 <xTaskIncrementTick+0x170>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	3301      	adds	r3, #1
 800c518:	4a0d      	ldr	r2, [pc, #52]	; (800c550 <xTaskIncrementTick+0x170>)
 800c51a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c51c:	697b      	ldr	r3, [r7, #20]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3718      	adds	r7, #24
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	20001948 	.word	0x20001948
 800c52c:	20001924 	.word	0x20001924
 800c530:	200018d8 	.word	0x200018d8
 800c534:	200018dc 	.word	0x200018dc
 800c538:	20001938 	.word	0x20001938
 800c53c:	20001940 	.word	0x20001940
 800c540:	20001928 	.word	0x20001928
 800c544:	20001450 	.word	0x20001450
 800c548:	2000144c 	.word	0x2000144c
 800c54c:	20001934 	.word	0x20001934
 800c550:	20001930 	.word	0x20001930

0800c554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c55a:	4b28      	ldr	r3, [pc, #160]	; (800c5fc <vTaskSwitchContext+0xa8>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d003      	beq.n	800c56a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c562:	4b27      	ldr	r3, [pc, #156]	; (800c600 <vTaskSwitchContext+0xac>)
 800c564:	2201      	movs	r2, #1
 800c566:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c568:	e041      	b.n	800c5ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c56a:	4b25      	ldr	r3, [pc, #148]	; (800c600 <vTaskSwitchContext+0xac>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c570:	4b24      	ldr	r3, [pc, #144]	; (800c604 <vTaskSwitchContext+0xb0>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	60fb      	str	r3, [r7, #12]
 800c576:	e010      	b.n	800c59a <vTaskSwitchContext+0x46>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10a      	bne.n	800c594 <vTaskSwitchContext+0x40>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	607b      	str	r3, [r7, #4]
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <vTaskSwitchContext+0x3e>
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	3b01      	subs	r3, #1
 800c598:	60fb      	str	r3, [r7, #12]
 800c59a:	491b      	ldr	r1, [pc, #108]	; (800c608 <vTaskSwitchContext+0xb4>)
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	4413      	add	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	440b      	add	r3, r1
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d0e4      	beq.n	800c578 <vTaskSwitchContext+0x24>
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	4a13      	ldr	r2, [pc, #76]	; (800c608 <vTaskSwitchContext+0xb4>)
 800c5ba:	4413      	add	r3, r2
 800c5bc:	60bb      	str	r3, [r7, #8]
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	685a      	ldr	r2, [r3, #4]
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	605a      	str	r2, [r3, #4]
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	3308      	adds	r3, #8
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d104      	bne.n	800c5de <vTaskSwitchContext+0x8a>
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	685a      	ldr	r2, [r3, #4]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	605a      	str	r2, [r3, #4]
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	4a09      	ldr	r2, [pc, #36]	; (800c60c <vTaskSwitchContext+0xb8>)
 800c5e6:	6013      	str	r3, [r2, #0]
 800c5e8:	4a06      	ldr	r2, [pc, #24]	; (800c604 <vTaskSwitchContext+0xb0>)
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6013      	str	r3, [r2, #0]
}
 800c5ee:	bf00      	nop
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	20001948 	.word	0x20001948
 800c600:	20001934 	.word	0x20001934
 800c604:	20001928 	.word	0x20001928
 800c608:	20001450 	.word	0x20001450
 800c60c:	2000144c 	.word	0x2000144c

0800c610 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10a      	bne.n	800c636 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c624:	f383 8811 	msr	BASEPRI, r3
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	60fb      	str	r3, [r7, #12]
}
 800c632:	bf00      	nop
 800c634:	e7fe      	b.n	800c634 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c636:	4b07      	ldr	r3, [pc, #28]	; (800c654 <vTaskPlaceOnEventList+0x44>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	3318      	adds	r3, #24
 800c63c:	4619      	mov	r1, r3
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7fe fe87 	bl	800b352 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c644:	2101      	movs	r1, #1
 800c646:	6838      	ldr	r0, [r7, #0]
 800c648:	f000 fa7c 	bl	800cb44 <prvAddCurrentTaskToDelayedList>
}
 800c64c:	bf00      	nop
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	2000144c 	.word	0x2000144c

0800c658 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10a      	bne.n	800c680 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66e:	f383 8811 	msr	BASEPRI, r3
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	617b      	str	r3, [r7, #20]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c680:	4b0a      	ldr	r3, [pc, #40]	; (800c6ac <vTaskPlaceOnEventListRestricted+0x54>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3318      	adds	r3, #24
 800c686:	4619      	mov	r1, r3
 800c688:	68f8      	ldr	r0, [r7, #12]
 800c68a:	f7fe fe3e 	bl	800b30a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c694:	f04f 33ff 	mov.w	r3, #4294967295
 800c698:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	68b8      	ldr	r0, [r7, #8]
 800c69e:	f000 fa51 	bl	800cb44 <prvAddCurrentTaskToDelayedList>
	}
 800c6a2:	bf00      	nop
 800c6a4:	3718      	adds	r7, #24
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	2000144c 	.word	0x2000144c

0800c6b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10a      	bne.n	800c6dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ca:	f383 8811 	msr	BASEPRI, r3
 800c6ce:	f3bf 8f6f 	isb	sy
 800c6d2:	f3bf 8f4f 	dsb	sy
 800c6d6:	60fb      	str	r3, [r7, #12]
}
 800c6d8:	bf00      	nop
 800c6da:	e7fe      	b.n	800c6da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	3318      	adds	r3, #24
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fe fe6f 	bl	800b3c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6e6:	4b1e      	ldr	r3, [pc, #120]	; (800c760 <xTaskRemoveFromEventList+0xb0>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d11d      	bne.n	800c72a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe fe66 	bl	800b3c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fc:	4b19      	ldr	r3, [pc, #100]	; (800c764 <xTaskRemoveFromEventList+0xb4>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	429a      	cmp	r2, r3
 800c702:	d903      	bls.n	800c70c <xTaskRemoveFromEventList+0x5c>
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c708:	4a16      	ldr	r2, [pc, #88]	; (800c764 <xTaskRemoveFromEventList+0xb4>)
 800c70a:	6013      	str	r3, [r2, #0]
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c710:	4613      	mov	r3, r2
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4413      	add	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4a13      	ldr	r2, [pc, #76]	; (800c768 <xTaskRemoveFromEventList+0xb8>)
 800c71a:	441a      	add	r2, r3
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	3304      	adds	r3, #4
 800c720:	4619      	mov	r1, r3
 800c722:	4610      	mov	r0, r2
 800c724:	f7fe fdf1 	bl	800b30a <vListInsertEnd>
 800c728:	e005      	b.n	800c736 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	3318      	adds	r3, #24
 800c72e:	4619      	mov	r1, r3
 800c730:	480e      	ldr	r0, [pc, #56]	; (800c76c <xTaskRemoveFromEventList+0xbc>)
 800c732:	f7fe fdea 	bl	800b30a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73a:	4b0d      	ldr	r3, [pc, #52]	; (800c770 <xTaskRemoveFromEventList+0xc0>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c740:	429a      	cmp	r2, r3
 800c742:	d905      	bls.n	800c750 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c744:	2301      	movs	r3, #1
 800c746:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c748:	4b0a      	ldr	r3, [pc, #40]	; (800c774 <xTaskRemoveFromEventList+0xc4>)
 800c74a:	2201      	movs	r2, #1
 800c74c:	601a      	str	r2, [r3, #0]
 800c74e:	e001      	b.n	800c754 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c750:	2300      	movs	r3, #0
 800c752:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c754:	697b      	ldr	r3, [r7, #20]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3718      	adds	r7, #24
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20001948 	.word	0x20001948
 800c764:	20001928 	.word	0x20001928
 800c768:	20001450 	.word	0x20001450
 800c76c:	200018e0 	.word	0x200018e0
 800c770:	2000144c 	.word	0x2000144c
 800c774:	20001934 	.word	0x20001934

0800c778 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c780:	4b06      	ldr	r3, [pc, #24]	; (800c79c <vTaskInternalSetTimeOutState+0x24>)
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c788:	4b05      	ldr	r3, [pc, #20]	; (800c7a0 <vTaskInternalSetTimeOutState+0x28>)
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	605a      	str	r2, [r3, #4]
}
 800c790:	bf00      	nop
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	20001938 	.word	0x20001938
 800c7a0:	20001924 	.word	0x20001924

0800c7a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b088      	sub	sp, #32
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10a      	bne.n	800c7ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b8:	f383 8811 	msr	BASEPRI, r3
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	613b      	str	r3, [r7, #16]
}
 800c7c6:	bf00      	nop
 800c7c8:	e7fe      	b.n	800c7c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10a      	bne.n	800c7e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	60fb      	str	r3, [r7, #12]
}
 800c7e2:	bf00      	nop
 800c7e4:	e7fe      	b.n	800c7e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c7e6:	f000 fe7d 	bl	800d4e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7ea:	4b1d      	ldr	r3, [pc, #116]	; (800c860 <xTaskCheckForTimeOut+0xbc>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	69ba      	ldr	r2, [r7, #24]
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c802:	d102      	bne.n	800c80a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c804:	2300      	movs	r3, #0
 800c806:	61fb      	str	r3, [r7, #28]
 800c808:	e023      	b.n	800c852 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	4b15      	ldr	r3, [pc, #84]	; (800c864 <xTaskCheckForTimeOut+0xc0>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	429a      	cmp	r2, r3
 800c814:	d007      	beq.n	800c826 <xTaskCheckForTimeOut+0x82>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	69ba      	ldr	r2, [r7, #24]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d302      	bcc.n	800c826 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c820:	2301      	movs	r3, #1
 800c822:	61fb      	str	r3, [r7, #28]
 800c824:	e015      	b.n	800c852 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d20b      	bcs.n	800c848 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	1ad2      	subs	r2, r2, r3
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff ff9b 	bl	800c778 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c842:	2300      	movs	r3, #0
 800c844:	61fb      	str	r3, [r7, #28]
 800c846:	e004      	b.n	800c852 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	2200      	movs	r2, #0
 800c84c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c84e:	2301      	movs	r3, #1
 800c850:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c852:	f000 fe77 	bl	800d544 <vPortExitCritical>

	return xReturn;
 800c856:	69fb      	ldr	r3, [r7, #28]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3720      	adds	r7, #32
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	20001924 	.word	0x20001924
 800c864:	20001938 	.word	0x20001938

0800c868 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c868:	b480      	push	{r7}
 800c86a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c86c:	4b03      	ldr	r3, [pc, #12]	; (800c87c <vTaskMissedYield+0x14>)
 800c86e:	2201      	movs	r2, #1
 800c870:	601a      	str	r2, [r3, #0]
}
 800c872:	bf00      	nop
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	20001934 	.word	0x20001934

0800c880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c888:	f000 f852 	bl	800c930 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c88c:	4b06      	ldr	r3, [pc, #24]	; (800c8a8 <prvIdleTask+0x28>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d9f9      	bls.n	800c888 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c894:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <prvIdleTask+0x2c>)
 800c896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c89a:	601a      	str	r2, [r3, #0]
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c8a4:	e7f0      	b.n	800c888 <prvIdleTask+0x8>
 800c8a6:	bf00      	nop
 800c8a8:	20001450 	.word	0x20001450
 800c8ac:	e000ed04 	.word	0xe000ed04

0800c8b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	607b      	str	r3, [r7, #4]
 800c8ba:	e00c      	b.n	800c8d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	4413      	add	r3, r2
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	4a12      	ldr	r2, [pc, #72]	; (800c910 <prvInitialiseTaskLists+0x60>)
 800c8c8:	4413      	add	r3, r2
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7fe fcf0 	bl	800b2b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	607b      	str	r3, [r7, #4]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2b37      	cmp	r3, #55	; 0x37
 800c8da:	d9ef      	bls.n	800c8bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8dc:	480d      	ldr	r0, [pc, #52]	; (800c914 <prvInitialiseTaskLists+0x64>)
 800c8de:	f7fe fce7 	bl	800b2b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8e2:	480d      	ldr	r0, [pc, #52]	; (800c918 <prvInitialiseTaskLists+0x68>)
 800c8e4:	f7fe fce4 	bl	800b2b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8e8:	480c      	ldr	r0, [pc, #48]	; (800c91c <prvInitialiseTaskLists+0x6c>)
 800c8ea:	f7fe fce1 	bl	800b2b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8ee:	480c      	ldr	r0, [pc, #48]	; (800c920 <prvInitialiseTaskLists+0x70>)
 800c8f0:	f7fe fcde 	bl	800b2b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8f4:	480b      	ldr	r0, [pc, #44]	; (800c924 <prvInitialiseTaskLists+0x74>)
 800c8f6:	f7fe fcdb 	bl	800b2b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8fa:	4b0b      	ldr	r3, [pc, #44]	; (800c928 <prvInitialiseTaskLists+0x78>)
 800c8fc:	4a05      	ldr	r2, [pc, #20]	; (800c914 <prvInitialiseTaskLists+0x64>)
 800c8fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c900:	4b0a      	ldr	r3, [pc, #40]	; (800c92c <prvInitialiseTaskLists+0x7c>)
 800c902:	4a05      	ldr	r2, [pc, #20]	; (800c918 <prvInitialiseTaskLists+0x68>)
 800c904:	601a      	str	r2, [r3, #0]
}
 800c906:	bf00      	nop
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20001450 	.word	0x20001450
 800c914:	200018b0 	.word	0x200018b0
 800c918:	200018c4 	.word	0x200018c4
 800c91c:	200018e0 	.word	0x200018e0
 800c920:	200018f4 	.word	0x200018f4
 800c924:	2000190c 	.word	0x2000190c
 800c928:	200018d8 	.word	0x200018d8
 800c92c:	200018dc 	.word	0x200018dc

0800c930 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c936:	e019      	b.n	800c96c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c938:	f000 fdd4 	bl	800d4e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c93c:	4b10      	ldr	r3, [pc, #64]	; (800c980 <prvCheckTasksWaitingTermination+0x50>)
 800c93e:	68db      	ldr	r3, [r3, #12]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	3304      	adds	r3, #4
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fe fd3b 	bl	800b3c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c94e:	4b0d      	ldr	r3, [pc, #52]	; (800c984 <prvCheckTasksWaitingTermination+0x54>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3b01      	subs	r3, #1
 800c954:	4a0b      	ldr	r2, [pc, #44]	; (800c984 <prvCheckTasksWaitingTermination+0x54>)
 800c956:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c958:	4b0b      	ldr	r3, [pc, #44]	; (800c988 <prvCheckTasksWaitingTermination+0x58>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	4a0a      	ldr	r2, [pc, #40]	; (800c988 <prvCheckTasksWaitingTermination+0x58>)
 800c960:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c962:	f000 fdef 	bl	800d544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f810 	bl	800c98c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c96c:	4b06      	ldr	r3, [pc, #24]	; (800c988 <prvCheckTasksWaitingTermination+0x58>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1e1      	bne.n	800c938 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	200018f4 	.word	0x200018f4
 800c984:	20001920 	.word	0x20001920
 800c988:	20001908 	.word	0x20001908

0800c98c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d108      	bne.n	800c9b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f000 ff8c 	bl	800d8c0 <vPortFree>
				vPortFree( pxTCB );
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 ff89 	bl	800d8c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c9ae:	e018      	b.n	800c9e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d103      	bne.n	800c9c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 ff80 	bl	800d8c0 <vPortFree>
	}
 800c9c0:	e00f      	b.n	800c9e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	d00a      	beq.n	800c9e2 <prvDeleteTCB+0x56>
	__asm volatile
 800c9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d0:	f383 8811 	msr	BASEPRI, r3
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	f3bf 8f4f 	dsb	sy
 800c9dc:	60fb      	str	r3, [r7, #12]
}
 800c9de:	bf00      	nop
 800c9e0:	e7fe      	b.n	800c9e0 <prvDeleteTCB+0x54>
	}
 800c9e2:	bf00      	nop
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
	...

0800c9ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ca24 <prvResetNextTaskUnblockTime+0x38>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d104      	bne.n	800ca06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ca28 <prvResetNextTaskUnblockTime+0x3c>)
 800c9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800ca02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca04:	e008      	b.n	800ca18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca06:	4b07      	ldr	r3, [pc, #28]	; (800ca24 <prvResetNextTaskUnblockTime+0x38>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	4a04      	ldr	r2, [pc, #16]	; (800ca28 <prvResetNextTaskUnblockTime+0x3c>)
 800ca16:	6013      	str	r3, [r2, #0]
}
 800ca18:	bf00      	nop
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	200018d8 	.word	0x200018d8
 800ca28:	20001940 	.word	0x20001940

0800ca2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca32:	4b0b      	ldr	r3, [pc, #44]	; (800ca60 <xTaskGetSchedulerState+0x34>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d102      	bne.n	800ca40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	607b      	str	r3, [r7, #4]
 800ca3e:	e008      	b.n	800ca52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca40:	4b08      	ldr	r3, [pc, #32]	; (800ca64 <xTaskGetSchedulerState+0x38>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d102      	bne.n	800ca4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca48:	2302      	movs	r3, #2
 800ca4a:	607b      	str	r3, [r7, #4]
 800ca4c:	e001      	b.n	800ca52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca52:	687b      	ldr	r3, [r7, #4]
	}
 800ca54:	4618      	mov	r0, r3
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr
 800ca60:	2000192c 	.word	0x2000192c
 800ca64:	20001948 	.word	0x20001948

0800ca68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca74:	2300      	movs	r3, #0
 800ca76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d056      	beq.n	800cb2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ca7e:	4b2e      	ldr	r3, [pc, #184]	; (800cb38 <xTaskPriorityDisinherit+0xd0>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d00a      	beq.n	800ca9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ca88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	60fb      	str	r3, [r7, #12]
}
 800ca9a:	bf00      	nop
 800ca9c:	e7fe      	b.n	800ca9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d10a      	bne.n	800cabc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	60bb      	str	r3, [r7, #8]
}
 800cab8:	bf00      	nop
 800caba:	e7fe      	b.n	800caba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cac0:	1e5a      	subs	r2, r3, #1
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cace:	429a      	cmp	r2, r3
 800cad0:	d02c      	beq.n	800cb2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d128      	bne.n	800cb2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	3304      	adds	r3, #4
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe fc70 	bl	800b3c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cafc:	4b0f      	ldr	r3, [pc, #60]	; (800cb3c <xTaskPriorityDisinherit+0xd4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d903      	bls.n	800cb0c <xTaskPriorityDisinherit+0xa4>
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb08:	4a0c      	ldr	r2, [pc, #48]	; (800cb3c <xTaskPriorityDisinherit+0xd4>)
 800cb0a:	6013      	str	r3, [r2, #0]
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb10:	4613      	mov	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	4413      	add	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4a09      	ldr	r2, [pc, #36]	; (800cb40 <xTaskPriorityDisinherit+0xd8>)
 800cb1a:	441a      	add	r2, r3
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	3304      	adds	r3, #4
 800cb20:	4619      	mov	r1, r3
 800cb22:	4610      	mov	r0, r2
 800cb24:	f7fe fbf1 	bl	800b30a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb2c:	697b      	ldr	r3, [r7, #20]
	}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3718      	adds	r7, #24
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	2000144c 	.word	0x2000144c
 800cb3c:	20001928 	.word	0x20001928
 800cb40:	20001450 	.word	0x20001450

0800cb44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb4e:	4b21      	ldr	r3, [pc, #132]	; (800cbd4 <prvAddCurrentTaskToDelayedList+0x90>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb54:	4b20      	ldr	r3, [pc, #128]	; (800cbd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3304      	adds	r3, #4
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe fc32 	bl	800b3c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb66:	d10a      	bne.n	800cb7e <prvAddCurrentTaskToDelayedList+0x3a>
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d007      	beq.n	800cb7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb6e:	4b1a      	ldr	r3, [pc, #104]	; (800cbd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	3304      	adds	r3, #4
 800cb74:	4619      	mov	r1, r3
 800cb76:	4819      	ldr	r0, [pc, #100]	; (800cbdc <prvAddCurrentTaskToDelayedList+0x98>)
 800cb78:	f7fe fbc7 	bl	800b30a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb7c:	e026      	b.n	800cbcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4413      	add	r3, r2
 800cb84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb86:	4b14      	ldr	r3, [pc, #80]	; (800cbd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb8e:	68ba      	ldr	r2, [r7, #8]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d209      	bcs.n	800cbaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb96:	4b12      	ldr	r3, [pc, #72]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	4b0f      	ldr	r3, [pc, #60]	; (800cbd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	3304      	adds	r3, #4
 800cba0:	4619      	mov	r1, r3
 800cba2:	4610      	mov	r0, r2
 800cba4:	f7fe fbd5 	bl	800b352 <vListInsert>
}
 800cba8:	e010      	b.n	800cbcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbaa:	4b0e      	ldr	r3, [pc, #56]	; (800cbe4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	4b0a      	ldr	r3, [pc, #40]	; (800cbd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	3304      	adds	r3, #4
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	f7fe fbcb 	bl	800b352 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cbbc:	4b0a      	ldr	r3, [pc, #40]	; (800cbe8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d202      	bcs.n	800cbcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cbc6:	4a08      	ldr	r2, [pc, #32]	; (800cbe8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	6013      	str	r3, [r2, #0]
}
 800cbcc:	bf00      	nop
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	20001924 	.word	0x20001924
 800cbd8:	2000144c 	.word	0x2000144c
 800cbdc:	2000190c 	.word	0x2000190c
 800cbe0:	200018dc 	.word	0x200018dc
 800cbe4:	200018d8 	.word	0x200018d8
 800cbe8:	20001940 	.word	0x20001940

0800cbec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b08a      	sub	sp, #40	; 0x28
 800cbf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cbf6:	f000 fb07 	bl	800d208 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cbfa:	4b1c      	ldr	r3, [pc, #112]	; (800cc6c <xTimerCreateTimerTask+0x80>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d021      	beq.n	800cc46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cc02:	2300      	movs	r3, #0
 800cc04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cc06:	2300      	movs	r3, #0
 800cc08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cc0a:	1d3a      	adds	r2, r7, #4
 800cc0c:	f107 0108 	add.w	r1, r7, #8
 800cc10:	f107 030c 	add.w	r3, r7, #12
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fe fb31 	bl	800b27c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cc1a:	6879      	ldr	r1, [r7, #4]
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	68fa      	ldr	r2, [r7, #12]
 800cc20:	9202      	str	r2, [sp, #8]
 800cc22:	9301      	str	r3, [sp, #4]
 800cc24:	2302      	movs	r3, #2
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	2300      	movs	r3, #0
 800cc2a:	460a      	mov	r2, r1
 800cc2c:	4910      	ldr	r1, [pc, #64]	; (800cc70 <xTimerCreateTimerTask+0x84>)
 800cc2e:	4811      	ldr	r0, [pc, #68]	; (800cc74 <xTimerCreateTimerTask+0x88>)
 800cc30:	f7ff f8de 	bl	800bdf0 <xTaskCreateStatic>
 800cc34:	4603      	mov	r3, r0
 800cc36:	4a10      	ldr	r2, [pc, #64]	; (800cc78 <xTimerCreateTimerTask+0x8c>)
 800cc38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cc3a:	4b0f      	ldr	r3, [pc, #60]	; (800cc78 <xTimerCreateTimerTask+0x8c>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cc42:	2301      	movs	r3, #1
 800cc44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10a      	bne.n	800cc62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	613b      	str	r3, [r7, #16]
}
 800cc5e:	bf00      	nop
 800cc60:	e7fe      	b.n	800cc60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cc62:	697b      	ldr	r3, [r7, #20]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3718      	adds	r7, #24
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	2000197c 	.word	0x2000197c
 800cc70:	08015e40 	.word	0x08015e40
 800cc74:	0800cdb1 	.word	0x0800cdb1
 800cc78:	20001980 	.word	0x20001980

0800cc7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b08a      	sub	sp, #40	; 0x28
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
 800cc88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10a      	bne.n	800ccaa <xTimerGenericCommand+0x2e>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	623b      	str	r3, [r7, #32]
}
 800cca6:	bf00      	nop
 800cca8:	e7fe      	b.n	800cca8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ccaa:	4b1a      	ldr	r3, [pc, #104]	; (800cd14 <xTimerGenericCommand+0x98>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d02a      	beq.n	800cd08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	2b05      	cmp	r3, #5
 800ccc2:	dc18      	bgt.n	800ccf6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ccc4:	f7ff feb2 	bl	800ca2c <xTaskGetSchedulerState>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d109      	bne.n	800cce2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ccce:	4b11      	ldr	r3, [pc, #68]	; (800cd14 <xTimerGenericCommand+0x98>)
 800ccd0:	6818      	ldr	r0, [r3, #0]
 800ccd2:	f107 0110 	add.w	r1, r7, #16
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccda:	f7fe fca1 	bl	800b620 <xQueueGenericSend>
 800ccde:	6278      	str	r0, [r7, #36]	; 0x24
 800cce0:	e012      	b.n	800cd08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cce2:	4b0c      	ldr	r3, [pc, #48]	; (800cd14 <xTimerGenericCommand+0x98>)
 800cce4:	6818      	ldr	r0, [r3, #0]
 800cce6:	f107 0110 	add.w	r1, r7, #16
 800ccea:	2300      	movs	r3, #0
 800ccec:	2200      	movs	r2, #0
 800ccee:	f7fe fc97 	bl	800b620 <xQueueGenericSend>
 800ccf2:	6278      	str	r0, [r7, #36]	; 0x24
 800ccf4:	e008      	b.n	800cd08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ccf6:	4b07      	ldr	r3, [pc, #28]	; (800cd14 <xTimerGenericCommand+0x98>)
 800ccf8:	6818      	ldr	r0, [r3, #0]
 800ccfa:	f107 0110 	add.w	r1, r7, #16
 800ccfe:	2300      	movs	r3, #0
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	f7fe fd8b 	bl	800b81c <xQueueGenericSendFromISR>
 800cd06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3728      	adds	r7, #40	; 0x28
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	2000197c 	.word	0x2000197c

0800cd18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b088      	sub	sp, #32
 800cd1c:	af02      	add	r7, sp, #8
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd22:	4b22      	ldr	r3, [pc, #136]	; (800cdac <prvProcessExpiredTimer+0x94>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	3304      	adds	r3, #4
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fe fb47 	bl	800b3c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd3c:	f003 0304 	and.w	r3, r3, #4
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d022      	beq.n	800cd8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	699a      	ldr	r2, [r3, #24]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	18d1      	adds	r1, r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	6978      	ldr	r0, [r7, #20]
 800cd52:	f000 f8d1 	bl	800cef8 <prvInsertTimerInActiveList>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d01f      	beq.n	800cd9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	2300      	movs	r3, #0
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	2100      	movs	r1, #0
 800cd66:	6978      	ldr	r0, [r7, #20]
 800cd68:	f7ff ff88 	bl	800cc7c <xTimerGenericCommand>
 800cd6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d113      	bne.n	800cd9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	60fb      	str	r3, [r7, #12]
}
 800cd86:	bf00      	nop
 800cd88:	e7fe      	b.n	800cd88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd90:	f023 0301 	bic.w	r3, r3, #1
 800cd94:	b2da      	uxtb	r2, r3
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	6a1b      	ldr	r3, [r3, #32]
 800cda0:	6978      	ldr	r0, [r7, #20]
 800cda2:	4798      	blx	r3
}
 800cda4:	bf00      	nop
 800cda6:	3718      	adds	r7, #24
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	20001974 	.word	0x20001974

0800cdb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdb8:	f107 0308 	add.w	r3, r7, #8
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f000 f857 	bl	800ce70 <prvGetNextExpireTime>
 800cdc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f000 f803 	bl	800cdd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cdce:	f000 f8d5 	bl	800cf7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdd2:	e7f1      	b.n	800cdb8 <prvTimerTask+0x8>

0800cdd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cdde:	f7ff fa43 	bl	800c268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cde2:	f107 0308 	add.w	r3, r7, #8
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 f866 	bl	800ceb8 <prvSampleTimeNow>
 800cdec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d130      	bne.n	800ce56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10a      	bne.n	800ce10 <prvProcessTimerOrBlockTask+0x3c>
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d806      	bhi.n	800ce10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ce02:	f7ff fa3f 	bl	800c284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ce06:	68f9      	ldr	r1, [r7, #12]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff ff85 	bl	800cd18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ce0e:	e024      	b.n	800ce5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d008      	beq.n	800ce28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ce16:	4b13      	ldr	r3, [pc, #76]	; (800ce64 <prvProcessTimerOrBlockTask+0x90>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d101      	bne.n	800ce24 <prvProcessTimerOrBlockTask+0x50>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e000      	b.n	800ce26 <prvProcessTimerOrBlockTask+0x52>
 800ce24:	2300      	movs	r3, #0
 800ce26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce28:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <prvProcessTimerOrBlockTask+0x94>)
 800ce2a:	6818      	ldr	r0, [r3, #0]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	4619      	mov	r1, r3
 800ce36:	f7fe ffa7 	bl	800bd88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce3a:	f7ff fa23 	bl	800c284 <xTaskResumeAll>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10a      	bne.n	800ce5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ce44:	4b09      	ldr	r3, [pc, #36]	; (800ce6c <prvProcessTimerOrBlockTask+0x98>)
 800ce46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce4a:	601a      	str	r2, [r3, #0]
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	f3bf 8f6f 	isb	sy
}
 800ce54:	e001      	b.n	800ce5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ce56:	f7ff fa15 	bl	800c284 <xTaskResumeAll>
}
 800ce5a:	bf00      	nop
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20001978 	.word	0x20001978
 800ce68:	2000197c 	.word	0x2000197c
 800ce6c:	e000ed04 	.word	0xe000ed04

0800ce70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce78:	4b0e      	ldr	r3, [pc, #56]	; (800ceb4 <prvGetNextExpireTime+0x44>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d101      	bne.n	800ce86 <prvGetNextExpireTime+0x16>
 800ce82:	2201      	movs	r2, #1
 800ce84:	e000      	b.n	800ce88 <prvGetNextExpireTime+0x18>
 800ce86:	2200      	movs	r2, #0
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d105      	bne.n	800cea0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce94:	4b07      	ldr	r3, [pc, #28]	; (800ceb4 <prvGetNextExpireTime+0x44>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	60fb      	str	r3, [r7, #12]
 800ce9e:	e001      	b.n	800cea4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cea0:	2300      	movs	r3, #0
 800cea2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cea4:	68fb      	ldr	r3, [r7, #12]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	20001974 	.word	0x20001974

0800ceb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cec0:	f7ff fa7e 	bl	800c3c0 <xTaskGetTickCount>
 800cec4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cec6:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <prvSampleTimeNow+0x3c>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d205      	bcs.n	800cedc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ced0:	f000 f936 	bl	800d140 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	e002      	b.n	800cee2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cee2:	4a04      	ldr	r2, [pc, #16]	; (800cef4 <prvSampleTimeNow+0x3c>)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cee8:	68fb      	ldr	r3, [r7, #12]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	20001984 	.word	0x20001984

0800cef8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cf06:	2300      	movs	r3, #0
 800cf08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d812      	bhi.n	800cf44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	1ad2      	subs	r2, r2, r3
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d302      	bcc.n	800cf32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	617b      	str	r3, [r7, #20]
 800cf30:	e01b      	b.n	800cf6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf32:	4b10      	ldr	r3, [pc, #64]	; (800cf74 <prvInsertTimerInActiveList+0x7c>)
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	3304      	adds	r3, #4
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	f7fe fa08 	bl	800b352 <vListInsert>
 800cf42:	e012      	b.n	800cf6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d206      	bcs.n	800cf5a <prvInsertTimerInActiveList+0x62>
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d302      	bcc.n	800cf5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cf54:	2301      	movs	r3, #1
 800cf56:	617b      	str	r3, [r7, #20]
 800cf58:	e007      	b.n	800cf6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf5a:	4b07      	ldr	r3, [pc, #28]	; (800cf78 <prvInsertTimerInActiveList+0x80>)
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3304      	adds	r3, #4
 800cf62:	4619      	mov	r1, r3
 800cf64:	4610      	mov	r0, r2
 800cf66:	f7fe f9f4 	bl	800b352 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cf6a:	697b      	ldr	r3, [r7, #20]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3718      	adds	r7, #24
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	20001978 	.word	0x20001978
 800cf78:	20001974 	.word	0x20001974

0800cf7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b08e      	sub	sp, #56	; 0x38
 800cf80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf82:	e0ca      	b.n	800d11a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	da18      	bge.n	800cfbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf8a:	1d3b      	adds	r3, r7, #4
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d10a      	bne.n	800cfac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9a:	f383 8811 	msr	BASEPRI, r3
 800cf9e:	f3bf 8f6f 	isb	sy
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	61fb      	str	r3, [r7, #28]
}
 800cfa8:	bf00      	nop
 800cfaa:	e7fe      	b.n	800cfaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfb2:	6850      	ldr	r0, [r2, #4]
 800cfb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfb6:	6892      	ldr	r2, [r2, #8]
 800cfb8:	4611      	mov	r1, r2
 800cfba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f2c0 80aa 	blt.w	800d118 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfca:	695b      	ldr	r3, [r3, #20]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d004      	beq.n	800cfda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd2:	3304      	adds	r3, #4
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7fe f9f5 	bl	800b3c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfda:	463b      	mov	r3, r7
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff ff6b 	bl	800ceb8 <prvSampleTimeNow>
 800cfe2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b09      	cmp	r3, #9
 800cfe8:	f200 8097 	bhi.w	800d11a <prvProcessReceivedCommands+0x19e>
 800cfec:	a201      	add	r2, pc, #4	; (adr r2, 800cff4 <prvProcessReceivedCommands+0x78>)
 800cfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff2:	bf00      	nop
 800cff4:	0800d01d 	.word	0x0800d01d
 800cff8:	0800d01d 	.word	0x0800d01d
 800cffc:	0800d01d 	.word	0x0800d01d
 800d000:	0800d091 	.word	0x0800d091
 800d004:	0800d0a5 	.word	0x0800d0a5
 800d008:	0800d0ef 	.word	0x0800d0ef
 800d00c:	0800d01d 	.word	0x0800d01d
 800d010:	0800d01d 	.word	0x0800d01d
 800d014:	0800d091 	.word	0x0800d091
 800d018:	0800d0a5 	.word	0x0800d0a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d022:	f043 0301 	orr.w	r3, r3, #1
 800d026:	b2da      	uxtb	r2, r3
 800d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d032:	699b      	ldr	r3, [r3, #24]
 800d034:	18d1      	adds	r1, r2, r3
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d03a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d03c:	f7ff ff5c 	bl	800cef8 <prvInsertTimerInActiveList>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d069      	beq.n	800d11a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d048:	6a1b      	ldr	r3, [r3, #32]
 800d04a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d04c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d054:	f003 0304 	and.w	r3, r3, #4
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d05e      	beq.n	800d11a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	441a      	add	r2, r3
 800d064:	2300      	movs	r3, #0
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	2300      	movs	r3, #0
 800d06a:	2100      	movs	r1, #0
 800d06c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d06e:	f7ff fe05 	bl	800cc7c <xTimerGenericCommand>
 800d072:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d14f      	bne.n	800d11a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	61bb      	str	r3, [r7, #24]
}
 800d08c:	bf00      	nop
 800d08e:	e7fe      	b.n	800d08e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d096:	f023 0301 	bic.w	r3, r3, #1
 800d09a:	b2da      	uxtb	r2, r3
 800d09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d0a2:	e03a      	b.n	800d11a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0aa:	f043 0301 	orr.w	r3, r3, #1
 800d0ae:	b2da      	uxtb	r2, r3
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d0b6:	68ba      	ldr	r2, [r7, #8]
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10a      	bne.n	800d0da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	617b      	str	r3, [r7, #20]
}
 800d0d6:	bf00      	nop
 800d0d8:	e7fe      	b.n	800d0d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0dc:	699a      	ldr	r2, [r3, #24]
 800d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e0:	18d1      	adds	r1, r2, r3
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0e8:	f7ff ff06 	bl	800cef8 <prvInsertTimerInActiveList>
					break;
 800d0ec:	e015      	b.n	800d11a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0f4:	f003 0302 	and.w	r3, r3, #2
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d103      	bne.n	800d104 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0fe:	f000 fbdf 	bl	800d8c0 <vPortFree>
 800d102:	e00a      	b.n	800d11a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d10a:	f023 0301 	bic.w	r3, r3, #1
 800d10e:	b2da      	uxtb	r2, r3
 800d110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d116:	e000      	b.n	800d11a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d118:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d11a:	4b08      	ldr	r3, [pc, #32]	; (800d13c <prvProcessReceivedCommands+0x1c0>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	1d39      	adds	r1, r7, #4
 800d120:	2200      	movs	r2, #0
 800d122:	4618      	mov	r0, r3
 800d124:	f7fe fc16 	bl	800b954 <xQueueReceive>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f47f af2a 	bne.w	800cf84 <prvProcessReceivedCommands+0x8>
	}
}
 800d130:	bf00      	nop
 800d132:	bf00      	nop
 800d134:	3730      	adds	r7, #48	; 0x30
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	2000197c 	.word	0x2000197c

0800d140 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b088      	sub	sp, #32
 800d144:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d146:	e048      	b.n	800d1da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d148:	4b2d      	ldr	r3, [pc, #180]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d152:	4b2b      	ldr	r3, [pc, #172]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	3304      	adds	r3, #4
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe f92f 	bl	800b3c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d174:	f003 0304 	and.w	r3, r3, #4
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d02e      	beq.n	800d1da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	693a      	ldr	r2, [r7, #16]
 800d182:	4413      	add	r3, r2
 800d184:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d90e      	bls.n	800d1ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	68ba      	ldr	r2, [r7, #8]
 800d192:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d19a:	4b19      	ldr	r3, [pc, #100]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	f7fe f8d4 	bl	800b352 <vListInsert>
 800d1aa:	e016      	b.n	800d1da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	693a      	ldr	r2, [r7, #16]
 800d1b4:	2100      	movs	r1, #0
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f7ff fd60 	bl	800cc7c <xTimerGenericCommand>
 800d1bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d10a      	bne.n	800d1da <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c8:	f383 8811 	msr	BASEPRI, r3
 800d1cc:	f3bf 8f6f 	isb	sy
 800d1d0:	f3bf 8f4f 	dsb	sy
 800d1d4:	603b      	str	r3, [r7, #0]
}
 800d1d6:	bf00      	nop
 800d1d8:	e7fe      	b.n	800d1d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d1da:	4b09      	ldr	r3, [pc, #36]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1b1      	bne.n	800d148 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d1e4:	4b06      	ldr	r3, [pc, #24]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d1ea:	4b06      	ldr	r3, [pc, #24]	; (800d204 <prvSwitchTimerLists+0xc4>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a04      	ldr	r2, [pc, #16]	; (800d200 <prvSwitchTimerLists+0xc0>)
 800d1f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d1f2:	4a04      	ldr	r2, [pc, #16]	; (800d204 <prvSwitchTimerLists+0xc4>)
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	6013      	str	r3, [r2, #0]
}
 800d1f8:	bf00      	nop
 800d1fa:	3718      	adds	r7, #24
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	20001974 	.word	0x20001974
 800d204:	20001978 	.word	0x20001978

0800d208 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d20e:	f000 f969 	bl	800d4e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d212:	4b15      	ldr	r3, [pc, #84]	; (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d120      	bne.n	800d25c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d21a:	4814      	ldr	r0, [pc, #80]	; (800d26c <prvCheckForValidListAndQueue+0x64>)
 800d21c:	f7fe f848 	bl	800b2b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d220:	4813      	ldr	r0, [pc, #76]	; (800d270 <prvCheckForValidListAndQueue+0x68>)
 800d222:	f7fe f845 	bl	800b2b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d226:	4b13      	ldr	r3, [pc, #76]	; (800d274 <prvCheckForValidListAndQueue+0x6c>)
 800d228:	4a10      	ldr	r2, [pc, #64]	; (800d26c <prvCheckForValidListAndQueue+0x64>)
 800d22a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d22c:	4b12      	ldr	r3, [pc, #72]	; (800d278 <prvCheckForValidListAndQueue+0x70>)
 800d22e:	4a10      	ldr	r2, [pc, #64]	; (800d270 <prvCheckForValidListAndQueue+0x68>)
 800d230:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d232:	2300      	movs	r3, #0
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	4b11      	ldr	r3, [pc, #68]	; (800d27c <prvCheckForValidListAndQueue+0x74>)
 800d238:	4a11      	ldr	r2, [pc, #68]	; (800d280 <prvCheckForValidListAndQueue+0x78>)
 800d23a:	2110      	movs	r1, #16
 800d23c:	200a      	movs	r0, #10
 800d23e:	f7fe f953 	bl	800b4e8 <xQueueGenericCreateStatic>
 800d242:	4603      	mov	r3, r0
 800d244:	4a08      	ldr	r2, [pc, #32]	; (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d246:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d248:	4b07      	ldr	r3, [pc, #28]	; (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d005      	beq.n	800d25c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d250:	4b05      	ldr	r3, [pc, #20]	; (800d268 <prvCheckForValidListAndQueue+0x60>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	490b      	ldr	r1, [pc, #44]	; (800d284 <prvCheckForValidListAndQueue+0x7c>)
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe fd6c 	bl	800bd34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d25c:	f000 f972 	bl	800d544 <vPortExitCritical>
}
 800d260:	bf00      	nop
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	2000197c 	.word	0x2000197c
 800d26c:	2000194c 	.word	0x2000194c
 800d270:	20001960 	.word	0x20001960
 800d274:	20001974 	.word	0x20001974
 800d278:	20001978 	.word	0x20001978
 800d27c:	20001a28 	.word	0x20001a28
 800d280:	20001988 	.word	0x20001988
 800d284:	08015e48 	.word	0x08015e48

0800d288 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	3b04      	subs	r3, #4
 800d298:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d2a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	3b04      	subs	r3, #4
 800d2a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f023 0201 	bic.w	r2, r3, #1
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3b04      	subs	r3, #4
 800d2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d2b8:	4a0c      	ldr	r2, [pc, #48]	; (800d2ec <pxPortInitialiseStack+0x64>)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3b14      	subs	r3, #20
 800d2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	3b04      	subs	r3, #4
 800d2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f06f 0202 	mvn.w	r2, #2
 800d2d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	3b20      	subs	r3, #32
 800d2dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d2de:	68fb      	ldr	r3, [r7, #12]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	0800d2f1 	.word	0x0800d2f1

0800d2f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d2fa:	4b12      	ldr	r3, [pc, #72]	; (800d344 <prvTaskExitError+0x54>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d302:	d00a      	beq.n	800d31a <prvTaskExitError+0x2a>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	60fb      	str	r3, [r7, #12]
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <prvTaskExitError+0x28>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	60bb      	str	r3, [r7, #8]
}
 800d32c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d32e:	bf00      	nop
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d0fc      	beq.n	800d330 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d336:	bf00      	nop
 800d338:	bf00      	nop
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	200000c8 	.word	0x200000c8
	...

0800d350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d350:	4b07      	ldr	r3, [pc, #28]	; (800d370 <pxCurrentTCBConst2>)
 800d352:	6819      	ldr	r1, [r3, #0]
 800d354:	6808      	ldr	r0, [r1, #0]
 800d356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35a:	f380 8809 	msr	PSP, r0
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	f04f 0000 	mov.w	r0, #0
 800d366:	f380 8811 	msr	BASEPRI, r0
 800d36a:	4770      	bx	lr
 800d36c:	f3af 8000 	nop.w

0800d370 <pxCurrentTCBConst2>:
 800d370:	2000144c 	.word	0x2000144c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d374:	bf00      	nop
 800d376:	bf00      	nop

0800d378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d378:	4808      	ldr	r0, [pc, #32]	; (800d39c <prvPortStartFirstTask+0x24>)
 800d37a:	6800      	ldr	r0, [r0, #0]
 800d37c:	6800      	ldr	r0, [r0, #0]
 800d37e:	f380 8808 	msr	MSP, r0
 800d382:	f04f 0000 	mov.w	r0, #0
 800d386:	f380 8814 	msr	CONTROL, r0
 800d38a:	b662      	cpsie	i
 800d38c:	b661      	cpsie	f
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	df00      	svc	0
 800d398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d39a:	bf00      	nop
 800d39c:	e000ed08 	.word	0xe000ed08

0800d3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d3a6:	4b46      	ldr	r3, [pc, #280]	; (800d4c0 <xPortStartScheduler+0x120>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a46      	ldr	r2, [pc, #280]	; (800d4c4 <xPortStartScheduler+0x124>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d10a      	bne.n	800d3c6 <xPortStartScheduler+0x26>
	__asm volatile
 800d3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	613b      	str	r3, [r7, #16]
}
 800d3c2:	bf00      	nop
 800d3c4:	e7fe      	b.n	800d3c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d3c6:	4b3e      	ldr	r3, [pc, #248]	; (800d4c0 <xPortStartScheduler+0x120>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a3f      	ldr	r2, [pc, #252]	; (800d4c8 <xPortStartScheduler+0x128>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d10a      	bne.n	800d3e6 <xPortStartScheduler+0x46>
	__asm volatile
 800d3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	60fb      	str	r3, [r7, #12]
}
 800d3e2:	bf00      	nop
 800d3e4:	e7fe      	b.n	800d3e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d3e6:	4b39      	ldr	r3, [pc, #228]	; (800d4cc <xPortStartScheduler+0x12c>)
 800d3e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	22ff      	movs	r2, #255	; 0xff
 800d3f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d400:	78fb      	ldrb	r3, [r7, #3]
 800d402:	b2db      	uxtb	r3, r3
 800d404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d408:	b2da      	uxtb	r2, r3
 800d40a:	4b31      	ldr	r3, [pc, #196]	; (800d4d0 <xPortStartScheduler+0x130>)
 800d40c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d40e:	4b31      	ldr	r3, [pc, #196]	; (800d4d4 <xPortStartScheduler+0x134>)
 800d410:	2207      	movs	r2, #7
 800d412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d414:	e009      	b.n	800d42a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d416:	4b2f      	ldr	r3, [pc, #188]	; (800d4d4 <xPortStartScheduler+0x134>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3b01      	subs	r3, #1
 800d41c:	4a2d      	ldr	r2, [pc, #180]	; (800d4d4 <xPortStartScheduler+0x134>)
 800d41e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d420:	78fb      	ldrb	r3, [r7, #3]
 800d422:	b2db      	uxtb	r3, r3
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	b2db      	uxtb	r3, r3
 800d428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d42a:	78fb      	ldrb	r3, [r7, #3]
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d432:	2b80      	cmp	r3, #128	; 0x80
 800d434:	d0ef      	beq.n	800d416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d436:	4b27      	ldr	r3, [pc, #156]	; (800d4d4 <xPortStartScheduler+0x134>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f1c3 0307 	rsb	r3, r3, #7
 800d43e:	2b04      	cmp	r3, #4
 800d440:	d00a      	beq.n	800d458 <xPortStartScheduler+0xb8>
	__asm volatile
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	60bb      	str	r3, [r7, #8]
}
 800d454:	bf00      	nop
 800d456:	e7fe      	b.n	800d456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d458:	4b1e      	ldr	r3, [pc, #120]	; (800d4d4 <xPortStartScheduler+0x134>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	021b      	lsls	r3, r3, #8
 800d45e:	4a1d      	ldr	r2, [pc, #116]	; (800d4d4 <xPortStartScheduler+0x134>)
 800d460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d462:	4b1c      	ldr	r3, [pc, #112]	; (800d4d4 <xPortStartScheduler+0x134>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d46a:	4a1a      	ldr	r2, [pc, #104]	; (800d4d4 <xPortStartScheduler+0x134>)
 800d46c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	b2da      	uxtb	r2, r3
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d476:	4b18      	ldr	r3, [pc, #96]	; (800d4d8 <xPortStartScheduler+0x138>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a17      	ldr	r2, [pc, #92]	; (800d4d8 <xPortStartScheduler+0x138>)
 800d47c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d482:	4b15      	ldr	r3, [pc, #84]	; (800d4d8 <xPortStartScheduler+0x138>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a14      	ldr	r2, [pc, #80]	; (800d4d8 <xPortStartScheduler+0x138>)
 800d488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d48c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d48e:	f000 f8dd 	bl	800d64c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d492:	4b12      	ldr	r3, [pc, #72]	; (800d4dc <xPortStartScheduler+0x13c>)
 800d494:	2200      	movs	r2, #0
 800d496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d498:	f000 f8fc 	bl	800d694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d49c:	4b10      	ldr	r3, [pc, #64]	; (800d4e0 <xPortStartScheduler+0x140>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a0f      	ldr	r2, [pc, #60]	; (800d4e0 <xPortStartScheduler+0x140>)
 800d4a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d4a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d4a8:	f7ff ff66 	bl	800d378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d4ac:	f7ff f852 	bl	800c554 <vTaskSwitchContext>
	prvTaskExitError();
 800d4b0:	f7ff ff1e 	bl	800d2f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	e000ed00 	.word	0xe000ed00
 800d4c4:	410fc271 	.word	0x410fc271
 800d4c8:	410fc270 	.word	0x410fc270
 800d4cc:	e000e400 	.word	0xe000e400
 800d4d0:	20001a78 	.word	0x20001a78
 800d4d4:	20001a7c 	.word	0x20001a7c
 800d4d8:	e000ed20 	.word	0xe000ed20
 800d4dc:	200000c8 	.word	0x200000c8
 800d4e0:	e000ef34 	.word	0xe000ef34

0800d4e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
	__asm volatile
 800d4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ee:	f383 8811 	msr	BASEPRI, r3
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	f3bf 8f4f 	dsb	sy
 800d4fa:	607b      	str	r3, [r7, #4]
}
 800d4fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d4fe:	4b0f      	ldr	r3, [pc, #60]	; (800d53c <vPortEnterCritical+0x58>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	3301      	adds	r3, #1
 800d504:	4a0d      	ldr	r2, [pc, #52]	; (800d53c <vPortEnterCritical+0x58>)
 800d506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d508:	4b0c      	ldr	r3, [pc, #48]	; (800d53c <vPortEnterCritical+0x58>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d10f      	bne.n	800d530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d510:	4b0b      	ldr	r3, [pc, #44]	; (800d540 <vPortEnterCritical+0x5c>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	b2db      	uxtb	r3, r3
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00a      	beq.n	800d530 <vPortEnterCritical+0x4c>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	603b      	str	r3, [r7, #0]
}
 800d52c:	bf00      	nop
 800d52e:	e7fe      	b.n	800d52e <vPortEnterCritical+0x4a>
	}
}
 800d530:	bf00      	nop
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	200000c8 	.word	0x200000c8
 800d540:	e000ed04 	.word	0xe000ed04

0800d544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d54a:	4b12      	ldr	r3, [pc, #72]	; (800d594 <vPortExitCritical+0x50>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d10a      	bne.n	800d568 <vPortExitCritical+0x24>
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	607b      	str	r3, [r7, #4]
}
 800d564:	bf00      	nop
 800d566:	e7fe      	b.n	800d566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d568:	4b0a      	ldr	r3, [pc, #40]	; (800d594 <vPortExitCritical+0x50>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	3b01      	subs	r3, #1
 800d56e:	4a09      	ldr	r2, [pc, #36]	; (800d594 <vPortExitCritical+0x50>)
 800d570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d572:	4b08      	ldr	r3, [pc, #32]	; (800d594 <vPortExitCritical+0x50>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d105      	bne.n	800d586 <vPortExitCritical+0x42>
 800d57a:	2300      	movs	r3, #0
 800d57c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	f383 8811 	msr	BASEPRI, r3
}
 800d584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d586:	bf00      	nop
 800d588:	370c      	adds	r7, #12
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	200000c8 	.word	0x200000c8
	...

0800d5a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d5a0:	f3ef 8009 	mrs	r0, PSP
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	4b15      	ldr	r3, [pc, #84]	; (800d600 <pxCurrentTCBConst>)
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	f01e 0f10 	tst.w	lr, #16
 800d5b0:	bf08      	it	eq
 800d5b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d5b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ba:	6010      	str	r0, [r2, #0]
 800d5bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d5c4:	f380 8811 	msr	BASEPRI, r0
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f7fe ffc0 	bl	800c554 <vTaskSwitchContext>
 800d5d4:	f04f 0000 	mov.w	r0, #0
 800d5d8:	f380 8811 	msr	BASEPRI, r0
 800d5dc:	bc09      	pop	{r0, r3}
 800d5de:	6819      	ldr	r1, [r3, #0]
 800d5e0:	6808      	ldr	r0, [r1, #0]
 800d5e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e6:	f01e 0f10 	tst.w	lr, #16
 800d5ea:	bf08      	it	eq
 800d5ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d5f0:	f380 8809 	msr	PSP, r0
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	4770      	bx	lr
 800d5fa:	bf00      	nop
 800d5fc:	f3af 8000 	nop.w

0800d600 <pxCurrentTCBConst>:
 800d600:	2000144c 	.word	0x2000144c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d604:	bf00      	nop
 800d606:	bf00      	nop

0800d608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	607b      	str	r3, [r7, #4]
}
 800d620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d622:	f7fe fedd 	bl	800c3e0 <xTaskIncrementTick>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d003      	beq.n	800d634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d62c:	4b06      	ldr	r3, [pc, #24]	; (800d648 <xPortSysTickHandler+0x40>)
 800d62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	2300      	movs	r3, #0
 800d636:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	f383 8811 	msr	BASEPRI, r3
}
 800d63e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d640:	bf00      	nop
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	e000ed04 	.word	0xe000ed04

0800d64c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d64c:	b480      	push	{r7}
 800d64e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d650:	4b0b      	ldr	r3, [pc, #44]	; (800d680 <vPortSetupTimerInterrupt+0x34>)
 800d652:	2200      	movs	r2, #0
 800d654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d656:	4b0b      	ldr	r3, [pc, #44]	; (800d684 <vPortSetupTimerInterrupt+0x38>)
 800d658:	2200      	movs	r2, #0
 800d65a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d65c:	4b0a      	ldr	r3, [pc, #40]	; (800d688 <vPortSetupTimerInterrupt+0x3c>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a0a      	ldr	r2, [pc, #40]	; (800d68c <vPortSetupTimerInterrupt+0x40>)
 800d662:	fba2 2303 	umull	r2, r3, r2, r3
 800d666:	099b      	lsrs	r3, r3, #6
 800d668:	4a09      	ldr	r2, [pc, #36]	; (800d690 <vPortSetupTimerInterrupt+0x44>)
 800d66a:	3b01      	subs	r3, #1
 800d66c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d66e:	4b04      	ldr	r3, [pc, #16]	; (800d680 <vPortSetupTimerInterrupt+0x34>)
 800d670:	2207      	movs	r2, #7
 800d672:	601a      	str	r2, [r3, #0]
}
 800d674:	bf00      	nop
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	e000e010 	.word	0xe000e010
 800d684:	e000e018 	.word	0xe000e018
 800d688:	20000004 	.word	0x20000004
 800d68c:	10624dd3 	.word	0x10624dd3
 800d690:	e000e014 	.word	0xe000e014

0800d694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d6a4 <vPortEnableVFP+0x10>
 800d698:	6801      	ldr	r1, [r0, #0]
 800d69a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d69e:	6001      	str	r1, [r0, #0]
 800d6a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d6a2:	bf00      	nop
 800d6a4:	e000ed88 	.word	0xe000ed88

0800d6a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d6ae:	f3ef 8305 	mrs	r3, IPSR
 800d6b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2b0f      	cmp	r3, #15
 800d6b8:	d914      	bls.n	800d6e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6ba:	4a17      	ldr	r2, [pc, #92]	; (800d718 <vPortValidateInterruptPriority+0x70>)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	4413      	add	r3, r2
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6c4:	4b15      	ldr	r3, [pc, #84]	; (800d71c <vPortValidateInterruptPriority+0x74>)
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	7afa      	ldrb	r2, [r7, #11]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d20a      	bcs.n	800d6e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d2:	f383 8811 	msr	BASEPRI, r3
 800d6d6:	f3bf 8f6f 	isb	sy
 800d6da:	f3bf 8f4f 	dsb	sy
 800d6de:	607b      	str	r3, [r7, #4]
}
 800d6e0:	bf00      	nop
 800d6e2:	e7fe      	b.n	800d6e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d6e4:	4b0e      	ldr	r3, [pc, #56]	; (800d720 <vPortValidateInterruptPriority+0x78>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d6ec:	4b0d      	ldr	r3, [pc, #52]	; (800d724 <vPortValidateInterruptPriority+0x7c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d90a      	bls.n	800d70a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	603b      	str	r3, [r7, #0]
}
 800d706:	bf00      	nop
 800d708:	e7fe      	b.n	800d708 <vPortValidateInterruptPriority+0x60>
	}
 800d70a:	bf00      	nop
 800d70c:	3714      	adds	r7, #20
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	e000e3f0 	.word	0xe000e3f0
 800d71c:	20001a78 	.word	0x20001a78
 800d720:	e000ed0c 	.word	0xe000ed0c
 800d724:	20001a7c 	.word	0x20001a7c

0800d728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b08a      	sub	sp, #40	; 0x28
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d730:	2300      	movs	r3, #0
 800d732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d734:	f7fe fd98 	bl	800c268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d738:	4b5b      	ldr	r3, [pc, #364]	; (800d8a8 <pvPortMalloc+0x180>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d101      	bne.n	800d744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d740:	f000 f920 	bl	800d984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d744:	4b59      	ldr	r3, [pc, #356]	; (800d8ac <pvPortMalloc+0x184>)
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4013      	ands	r3, r2
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f040 8093 	bne.w	800d878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d01d      	beq.n	800d794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d758:	2208      	movs	r2, #8
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4413      	add	r3, r2
 800d75e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f003 0307 	and.w	r3, r3, #7
 800d766:	2b00      	cmp	r3, #0
 800d768:	d014      	beq.n	800d794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f023 0307 	bic.w	r3, r3, #7
 800d770:	3308      	adds	r3, #8
 800d772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f003 0307 	and.w	r3, r3, #7
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00a      	beq.n	800d794 <pvPortMalloc+0x6c>
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	617b      	str	r3, [r7, #20]
}
 800d790:	bf00      	nop
 800d792:	e7fe      	b.n	800d792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d06e      	beq.n	800d878 <pvPortMalloc+0x150>
 800d79a:	4b45      	ldr	r3, [pc, #276]	; (800d8b0 <pvPortMalloc+0x188>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d869      	bhi.n	800d878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d7a4:	4b43      	ldr	r3, [pc, #268]	; (800d8b4 <pvPortMalloc+0x18c>)
 800d7a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d7a8:	4b42      	ldr	r3, [pc, #264]	; (800d8b4 <pvPortMalloc+0x18c>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7ae:	e004      	b.n	800d7ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d903      	bls.n	800d7cc <pvPortMalloc+0xa4>
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1f1      	bne.n	800d7b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7cc:	4b36      	ldr	r3, [pc, #216]	; (800d8a8 <pvPortMalloc+0x180>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d050      	beq.n	800d878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7d6:	6a3b      	ldr	r3, [r7, #32]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2208      	movs	r2, #8
 800d7dc:	4413      	add	r3, r2
 800d7de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	6a3b      	ldr	r3, [r7, #32]
 800d7e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	685a      	ldr	r2, [r3, #4]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	1ad2      	subs	r2, r2, r3
 800d7f0:	2308      	movs	r3, #8
 800d7f2:	005b      	lsls	r3, r3, #1
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d91f      	bls.n	800d838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	f003 0307 	and.w	r3, r3, #7
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00a      	beq.n	800d820 <pvPortMalloc+0xf8>
	__asm volatile
 800d80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80e:	f383 8811 	msr	BASEPRI, r3
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	f3bf 8f4f 	dsb	sy
 800d81a:	613b      	str	r3, [r7, #16]
}
 800d81c:	bf00      	nop
 800d81e:	e7fe      	b.n	800d81e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d822:	685a      	ldr	r2, [r3, #4]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	1ad2      	subs	r2, r2, r3
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d832:	69b8      	ldr	r0, [r7, #24]
 800d834:	f000 f908 	bl	800da48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d838:	4b1d      	ldr	r3, [pc, #116]	; (800d8b0 <pvPortMalloc+0x188>)
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	1ad3      	subs	r3, r2, r3
 800d842:	4a1b      	ldr	r2, [pc, #108]	; (800d8b0 <pvPortMalloc+0x188>)
 800d844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d846:	4b1a      	ldr	r3, [pc, #104]	; (800d8b0 <pvPortMalloc+0x188>)
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	4b1b      	ldr	r3, [pc, #108]	; (800d8b8 <pvPortMalloc+0x190>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d203      	bcs.n	800d85a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d852:	4b17      	ldr	r3, [pc, #92]	; (800d8b0 <pvPortMalloc+0x188>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a18      	ldr	r2, [pc, #96]	; (800d8b8 <pvPortMalloc+0x190>)
 800d858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85c:	685a      	ldr	r2, [r3, #4]
 800d85e:	4b13      	ldr	r3, [pc, #76]	; (800d8ac <pvPortMalloc+0x184>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	431a      	orrs	r2, r3
 800d864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86a:	2200      	movs	r2, #0
 800d86c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d86e:	4b13      	ldr	r3, [pc, #76]	; (800d8bc <pvPortMalloc+0x194>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3301      	adds	r3, #1
 800d874:	4a11      	ldr	r2, [pc, #68]	; (800d8bc <pvPortMalloc+0x194>)
 800d876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d878:	f7fe fd04 	bl	800c284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	f003 0307 	and.w	r3, r3, #7
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00a      	beq.n	800d89c <pvPortMalloc+0x174>
	__asm volatile
 800d886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	60fb      	str	r3, [r7, #12]
}
 800d898:	bf00      	nop
 800d89a:	e7fe      	b.n	800d89a <pvPortMalloc+0x172>
	return pvReturn;
 800d89c:	69fb      	ldr	r3, [r7, #28]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3728      	adds	r7, #40	; 0x28
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	20005688 	.word	0x20005688
 800d8ac:	2000569c 	.word	0x2000569c
 800d8b0:	2000568c 	.word	0x2000568c
 800d8b4:	20005680 	.word	0x20005680
 800d8b8:	20005690 	.word	0x20005690
 800d8bc:	20005694 	.word	0x20005694

0800d8c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d04d      	beq.n	800d96e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8d2:	2308      	movs	r3, #8
 800d8d4:	425b      	negs	r3, r3
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	4413      	add	r3, r2
 800d8da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	685a      	ldr	r2, [r3, #4]
 800d8e4:	4b24      	ldr	r3, [pc, #144]	; (800d978 <vPortFree+0xb8>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10a      	bne.n	800d904 <vPortFree+0x44>
	__asm volatile
 800d8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f2:	f383 8811 	msr	BASEPRI, r3
 800d8f6:	f3bf 8f6f 	isb	sy
 800d8fa:	f3bf 8f4f 	dsb	sy
 800d8fe:	60fb      	str	r3, [r7, #12]
}
 800d900:	bf00      	nop
 800d902:	e7fe      	b.n	800d902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d00a      	beq.n	800d922 <vPortFree+0x62>
	__asm volatile
 800d90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d910:	f383 8811 	msr	BASEPRI, r3
 800d914:	f3bf 8f6f 	isb	sy
 800d918:	f3bf 8f4f 	dsb	sy
 800d91c:	60bb      	str	r3, [r7, #8]
}
 800d91e:	bf00      	nop
 800d920:	e7fe      	b.n	800d920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	685a      	ldr	r2, [r3, #4]
 800d926:	4b14      	ldr	r3, [pc, #80]	; (800d978 <vPortFree+0xb8>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4013      	ands	r3, r2
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d01e      	beq.n	800d96e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d11a      	bne.n	800d96e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	685a      	ldr	r2, [r3, #4]
 800d93c:	4b0e      	ldr	r3, [pc, #56]	; (800d978 <vPortFree+0xb8>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	43db      	mvns	r3, r3
 800d942:	401a      	ands	r2, r3
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d948:	f7fe fc8e 	bl	800c268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	685a      	ldr	r2, [r3, #4]
 800d950:	4b0a      	ldr	r3, [pc, #40]	; (800d97c <vPortFree+0xbc>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4413      	add	r3, r2
 800d956:	4a09      	ldr	r2, [pc, #36]	; (800d97c <vPortFree+0xbc>)
 800d958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d95a:	6938      	ldr	r0, [r7, #16]
 800d95c:	f000 f874 	bl	800da48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d960:	4b07      	ldr	r3, [pc, #28]	; (800d980 <vPortFree+0xc0>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3301      	adds	r3, #1
 800d966:	4a06      	ldr	r2, [pc, #24]	; (800d980 <vPortFree+0xc0>)
 800d968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d96a:	f7fe fc8b 	bl	800c284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d96e:	bf00      	nop
 800d970:	3718      	adds	r7, #24
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	2000569c 	.word	0x2000569c
 800d97c:	2000568c 	.word	0x2000568c
 800d980:	20005698 	.word	0x20005698

0800d984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d98a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d98e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d990:	4b27      	ldr	r3, [pc, #156]	; (800da30 <prvHeapInit+0xac>)
 800d992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f003 0307 	and.w	r3, r3, #7
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00c      	beq.n	800d9b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	3307      	adds	r3, #7
 800d9a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f023 0307 	bic.w	r3, r3, #7
 800d9aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	1ad3      	subs	r3, r2, r3
 800d9b2:	4a1f      	ldr	r2, [pc, #124]	; (800da30 <prvHeapInit+0xac>)
 800d9b4:	4413      	add	r3, r2
 800d9b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9bc:	4a1d      	ldr	r2, [pc, #116]	; (800da34 <prvHeapInit+0xb0>)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9c2:	4b1c      	ldr	r3, [pc, #112]	; (800da34 <prvHeapInit+0xb0>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d9d0:	2208      	movs	r2, #8
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	1a9b      	subs	r3, r3, r2
 800d9d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f023 0307 	bic.w	r3, r3, #7
 800d9de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	4a15      	ldr	r2, [pc, #84]	; (800da38 <prvHeapInit+0xb4>)
 800d9e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9e6:	4b14      	ldr	r3, [pc, #80]	; (800da38 <prvHeapInit+0xb4>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9ee:	4b12      	ldr	r3, [pc, #72]	; (800da38 <prvHeapInit+0xb4>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	1ad2      	subs	r2, r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da04:	4b0c      	ldr	r3, [pc, #48]	; (800da38 <prvHeapInit+0xb4>)
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	4a0a      	ldr	r2, [pc, #40]	; (800da3c <prvHeapInit+0xb8>)
 800da12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	4a09      	ldr	r2, [pc, #36]	; (800da40 <prvHeapInit+0xbc>)
 800da1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da1c:	4b09      	ldr	r3, [pc, #36]	; (800da44 <prvHeapInit+0xc0>)
 800da1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da22:	601a      	str	r2, [r3, #0]
}
 800da24:	bf00      	nop
 800da26:	3714      	adds	r7, #20
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr
 800da30:	20001a80 	.word	0x20001a80
 800da34:	20005680 	.word	0x20005680
 800da38:	20005688 	.word	0x20005688
 800da3c:	20005690 	.word	0x20005690
 800da40:	2000568c 	.word	0x2000568c
 800da44:	2000569c 	.word	0x2000569c

0800da48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da50:	4b28      	ldr	r3, [pc, #160]	; (800daf4 <prvInsertBlockIntoFreeList+0xac>)
 800da52:	60fb      	str	r3, [r7, #12]
 800da54:	e002      	b.n	800da5c <prvInsertBlockIntoFreeList+0x14>
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	60fb      	str	r3, [r7, #12]
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	429a      	cmp	r2, r3
 800da64:	d8f7      	bhi.n	800da56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	4413      	add	r3, r2
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	429a      	cmp	r2, r3
 800da76:	d108      	bne.n	800da8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	441a      	add	r2, r3
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	68ba      	ldr	r2, [r7, #8]
 800da94:	441a      	add	r2, r3
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d118      	bne.n	800dad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	4b15      	ldr	r3, [pc, #84]	; (800daf8 <prvInsertBlockIntoFreeList+0xb0>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d00d      	beq.n	800dac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	441a      	add	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	601a      	str	r2, [r3, #0]
 800dac4:	e008      	b.n	800dad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dac6:	4b0c      	ldr	r3, [pc, #48]	; (800daf8 <prvInsertBlockIntoFreeList+0xb0>)
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	601a      	str	r2, [r3, #0]
 800dace:	e003      	b.n	800dad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d002      	beq.n	800dae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dae6:	bf00      	nop
 800dae8:	3714      	adds	r7, #20
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	20005680 	.word	0x20005680
 800daf8:	20005688 	.word	0x20005688

0800dafc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db00:	2201      	movs	r2, #1
 800db02:	4912      	ldr	r1, [pc, #72]	; (800db4c <MX_USB_DEVICE_Init+0x50>)
 800db04:	4812      	ldr	r0, [pc, #72]	; (800db50 <MX_USB_DEVICE_Init+0x54>)
 800db06:	f7fc f8eb 	bl	8009ce0 <USBD_Init>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d004      	beq.n	800db1a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800db10:	4b10      	ldr	r3, [pc, #64]	; (800db54 <MX_USB_DEVICE_Init+0x58>)
 800db12:	2201      	movs	r2, #1
 800db14:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800db16:	f7f4 fc7d 	bl	8002414 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800db1a:	490f      	ldr	r1, [pc, #60]	; (800db58 <MX_USB_DEVICE_Init+0x5c>)
 800db1c:	480c      	ldr	r0, [pc, #48]	; (800db50 <MX_USB_DEVICE_Init+0x54>)
 800db1e:	f7fc f90f 	bl	8009d40 <USBD_RegisterClass>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d004      	beq.n	800db32 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800db28:	4b0a      	ldr	r3, [pc, #40]	; (800db54 <MX_USB_DEVICE_Init+0x58>)
 800db2a:	2201      	movs	r2, #1
 800db2c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800db2e:	f7f4 fc71 	bl	8002414 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db32:	4807      	ldr	r0, [pc, #28]	; (800db50 <MX_USB_DEVICE_Init+0x54>)
 800db34:	f7fc f92b 	bl	8009d8e <USBD_Start>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d004      	beq.n	800db48 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800db3e:	4b05      	ldr	r3, [pc, #20]	; (800db54 <MX_USB_DEVICE_Init+0x58>)
 800db40:	2201      	movs	r2, #1
 800db42:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800db44:	f7f4 fc66 	bl	8002414 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db48:	bf00      	nop
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	200000cc 	.word	0x200000cc
 800db50:	2000576c 	.word	0x2000576c
 800db54:	200056a0 	.word	0x200056a0
 800db58:	20000018 	.word	0x20000018

0800db5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	4603      	mov	r3, r0
 800db64:	6039      	str	r1, [r7, #0]
 800db66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	2212      	movs	r2, #18
 800db6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800db6e:	4b03      	ldr	r3, [pc, #12]	; (800db7c <USBD_FS_DeviceDescriptor+0x20>)
}
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	200000e8 	.word	0x200000e8

0800db80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	6039      	str	r1, [r7, #0]
 800db8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	2204      	movs	r2, #4
 800db90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db92:	4b03      	ldr	r3, [pc, #12]	; (800dba0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800db94:	4618      	mov	r0, r3
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	200000fc 	.word	0x200000fc

0800dba4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	4603      	mov	r3, r0
 800dbac:	6039      	str	r1, [r7, #0]
 800dbae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d105      	bne.n	800dbc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbb6:	683a      	ldr	r2, [r7, #0]
 800dbb8:	4907      	ldr	r1, [pc, #28]	; (800dbd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dbba:	4808      	ldr	r0, [pc, #32]	; (800dbdc <USBD_FS_ProductStrDescriptor+0x38>)
 800dbbc:	f7fd f927 	bl	800ae0e <USBD_GetString>
 800dbc0:	e004      	b.n	800dbcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	4904      	ldr	r1, [pc, #16]	; (800dbd8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dbc6:	4805      	ldr	r0, [pc, #20]	; (800dbdc <USBD_FS_ProductStrDescriptor+0x38>)
 800dbc8:	f7fd f921 	bl	800ae0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbcc:	4b02      	ldr	r3, [pc, #8]	; (800dbd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	20005a3c 	.word	0x20005a3c
 800dbdc:	08015e50 	.word	0x08015e50

0800dbe0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	6039      	str	r1, [r7, #0]
 800dbea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dbec:	683a      	ldr	r2, [r7, #0]
 800dbee:	4904      	ldr	r1, [pc, #16]	; (800dc00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dbf0:	4804      	ldr	r0, [pc, #16]	; (800dc04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dbf2:	f7fd f90c 	bl	800ae0e <USBD_GetString>
  return USBD_StrDesc;
 800dbf6:	4b02      	ldr	r3, [pc, #8]	; (800dc00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	20005a3c 	.word	0x20005a3c
 800dc04:	08015e68 	.word	0x08015e68

0800dc08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	4603      	mov	r3, r0
 800dc10:	6039      	str	r1, [r7, #0]
 800dc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	221a      	movs	r2, #26
 800dc18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dc1a:	f000 f843 	bl	800dca4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dc1e:	4b02      	ldr	r3, [pc, #8]	; (800dc28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	20000100 	.word	0x20000100

0800dc2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	4603      	mov	r3, r0
 800dc34:	6039      	str	r1, [r7, #0]
 800dc36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d105      	bne.n	800dc4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	4907      	ldr	r1, [pc, #28]	; (800dc60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc42:	4808      	ldr	r0, [pc, #32]	; (800dc64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc44:	f7fd f8e3 	bl	800ae0e <USBD_GetString>
 800dc48:	e004      	b.n	800dc54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	4904      	ldr	r1, [pc, #16]	; (800dc60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dc4e:	4805      	ldr	r0, [pc, #20]	; (800dc64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dc50:	f7fd f8dd 	bl	800ae0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc54:	4b02      	ldr	r3, [pc, #8]	; (800dc60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	20005a3c 	.word	0x20005a3c
 800dc64:	08015e7c 	.word	0x08015e7c

0800dc68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	4603      	mov	r3, r0
 800dc70:	6039      	str	r1, [r7, #0]
 800dc72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc74:	79fb      	ldrb	r3, [r7, #7]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d105      	bne.n	800dc86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	4907      	ldr	r1, [pc, #28]	; (800dc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc7e:	4808      	ldr	r0, [pc, #32]	; (800dca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc80:	f7fd f8c5 	bl	800ae0e <USBD_GetString>
 800dc84:	e004      	b.n	800dc90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	4904      	ldr	r1, [pc, #16]	; (800dc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dc8a:	4805      	ldr	r0, [pc, #20]	; (800dca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dc8c:	f7fd f8bf 	bl	800ae0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc90:	4b02      	ldr	r3, [pc, #8]	; (800dc9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	20005a3c 	.word	0x20005a3c
 800dca0:	08015e88 	.word	0x08015e88

0800dca4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dcaa:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <Get_SerialNum+0x44>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dcb0:	4b0e      	ldr	r3, [pc, #56]	; (800dcec <Get_SerialNum+0x48>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dcb6:	4b0e      	ldr	r3, [pc, #56]	; (800dcf0 <Get_SerialNum+0x4c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d009      	beq.n	800dcde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dcca:	2208      	movs	r2, #8
 800dccc:	4909      	ldr	r1, [pc, #36]	; (800dcf4 <Get_SerialNum+0x50>)
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f000 f814 	bl	800dcfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dcd4:	2204      	movs	r2, #4
 800dcd6:	4908      	ldr	r1, [pc, #32]	; (800dcf8 <Get_SerialNum+0x54>)
 800dcd8:	68b8      	ldr	r0, [r7, #8]
 800dcda:	f000 f80f 	bl	800dcfc <IntToUnicode>
  }
}
 800dcde:	bf00      	nop
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	1fff7a10 	.word	0x1fff7a10
 800dcec:	1fff7a14 	.word	0x1fff7a14
 800dcf0:	1fff7a18 	.word	0x1fff7a18
 800dcf4:	20000102 	.word	0x20000102
 800dcf8:	20000112 	.word	0x20000112

0800dcfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b087      	sub	sp, #28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	4613      	mov	r3, r2
 800dd08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dd0e:	2300      	movs	r3, #0
 800dd10:	75fb      	strb	r3, [r7, #23]
 800dd12:	e027      	b.n	800dd64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	0f1b      	lsrs	r3, r3, #28
 800dd18:	2b09      	cmp	r3, #9
 800dd1a:	d80b      	bhi.n	800dd34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	0f1b      	lsrs	r3, r3, #28
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	7dfb      	ldrb	r3, [r7, #23]
 800dd24:	005b      	lsls	r3, r3, #1
 800dd26:	4619      	mov	r1, r3
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	440b      	add	r3, r1
 800dd2c:	3230      	adds	r2, #48	; 0x30
 800dd2e:	b2d2      	uxtb	r2, r2
 800dd30:	701a      	strb	r2, [r3, #0]
 800dd32:	e00a      	b.n	800dd4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	0f1b      	lsrs	r3, r3, #28
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	7dfb      	ldrb	r3, [r7, #23]
 800dd3c:	005b      	lsls	r3, r3, #1
 800dd3e:	4619      	mov	r1, r3
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	440b      	add	r3, r1
 800dd44:	3237      	adds	r2, #55	; 0x37
 800dd46:	b2d2      	uxtb	r2, r2
 800dd48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	011b      	lsls	r3, r3, #4
 800dd4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd50:	7dfb      	ldrb	r3, [r7, #23]
 800dd52:	005b      	lsls	r3, r3, #1
 800dd54:	3301      	adds	r3, #1
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	4413      	add	r3, r2
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
 800dd60:	3301      	adds	r3, #1
 800dd62:	75fb      	strb	r3, [r7, #23]
 800dd64:	7dfa      	ldrb	r2, [r7, #23]
 800dd66:	79fb      	ldrb	r3, [r7, #7]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d3d3      	bcc.n	800dd14 <IntToUnicode+0x18>
  }
}
 800dd6c:	bf00      	nop
 800dd6e:	bf00      	nop
 800dd70:	371c      	adds	r7, #28
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr
	...

0800dd7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b08a      	sub	sp, #40	; 0x28
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd84:	f107 0314 	add.w	r3, r7, #20
 800dd88:	2200      	movs	r2, #0
 800dd8a:	601a      	str	r2, [r3, #0]
 800dd8c:	605a      	str	r2, [r3, #4]
 800dd8e:	609a      	str	r2, [r3, #8]
 800dd90:	60da      	str	r2, [r3, #12]
 800dd92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd9c:	d13a      	bne.n	800de14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dd9e:	2300      	movs	r3, #0
 800dda0:	613b      	str	r3, [r7, #16]
 800dda2:	4b1e      	ldr	r3, [pc, #120]	; (800de1c <HAL_PCD_MspInit+0xa0>)
 800dda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dda6:	4a1d      	ldr	r2, [pc, #116]	; (800de1c <HAL_PCD_MspInit+0xa0>)
 800dda8:	f043 0301 	orr.w	r3, r3, #1
 800ddac:	6313      	str	r3, [r2, #48]	; 0x30
 800ddae:	4b1b      	ldr	r3, [pc, #108]	; (800de1c <HAL_PCD_MspInit+0xa0>)
 800ddb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddb2:	f003 0301 	and.w	r3, r3, #1
 800ddb6:	613b      	str	r3, [r7, #16]
 800ddb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ddba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ddbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ddcc:	230a      	movs	r3, #10
 800ddce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ddd0:	f107 0314 	add.w	r3, r7, #20
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	4812      	ldr	r0, [pc, #72]	; (800de20 <HAL_PCD_MspInit+0xa4>)
 800ddd8:	f7f5 faee 	bl	80033b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dddc:	4b0f      	ldr	r3, [pc, #60]	; (800de1c <HAL_PCD_MspInit+0xa0>)
 800ddde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde0:	4a0e      	ldr	r2, [pc, #56]	; (800de1c <HAL_PCD_MspInit+0xa0>)
 800dde2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dde6:	6353      	str	r3, [r2, #52]	; 0x34
 800dde8:	2300      	movs	r3, #0
 800ddea:	60fb      	str	r3, [r7, #12]
 800ddec:	4b0b      	ldr	r3, [pc, #44]	; (800de1c <HAL_PCD_MspInit+0xa0>)
 800ddee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddf0:	4a0a      	ldr	r2, [pc, #40]	; (800de1c <HAL_PCD_MspInit+0xa0>)
 800ddf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ddf6:	6453      	str	r3, [r2, #68]	; 0x44
 800ddf8:	4b08      	ldr	r3, [pc, #32]	; (800de1c <HAL_PCD_MspInit+0xa0>)
 800ddfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de00:	60fb      	str	r3, [r7, #12]
 800de02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800de04:	2200      	movs	r2, #0
 800de06:	2105      	movs	r1, #5
 800de08:	2043      	movs	r0, #67	; 0x43
 800de0a:	f7f4 ffc3 	bl	8002d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de0e:	2043      	movs	r0, #67	; 0x43
 800de10:	f7f4 ffdc 	bl	8002dcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de14:	bf00      	nop
 800de16:	3728      	adds	r7, #40	; 0x28
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	40023800 	.word	0x40023800
 800de20:	40020000 	.word	0x40020000

0800de24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800de38:	4619      	mov	r1, r3
 800de3a:	4610      	mov	r0, r2
 800de3c:	f7fb fff2 	bl	8009e24 <USBD_LL_SetupStage>
}
 800de40:	bf00      	nop
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800de5a:	78fa      	ldrb	r2, [r7, #3]
 800de5c:	6879      	ldr	r1, [r7, #4]
 800de5e:	4613      	mov	r3, r2
 800de60:	00db      	lsls	r3, r3, #3
 800de62:	1a9b      	subs	r3, r3, r2
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	440b      	add	r3, r1
 800de68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	78fb      	ldrb	r3, [r7, #3]
 800de70:	4619      	mov	r1, r3
 800de72:	f7fc f82c 	bl	8009ece <USBD_LL_DataOutStage>
}
 800de76:	bf00      	nop
 800de78:	3708      	adds	r7, #8
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b082      	sub	sp, #8
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
 800de86:	460b      	mov	r3, r1
 800de88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800de90:	78fa      	ldrb	r2, [r7, #3]
 800de92:	6879      	ldr	r1, [r7, #4]
 800de94:	4613      	mov	r3, r2
 800de96:	00db      	lsls	r3, r3, #3
 800de98:	1a9b      	subs	r3, r3, r2
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	440b      	add	r3, r1
 800de9e:	3348      	adds	r3, #72	; 0x48
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	78fb      	ldrb	r3, [r7, #3]
 800dea4:	4619      	mov	r1, r3
 800dea6:	f7fc f875 	bl	8009f94 <USBD_LL_DataInStage>
}
 800deaa:	bf00      	nop
 800deac:	3708      	adds	r7, #8
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b082      	sub	sp, #8
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7fc f989 	bl	800a1d8 <USBD_LL_SOF>
}
 800dec6:	bf00      	nop
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b084      	sub	sp, #16
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ded6:	2301      	movs	r3, #1
 800ded8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d102      	bne.n	800dee8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dee2:	2300      	movs	r3, #0
 800dee4:	73fb      	strb	r3, [r7, #15]
 800dee6:	e008      	b.n	800defa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	2b02      	cmp	r3, #2
 800deee:	d102      	bne.n	800def6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800def0:	2301      	movs	r3, #1
 800def2:	73fb      	strb	r3, [r7, #15]
 800def4:	e001      	b.n	800defa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800def6:	f7f4 fa8d 	bl	8002414 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df00:	7bfa      	ldrb	r2, [r7, #15]
 800df02:	4611      	mov	r1, r2
 800df04:	4618      	mov	r0, r3
 800df06:	f7fc f929 	bl	800a15c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df10:	4618      	mov	r0, r3
 800df12:	f7fc f8d5 	bl	800a0c0 <USBD_LL_Reset>
}
 800df16:	bf00      	nop
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
	...

0800df20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fc f924 	bl	800a17c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	6812      	ldr	r2, [r2, #0]
 800df42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df46:	f043 0301 	orr.w	r3, r3, #1
 800df4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6a1b      	ldr	r3, [r3, #32]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d005      	beq.n	800df60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df54:	4b04      	ldr	r3, [pc, #16]	; (800df68 <HAL_PCD_SuspendCallback+0x48>)
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	4a03      	ldr	r2, [pc, #12]	; (800df68 <HAL_PCD_SuspendCallback+0x48>)
 800df5a:	f043 0306 	orr.w	r3, r3, #6
 800df5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800df60:	bf00      	nop
 800df62:	3708      	adds	r7, #8
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	e000ed00 	.word	0xe000ed00

0800df6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fc f914 	bl	800a1a8 <USBD_LL_Resume>
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	460b      	mov	r3, r1
 800df92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df9a:	78fa      	ldrb	r2, [r7, #3]
 800df9c:	4611      	mov	r1, r2
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fc f962 	bl	800a268 <USBD_LL_IsoOUTIncomplete>
}
 800dfa4:	bf00      	nop
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dfbe:	78fa      	ldrb	r2, [r7, #3]
 800dfc0:	4611      	mov	r1, r2
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fc f92a 	bl	800a21c <USBD_LL_IsoINIncomplete>
}
 800dfc8:	bf00      	nop
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fc f968 	bl	800a2b4 <USBD_LL_DevConnected>
}
 800dfe4:	bf00      	nop
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fc f965 	bl	800a2ca <USBD_LL_DevDisconnected>
}
 800e000:	bf00      	nop
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	2b01      	cmp	r3, #1
 800e016:	d13c      	bne.n	800e092 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e018:	4a20      	ldr	r2, [pc, #128]	; (800e09c <USBD_LL_Init+0x94>)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	4a1e      	ldr	r2, [pc, #120]	; (800e09c <USBD_LL_Init+0x94>)
 800e024:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e028:	4b1c      	ldr	r3, [pc, #112]	; (800e09c <USBD_LL_Init+0x94>)
 800e02a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e02e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e030:	4b1a      	ldr	r3, [pc, #104]	; (800e09c <USBD_LL_Init+0x94>)
 800e032:	2206      	movs	r2, #6
 800e034:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e036:	4b19      	ldr	r3, [pc, #100]	; (800e09c <USBD_LL_Init+0x94>)
 800e038:	2202      	movs	r2, #2
 800e03a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e03c:	4b17      	ldr	r3, [pc, #92]	; (800e09c <USBD_LL_Init+0x94>)
 800e03e:	2200      	movs	r2, #0
 800e040:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e042:	4b16      	ldr	r3, [pc, #88]	; (800e09c <USBD_LL_Init+0x94>)
 800e044:	2202      	movs	r2, #2
 800e046:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e048:	4b14      	ldr	r3, [pc, #80]	; (800e09c <USBD_LL_Init+0x94>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e04e:	4b13      	ldr	r3, [pc, #76]	; (800e09c <USBD_LL_Init+0x94>)
 800e050:	2200      	movs	r2, #0
 800e052:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e054:	4b11      	ldr	r3, [pc, #68]	; (800e09c <USBD_LL_Init+0x94>)
 800e056:	2200      	movs	r2, #0
 800e058:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e05a:	4b10      	ldr	r3, [pc, #64]	; (800e09c <USBD_LL_Init+0x94>)
 800e05c:	2200      	movs	r2, #0
 800e05e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e060:	4b0e      	ldr	r3, [pc, #56]	; (800e09c <USBD_LL_Init+0x94>)
 800e062:	2200      	movs	r2, #0
 800e064:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e066:	480d      	ldr	r0, [pc, #52]	; (800e09c <USBD_LL_Init+0x94>)
 800e068:	f7f5 ffc7 	bl	8003ffa <HAL_PCD_Init>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d001      	beq.n	800e076 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e072:	f7f4 f9cf 	bl	8002414 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e076:	2180      	movs	r1, #128	; 0x80
 800e078:	4808      	ldr	r0, [pc, #32]	; (800e09c <USBD_LL_Init+0x94>)
 800e07a:	f7f7 f940 	bl	80052fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e07e:	2240      	movs	r2, #64	; 0x40
 800e080:	2100      	movs	r1, #0
 800e082:	4806      	ldr	r0, [pc, #24]	; (800e09c <USBD_LL_Init+0x94>)
 800e084:	f7f7 f8f4 	bl	8005270 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e088:	2280      	movs	r2, #128	; 0x80
 800e08a:	2101      	movs	r1, #1
 800e08c:	4803      	ldr	r0, [pc, #12]	; (800e09c <USBD_LL_Init+0x94>)
 800e08e:	f7f7 f8ef 	bl	8005270 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	20005c3c 	.word	0x20005c3c

0800e0a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7f6 f8c3 	bl	8004242 <HAL_PCD_Start>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0c0:	7bfb      	ldrb	r3, [r7, #15]
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f000 f97e 	bl	800e3c4 <USBD_Get_USB_Status>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b084      	sub	sp, #16
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
 800e0de:	4608      	mov	r0, r1
 800e0e0:	4611      	mov	r1, r2
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	70fb      	strb	r3, [r7, #3]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	70bb      	strb	r3, [r7, #2]
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e0fe:	78bb      	ldrb	r3, [r7, #2]
 800e100:	883a      	ldrh	r2, [r7, #0]
 800e102:	78f9      	ldrb	r1, [r7, #3]
 800e104:	f7f6 fcd4 	bl	8004ab0 <HAL_PCD_EP_Open>
 800e108:	4603      	mov	r3, r0
 800e10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 f958 	bl	800e3c4 <USBD_Get_USB_Status>
 800e114:	4603      	mov	r3, r0
 800e116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e118:	7bbb      	ldrb	r3, [r7, #14]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b084      	sub	sp, #16
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
 800e12a:	460b      	mov	r3, r1
 800e12c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e132:	2300      	movs	r3, #0
 800e134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e13c:	78fa      	ldrb	r2, [r7, #3]
 800e13e:	4611      	mov	r1, r2
 800e140:	4618      	mov	r0, r3
 800e142:	f7f6 fd1d 	bl	8004b80 <HAL_PCD_EP_Close>
 800e146:	4603      	mov	r3, r0
 800e148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f000 f939 	bl	800e3c4 <USBD_Get_USB_Status>
 800e152:	4603      	mov	r3, r0
 800e154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e156:	7bbb      	ldrb	r3, [r7, #14]
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	460b      	mov	r3, r1
 800e16a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e16c:	2300      	movs	r3, #0
 800e16e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e170:	2300      	movs	r3, #0
 800e172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e17a:	78fa      	ldrb	r2, [r7, #3]
 800e17c:	4611      	mov	r1, r2
 800e17e:	4618      	mov	r0, r3
 800e180:	f7f6 fddd 	bl	8004d3e <HAL_PCD_EP_SetStall>
 800e184:	4603      	mov	r3, r0
 800e186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e188:	7bfb      	ldrb	r3, [r7, #15]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f000 f91a 	bl	800e3c4 <USBD_Get_USB_Status>
 800e190:	4603      	mov	r3, r0
 800e192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e194:	7bbb      	ldrb	r3, [r7, #14]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b084      	sub	sp, #16
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1b8:	78fa      	ldrb	r2, [r7, #3]
 800e1ba:	4611      	mov	r1, r2
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7f6 fe22 	bl	8004e06 <HAL_PCD_EP_ClrStall>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1c6:	7bfb      	ldrb	r3, [r7, #15]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f000 f8fb 	bl	800e3c4 <USBD_Get_USB_Status>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3710      	adds	r7, #16
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b085      	sub	sp, #20
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e1f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	da0b      	bge.n	800e210 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e1f8:	78fb      	ldrb	r3, [r7, #3]
 800e1fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1fe:	68f9      	ldr	r1, [r7, #12]
 800e200:	4613      	mov	r3, r2
 800e202:	00db      	lsls	r3, r3, #3
 800e204:	1a9b      	subs	r3, r3, r2
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	440b      	add	r3, r1
 800e20a:	333e      	adds	r3, #62	; 0x3e
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	e00b      	b.n	800e228 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e210:	78fb      	ldrb	r3, [r7, #3]
 800e212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e216:	68f9      	ldr	r1, [r7, #12]
 800e218:	4613      	mov	r3, r2
 800e21a:	00db      	lsls	r3, r3, #3
 800e21c:	1a9b      	subs	r3, r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	440b      	add	r3, r1
 800e222:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e226:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3714      	adds	r7, #20
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	460b      	mov	r3, r1
 800e23e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e24e:	78fa      	ldrb	r2, [r7, #3]
 800e250:	4611      	mov	r1, r2
 800e252:	4618      	mov	r0, r3
 800e254:	f7f6 fc07 	bl	8004a66 <HAL_PCD_SetAddress>
 800e258:	4603      	mov	r3, r0
 800e25a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e25c:	7bfb      	ldrb	r3, [r7, #15]
 800e25e:	4618      	mov	r0, r3
 800e260:	f000 f8b0 	bl	800e3c4 <USBD_Get_USB_Status>
 800e264:	4603      	mov	r3, r0
 800e266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e268:	7bbb      	ldrb	r3, [r7, #14]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e272:	b580      	push	{r7, lr}
 800e274:	b086      	sub	sp, #24
 800e276:	af00      	add	r7, sp, #0
 800e278:	60f8      	str	r0, [r7, #12]
 800e27a:	607a      	str	r2, [r7, #4]
 800e27c:	603b      	str	r3, [r7, #0]
 800e27e:	460b      	mov	r3, r1
 800e280:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e282:	2300      	movs	r3, #0
 800e284:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e286:	2300      	movs	r3, #0
 800e288:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e290:	7af9      	ldrb	r1, [r7, #11]
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	f7f6 fd08 	bl	8004caa <HAL_PCD_EP_Transmit>
 800e29a:	4603      	mov	r3, r0
 800e29c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e29e:	7dfb      	ldrb	r3, [r7, #23]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f000 f88f 	bl	800e3c4 <USBD_Get_USB_Status>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3718      	adds	r7, #24
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	607a      	str	r2, [r7, #4]
 800e2be:	603b      	str	r3, [r7, #0]
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e2d2:	7af9      	ldrb	r1, [r7, #11]
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	f7f6 fc9c 	bl	8004c14 <HAL_PCD_EP_Receive>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2e0:	7dfb      	ldrb	r3, [r7, #23]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f000 f86e 	bl	800e3c4 <USBD_Get_USB_Status>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3718      	adds	r7, #24
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
	...

0800e2f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	460b      	mov	r3, r1
 800e302:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e304:	78fb      	ldrb	r3, [r7, #3]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d002      	beq.n	800e310 <HAL_PCDEx_LPM_Callback+0x18>
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d01f      	beq.n	800e34e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e30e:	e03b      	b.n	800e388 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6a1b      	ldr	r3, [r3, #32]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d007      	beq.n	800e328 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800e318:	f7f2 fee2 	bl	80010e0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e31c:	4b1c      	ldr	r3, [pc, #112]	; (800e390 <HAL_PCDEx_LPM_Callback+0x98>)
 800e31e:	691b      	ldr	r3, [r3, #16]
 800e320:	4a1b      	ldr	r2, [pc, #108]	; (800e390 <HAL_PCDEx_LPM_Callback+0x98>)
 800e322:	f023 0306 	bic.w	r3, r3, #6
 800e326:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	6812      	ldr	r2, [r2, #0]
 800e336:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e33a:	f023 0301 	bic.w	r3, r3, #1
 800e33e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e346:	4618      	mov	r0, r3
 800e348:	f7fb ff2e 	bl	800a1a8 <USBD_LL_Resume>
    break;
 800e34c:	e01c      	b.n	800e388 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	6812      	ldr	r2, [r2, #0]
 800e35c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e360:	f043 0301 	orr.w	r3, r3, #1
 800e364:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fb ff05 	bl	800a17c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a1b      	ldr	r3, [r3, #32]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d005      	beq.n	800e386 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e37a:	4b05      	ldr	r3, [pc, #20]	; (800e390 <HAL_PCDEx_LPM_Callback+0x98>)
 800e37c:	691b      	ldr	r3, [r3, #16]
 800e37e:	4a04      	ldr	r2, [pc, #16]	; (800e390 <HAL_PCDEx_LPM_Callback+0x98>)
 800e380:	f043 0306 	orr.w	r3, r3, #6
 800e384:	6113      	str	r3, [r2, #16]
    break;
 800e386:	bf00      	nop
}
 800e388:	bf00      	nop
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	e000ed00 	.word	0xe000ed00

0800e394 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e39c:	4b03      	ldr	r3, [pc, #12]	; (800e3ac <USBD_static_malloc+0x18>)
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	370c      	adds	r7, #12
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	200056a4 	.word	0x200056a4

0800e3b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b083      	sub	sp, #12
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]

}
 800e3b8:	bf00      	nop
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3d2:	79fb      	ldrb	r3, [r7, #7]
 800e3d4:	2b03      	cmp	r3, #3
 800e3d6:	d817      	bhi.n	800e408 <USBD_Get_USB_Status+0x44>
 800e3d8:	a201      	add	r2, pc, #4	; (adr r2, 800e3e0 <USBD_Get_USB_Status+0x1c>)
 800e3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3de:	bf00      	nop
 800e3e0:	0800e3f1 	.word	0x0800e3f1
 800e3e4:	0800e3f7 	.word	0x0800e3f7
 800e3e8:	0800e3fd 	.word	0x0800e3fd
 800e3ec:	0800e403 	.word	0x0800e403
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e3f4:	e00b      	b.n	800e40e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e3f6:	2303      	movs	r3, #3
 800e3f8:	73fb      	strb	r3, [r7, #15]
    break;
 800e3fa:	e008      	b.n	800e40e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e400:	e005      	b.n	800e40e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e402:	2303      	movs	r3, #3
 800e404:	73fb      	strb	r3, [r7, #15]
    break;
 800e406:	e002      	b.n	800e40e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e408:	2303      	movs	r3, #3
 800e40a:	73fb      	strb	r3, [r7, #15]
    break;
 800e40c:	bf00      	nop
  }
  return usb_status;
 800e40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e410:	4618      	mov	r0, r3
 800e412:	3714      	adds	r7, #20
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	4608      	mov	r0, r1
 800e426:	4611      	mov	r1, r2
 800e428:	461a      	mov	r2, r3
 800e42a:	4603      	mov	r3, r0
 800e42c:	70fb      	strb	r3, [r7, #3]
 800e42e:	460b      	mov	r3, r1
 800e430:	70bb      	strb	r3, [r7, #2]
 800e432:	4613      	mov	r3, r2
 800e434:	707b      	strb	r3, [r7, #1]
                return 0;
 800e436:	2300      	movs	r3, #0
        }
 800e438:	4618      	mov	r0, r3
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	4608      	mov	r0, r1
 800e44e:	4611      	mov	r1, r2
 800e450:	461a      	mov	r2, r3
 800e452:	4603      	mov	r3, r0
 800e454:	70fb      	strb	r3, [r7, #3]
 800e456:	460b      	mov	r3, r1
 800e458:	70bb      	strb	r3, [r7, #2]
 800e45a:	4613      	mov	r3, r2
 800e45c:	707b      	strb	r3, [r7, #1]
                return 0;
 800e45e:	2300      	movs	r3, #0
        }
 800e460:	4618      	mov	r0, r3
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
                return 0;
 800e474:	2300      	movs	r3, #0
        }
 800e476:	4618      	mov	r0, r3
 800e478:	370c      	adds	r7, #12
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr

0800e482 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800e482:	b480      	push	{r7}
 800e484:	b083      	sub	sp, #12
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
                return 0;
 800e48a:	2300      	movs	r3, #0
        }
 800e48c:	4618      	mov	r0, r3
 800e48e:	370c      	adds	r7, #12
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
                return 0;
 800e4a0:	2300      	movs	r3, #0
        }
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	370c      	adds	r7, #12
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800e4ae:	b480      	push	{r7}
 800e4b0:	b083      	sub	sp, #12
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	70fb      	strb	r3, [r7, #3]
                return;
 800e4ba:	bf00      	nop
        } // Note used for hubs only!
 800e4bc:	370c      	adds	r7, #12
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr

0800e4c6 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800e4c6:	b480      	push	{r7}
 800e4c8:	b083      	sub	sp, #12
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
 800e4ce:	460b      	mov	r3, r1
 800e4d0:	807b      	strh	r3, [r7, #2]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	803b      	strh	r3, [r7, #0]
                return false;
 800e4d6:	2300      	movs	r3, #0
        }
 800e4d8:	4618      	mov	r0, r3
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	70fb      	strb	r3, [r7, #3]
                return false;
 800e4f0:	2300      	movs	r3, #0
        }
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	370c      	adds	r7, #12
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr

0800e4fe <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800e4fe:	b480      	push	{r7}
 800e500:	b083      	sub	sp, #12
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
 800e506:	460b      	mov	r3, r1
 800e508:	70fb      	strb	r3, [r7, #3]
                return true;
 800e50a:	2301      	movs	r3, #1
        }
 800e50c:	4618      	mov	r0, r3
 800e50e:	370c      	adds	r7, #12
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800e520:	687b      	ldr	r3, [r7, #4]
        };
 800e522:	4618      	mov	r0, r3
 800e524:	370c      	adds	r7, #12
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr

0800e52e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800e52e:	b480      	push	{r7}
 800e530:	b085      	sub	sp, #20
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
 800e536:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800e538:	2300      	movs	r3, #0
 800e53a:	73fb      	strb	r3, [r7, #15]
 800e53c:	7bfb      	ldrb	r3, [r7, #15]
 800e53e:	2b0f      	cmp	r3, #15
 800e540:	d812      	bhi.n	800e568 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800e542:	7bfa      	ldrb	r2, [r7, #15]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	321e      	adds	r2, #30
 800e548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d107      	bne.n	800e560 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800e550:	7bfa      	ldrb	r2, [r7, #15]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	321e      	adds	r2, #30
 800e556:	6839      	ldr	r1, [r7, #0]
 800e558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	e004      	b.n	800e56a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800e560:	7bfb      	ldrb	r3, [r7, #15]
 800e562:	3301      	adds	r3, #1
 800e564:	73fb      	strb	r3, [r7, #15]
 800e566:	e7e9      	b.n	800e53c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800e568:	23d3      	movs	r3, #211	; 0xd3
        };
 800e56a:	4618      	mov	r0, r3
 800e56c:	3714      	adds	r7, #20
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr

0800e576 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800e576:	b480      	push	{r7}
 800e578:	b083      	sub	sp, #12
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	701a      	strb	r2, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	705a      	strb	r2, [r3, #1]
 800e58a:	2200      	movs	r2, #0
 800e58c:	709a      	strb	r2, [r3, #2]
 800e58e:	2200      	movs	r2, #0
 800e590:	70da      	strb	r2, [r3, #3]
 800e592:	2200      	movs	r2, #0
 800e594:	711a      	strb	r2, [r3, #4]
        };
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4618      	mov	r0, r3
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	601a      	str	r2, [r3, #0]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	711a      	strb	r2, [r3, #4]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	715a      	strb	r2, [r3, #5]
        };
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	781a      	ldrb	r2, [r3, #0]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	715a      	strb	r2, [r3, #5]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	795a      	ldrb	r2, [r3, #5]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	711a      	strb	r2, [r3, #4]
        };
 800e5f0:	bf00      	nop
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	601a      	str	r2, [r3, #0]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	711a      	strb	r2, [r3, #4]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	80da      	strh	r2, [r3, #6]
        };
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	4618      	mov	r0, r3
 800e61a:	370c      	adds	r7, #12
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	80da      	strh	r2, [r3, #6]
        };
 800e63e:	bf00      	nop
 800e640:	370c      	adds	r7, #12
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr

0800e64a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800e64a:	b480      	push	{r7}
 800e64c:	b085      	sub	sp, #20
 800e64e:	af00      	add	r7, sp, #0
 800e650:	60f8      	str	r0, [r7, #12]
 800e652:	60b9      	str	r1, [r7, #8]
 800e654:	607a      	str	r2, [r7, #4]
 800e656:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	791b      	ldrb	r3, [r3, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d002      	beq.n	800e666 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800e660:	2b01      	cmp	r3, #1
 800e662:	d009      	beq.n	800e678 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800e664:	e029      	b.n	800e6ba <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	887a      	ldrh	r2, [r7, #2]
 800e66a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	791b      	ldrb	r3, [r3, #4]
 800e670:	3301      	adds	r3, #1
 800e672:	b2da      	uxtb	r2, r3
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	88db      	ldrh	r3, [r3, #6]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d015      	beq.n	800e6ac <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	881b      	ldrh	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d011      	beq.n	800e6ac <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	88db      	ldrh	r3, [r3, #6]
 800e68c:	3b01      	subs	r3, #1
 800e68e:	b29a      	uxth	r2, r3
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	80da      	strh	r2, [r3, #6]
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	1c5a      	adds	r2, r3, #1
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	3b01      	subs	r3, #1
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	801a      	strh	r2, [r3, #0]
 800e6aa:	e7e5      	b.n	800e678 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	88db      	ldrh	r3, [r3, #6]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d102      	bne.n	800e6ba <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	88db      	ldrh	r3, [r3, #6]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	bf0c      	ite	eq
 800e6c2:	2301      	moveq	r3, #1
 800e6c4:	2300      	movne	r3, #0
 800e6c6:	b2db      	uxtb	r3, r3
        };
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3714      	adds	r7, #20
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr

0800e6d4 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	4608      	mov	r0, r1
 800e6de:	4611      	mov	r1, r2
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	70fb      	strb	r3, [r7, #3]
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	70bb      	strb	r3, [r7, #2]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	707b      	strb	r3, [r7, #1]
        };
 800e6ee:	bf00      	nop
 800e6f0:	370c      	adds	r7, #12
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr
	...

0800e6fc <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	4a04      	ldr	r2, [pc, #16]	; (800e718 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	601a      	str	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4618      	mov	r0, r3
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr
 800e718:	08017cc0 	.word	0x08017cc0

0800e71c <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	4a04      	ldr	r2, [pc, #16]	; (800e738 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	601a      	str	r2, [r3, #0]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4618      	mov	r0, r3
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr
 800e738:	08017ca8 	.word	0x08017ca8

0800e73c <_ZN5EERefC1Ei>:
    This class has an overhead of two bytes, similar to storing a pointer to an EEPROM cell.
***/

struct EERef {

  EERef(const int index)
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
    : index(index)                 {}
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	683a      	ldr	r2, [r7, #0]
 800e74a:	601a      	str	r2, [r3, #0]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	4618      	mov	r0, r3
 800e750:	370c      	adds	r7, #12
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr

0800e75a <_ZNK5EERefdeEv>:

  //Access/read members.
  uint8_t operator*() const
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b082      	sub	sp, #8
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  {
    return eeprom_read_byte(/*(uint8_t*)*/ index);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4618      	mov	r0, r3
 800e768:	f7f2 f838 	bl	80007dc <eeprom_read_byte>
 800e76c:	4603      	mov	r3, r0
  }
 800e76e:	4618      	mov	r0, r3
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <_ZNK5EERefcvhEv>:
  operator uint8_t() const
 800e776:	b580      	push	{r7, lr}
 800e778:	b082      	sub	sp, #8
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
  {
    return **this;
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7ff ffeb 	bl	800e75a <_ZNK5EERefdeEv>
 800e784:	4603      	mov	r3, r0
  }
 800e786:	4618      	mov	r0, r3
 800e788:	3708      	adds	r7, #8
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <_ZN5EERefaSEh>:
  //Assignment/write members.
  EERef &operator=(const EERef &ref)
  {
    return *this = *ref;
  }
  EERef &operator=(uint8_t in)
 800e78e:	b580      	push	{r7, lr}
 800e790:	b082      	sub	sp, #8
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
 800e796:	460b      	mov	r3, r1
 800e798:	70fb      	strb	r3, [r7, #3]
  {
    return eeprom_write_byte(/*(uint8_t*)*/ index, in), *this;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	78fb      	ldrb	r3, [r7, #3]
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	4610      	mov	r0, r2
 800e7a6:	f7f2 f827 	bl	80007f8 <eeprom_write_byte>
 800e7aa:	687b      	ldr	r3, [r7, #4]
  }
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <_ZN11EEPROMClass4readEi>:
  //Basic user access methods.
  EERef operator[](const int idx)
  {
    return idx;
  }
  uint8_t read(int idx)
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
  {
    return EERef(idx);
 800e7be:	f107 030c 	add.w	r3, r7, #12
 800e7c2:	6839      	ldr	r1, [r7, #0]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7ff ffb9 	bl	800e73c <_ZN5EERefC1Ei>
 800e7ca:	f107 030c 	add.w	r3, r7, #12
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7ff ffd1 	bl	800e776 <_ZNK5EERefcvhEv>
 800e7d4:	4603      	mov	r3, r0
  }
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <_ZN11EEPROMClass5writeEih>:
  void write(int idx, uint8_t val)
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b086      	sub	sp, #24
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	60f8      	str	r0, [r7, #12]
 800e7e6:	60b9      	str	r1, [r7, #8]
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	71fb      	strb	r3, [r7, #7]
  {
    (EERef(idx)) = val;
 800e7ec:	f107 0314 	add.w	r3, r7, #20
 800e7f0:	68b9      	ldr	r1, [r7, #8]
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7ff ffa2 	bl	800e73c <_ZN5EERefC1Ei>
 800e7f8:	79fa      	ldrb	r2, [r7, #7]
 800e7fa:	f107 0314 	add.w	r3, r7, #20
 800e7fe:	4611      	mov	r1, r2
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff ffc4 	bl	800e78e <_ZN5EERefaSEh>
  }
 800e806:	bf00      	nop
 800e808:	3718      	adds	r7, #24
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}

0800e80e <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800e80e:	b480      	push	{r7}
 800e810:	b083      	sub	sp, #12
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
                return bAddress;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
        };
 800e81c:	4618      	mov	r0, r3
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
        };
 800e836:	4618      	mov	r0, r3
 800e838:	370c      	adds	r7, #12
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr

0800e842 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800e842:	b480      	push	{r7}
 800e844:	b083      	sub	sp, #12
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
 800e84a:	460b      	mov	r3, r1
 800e84c:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800e84e:	78fb      	ldrb	r3, [r7, #3]
 800e850:	2be0      	cmp	r3, #224	; 0xe0
 800e852:	bf0c      	ite	eq
 800e854:	2301      	moveq	r3, #1
 800e856:	2300      	movne	r3, #0
 800e858:	b2db      	uxtb	r3, r3
        };
 800e85a:	4618      	mov	r0, r3
 800e85c:	370c      	adds	r7, #12
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr

0800e866 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800e866:	b480      	push	{r7}
 800e868:	b083      	sub	sp, #12
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	460b      	mov	r3, r1
 800e870:	807b      	strh	r3, [r7, #2]
 800e872:	4613      	mov	r3, r2
 800e874:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800e876:	887b      	ldrh	r3, [r7, #2]
 800e878:	f640 225c 	movw	r2, #2652	; 0xa5c
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d104      	bne.n	800e88a <_ZN3BTD8VIDPIDOKEtt+0x24>
 800e880:	883b      	ldrh	r3, [r7, #0]
 800e882:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800e886:	4293      	cmp	r3, r2
 800e888:	d009      	beq.n	800e89e <_ZN3BTD8VIDPIDOKEtt+0x38>
 800e88a:	887b      	ldrh	r3, [r7, #2]
 800e88c:	f240 520d 	movw	r2, #1293	; 0x50d
 800e890:	4293      	cmp	r3, r2
 800e892:	d106      	bne.n	800e8a2 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800e894:	883b      	ldrh	r3, [r7, #0]
 800e896:	f240 625a 	movw	r2, #1626	; 0x65a
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d101      	bne.n	800e8a2 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e02d      	b.n	800e8fe <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	7d1b      	ldrb	r3, [r3, #20]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d113      	bne.n	800e8d2 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	7d5b      	ldrb	r3, [r3, #21]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d10f      	bne.n	800e8d2 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	7d9b      	ldrb	r3, [r3, #22]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d10b      	bne.n	800e8d2 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	7ddb      	ldrb	r3, [r3, #23]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d107      	bne.n	800e8d2 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	7e1b      	ldrb	r3, [r3, #24]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d103      	bne.n	800e8d2 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	7e5b      	ldrb	r3, [r3, #25]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d014      	beq.n	800e8fc <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800e8d2:	887b      	ldrh	r3, [r7, #2]
 800e8d4:	f240 524c 	movw	r2, #1356	; 0x54c
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d10f      	bne.n	800e8fc <_ZN3BTD8VIDPIDOKEtt+0x96>
 800e8dc:	883b      	ldrh	r3, [r7, #0]
 800e8de:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800e8e2:	d009      	beq.n	800e8f8 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800e8e4:	883b      	ldrh	r3, [r7, #0]
 800e8e6:	f240 422f 	movw	r2, #1071	; 0x42f
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d004      	beq.n	800e8f8 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800e8ee:	883b      	ldrh	r3, [r7, #0]
 800e8f0:	f240 32d5 	movw	r2, #981	; 0x3d5
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d101      	bne.n	800e8fc <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	e000      	b.n	800e8fe <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800e8fc:	2300      	movs	r3, #0
        };
 800e8fe:	4618      	mov	r0, r3
 800e900:	370c      	adds	r7, #12
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr
	...

0800e90c <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4618      	mov	r0, r3
 800e91a:	f7ff feef 	bl	800e6fc <_ZN15USBDeviceConfigC1Ev>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	3304      	adds	r3, #4
 800e922:	4618      	mov	r0, r3
 800e924:	f7ff fefa 	bl	800e71c <_ZN17UsbConfigXtracterC1Ev>
 800e928:	4a2b      	ldr	r2, [pc, #172]	; (800e9d8 <_ZN3BTDC1EP3USB+0xcc>)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	601a      	str	r2, [r3, #0]
 800e92e:	4a2b      	ldr	r2, [pc, #172]	; (800e9dc <_ZN3BTDC1EP3USB+0xd0>)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	605a      	str	r2, [r3, #4]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2200      	movs	r2, #0
 800e938:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2200      	movs	r2, #0
 800e940:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2200      	movs	r2, #0
 800e948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	683a      	ldr	r2, [r7, #0]
 800e960:	665a      	str	r2, [r3, #100]	; 0x64
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2201      	movs	r2, #1
 800e96e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	679a      	str	r2, [r3, #120]	; 0x78
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2200      	movs	r2, #0
 800e984:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800e990:	2300      	movs	r3, #0
 800e992:	73fb      	strb	r3, [r7, #15]
 800e994:	7bfb      	ldrb	r3, [r7, #15]
 800e996:	2b03      	cmp	r3, #3
 800e998:	d80a      	bhi.n	800e9b0 <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800e99a:	7bfb      	ldrb	r3, [r7, #15]
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	331e      	adds	r3, #30
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	4413      	add	r3, r2
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800e9a8:	7bfb      	ldrb	r3, [r7, #15]
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	73fb      	strb	r3, [r7, #15]
 800e9ae:	e7f1      	b.n	800e994 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 fb31 	bl	800f018 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d006      	beq.n	800e9cc <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	4611      	mov	r1, r2
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7ff fdb1 	bl	800e52e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	08017c68 	.word	0x08017c68
 800e9dc:	08017c9c 	.word	0x08017c9c

0800e9e0 <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800e9e0:	b590      	push	{r4, r7, lr}
 800e9e2:	b08f      	sub	sp, #60	; 0x3c
 800e9e4:	af02      	add	r7, sp, #8
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	4608      	mov	r0, r1
 800e9ea:	4611      	mov	r1, r2
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	70fb      	strb	r3, [r7, #3]
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	70bb      	strb	r3, [r7, #2]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800e9fa:	2312      	movs	r3, #18
 800e9fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800ea00:	f107 0308 	add.w	r3, r7, #8
 800ea04:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800ea06:	2300      	movs	r3, #0
 800ea08:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 fb02 	bl	800f018 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7ff fd7d 	bl	800e518 <_ZN3USB14GetAddressPoolEv>
 800ea1e:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d005      	beq.n	800ea36 <_ZN3BTD15ConfigureDeviceEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
 800ea2a:	2180      	movs	r1, #128	; 0x80
 800ea2c:	4852      	ldr	r0, [pc, #328]	; (800eb78 <_ZN3BTD15ConfigureDeviceEhhb+0x198>)
 800ea2e:	f006 ff6b 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800ea32:	23d9      	movs	r3, #217	; 0xd9
 800ea34:	e09c      	b.n	800eb70 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	69f8      	ldr	r0, [r7, #28]
 800ea40:	4798      	blx	r3
 800ea42:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800ea44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d105      	bne.n	800ea56 <_ZN3BTD15ConfigureDeviceEhhb+0x76>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800ea4a:	2180      	movs	r1, #128	; 0x80
 800ea4c:	484b      	ldr	r0, [pc, #300]	; (800eb7c <_ZN3BTD15ConfigureDeviceEhhb+0x19c>)
 800ea4e:	f006 ff5b 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ea52:	23d6      	movs	r3, #214	; 0xd6
 800ea54:	e08c      	b.n	800eb70 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        if(!p->epinfo) {
 800ea56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d105      	bne.n	800ea6a <_ZN3BTD15ConfigureDeviceEhhb+0x8a>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
 800ea5e:	2180      	movs	r1, #128	; 0x80
 800ea60:	4847      	ldr	r0, [pc, #284]	; (800eb80 <_ZN3BTD15ConfigureDeviceEhhb+0x1a0>)
 800ea62:	f006 ff51 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800ea66:	23d7      	movs	r3, #215	; 0xd7
 800ea68:	e082      	b.n	800eb70 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f103 0269 	add.w	r2, r3, #105	; 0x69
 800ea76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea78:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7c:	787a      	ldrb	r2, [r7, #1]
 800ea7e:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ea84:	f107 0308 	add.w	r3, r7, #8
 800ea88:	9300      	str	r3, [sp, #0]
 800ea8a:	2312      	movs	r3, #18
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	2100      	movs	r1, #0
 800ea90:	f006 f895 	bl	8014bbe <_ZN3USB11getDevDescrEhhtPh>
 800ea94:	4603      	mov	r3, r0
 800ea96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9c:	6a3a      	ldr	r2, [r7, #32]
 800ea9e:	601a      	str	r2, [r3, #0]

        if(rcode)
 800eaa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d14e      	bne.n	800eb46 <_ZN3BTD15ConfigureDeviceEhhb+0x166>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	3304      	adds	r3, #4
 800eaae:	681c      	ldr	r4, [r3, #0]
 800eab0:	78bb      	ldrb	r3, [r7, #2]
 800eab2:	78f9      	ldrb	r1, [r7, #3]
 800eab4:	2200      	movs	r2, #0
 800eab6:	69f8      	ldr	r0, [r7, #28]
 800eab8:	47a0      	blx	r4
 800eaba:	4603      	mov	r3, r0
 800eabc:	461a      	mov	r2, r3
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

        if(!bAddress) {
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d105      	bne.n	800eada <_ZN3BTD15ConfigureDeviceEhhb+0xfa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
 800eace:	2180      	movs	r1, #128	; 0x80
 800ead0:	482c      	ldr	r0, [pc, #176]	; (800eb84 <_ZN3BTD15ConfigureDeviceEhhb+0x1a4>)
 800ead2:	f006 ff19 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800ead6:	23d4      	movs	r3, #212	; 0xd4
 800ead8:	e04a      	b.n	800eb70 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800eada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eadc:	791b      	ldrb	r3, [r3, #4]
 800eade:	2b09      	cmp	r3, #9
 800eae0:	d017      	beq.n	800eb12 <_ZN3BTD15ConfigureDeviceEhhb+0x132>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800eae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae4:	79da      	ldrb	r2, [r3, #7]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800eaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaee:	7c5a      	ldrb	r2, [r3, #17]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

        VID = udd->idVendor;
 800eaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf8:	891b      	ldrh	r3, [r3, #8]
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        PID = udd->idProduct;
 800eb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb04:	895b      	ldrh	r3, [r3, #10]
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800eb0e:	23e0      	movs	r3, #224	; 0xe0
 800eb10:	e02e      	b.n	800eb70 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
                goto FailHub;
 800eb12:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
 800eb14:	2180      	movs	r1, #128	; 0x80
 800eb16:	481c      	ldr	r0, [pc, #112]	; (800eb88 <_ZN3BTD15ConfigureDeviceEhhb+0x1a8>)
 800eb18:	f006 fef6 	bl	8015908 <_Z8E_NotifyPKci>
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800eb26:	2300      	movs	r3, #0
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f006 f8e5 	bl	8014cf8 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800eb2e:	23d1      	movs	r3, #209	; 0xd1
 800eb30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	3308      	adds	r3, #8
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	4798      	blx	r3
        return rcode;
 800eb40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb44:	e014      	b.n	800eb70 <_ZN3BTD15ConfigureDeviceEhhb+0x190>
                goto FailGetDevDescr;
 800eb46:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
 800eb48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f006 ff53 	bl	80159f8 <_Z21NotifyFailGetDevDescrh>
#endif
        if(rcode != hrJERR)
 800eb52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb56:	2b0d      	cmp	r3, #13
 800eb58:	d002      	beq.n	800eb60 <_ZN3BTD15ConfigureDeviceEhhb+0x180>
                rcode = USB_ERROR_FailGetDevDescr;
 800eb5a:	23e1      	movs	r3, #225	; 0xe1
 800eb5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	3308      	adds	r3, #8
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	4798      	blx	r3
        return rcode;
 800eb6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800eb70:	4618      	mov	r0, r3
 800eb72:	3734      	adds	r7, #52	; 0x34
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd90      	pop	{r4, r7, pc}
 800eb78:	08015e98 	.word	0x08015e98
 800eb7c:	08015eac 	.word	0x08015eac
 800eb80:	08015ec0 	.word	0x08015ec0
 800eb84:	08015ed4 	.word	0x08015ed4
 800eb88:	08015eec 	.word	0x08015eec

0800eb8c <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b096      	sub	sp, #88	; 0x58
 800eb90:	af02      	add	r7, sp, #8
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	4608      	mov	r0, r1
 800eb96:	4611      	mov	r1, r2
 800eb98:	461a      	mov	r2, r3
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	70fb      	strb	r3, [r7, #3]
 800eb9e:	460b      	mov	r3, r1
 800eba0:	70bb      	strb	r3, [r7, #2]
 800eba2:	4613      	mov	r3, r2
 800eba4:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ebac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        epInfo[1].epAddr = 0;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

        AddressPool &addrPool = pUsb->GetAddressPool();
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7ff fcab 	bl	800e518 <_ZN3USB14GetAddressPoolEv>
 800ebc2:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800ebc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 800ebd0:	4611      	mov	r1, r2
 800ebd2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ebd4:	4798      	blx	r3
 800ebd6:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800ebd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d105      	bne.n	800ebea <_ZN3BTD4InitEhhb+0x5e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800ebde:	2180      	movs	r1, #128	; 0x80
 800ebe0:	48ae      	ldr	r0, [pc, #696]	; (800ee9c <_ZN3BTD4InitEhhb+0x310>)
 800ebe2:	f006 fe91 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ebe6:	23d6      	movs	r3, #214	; 0xd6
 800ebe8:	e20e      	b.n	800f008 <_ZN3BTD4InitEhhb+0x47c>
        }

        delay(300); // Assign new address to the device
 800ebea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ebee:	f7f3 fff5 	bl	8002bdc <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	2100      	movs	r1, #0
 800ec00:	f006 f87a 	bl	8014cf8 <_ZN3USB7setAddrEhhh>
 800ec04:	4603      	mov	r3, r0
 800ec06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800ec0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d00d      	beq.n	800ec2e <_ZN3BTD4InitEhhb+0xa2>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
 800ec12:	2180      	movs	r1, #128	; 0x80
 800ec14:	48a2      	ldr	r0, [pc, #648]	; (800eea0 <_ZN3BTD4InitEhhb+0x314>)
 800ec16:	f006 fe77 	bl	8015908 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (rcode, 0x80);
 800ec1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec1e:	2180      	movs	r1, #128	; 0x80
 800ec20:	4618      	mov	r0, r3
 800ec22:	f002 fed0 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
#endif
                p->lowspeed = false;
 800ec26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec28:	2200      	movs	r2, #0
 800ec2a:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800ec2c:	e1db      	b.n	800efe6 <_ZN3BTD4InitEhhb+0x45a>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800ec2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec30:	2200      	movs	r2, #0
 800ec32:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800ec34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 800ec40:	4611      	mov	r1, r2
 800ec42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ec44:	4798      	blx	r3
 800ec46:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800ec48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d105      	bne.n	800ec5a <_ZN3BTD4InitEhhb+0xce>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
 800ec4e:	2180      	movs	r1, #128	; 0x80
 800ec50:	4892      	ldr	r0, [pc, #584]	; (800ee9c <_ZN3BTD4InitEhhb+0x310>)
 800ec52:	f006 fe59 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ec56:	23d6      	movs	r3, #214	; 0xd6
 800ec58:	e1d6      	b.n	800f008 <_ZN3BTD4InitEhhb+0x47c>
        }

        p->lowspeed = lowspeed;
 800ec5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec5c:	787a      	ldrb	r2, [r7, #1]
 800ec5e:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	3369      	adds	r3, #105	; 0x69
 800ec6e:	2201      	movs	r2, #1
 800ec70:	f004 ff13 	bl	8013a9a <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800ec74:	4603      	mov	r3, r0
 800ec76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800ec7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f040 818a 	bne.w	800ef98 <_ZN3BTD4InitEhhb+0x40c>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800ec8a:	f240 524c 	movw	r2, #1356	; 0x54c
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	f040 80c5 	bne.w	800ee1e <_ZN3BTD4InitEhhb+0x292>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ec9a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ec9e:	d00e      	beq.n	800ecbe <_ZN3BTD4InitEhhb+0x132>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800eca6:	f240 422f 	movw	r2, #1071	; 0x42f
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d007      	beq.n	800ecbe <_ZN3BTD4InitEhhb+0x132>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ecb4:	f240 32d5 	movw	r2, #981	; 0x3d5
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	f040 80b0 	bne.w	800ee1e <_ZN3BTD4InitEhhb+0x292>
                delay(100);
 800ecbe:	2064      	movs	r0, #100	; 0x64
 800ecc0:	f7f3 ff8c 	bl	8002bdc <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	f006 f83d 	bl	8014d54 <_ZN3USB7setConfEhhh>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800ece0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	f040 8161 	bne.w	800efac <_ZN3BTD4InitEhhb+0x420>
                        goto FailSetConfDescr;

#ifdef DEBUG_USB_HOST
                if(PID == PS3_PID || PID == PS3NAVIGATION_PID) {
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ecf0:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ecf4:	d006      	beq.n	800ed04 <_ZN3BTD4InitEhhb+0x178>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ecfc:	f240 422f 	movw	r2, #1071	; 0x42f
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d10f      	bne.n	800ed24 <_ZN3BTD4InitEhhb+0x198>
                        if(PID == PS3_PID)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ed0a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ed0e:	d104      	bne.n	800ed1a <_ZN3BTD4InitEhhb+0x18e>
                                Notify(PSTR("\r\nDualshock 3 Controller Connected"), 0x80);
 800ed10:	2180      	movs	r1, #128	; 0x80
 800ed12:	4864      	ldr	r0, [pc, #400]	; (800eea4 <_ZN3BTD4InitEhhb+0x318>)
 800ed14:	f006 fdf8 	bl	8015908 <_Z8E_NotifyPKci>
                        if(PID == PS3_PID)
 800ed18:	e008      	b.n	800ed2c <_ZN3BTD4InitEhhb+0x1a0>
                        else // It must be a navigation controller
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
 800ed1a:	2180      	movs	r1, #128	; 0x80
 800ed1c:	4862      	ldr	r0, [pc, #392]	; (800eea8 <_ZN3BTD4InitEhhb+0x31c>)
 800ed1e:	f006 fdf3 	bl	8015908 <_Z8E_NotifyPKci>
                        if(PID == PS3_PID)
 800ed22:	e003      	b.n	800ed2c <_ZN3BTD4InitEhhb+0x1a0>
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
 800ed24:	2180      	movs	r1, #128	; 0x80
 800ed26:	4861      	ldr	r0, [pc, #388]	; (800eeac <_ZN3BTD4InitEhhb+0x320>)
 800ed28:	f006 fdee 	bl	8015908 <_Z8E_NotifyPKci>
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	7d1b      	ldrb	r3, [r3, #20]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d118      	bne.n	800ed66 <_ZN3BTD4InitEhhb+0x1da>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	7d5b      	ldrb	r3, [r3, #21]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d114      	bne.n	800ed66 <_ZN3BTD4InitEhhb+0x1da>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	7d9b      	ldrb	r3, [r3, #22]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d110      	bne.n	800ed66 <_ZN3BTD4InitEhhb+0x1da>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	7ddb      	ldrb	r3, [r3, #23]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d10c      	bne.n	800ed66 <_ZN3BTD4InitEhhb+0x1da>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	7e1b      	ldrb	r3, [r3, #24]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d108      	bne.n	800ed66 <_ZN3BTD4InitEhhb+0x1da>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	7e5b      	ldrb	r3, [r3, #25]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d104      	bne.n	800ed66 <_ZN3BTD4InitEhhb+0x1da>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
 800ed5c:	2180      	movs	r1, #128	; 0x80
 800ed5e:	4854      	ldr	r0, [pc, #336]	; (800eeb0 <_ZN3BTD4InitEhhb+0x324>)
 800ed60:	f006 fdd2 	bl	8015908 <_Z8E_NotifyPKci>
 800ed64:	e03f      	b.n	800ede6 <_ZN3BTD4InitEhhb+0x25a>
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ed6c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ed70:	d006      	beq.n	800ed80 <_ZN3BTD4InitEhhb+0x1f4>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ed78:	f240 422f 	movw	r2, #1071	; 0x42f
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d106      	bne.n	800ed8e <_ZN3BTD4InitEhhb+0x202>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	3314      	adds	r3, #20
 800ed84:	4619      	mov	r1, r3
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f002 fd9a 	bl	80118c0 <_ZN3BTD9setBdaddrEPh>
 800ed8c:	e005      	b.n	800ed9a <_ZN3BTD4InitEhhb+0x20e>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	3314      	adds	r3, #20
 800ed92:	4619      	mov	r1, r3
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f002 fdd3 	bl	8011940 <_ZN3BTD13setMoveBdaddrEPh>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nBluetooth Address was set to: "), 0x80);
 800ed9a:	2180      	movs	r1, #128	; 0x80
 800ed9c:	4845      	ldr	r0, [pc, #276]	; (800eeb4 <_ZN3BTD4InitEhhb+0x328>)
 800ed9e:	f006 fdb3 	bl	8015908 <_Z8E_NotifyPKci>
                        for(int8_t i = 5; i > 0; i--) {
 800eda2:	2305      	movs	r3, #5
 800eda4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800eda8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800edac:	2b00      	cmp	r3, #0
 800edae:	dd14      	ble.n	800edda <_ZN3BTD4InitEhhb+0x24e>
                                D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
 800edb0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	4413      	add	r3, r2
 800edb8:	7d1b      	ldrb	r3, [r3, #20]
 800edba:	2180      	movs	r1, #128	; 0x80
 800edbc:	4618      	mov	r0, r3
 800edbe:	f002 fe02 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(":"), 0x80);
 800edc2:	2180      	movs	r1, #128	; 0x80
 800edc4:	483c      	ldr	r0, [pc, #240]	; (800eeb8 <_ZN3BTD4InitEhhb+0x32c>)
 800edc6:	f006 fd9f 	bl	8015908 <_Z8E_NotifyPKci>
                        for(int8_t i = 5; i > 0; i--) {
 800edca:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	3b01      	subs	r3, #1
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800edd8:	e7e6      	b.n	800eda8 <_ZN3BTD4InitEhhb+0x21c>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	7d1b      	ldrb	r3, [r3, #20]
 800edde:	2180      	movs	r1, #128	; 0x80
 800ede0:	4618      	mov	r0, r3
 800ede2:	f002 fdf0 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800edf6:	2300      	movs	r3, #0
 800edf8:	f005 ffac 	bl	8014d54 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ee06:	2300      	movs	r3, #0
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f005 ff75 	bl	8014cf8 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	3308      	adds	r3, #8
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800ee1a:	23d1      	movs	r3, #209	; 0xd1
 800ee1c:	e0f4      	b.n	800f008 <_ZN3BTD4InitEhhb+0x47c>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800ee1e:	2300      	movs	r3, #0
 800ee20:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800ee24:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800ee28:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d26e      	bcs.n	800ef0e <_ZN3BTD4InitEhhb+0x382>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800ee36:	f640 225c 	movw	r2, #2652	; 0xa5c
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d106      	bne.n	800ee4c <_ZN3BTD4InitEhhb+0x2c0>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ee44:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d00d      	beq.n	800ee68 <_ZN3BTD4InitEhhb+0x2dc>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800ee52:	f240 520d 	movw	r2, #1293	; 0x50d
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d130      	bne.n	800eebc <_ZN3BTD4InitEhhb+0x330>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800ee60:	f240 625a 	movw	r2, #1626	; 0x65a
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d129      	bne.n	800eebc <_ZN3BTD4InitEhhb+0x330>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	1d1a      	adds	r2, r3, #4
 800ee6c:	f107 0308 	add.w	r3, r7, #8
 800ee70:	4611      	mov	r1, r2
 800ee72:	4618      	mov	r0, r3
 800ee74:	f002 fdc6 	bl	8011a04 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ee82:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800ee86:	f107 0308 	add.w	r3, r7, #8
 800ee8a:	9300      	str	r3, [sp, #0]
 800ee8c:	4613      	mov	r3, r2
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f005 fee5 	bl	8014c5e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800ee94:	4603      	mov	r3, r0
 800ee96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ee9a:	e028      	b.n	800eeee <_ZN3BTD4InitEhhb+0x362>
 800ee9c:	08015eac 	.word	0x08015eac
 800eea0:	08015f30 	.word	0x08015f30
 800eea4:	08015f3c 	.word	0x08015f3c
 800eea8:	08015f60 	.word	0x08015f60
 800eeac:	08015f84 	.word	0x08015f84
 800eeb0:	08015fa4 	.word	0x08015fa4
 800eeb4:	08016034 	.word	0x08016034
 800eeb8:	08016058 	.word	0x08016058
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	1d1a      	adds	r2, r3, #4
 800eec0:	f107 0308 	add.w	r3, r7, #8
 800eec4:	4611      	mov	r1, r2
 800eec6:	4618      	mov	r0, r3
 800eec8:	f002 fdea 	bl	8011aa0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800eed6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800eeda:	f107 0308 	add.w	r3, r7, #8
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	4613      	mov	r3, r2
 800eee2:	2200      	movs	r2, #0
 800eee4:	f005 febb 	bl	8014c5e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800eee8:	4603      	mov	r3, r0
 800eeea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800eeee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d156      	bne.n	800efa4 <_ZN3BTD4InitEhhb+0x418>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800eefc:	2b03      	cmp	r3, #3
 800eefe:	d805      	bhi.n	800ef0c <_ZN3BTD4InitEhhb+0x380>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800ef00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ef04:	3301      	adds	r3, #1
 800ef06:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800ef0a:	e78b      	b.n	800ee24 <_ZN3BTD4InitEhhb+0x298>
                                break;
 800ef0c:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800ef14:	2b03      	cmp	r3, #3
 800ef16:	d94f      	bls.n	800efb8 <_ZN3BTD4InitEhhb+0x42c>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	3369      	adds	r3, #105	; 0x69
 800ef2c:	f004 fdb5 	bl	8013a9a <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800ef30:	4603      	mov	r3, r0
 800ef32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800ef36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d12e      	bne.n	800ef9c <_ZN3BTD4InitEhhb+0x410>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800ef54:	f005 fefe 	bl	8014d54 <_ZN3USB7setConfEhhh>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800ef5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d124      	bne.n	800efb0 <_ZN3BTD4InitEhhb+0x424>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2264      	movs	r2, #100	; 0x64
 800ef6a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
                hci_counter = 0;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                hci_state = HCI_INIT_STATE;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                waitingForConnection = false;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2200      	movs	r2, #0
 800ef82:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
 800ef8c:	2180      	movs	r1, #128	; 0x80
 800ef8e:	4820      	ldr	r0, [pc, #128]	; (800f010 <_ZN3BTD4InitEhhb+0x484>)
 800ef90:	f006 fcba 	bl	8015908 <_Z8E_NotifyPKci>
#endif
        }
        return 0; // Successful configuration
 800ef94:	2300      	movs	r3, #0
 800ef96:	e037      	b.n	800f008 <_ZN3BTD4InitEhhb+0x47c>
                goto FailSetDevTblEntry;
 800ef98:	bf00      	nop
 800ef9a:	e000      	b.n	800ef9e <_ZN3BTD4InitEhhb+0x412>
                        goto FailSetDevTblEntry;
 800ef9c:	bf00      	nop

        /* Diagnostic messages */
FailSetDevTblEntry:
#ifdef DEBUG_USB_HOST
        NotifyFailSetDevTblEntry();
 800ef9e:	f006 fd0d 	bl	80159bc <_Z24NotifyFailSetDevTblEntryv>
        goto Fail;
 800efa2:	e020      	b.n	800efe6 <_ZN3BTD4InitEhhb+0x45a>
                                goto FailGetConfDescr;
 800efa4:	bf00      	nop
#endif

FailGetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetConfDescr();
 800efa6:	f006 fd13 	bl	80159d0 <_Z22NotifyFailGetConfDescrv>
        goto Fail;
 800efaa:	e01c      	b.n	800efe6 <_ZN3BTD4InitEhhb+0x45a>
                        goto FailSetConfDescr;
 800efac:	bf00      	nop
 800efae:	e000      	b.n	800efb2 <_ZN3BTD4InitEhhb+0x426>
                        goto FailSetConfDescr;
 800efb0:	bf00      	nop
#endif

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
 800efb2:	f006 fd17 	bl	80159e4 <_Z22NotifyFailSetConfDescrv>
#endif
        goto Fail;
 800efb6:	e016      	b.n	800efe6 <_ZN3BTD4InitEhhb+0x45a>
                        goto FailUnknownDevice;
 800efb8:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8b3 208e 	ldrh.w	r2, [r3, #142]	; 0x8e
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800efc6:	4619      	mov	r1, r3
 800efc8:	4610      	mov	r0, r2
 800efca:	f006 fd25 	bl	8015a18 <_Z23NotifyFailUnknownDevicett>
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800efd8:	2300      	movs	r3, #0
 800efda:	2200      	movs	r2, #0
 800efdc:	f005 fe8c 	bl	8014cf8 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800efe0:	23d1      	movs	r3, #209	; 0xd1
 800efe2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
 800efe6:	2180      	movs	r1, #128	; 0x80
 800efe8:	480a      	ldr	r0, [pc, #40]	; (800f014 <_ZN3BTD4InitEhhb+0x488>)
 800efea:	f006 fc8d 	bl	8015908 <_Z8E_NotifyPKci>
        NotifyFail(rcode);
 800efee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eff2:	4618      	mov	r0, r3
 800eff4:	f006 fd32 	bl	8015a5c <_Z10NotifyFailh>
#endif
        Release();
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	3308      	adds	r3, #8
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	4798      	blx	r3
        return rcode;
 800f004:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3750      	adds	r7, #80	; 0x50
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	0801605c 	.word	0x0801605c
 800f014:	0801607c 	.word	0x0801607c

0800f018 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800f020:	2300      	movs	r3, #0
 800f022:	73fb      	strb	r3, [r7, #15]
 800f024:	7bfb      	ldrb	r3, [r7, #15]
 800f026:	2b03      	cmp	r3, #3
 800f028:	d845      	bhi.n	800f0b6 <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800f02a:	7bfa      	ldrb	r2, [r7, #15]
 800f02c:	6879      	ldr	r1, [r7, #4]
 800f02e:	4613      	mov	r3, r2
 800f030:	005b      	lsls	r3, r3, #1
 800f032:	4413      	add	r3, r2
 800f034:	440b      	add	r3, r1
 800f036:	3369      	adds	r3, #105	; 0x69
 800f038:	2200      	movs	r2, #0
 800f03a:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800f03c:	7bfb      	ldrb	r3, [r7, #15]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d001      	beq.n	800f046 <_ZN3BTD10InitializeEv+0x2e>
 800f042:	2000      	movs	r0, #0
 800f044:	e000      	b.n	800f048 <_ZN3BTD10InitializeEv+0x30>
 800f046:	2008      	movs	r0, #8
 800f048:	7bfa      	ldrb	r2, [r7, #15]
 800f04a:	6879      	ldr	r1, [r7, #4]
 800f04c:	4613      	mov	r3, r2
 800f04e:	005b      	lsls	r3, r3, #1
 800f050:	4413      	add	r3, r2
 800f052:	440b      	add	r3, r1
 800f054:	336a      	adds	r3, #106	; 0x6a
 800f056:	4602      	mov	r2, r0
 800f058:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800f05a:	7bfa      	ldrb	r2, [r7, #15]
 800f05c:	6879      	ldr	r1, [r7, #4]
 800f05e:	4613      	mov	r3, r2
 800f060:	005b      	lsls	r3, r3, #1
 800f062:	4413      	add	r3, r2
 800f064:	440b      	add	r3, r1
 800f066:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f06a:	78d3      	ldrb	r3, [r2, #3]
 800f06c:	f36f 0300 	bfc	r3, #0, #1
 800f070:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800f072:	7bfa      	ldrb	r2, [r7, #15]
 800f074:	6879      	ldr	r1, [r7, #4]
 800f076:	4613      	mov	r3, r2
 800f078:	005b      	lsls	r3, r3, #1
 800f07a:	4413      	add	r3, r2
 800f07c:	440b      	add	r3, r1
 800f07e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f082:	78d3      	ldrb	r3, [r2, #3]
 800f084:	f36f 0341 	bfc	r3, #1, #1
 800f088:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800f08a:	7bfb      	ldrb	r3, [r7, #15]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d001      	beq.n	800f094 <_ZN3BTD10InitializeEv+0x7c>
 800f090:	2101      	movs	r1, #1
 800f092:	e000      	b.n	800f096 <_ZN3BTD10InitializeEv+0x7e>
 800f094:	210f      	movs	r1, #15
 800f096:	7bfa      	ldrb	r2, [r7, #15]
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	4613      	mov	r3, r2
 800f09c:	005b      	lsls	r3, r3, #1
 800f09e:	4413      	add	r3, r2
 800f0a0:	4403      	add	r3, r0
 800f0a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f0a6:	78d3      	ldrb	r3, [r2, #3]
 800f0a8:	f361 0387 	bfi	r3, r1, #2, #6
 800f0ac:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800f0ae:	7bfb      	ldrb	r3, [r7, #15]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	73fb      	strb	r3, [r7, #15]
 800f0b4:	e7b6      	b.n	800f024 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	73fb      	strb	r3, [r7, #15]
 800f0ba:	7bfb      	ldrb	r3, [r7, #15]
 800f0bc:	2b03      	cmp	r3, #3
 800f0be:	d81c      	bhi.n	800f0fa <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800f0c0:	7bfb      	ldrb	r3, [r7, #15]
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	331e      	adds	r3, #30
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	4413      	add	r3, r2
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d010      	beq.n	800f0f2 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	331e      	adds	r3, #30
 800f0d6:	009b      	lsls	r3, r3, #2
 800f0d8:	4413      	add	r3, r2
 800f0da:	6859      	ldr	r1, [r3, #4]
 800f0dc:	7bfb      	ldrb	r3, [r7, #15]
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	331e      	adds	r3, #30
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	4413      	add	r3, r2
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	3308      	adds	r3, #8
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	4608      	mov	r0, r1
 800f0f0:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800f0f2:	7bfb      	ldrb	r3, [r7, #15]
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	73fb      	strb	r3, [r7, #15]
 800f0f8:	e7df      	b.n	800f0ba <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
        incomingWii = false;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        connectToHIDDevice = false;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        incomingHIDDevice = false;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2200      	movs	r2, #0
 800f116:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        incomingPSController = false;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        bAddress = 0; // Clear device address
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2200      	movs	r2, #0
 800f126:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        bNumEP = 1; // Must have to be reset to 1
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2201      	movs	r2, #1
 800f12e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        qNextPollTime = 0; // Reset next poll time
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	679a      	str	r2, [r3, #120]	; 0x78
        pollInterval = 0;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2200      	movs	r2, #0
 800f13c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        bPollEnable = false; // Don't start polling before dongle is connected
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2200      	movs	r2, #0
 800f144:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        simple_pairing_supported = false;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 800f150:	bf00      	nop
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800f158:	b480      	push	{r7}
 800f15a:	b085      	sub	sp, #20
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	4608      	mov	r0, r1
 800f162:	4611      	mov	r1, r2
 800f164:	461a      	mov	r2, r3
 800f166:	4603      	mov	r3, r0
 800f168:	70fb      	strb	r3, [r7, #3]
 800f16a:	460b      	mov	r3, r1
 800f16c:	70bb      	strb	r3, [r7, #2]
 800f16e:	4613      	mov	r3, r2
 800f170:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800f172:	787b      	ldrb	r3, [r7, #1]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d15d      	bne.n	800f234 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	78fa      	ldrb	r2, [r7, #3]
 800f17c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	78db      	ldrb	r3, [r3, #3]
 800f184:	f003 0303 	and.w	r3, r3, #3
 800f188:	2b03      	cmp	r3, #3
 800f18a:	d114      	bne.n	800f1b6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	789b      	ldrb	r3, [r3, #2]
 800f190:	b25b      	sxtb	r3, r3
 800f192:	2b00      	cmp	r3, #0
 800f194:	da0f      	bge.n	800f1b6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800f196:	2301      	movs	r3, #1
 800f198:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800f19a:	7bfa      	ldrb	r2, [r7, #15]
 800f19c:	6879      	ldr	r1, [r7, #4]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	005b      	lsls	r3, r3, #1
 800f1a2:	4413      	add	r3, r2
 800f1a4:	440b      	add	r3, r1
 800f1a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f1aa:	78d3      	ldrb	r3, [r2, #3]
 800f1ac:	2101      	movs	r1, #1
 800f1ae:	f361 0387 	bfi	r3, r1, #2, #6
 800f1b2:	70d3      	strb	r3, [r2, #3]
 800f1b4:	e00e      	b.n	800f1d4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	78db      	ldrb	r3, [r3, #3]
 800f1ba:	f003 0303 	and.w	r3, r3, #3
 800f1be:	2b02      	cmp	r3, #2
 800f1c0:	d13a      	bne.n	800f238 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	789b      	ldrb	r3, [r3, #2]
 800f1c6:	b25b      	sxtb	r3, r3
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	da01      	bge.n	800f1d0 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800f1cc:	2302      	movs	r3, #2
 800f1ce:	e000      	b.n	800f1d2 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800f1d0:	2303      	movs	r3, #3
 800f1d2:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	789b      	ldrb	r3, [r3, #2]
 800f1d8:	7bfa      	ldrb	r2, [r7, #15]
 800f1da:	f003 030f 	and.w	r3, r3, #15
 800f1de:	b2d8      	uxtb	r0, r3
 800f1e0:	6879      	ldr	r1, [r7, #4]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	005b      	lsls	r3, r3, #1
 800f1e6:	4413      	add	r3, r2
 800f1e8:	440b      	add	r3, r1
 800f1ea:	3369      	adds	r3, #105	; 0x69
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	889b      	ldrh	r3, [r3, #4]
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	7bfa      	ldrb	r2, [r7, #15]
 800f1f8:	b2d8      	uxtb	r0, r3
 800f1fa:	6879      	ldr	r1, [r7, #4]
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	4413      	add	r3, r2
 800f202:	440b      	add	r3, r1
 800f204:	336a      	adds	r3, #106	; 0x6a
 800f206:	4602      	mov	r2, r0
 800f208:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	799b      	ldrb	r3, [r3, #6]
 800f214:	429a      	cmp	r2, r3
 800f216:	d204      	bcs.n	800f222 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	799a      	ldrb	r2, [r3, #6]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        bNumEP++;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800f228:	3301      	adds	r3, #1
 800f22a:	b2da      	uxtb	r2, r3
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800f232:	e002      	b.n	800f23a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800f234:	bf00      	nop
 800f236:	e000      	b.n	800f23a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800f238:	bf00      	nop
}
 800f23a:	3714      	adds	r7, #20
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800f244:	f1a0 0004 	sub.w	r0, r0, #4
 800f248:	f7ff bf86 	b.w	800f158 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800f24c <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f7ff fedf 	bl	800f018 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f25e:	4618      	mov	r0, r3
 800f260:	f7ff f95a 	bl	800e518 <_ZN3USB14GetAddressPoolEv>
 800f264:	4603      	mov	r3, r0
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	3208      	adds	r2, #8
 800f26a:	6812      	ldr	r2, [r2, #0]
 800f26c:	6879      	ldr	r1, [r7, #4]
 800f26e:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
 800f272:	4618      	mov	r0, r3
 800f274:	4790      	blx	r2
        return 0;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800f28e:	f083 0301 	eor.w	r3, r3, #1
 800f292:	b2db      	uxtb	r3, r3
 800f294:	2b00      	cmp	r3, #0
 800f296:	d001      	beq.n	800f29c <_ZN3BTD4PollEv+0x1c>
                return 0;
 800f298:	2300      	movs	r3, #0
 800f29a:	e01d      	b.n	800f2d8 <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800f29c:	f7f3 fc92 	bl	8002bc4 <HAL_GetTick>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2a6:	1ad3      	subs	r3, r2, r3
 800f2a8:	43db      	mvns	r3, r3
 800f2aa:	0fdb      	lsrs	r3, r3, #31
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d011      	beq.n	800f2d6 <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800f2b2:	f7f3 fc87 	bl	8002bc4 <HAL_GetTick>
 800f2b6:	4602      	mov	r2, r0
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f2be:	441a      	add	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	679a      	str	r2, [r3, #120]	; 0x78
                HCI_event_task(); // Poll the HCI event pipe
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 f835 	bl	800f334 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 fd38 	bl	800fd40 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f001 fa17 	bl	8010704 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <_ZN3BTD10disconnectEv>:

void BTD::disconnect() {
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	73fb      	strb	r3, [r7, #15]
 800f2ec:	7bfb      	ldrb	r3, [r7, #15]
 800f2ee:	2b03      	cmp	r3, #3
 800f2f0:	d81c      	bhi.n	800f32c <_ZN3BTD10disconnectEv+0x4c>
                if(btService[i])
 800f2f2:	7bfb      	ldrb	r3, [r7, #15]
 800f2f4:	687a      	ldr	r2, [r7, #4]
 800f2f6:	331e      	adds	r3, #30
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	4413      	add	r3, r2
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d010      	beq.n	800f324 <_ZN3BTD10disconnectEv+0x44>
                        btService[i]->disconnect();
 800f302:	7bfb      	ldrb	r3, [r7, #15]
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	331e      	adds	r3, #30
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	4413      	add	r3, r2
 800f30c:	6859      	ldr	r1, [r3, #4]
 800f30e:	7bfb      	ldrb	r3, [r7, #15]
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	331e      	adds	r3, #30
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	4413      	add	r3, r2
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	330c      	adds	r3, #12
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4608      	mov	r0, r1
 800f322:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800f324:	7bfb      	ldrb	r3, [r7, #15]
 800f326:	3301      	adds	r3, #1
 800f328:	73fb      	strb	r3, [r7, #15]
 800f32a:	e7df      	b.n	800f2ec <_ZN3BTD10disconnectEv+0xc>
};
 800f32c:	bf00      	nop
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <_ZN3BTD14HCI_event_taskEv>:

void BTD::HCI_event_task() {
 800f334:	b5b0      	push	{r4, r5, r7, lr}
 800f336:	b08a      	sub	sp, #40	; 0x28
 800f338:	af02      	add	r7, sp, #8
 800f33a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800f33c:	2340      	movs	r3, #64	; 0x40
 800f33e:	81fb      	strh	r3, [r7, #14]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f893 406c 	ldrb.w	r4, [r3, #108]	; 0x6c
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	33a1      	adds	r3, #161	; 0xa1
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
 800f35a:	f107 050e 	add.w	r5, r7, #14
 800f35e:	9201      	str	r2, [sp, #4]
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	462b      	mov	r3, r5
 800f364:	4622      	mov	r2, r4
 800f366:	f004 fd01 	bl	8013d6c <_ZN3USB10inTransferEhhPtPhh>
 800f36a:	4603      	mov	r3, r0
 800f36c:	747b      	strb	r3, [r7, #17]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800f36e:	7c7b      	ldrb	r3, [r7, #17]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d003      	beq.n	800f37c <_ZN3BTD14HCI_event_taskEv+0x48>
 800f374:	7c7b      	ldrb	r3, [r7, #17]
 800f376:	2b04      	cmp	r3, #4
 800f378:	f040 84c3 	bne.w	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                switch(hcibuf[0]) { // Switch on event type
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800f382:	3b01      	subs	r3, #1
 800f384:	2b35      	cmp	r3, #53	; 0x35
 800f386:	f200 84bc 	bhi.w	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
 800f38a:	a201      	add	r2, pc, #4	; (adr r2, 800f390 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800f38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f390:	0800f633 	.word	0x0800f633
 800f394:	0800f6af 	.word	0x0800f6af
 800f398:	0800f87d 	.word	0x0800f87d
 800f39c:	0800f97d 	.word	0x0800f97d
 800f3a0:	0800f8ef 	.word	0x0800f8ef
 800f3a4:	0800fb3b 	.word	0x0800fb3b
 800f3a8:	0800f921 	.word	0x0800f921
 800f3ac:	0800fce5 	.word	0x0800fce5
 800f3b0:	0800fce5 	.word	0x0800fce5
 800f3b4:	0800fd03 	.word	0x0800fd03
 800f3b8:	0800fd03 	.word	0x0800fd03
 800f3bc:	0800fce5 	.word	0x0800fce5
 800f3c0:	0800fce5 	.word	0x0800fce5
 800f3c4:	0800f469 	.word	0x0800f469
 800f3c8:	0800f5cd 	.word	0x0800f5cd
 800f3cc:	0800fd03 	.word	0x0800fd03
 800f3d0:	0800fd03 	.word	0x0800fd03
 800f3d4:	0800fce5 	.word	0x0800fce5
 800f3d8:	0800fce5 	.word	0x0800fce5
 800f3dc:	0800fd03 	.word	0x0800fd03
 800f3e0:	0800fd03 	.word	0x0800fd03
 800f3e4:	0800fa49 	.word	0x0800fa49
 800f3e8:	0800fac1 	.word	0x0800fac1
 800f3ec:	0800fbed 	.word	0x0800fbed
 800f3f0:	0800fce5 	.word	0x0800fce5
 800f3f4:	0800fce5 	.word	0x0800fce5
 800f3f8:	0800fce5 	.word	0x0800fce5
 800f3fc:	0800fd03 	.word	0x0800fd03
 800f400:	0800fd03 	.word	0x0800fd03
 800f404:	0800fd03 	.word	0x0800fd03
 800f408:	0800fd03 	.word	0x0800fd03
 800f40c:	0800fce5 	.word	0x0800fce5
 800f410:	0800fd03 	.word	0x0800fd03
 800f414:	0800fd03 	.word	0x0800fd03
 800f418:	0800fd03 	.word	0x0800fd03
 800f41c:	0800fd03 	.word	0x0800fd03
 800f420:	0800fd03 	.word	0x0800fd03
 800f424:	0800fd03 	.word	0x0800fd03
 800f428:	0800fd03 	.word	0x0800fd03
 800f42c:	0800fd03 	.word	0x0800fd03
 800f430:	0800fd03 	.word	0x0800fd03
 800f434:	0800fd03 	.word	0x0800fd03
 800f438:	0800fd03 	.word	0x0800fd03
 800f43c:	0800fd03 	.word	0x0800fd03
 800f440:	0800fd03 	.word	0x0800fd03
 800f444:	0800fd03 	.word	0x0800fd03
 800f448:	0800fd03 	.word	0x0800fd03
 800f44c:	0800fd03 	.word	0x0800fd03
 800f450:	0800fbcd 	.word	0x0800fbcd
 800f454:	0800fce5 	.word	0x0800fce5
 800f458:	0800fbdd 	.word	0x0800fbdd
 800f45c:	0800fd03 	.word	0x0800fd03
 800f460:	0800fd03 	.word	0x0800fd03
 800f464:	0800fce5 	.word	0x0800fce5
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800f46e:	2b00      	cmp	r3, #0
 800f470:	f040 843a 	bne.w	800fce8 <_ZN3BTD14HCI_event_taskEv+0x9b4>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f47a:	f043 0301 	orr.w	r3, r3, #1
 800f47e:	b29a      	uxth	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d114      	bne.n	800f4ba <_ZN3BTD14HCI_event_taskEv+0x186>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f496:	2b10      	cmp	r3, #16
 800f498:	d10f      	bne.n	800f4ba <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800f4b8:	e087      	b.n	800f5ca <_ZN3BTD14HCI_event_taskEv+0x296>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f4c0:	2b04      	cmp	r3, #4
 800f4c2:	d158      	bne.n	800f576 <_ZN3BTD14HCI_event_taskEv+0x242>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f4ca:	2b10      	cmp	r3, #16
 800f4cc:	d153      	bne.n	800f576 <_ZN3BTD14HCI_event_taskEv+0x242>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f4d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d142      	bne.n	800f562 <_ZN3BTD14HCI_event_taskEv+0x22e>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d120      	bne.n	800f528 <_ZN3BTD14HCI_event_taskEv+0x1f4>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
 800f4e6:	2180      	movs	r1, #128	; 0x80
 800f4e8:	48a9      	ldr	r0, [pc, #676]	; (800f790 <_ZN3BTD14HCI_event_taskEv+0x45c>)
 800f4ea:	f006 fa0d 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800f4f4:	f003 0308 	and.w	r3, r3, #8
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d008      	beq.n	800f50e <_ZN3BTD14HCI_event_taskEv+0x1da>
                                                                        simple_pairing_supported = true;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2201      	movs	r2, #1
 800f500:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
 800f504:	2180      	movs	r1, #128	; 0x80
 800f506:	48a3      	ldr	r0, [pc, #652]	; (800f794 <_ZN3BTD14HCI_event_taskEv+0x460>)
 800f508:	f006 f9fe 	bl	8015908 <_Z8E_NotifyPKci>
 800f50c:	e007      	b.n	800f51e <_ZN3BTD14HCI_event_taskEv+0x1ea>
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2200      	movs	r2, #0
 800f512:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("does NOT support"), 0x80);
 800f516:	2180      	movs	r1, #128	; 0x80
 800f518:	489f      	ldr	r0, [pc, #636]	; (800f798 <_ZN3BTD14HCI_event_taskEv+0x464>)
 800f51a:	f006 f9f5 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                                                }
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR(" secure simple pairing (controller support)"), 0x80);
 800f51e:	2180      	movs	r1, #128	; 0x80
 800f520:	489e      	ldr	r0, [pc, #632]	; (800f79c <_ZN3BTD14HCI_event_taskEv+0x468>)
 800f522:	f006 f9f1 	bl	8015908 <_Z8E_NotifyPKci>
 800f526:	e01c      	b.n	800f562 <_ZN3BTD14HCI_event_taskEv+0x22e>
#endif
                                                        } else if(hcibuf[6] == 1) { // Page 1
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d117      	bne.n	800f562 <_ZN3BTD14HCI_event_taskEv+0x22e>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
 800f532:	2180      	movs	r1, #128	; 0x80
 800f534:	4896      	ldr	r0, [pc, #600]	; (800f790 <_ZN3BTD14HCI_event_taskEv+0x45c>)
 800f536:	f006 f9e7 	bl	8015908 <_Z8E_NotifyPKci>
                                                                if(hcibuf[8 + 0] & (1U << 0))
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800f540:	f003 0301 	and.w	r3, r3, #1
 800f544:	2b00      	cmp	r3, #0
 800f546:	d004      	beq.n	800f552 <_ZN3BTD14HCI_event_taskEv+0x21e>
                                                                        Notify(PSTR("supports"), 0x80);
 800f548:	2180      	movs	r1, #128	; 0x80
 800f54a:	4892      	ldr	r0, [pc, #584]	; (800f794 <_ZN3BTD14HCI_event_taskEv+0x460>)
 800f54c:	f006 f9dc 	bl	8015908 <_Z8E_NotifyPKci>
 800f550:	e003      	b.n	800f55a <_ZN3BTD14HCI_event_taskEv+0x226>
                                                                else
                                                                        Notify(PSTR("does NOT support"), 0x80);
 800f552:	2180      	movs	r1, #128	; 0x80
 800f554:	4890      	ldr	r0, [pc, #576]	; (800f798 <_ZN3BTD14HCI_event_taskEv+0x464>)
 800f556:	f006 f9d7 	bl	8015908 <_Z8E_NotifyPKci>
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
 800f55a:	2180      	movs	r1, #128	; 0x80
 800f55c:	4890      	ldr	r0, [pc, #576]	; (800f7a0 <_ZN3BTD14HCI_event_taskEv+0x46c>)
 800f55e:	f006 f9d3 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f568:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800f574:	e029      	b.n	800f5ca <_ZN3BTD14HCI_event_taskEv+0x296>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f57c:	2b09      	cmp	r3, #9
 800f57e:	f040 83b3 	bne.w	800fce8 <_ZN3BTD14HCI_event_taskEv+0x9b4>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f588:	2b10      	cmp	r3, #16
 800f58a:	f040 83ad 	bne.w	800fce8 <_ZN3BTD14HCI_event_taskEv+0x9b4>
                                                for(uint8_t i = 0; i < 6; i++)
 800f58e:	2300      	movs	r3, #0
 800f590:	77fb      	strb	r3, [r7, #31]
 800f592:	7ffb      	ldrb	r3, [r7, #31]
 800f594:	2b05      	cmp	r3, #5
 800f596:	d80e      	bhi.n	800f5b6 <_ZN3BTD14HCI_event_taskEv+0x282>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800f598:	7ffb      	ldrb	r3, [r7, #31]
 800f59a:	1d9a      	adds	r2, r3, #6
 800f59c:	7ffb      	ldrb	r3, [r7, #31]
 800f59e:	6879      	ldr	r1, [r7, #4]
 800f5a0:	440a      	add	r2, r1
 800f5a2:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	460a      	mov	r2, r1
 800f5ac:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800f5ae:	7ffb      	ldrb	r3, [r7, #31]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	77fb      	strb	r3, [r7, #31]
 800f5b4:	e7ed      	b.n	800f592 <_ZN3BTD14HCI_event_taskEv+0x25e>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f5bc:	f043 0320 	orr.w	r3, r3, #32
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                        }
                                }
                                break;
 800f5c8:	e38e      	b.n	800fce8 <_ZN3BTD14HCI_event_taskEv+0x9b4>
 800f5ca:	e38d      	b.n	800fce8 <_ZN3BTD14HCI_event_taskEv+0x9b4>

                        case EV_COMMAND_STATUS:
                                if(hcibuf[2]) { // Show status on serial if not OK
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	f000 838a 	beq.w	800fcec <_ZN3BTD14HCI_event_taskEv+0x9b8>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nHCI Command Failed: "), 0x80);
 800f5d8:	2180      	movs	r1, #128	; 0x80
 800f5da:	4872      	ldr	r0, [pc, #456]	; (800f7a4 <_ZN3BTD14HCI_event_taskEv+0x470>)
 800f5dc:	f006 f994 	bl	8015908 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f5e6:	2180      	movs	r1, #128	; 0x80
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f002 f9ec 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR("\r\nNum HCI Command Packets: "), 0x80);
 800f5ee:	2180      	movs	r1, #128	; 0x80
 800f5f0:	486d      	ldr	r0, [pc, #436]	; (800f7a8 <_ZN3BTD14HCI_event_taskEv+0x474>)
 800f5f2:	f006 f989 	bl	8015908 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[3], 0x80);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f5fc:	2180      	movs	r1, #128	; 0x80
 800f5fe:	4618      	mov	r0, r3
 800f600:	f002 f9e1 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR("\r\nCommand Opcode: "), 0x80);
 800f604:	2180      	movs	r1, #128	; 0x80
 800f606:	4869      	ldr	r0, [pc, #420]	; (800f7ac <_ZN3BTD14HCI_event_taskEv+0x478>)
 800f608:	f006 f97e 	bl	8015908 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[4], 0x80);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f612:	2180      	movs	r1, #128	; 0x80
 800f614:	4618      	mov	r0, r3
 800f616:	f002 f9d6 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(" "), 0x80);
 800f61a:	2180      	movs	r1, #128	; 0x80
 800f61c:	4864      	ldr	r0, [pc, #400]	; (800f7b0 <_ZN3BTD14HCI_event_taskEv+0x47c>)
 800f61e:	f006 f973 	bl	8015908 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[5], 0x80);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800f628:	2180      	movs	r1, #128	; 0x80
 800f62a:	4618      	mov	r0, r3
 800f62c:	f002 f9cb 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
#endif
                                }
                                break;
 800f630:	e35c      	b.n	800fcec <_ZN3BTD14HCI_event_taskEv+0x9b8>

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800f638:	2b04      	cmp	r3, #4
 800f63a:	d92f      	bls.n	800f69c <_ZN3BTD14HCI_event_taskEv+0x368>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f642:	2b00      	cmp	r3, #0
 800f644:	d104      	bne.n	800f650 <_ZN3BTD14HCI_event_taskEv+0x31c>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d025      	beq.n	800f69c <_ZN3BTD14HCI_event_taskEv+0x368>
                                        inquiry_counter = 0;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2200      	movs	r2, #0
 800f654:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#ifdef DEBUG_USB_HOST
                                        if(pairWithWii)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d004      	beq.n	800f66c <_ZN3BTD14HCI_event_taskEv+0x338>
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
 800f662:	2180      	movs	r1, #128	; 0x80
 800f664:	4853      	ldr	r0, [pc, #332]	; (800f7b4 <_ZN3BTD14HCI_event_taskEv+0x480>)
 800f666:	f006 f94f 	bl	8015908 <_Z8E_NotifyPKci>
 800f66a:	e003      	b.n	800f674 <_ZN3BTD14HCI_event_taskEv+0x340>
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
 800f66c:	2180      	movs	r1, #128	; 0x80
 800f66e:	4852      	ldr	r0, [pc, #328]	; (800f7b8 <_ZN3BTD14HCI_event_taskEv+0x484>)
 800f670:	f006 f94a 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                        connectToWii = false;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                                        pairWithWii = false;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                                        connectToHIDDevice = false;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2200      	movs	r2, #0
 800f688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                                        pairWithHIDDevice = false;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2200      	movs	r2, #0
 800f690:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                                        hci_state = HCI_SCANNING_STATE;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	220a      	movs	r2, #10
 800f698:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                }
                                inquiry_counter++;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	b2da      	uxtb	r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                                break;
 800f6ac:	e329      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	f000 831b 	beq.w	800fcf0 <_ZN3BTD14HCI_event_taskEv+0x9bc>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	77bb      	strb	r3, [r7, #30]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f6c4:	7fba      	ldrb	r2, [r7, #30]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	f080 8312 	bcs.w	800fcf0 <_ZN3BTD14HCI_event_taskEv+0x9bc>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f6d2:	00db      	lsls	r3, r3, #3
 800f6d4:	b2da      	uxtb	r2, r3
 800f6d6:	7fbb      	ldrb	r3, [r7, #30]
 800f6d8:	4619      	mov	r1, r3
 800f6da:	0049      	lsls	r1, r1, #1
 800f6dc:	440b      	add	r3, r1
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	4413      	add	r3, r2
 800f6e2:	743b      	strb	r3, [r7, #16]

                                                for(uint8_t j = 0; j < 3; j++)
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	777b      	strb	r3, [r7, #29]
 800f6e8:	7f7b      	ldrb	r3, [r7, #29]
 800f6ea:	2b02      	cmp	r3, #2
 800f6ec:	d811      	bhi.n	800f712 <_ZN3BTD14HCI_event_taskEv+0x3de>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800f6ee:	7f7b      	ldrb	r3, [r7, #29]
 800f6f0:	1d1a      	adds	r2, r3, #4
 800f6f2:	7c3b      	ldrb	r3, [r7, #16]
 800f6f4:	441a      	add	r2, r3
 800f6f6:	7f7b      	ldrb	r3, [r7, #29]
 800f6f8:	6879      	ldr	r1, [r7, #4]
 800f6fa:	440a      	add	r2, r1
 800f6fc:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	4413      	add	r3, r2
 800f704:	460a      	mov	r2, r1
 800f706:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
                                                for(uint8_t j = 0; j < 3; j++)
 800f70a:	7f7b      	ldrb	r3, [r7, #29]
 800f70c:	3301      	adds	r3, #1
 800f70e:	777b      	strb	r3, [r7, #29]
 800f710:	e7ea      	b.n	800f6e8 <_ZN3BTD14HCI_event_taskEv+0x3b4>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d04f      	beq.n	800f7bc <_ZN3BTD14HCI_event_taskEv+0x488>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800f722:	2b00      	cmp	r3, #0
 800f724:	d14a      	bne.n	800f7bc <_ZN3BTD14HCI_event_taskEv+0x488>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f72c:	2b05      	cmp	r3, #5
 800f72e:	d145      	bne.n	800f7bc <_ZN3BTD14HCI_event_taskEv+0x488>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f736:	f003 030c 	and.w	r3, r3, #12
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d03e      	beq.n	800f7bc <_ZN3BTD14HCI_event_taskEv+0x488>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2201      	movs	r2, #1
 800f742:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

                                                        for(uint8_t j = 0; j < 6; j++)
 800f746:	2300      	movs	r3, #0
 800f748:	773b      	strb	r3, [r7, #28]
 800f74a:	7f3b      	ldrb	r3, [r7, #28]
 800f74c:	2b05      	cmp	r3, #5
 800f74e:	d814      	bhi.n	800f77a <_ZN3BTD14HCI_event_taskEv+0x446>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800f750:	7f3b      	ldrb	r3, [r7, #28]
 800f752:	1cd9      	adds	r1, r3, #3
 800f754:	7fba      	ldrb	r2, [r7, #30]
 800f756:	4613      	mov	r3, r2
 800f758:	005b      	lsls	r3, r3, #1
 800f75a:	4413      	add	r3, r2
 800f75c:	005b      	lsls	r3, r3, #1
 800f75e:	18ca      	adds	r2, r1, r3
 800f760:	7f3b      	ldrb	r3, [r7, #28]
 800f762:	6879      	ldr	r1, [r7, #4]
 800f764:	440a      	add	r2, r1
 800f766:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	4413      	add	r3, r2
 800f76e:	460a      	mov	r2, r1
 800f770:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800f772:	7f3b      	ldrb	r3, [r7, #28]
 800f774:	3301      	adds	r3, #1
 800f776:	773b      	strb	r3, [r7, #28]
 800f778:	e7e7      	b.n	800f74a <_ZN3BTD14HCI_event_taskEv+0x416>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f784:	b29a      	uxth	r2, r3
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                                        break;
 800f78c:	e075      	b.n	800f87a <_ZN3BTD14HCI_event_taskEv+0x546>
 800f78e:	bf00      	nop
 800f790:	0801609c 	.word	0x0801609c
 800f794:	080160a8 	.word	0x080160a8
 800f798:	080160b4 	.word	0x080160b4
 800f79c:	080160c8 	.word	0x080160c8
 800f7a0:	080160f4 	.word	0x080160f4
 800f7a4:	0801611c 	.word	0x0801611c
 800f7a8:	08016134 	.word	0x08016134
 800f7ac:	08016150 	.word	0x08016150
 800f7b0:	08016164 	.word	0x08016164
 800f7b4:	08016168 	.word	0x08016168
 800f7b8:	08016180 	.word	0x08016180
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d055      	beq.n	800f872 <_ZN3BTD14HCI_event_taskEv+0x53e>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f7cc:	f003 030f 	and.w	r3, r3, #15
 800f7d0:	2b05      	cmp	r3, #5
 800f7d2:	d14e      	bne.n	800f872 <_ZN3BTD14HCI_event_taskEv+0x53e>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f7da:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d047      	beq.n	800f872 <_ZN3BTD14HCI_event_taskEv+0x53e>
#ifdef DEBUG_USB_HOST
                                                        checkRemoteName = true; // Used to print name in the serial monitor if serial debugging is enabled
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

                                                        if(classOfDevice[0] & 0x80)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f7f0:	b25b      	sxtb	r3, r3
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	da03      	bge.n	800f7fe <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                                Notify(PSTR("\r\nMouse found"), 0x80);
 800f7f6:	2180      	movs	r1, #128	; 0x80
 800f7f8:	48a7      	ldr	r0, [pc, #668]	; (800fa98 <_ZN3BTD14HCI_event_taskEv+0x764>)
 800f7fa:	f006 f885 	bl	8015908 <_Z8E_NotifyPKci>
                                                        if(classOfDevice[0] & 0x40)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d003      	beq.n	800f814 <_ZN3BTD14HCI_event_taskEv+0x4e0>
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
 800f80c:	2180      	movs	r1, #128	; 0x80
 800f80e:	48a3      	ldr	r0, [pc, #652]	; (800fa9c <_ZN3BTD14HCI_event_taskEv+0x768>)
 800f810:	f006 f87a 	bl	8015908 <_Z8E_NotifyPKci>
                                                        if(classOfDevice[0] & 0x08)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f81a:	f003 0308 	and.w	r3, r3, #8
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d003      	beq.n	800f82a <_ZN3BTD14HCI_event_taskEv+0x4f6>
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
 800f822:	2180      	movs	r1, #128	; 0x80
 800f824:	489e      	ldr	r0, [pc, #632]	; (800faa0 <_ZN3BTD14HCI_event_taskEv+0x76c>)
 800f826:	f006 f86f 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800f82a:	2300      	movs	r3, #0
 800f82c:	76fb      	strb	r3, [r7, #27]
 800f82e:	7efb      	ldrb	r3, [r7, #27]
 800f830:	2b05      	cmp	r3, #5
 800f832:	d814      	bhi.n	800f85e <_ZN3BTD14HCI_event_taskEv+0x52a>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800f834:	7efb      	ldrb	r3, [r7, #27]
 800f836:	1cd9      	adds	r1, r3, #3
 800f838:	7fba      	ldrb	r2, [r7, #30]
 800f83a:	4613      	mov	r3, r2
 800f83c:	005b      	lsls	r3, r3, #1
 800f83e:	4413      	add	r3, r2
 800f840:	005b      	lsls	r3, r3, #1
 800f842:	18ca      	adds	r2, r1, r3
 800f844:	7efb      	ldrb	r3, [r7, #27]
 800f846:	6879      	ldr	r1, [r7, #4]
 800f848:	440a      	add	r2, r1
 800f84a:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	4413      	add	r3, r2
 800f852:	460a      	mov	r2, r1
 800f854:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800f856:	7efb      	ldrb	r3, [r7, #27]
 800f858:	3301      	adds	r3, #1
 800f85a:	76fb      	strb	r3, [r7, #27]
 800f85c:	e7e7      	b.n	800f82e <_ZN3BTD14HCI_event_taskEv+0x4fa>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f868:	b29a      	uxth	r2, r3
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                                        break;
 800f870:	e003      	b.n	800f87a <_ZN3BTD14HCI_event_taskEv+0x546>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800f872:	7fbb      	ldrb	r3, [r7, #30]
 800f874:	3301      	adds	r3, #1
 800f876:	77bb      	strb	r3, [r7, #30]
 800f878:	e721      	b.n	800f6be <_ZN3BTD14HCI_event_taskEv+0x38a>
                                                }
                                        }
                                }
                                break;
 800f87a:	e239      	b.n	800fcf0 <_ZN3BTD14HCI_event_taskEv+0x9bc>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f886:	b29a      	uxth	r2, r3
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                if(!hcibuf[2]) { // Check if connected OK
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f894:	2b00      	cmp	r3, #0
 800f896:	d11a      	bne.n	800f8ce <_ZN3BTD14HCI_event_taskEv+0x59a>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f89e:	b21a      	sxth	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f8a6:	021b      	lsls	r3, r3, #8
 800f8a8:	b21b      	sxth	r3, r3
 800f8aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f8ae:	b21b      	sxth	r3, r3
 800f8b0:	4313      	orrs	r3, r2
 800f8b2:	b21b      	sxth	r3, r3
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f8c0:	f043 0302 	orr.w	r3, r3, #2
 800f8c4:	b29a      	uxth	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800f8cc:	e219      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2206      	movs	r2, #6
 800f8d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
 800f8d6:	2180      	movs	r1, #128	; 0x80
 800f8d8:	4872      	ldr	r0, [pc, #456]	; (800faa4 <_ZN3BTD14HCI_event_taskEv+0x770>)
 800f8da:	f006 f815 	bl	8015908 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f8e4:	2180      	movs	r1, #128	; 0x80
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f002 f86d 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                break;
 800f8ec:	e209      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f040 81fd 	bne.w	800fcf4 <_ZN3BTD14HCI_event_taskEv+0x9c0>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f900:	f043 0304 	orr.w	r3, r3, #4
 800f904:	b29a      	uxth	r2, r3
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f912:	f023 0302 	bic.w	r3, r3, #2
 800f916:	b29a      	uxth	r2, r3
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                }
                                break;
 800f91e:	e1e9      	b.n	800fcf4 <_ZN3BTD14HCI_event_taskEv+0x9c0>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800f926:	2b00      	cmp	r3, #0
 800f928:	f040 81e6 	bne.w	800fcf8 <_ZN3BTD14HCI_event_taskEv+0x9c4>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800f92c:	2300      	movs	r3, #0
 800f92e:	76bb      	strb	r3, [r7, #26]
 800f930:	7ebb      	ldrb	r3, [r7, #26]
 800f932:	2b1d      	cmp	r3, #29
 800f934:	d818      	bhi.n	800f968 <_ZN3BTD14HCI_event_taskEv+0x634>
                                                remote_name[i] = hcibuf[9 + i];
 800f936:	7ebb      	ldrb	r3, [r7, #26]
 800f938:	f103 0209 	add.w	r2, r3, #9
 800f93c:	7ebb      	ldrb	r3, [r7, #26]
 800f93e:	6879      	ldr	r1, [r7, #4]
 800f940:	440a      	add	r2, r1
 800f942:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	4413      	add	r3, r2
 800f94a:	460a      	mov	r2, r1
 800f94c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800f950:	7ebb      	ldrb	r3, [r7, #26]
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	4413      	add	r3, r2
 800f956:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d003      	beq.n	800f966 <_ZN3BTD14HCI_event_taskEv+0x632>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800f95e:	7ebb      	ldrb	r3, [r7, #26]
 800f960:	3301      	adds	r3, #1
 800f962:	76bb      	strb	r3, [r7, #26]
 800f964:	e7e4      	b.n	800f930 <_ZN3BTD14HCI_event_taskEv+0x5fc>
                                                        break;
 800f966:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800f96e:	f043 0308 	orr.w	r3, r3, #8
 800f972:	b29a      	uxth	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                }
                                break;
 800f97a:	e1bd      	b.n	800fcf8 <_ZN3BTD14HCI_event_taskEv+0x9c4>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800f97c:	2300      	movs	r3, #0
 800f97e:	767b      	strb	r3, [r7, #25]
 800f980:	7e7b      	ldrb	r3, [r7, #25]
 800f982:	2b05      	cmp	r3, #5
 800f984:	d80e      	bhi.n	800f9a4 <_ZN3BTD14HCI_event_taskEv+0x670>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800f986:	7e7b      	ldrb	r3, [r7, #25]
 800f988:	1c9a      	adds	r2, r3, #2
 800f98a:	7e7b      	ldrb	r3, [r7, #25]
 800f98c:	6879      	ldr	r1, [r7, #4]
 800f98e:	440a      	add	r2, r1
 800f990:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	4413      	add	r3, r2
 800f998:	460a      	mov	r2, r1
 800f99a:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800f99c:	7e7b      	ldrb	r3, [r7, #25]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	767b      	strb	r3, [r7, #25]
 800f9a2:	e7ed      	b.n	800f980 <_ZN3BTD14HCI_event_taskEv+0x64c>

                                for(uint8_t i = 0; i < 3; i++)
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	763b      	strb	r3, [r7, #24]
 800f9a8:	7e3b      	ldrb	r3, [r7, #24]
 800f9aa:	2b02      	cmp	r3, #2
 800f9ac:	d810      	bhi.n	800f9d0 <_ZN3BTD14HCI_event_taskEv+0x69c>
                                        classOfDevice[i] = hcibuf[i + 8];
 800f9ae:	7e3b      	ldrb	r3, [r7, #24]
 800f9b0:	f103 0208 	add.w	r2, r3, #8
 800f9b4:	7e3b      	ldrb	r3, [r7, #24]
 800f9b6:	6879      	ldr	r1, [r7, #4]
 800f9b8:	440a      	add	r2, r1
 800f9ba:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	4413      	add	r3, r2
 800f9c2:	460a      	mov	r2, r1
 800f9c4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
                                for(uint8_t i = 0; i < 3; i++)
 800f9c8:	7e3b      	ldrb	r3, [r7, #24]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	763b      	strb	r3, [r7, #24]
 800f9ce:	e7eb      	b.n	800f9a8 <_ZN3BTD14HCI_event_taskEv+0x674>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f9d6:	f003 030f 	and.w	r3, r3, #15
 800f9da:	2b05      	cmp	r3, #5
 800f9dc:	d12a      	bne.n	800fa34 <_ZN3BTD14HCI_event_taskEv+0x700>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f9e4:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d023      	beq.n	800fa34 <_ZN3BTD14HCI_event_taskEv+0x700>
#ifdef DEBUG_USB_HOST
                                        if(classOfDevice[0] & 0x80)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f9f2:	b25b      	sxtb	r3, r3
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	da03      	bge.n	800fa00 <_ZN3BTD14HCI_event_taskEv+0x6cc>
                                                Notify(PSTR("\r\nMouse is connecting"), 0x80);
 800f9f8:	2180      	movs	r1, #128	; 0x80
 800f9fa:	482b      	ldr	r0, [pc, #172]	; (800faa8 <_ZN3BTD14HCI_event_taskEv+0x774>)
 800f9fc:	f005 ff84 	bl	8015908 <_Z8E_NotifyPKci>
                                        if(classOfDevice[0] & 0x40)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fa06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d003      	beq.n	800fa16 <_ZN3BTD14HCI_event_taskEv+0x6e2>
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
 800fa0e:	2180      	movs	r1, #128	; 0x80
 800fa10:	4826      	ldr	r0, [pc, #152]	; (800faac <_ZN3BTD14HCI_event_taskEv+0x778>)
 800fa12:	f005 ff79 	bl	8015908 <_Z8E_NotifyPKci>
                                        if(classOfDevice[0] & 0x08)
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800fa1c:	f003 0308 	and.w	r3, r3, #8
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d003      	beq.n	800fa2c <_ZN3BTD14HCI_event_taskEv+0x6f8>
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
 800fa24:	2180      	movs	r1, #128	; 0x80
 800fa26:	4822      	ldr	r0, [pc, #136]	; (800fab0 <_ZN3BTD14HCI_event_taskEv+0x77c>)
 800fa28:	f005 ff6e 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                        incomingHIDDevice = true;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fa3a:	f043 0310 	orr.w	r3, r3, #16
 800fa3e:	b29a      	uxth	r2, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                break;
 800fa46:	e15c      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d007      	beq.n	800fa62 <_ZN3BTD14HCI_event_taskEv+0x72e>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
 800fa52:	2180      	movs	r1, #128	; 0x80
 800fa54:	4817      	ldr	r0, [pc, #92]	; (800fab4 <_ZN3BTD14HCI_event_taskEv+0x780>)
 800fa56:	f005 ff57 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                        hci_pin_code_request_reply();
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f001 f9b6 	bl	8010dcc <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800fa60:	e14f      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                } else if(btdPin != NULL) {
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	691b      	ldr	r3, [r3, #16]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00d      	beq.n	800fa86 <_ZN3BTD14HCI_event_taskEv+0x752>
                                        Notify(PSTR("\r\nBluetooth pin is set too: "), 0x80);
 800fa6a:	2180      	movs	r1, #128	; 0x80
 800fa6c:	4812      	ldr	r0, [pc, #72]	; (800fab8 <_ZN3BTD14HCI_event_taskEv+0x784>)
 800fa6e:	f005 ff4b 	bl	8015908 <_Z8E_NotifyPKci>
                                        NotifyStr(btdPin, 0x80);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	691b      	ldr	r3, [r3, #16]
 800fa76:	2180      	movs	r1, #128	; 0x80
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f005 ff6d 	bl	8015958 <_Z11E_NotifyStrPKci>
                                        hci_pin_code_request_reply();
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f001 f9a4 	bl	8010dcc <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800fa84:	e13d      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
 800fa86:	2180      	movs	r1, #128	; 0x80
 800fa88:	480c      	ldr	r0, [pc, #48]	; (800fabc <_ZN3BTD14HCI_event_taskEv+0x788>)
 800fa8a:	f005 ff3d 	bl	8015908 <_Z8E_NotifyPKci>
                                        hci_pin_code_negative_request_reply();
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f001 fa56 	bl	8010f40 <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800fa94:	e135      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
 800fa96:	bf00      	nop
 800fa98:	0801619c 	.word	0x0801619c
 800fa9c:	080161ac 	.word	0x080161ac
 800faa0:	080161c0 	.word	0x080161c0
 800faa4:	080161d0 	.word	0x080161d0
 800faa8:	080161e8 	.word	0x080161e8
 800faac:	08016200 	.word	0x08016200
 800fab0:	0801621c 	.word	0x0801621c
 800fab4:	08016234 	.word	0x08016234
 800fab8:	0801624c 	.word	0x0801624c
 800fabc:	0801626c 	.word	0x0801626c

                        case EV_LINK_KEY_REQUEST: //For the Xbox One S Controller we can't use the negative reply, other controllers use negative_reply
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
 800fac0:	2180      	movs	r1, #128	; 0x80
 800fac2:	4892      	ldr	r0, [pc, #584]	; (800fd0c <_ZN3BTD14HCI_event_taskEv+0x9d8>)
 800fac4:	f005 ff20 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                if ((!pairWithHIDDevice || incomingHIDDevice) && incomingXboxOneS) {
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800face:	f083 0301 	eor.w	r3, r3, #1
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d104      	bne.n	800fae2 <_ZN3BTD14HCI_event_taskEv+0x7ae>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d023      	beq.n	800fb2a <_ZN3BTD14HCI_event_taskEv+0x7f6>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d01e      	beq.n	800fb2a <_ZN3BTD14HCI_event_taskEv+0x7f6>
                                        for(uint8_t i = 0; i < 16; i ++) {
 800faec:	2300      	movs	r3, #0
 800faee:	75fb      	strb	r3, [r7, #23]
 800faf0:	7dfb      	ldrb	r3, [r7, #23]
 800faf2:	2b0f      	cmp	r3, #15
 800faf4:	d810      	bhi.n	800fb18 <_ZN3BTD14HCI_event_taskEv+0x7e4>
                                                link_key[i] = EEPROM.read(i+6);
 800faf6:	7dfb      	ldrb	r3, [r7, #23]
 800faf8:	3306      	adds	r3, #6
 800fafa:	7dfc      	ldrb	r4, [r7, #23]
 800fafc:	4619      	mov	r1, r3
 800fafe:	4884      	ldr	r0, [pc, #528]	; (800fd10 <_ZN3BTD14HCI_event_taskEv+0x9dc>)
 800fb00:	f7fe fe58 	bl	800e7b4 <_ZN11EEPROMClass4readEi>
 800fb04:	4603      	mov	r3, r0
 800fb06:	461a      	mov	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4423      	add	r3, r4
 800fb0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                        for(uint8_t i = 0; i < 16; i ++) {
 800fb10:	7dfb      	ldrb	r3, [r7, #23]
 800fb12:	3301      	adds	r3, #1
 800fb14:	75fb      	strb	r3, [r7, #23]
 800fb16:	e7eb      	b.n	800faf0 <_ZN3BTD14HCI_event_taskEv+0x7bc>
                                        }
                                        hci_link_key_request_reply();
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f001 fa4c 	bl	8010fb6 <_ZN3BTD26hci_link_key_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nhci_link_key_request_reply"), 0x80);
 800fb1e:	2180      	movs	r1, #128	; 0x80
 800fb20:	487c      	ldr	r0, [pc, #496]	; (800fd14 <_ZN3BTD14HCI_event_taskEv+0x9e0>)
 800fb22:	f005 fef1 	bl	8015908 <_Z8E_NotifyPKci>
 800fb26:	bf00      	nop
                                        hci_link_key_request_negative_reply();
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nhci_link_key_request_negative_reply"), 0x80);
#endif
                                }
                                break;
 800fb28:	e0eb      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                        hci_link_key_request_negative_reply();
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f001 fade 	bl	80110ec <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                        Notify(PSTR("\r\nhci_link_key_request_negative_reply"), 0x80);
 800fb30:	2180      	movs	r1, #128	; 0x80
 800fb32:	4879      	ldr	r0, [pc, #484]	; (800fd18 <_ZN3BTD14HCI_event_taskEv+0x9e4>)
 800fb34:	f005 fee8 	bl	8015908 <_Z8E_NotifyPKci>
                                break;
 800fb38:	e0e3      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d12d      	bne.n	800fba0 <_ZN3BTD14HCI_event_taskEv+0x86c>
                                        if(pairWithWii && !connectToWii) {
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d010      	beq.n	800fb70 <_ZN3BTD14HCI_event_taskEv+0x83c>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800fb54:	f083 0301 	eor.w	r3, r3, #1
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d008      	beq.n	800fb70 <_ZN3BTD14HCI_event_taskEv+0x83c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
 800fb5e:	2180      	movs	r1, #128	; 0x80
 800fb60:	486e      	ldr	r0, [pc, #440]	; (800fd1c <_ZN3BTD14HCI_event_taskEv+0x9e8>)
 800fb62:	f005 fed1 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2201      	movs	r2, #1
 800fb6a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800fb6e:	e0c5      	b.n	800fcfc <_ZN3BTD14HCI_event_taskEv+0x9c8>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	f000 80c0 	beq.w	800fcfc <_ZN3BTD14HCI_event_taskEv+0x9c8>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fb82:	f083 0301 	eor.w	r3, r3, #1
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	f000 80b7 	beq.w	800fcfc <_ZN3BTD14HCI_event_taskEv+0x9c8>
                                                Notify(PSTR("\r\nPairing successful with HID device"), 0x80);
 800fb8e:	2180      	movs	r1, #128	; 0x80
 800fb90:	4863      	ldr	r0, [pc, #396]	; (800fd20 <_ZN3BTD14HCI_event_taskEv+0x9ec>)
 800fb92:	f005 feb9 	bl	8015908 <_Z8E_NotifyPKci>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2201      	movs	r2, #1
 800fb9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                                break;
 800fb9e:	e0ad      	b.n	800fcfc <_ZN3BTD14HCI_event_taskEv+0x9c8>
                                        Notify(PSTR("\r\nPairing Failed: "), 0x80);
 800fba0:	2180      	movs	r1, #128	; 0x80
 800fba2:	4860      	ldr	r0, [pc, #384]	; (800fd24 <_ZN3BTD14HCI_event_taskEv+0x9f0>)
 800fba4:	f005 feb0 	bl	8015908 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800fbae:	2180      	movs	r1, #128	; 0x80
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f001 ff08 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                        hci_disconnect(hci_handle);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	8b5b      	ldrh	r3, [r3, #26]
 800fbba:	4619      	mov	r1, r3
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f001 fb7d 	bl	80112bc <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2210      	movs	r2, #16
 800fbc6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                break;
 800fbca:	e097      	b.n	800fcfc <_ZN3BTD14HCI_event_taskEv+0x9c8>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
 800fbcc:	2180      	movs	r1, #128	; 0x80
 800fbce:	4856      	ldr	r0, [pc, #344]	; (800fd28 <_ZN3BTD14HCI_event_taskEv+0x9f4>)
 800fbd0:	f005 fe9a 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                hci_io_capability_request_reply();
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f001 fac4 	bl	8011162 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800fbda:	e092      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
#endif
                                break;

                        case EV_USER_CONFIRMATION_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nUser confirmation Request"), 0x80);
 800fbdc:	2180      	movs	r1, #128	; 0x80
 800fbde:	4853      	ldr	r0, [pc, #332]	; (800fd2c <_ZN3BTD14HCI_event_taskEv+0x9f8>)
 800fbe0:	f005 fe92 	bl	8015908 <_Z8E_NotifyPKci>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f001 fb03 	bl	80111f0 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800fbea:	e08a      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                }
#endif
                                break;
                        
                        case EV_LINK_KEY_NOTIFICATION: //Xbox One S BT Controller, when pairing write the address and link key to EEPROM
                                if(incomingXboxOneS) {
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	f000 8084 	beq.w	800fd00 <_ZN3BTD14HCI_event_taskEv+0x9cc>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nLink Key Notification"), 0x80);
 800fbf8:	2180      	movs	r1, #128	; 0x80
 800fbfa:	484d      	ldr	r0, [pc, #308]	; (800fd30 <_ZN3BTD14HCI_event_taskEv+0x9fc>)
 800fbfc:	f005 fe84 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                        for(uint8_t i = 0; i < 16; i++) {
 800fc00:	2300      	movs	r3, #0
 800fc02:	75bb      	strb	r3, [r7, #22]
 800fc04:	7dbb      	ldrb	r3, [r7, #22]
 800fc06:	2b0f      	cmp	r3, #15
 800fc08:	d810      	bhi.n	800fc2c <_ZN3BTD14HCI_event_taskEv+0x8f8>
                                                link_key[i] = hcibuf[8 + i];
 800fc0a:	7dbb      	ldrb	r3, [r7, #22]
 800fc0c:	f103 0208 	add.w	r2, r3, #8
 800fc10:	7dbb      	ldrb	r3, [r7, #22]
 800fc12:	6879      	ldr	r1, [r7, #4]
 800fc14:	440a      	add	r2, r1
 800fc16:	f892 10a1 	ldrb.w	r1, [r2, #161]	; 0xa1
 800fc1a:	687a      	ldr	r2, [r7, #4]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	460a      	mov	r2, r1
 800fc20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                        for(uint8_t i = 0; i < 16; i++) {
 800fc24:	7dbb      	ldrb	r3, [r7, #22]
 800fc26:	3301      	adds	r3, #1
 800fc28:	75bb      	strb	r3, [r7, #22]
 800fc2a:	e7eb      	b.n	800fc04 <_ZN3BTD14HCI_event_taskEv+0x8d0>
                                        }
                                
                                        for(uint8_t i = 0; i < 6; i++) {
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	757b      	strb	r3, [r7, #21]
 800fc30:	7d7b      	ldrb	r3, [r7, #21]
 800fc32:	2b05      	cmp	r3, #5
 800fc34:	d80c      	bhi.n	800fc50 <_ZN3BTD14HCI_event_taskEv+0x91c>
                                                EEPROM.write(i, disc_bdaddr[i]);
 800fc36:	7d79      	ldrb	r1, [r7, #21]
 800fc38:	7d7b      	ldrb	r3, [r7, #21]
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	4413      	add	r3, r2
 800fc3e:	7f1b      	ldrb	r3, [r3, #28]
 800fc40:	461a      	mov	r2, r3
 800fc42:	4833      	ldr	r0, [pc, #204]	; (800fd10 <_ZN3BTD14HCI_event_taskEv+0x9dc>)
 800fc44:	f7fe fdcb 	bl	800e7de <_ZN11EEPROMClass5writeEih>
                                        for(uint8_t i = 0; i < 6; i++) {
 800fc48:	7d7b      	ldrb	r3, [r7, #21]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	757b      	strb	r3, [r7, #21]
 800fc4e:	e7ef      	b.n	800fc30 <_ZN3BTD14HCI_event_taskEv+0x8fc>
                                        }

                                        for(uint8_t i = 0; i < 16; i++) {
 800fc50:	2300      	movs	r3, #0
 800fc52:	753b      	strb	r3, [r7, #20]
 800fc54:	7d3b      	ldrb	r3, [r7, #20]
 800fc56:	2b0f      	cmp	r3, #15
 800fc58:	d80e      	bhi.n	800fc78 <_ZN3BTD14HCI_event_taskEv+0x944>
                                                EEPROM.write(i + 6, link_key[i]);
 800fc5a:	7d3b      	ldrb	r3, [r7, #20]
 800fc5c:	1d99      	adds	r1, r3, #6
 800fc5e:	7d3b      	ldrb	r3, [r7, #20]
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	4413      	add	r3, r2
 800fc64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc68:	461a      	mov	r2, r3
 800fc6a:	4829      	ldr	r0, [pc, #164]	; (800fd10 <_ZN3BTD14HCI_event_taskEv+0x9dc>)
 800fc6c:	f7fe fdb7 	bl	800e7de <_ZN11EEPROMClass5writeEih>
                                        for(uint8_t i = 0; i < 16; i++) {
 800fc70:	7d3b      	ldrb	r3, [r7, #20]
 800fc72:	3301      	adds	r3, #1
 800fc74:	753b      	strb	r3, [r7, #20]
 800fc76:	e7ed      	b.n	800fc54 <_ZN3BTD14HCI_event_taskEv+0x920>
                                        }                        

#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nBD_ADDR: "), 0x80);
 800fc78:	2180      	movs	r1, #128	; 0x80
 800fc7a:	482e      	ldr	r0, [pc, #184]	; (800fd34 <_ZN3BTD14HCI_event_taskEv+0xa00>)
 800fc7c:	f005 fe44 	bl	8015908 <_Z8E_NotifyPKci>
                                        for(uint8_t i = 0; i < 6; i++) {
 800fc80:	2300      	movs	r3, #0
 800fc82:	74fb      	strb	r3, [r7, #19]
 800fc84:	7cfb      	ldrb	r3, [r7, #19]
 800fc86:	2b05      	cmp	r3, #5
 800fc88:	d811      	bhi.n	800fcae <_ZN3BTD14HCI_event_taskEv+0x97a>
                                                Notify(PSTR(" "), 0x80);
 800fc8a:	2180      	movs	r1, #128	; 0x80
 800fc8c:	482a      	ldr	r0, [pc, #168]	; (800fd38 <_ZN3BTD14HCI_event_taskEv+0xa04>)
 800fc8e:	f005 fe3b 	bl	8015908 <_Z8E_NotifyPKci>
                                                D_PrintHex<uint8_t > (hcibuf[2 + i], 0x80);
 800fc92:	7cfb      	ldrb	r3, [r7, #19]
 800fc94:	3302      	adds	r3, #2
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	4413      	add	r3, r2
 800fc9a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800fc9e:	2180      	movs	r1, #128	; 0x80
 800fca0:	4618      	mov	r0, r3
 800fca2:	f001 fe90 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                        for(uint8_t i = 0; i < 6; i++) {
 800fca6:	7cfb      	ldrb	r3, [r7, #19]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	74fb      	strb	r3, [r7, #19]
 800fcac:	e7ea      	b.n	800fc84 <_ZN3BTD14HCI_event_taskEv+0x950>
                                        }
                                        Notify(PSTR("\r\nLink Key for the associated BD_ADDR: "), 0x80);
 800fcae:	2180      	movs	r1, #128	; 0x80
 800fcb0:	4822      	ldr	r0, [pc, #136]	; (800fd3c <_ZN3BTD14HCI_event_taskEv+0xa08>)
 800fcb2:	f005 fe29 	bl	8015908 <_Z8E_NotifyPKci>
                                        for(uint8_t i = 0; i < 16; i++) {
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	74bb      	strb	r3, [r7, #18]
 800fcba:	7cbb      	ldrb	r3, [r7, #18]
 800fcbc:	2b0f      	cmp	r3, #15
 800fcbe:	d81f      	bhi.n	800fd00 <_ZN3BTD14HCI_event_taskEv+0x9cc>
                                                Notify(PSTR(" "), 0x80);
 800fcc0:	2180      	movs	r1, #128	; 0x80
 800fcc2:	481d      	ldr	r0, [pc, #116]	; (800fd38 <_ZN3BTD14HCI_event_taskEv+0xa04>)
 800fcc4:	f005 fe20 	bl	8015908 <_Z8E_NotifyPKci>
                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
 800fcc8:	7cbb      	ldrb	r3, [r7, #18]
 800fcca:	3308      	adds	r3, #8
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	4413      	add	r3, r2
 800fcd0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800fcd4:	2180      	movs	r1, #128	; 0x80
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f001 fe75 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                        for(uint8_t i = 0; i < 16; i++) {
 800fcdc:	7cbb      	ldrb	r3, [r7, #18]
 800fcde:	3301      	adds	r3, #1
 800fce0:	74bb      	strb	r3, [r7, #18]
 800fce2:	e7ea      	b.n	800fcba <_ZN3BTD14HCI_event_taskEv+0x986>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800fce4:	bf00      	nop
 800fce6:	e00c      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800fce8:	bf00      	nop
 800fcea:	e00a      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800fcec:	bf00      	nop
 800fcee:	e008      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800fcf0:	bf00      	nop
 800fcf2:	e006      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800fcf4:	bf00      	nop
 800fcf6:	e004      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800fcf8:	bf00      	nop
 800fcfa:	e002      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800fcfc:	bf00      	nop
 800fcfe:	e000      	b.n	800fd02 <_ZN3BTD14HCI_event_taskEv+0x9ce>
                                break;
 800fd00:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800fd02:	bf00      	nop
 800fd04:	3720      	adds	r7, #32
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bdb0      	pop	{r4, r5, r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	08016280 	.word	0x08016280
 800fd10:	200056b8 	.word	0x200056b8
 800fd14:	08016298 	.word	0x08016298
 800fd18:	080162b8 	.word	0x080162b8
 800fd1c:	080162e0 	.word	0x080162e0
 800fd20:	08016304 	.word	0x08016304
 800fd24:	0801632c 	.word	0x0801632c
 800fd28:	08016340 	.word	0x08016340
 800fd2c:	08016364 	.word	0x08016364
 800fd30:	08016380 	.word	0x08016380
 800fd34:	08016398 	.word	0x08016398
 800fd38:	08016164 	.word	0x08016164
 800fd3c:	080163a4 	.word	0x080163a4

0800fd40 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800fd40:	b590      	push	{r4, r7, lr}
 800fd42:	b085      	sub	sp, #20
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fd4e:	2b13      	cmp	r3, #19
 800fd50:	f200 84a9 	bhi.w	80106a6 <_ZN3BTD8HCI_taskEv+0x966>
 800fd54:	a201      	add	r2, pc, #4	; (adr r2, 800fd5c <_ZN3BTD8HCI_taskEv+0x1c>)
 800fd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd5a:	bf00      	nop
 800fd5c:	0800fdad 	.word	0x0800fdad
 800fd60:	0800fde9 	.word	0x0800fde9
 800fd64:	0800fe83 	.word	0x0800fe83
 800fd68:	0800fead 	.word	0x0800fead
 800fd6c:	0800ff15 	.word	0x0800ff15
 800fd70:	0800ff69 	.word	0x0800ff69
 800fd74:	08010033 	.word	0x08010033
 800fd78:	0801007d 	.word	0x0801007d
 800fd7c:	08010165 	.word	0x08010165
 800fd80:	080101a9 	.word	0x080101a9
 800fd84:	08010203 	.word	0x08010203
 800fd88:	08010269 	.word	0x08010269
 800fd8c:	080102af 	.word	0x080102af
 800fd90:	08010545 	.word	0x08010545
 800fd94:	080106a7 	.word	0x080106a7
 800fd98:	080105d3 	.word	0x080105d3
 800fd9c:	08010601 	.word	0x08010601
 800fda0:	0800ffb3 	.word	0x0800ffb3
 800fda4:	0800ffe9 	.word	0x0800ffe9
 800fda8:	08010011 	.word	0x08010011
                case HCI_INIT_STATE:
                        hci_counter++;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	f240 846e 	bls.w	80106aa <_ZN3BTD8HCI_taskEv+0x96a>
                                hci_reset();
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f000 fd33 	bl	801083a <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                hci_counter = 0;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2200      	movs	r2, #0
 800fde0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        }
                        break;
 800fde4:	f000 bc61 	b.w	80106aa <_ZN3BTD8HCI_taskEv+0x96a>

                case HCI_RESET_STATE:
                        hci_counter++;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800fdee:	3301      	adds	r3, #1
 800fdf0:	b29a      	uxth	r2, r3
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fdfe:	f003 0301 	and.w	r3, r3, #1
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d010      	beq.n	800fe28 <_ZN3BTD8HCI_taskEv+0xe8>
                                hci_counter = 0;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
 800fe0e:	2180      	movs	r1, #128	; 0x80
 800fe10:	48c2      	ldr	r0, [pc, #776]	; (801011c <_ZN3BTD8HCI_taskEv+0x3dc>)
 800fe12:	f005 fd79 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_CLASS_STATE;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2202      	movs	r2, #2
 800fe1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                hci_write_class_of_device();
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f001 fa84 	bl	801132c <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800fe24:	f000 bc43 	b.w	80106ae <_ZN3BTD8HCI_taskEv+0x96e>
                        } else if(hci_counter > hci_num_reset_loops) {
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800fe34:	429a      	cmp	r2, r3
 800fe36:	f240 843a 	bls.w	80106ae <_ZN3BTD8HCI_taskEv+0x96e>
                                hci_num_reset_loops *= 10;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800fe40:	461a      	mov	r2, r3
 800fe42:	0092      	lsls	r2, r2, #2
 800fe44:	4413      	add	r3, r2
 800fe46:	005b      	lsls	r3, r3, #1
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
                                if(hci_num_reset_loops > 2000)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800fe56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800fe5a:	d904      	bls.n	800fe66 <_ZN3BTD8HCI_taskEv+0x126>
                                        hci_num_reset_loops = 2000;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800fe62:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
 800fe66:	2180      	movs	r1, #128	; 0x80
 800fe68:	48ad      	ldr	r0, [pc, #692]	; (8010120 <_ZN3BTD8HCI_taskEv+0x3e0>)
 800fe6a:	f005 fd4d 	bl	8015908 <_Z8E_NotifyPKci>
                                hci_state = HCI_INIT_STATE;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2200      	movs	r2, #0
 800fe72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                hci_counter = 0;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        break;
 800fe7e:	f000 bc16 	b.w	80106ae <_ZN3BTD8HCI_taskEv+0x96e>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800fe88:	f003 0301 	and.w	r3, r3, #1
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f000 8410 	beq.w	80106b2 <_ZN3BTD8HCI_taskEv+0x972>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
 800fe92:	2180      	movs	r1, #128	; 0x80
 800fe94:	48a3      	ldr	r0, [pc, #652]	; (8010124 <_ZN3BTD8HCI_taskEv+0x3e4>)
 800fe96:	f005 fd37 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_BDADDR_STATE;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2203      	movs	r2, #3
 800fe9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                hci_read_bdaddr();
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f000 fd19 	bl	80108da <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800fea8:	f000 bc03 	b.w	80106b2 <_ZN3BTD8HCI_taskEv+0x972>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800feb2:	f003 0320 	and.w	r3, r3, #32
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	f000 83fd 	beq.w	80106b6 <_ZN3BTD8HCI_taskEv+0x976>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nLocal Bluetooth Address: "), 0x80);
 800febc:	2180      	movs	r1, #128	; 0x80
 800febe:	489a      	ldr	r0, [pc, #616]	; (8010128 <_ZN3BTD8HCI_taskEv+0x3e8>)
 800fec0:	f005 fd22 	bl	8015908 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 800fec4:	2305      	movs	r3, #5
 800fec6:	73fb      	strb	r3, [r7, #15]
 800fec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	dd13      	ble.n	800fef8 <_ZN3BTD8HCI_taskEv+0x1b8>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
 800fed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	4413      	add	r3, r2
 800fed8:	7d1b      	ldrb	r3, [r3, #20]
 800feda:	2180      	movs	r1, #128	; 0x80
 800fedc:	4618      	mov	r0, r3
 800fede:	f001 fd72 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(":"), 0x80);
 800fee2:	2180      	movs	r1, #128	; 0x80
 800fee4:	4891      	ldr	r0, [pc, #580]	; (801012c <_ZN3BTD8HCI_taskEv+0x3ec>)
 800fee6:	f005 fd0f 	bl	8015908 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 800feea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feee:	b2db      	uxtb	r3, r3
 800fef0:	3b01      	subs	r3, #1
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	73fb      	strb	r3, [r7, #15]
 800fef6:	e7e7      	b.n	800fec8 <_ZN3BTD8HCI_taskEv+0x188>
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	7d1b      	ldrb	r3, [r3, #20]
 800fefc:	2180      	movs	r1, #128	; 0x80
 800fefe:	4618      	mov	r0, r3
 800ff00:	f001 fd61 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
#endif
                                hci_read_local_version_information();
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f000 fd0c 	bl	8010922 <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2204      	movs	r2, #4
 800ff0e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 800ff12:	e3d0      	b.n	80106b6 <_ZN3BTD8HCI_taskEv+0x976>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800ff1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f000 83cb 	beq.w	80106ba <_ZN3BTD8HCI_taskEv+0x97a>
                                if(btdName != NULL) {
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d00a      	beq.n	800ff42 <_ZN3BTD8HCI_taskEv+0x202>
                                        hci_write_local_name(btdName);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	4619      	mov	r1, r3
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 fddf 	bl	8010af6 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2205      	movs	r2, #5
 800ff3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800ff40:	e3bb      	b.n	80106ba <_ZN3BTD8HCI_taskEv+0x97a>
                                } else if(useSimplePairing) {
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d008      	beq.n	800ff5e <_ZN3BTD8HCI_taskEv+0x21e>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800ff4c:	2100      	movs	r1, #0
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 fd0b 	bl	801096a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2211      	movs	r2, #17
 800ff58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 800ff5c:	e3ad      	b.n	80106ba <_ZN3BTD8HCI_taskEv+0x97a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2206      	movs	r2, #6
 800ff62:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 800ff66:	e3a8      	b.n	80106ba <_ZN3BTD8HCI_taskEv+0x97a>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800ff6e:	f003 0301 	and.w	r3, r3, #1
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	f000 83a3 	beq.w	80106be <_ZN3BTD8HCI_taskEv+0x97e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
 800ff78:	2180      	movs	r1, #128	; 0x80
 800ff7a:	486d      	ldr	r0, [pc, #436]	; (8010130 <_ZN3BTD8HCI_taskEv+0x3f0>)
 800ff7c:	f005 fcc4 	bl	8015908 <_Z8E_NotifyPKci>
                                NotifyStr(btdName, 0x80);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	2180      	movs	r1, #128	; 0x80
 800ff86:	4618      	mov	r0, r3
 800ff88:	f005 fce6 	bl	8015958 <_Z11E_NotifyStrPKci>
#endif
                                if(useSimplePairing) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d008      	beq.n	800ffa8 <_ZN3BTD8HCI_taskEv+0x268>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800ff96:	2100      	movs	r1, #0
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 fce6 	bl	801096a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2211      	movs	r2, #17
 800ffa2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800ffa6:	e38a      	b.n	80106be <_ZN3BTD8HCI_taskEv+0x97e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2206      	movs	r2, #6
 800ffac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 800ffb0:	e385      	b.n	80106be <_ZN3BTD8HCI_taskEv+0x97e>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800ffb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f000 8380 	beq.w	80106c2 <_ZN3BTD8HCI_taskEv+0x982>
                                if(simple_pairing_supported) {
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d008      	beq.n	800ffde <_ZN3BTD8HCI_taskEv+0x29e>
                                        hci_write_simple_pairing_mode(true);
 800ffcc:	2101      	movs	r1, #1
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f000 fe15 	bl	8010bfe <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2212      	movs	r2, #18
 800ffd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800ffdc:	e371      	b.n	80106c2 <_ZN3BTD8HCI_taskEv+0x982>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2206      	movs	r2, #6
 800ffe2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 800ffe6:	e36c      	b.n	80106c2 <_ZN3BTD8HCI_taskEv+0x982>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800ffee:	f003 0301 	and.w	r3, r3, #1
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	f000 8367 	beq.w	80106c6 <_ZN3BTD8HCI_taskEv+0x986>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
 800fff8:	2180      	movs	r1, #128	; 0x80
 800fffa:	484e      	ldr	r0, [pc, #312]	; (8010134 <_ZN3BTD8HCI_taskEv+0x3f4>)
 800fffc:	f005 fc84 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                hci_set_event_mask();
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f000 fdc1 	bl	8010b88 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2213      	movs	r2, #19
 801000a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 801000e:	e35a      	b.n	80106c6 <_ZN3BTD8HCI_taskEv+0x986>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010016:	f003 0301 	and.w	r3, r3, #1
 801001a:	2b00      	cmp	r3, #0
 801001c:	f000 8355 	beq.w	80106ca <_ZN3BTD8HCI_taskEv+0x98a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
 8010020:	2180      	movs	r1, #128	; 0x80
 8010022:	4845      	ldr	r0, [pc, #276]	; (8010138 <_ZN3BTD8HCI_taskEv+0x3f8>)
 8010024:	f005 fc70 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2206      	movs	r2, #6
 801002c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 8010030:	e34b      	b.n	80106ca <_ZN3BTD8HCI_taskEv+0x98a>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8010038:	2b00      	cmp	r3, #0
 801003a:	d104      	bne.n	8010046 <_ZN3BTD8HCI_taskEv+0x306>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010042:	2b00      	cmp	r3, #0
 8010044:	d015      	beq.n	8010072 <_ZN3BTD8HCI_taskEv+0x332>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801004c:	2b00      	cmp	r3, #0
 801004e:	d004      	beq.n	801005a <_ZN3BTD8HCI_taskEv+0x31a>
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
 8010050:	2180      	movs	r1, #128	; 0x80
 8010052:	483a      	ldr	r0, [pc, #232]	; (801013c <_ZN3BTD8HCI_taskEv+0x3fc>)
 8010054:	f005 fc58 	bl	8015908 <_Z8E_NotifyPKci>
 8010058:	e003      	b.n	8010062 <_ZN3BTD8HCI_taskEv+0x322>
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
 801005a:	2180      	movs	r1, #128	; 0x80
 801005c:	4838      	ldr	r0, [pc, #224]	; (8010140 <_ZN3BTD8HCI_taskEv+0x400>)
 801005e:	f005 fc53 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                hci_inquiry();
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 fdf1 	bl	8010c4a <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2207      	movs	r2, #7
 801006c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 8010070:	e33e      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	220a      	movs	r2, #10
 8010076:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 801007a:	e339      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010086:	2b00      	cmp	r3, #0
 8010088:	f000 8321 	beq.w	80106ce <_ZN3BTD8HCI_taskEv+0x98e>
                                hci_inquiry_cancel(); // Stop inquiry
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f000 fe14 	bl	8010cba <_ZN3BTD18hci_inquiry_cancelEv>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010098:	2b00      	cmp	r3, #0
 801009a:	d004      	beq.n	80100a6 <_ZN3BTD8HCI_taskEv+0x366>
                                        Notify(PSTR("\r\nWiimote found"), 0x80);
 801009c:	2180      	movs	r1, #128	; 0x80
 801009e:	4829      	ldr	r0, [pc, #164]	; (8010144 <_ZN3BTD8HCI_taskEv+0x404>)
 80100a0:	f005 fc32 	bl	8015908 <_Z8E_NotifyPKci>
 80100a4:	e003      	b.n	80100ae <_ZN3BTD8HCI_taskEv+0x36e>
                                else
                                        Notify(PSTR("\r\nHID device found"), 0x80);
 80100a6:	2180      	movs	r1, #128	; 0x80
 80100a8:	4827      	ldr	r0, [pc, #156]	; (8010148 <_ZN3BTD8HCI_taskEv+0x408>)
 80100aa:	f005 fc2d 	bl	8015908 <_Z8E_NotifyPKci>

                                Notify(PSTR("\r\nNow just create the instance like so:"), 0x80);
 80100ae:	2180      	movs	r1, #128	; 0x80
 80100b0:	4826      	ldr	r0, [pc, #152]	; (801014c <_ZN3BTD8HCI_taskEv+0x40c>)
 80100b2:	f005 fc29 	bl	8015908 <_Z8E_NotifyPKci>
                                if(pairWithWii)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d004      	beq.n	80100ca <_ZN3BTD8HCI_taskEv+0x38a>
                                        Notify(PSTR("\r\nWII Wii(&Btd);"), 0x80);
 80100c0:	2180      	movs	r1, #128	; 0x80
 80100c2:	4823      	ldr	r0, [pc, #140]	; (8010150 <_ZN3BTD8HCI_taskEv+0x410>)
 80100c4:	f005 fc20 	bl	8015908 <_Z8E_NotifyPKci>
 80100c8:	e003      	b.n	80100d2 <_ZN3BTD8HCI_taskEv+0x392>
                                else
                                        Notify(PSTR("\r\nBTHID bthid(&Btd);"), 0x80);
 80100ca:	2180      	movs	r1, #128	; 0x80
 80100cc:	4821      	ldr	r0, [pc, #132]	; (8010154 <_ZN3BTD8HCI_taskEv+0x414>)
 80100ce:	f005 fc1b 	bl	8015908 <_Z8E_NotifyPKci>

                                Notify(PSTR("\r\nAnd then press any button on the "), 0x80);
 80100d2:	2180      	movs	r1, #128	; 0x80
 80100d4:	4820      	ldr	r0, [pc, #128]	; (8010158 <_ZN3BTD8HCI_taskEv+0x418>)
 80100d6:	f005 fc17 	bl	8015908 <_Z8E_NotifyPKci>
                                if(pairWithWii)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d004      	beq.n	80100ee <_ZN3BTD8HCI_taskEv+0x3ae>
                                        Notify(PSTR("Wiimote"), 0x80);
 80100e4:	2180      	movs	r1, #128	; 0x80
 80100e6:	481d      	ldr	r0, [pc, #116]	; (801015c <_ZN3BTD8HCI_taskEv+0x41c>)
 80100e8:	f005 fc0e 	bl	8015908 <_Z8E_NotifyPKci>
 80100ec:	e003      	b.n	80100f6 <_ZN3BTD8HCI_taskEv+0x3b6>
                                else
                                        Notify(PSTR("device"), 0x80);
 80100ee:	2180      	movs	r1, #128	; 0x80
 80100f0:	481b      	ldr	r0, [pc, #108]	; (8010160 <_ZN3BTD8HCI_taskEv+0x420>)
 80100f2:	f005 fc09 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                if(checkRemoteName) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d007      	beq.n	8010110 <_ZN3BTD8HCI_taskEv+0x3d0>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f000 fca4 	bl	8010a4e <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	220c      	movs	r2, #12
 801010a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 801010e:	e2de      	b.n	80106ce <_ZN3BTD8HCI_taskEv+0x98e>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2208      	movs	r2, #8
 8010114:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 8010118:	e2d9      	b.n	80106ce <_ZN3BTD8HCI_taskEv+0x98e>
 801011a:	bf00      	nop
 801011c:	080163cc 	.word	0x080163cc
 8010120:	080163e4 	.word	0x080163e4
 8010124:	08016400 	.word	0x08016400
 8010128:	08016418 	.word	0x08016418
 801012c:	08016058 	.word	0x08016058
 8010130:	08016434 	.word	0x08016434
 8010134:	0801644c 	.word	0x0801644c
 8010138:	0801646c 	.word	0x0801646c
 801013c:	08016488 	.word	0x08016488
 8010140:	08016510 	.word	0x08016510
 8010144:	0801653c 	.word	0x0801653c
 8010148:	0801654c 	.word	0x0801654c
 801014c:	08016560 	.word	0x08016560
 8010150:	08016588 	.word	0x08016588
 8010154:	0801659c 	.word	0x0801659c
 8010158:	080165b4 	.word	0x080165b4
 801015c:	080165d8 	.word	0x080165d8
 8010160:	080165e0 	.word	0x080165e0

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801016a:	f003 0301 	and.w	r3, r3, #1
 801016e:	2b00      	cmp	r3, #0
 8010170:	f000 82af 	beq.w	80106d2 <_ZN3BTD8HCI_taskEv+0x992>
#ifdef DEBUG_USB_HOST
                                if(pairWithWii)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801017a:	2b00      	cmp	r3, #0
 801017c:	d004      	beq.n	8010188 <_ZN3BTD8HCI_taskEv+0x448>
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
 801017e:	2180      	movs	r1, #128	; 0x80
 8010180:	48bf      	ldr	r0, [pc, #764]	; (8010480 <_ZN3BTD8HCI_taskEv+0x740>)
 8010182:	f005 fbc1 	bl	8015908 <_Z8E_NotifyPKci>
 8010186:	e003      	b.n	8010190 <_ZN3BTD8HCI_taskEv+0x450>
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
 8010188:	2180      	movs	r1, #128	; 0x80
 801018a:	48be      	ldr	r0, [pc, #760]	; (8010484 <_ZN3BTD8HCI_taskEv+0x744>)
 801018c:	f005 fbbc 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                checkRemoteName = false;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
                                hci_connect();
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 fda9 	bl	8010cf0 <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2209      	movs	r2, #9
 80101a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 80101a6:	e294      	b.n	80106d2 <_ZN3BTD8HCI_taskEv+0x992>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80101ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	f000 828f 	beq.w	80106d6 <_ZN3BTD8HCI_taskEv+0x996>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80101be:	f003 0302 	and.w	r3, r3, #2
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d015      	beq.n	80101f2 <_ZN3BTD8HCI_taskEv+0x4b2>
#ifdef DEBUG_USB_HOST
                                        if(pairWithWii)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d004      	beq.n	80101da <_ZN3BTD8HCI_taskEv+0x49a>
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
 80101d0:	2180      	movs	r1, #128	; 0x80
 80101d2:	48ad      	ldr	r0, [pc, #692]	; (8010488 <_ZN3BTD8HCI_taskEv+0x748>)
 80101d4:	f005 fb98 	bl	8015908 <_Z8E_NotifyPKci>
 80101d8:	e003      	b.n	80101e2 <_ZN3BTD8HCI_taskEv+0x4a2>
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
 80101da:	2180      	movs	r1, #128	; 0x80
 80101dc:	48ab      	ldr	r0, [pc, #684]	; (801048c <_ZN3BTD8HCI_taskEv+0x74c>)
 80101de:	f005 fb93 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f001 f83f 	bl	8011266 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	220a      	movs	r2, #10
 80101ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 80101f0:	e271      	b.n	80106d6 <_ZN3BTD8HCI_taskEv+0x996>
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
 80101f2:	2180      	movs	r1, #128	; 0x80
 80101f4:	48a6      	ldr	r0, [pc, #664]	; (8010490 <_ZN3BTD8HCI_taskEv+0x750>)
 80101f6:	f005 fb87 	bl	8015908 <_Z8E_NotifyPKci>
                                        hci_connect(); // Try to connect one more time
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f000 fd78 	bl	8010cf0 <_ZN3BTD11hci_connectEv>
                        break;
 8010200:	e269      	b.n	80106d6 <_ZN3BTD8HCI_taskEv+0x996>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8010208:	f083 0301 	eor.w	r3, r3, #1
 801020c:	b2db      	uxtb	r3, r3
 801020e:	2b00      	cmp	r3, #0
 8010210:	f000 8263 	beq.w	80106da <_ZN3BTD8HCI_taskEv+0x99a>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801021a:	f083 0301 	eor.w	r3, r3, #1
 801021e:	b2db      	uxtb	r3, r3
 8010220:	2b00      	cmp	r3, #0
 8010222:	f000 825a 	beq.w	80106da <_ZN3BTD8HCI_taskEv+0x99a>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801022c:	f083 0301 	eor.w	r3, r3, #1
 8010230:	b2db      	uxtb	r3, r3
 8010232:	2b00      	cmp	r3, #0
 8010234:	f000 8251 	beq.w	80106da <_ZN3BTD8HCI_taskEv+0x99a>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 801023e:	f083 0301 	eor.w	r3, r3, #1
 8010242:	b2db      	uxtb	r3, r3
 8010244:	2b00      	cmp	r3, #0
 8010246:	f000 8248 	beq.w	80106da <_ZN3BTD8HCI_taskEv+0x99a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
 801024a:	2180      	movs	r1, #128	; 0x80
 801024c:	4891      	ldr	r0, [pc, #580]	; (8010494 <_ZN3BTD8HCI_taskEv+0x754>)
 801024e:	f005 fb5b 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                hci_write_scan_enable();
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 fb10 	bl	8010878 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2201      	movs	r2, #1
 801025c:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	220b      	movs	r2, #11
 8010262:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 8010266:	e238      	b.n	80106da <_ZN3BTD8HCI_taskEv+0x99a>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801026e:	f003 0310 	and.w	r3, r3, #16
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00e      	beq.n	8010294 <_ZN3BTD8HCI_taskEv+0x554>
                                waitingForConnection = false;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2200      	movs	r2, #0
 801027a:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
 801027c:	2180      	movs	r1, #128	; 0x80
 801027e:	4886      	ldr	r0, [pc, #536]	; (8010498 <_ZN3BTD8HCI_taskEv+0x758>)
 8010280:	f005 fb42 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                hci_remote_name();
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 fbe2 	bl	8010a4e <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	220c      	movs	r2, #12
 801028e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 8010292:	e224      	b.n	80106de <_ZN3BTD8HCI_taskEv+0x99e>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801029a:	f003 0304 	and.w	r3, r3, #4
 801029e:	2b00      	cmp	r3, #0
 80102a0:	f000 821d 	beq.w	80106de <_ZN3BTD8HCI_taskEv+0x99e>
                                hci_state = HCI_DISCONNECT_STATE;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2210      	movs	r2, #16
 80102a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 80102ac:	e217      	b.n	80106de <_ZN3BTD8HCI_taskEv+0x99e>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80102b4:	f003 0308 	and.w	r3, r3, #8
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f000 8212 	beq.w	80106e2 <_ZN3BTD8HCI_taskEv+0x9a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
 80102be:	2180      	movs	r1, #128	; 0x80
 80102c0:	4876      	ldr	r0, [pc, #472]	; (801049c <_ZN3BTD8HCI_taskEv+0x75c>)
 80102c2:	f005 fb21 	bl	8015908 <_Z8E_NotifyPKci>
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
 80102c6:	2300      	movs	r3, #0
 80102c8:	73bb      	strb	r3, [r7, #14]
 80102ca:	7bbc      	ldrb	r4, [r7, #14]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	3322      	adds	r3, #34	; 0x22
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7ef ff9d 	bl	8000210 <strlen>
 80102d6:	4603      	mov	r3, r0
 80102d8:	429c      	cmp	r4, r3
 80102da:	d20c      	bcs.n	80102f6 <_ZN3BTD8HCI_taskEv+0x5b6>
                                        Notifyc(remote_name[i], 0x80);
 80102dc:	7bbb      	ldrb	r3, [r7, #14]
 80102de:	687a      	ldr	r2, [r7, #4]
 80102e0:	4413      	add	r3, r2
 80102e2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80102e6:	2180      	movs	r1, #128	; 0x80
 80102e8:	4618      	mov	r0, r3
 80102ea:	f005 faf3 	bl	80158d4 <_Z9E_Notifycci>
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
 80102ee:	7bbb      	ldrb	r3, [r7, #14]
 80102f0:	3301      	adds	r3, #1
 80102f2:	73bb      	strb	r3, [r7, #14]
 80102f4:	e7e9      	b.n	80102ca <_ZN3BTD8HCI_taskEv+0x58a>
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	3322      	adds	r3, #34	; 0x22
 80102fa:	2208      	movs	r2, #8
 80102fc:	4968      	ldr	r1, [pc, #416]	; (80104a0 <_ZN3BTD8HCI_taskEv+0x760>)
 80102fe:	4618      	mov	r0, r3
 8010300:	f005 fca8 	bl	8015c54 <strncmp>
 8010304:	4603      	mov	r3, r0
 8010306:	2b00      	cmp	r3, #0
 8010308:	d157      	bne.n	80103ba <_ZN3BTD8HCI_taskEv+0x67a>
                                        incomingWii = true;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2201      	movs	r2, #1
 801030e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                                        motionPlusInside = false;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                                        wiiUProController = false;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
                                        pairWiiUsingSync = false;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2200      	movs	r2, #0
 8010326:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
 801032a:	2180      	movs	r1, #128	; 0x80
 801032c:	485d      	ldr	r0, [pc, #372]	; (80104a4 <_ZN3BTD8HCI_taskEv+0x764>)
 801032e:	f005 faeb 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	3322      	adds	r3, #34	; 0x22
 8010336:	2216      	movs	r2, #22
 8010338:	495b      	ldr	r1, [pc, #364]	; (80104a8 <_ZN3BTD8HCI_taskEv+0x768>)
 801033a:	4618      	mov	r0, r3
 801033c:	f005 fc8a 	bl	8015c54 <strncmp>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	d108      	bne.n	8010358 <_ZN3BTD8HCI_taskEv+0x618>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
 8010346:	2180      	movs	r1, #128	; 0x80
 8010348:	4858      	ldr	r0, [pc, #352]	; (80104ac <_ZN3BTD8HCI_taskEv+0x76c>)
 801034a:	f005 fadd 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                                motionPlusInside = true;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2201      	movs	r2, #1
 8010352:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8010356:	e030      	b.n	80103ba <_ZN3BTD8HCI_taskEv+0x67a>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	3322      	adds	r3, #34	; 0x22
 801035c:	2216      	movs	r2, #22
 801035e:	4954      	ldr	r1, [pc, #336]	; (80104b0 <_ZN3BTD8HCI_taskEv+0x770>)
 8010360:	4618      	mov	r0, r3
 8010362:	f005 fc77 	bl	8015c54 <strncmp>
 8010366:	4603      	mov	r3, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	d114      	bne.n	8010396 <_ZN3BTD8HCI_taskEv+0x656>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
 801036c:	2180      	movs	r1, #128	; 0x80
 801036e:	4851      	ldr	r0, [pc, #324]	; (80104b4 <_ZN3BTD8HCI_taskEv+0x774>)
 8010370:	f005 faca 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2201      	movs	r2, #1
 8010378:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8010394:	e011      	b.n	80103ba <_ZN3BTD8HCI_taskEv+0x67a>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	3322      	adds	r3, #34	; 0x22
 801039a:	2213      	movs	r2, #19
 801039c:	4946      	ldr	r1, [pc, #280]	; (80104b8 <_ZN3BTD8HCI_taskEv+0x778>)
 801039e:	4618      	mov	r0, r3
 80103a0:	f005 fc58 	bl	8015c54 <strncmp>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d107      	bne.n	80103ba <_ZN3BTD8HCI_taskEv+0x67a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
 80103aa:	2180      	movs	r1, #128	; 0x80
 80103ac:	4843      	ldr	r0, [pc, #268]	; (80104bc <_ZN3BTD8HCI_taskEv+0x77c>)
 80103ae:	f005 faab 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                                pairWiiUsingSync = true;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2201      	movs	r2, #1
 80103b6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d11b      	bne.n	80103fc <_ZN3BTD8HCI_taskEv+0x6bc>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80103ca:	2b25      	cmp	r3, #37	; 0x25
 80103cc:	d116      	bne.n	80103fc <_ZN3BTD8HCI_taskEv+0x6bc>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80103d4:	2b08      	cmp	r3, #8
 80103d6:	d111      	bne.n	80103fc <_ZN3BTD8HCI_taskEv+0x6bc>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	3322      	adds	r3, #34	; 0x22
 80103dc:	2213      	movs	r2, #19
 80103de:	4938      	ldr	r1, [pc, #224]	; (80104c0 <_ZN3BTD8HCI_taskEv+0x780>)
 80103e0:	4618      	mov	r0, r3
 80103e2:	f005 fc37 	bl	8015c54 <strncmp>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d107      	bne.n	80103fc <_ZN3BTD8HCI_taskEv+0x6bc>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
 80103ec:	2180      	movs	r1, #128	; 0x80
 80103ee:	4835      	ldr	r0, [pc, #212]	; (80104c4 <_ZN3BTD8HCI_taskEv+0x784>)
 80103f0:	f005 fa8a 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                        incomingPSController = true;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2201      	movs	r2, #1
 80103f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                                }

                                if(strncmp((const char*)remote_name, "Xbox Wireless Controller", 24 ) == 0) {
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	3322      	adds	r3, #34	; 0x22
 8010400:	2218      	movs	r2, #24
 8010402:	4931      	ldr	r1, [pc, #196]	; (80104c8 <_ZN3BTD8HCI_taskEv+0x788>)
 8010404:	4618      	mov	r0, r3
 8010406:	f005 fc25 	bl	8015c54 <strncmp>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d17d      	bne.n	801050c <_ZN3BTD8HCI_taskEv+0x7cc>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nXbox One S controller is connecting"), 0x80);
 8010410:	2180      	movs	r1, #128	; 0x80
 8010412:	482e      	ldr	r0, [pc, #184]	; (80104cc <_ZN3BTD8HCI_taskEv+0x78c>)
 8010414:	f005 fa78 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                        incomingXboxOneS = true;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2201      	movs	r2, #1
 801041c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                                        if(!pairWithHIDDevice) { //If an Xbox One S BT Controller is connecting and it is not in pair mode, check EEPROM for the controller's address
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8010426:	f083 0301 	eor.w	r3, r3, #1
 801042a:	b2db      	uxtb	r3, r3
 801042c:	2b00      	cmp	r3, #0
 801042e:	d068      	beq.n	8010502 <_ZN3BTD8HCI_taskEv+0x7c2>
                                                pairedDevice = true;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2201      	movs	r2, #1
 8010434:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                                                for(uint8_t i = 0; i < 6; i++) {
 8010438:	2300      	movs	r3, #0
 801043a:	737b      	strb	r3, [r7, #13]
 801043c:	7b7b      	ldrb	r3, [r7, #13]
 801043e:	2b05      	cmp	r3, #5
 8010440:	d84a      	bhi.n	80104d8 <_ZN3BTD8HCI_taskEv+0x798>
                                                        if(disc_bdaddr[i] != EEPROM.read(i)) {
 8010442:	7b7b      	ldrb	r3, [r7, #13]
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	4413      	add	r3, r2
 8010448:	7f1c      	ldrb	r4, [r3, #28]
 801044a:	7b7b      	ldrb	r3, [r7, #13]
 801044c:	4619      	mov	r1, r3
 801044e:	4820      	ldr	r0, [pc, #128]	; (80104d0 <_ZN3BTD8HCI_taskEv+0x790>)
 8010450:	f7fe f9b0 	bl	800e7b4 <_ZN11EEPROMClass4readEi>
 8010454:	4603      	mov	r3, r0
 8010456:	429c      	cmp	r4, r3
 8010458:	bf14      	ite	ne
 801045a:	2301      	movne	r3, #1
 801045c:	2300      	moveq	r3, #0
 801045e:	b2db      	uxtb	r3, r3
 8010460:	2b00      	cmp	r3, #0
 8010462:	d008      	beq.n	8010476 <_ZN3BTD8HCI_taskEv+0x736>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nXbox One S Controller did not match EEPROM"), 0x80);
 8010464:	2180      	movs	r1, #128	; 0x80
 8010466:	481b      	ldr	r0, [pc, #108]	; (80104d4 <_ZN3BTD8HCI_taskEv+0x794>)
 8010468:	f005 fa4e 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                                                pairedDevice = false;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2200      	movs	r2, #0
 8010470:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                                                                break;
 8010474:	e030      	b.n	80104d8 <_ZN3BTD8HCI_taskEv+0x798>
                                                for(uint8_t i = 0; i < 6; i++) {
 8010476:	7b7b      	ldrb	r3, [r7, #13]
 8010478:	3301      	adds	r3, #1
 801047a:	737b      	strb	r3, [r7, #13]
 801047c:	e7de      	b.n	801043c <_ZN3BTD8HCI_taskEv+0x6fc>
 801047e:	bf00      	nop
 8010480:	080165e8 	.word	0x080165e8
 8010484:	08016600 	.word	0x08016600
 8010488:	0801661c 	.word	0x0801661c
 801048c:	08016634 	.word	0x08016634
 8010490:	08016650 	.word	0x08016650
 8010494:	08016678 	.word	0x08016678
 8010498:	080166a0 	.word	0x080166a0
 801049c:	080166c0 	.word	0x080166c0
 80104a0:	080166d0 	.word	0x080166d0
 80104a4:	080166dc 	.word	0x080166dc
 80104a8:	080166f4 	.word	0x080166f4
 80104ac:	0801670c 	.word	0x0801670c
 80104b0:	08016728 	.word	0x08016728
 80104b4:	08016740 	.word	0x08016740
 80104b8:	08016758 	.word	0x08016758
 80104bc:	0801676c 	.word	0x0801676c
 80104c0:	08016784 	.word	0x08016784
 80104c4:	08016798 	.word	0x08016798
 80104c8:	080167bc 	.word	0x080167bc
 80104cc:	080167d8 	.word	0x080167d8
 80104d0:	200056b8 	.word	0x200056b8
 80104d4:	08016800 	.word	0x08016800
                                                        }
                                                }
                                                if(!pairedDevice) {
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80104de:	f083 0301 	eor.w	r3, r3, #1
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d004      	beq.n	80104f2 <_ZN3BTD8HCI_taskEv+0x7b2>
                                                        hci_state = HCI_SCANNING_STATE;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	220a      	movs	r2, #10
 80104ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 80104f0:	e0f7      	b.n	80106e2 <_ZN3BTD8HCI_taskEv+0x9a2>
                                                        hci_accept_connection();
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 fa63 	bl	80109be <_ZN3BTD21hci_accept_connectionEv>
                                                        hci_state = HCI_CONNECTED_STATE;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	220d      	movs	r2, #13
 80104fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 8010500:	e0ef      	b.n	80106e2 <_ZN3BTD8HCI_taskEv+0x9a2>
                                                hci_state = HCI_CONNECT_DEVICE_STATE;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2208      	movs	r2, #8
 8010506:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 801050a:	e0ea      	b.n	80106e2 <_ZN3BTD8HCI_taskEv+0x9a2>
                                else if((pairWithWii || pairWithHIDDevice) && checkRemoteName) {
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010512:	2b00      	cmp	r3, #0
 8010514:	d104      	bne.n	8010520 <_ZN3BTD8HCI_taskEv+0x7e0>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 801051c:	2b00      	cmp	r3, #0
 801051e:	d009      	beq.n	8010534 <_ZN3BTD8HCI_taskEv+0x7f4>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010526:	2b00      	cmp	r3, #0
 8010528:	d004      	beq.n	8010534 <_ZN3BTD8HCI_taskEv+0x7f4>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2208      	movs	r2, #8
 801052e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 8010532:	e0d6      	b.n	80106e2 <_ZN3BTD8HCI_taskEv+0x9a2>
                                        hci_accept_connection();
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f000 fa42 	bl	80109be <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	220d      	movs	r2, #13
 801053e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        break;
 8010542:	e0ce      	b.n	80106e2 <_ZN3BTD8HCI_taskEv+0x9a2>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801054a:	f003 0302 	and.w	r3, r3, #2
 801054e:	2b00      	cmp	r3, #0
 8010550:	f000 80c9 	beq.w	80106e6 <_ZN3BTD8HCI_taskEv+0x9a6>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nConnected to Device: "), 0x80);
 8010554:	2180      	movs	r1, #128	; 0x80
 8010556:	4868      	ldr	r0, [pc, #416]	; (80106f8 <_ZN3BTD8HCI_taskEv+0x9b8>)
 8010558:	f005 f9d6 	bl	8015908 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 801055c:	2305      	movs	r3, #5
 801055e:	733b      	strb	r3, [r7, #12]
 8010560:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010564:	2b00      	cmp	r3, #0
 8010566:	dd13      	ble.n	8010590 <_ZN3BTD8HCI_taskEv+0x850>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
 8010568:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801056c:	687a      	ldr	r2, [r7, #4]
 801056e:	4413      	add	r3, r2
 8010570:	7f1b      	ldrb	r3, [r3, #28]
 8010572:	2180      	movs	r1, #128	; 0x80
 8010574:	4618      	mov	r0, r3
 8010576:	f001 fa26 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                        Notify(PSTR(":"), 0x80);
 801057a:	2180      	movs	r1, #128	; 0x80
 801057c:	485f      	ldr	r0, [pc, #380]	; (80106fc <_ZN3BTD8HCI_taskEv+0x9bc>)
 801057e:	f005 f9c3 	bl	8015908 <_Z8E_NotifyPKci>
                                for(int8_t i = 5; i > 0; i--) {
 8010582:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010586:	b2db      	uxtb	r3, r3
 8010588:	3b01      	subs	r3, #1
 801058a:	b2db      	uxtb	r3, r3
 801058c:	733b      	strb	r3, [r7, #12]
 801058e:	e7e7      	b.n	8010560 <_ZN3BTD8HCI_taskEv+0x820>
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	7f1b      	ldrb	r3, [r3, #28]
 8010594:	2180      	movs	r1, #128	; 0x80
 8010596:	4618      	mov	r0, r3
 8010598:	f001 fa15 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
#endif
                                if(incomingPSController)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d003      	beq.n	80105ae <_ZN3BTD8HCI_taskEv+0x86e>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2201      	movs	r2, #1
 80105aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2200      	movs	r2, #0
 80105b2:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2200      	movs	r2, #0
 80105be:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2200      	movs	r2, #0
 80105c4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
                                hci_state = HCI_DONE_STATE;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	220f      	movs	r2, #15
 80105cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 80105d0:	e089      	b.n	80106e6 <_ZN3BTD8HCI_taskEv+0x9a6>

                case HCI_DONE_STATE:
                        hci_counter++;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80105d8:	3301      	adds	r3, #1
 80105da:	b29a      	uxth	r2, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80105e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80105ec:	d97d      	bls.n	80106ea <_ZN3BTD8HCI_taskEv+0x9aa>
                                hci_counter = 0;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2200      	movs	r2, #0
 80105f2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                                hci_state = HCI_SCANNING_STATE;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	220a      	movs	r2, #10
 80105fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 80105fe:	e074      	b.n	80106ea <_ZN3BTD8HCI_taskEv+0x9aa>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010606:	f003 0304 	and.w	r3, r3, #4
 801060a:	2b00      	cmp	r3, #0
 801060c:	d06f      	beq.n	80106ee <_ZN3BTD8HCI_taskEv+0x9ae>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
 801060e:	2180      	movs	r1, #128	; 0x80
 8010610:	483b      	ldr	r0, [pc, #236]	; (8010700 <_ZN3BTD8HCI_taskEv+0x9c0>)
 8010612:	f005 f979 	bl	8015908 <_Z8E_NotifyPKci>
                                disconnect(); //xbox one bt s <- doesn't work without this!
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7fe fe62 	bl	800f2e0 <_ZN3BTD10disconnectEv>
                                              //Need for the controller to be able to reconnect  
#endif
                                hci_event_flag = 0; // Clear all flags
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2200      	movs	r2, #0
 8010620:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	33a1      	adds	r3, #161	; 0xa1
 8010628:	2240      	movs	r2, #64	; 0x40
 801062a:	2100      	movs	r1, #0
 801062c:	4618      	mov	r0, r3
 801062e:	f005 fac5 	bl	8015bbc <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	33e1      	adds	r3, #225	; 0xe1
 8010636:	2240      	movs	r2, #64	; 0x40
 8010638:	2100      	movs	r1, #0
 801063a:	4618      	mov	r0, r3
 801063c:	f005 fabe 	bl	8015bbc <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2200      	movs	r2, #0
 8010644:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                                incomingPSController = false;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                                incomingXboxOneS = false;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2200      	movs	r2, #0
 8010698:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
                                hci_state = HCI_SCANNING_STATE;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	220a      	movs	r2, #10
 80106a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                        }
                        break;
 80106a4:	e023      	b.n	80106ee <_ZN3BTD8HCI_taskEv+0x9ae>

                default:
                        break;
 80106a6:	bf00      	nop
 80106a8:	e022      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106aa:	bf00      	nop
 80106ac:	e020      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106ae:	bf00      	nop
 80106b0:	e01e      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106b2:	bf00      	nop
 80106b4:	e01c      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106b6:	bf00      	nop
 80106b8:	e01a      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106ba:	bf00      	nop
 80106bc:	e018      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106be:	bf00      	nop
 80106c0:	e016      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106c2:	bf00      	nop
 80106c4:	e014      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106c6:	bf00      	nop
 80106c8:	e012      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106ca:	bf00      	nop
 80106cc:	e010      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106ce:	bf00      	nop
 80106d0:	e00e      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106d2:	bf00      	nop
 80106d4:	e00c      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106d6:	bf00      	nop
 80106d8:	e00a      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106da:	bf00      	nop
 80106dc:	e008      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106de:	bf00      	nop
 80106e0:	e006      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106e2:	bf00      	nop
 80106e4:	e004      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106e6:	bf00      	nop
 80106e8:	e002      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106ea:	bf00      	nop
 80106ec:	e000      	b.n	80106f0 <_ZN3BTD8HCI_taskEv+0x9b0>
                        break;
 80106ee:	bf00      	nop
        }
}
 80106f0:	bf00      	nop
 80106f2:	3714      	adds	r7, #20
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd90      	pop	{r4, r7, pc}
 80106f8:	08016830 	.word	0x08016830
 80106fc:	08016058 	.word	0x08016058
 8010700:	08016848 	.word	0x08016848

08010704 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 8010704:	b5b0      	push	{r4, r5, r7, lr}
 8010706:	b086      	sub	sp, #24
 8010708:	af02      	add	r7, sp, #8
 801070a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 801070c:	2340      	movs	r3, #64	; 0x40
 801070e:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f893 406f 	ldrb.w	r4, [r3, #111]	; 0x6f
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	33e1      	adds	r3, #225	; 0xe1
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
 801072a:	f107 050a 	add.w	r5, r7, #10
 801072e:	9201      	str	r2, [sp, #4]
 8010730:	9300      	str	r3, [sp, #0]
 8010732:	462b      	mov	r3, r5
 8010734:	4622      	mov	r2, r4
 8010736:	f003 fb19 	bl	8013d6c <_ZN3USB10inTransferEhhPtPhh>
 801073a:	4603      	mov	r3, r0
 801073c:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 801073e:	7b7b      	ldrb	r3, [r7, #13]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d125      	bne.n	8010790 <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 8010744:	897b      	ldrh	r3, [r7, #10]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d022      	beq.n	8010790 <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 801074a:	2300      	movs	r3, #0
 801074c:	73fb      	strb	r3, [r7, #15]
 801074e:	7bfb      	ldrb	r3, [r7, #15]
 8010750:	2b03      	cmp	r3, #3
 8010752:	d81d      	bhi.n	8010790 <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 8010754:	7bfb      	ldrb	r3, [r7, #15]
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	331e      	adds	r3, #30
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	4413      	add	r3, r2
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d011      	beq.n	8010788 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 8010764:	7bfb      	ldrb	r3, [r7, #15]
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	331e      	adds	r3, #30
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	4413      	add	r3, r2
 801076e:	6858      	ldr	r0, [r3, #4]
 8010770:	7bfb      	ldrb	r3, [r7, #15]
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	331e      	adds	r3, #30
 8010776:	009b      	lsls	r3, r3, #2
 8010778:	4413      	add	r3, r2
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	687a      	ldr	r2, [r7, #4]
 8010782:	32e1      	adds	r2, #225	; 0xe1
 8010784:	4611      	mov	r1, r2
 8010786:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010788:	7bfb      	ldrb	r3, [r7, #15]
 801078a:	3301      	adds	r3, #1
 801078c:	73fb      	strb	r3, [r7, #15]
 801078e:	e7de      	b.n	801074e <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 8010790:	2300      	movs	r3, #0
 8010792:	73bb      	strb	r3, [r7, #14]
 8010794:	7bbb      	ldrb	r3, [r7, #14]
 8010796:	2b03      	cmp	r3, #3
 8010798:	d81c      	bhi.n	80107d4 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 801079a:	7bbb      	ldrb	r3, [r7, #14]
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	331e      	adds	r3, #30
 80107a0:	009b      	lsls	r3, r3, #2
 80107a2:	4413      	add	r3, r2
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d010      	beq.n	80107cc <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 80107aa:	7bbb      	ldrb	r3, [r7, #14]
 80107ac:	687a      	ldr	r2, [r7, #4]
 80107ae:	331e      	adds	r3, #30
 80107b0:	009b      	lsls	r3, r3, #2
 80107b2:	4413      	add	r3, r2
 80107b4:	6859      	ldr	r1, [r3, #4]
 80107b6:	7bbb      	ldrb	r3, [r7, #14]
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	331e      	adds	r3, #30
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	4413      	add	r3, r2
 80107c0:	685b      	ldr	r3, [r3, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	3304      	adds	r3, #4
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4608      	mov	r0, r1
 80107ca:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 80107cc:	7bbb      	ldrb	r3, [r7, #14]
 80107ce:	3301      	adds	r3, #1
 80107d0:	73bb      	strb	r3, [r7, #14]
 80107d2:	e7df      	b.n	8010794 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 80107d4:	bf00      	nop
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bdb0      	pop	{r4, r5, r7, pc}

080107dc <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 80107dc:	b580      	push	{r7, lr}
 80107de:	b08c      	sub	sp, #48	; 0x30
 80107e0:	af08      	add	r7, sp, #32
 80107e2:	60f8      	str	r0, [r7, #12]
 80107e4:	60b9      	str	r1, [r7, #8]
 80107e6:	4613      	mov	r3, r2
 80107e8:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80107f0:	f023 0301 	bic.w	r3, r3, #1
 80107f4:	b29a      	uxth	r2, r3
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801080c:	2300      	movs	r3, #0
 801080e:	9307      	str	r3, [sp, #28]
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	9306      	str	r3, [sp, #24]
 8010814:	88fb      	ldrh	r3, [r7, #6]
 8010816:	9305      	str	r3, [sp, #20]
 8010818:	88fb      	ldrh	r3, [r7, #6]
 801081a:	9304      	str	r3, [sp, #16]
 801081c:	2300      	movs	r3, #0
 801081e:	9303      	str	r3, [sp, #12]
 8010820:	2300      	movs	r3, #0
 8010822:	9302      	str	r3, [sp, #8]
 8010824:	2300      	movs	r3, #0
 8010826:	9301      	str	r3, [sp, #4]
 8010828:	2300      	movs	r3, #0
 801082a:	9300      	str	r3, [sp, #0]
 801082c:	2320      	movs	r3, #32
 801082e:	f003 f9c4 	bl	8013bba <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 8010832:	bf00      	nop
 8010834:	3710      	adds	r7, #16
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 801083a:	b580      	push	{r7, lr}
 801083c:	b082      	sub	sp, #8
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2200      	movs	r2, #0
 8010846:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x03; // HCI OCF = 3
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2203      	movs	r2, #3
 801084e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	220c      	movs	r2, #12
 8010856:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2200      	movs	r2, #0
 801085e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	33a1      	adds	r3, #161	; 0xa1
 8010866:	2203      	movs	r2, #3
 8010868:	4619      	mov	r1, r3
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f7ff ffb6 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010870:	bf00      	nop
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010886:	f023 0310 	bic.w	r3, r3, #16
 801088a:	b29a      	uxth	r2, r3
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	221a      	movs	r2, #26
 8010896:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	220c      	movs	r2, #12
 801089e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x01; // parameter length = 1
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2201      	movs	r2, #1
 80108a6:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        if(btdName != NULL)
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d004      	beq.n	80108bc <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2203      	movs	r2, #3
 80108b6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 80108ba:	e003      	b.n	80108c4 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2202      	movs	r2, #2
 80108c0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

        HCI_Command(hcibuf, 4);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	33a1      	adds	r3, #161	; 0xa1
 80108c8:	2204      	movs	r2, #4
 80108ca:	4619      	mov	r1, r3
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f7ff ff85 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 80108d2:	bf00      	nop
 80108d4:	3708      	adds	r7, #8
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 80108da:	b580      	push	{r7, lr}
 80108dc:	b082      	sub	sp, #8
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80108e8:	f023 0320 	bic.w	r3, r3, #32
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x09; // HCI OCF = 9
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2209      	movs	r2, #9
 80108f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2210      	movs	r2, #16
 8010900:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2200      	movs	r2, #0
 8010908:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	33a1      	adds	r3, #161	; 0xa1
 8010910:	2203      	movs	r2, #3
 8010912:	4619      	mov	r1, r3
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7ff ff61 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 801091a:	bf00      	nop
 801091c:	3708      	adds	r7, #8
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}

08010922 <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 8010922:	b580      	push	{r7, lr}
 8010924:	b082      	sub	sp, #8
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010934:	b29a      	uxth	r2, r3
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x01; // HCI OCF = 1
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2201      	movs	r2, #1
 8010940:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2210      	movs	r2, #16
 8010948:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	33a1      	adds	r3, #161	; 0xa1
 8010958:	2203      	movs	r2, #3
 801095a:	4619      	mov	r1, r3
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f7ff ff3d 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010962:	bf00      	nop
 8010964:	3708      	adds	r7, #8
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}

0801096a <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 801096a:	b580      	push	{r7, lr}
 801096c:	b082      	sub	sp, #8
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
 8010972:	460b      	mov	r3, r1
 8010974:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 801097c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010980:	b29a      	uxth	r2, r3
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x04; // HCI OCF = 4
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2204      	movs	r2, #4
 801098c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2210      	movs	r2, #16
 8010994:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x01; // parameter length = 1
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2201      	movs	r2, #1
 801099c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = page_number;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	78fa      	ldrb	r2, [r7, #3]
 80109a4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

        HCI_Command(hcibuf, 4);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	33a1      	adds	r3, #161	; 0xa1
 80109ac:	2204      	movs	r2, #4
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7ff ff13 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 80109b6:	bf00      	nop
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 80109be:	b580      	push	{r7, lr}
 80109c0:	b082      	sub	sp, #8
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80109cc:	f023 0302 	bic.w	r3, r3, #2
 80109d0:	b29a      	uxth	r2, r3
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x09; // HCI OCF = 9
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2209      	movs	r2, #9
 80109dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2204      	movs	r2, #4
 80109e4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x07; // parameter length 7
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2207      	movs	r2, #7
 80109ec:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	7f1a      	ldrb	r2, [r3, #28]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	7f5a      	ldrb	r2, [r3, #29]
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	7f9a      	ldrb	r2, [r3, #30]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	7fda      	ldrb	r2, [r3, #31]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x00; // Switch role to master
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2200      	movs	r2, #0
 8010a34:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

        HCI_Command(hcibuf, 10);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	33a1      	adds	r3, #161	; 0xa1
 8010a3c:	220a      	movs	r2, #10
 8010a3e:	4619      	mov	r1, r3
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7ff fecb 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010a46:	bf00      	nop
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}

08010a4e <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 8010a4e:	b580      	push	{r7, lr}
 8010a50:	b082      	sub	sp, #8
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010a5c:	f023 0308 	bic.w	r3, r3, #8
 8010a60:	b29a      	uxth	r2, r3
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x19; // HCI OCF = 19
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2219      	movs	r2, #25
 8010a6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2204      	movs	r2, #4
 8010a74:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x0A; // parameter length = 10
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	220a      	movs	r2, #10
 8010a7c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	7f1a      	ldrb	r2, [r3, #28]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	7f5a      	ldrb	r2, [r3, #29]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	7f9a      	ldrb	r2, [r3, #30]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	7fda      	ldrb	r2, [r3, #31]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0x00; // Reserved
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = 0x00; // Clock offset - low byte
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        hcibuf[12] = 0x00; // Clock offset - high byte
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad

        HCI_Command(hcibuf, 13);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	33a1      	adds	r3, #161	; 0xa1
 8010ae4:	220d      	movs	r2, #13
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f7ff fe77 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010aee:	bf00      	nop
 8010af0:	3708      	adds	r7, #8
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 8010af6:	b590      	push	{r4, r7, lr}
 8010af8:	b085      	sub	sp, #20
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
 8010afe:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2213      	movs	r2, #19
 8010b04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	220c      	movs	r2, #12
 8010b0c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 8010b10:	6838      	ldr	r0, [r7, #0]
 8010b12:	f7ef fb7d 	bl	8000210 <strlen>
 8010b16:	4603      	mov	r3, r0
 8010b18:	b2db      	uxtb	r3, r3
 8010b1a:	3301      	adds	r3, #1
 8010b1c:	b2da      	uxtb	r2, r3
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 8010b24:	2300      	movs	r3, #0
 8010b26:	73fb      	strb	r3, [r7, #15]
 8010b28:	7bfc      	ldrb	r4, [r7, #15]
 8010b2a:	6838      	ldr	r0, [r7, #0]
 8010b2c:	f7ef fb70 	bl	8000210 <strlen>
 8010b30:	4603      	mov	r3, r0
 8010b32:	429c      	cmp	r4, r3
 8010b34:	d20e      	bcs.n	8010b54 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 8010b36:	7bfb      	ldrb	r3, [r7, #15]
 8010b38:	683a      	ldr	r2, [r7, #0]
 8010b3a:	441a      	add	r2, r3
 8010b3c:	7bfb      	ldrb	r3, [r7, #15]
 8010b3e:	3303      	adds	r3, #3
 8010b40:	7811      	ldrb	r1, [r2, #0]
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	4413      	add	r3, r2
 8010b46:	460a      	mov	r2, r1
 8010b48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        for(i = 0; i < strlen(name); i++)
 8010b4c:	7bfb      	ldrb	r3, [r7, #15]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	73fb      	strb	r3, [r7, #15]
 8010b52:	e7e9      	b.n	8010b28 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 8010b54:	7bfb      	ldrb	r3, [r7, #15]
 8010b56:	3303      	adds	r3, #3
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

        HCI_Command(hcibuf, 4 + strlen(name));
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f103 04a1 	add.w	r4, r3, #161	; 0xa1
 8010b68:	6838      	ldr	r0, [r7, #0]
 8010b6a:	f7ef fb51 	bl	8000210 <strlen>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	3304      	adds	r3, #4
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	461a      	mov	r2, r3
 8010b78:	4621      	mov	r1, r4
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7ff fe2e 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010b80:	bf00      	nop
 8010b82:	3714      	adds	r7, #20
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd90      	pop	{r4, r7, pc}

08010b88 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2201      	movs	r2, #1
 8010b94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	220c      	movs	r2, #12
 8010b9c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x08;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2208      	movs	r2, #8
 8010ba4:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	22ff      	movs	r2, #255	; 0xff
 8010bac:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = 0xFF;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	22ff      	movs	r2, #255	; 0xff
 8010bb4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0xFF;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	22ff      	movs	r2, #255	; 0xff
 8010bbc:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = 0xFF;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	22ff      	movs	r2, #255	; 0xff
 8010bc4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = 0xFF;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	22ff      	movs	r2, #255	; 0xff
 8010bcc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = 0x1F;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	221f      	movs	r2, #31
 8010bd4:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	22ff      	movs	r2, #255	; 0xff
 8010bdc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0x00;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2200      	movs	r2, #0
 8010be4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab

        HCI_Command(hcibuf, 11);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	33a1      	adds	r3, #161	; 0xa1
 8010bec:	220b      	movs	r2, #11
 8010bee:	4619      	mov	r1, r3
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f7ff fdf3 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010bf6:	bf00      	nop
 8010bf8:	3708      	adds	r7, #8
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b082      	sub	sp, #8
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
 8010c06:	460b      	mov	r3, r1
 8010c08:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2256      	movs	r2, #86	; 0x56
 8010c0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	220c      	movs	r2, #12
 8010c16:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 1; // parameter length = 1
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = enable ? 1 : 0;
 8010c22:	78fb      	ldrb	r3, [r7, #3]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d001      	beq.n	8010c2c <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 8010c28:	2201      	movs	r2, #1
 8010c2a:	e000      	b.n	8010c2e <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

        HCI_Command(hcibuf, 4);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	33a1      	adds	r3, #161	; 0xa1
 8010c38:	2204      	movs	r2, #4
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f7ff fdcd 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010c42:	bf00      	nop
 8010c44:	3708      	adds	r7, #8
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}

08010c4a <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 8010c4a:	b580      	push	{r7, lr}
 8010c4c:	b082      	sub	sp, #8
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x01;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2201      	movs	r2, #1
 8010c68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2204      	movs	r2, #4
 8010c70:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2205      	movs	r2, #5
 8010c78:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2233      	movs	r2, #51	; 0x33
 8010c80:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = 0x8B;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	228b      	movs	r2, #139	; 0x8b
 8010c88:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0x9E;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	229e      	movs	r2, #158	; 0x9e
 8010c90:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2230      	movs	r2, #48	; 0x30
 8010c98:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = 0x0A; // 10 number of responses
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	220a      	movs	r2, #10
 8010ca0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

        HCI_Command(hcibuf, 8);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	33a1      	adds	r3, #161	; 0xa1
 8010ca8:	2208      	movs	r2, #8
 8010caa:	4619      	mov	r1, r3
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7ff fd95 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010cb2:	bf00      	nop
 8010cb4:	3708      	adds	r7, #8
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}

08010cba <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 8010cba:	b580      	push	{r7, lr}
 8010cbc:	b082      	sub	sp, #8
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2202      	movs	r2, #2
 8010cc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2204      	movs	r2, #4
 8010cce:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

        HCI_Command(hcibuf, 3);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	33a1      	adds	r3, #161	; 0xa1
 8010cde:	2203      	movs	r2, #3
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f7ff fd7a 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010ce8:	bf00      	nop
 8010cea:	3708      	adds	r7, #8
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}

08010cf0 <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	331c      	adds	r3, #28
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 f804 	bl	8010d0c <_ZN3BTD11hci_connectEPh>
}
 8010d04:	bf00      	nop
 8010d06:	3708      	adds	r7, #8
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8010d1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8010d20:	b29a      	uxth	r2, r3
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x05; // HCI OCF = 5
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2205      	movs	r2, #5
 8010d2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2204      	movs	r2, #4
 8010d34:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	220d      	movs	r2, #13
 8010d3c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	781a      	ldrb	r2, [r3, #0]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = bdaddr[1];
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	785a      	ldrb	r2, [r3, #1]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = bdaddr[2];
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	789a      	ldrb	r2, [r3, #2]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = bdaddr[3];
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	78da      	ldrb	r2, [r3, #3]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = bdaddr[4];
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	791a      	ldrb	r2, [r3, #4]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = bdaddr[5];
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	795a      	ldrb	r2, [r3, #5]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2218      	movs	r2, #24
 8010d80:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	22cc      	movs	r2, #204	; 0xcc
 8010d88:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = 0x01; // Page repetition mode R1
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2201      	movs	r2, #1
 8010d90:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        hcibuf[12] = 0x00; // Reserved
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2200      	movs	r2, #0
 8010d98:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        hcibuf[13] = 0x00; // Clock offset
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
        hcibuf[14] = 0x00; // Invalid clock offset
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2200      	movs	r2, #0
 8010da8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
        hcibuf[15] = 0x00; // Do not allow role switch
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2200      	movs	r2, #0
 8010db0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

        HCI_Command(hcibuf, 16);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	33a1      	adds	r3, #161	; 0xa1
 8010db8:	2210      	movs	r2, #16
 8010dba:	4619      	mov	r1, r3
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f7ff fd0d 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010dc2:	bf00      	nop
 8010dc4:	3708      	adds	r7, #8
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
	...

08010dcc <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 8010dcc:	b590      	push	{r4, r7, lr}
 8010dce:	b085      	sub	sp, #20
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	220d      	movs	r2, #13
 8010dd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2204      	movs	r2, #4
 8010de0:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x17; // parameter length 23
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2217      	movs	r2, #23
 8010de8:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	7f1a      	ldrb	r2, [r3, #28]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	7f5a      	ldrb	r2, [r3, #29]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	7f9a      	ldrb	r2, [r3, #30]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	7fda      	ldrb	r2, [r3, #31]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        if(pairWithWii) {
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d043      	beq.n	8010ebe <_ZN3BTD26hci_pin_code_request_replyEv+0xf2>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2206      	movs	r2, #6
 8010e3a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                if(pairWiiUsingSync) {
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d017      	beq.n	8010e78 <_ZN3BTD26hci_pin_code_request_replyEv+0xac>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
 8010e48:	2180      	movs	r1, #128	; 0x80
 8010e4a:	483c      	ldr	r0, [pc, #240]	; (8010f3c <_ZN3BTD26hci_pin_code_request_replyEv+0x170>)
 8010e4c:	f004 fd5c 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                        for(uint8_t i = 0; i < 6; i++)
 8010e50:	2300      	movs	r3, #0
 8010e52:	73fb      	strb	r3, [r7, #15]
 8010e54:	7bfb      	ldrb	r3, [r7, #15]
 8010e56:	2b05      	cmp	r3, #5
 8010e58:	d822      	bhi.n	8010ea0 <_ZN3BTD26hci_pin_code_request_replyEv+0xd4>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 8010e5a:	7bfa      	ldrb	r2, [r7, #15]
 8010e5c:	7bfb      	ldrb	r3, [r7, #15]
 8010e5e:	330a      	adds	r3, #10
 8010e60:	6879      	ldr	r1, [r7, #4]
 8010e62:	440a      	add	r2, r1
 8010e64:	7d11      	ldrb	r1, [r2, #20]
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	4413      	add	r3, r2
 8010e6a:	460a      	mov	r2, r1
 8010e6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                        for(uint8_t i = 0; i < 6; i++)
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
 8010e72:	3301      	adds	r3, #1
 8010e74:	73fb      	strb	r3, [r7, #15]
 8010e76:	e7ed      	b.n	8010e54 <_ZN3BTD26hci_pin_code_request_replyEv+0x88>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 8010e78:	2300      	movs	r3, #0
 8010e7a:	73bb      	strb	r3, [r7, #14]
 8010e7c:	7bbb      	ldrb	r3, [r7, #14]
 8010e7e:	2b05      	cmp	r3, #5
 8010e80:	d80e      	bhi.n	8010ea0 <_ZN3BTD26hci_pin_code_request_replyEv+0xd4>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 8010e82:	7bba      	ldrb	r2, [r7, #14]
 8010e84:	7bbb      	ldrb	r3, [r7, #14]
 8010e86:	330a      	adds	r3, #10
 8010e88:	6879      	ldr	r1, [r7, #4]
 8010e8a:	440a      	add	r2, r1
 8010e8c:	7f11      	ldrb	r1, [r2, #28]
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	4413      	add	r3, r2
 8010e92:	460a      	mov	r2, r1
 8010e94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                        for(uint8_t i = 0; i < 6; i++)
 8010e98:	7bbb      	ldrb	r3, [r7, #14]
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	73bb      	strb	r3, [r7, #14]
 8010e9e:	e7ed      	b.n	8010e7c <_ZN3BTD26hci_pin_code_request_replyEv+0xb0>
                }
                for(uint8_t i = 16; i < 26; i++)
 8010ea0:	2310      	movs	r3, #16
 8010ea2:	737b      	strb	r3, [r7, #13]
 8010ea4:	7b7b      	ldrb	r3, [r7, #13]
 8010ea6:	2b19      	cmp	r3, #25
 8010ea8:	d83c      	bhi.n	8010f24 <_ZN3BTD26hci_pin_code_request_replyEv+0x158>
                        hcibuf[i] = 0x00; // The rest should be 0
 8010eaa:	7b7b      	ldrb	r3, [r7, #13]
 8010eac:	687a      	ldr	r2, [r7, #4]
 8010eae:	4413      	add	r3, r2
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                for(uint8_t i = 16; i < 26; i++)
 8010eb6:	7b7b      	ldrb	r3, [r7, #13]
 8010eb8:	3301      	adds	r3, #1
 8010eba:	737b      	strb	r3, [r7, #13]
 8010ebc:	e7f2      	b.n	8010ea4 <_ZN3BTD26hci_pin_code_request_replyEv+0xd8>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	691b      	ldr	r3, [r3, #16]
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7ef f9a4 	bl	8000210 <strlen>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	b2da      	uxtb	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	733b      	strb	r3, [r7, #12]
 8010ed6:	7b3c      	ldrb	r4, [r7, #12]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	691b      	ldr	r3, [r3, #16]
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7ef f997 	bl	8000210 <strlen>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	429c      	cmp	r4, r3
 8010ee6:	d20f      	bcs.n	8010f08 <_ZN3BTD26hci_pin_code_request_replyEv+0x13c>
                        hcibuf[i + 10] = btdPin[i];
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	691a      	ldr	r2, [r3, #16]
 8010eec:	7b3b      	ldrb	r3, [r7, #12]
 8010eee:	441a      	add	r2, r3
 8010ef0:	7b3b      	ldrb	r3, [r7, #12]
 8010ef2:	330a      	adds	r3, #10
 8010ef4:	7811      	ldrb	r1, [r2, #0]
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	4413      	add	r3, r2
 8010efa:	460a      	mov	r2, r1
 8010efc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 8010f00:	7b3b      	ldrb	r3, [r7, #12]
 8010f02:	3301      	adds	r3, #1
 8010f04:	733b      	strb	r3, [r7, #12]
 8010f06:	e7e6      	b.n	8010ed6 <_ZN3BTD26hci_pin_code_request_replyEv+0x10a>
                for(; i < 16; i++)
 8010f08:	7b3b      	ldrb	r3, [r7, #12]
 8010f0a:	2b0f      	cmp	r3, #15
 8010f0c:	d80a      	bhi.n	8010f24 <_ZN3BTD26hci_pin_code_request_replyEv+0x158>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 8010f0e:	7b3b      	ldrb	r3, [r7, #12]
 8010f10:	330a      	adds	r3, #10
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	4413      	add	r3, r2
 8010f16:	2200      	movs	r2, #0
 8010f18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                for(; i < 16; i++)
 8010f1c:	7b3b      	ldrb	r3, [r7, #12]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	733b      	strb	r3, [r7, #12]
 8010f22:	e7f1      	b.n	8010f08 <_ZN3BTD26hci_pin_code_request_replyEv+0x13c>
        }

        HCI_Command(hcibuf, 26);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	33a1      	adds	r3, #161	; 0xa1
 8010f28:	221a      	movs	r2, #26
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f7ff fc55 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010f32:	bf00      	nop
 8010f34:	3714      	adds	r7, #20
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd90      	pop	{r4, r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	08016868 	.word	0x08016868

08010f40 <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	220e      	movs	r2, #14
 8010f4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2204      	movs	r2, #4
 8010f54:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x06; // parameter length 6
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2206      	movs	r2, #6
 8010f5c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	7f1a      	ldrb	r2, [r3, #28]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	7f5a      	ldrb	r2, [r3, #29]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	7f9a      	ldrb	r2, [r3, #30]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	7fda      	ldrb	r2, [r3, #31]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

        HCI_Command(hcibuf, 9);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	33a1      	adds	r3, #161	; 0xa1
 8010fa4:	2209      	movs	r2, #9
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f7ff fc17 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8010fae:	bf00      	nop
 8010fb0:	3708      	adds	r7, #8
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}

08010fb6 <_ZN3BTD26hci_link_key_request_replyEv>:

void BTD::hci_link_key_request_reply() {
 8010fb6:	b580      	push	{r7, lr}
 8010fb8:	b082      	sub	sp, #8
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0B; // HCI OCF = 0B
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	220b      	movs	r2, #11
 8010fc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2204      	movs	r2, #4
 8010fca:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x16; // parameter length 22
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2216      	movs	r2, #22
 8010fd2:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        //for(uint8_t i = 0; i < 6; i++) hcibuf[i + 3] = disc_bdaddr[i]; // 6 octet bdaddr
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	7f1a      	ldrb	r2, [r3, #28]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	7f5a      	ldrb	r2, [r3, #29]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	7f9a      	ldrb	r2, [r3, #30]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	7fda      	ldrb	r2, [r3, #31]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f893 2020 	ldrb.w	r2, [r3, #32]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        //for(uint8_t i = 0; i < 16; i++) hcibuf[i + 9] = link_key[i]; // 16 octet link_key
        hcibuf[9] = link_key[0]; // 16 octet link_key
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = link_key[1];
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = link_key[2];
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        hcibuf[12] = link_key[3];
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        hcibuf[13] = link_key[4];
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
        hcibuf[14] = link_key[5];
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
        hcibuf[15] = link_key[6];
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        hcibuf[16] = link_key[7];
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
        hcibuf[17] = link_key[8];
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
        hcibuf[18] = link_key[9];
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
        hcibuf[19] = link_key[10];
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
        hcibuf[20] = link_key[11];
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
        hcibuf[21] = link_key[12];
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        hcibuf[22] = link_key[13];
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
        hcibuf[23] = link_key[14];
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        hcibuf[24] = link_key[15];
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

        HCI_Command(hcibuf, 25);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	33a1      	adds	r3, #161	; 0xa1
 80110da:	2219      	movs	r2, #25
 80110dc:	4619      	mov	r1, r3
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7ff fb7c 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 80110e4:	bf00      	nop
 80110e6:	3708      	adds	r7, #8
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	220c      	movs	r2, #12
 80110f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2204      	movs	r2, #4
 8011100:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x06; // parameter length 6
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2206      	movs	r2, #6
 8011108:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	7f1a      	ldrb	r2, [r3, #28]
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	7f5a      	ldrb	r2, [r3, #29]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	7f9a      	ldrb	r2, [r3, #30]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	7fda      	ldrb	r2, [r3, #31]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f893 2020 	ldrb.w	r2, [r3, #32]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

        HCI_Command(hcibuf, 9);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	33a1      	adds	r3, #161	; 0xa1
 8011150:	2209      	movs	r2, #9
 8011152:	4619      	mov	r1, r3
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7ff fb41 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 801115a:	bf00      	nop
 801115c:	3708      	adds	r7, #8
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}

08011162 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 8011162:	b580      	push	{r7, lr}
 8011164:	b082      	sub	sp, #8
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	222b      	movs	r2, #43	; 0x2b
 801116e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2204      	movs	r2, #4
 8011176:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x09;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2209      	movs	r2, #9
 801117e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	7f1a      	ldrb	r2, [r3, #28]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	7f5a      	ldrb	r2, [r3, #29]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	7f9a      	ldrb	r2, [r3, #30]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	7fda      	ldrb	r2, [r3, #31]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f893 2020 	ldrb.w	r2, [r3, #32]
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
        hcibuf[9] = 0x03; // NoInputNoOutput
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2203      	movs	r2, #3
 80111c6:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        hcibuf[10] = 0x00; // OOB authentication data not present
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2200      	movs	r2, #0
 80111ce:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2200      	movs	r2, #0
 80111d6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

        HCI_Command(hcibuf, 12);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	33a1      	adds	r3, #161	; 0xa1
 80111de:	220c      	movs	r2, #12
 80111e0:	4619      	mov	r1, r3
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f7ff fafa 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 80111e8:	bf00      	nop
 80111ea:	3708      	adds	r7, #8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	222c      	movs	r2, #44	; 0x2c
 80111fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2204      	movs	r2, #4
 8011204:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x06; // parameter length 6
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2206      	movs	r2, #6
 801120c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	7f1a      	ldrb	r2, [r3, #28]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = disc_bdaddr[1];
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	7f5a      	ldrb	r2, [r3, #29]
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = disc_bdaddr[2];
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	7f9a      	ldrb	r2, [r3, #30]
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        hcibuf[6] = disc_bdaddr[3];
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	7fda      	ldrb	r2, [r3, #31]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        hcibuf[7] = disc_bdaddr[4];
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        hcibuf[8] = disc_bdaddr[5];
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

        HCI_Command(hcibuf, 9);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	33a1      	adds	r3, #161	; 0xa1
 8011254:	2209      	movs	r2, #9
 8011256:	4619      	mov	r1, r3
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f7ff fabf 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 801125e:	bf00      	nop
 8011260:	3708      	adds	r7, #8
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 8011266:	b580      	push	{r7, lr}
 8011268:	b082      	sub	sp, #8
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2211      	movs	r2, #17
 8011272:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2204      	movs	r2, #4
 801127a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x02; // parameter length = 2
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	2202      	movs	r2, #2
 8011282:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	8b5b      	ldrh	r3, [r3, #26]
 801128a:	b2da      	uxtb	r2, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	8b5b      	ldrh	r3, [r3, #26]
 8011296:	121b      	asrs	r3, r3, #8
 8011298:	b2db      	uxtb	r3, r3
 801129a:	f003 030f 	and.w	r3, r3, #15
 801129e:	b2da      	uxtb	r2, r3
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

        HCI_Command(hcibuf, 5);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	33a1      	adds	r3, #161	; 0xa1
 80112aa:	2205      	movs	r2, #5
 80112ac:	4619      	mov	r1, r3
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f7ff fa94 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 80112b4:	bf00      	nop
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	460b      	mov	r3, r1
 80112c6:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80112ce:	f023 0304 	bic.w	r3, r3, #4
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        hcibuf[0] = 0x06; // HCI OCF = 6
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2206      	movs	r2, #6
 80112de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2204      	movs	r2, #4
 80112e6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x03; // parameter length = 3
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2203      	movs	r2, #3
 80112ee:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 80112f2:	887b      	ldrh	r3, [r7, #2]
 80112f4:	b2da      	uxtb	r2, r3
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 80112fc:	887b      	ldrh	r3, [r7, #2]
 80112fe:	121b      	asrs	r3, r3, #8
 8011300:	b2db      	uxtb	r3, r3
 8011302:	f003 030f 	and.w	r3, r3, #15
 8011306:	b2da      	uxtb	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0x13; // reason
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2213      	movs	r2, #19
 8011312:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

        HCI_Command(hcibuf, 6);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	33a1      	adds	r3, #161	; 0xa1
 801131a:	2206      	movs	r2, #6
 801131c:	4619      	mov	r1, r3
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f7ff fa5c 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8011324:	bf00      	nop
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2224      	movs	r2, #36	; 0x24
 8011338:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	220c      	movs	r2, #12
 8011340:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
        hcibuf[2] = 0x03; // parameter length = 3
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2203      	movs	r2, #3
 8011348:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
        hcibuf[3] = 0x04; // Robot
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2204      	movs	r2, #4
 8011350:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        hcibuf[4] = 0x08; // Toy
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2208      	movs	r2, #8
 8011358:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        hcibuf[5] = 0x00;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2200      	movs	r2, #0
 8011360:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6

        HCI_Command(hcibuf, 6);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	33a1      	adds	r3, #161	; 0xa1
 8011368:	2206      	movs	r2, #6
 801136a:	4619      	mov	r1, r3
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f7ff fa35 	bl	80107dc <_ZN3BTD11HCI_CommandEPht>
}
 8011372:	bf00      	nop
 8011374:	3708      	adds	r7, #8
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
	...

0801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 801137c:	b5b0      	push	{r4, r5, r7, lr}
 801137e:	b08a      	sub	sp, #40	; 0x28
 8011380:	af02      	add	r7, sp, #8
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	607a      	str	r2, [r7, #4]
 8011386:	461a      	mov	r2, r3
 8011388:	460b      	mov	r3, r1
 801138a:	817b      	strh	r3, [r7, #10]
 801138c:	4613      	mov	r3, r2
 801138e:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 8011390:	466b      	mov	r3, sp
 8011392:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 8011394:	7a7b      	ldrb	r3, [r7, #9]
 8011396:	1ddc      	adds	r4, r3, #7
 8011398:	61bc      	str	r4, [r7, #24]
 801139a:	4623      	mov	r3, r4
 801139c:	3301      	adds	r3, #1
 801139e:	4618      	mov	r0, r3
 80113a0:	f04f 0100 	mov.w	r1, #0
 80113a4:	f04f 0200 	mov.w	r2, #0
 80113a8:	f04f 0300 	mov.w	r3, #0
 80113ac:	00cb      	lsls	r3, r1, #3
 80113ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80113b2:	00c2      	lsls	r2, r0, #3
 80113b4:	4623      	mov	r3, r4
 80113b6:	3301      	adds	r3, #1
 80113b8:	4618      	mov	r0, r3
 80113ba:	f04f 0100 	mov.w	r1, #0
 80113be:	f04f 0200 	mov.w	r2, #0
 80113c2:	f04f 0300 	mov.w	r3, #0
 80113c6:	00cb      	lsls	r3, r1, #3
 80113c8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80113cc:	00c2      	lsls	r2, r0, #3
 80113ce:	4623      	mov	r3, r4
 80113d0:	3301      	adds	r3, #1
 80113d2:	3307      	adds	r3, #7
 80113d4:	08db      	lsrs	r3, r3, #3
 80113d6:	00db      	lsls	r3, r3, #3
 80113d8:	ebad 0d03 	sub.w	sp, sp, r3
 80113dc:	ab02      	add	r3, sp, #8
 80113de:	3300      	adds	r3, #0
 80113e0:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 80113e2:	897b      	ldrh	r3, [r7, #10]
 80113e4:	b2da      	uxtb	r2, r3
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 80113ea:	897b      	ldrh	r3, [r7, #10]
 80113ec:	121b      	asrs	r3, r3, #8
 80113ee:	b25b      	sxtb	r3, r3
 80113f0:	f003 030f 	and.w	r3, r3, #15
 80113f4:	b25b      	sxtb	r3, r3
 80113f6:	f043 0320 	orr.w	r3, r3, #32
 80113fa:	b25b      	sxtb	r3, r3
 80113fc:	b2da      	uxtb	r2, r3
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 8011402:	7a7b      	ldrb	r3, [r7, #9]
 8011404:	3304      	adds	r3, #4
 8011406:	b2da      	uxtb	r2, r3
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 801140c:	7a7b      	ldrb	r3, [r7, #9]
 801140e:	3304      	adds	r3, #4
 8011410:	121b      	asrs	r3, r3, #8
 8011412:	b2da      	uxtb	r2, r3
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	7a7a      	ldrb	r2, [r7, #9]
 801141c:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 801141e:	7a7b      	ldrb	r3, [r7, #9]
 8011420:	121b      	asrs	r3, r3, #8
 8011422:	b2da      	uxtb	r2, r3
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801142e:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8011436:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 8011438:	2300      	movs	r3, #0
 801143a:	83fb      	strh	r3, [r7, #30]
 801143c:	7a7b      	ldrb	r3, [r7, #9]
 801143e:	b29b      	uxth	r3, r3
 8011440:	8bfa      	ldrh	r2, [r7, #30]
 8011442:	429a      	cmp	r2, r3
 8011444:	d20b      	bcs.n	801145e <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 8011446:	8bfb      	ldrh	r3, [r7, #30]
 8011448:	687a      	ldr	r2, [r7, #4]
 801144a:	441a      	add	r2, r3
 801144c:	8bfb      	ldrh	r3, [r7, #30]
 801144e:	3308      	adds	r3, #8
 8011450:	7811      	ldrb	r1, [r2, #0]
 8011452:	697a      	ldr	r2, [r7, #20]
 8011454:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 8011456:	8bfb      	ldrh	r3, [r7, #30]
 8011458:	3301      	adds	r3, #1
 801145a:	83fb      	strh	r3, [r7, #30]
 801145c:	e7ee      	b.n	801143c <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
 801146e:	7a7b      	ldrb	r3, [r7, #9]
 8011470:	b29b      	uxth	r3, r3
 8011472:	3308      	adds	r3, #8
 8011474:	b29c      	uxth	r4, r3
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	9300      	str	r3, [sp, #0]
 801147a:	4623      	mov	r3, r4
 801147c:	f002 fd9e 	bl	8013fbc <_ZN3USB11outTransferEhhtPh>
 8011480:	4603      	mov	r3, r0
 8011482:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 8011484:	7cfb      	ldrb	r3, [r7, #19]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d01f      	beq.n	80114ca <_ZN3BTD13L2CAP_CommandEtPhhhh+0x14e>
                delay(100); // This small delay prevents it from overflowing if it fails
 801148a:	2064      	movs	r0, #100	; 0x64
 801148c:	f7f1 fba6 	bl	8002bdc <HAL_Delay>
                Notify(PSTR("\r\nError sending L2CAP message: 0x"), 0x80);
 8011490:	2180      	movs	r1, #128	; 0x80
 8011492:	4810      	ldr	r0, [pc, #64]	; (80114d4 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x158>)
 8011494:	f004 fa38 	bl	8015908 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (rcode, 0x80);
 8011498:	7cfb      	ldrb	r3, [r7, #19]
 801149a:	2180      	movs	r1, #128	; 0x80
 801149c:	4618      	mov	r0, r3
 801149e:	f000 fa92 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                Notify(PSTR(" - Channel ID: "), 0x80);
 80114a2:	2180      	movs	r1, #128	; 0x80
 80114a4:	480c      	ldr	r0, [pc, #48]	; (80114d8 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x15c>)
 80114a6:	f004 fa2f 	bl	8015908 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (channelHigh, 0x80);
 80114aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80114ae:	2180      	movs	r1, #128	; 0x80
 80114b0:	4618      	mov	r0, r3
 80114b2:	f000 fa88 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                Notify(PSTR(" "), 0x80);
 80114b6:	2180      	movs	r1, #128	; 0x80
 80114b8:	4808      	ldr	r0, [pc, #32]	; (80114dc <_ZN3BTD13L2CAP_CommandEtPhhhh+0x160>)
 80114ba:	f004 fa25 	bl	8015908 <_Z8E_NotifyPKci>
                D_PrintHex<uint8_t > (channelLow, 0x80);
 80114be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80114c2:	2180      	movs	r1, #128	; 0x80
 80114c4:	4618      	mov	r0, r3
 80114c6:	f000 fa7e 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
 80114ca:	46ad      	mov	sp, r5
}
 80114cc:	bf00      	nop
 80114ce:	3720      	adds	r7, #32
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bdb0      	pop	{r4, r5, r7, pc}
 80114d4:	08016890 	.word	0x08016890
 80114d8:	080168b4 	.word	0x080168b4
 80114dc:	08016164 	.word	0x08016164

080114e0 <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b086      	sub	sp, #24
 80114e4:	af02      	add	r7, sp, #8
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	607b      	str	r3, [r7, #4]
 80114ea:	460b      	mov	r3, r1
 80114ec:	817b      	strh	r3, [r7, #10]
 80114ee:	4613      	mov	r3, r2
 80114f0:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2202      	movs	r2, #2
 80114f6:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	7a7a      	ldrb	r2, [r7, #9]
 80114fe:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x04; // Length
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	2204      	movs	r2, #4
 8011506:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	2200      	movs	r2, #0
 801150e:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 8011512:	8b3b      	ldrh	r3, [r7, #24]
 8011514:	b2da      	uxtb	r2, r3
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 801151c:	8b3b      	ldrh	r3, [r7, #24]
 801151e:	121b      	asrs	r3, r3, #8
 8011520:	b2da      	uxtb	r2, r3
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0]; // Source CID
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	781a      	ldrb	r2, [r3, #0]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	785a      	ldrb	r2, [r3, #1]
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

        L2CAP_Command(handle, l2capoutbuf, 8);
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f203 1221 	addw	r2, r3, #289	; 0x121
 8011542:	8979      	ldrh	r1, [r7, #10]
 8011544:	2300      	movs	r3, #0
 8011546:	9301      	str	r3, [sp, #4]
 8011548:	2301      	movs	r3, #1
 801154a:	9300      	str	r3, [sp, #0]
 801154c:	2308      	movs	r3, #8
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	f7ff ff14 	bl	801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011554:	bf00      	nop
 8011556:	3710      	adds	r7, #16
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 801155c:	b580      	push	{r7, lr}
 801155e:	b086      	sub	sp, #24
 8011560:	af02      	add	r7, sp, #8
 8011562:	60f8      	str	r0, [r7, #12]
 8011564:	607b      	str	r3, [r7, #4]
 8011566:	460b      	mov	r3, r1
 8011568:	817b      	strh	r3, [r7, #10]
 801156a:	4613      	mov	r3, r2
 801156c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2203      	movs	r2, #3
 8011572:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	7a7a      	ldrb	r2, [r7, #9]
 801157a:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x08; // Length
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	2208      	movs	r2, #8
 8011582:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2200      	movs	r2, #0
 801158a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0]; // Destination CID
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	781a      	ldrb	r2, [r3, #0]
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	785a      	ldrb	r2, [r3, #1]
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0]; // Source CID
 80115a2:	69bb      	ldr	r3, [r7, #24]
 80115a4:	781a      	ldrb	r2, [r3, #0]
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	785a      	ldrb	r2, [r3, #1]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = result; // Result: Pending or Success
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	7f3a      	ldrb	r2, [r7, #28]
 80115ba:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x00;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	2200      	movs	r2, #0
 80115c2:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0x00; // No further information
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	2200      	movs	r2, #0
 80115ca:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0x00;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2200      	movs	r2, #0
 80115d2:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

        L2CAP_Command(handle, l2capoutbuf, 12);
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	f203 1221 	addw	r2, r3, #289	; 0x121
 80115dc:	8979      	ldrh	r1, [r7, #10]
 80115de:	2300      	movs	r3, #0
 80115e0:	9301      	str	r3, [sp, #4]
 80115e2:	2301      	movs	r3, #1
 80115e4:	9300      	str	r3, [sp, #0]
 80115e6:	230c      	movs	r3, #12
 80115e8:	68f8      	ldr	r0, [r7, #12]
 80115ea:	f7ff fec7 	bl	801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80115ee:	bf00      	nop
 80115f0:	3710      	adds	r7, #16
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 80115f6:	b580      	push	{r7, lr}
 80115f8:	b086      	sub	sp, #24
 80115fa:	af02      	add	r7, sp, #8
 80115fc:	60f8      	str	r0, [r7, #12]
 80115fe:	607b      	str	r3, [r7, #4]
 8011600:	460b      	mov	r3, r1
 8011602:	817b      	strh	r3, [r7, #10]
 8011604:	4613      	mov	r3, r2
 8011606:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2204      	movs	r2, #4
 801160c:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	7a7a      	ldrb	r2, [r7, #9]
 8011614:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x08; // Length
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2208      	movs	r2, #8
 801161c:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	2200      	movs	r2, #0
 8011624:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0]; // Destination CID
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	781a      	ldrb	r2, [r3, #0]
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	785a      	ldrb	r2, [r3, #1]
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = 0x00; // Flags
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2200      	movs	r2, #0
 8011640:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = 0x00;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	2200      	movs	r2, #0
 8011648:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2201      	movs	r2, #1
 8011650:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x02; // Config Opt: length
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2202      	movs	r2, #2
 8011658:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0xFF; // MTU
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	22ff      	movs	r2, #255	; 0xff
 8011660:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0xFF;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	22ff      	movs	r2, #255	; 0xff
 8011668:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

        L2CAP_Command(handle, l2capoutbuf, 12);
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	f203 1221 	addw	r2, r3, #289	; 0x121
 8011672:	8979      	ldrh	r1, [r7, #10]
 8011674:	2300      	movs	r3, #0
 8011676:	9301      	str	r3, [sp, #4]
 8011678:	2301      	movs	r3, #1
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	230c      	movs	r3, #12
 801167e:	68f8      	ldr	r0, [r7, #12]
 8011680:	f7ff fe7c 	bl	801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011684:	bf00      	nop
 8011686:	3710      	adds	r7, #16
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}

0801168c <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 801168c:	b580      	push	{r7, lr}
 801168e:	b086      	sub	sp, #24
 8011690:	af02      	add	r7, sp, #8
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	607b      	str	r3, [r7, #4]
 8011696:	460b      	mov	r3, r1
 8011698:	817b      	strh	r3, [r7, #10]
 801169a:	4613      	mov	r3, r2
 801169c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2205      	movs	r2, #5
 80116a2:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	7a7a      	ldrb	r2, [r7, #9]
 80116aa:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x0A; // Length
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	220a      	movs	r2, #10
 80116b2:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2200      	movs	r2, #0
 80116ba:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = scid[0]; // Source CID
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	781a      	ldrb	r2, [r3, #0]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = scid[1];
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	785a      	ldrb	r2, [r3, #1]
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = 0x00; // Flag
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = 0x00;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2200      	movs	r2, #0
 80116de:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = 0x00; // Result
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2200      	movs	r2, #0
 80116e6:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x00;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	2200      	movs	r2, #0
 80116ee:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0x01; // Config
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	2201      	movs	r2, #1
 80116f6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0x02;
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	2202      	movs	r2, #2
 80116fe:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
        l2capoutbuf[12] = 0xA0;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	22a0      	movs	r2, #160	; 0xa0
 8011706:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
        l2capoutbuf[13] = 0x02;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2202      	movs	r2, #2
 801170e:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e

        L2CAP_Command(handle, l2capoutbuf, 14);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	f203 1221 	addw	r2, r3, #289	; 0x121
 8011718:	8979      	ldrh	r1, [r7, #10]
 801171a:	2300      	movs	r3, #0
 801171c:	9301      	str	r3, [sp, #4]
 801171e:	2301      	movs	r3, #1
 8011720:	9300      	str	r3, [sp, #0]
 8011722:	230e      	movs	r3, #14
 8011724:	68f8      	ldr	r0, [r7, #12]
 8011726:	f7ff fe29 	bl	801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 801172a:	bf00      	nop
 801172c:	3710      	adds	r7, #16
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}

08011732 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 8011732:	b580      	push	{r7, lr}
 8011734:	b086      	sub	sp, #24
 8011736:	af02      	add	r7, sp, #8
 8011738:	60f8      	str	r0, [r7, #12]
 801173a:	607b      	str	r3, [r7, #4]
 801173c:	460b      	mov	r3, r1
 801173e:	817b      	strh	r3, [r7, #10]
 8011740:	4613      	mov	r3, r2
 8011742:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	2206      	movs	r2, #6
 8011748:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	7a7a      	ldrb	r2, [r7, #9]
 8011750:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x04; // Length
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2204      	movs	r2, #4
 8011758:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2200      	movs	r2, #0
 8011760:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0];
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	781a      	ldrb	r2, [r3, #0]
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	785a      	ldrb	r2, [r3, #1]
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0];
 8011778:	69bb      	ldr	r3, [r7, #24]
 801177a:	781a      	ldrb	r2, [r3, #0]
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	785a      	ldrb	r2, [r3, #1]
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

        L2CAP_Command(handle, l2capoutbuf, 8);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	f203 1221 	addw	r2, r3, #289	; 0x121
 8011792:	8979      	ldrh	r1, [r7, #10]
 8011794:	2300      	movs	r3, #0
 8011796:	9301      	str	r3, [sp, #4]
 8011798:	2301      	movs	r3, #1
 801179a:	9300      	str	r3, [sp, #0]
 801179c:	2308      	movs	r3, #8
 801179e:	68f8      	ldr	r0, [r7, #12]
 80117a0:	f7ff fdec 	bl	801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80117a4:	bf00      	nop
 80117a6:	3710      	adds	r7, #16
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b086      	sub	sp, #24
 80117b0:	af02      	add	r7, sp, #8
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	607b      	str	r3, [r7, #4]
 80117b6:	460b      	mov	r3, r1
 80117b8:	817b      	strh	r3, [r7, #10]
 80117ba:	4613      	mov	r3, r2
 80117bc:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2207      	movs	r2, #7
 80117c2:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	7a7a      	ldrb	r2, [r7, #9]
 80117ca:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x04; // Length
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2204      	movs	r2, #4
 80117d2:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	2200      	movs	r2, #0
 80117da:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = dcid[0];
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	781a      	ldrb	r2, [r3, #0]
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = dcid[1];
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	785a      	ldrb	r2, [r3, #1]
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = scid[0];
 80117f2:	69bb      	ldr	r3, [r7, #24]
 80117f4:	781a      	ldrb	r2, [r3, #0]
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = scid[1];
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	785a      	ldrb	r2, [r3, #1]
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128

        L2CAP_Command(handle, l2capoutbuf, 8);
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	f203 1221 	addw	r2, r3, #289	; 0x121
 801180c:	8979      	ldrh	r1, [r7, #10]
 801180e:	2300      	movs	r3, #0
 8011810:	9301      	str	r3, [sp, #4]
 8011812:	2301      	movs	r3, #1
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	2308      	movs	r3, #8
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f7ff fdaf 	bl	801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 801181e:	bf00      	nop
 8011820:	3710      	adds	r7, #16
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}

08011826 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 8011826:	b580      	push	{r7, lr}
 8011828:	b084      	sub	sp, #16
 801182a:	af02      	add	r7, sp, #8
 801182c:	6078      	str	r0, [r7, #4]
 801182e:	4608      	mov	r0, r1
 8011830:	4611      	mov	r1, r2
 8011832:	461a      	mov	r2, r3
 8011834:	4603      	mov	r3, r0
 8011836:	807b      	strh	r3, [r7, #2]
 8011838:	460b      	mov	r3, r1
 801183a:	707b      	strb	r3, [r7, #1]
 801183c:	4613      	mov	r3, r2
 801183e:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	220b      	movs	r2, #11
 8011844:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
        l2capoutbuf[1] = rxid; // Identifier
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	787a      	ldrb	r2, [r7, #1]
 801184c:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
        l2capoutbuf[2] = 0x08; // Length
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2208      	movs	r2, #8
 8011854:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
        l2capoutbuf[3] = 0x00;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        l2capoutbuf[4] = infoTypeLow;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	783a      	ldrb	r2, [r7, #0]
 8011864:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        l2capoutbuf[5] = infoTypeHigh;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	7c3a      	ldrb	r2, [r7, #16]
 801186c:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
        l2capoutbuf[6] = 0x00; // Result = success
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2200      	movs	r2, #0
 8011874:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
        l2capoutbuf[7] = 0x00; // Result = success
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2200      	movs	r2, #0
 801187c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
        l2capoutbuf[8] = 0x00;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2200      	movs	r2, #0
 8011884:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
        l2capoutbuf[9] = 0x00;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
        l2capoutbuf[10] = 0x00;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2200      	movs	r2, #0
 8011894:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
        l2capoutbuf[11] = 0x00;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2200      	movs	r2, #0
 801189c:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

        L2CAP_Command(handle, l2capoutbuf, 12);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f203 1221 	addw	r2, r3, #289	; 0x121
 80118a6:	8879      	ldrh	r1, [r7, #2]
 80118a8:	2300      	movs	r3, #0
 80118aa:	9301      	str	r3, [sp, #4]
 80118ac:	2301      	movs	r3, #1
 80118ae:	9300      	str	r3, [sp, #0]
 80118b0:	230c      	movs	r3, #12
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f7ff fd62 	bl	801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80118b8:	bf00      	nop
 80118ba:	3708      	adds	r7, #8
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b08e      	sub	sp, #56	; 0x38
 80118c4:	af08      	add	r7, sp, #32
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 80118ca:	2301      	movs	r3, #1
 80118cc:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 80118ce:	2300      	movs	r3, #0
 80118d0:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 80118d2:	2300      	movs	r3, #0
 80118d4:	75fb      	strb	r3, [r7, #23]
 80118d6:	7dfb      	ldrb	r3, [r7, #23]
 80118d8:	2b05      	cmp	r3, #5
 80118da:	d811      	bhi.n	8011900 <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 80118dc:	7dfb      	ldrb	r3, [r7, #23]
 80118de:	f1c3 0305 	rsb	r3, r3, #5
 80118e2:	461a      	mov	r2, r3
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	441a      	add	r2, r3
 80118e8:	7dfb      	ldrb	r3, [r7, #23]
 80118ea:	3302      	adds	r3, #2
 80118ec:	7812      	ldrb	r2, [r2, #0]
 80118ee:	f107 0118 	add.w	r1, r7, #24
 80118f2:	440b      	add	r3, r1
 80118f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 80118f8:	7dfb      	ldrb	r3, [r7, #23]
 80118fa:	3301      	adds	r3, #1
 80118fc:	75fb      	strb	r3, [r7, #23]
 80118fe:	e7ea      	b.n	80118d6 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8011910:	2300      	movs	r3, #0
 8011912:	9307      	str	r3, [sp, #28]
 8011914:	f107 030c 	add.w	r3, r7, #12
 8011918:	9306      	str	r3, [sp, #24]
 801191a:	2308      	movs	r3, #8
 801191c:	9305      	str	r3, [sp, #20]
 801191e:	2308      	movs	r3, #8
 8011920:	9304      	str	r3, [sp, #16]
 8011922:	2300      	movs	r3, #0
 8011924:	9303      	str	r3, [sp, #12]
 8011926:	2303      	movs	r3, #3
 8011928:	9302      	str	r3, [sp, #8]
 801192a:	23f5      	movs	r3, #245	; 0xf5
 801192c:	9301      	str	r3, [sp, #4]
 801192e:	2309      	movs	r3, #9
 8011930:	9300      	str	r3, [sp, #0]
 8011932:	2321      	movs	r3, #33	; 0x21
 8011934:	f002 f941 	bl	8013bba <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 8011938:	bf00      	nop
 801193a:	3718      	adds	r7, #24
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}

08011940 <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 8011940:	b580      	push	{r7, lr}
 8011942:	b08e      	sub	sp, #56	; 0x38
 8011944:	af08      	add	r7, sp, #32
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 801194a:	2305      	movs	r3, #5
 801194c:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 801194e:	2310      	movs	r3, #16
 8011950:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 8011952:	2301      	movs	r3, #1
 8011954:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 8011956:	2302      	movs	r3, #2
 8011958:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 801195a:	2312      	movs	r3, #18
 801195c:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 801195e:	2300      	movs	r3, #0
 8011960:	75fb      	strb	r3, [r7, #23]
 8011962:	7dfb      	ldrb	r3, [r7, #23]
 8011964:	2b05      	cmp	r3, #5
 8011966:	d80e      	bhi.n	8011986 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 8011968:	7dfb      	ldrb	r3, [r7, #23]
 801196a:	683a      	ldr	r2, [r7, #0]
 801196c:	441a      	add	r2, r3
 801196e:	7dfb      	ldrb	r3, [r7, #23]
 8011970:	3301      	adds	r3, #1
 8011972:	7812      	ldrb	r2, [r2, #0]
 8011974:	f107 0118 	add.w	r1, r7, #24
 8011978:	440b      	add	r3, r1
 801197a:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 801197e:	7dfb      	ldrb	r3, [r7, #23]
 8011980:	3301      	adds	r3, #1
 8011982:	75fb      	strb	r3, [r7, #23]
 8011984:	e7ed      	b.n	8011962 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8011996:	2300      	movs	r3, #0
 8011998:	9307      	str	r3, [sp, #28]
 801199a:	f107 030c 	add.w	r3, r7, #12
 801199e:	9306      	str	r3, [sp, #24]
 80119a0:	230b      	movs	r3, #11
 80119a2:	9305      	str	r3, [sp, #20]
 80119a4:	230b      	movs	r3, #11
 80119a6:	9304      	str	r3, [sp, #16]
 80119a8:	2300      	movs	r3, #0
 80119aa:	9303      	str	r3, [sp, #12]
 80119ac:	2303      	movs	r3, #3
 80119ae:	9302      	str	r3, [sp, #8]
 80119b0:	2305      	movs	r3, #5
 80119b2:	9301      	str	r3, [sp, #4]
 80119b4:	2309      	movs	r3, #9
 80119b6:	9300      	str	r3, [sp, #0]
 80119b8:	2321      	movs	r3, #33	; 0x21
 80119ba:	f002 f8fe 	bl	8013bba <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 80119be:	bf00      	nop
 80119c0:	3718      	adds	r7, #24
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}

080119c6 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 80119c6:	b580      	push	{r7, lr}
 80119c8:	b082      	sub	sp, #8
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	4603      	mov	r3, r0
 80119ce:	6039      	str	r1, [r7, #0]
 80119d0:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
 80119d2:	79fb      	ldrb	r3, [r7, #7]
 80119d4:	6839      	ldr	r1, [r7, #0]
 80119d6:	4618      	mov	r0, r3
 80119d8:	f000 f8b0 	bl	8011b3c <_Z8PrintHexIhEvT_i>
#endif
}
 80119dc:	bf00      	nop
 80119de:	3708      	adds	r7, #8
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 80119e4:	b480      	push	{r7}
 80119e6:	b083      	sub	sp, #12
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	4a04      	ldr	r2, [pc, #16]	; (8011a00 <_ZN13USBReadParserC1Ev+0x1c>)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	601a      	str	r2, [r3, #0]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	4618      	mov	r0, r3
 80119f6:	370c      	adds	r7, #12
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr
 8011a00:	08017cb4 	.word	0x08017cb4

08011a04 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7ff ffe7 	bl	80119e4 <_ZN13USBReadParserC1Ev>
 8011a16:	4a21      	ldr	r2, [pc, #132]	; (8011a9c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	601a      	str	r2, [r3, #0]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	683a      	ldr	r2, [r7, #0]
 8011a20:	605a      	str	r2, [r3, #4]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	3308      	adds	r3, #8
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fc fda5 	bl	800e576 <_ZN16MultiValueBufferC1Ev>
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	3310      	adds	r3, #16
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fc fdb7 	bl	800e5a4 <_ZN20MultiByteValueParserC1Ev>
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	3318      	adds	r3, #24
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fc fdde 	bl	800e5fc <_ZN11ByteSkipperC1Ev>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2200      	movs	r2, #0
 8011a44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2200      	movs	r2, #0
 8011a54:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f103 0220 	add.w	r2, r3, #32
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f103 0210 	add.w	r2, r3, #16
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	3308      	adds	r3, #8
 8011a76:	4619      	mov	r1, r3
 8011a78:	4610      	mov	r0, r2
 8011a7a:	f7fc fda7 	bl	800e5cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f103 0218 	add.w	r2, r3, #24
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	3308      	adds	r3, #8
 8011a88:	4619      	mov	r1, r3
 8011a8a:	4610      	mov	r0, r2
 8011a8c:	f7fc fdca 	bl	800e624 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	4618      	mov	r0, r3
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	08017c5c 	.word	0x08017c5c

08011aa0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b082      	sub	sp, #8
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
UseOr(false) {
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7ff ff99 	bl	80119e4 <_ZN13USBReadParserC1Ev>
 8011ab2:	4a21      	ldr	r2, [pc, #132]	; (8011b38 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	601a      	str	r2, [r3, #0]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	683a      	ldr	r2, [r7, #0]
 8011abc:	605a      	str	r2, [r3, #4]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	3308      	adds	r3, #8
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7fc fd57 	bl	800e576 <_ZN16MultiValueBufferC1Ev>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	3310      	adds	r3, #16
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7fc fd69 	bl	800e5a4 <_ZN20MultiByteValueParserC1Ev>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	3318      	adds	r3, #24
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f7fc fd90 	bl	800e5fc <_ZN11ByteSkipperC1Ev>
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2200      	movs	r2, #0
 8011af0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2200      	movs	r2, #0
 8011af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f103 0220 	add.w	r2, r3, #32
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f103 0210 	add.w	r2, r3, #16
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	3308      	adds	r3, #8
 8011b12:	4619      	mov	r1, r3
 8011b14:	4610      	mov	r0, r2
 8011b16:	f7fc fd59 	bl	800e5cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f103 0218 	add.w	r2, r3, #24
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	3308      	adds	r3, #8
 8011b24:	4619      	mov	r1, r3
 8011b26:	4610      	mov	r0, r2
 8011b28:	f7fc fd7c 	bl	800e624 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3708      	adds	r7, #8
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	bf00      	nop
 8011b38:	08017c50 	.word	0x08017c50

08011b3c <_Z8PrintHexIhEvT_i>:
void PrintHex(T val, int lvl) {
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b084      	sub	sp, #16
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	4603      	mov	r3, r0
 8011b44:	6039      	str	r1, [r7, #0]
 8011b46:	71fb      	strb	r3, [r7, #7]
        int num_nibbles = sizeof (T) * 2;
 8011b48:	2302      	movs	r3, #2
 8011b4a:	60fb      	str	r3, [r7, #12]
                char v = 48 + (((val >> (num_nibbles - 1) * 4)) & 0x0f);
 8011b4c:	79fa      	ldrb	r2, [r7, #7]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	3b01      	subs	r3, #1
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	fa42 f303 	asr.w	r3, r2, r3
 8011b58:	b2db      	uxtb	r3, r3
 8011b5a:	f003 030f 	and.w	r3, r3, #15
 8011b5e:	b2db      	uxtb	r3, r3
 8011b60:	3330      	adds	r3, #48	; 0x30
 8011b62:	72fb      	strb	r3, [r7, #11]
                if(v > 57) v += 7;
 8011b64:	7afb      	ldrb	r3, [r7, #11]
 8011b66:	2b39      	cmp	r3, #57	; 0x39
 8011b68:	d902      	bls.n	8011b70 <_Z8PrintHexIhEvT_i+0x34>
 8011b6a:	7afb      	ldrb	r3, [r7, #11]
 8011b6c:	3307      	adds	r3, #7
 8011b6e:	72fb      	strb	r3, [r7, #11]
                E_Notifyc(v, lvl);
 8011b70:	7afb      	ldrb	r3, [r7, #11]
 8011b72:	6839      	ldr	r1, [r7, #0]
 8011b74:	4618      	mov	r0, r3
 8011b76:	f003 fead 	bl	80158d4 <_Z9E_Notifycci>
        do {
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	3b01      	subs	r3, #1
 8011b7e:	60fb      	str	r3, [r7, #12]
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	bf14      	ite	ne
 8011b86:	2301      	movne	r3, #1
 8011b88:	2300      	moveq	r3, #0
 8011b8a:	b2db      	uxtb	r3, r3
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d000      	beq.n	8011b92 <_Z8PrintHexIhEvT_i+0x56>
 8011b90:	e7dc      	b.n	8011b4c <_Z8PrintHexIhEvT_i+0x10>
}
 8011b92:	bf00      	nop
 8011b94:	3710      	adds	r7, #16
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}

08011b9a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 8011b9a:	b580      	push	{r7, lr}
 8011b9c:	b086      	sub	sp, #24
 8011b9e:	af00      	add	r7, sp, #0
 8011ba0:	60f8      	str	r0, [r7, #12]
 8011ba2:	607a      	str	r2, [r7, #4]
 8011ba4:	603b      	str	r3, [r7, #0]
 8011ba6:	460b      	mov	r3, r1
 8011ba8:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 8011baa:	897b      	ldrh	r3, [r7, #10]
 8011bac:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	613b      	str	r3, [r7, #16]

        while(cntdn)
 8011bb2:	8afb      	ldrh	r3, [r7, #22]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d00f      	beq.n	8011bd8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 8011bb8:	f107 0216 	add.w	r2, r7, #22
 8011bbc:	f107 0310 	add.w	r3, r7, #16
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	68f8      	ldr	r0, [r7, #12]
 8011bc4:	f000 f82e 	bl	8011c24 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	f083 0301 	eor.w	r3, r3, #1
 8011bce:	b2db      	uxtb	r3, r3
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d100      	bne.n	8011bd6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 8011bd4:	e7ed      	b.n	8011bb2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 8011bd6:	bf00      	nop
}
 8011bd8:	3718      	adds	r7, #24
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}

08011bde <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 8011bde:	b580      	push	{r7, lr}
 8011be0:	b086      	sub	sp, #24
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	60f8      	str	r0, [r7, #12]
 8011be6:	607a      	str	r2, [r7, #4]
 8011be8:	603b      	str	r3, [r7, #0]
 8011bea:	460b      	mov	r3, r1
 8011bec:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 8011bee:	897b      	ldrh	r3, [r7, #10]
 8011bf0:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	613b      	str	r3, [r7, #16]
        while(cntdn)
 8011bf6:	8afb      	ldrh	r3, [r7, #22]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d00f      	beq.n	8011c1c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 8011bfc:	f107 0216 	add.w	r2, r7, #22
 8011c00:	f107 0310 	add.w	r3, r7, #16
 8011c04:	4619      	mov	r1, r3
 8011c06:	68f8      	ldr	r0, [r7, #12]
 8011c08:	f000 f982 	bl	8011f10 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	f083 0301 	eor.w	r3, r3, #1
 8011c12:	b2db      	uxtb	r3, r3
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d100      	bne.n	8011c1a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 8011c18:	e7ed      	b.n	8011bf6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 8011c1a:	bf00      	nop
}
 8011c1c:	3718      	adds	r7, #24
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
	...

08011c24 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8011c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c26:	b089      	sub	sp, #36	; 0x24
 8011c28:	af02      	add	r7, sp, #8
 8011c2a:	60f8      	str	r0, [r7, #12]
 8011c2c:	60b9      	str	r1, [r7, #8]
 8011c2e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	3320      	adds	r3, #32
 8011c34:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	3320      	adds	r3, #32
 8011c3a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c42:	2b04      	cmp	r3, #4
 8011c44:	f200 815e 	bhi.w	8011f04 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8011c48:	a201      	add	r2, pc, #4	; (adr r2, 8011c50 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8011c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c4e:	bf00      	nop
 8011c50:	08011c65 	.word	0x08011c65
 8011c54:	08011c85 	.word	0x08011c85
 8011c58:	08011cc7 	.word	0x08011cc7
 8011c5c:	08011cdb 	.word	0x08011cdb
 8011c60:	08011d9f 	.word	0x08011d9f
                case 0:
                        theBuffer.valueSize = 2;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2202      	movs	r2, #2
 8011c68:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f103 0210 	add.w	r2, r3, #16
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	3308      	adds	r3, #8
 8011c74:	4619      	mov	r1, r3
 8011c76:	4610      	mov	r0, r2
 8011c78:	f7fc fca8 	bl	800e5cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2201      	movs	r2, #1
 8011c80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	3310      	adds	r3, #16
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	68b9      	ldr	r1, [r7, #8]
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f003 fef9 	bl	8015a84 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011c92:	4603      	mov	r3, r0
 8011c94:	f083 0301 	eor.w	r3, r3, #1
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d001      	beq.n	8011ca2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	e131      	b.n	8011f06 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011ca8:	781a      	ldrb	r2, [r3, #0]
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011cb6:	785a      	ldrb	r2, [r3, #1]
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	2202      	movs	r2, #2
 8011cc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	3320      	adds	r3, #32
 8011cca:	1c9a      	adds	r2, r3, #2
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	2203      	movs	r2, #3
 8011cd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011ce0:	3b02      	subs	r3, #2
 8011ce2:	2b1f      	cmp	r3, #31
 8011ce4:	d847      	bhi.n	8011d76 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8011ce6:	a201      	add	r2, pc, #4	; (adr r2, 8011cec <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8011ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cec:	08011d77 	.word	0x08011d77
 8011cf0:	08011d77 	.word	0x08011d77
 8011cf4:	08011d6d 	.word	0x08011d6d
 8011cf8:	08011d77 	.word	0x08011d77
 8011cfc:	08011d77 	.word	0x08011d77
 8011d00:	08011d77 	.word	0x08011d77
 8011d04:	08011d77 	.word	0x08011d77
 8011d08:	08011d77 	.word	0x08011d77
 8011d0c:	08011d77 	.word	0x08011d77
 8011d10:	08011d77 	.word	0x08011d77
 8011d14:	08011d77 	.word	0x08011d77
 8011d18:	08011d77 	.word	0x08011d77
 8011d1c:	08011d77 	.word	0x08011d77
 8011d20:	08011d77 	.word	0x08011d77
 8011d24:	08011d77 	.word	0x08011d77
 8011d28:	08011d77 	.word	0x08011d77
 8011d2c:	08011d77 	.word	0x08011d77
 8011d30:	08011d77 	.word	0x08011d77
 8011d34:	08011d77 	.word	0x08011d77
 8011d38:	08011d77 	.word	0x08011d77
 8011d3c:	08011d77 	.word	0x08011d77
 8011d40:	08011d77 	.word	0x08011d77
 8011d44:	08011d77 	.word	0x08011d77
 8011d48:	08011d77 	.word	0x08011d77
 8011d4c:	08011d77 	.word	0x08011d77
 8011d50:	08011d77 	.word	0x08011d77
 8011d54:	08011d77 	.word	0x08011d77
 8011d58:	08011d77 	.word	0x08011d77
 8011d5c:	08011d77 	.word	0x08011d77
 8011d60:	08011d77 	.word	0x08011d77
 8011d64:	08011d77 	.word	0x08011d77
 8011d68:	08011d77 	.word	0x08011d77
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8011d74:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d7c:	3b02      	subs	r3, #2
 8011d7e:	b2da      	uxtb	r2, r3
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	f103 0210 	add.w	r2, r3, #16
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	3308      	adds	r3, #8
 8011d8e:	4619      	mov	r1, r3
 8011d90:	4610      	mov	r0, r2
 8011d92:	f7fc fc1b 	bl	800e5cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	2204      	movs	r2, #4
 8011d9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011da4:	2b05      	cmp	r3, #5
 8011da6:	d055      	beq.n	8011e54 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 8011da8:	2b05      	cmp	r3, #5
 8011daa:	f300 8085 	bgt.w	8011eb8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 8011dae:	2b02      	cmp	r3, #2
 8011db0:	d002      	beq.n	8011db8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 8011db2:	2b04      	cmp	r3, #4
 8011db4:	d015      	beq.n	8011de2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 8011db6:	e07f      	b.n	8011eb8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	3310      	adds	r3, #16
 8011dbc:	687a      	ldr	r2, [r7, #4]
 8011dbe:	68b9      	ldr	r1, [r7, #8]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f003 fe5f 	bl	8015a84 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	f083 0301 	eor.w	r3, r3, #1
 8011dcc:	b2db      	uxtb	r3, r3
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d001      	beq.n	8011dd6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	e097      	b.n	8011f06 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	795a      	ldrb	r2, [r3, #5]
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 8011de0:	e086      	b.n	8011ef0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	3310      	adds	r3, #16
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	68b9      	ldr	r1, [r7, #8]
 8011dea:	4618      	mov	r0, r3
 8011dec:	f003 fe4a 	bl	8015a84 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011df0:	4603      	mov	r3, r0
 8011df2:	f083 0301 	eor.w	r3, r3, #1
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d001      	beq.n	8011e00 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	e082      	b.n	8011f06 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	795b      	ldrb	r3, [r3, #5]
 8011e04:	2be0      	cmp	r3, #224	; 0xe0
 8011e06:	d16c      	bne.n	8011ee2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	799b      	ldrb	r3, [r3, #6]
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d16a      	bne.n	8011ee6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d004      	beq.n	8011e24 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	79db      	ldrb	r3, [r3, #7]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d104      	bne.n	8011e2c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 8011e22:	e065      	b.n	8011ef0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	79db      	ldrb	r3, [r3, #7]
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d15e      	bne.n	8011eea <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2201      	movs	r2, #1
 8011e30:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	789a      	ldrb	r2, [r3, #2]
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	78da      	ldrb	r2, [r3, #3]
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	79da      	ldrb	r2, [r3, #7]
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 8011e52:	e04d      	b.n	8011ef0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	3310      	adds	r3, #16
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	68b9      	ldr	r1, [r7, #8]
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f003 fe11 	bl	8015a84 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011e62:	4603      	mov	r3, r0
 8011e64:	f083 0301 	eor.w	r3, r3, #1
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d001      	beq.n	8011e72 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	e049      	b.n	8011f06 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d038      	beq.n	8011eee <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d034      	beq.n	8011eee <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	6858      	ldr	r0, [r3, #4]
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	681c      	ldr	r4, [r3, #0]
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011ea8:	68fa      	ldr	r2, [r7, #12]
 8011eaa:	3220      	adds	r2, #32
 8011eac:	9201      	str	r2, [sp, #4]
 8011eae:	9300      	str	r3, [sp, #0]
 8011eb0:	4633      	mov	r3, r6
 8011eb2:	462a      	mov	r2, r5
 8011eb4:	47a0      	blx	r4
                                        break;
 8011eb6:	e01a      	b.n	8011eee <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	f103 0018 	add.w	r0, r3, #24
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	3b02      	subs	r3, #2
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	68b9      	ldr	r1, [r7, #8]
 8011ece:	f7fc fbbc 	bl	800e64a <_ZN11ByteSkipper4SkipEPPhPtt>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	f083 0301 	eor.w	r3, r3, #1
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d008      	beq.n	8011ef0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	e011      	b.n	8011f06 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 8011ee2:	bf00      	nop
 8011ee4:	e004      	b.n	8011ef0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8011ee6:	bf00      	nop
 8011ee8:	e002      	b.n	8011ef0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 8011eea:	bf00      	nop
 8011eec:	e000      	b.n	8011ef0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 8011eee:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f103 0220 	add.w	r2, r3, #32
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	2200      	movs	r2, #0
 8011f00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 8011f04:	2301      	movs	r3, #1
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	371c      	adds	r7, #28
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f0e:	bf00      	nop

08011f10 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8011f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f12:	b089      	sub	sp, #36	; 0x24
 8011f14:	af02      	add	r7, sp, #8
 8011f16:	60f8      	str	r0, [r7, #12]
 8011f18:	60b9      	str	r1, [r7, #8]
 8011f1a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	3320      	adds	r3, #32
 8011f20:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	3320      	adds	r3, #32
 8011f26:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011f2e:	2b04      	cmp	r3, #4
 8011f30:	f200 815e 	bhi.w	80121f0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8011f34:	a201      	add	r2, pc, #4	; (adr r2, 8011f3c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8011f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f3a:	bf00      	nop
 8011f3c:	08011f51 	.word	0x08011f51
 8011f40:	08011f71 	.word	0x08011f71
 8011f44:	08011fb3 	.word	0x08011fb3
 8011f48:	08011fc7 	.word	0x08011fc7
 8011f4c:	0801208b 	.word	0x0801208b
                        theBuffer.valueSize = 2;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2202      	movs	r2, #2
 8011f54:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	f103 0210 	add.w	r2, r3, #16
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	3308      	adds	r3, #8
 8011f60:	4619      	mov	r1, r3
 8011f62:	4610      	mov	r0, r2
 8011f64:	f7fc fb32 	bl	800e5cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	3310      	adds	r3, #16
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	68b9      	ldr	r1, [r7, #8]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f003 fd83 	bl	8015a84 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	f083 0301 	eor.w	r3, r3, #1
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d001      	beq.n	8011f8e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	e131      	b.n	80121f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011f94:	781a      	ldrb	r2, [r3, #0]
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011fa2:	785a      	ldrb	r2, [r3, #1]
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	2202      	movs	r2, #2
 8011fae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	3320      	adds	r3, #32
 8011fb6:	1c9a      	adds	r2, r3, #2
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	2203      	movs	r2, #3
 8011fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011fcc:	3b02      	subs	r3, #2
 8011fce:	2b1f      	cmp	r3, #31
 8011fd0:	d847      	bhi.n	8012062 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8011fd2:	a201      	add	r2, pc, #4	; (adr r2, 8011fd8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8011fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fd8:	08012063 	.word	0x08012063
 8011fdc:	08012063 	.word	0x08012063
 8011fe0:	08012059 	.word	0x08012059
 8011fe4:	08012063 	.word	0x08012063
 8011fe8:	08012063 	.word	0x08012063
 8011fec:	08012063 	.word	0x08012063
 8011ff0:	08012063 	.word	0x08012063
 8011ff4:	08012063 	.word	0x08012063
 8011ff8:	08012063 	.word	0x08012063
 8011ffc:	08012063 	.word	0x08012063
 8012000:	08012063 	.word	0x08012063
 8012004:	08012063 	.word	0x08012063
 8012008:	08012063 	.word	0x08012063
 801200c:	08012063 	.word	0x08012063
 8012010:	08012063 	.word	0x08012063
 8012014:	08012063 	.word	0x08012063
 8012018:	08012063 	.word	0x08012063
 801201c:	08012063 	.word	0x08012063
 8012020:	08012063 	.word	0x08012063
 8012024:	08012063 	.word	0x08012063
 8012028:	08012063 	.word	0x08012063
 801202c:	08012063 	.word	0x08012063
 8012030:	08012063 	.word	0x08012063
 8012034:	08012063 	.word	0x08012063
 8012038:	08012063 	.word	0x08012063
 801203c:	08012063 	.word	0x08012063
 8012040:	08012063 	.word	0x08012063
 8012044:	08012063 	.word	0x08012063
 8012048:	08012063 	.word	0x08012063
 801204c:	08012063 	.word	0x08012063
 8012050:	08012063 	.word	0x08012063
 8012054:	08012063 	.word	0x08012063
                                        isGoodInterface = false;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	2200      	movs	r2, #0
 801205c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8012060:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012068:	3b02      	subs	r3, #2
 801206a:	b2da      	uxtb	r2, r3
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	f103 0210 	add.w	r2, r3, #16
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	3308      	adds	r3, #8
 801207a:	4619      	mov	r1, r3
 801207c:	4610      	mov	r0, r2
 801207e:	f7fc faa5 	bl	800e5cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	2204      	movs	r2, #4
 8012086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012090:	2b05      	cmp	r3, #5
 8012092:	d055      	beq.n	8012140 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 8012094:	2b05      	cmp	r3, #5
 8012096:	f300 8085 	bgt.w	80121a4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 801209a:	2b02      	cmp	r3, #2
 801209c:	d002      	beq.n	80120a4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 801209e:	2b04      	cmp	r3, #4
 80120a0:	d015      	beq.n	80120ce <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80120a2:	e07f      	b.n	80121a4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	3310      	adds	r3, #16
 80120a8:	687a      	ldr	r2, [r7, #4]
 80120aa:	68b9      	ldr	r1, [r7, #8]
 80120ac:	4618      	mov	r0, r3
 80120ae:	f003 fce9 	bl	8015a84 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80120b2:	4603      	mov	r3, r0
 80120b4:	f083 0301 	eor.w	r3, r3, #1
 80120b8:	b2db      	uxtb	r3, r3
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d001      	beq.n	80120c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 80120be:	2300      	movs	r3, #0
 80120c0:	e097      	b.n	80121f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	795a      	ldrb	r2, [r3, #5]
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 80120cc:	e086      	b.n	80121dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	3310      	adds	r3, #16
 80120d2:	687a      	ldr	r2, [r7, #4]
 80120d4:	68b9      	ldr	r1, [r7, #8]
 80120d6:	4618      	mov	r0, r3
 80120d8:	f003 fcd4 	bl	8015a84 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80120dc:	4603      	mov	r3, r0
 80120de:	f083 0301 	eor.w	r3, r3, #1
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d001      	beq.n	80120ec <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 80120e8:	2300      	movs	r3, #0
 80120ea:	e082      	b.n	80121f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	795b      	ldrb	r3, [r3, #5]
 80120f0:	2bff      	cmp	r3, #255	; 0xff
 80120f2:	d16c      	bne.n	80121ce <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	799b      	ldrb	r3, [r3, #6]
 80120f8:	2b01      	cmp	r3, #1
 80120fa:	d16a      	bne.n	80121d2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012102:	2b00      	cmp	r3, #0
 8012104:	d004      	beq.n	8012110 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	79db      	ldrb	r3, [r3, #7]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d104      	bne.n	8012118 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 801210e:	e065      	b.n	80121dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	79db      	ldrb	r3, [r3, #7]
 8012114:	2b01      	cmp	r3, #1
 8012116:	d15e      	bne.n	80121d6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2201      	movs	r2, #1
 801211c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	789a      	ldrb	r2, [r3, #2]
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	78da      	ldrb	r2, [r3, #3]
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	79da      	ldrb	r2, [r3, #7]
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 801213e:	e04d      	b.n	80121dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	3310      	adds	r3, #16
 8012144:	687a      	ldr	r2, [r7, #4]
 8012146:	68b9      	ldr	r1, [r7, #8]
 8012148:	4618      	mov	r0, r3
 801214a:	f003 fc9b 	bl	8015a84 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801214e:	4603      	mov	r3, r0
 8012150:	f083 0301 	eor.w	r3, r3, #1
 8012154:	b2db      	uxtb	r3, r3
 8012156:	2b00      	cmp	r3, #0
 8012158:	d001      	beq.n	801215e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801215a:	2300      	movs	r3, #0
 801215c:	e049      	b.n	80121f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012164:	2b00      	cmp	r3, #0
 8012166:	d038      	beq.n	80121da <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	685b      	ldr	r3, [r3, #4]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d034      	beq.n	80121da <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	6858      	ldr	r0, [r3, #4]
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	685b      	ldr	r3, [r3, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	681c      	ldr	r4, [r3, #0]
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012194:	68fa      	ldr	r2, [r7, #12]
 8012196:	3220      	adds	r2, #32
 8012198:	9201      	str	r2, [sp, #4]
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	4633      	mov	r3, r6
 801219e:	462a      	mov	r2, r5
 80121a0:	47a0      	blx	r4
                                        break;
 80121a2:	e01a      	b.n	80121da <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f103 0018 	add.w	r0, r3, #24
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80121b0:	b29b      	uxth	r3, r3
 80121b2:	3b02      	subs	r3, #2
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	68b9      	ldr	r1, [r7, #8]
 80121ba:	f7fc fa46 	bl	800e64a <_ZN11ByteSkipper4SkipEPPhPtt>
 80121be:	4603      	mov	r3, r0
 80121c0:	f083 0301 	eor.w	r3, r3, #1
 80121c4:	b2db      	uxtb	r3, r3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d008      	beq.n	80121dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 80121ca:	2300      	movs	r3, #0
 80121cc:	e011      	b.n	80121f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 80121ce:	bf00      	nop
 80121d0:	e004      	b.n	80121dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 80121d2:	bf00      	nop
 80121d4:	e002      	b.n	80121dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 80121d6:	bf00      	nop
 80121d8:	e000      	b.n	80121dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 80121da:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	f103 0220 	add.w	r2, r3, #32
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2200      	movs	r2, #0
 80121ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 80121f0:	2301      	movs	r3, #1
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	371c      	adds	r7, #28
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121fa:	bf00      	nop

080121fc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 80121fc:	b480      	push	{r7}
 80121fe:	b085      	sub	sp, #20
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8012206:	2300      	movs	r3, #0
 8012208:	73fb      	strb	r3, [r7, #15]
 801220a:	7bfb      	ldrb	r3, [r7, #15]
 801220c:	2b03      	cmp	r3, #3
 801220e:	d815      	bhi.n	801223c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 8012210:	7bfb      	ldrb	r3, [r7, #15]
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	331e      	adds	r3, #30
 8012216:	009b      	lsls	r3, r3, #2
 8012218:	4413      	add	r3, r2
 801221a:	685b      	ldr	r3, [r3, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d109      	bne.n	8012234 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 8012220:	7bfb      	ldrb	r3, [r7, #15]
 8012222:	687a      	ldr	r2, [r7, #4]
 8012224:	331e      	adds	r3, #30
 8012226:	009b      	lsls	r3, r3, #2
 8012228:	4413      	add	r3, r2
 801222a:	683a      	ldr	r2, [r7, #0]
 801222c:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 801222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012232:	e005      	b.n	8012240 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8012234:	7bfb      	ldrb	r3, [r7, #15]
 8012236:	3301      	adds	r3, #1
 8012238:	73fb      	strb	r3, [r7, #15]
 801223a:	e7e6      	b.n	801220a <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 801223c:	f04f 33ff 	mov.w	r3, #4294967295
        };
 8012240:	4618      	mov	r0, r3
 8012242:	3714      	adds	r7, #20
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
 8012256:	4a0a      	ldr	r2, [pc, #40]	; (8012280 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	601a      	str	r2, [r3, #0]
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	683a      	ldr	r2, [r7, #0]
 8012260:	609a      	str	r2, [r3, #8]
                if(pBtd)
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	689b      	ldr	r3, [r3, #8]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d005      	beq.n	8012276 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	689b      	ldr	r3, [r3, #8]
 801226e:	6879      	ldr	r1, [r7, #4]
 8012270:	4618      	mov	r0, r3
 8012272:	f7ff ffc3 	bl	80121fc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	4618      	mov	r0, r3
 801227a:	3708      	adds	r7, #8
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}
 8012280:	08017d18 	.word	0x08017d18

08012284 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 8012284:	b480      	push	{r7}
 8012286:	b085      	sub	sp, #20
 8012288:	af00      	add	r7, sp, #0
 801228a:	60f8      	str	r0, [r7, #12]
 801228c:	60b9      	str	r1, [r7, #8]
 801228e:	4613      	mov	r3, r2
 8012290:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	461a      	mov	r2, r3
 8012298:	88fb      	ldrh	r3, [r7, #6]
 801229a:	b2db      	uxtb	r3, r3
 801229c:	429a      	cmp	r2, r3
 801229e:	d10b      	bne.n	80122b8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	3301      	adds	r3, #1
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	461a      	mov	r2, r3
 80122a8:	88fb      	ldrh	r3, [r7, #6]
 80122aa:	121b      	asrs	r3, r3, #8
 80122ac:	f043 0320 	orr.w	r3, r3, #32
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d101      	bne.n	80122b8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80122b4:	2301      	movs	r3, #1
 80122b6:	e000      	b.n	80122ba <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 80122b8:	2300      	movs	r3, #0
        }
 80122ba:	4618      	mov	r0, r3
 80122bc:	3714      	adds	r7, #20
 80122be:	46bd      	mov	sp, r7
 80122c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c4:	4770      	bx	lr

080122c6 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80122c6:	b480      	push	{r7}
 80122c8:	b085      	sub	sp, #20
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	60f8      	str	r0, [r7, #12]
 80122ce:	460b      	mov	r3, r1
 80122d0:	607a      	str	r2, [r7, #4]
 80122d2:	72fb      	strb	r3, [r7, #11]
                return;
 80122d4:	bf00      	nop
        };
 80122d6:	3714      	adds	r7, #20
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
                return;
 80122e8:	bf00      	nop
        };
 80122ea:	370c      	adds	r7, #12
 80122ec:	46bd      	mov	sp, r7
 80122ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f2:	4770      	bx	lr

080122f4 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 80122f4:	b480      	push	{r7}
 80122f6:	b083      	sub	sp, #12
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
                return;
 80122fc:	bf00      	nop
        }
 80122fe:	370c      	adds	r7, #12
 8012300:	46bd      	mov	sp, r7
 8012302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012306:	4770      	bx	lr

08012308 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 8012308:	b580      	push	{r7, lr}
 801230a:	b086      	sub	sp, #24
 801230c:	af00      	add	r7, sp, #0
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	60b9      	str	r1, [r7, #8]
 8012312:	603b      	str	r3, [r7, #0]
 8012314:	4613      	mov	r3, r2
 8012316:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	68b9      	ldr	r1, [r7, #8]
 801231c:	4618      	mov	r0, r3
 801231e:	f7ff ff95 	bl	801224c <_ZN16BluetoothServiceC1EP3BTD>
 8012322:	4a1f      	ldr	r2, [pc, #124]	; (80123a0 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	601a      	str	r2, [r3, #0]
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	2200      	movs	r2, #0
 801232c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8012330:	2300      	movs	r3, #0
 8012332:	75fb      	strb	r3, [r7, #23]
 8012334:	7dfb      	ldrb	r3, [r7, #23]
 8012336:	2b01      	cmp	r3, #1
 8012338:	d809      	bhi.n	801234e <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 801233a:	7dfa      	ldrb	r2, [r7, #23]
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	3208      	adds	r2, #8
 8012340:	2100      	movs	r1, #0
 8012342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8012346:	7dfb      	ldrb	r3, [r7, #23]
 8012348:	3301      	adds	r3, #1
 801234a:	75fb      	strb	r3, [r7, #23]
 801234c:	e7f2      	b.n	8012334 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	689b      	ldr	r3, [r3, #8]
 8012352:	79fa      	ldrb	r2, [r7, #7]
 8012354:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        pBtd->btdPin = pin;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	689b      	ldr	r3, [r3, #8]
 801235c:	683a      	ldr	r2, [r7, #0]
 801235e:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	2250      	movs	r2, #80	; 0x50
 8012364:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	2200      	movs	r2, #0
 801236c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2270      	movs	r2, #112	; 0x70
 8012374:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2200      	movs	r2, #0
 801237c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	2271      	movs	r2, #113	; 0x71
 8012384:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	2200      	movs	r2, #0
 801238c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	f000 f807 	bl	80123a4 <_ZN5BTHID5ResetEv>
}
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	4618      	mov	r0, r3
 801239a:	3718      	adds	r7, #24
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}
 80123a0:	08017cec 	.word	0x08017cec

080123a4 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
        connected = false;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2200      	movs	r2, #0
 80123b0:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2200      	movs	r2, #0
 80123b6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2200      	movs	r2, #0
 80123be:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2200      	movs	r2, #0
 80123c6:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	220a      	movs	r2, #10
 80123cc:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2200      	movs	r2, #0
 80123d2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	3320      	adds	r3, #32
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	4798      	blx	r3
}
 80123e2:	bf00      	nop
 80123e4:	3708      	adds	r7, #8
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}

080123ea <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 80123ea:	b590      	push	{r4, r7, lr}
 80123ec:	b085      	sub	sp, #20
 80123ee:	af02      	add	r7, sp, #8
 80123f0:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d014      	beq.n	8012426 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6898      	ldr	r0, [r3, #8]
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	8999      	ldrh	r1, [r3, #12]
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	7d1b      	ldrb	r3, [r3, #20]
 8012408:	3301      	adds	r3, #1
 801240a:	b2da      	uxtb	r2, r3
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	751a      	strb	r2, [r3, #20]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	7d1a      	ldrb	r2, [r3, #20]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f103 041b 	add.w	r4, r3, #27
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	336f      	adds	r3, #111	; 0x6f
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	4623      	mov	r3, r4
 8012422:	f7ff f986 	bl	8011732 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6898      	ldr	r0, [r3, #8]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	8999      	ldrh	r1, [r3, #12]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	7d1b      	ldrb	r3, [r3, #20]
 8012432:	3301      	adds	r3, #1
 8012434:	b2da      	uxtb	r2, r3
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	751a      	strb	r2, [r3, #20]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	7d1a      	ldrb	r2, [r3, #20]
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f103 0418 	add.w	r4, r3, #24
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	336d      	adds	r3, #109	; 0x6d
 8012448:	9300      	str	r3, [sp, #0]
 801244a:	4623      	mov	r3, r4
 801244c:	f7ff f971 	bl	8011732 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	3308      	adds	r3, #8
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	220e      	movs	r2, #14
 8012460:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2209      	movs	r2, #9
 8012466:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 801246a:	bf00      	nop
 801246c:	370c      	adds	r7, #12
 801246e:	46bd      	mov	sp, r7
 8012470:	bd90      	pop	{r4, r7, pc}
	...

08012474 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 8012474:	b590      	push	{r4, r7, lr}
 8012476:	b087      	sub	sp, #28
 8012478:	af02      	add	r7, sp, #8
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6039      	str	r1, [r7, #0]
        if(!connected) {
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	7d5b      	ldrb	r3, [r3, #21]
 8012482:	f083 0301 	eor.w	r3, r3, #1
 8012486:	b2db      	uxtb	r3, r3
 8012488:	2b00      	cmp	r3, #0
 801248a:	d023      	beq.n	80124d4 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	3308      	adds	r3, #8
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	2b02      	cmp	r3, #2
 8012494:	d11e      	bne.n	80124d4 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	330c      	adds	r3, #12
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	461a      	mov	r2, r3
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	330d      	adds	r3, #13
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	021b      	lsls	r3, r3, #8
 80124a6:	4313      	orrs	r3, r2
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	d113      	bne.n	80124d4 <_ZN5BTHID7ACLDataEPh+0x60>
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	689b      	ldr	r3, [r3, #8]
 80124b0:	7a9b      	ldrb	r3, [r3, #10]
 80124b2:	f083 0301 	eor.w	r3, r3, #1
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d00b      	beq.n	80124d4 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	689b      	ldr	r3, [r3, #8]
 80124c0:	2201      	movs	r2, #1
 80124c2:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	689b      	ldr	r3, [r3, #8]
 80124c8:	8b5a      	ldrh	r2, [r3, #26]
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	220a      	movs	r2, #10
 80124d2:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	689b      	ldr	r3, [r3, #8]
 80124d8:	7a5b      	ldrb	r3, [r3, #9]
 80124da:	f083 0301 	eor.w	r3, r3, #1
 80124de:	b2db      	uxtb	r3, r3
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d03a      	beq.n	801255a <_ZN5BTHID7ACLDataEPh+0xe6>
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	689b      	ldr	r3, [r3, #8]
 80124e8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d034      	beq.n	801255a <_ZN5BTHID7ACLDataEPh+0xe6>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	7d5b      	ldrb	r3, [r3, #21]
 80124f4:	f083 0301 	eor.w	r3, r3, #1
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d02d      	beq.n	801255a <_ZN5BTHID7ACLDataEPh+0xe6>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8012504:	f083 0301 	eor.w	r3, r3, #1
 8012508:	b2db      	uxtb	r3, r3
 801250a:	2b00      	cmp	r3, #0
 801250c:	d025      	beq.n	801255a <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	3308      	adds	r3, #8
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	2b02      	cmp	r3, #2
 8012516:	d120      	bne.n	801255a <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	330c      	adds	r3, #12
 801251c:	781b      	ldrb	r3, [r3, #0]
 801251e:	461a      	mov	r2, r3
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	330d      	adds	r3, #13
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	021b      	lsls	r3, r3, #8
 8012528:	4313      	orrs	r3, r2
 801252a:	2b11      	cmp	r3, #17
 801252c:	d115      	bne.n	801255a <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	689b      	ldr	r3, [r3, #8]
 8012532:	2200      	movs	r2, #0
 8012534:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	2201      	movs	r2, #1
 801253e:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2201      	movs	r2, #1
 8012544:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	689b      	ldr	r3, [r3, #8]
 801254c:	8b5a      	ldrh	r2, [r3, #26]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2200      	movs	r2, #0
 8012556:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	899b      	ldrh	r3, [r3, #12]
 8012560:	461a      	mov	r2, r3
 8012562:	6839      	ldr	r1, [r7, #0]
 8012564:	f7ff fe8e 	bl	8012284 <_ZN16BluetoothService14checkHciHandleEPht>
 8012568:	4603      	mov	r3, r0
 801256a:	2b00      	cmp	r3, #0
 801256c:	f000 8440 	beq.w	8012df0 <_ZN5BTHID7ACLDataEPh+0x97c>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	3306      	adds	r3, #6
 8012574:	781b      	ldrb	r3, [r3, #0]
 8012576:	461a      	mov	r2, r3
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	3307      	adds	r3, #7
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	021b      	lsls	r3, r3, #8
 8012580:	4313      	orrs	r3, r2
 8012582:	2b01      	cmp	r3, #1
 8012584:	f040 82f8 	bne.w	8012b78 <_ZN5BTHID7ACLDataEPh+0x704>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	3308      	adds	r3, #8
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	2b01      	cmp	r3, #1
 8012590:	d142      	bne.n	8012618 <_ZN5BTHID7ACLDataEPh+0x1a4>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nL2CAP Command Rejected - Reason: "), 0x80);
 8012592:	2180      	movs	r1, #128	; 0x80
 8012594:	489c      	ldr	r0, [pc, #624]	; (8012808 <_ZN5BTHID7ACLDataEPh+0x394>)
 8012596:	f003 f9b7 	bl	8015908 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[13], 0x80);
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	330d      	adds	r3, #13
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	2180      	movs	r1, #128	; 0x80
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7ff fa0f 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 80125a8:	2180      	movs	r1, #128	; 0x80
 80125aa:	4898      	ldr	r0, [pc, #608]	; (801280c <_ZN5BTHID7ACLDataEPh+0x398>)
 80125ac:	f003 f9ac 	bl	8015908 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[12], 0x80);
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	330c      	adds	r3, #12
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	2180      	movs	r1, #128	; 0x80
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7ff fa04 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 80125be:	2180      	movs	r1, #128	; 0x80
 80125c0:	4892      	ldr	r0, [pc, #584]	; (801280c <_ZN5BTHID7ACLDataEPh+0x398>)
 80125c2:	f003 f9a1 	bl	8015908 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[17], 0x80);
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	3311      	adds	r3, #17
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	2180      	movs	r1, #128	; 0x80
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7ff f9f9 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 80125d4:	2180      	movs	r1, #128	; 0x80
 80125d6:	488d      	ldr	r0, [pc, #564]	; (801280c <_ZN5BTHID7ACLDataEPh+0x398>)
 80125d8:	f003 f996 	bl	8015908 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[16], 0x80);
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	3310      	adds	r3, #16
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	2180      	movs	r1, #128	; 0x80
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7ff f9ee 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 80125ea:	2180      	movs	r1, #128	; 0x80
 80125ec:	4887      	ldr	r0, [pc, #540]	; (801280c <_ZN5BTHID7ACLDataEPh+0x398>)
 80125ee:	f003 f98b 	bl	8015908 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	330f      	adds	r3, #15
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	2180      	movs	r1, #128	; 0x80
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7ff f9e3 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                                Notify(PSTR(" "), 0x80);
 8012600:	2180      	movs	r1, #128	; 0x80
 8012602:	4882      	ldr	r0, [pc, #520]	; (801280c <_ZN5BTHID7ACLDataEPh+0x398>)
 8012604:	f003 f980 	bl	8015908 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	330e      	adds	r3, #14
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	2180      	movs	r1, #128	; 0x80
 8012610:	4618      	mov	r0, r3
 8012612:	f7ff f9d8 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
 8012616:	e3e5      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	3308      	adds	r3, #8
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	2b03      	cmp	r3, #3
 8012620:	f040 8091 	bne.w	8012746 <_ZN5BTHID7ACLDataEPh+0x2d2>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	3310      	adds	r3, #16
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	461a      	mov	r2, r3
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	3311      	adds	r3, #17
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	021b      	lsls	r3, r3, #8
 8012634:	4313      	orrs	r3, r2
 8012636:	2b00      	cmp	r3, #0
 8012638:	f040 83d4 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	3312      	adds	r3, #18
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	461a      	mov	r2, r3
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	3313      	adds	r3, #19
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	021b      	lsls	r3, r3, #8
 801264c:	4313      	orrs	r3, r2
 801264e:	2b00      	cmp	r3, #0
 8012650:	f040 83c8 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	330e      	adds	r3, #14
 8012658:	781a      	ldrb	r2, [r3, #0]
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012660:	429a      	cmp	r2, r3
 8012662:	d128      	bne.n	80126b6 <_ZN5BTHID7ACLDataEPh+0x242>
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	330f      	adds	r3, #15
 8012668:	781a      	ldrb	r2, [r3, #0]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012670:	429a      	cmp	r2, r3
 8012672:	d120      	bne.n	80126b6 <_ZN5BTHID7ACLDataEPh+0x242>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	7a5a      	ldrb	r2, [r3, #9]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 801267c:	683b      	ldr	r3, [r7, #0]
 801267e:	7b1a      	ldrb	r2, [r3, #12]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	7b5a      	ldrb	r2, [r3, #13]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
 801268c:	2180      	movs	r1, #128	; 0x80
 801268e:	4860      	ldr	r0, [pc, #384]	; (8012810 <_ZN5BTHID7ACLDataEPh+0x39c>)
 8012690:	f003 f93a 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                                identifier++;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	7d1b      	ldrb	r3, [r3, #20]
 8012698:	3301      	adds	r3, #1
 801269a:	b2da      	uxtb	r2, r3
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6898      	ldr	r0, [r3, #8]
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	8999      	ldrh	r1, [r3, #12]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	7d1a      	ldrb	r2, [r3, #20]
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	331b      	adds	r3, #27
 80126b0:	f7fe ffa1 	bl	80115f6 <_ZN3BTD20l2cap_config_requestEthPh>
 80126b4:	e396      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	330e      	adds	r3, #14
 80126ba:	781a      	ldrb	r2, [r3, #0]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d11a      	bne.n	80126fc <_ZN5BTHID7ACLDataEPh+0x288>
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	330f      	adds	r3, #15
 80126ca:	781a      	ldrb	r2, [r3, #0]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80126d2:	429a      	cmp	r2, r3
 80126d4:	d112      	bne.n	80126fc <_ZN5BTHID7ACLDataEPh+0x288>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	7a5a      	ldrb	r2, [r3, #9]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	7b1a      	ldrb	r2, [r3, #12]
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	7b5a      	ldrb	r2, [r3, #13]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	691b      	ldr	r3, [r3, #16]
 80126f2:	f043 0204 	orr.w	r2, r3, #4
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	611a      	str	r2, [r3, #16]
 80126fa:	e373      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	330e      	adds	r3, #14
 8012700:	781a      	ldrb	r2, [r3, #0]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012708:	429a      	cmp	r2, r3
 801270a:	f040 836b 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	330f      	adds	r3, #15
 8012712:	781a      	ldrb	r2, [r3, #0]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 801271a:	429a      	cmp	r2, r3
 801271c:	f040 8362 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	7a5a      	ldrb	r2, [r3, #9]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	7b1a      	ldrb	r2, [r3, #12]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	7b5a      	ldrb	r2, [r3, #13]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	691b      	ldr	r3, [r3, #16]
 801273c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	611a      	str	r2, [r3, #16]
 8012744:	e34e      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	3308      	adds	r3, #8
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	2b02      	cmp	r3, #2
 801274e:	d161      	bne.n	8012814 <_ZN5BTHID7ACLDataEPh+0x3a0>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	330c      	adds	r3, #12
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	461a      	mov	r2, r3
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	330d      	adds	r3, #13
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	021b      	lsls	r3, r3, #8
 8012760:	4313      	orrs	r3, r2
 8012762:	2b01      	cmp	r3, #1
 8012764:	d112      	bne.n	801278c <_ZN5BTHID7ACLDataEPh+0x318>
                                        identifier = l2capinbuf[9];
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	7a5a      	ldrb	r2, [r3, #9]
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	7b9a      	ldrb	r2, [r3, #14]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	7bda      	ldrb	r2, [r3, #15]
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	691b      	ldr	r3, [r3, #16]
 8012782:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	611a      	str	r2, [r3, #16]
 801278a:	e32b      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	330c      	adds	r3, #12
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	461a      	mov	r2, r3
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	330d      	adds	r3, #13
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	021b      	lsls	r3, r3, #8
 801279c:	4313      	orrs	r3, r2
 801279e:	2b11      	cmp	r3, #17
 80127a0:	d112      	bne.n	80127c8 <_ZN5BTHID7ACLDataEPh+0x354>
                                        identifier = l2capinbuf[9];
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	7a5a      	ldrb	r2, [r3, #9]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	7b9a      	ldrb	r2, [r3, #14]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	7bda      	ldrb	r2, [r3, #15]
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	691b      	ldr	r3, [r3, #16]
 80127be:	f043 0201 	orr.w	r2, r3, #1
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	611a      	str	r2, [r3, #16]
 80127c6:	e30d      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	330c      	adds	r3, #12
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	461a      	mov	r2, r3
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	330d      	adds	r3, #13
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	021b      	lsls	r3, r3, #8
 80127d8:	4313      	orrs	r3, r2
 80127da:	2b13      	cmp	r3, #19
 80127dc:	f040 8302 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                        identifier = l2capinbuf[9];
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	7a5a      	ldrb	r2, [r3, #9]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	7b9a      	ldrb	r2, [r3, #14]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	7bda      	ldrb	r2, [r3, #15]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	691b      	ldr	r3, [r3, #16]
 80127fc:	f043 0210 	orr.w	r2, r3, #16
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	611a      	str	r2, [r3, #16]
 8012804:	e2ee      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
 8012806:	bf00      	nop
 8012808:	080168c4 	.word	0x080168c4
 801280c:	080168e8 	.word	0x080168e8
 8012810:	080168ec 	.word	0x080168ec
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	3308      	adds	r3, #8
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	2b05      	cmp	r3, #5
 801281c:	d15e      	bne.n	80128dc <_ZN5BTHID7ACLDataEPh+0x468>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	3310      	adds	r3, #16
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	461a      	mov	r2, r3
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	3311      	adds	r3, #17
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	021b      	lsls	r3, r3, #8
 801282e:	4313      	orrs	r3, r2
 8012830:	2b00      	cmp	r3, #0
 8012832:	f040 82d7 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	330c      	adds	r3, #12
 801283a:	781a      	ldrb	r2, [r3, #0]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012842:	429a      	cmp	r2, r3
 8012844:	d112      	bne.n	801286c <_ZN5BTHID7ACLDataEPh+0x3f8>
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	330d      	adds	r3, #13
 801284a:	781a      	ldrb	r2, [r3, #0]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012852:	429a      	cmp	r2, r3
 8012854:	d10a      	bne.n	801286c <_ZN5BTHID7ACLDataEPh+0x3f8>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	7a5a      	ldrb	r2, [r3, #9]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	691b      	ldr	r3, [r3, #16]
 8012862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	611a      	str	r2, [r3, #16]
 801286a:	e2bb      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	330c      	adds	r3, #12
 8012870:	781a      	ldrb	r2, [r3, #0]
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8012878:	429a      	cmp	r2, r3
 801287a:	d112      	bne.n	80128a2 <_ZN5BTHID7ACLDataEPh+0x42e>
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	330d      	adds	r3, #13
 8012880:	781a      	ldrb	r2, [r3, #0]
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8012888:	429a      	cmp	r2, r3
 801288a:	d10a      	bne.n	80128a2 <_ZN5BTHID7ACLDataEPh+0x42e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	7a5a      	ldrb	r2, [r3, #9]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	691b      	ldr	r3, [r3, #16]
 8012898:	f043 0202 	orr.w	r2, r3, #2
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	611a      	str	r2, [r3, #16]
 80128a0:	e2a0      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	330c      	adds	r3, #12
 80128a6:	781a      	ldrb	r2, [r3, #0]
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80128ae:	429a      	cmp	r2, r3
 80128b0:	f040 8298 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	330d      	adds	r3, #13
 80128b8:	781a      	ldrb	r2, [r3, #0]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80128c0:	429a      	cmp	r2, r3
 80128c2:	f040 828f 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	7a5a      	ldrb	r2, [r3, #9]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	691b      	ldr	r3, [r3, #16]
 80128d2:	f043 0220 	orr.w	r2, r3, #32
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	611a      	str	r2, [r3, #16]
 80128da:	e283      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	3308      	adds	r3, #8
 80128e0:	781b      	ldrb	r3, [r3, #0]
 80128e2:	2b04      	cmp	r3, #4
 80128e4:	d155      	bne.n	8012992 <_ZN5BTHID7ACLDataEPh+0x51e>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	330c      	adds	r3, #12
 80128ea:	781a      	ldrb	r2, [r3, #0]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d113      	bne.n	801291e <_ZN5BTHID7ACLDataEPh+0x4aa>
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	330d      	adds	r3, #13
 80128fa:	781a      	ldrb	r2, [r3, #0]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012902:	429a      	cmp	r2, r3
 8012904:	d10b      	bne.n	801291e <_ZN5BTHID7ACLDataEPh+0x4aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6898      	ldr	r0, [r3, #8]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	8999      	ldrh	r1, [r3, #12]
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	3309      	adds	r3, #9
 8012912:	781a      	ldrb	r2, [r3, #0]
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	331b      	adds	r3, #27
 8012918:	f7fe feb8 	bl	801168c <_ZN3BTD21l2cap_config_responseEthPh>
 801291c:	e262      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	330c      	adds	r3, #12
 8012922:	781a      	ldrb	r2, [r3, #0]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801292a:	429a      	cmp	r2, r3
 801292c:	d113      	bne.n	8012956 <_ZN5BTHID7ACLDataEPh+0x4e2>
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	330d      	adds	r3, #13
 8012932:	781a      	ldrb	r2, [r3, #0]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801293a:	429a      	cmp	r2, r3
 801293c:	d10b      	bne.n	8012956 <_ZN5BTHID7ACLDataEPh+0x4e2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6898      	ldr	r0, [r3, #8]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	8999      	ldrh	r1, [r3, #12]
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	3309      	adds	r3, #9
 801294a:	781a      	ldrb	r2, [r3, #0]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	3316      	adds	r3, #22
 8012950:	f7fe fe9c 	bl	801168c <_ZN3BTD21l2cap_config_responseEthPh>
 8012954:	e246      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	330c      	adds	r3, #12
 801295a:	781a      	ldrb	r2, [r3, #0]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012962:	429a      	cmp	r2, r3
 8012964:	f040 823e 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	330d      	adds	r3, #13
 801296c:	781a      	ldrb	r2, [r3, #0]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012974:	429a      	cmp	r2, r3
 8012976:	f040 8235 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6898      	ldr	r0, [r3, #8]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	8999      	ldrh	r1, [r3, #12]
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	3309      	adds	r3, #9
 8012986:	781a      	ldrb	r2, [r3, #0]
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	3318      	adds	r3, #24
 801298c:	f7fe fe7e 	bl	801168c <_ZN3BTD21l2cap_config_responseEthPh>
 8012990:	e228      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	3308      	adds	r3, #8
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	2b06      	cmp	r3, #6
 801299a:	d17c      	bne.n	8012a96 <_ZN5BTHID7ACLDataEPh+0x622>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	330c      	adds	r3, #12
 80129a0:	781a      	ldrb	r2, [r3, #0]
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d116      	bne.n	80129da <_ZN5BTHID7ACLDataEPh+0x566>
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	330d      	adds	r3, #13
 80129b0:	781a      	ldrb	r2, [r3, #0]
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80129b8:	429a      	cmp	r2, r3
 80129ba:	d10e      	bne.n	80129da <_ZN5BTHID7ACLDataEPh+0x566>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
 80129bc:	2180      	movs	r1, #128	; 0x80
 80129be:	4893      	ldr	r0, [pc, #588]	; (8012c0c <_ZN5BTHID7ACLDataEPh+0x798>)
 80129c0:	f002 ffa2 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	7a5a      	ldrb	r2, [r3, #9]
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	691b      	ldr	r3, [r3, #16]
 80129d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	611a      	str	r2, [r3, #16]
 80129d8:	e204      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	330c      	adds	r3, #12
 80129de:	781a      	ldrb	r2, [r3, #0]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d125      	bne.n	8012a36 <_ZN5BTHID7ACLDataEPh+0x5c2>
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	330d      	adds	r3, #13
 80129ee:	781a      	ldrb	r2, [r3, #0]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d11d      	bne.n	8012a36 <_ZN5BTHID7ACLDataEPh+0x5c2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
 80129fa:	2180      	movs	r1, #128	; 0x80
 80129fc:	4884      	ldr	r0, [pc, #528]	; (8012c10 <_ZN5BTHID7ACLDataEPh+0x79c>)
 80129fe:	f002 ff83 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	7a5a      	ldrb	r2, [r3, #9]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6898      	ldr	r0, [r3, #8]
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	8999      	ldrh	r1, [r3, #12]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	7d1a      	ldrb	r2, [r3, #20]
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	3316      	adds	r3, #22
 8012a20:	9300      	str	r3, [sp, #0]
 8012a22:	4623      	mov	r3, r4
 8012a24:	f7fe fec2 	bl	80117ac <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	3308      	adds	r3, #8
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	4798      	blx	r3
 8012a34:	e1d6      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	330c      	adds	r3, #12
 8012a3a:	781a      	ldrb	r2, [r3, #0]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012a42:	429a      	cmp	r2, r3
 8012a44:	f040 81ce 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
 8012a48:	683b      	ldr	r3, [r7, #0]
 8012a4a:	330d      	adds	r3, #13
 8012a4c:	781a      	ldrb	r2, [r3, #0]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012a54:	429a      	cmp	r2, r3
 8012a56:	f040 81c5 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
 8012a5a:	2180      	movs	r1, #128	; 0x80
 8012a5c:	486d      	ldr	r0, [pc, #436]	; (8012c14 <_ZN5BTHID7ACLDataEPh+0x7a0>)
 8012a5e:	f002 ff53 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                        identifier = l2capinbuf[9];
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	7a5a      	ldrb	r2, [r3, #9]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6898      	ldr	r0, [r3, #8]
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	8999      	ldrh	r1, [r3, #12]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	7d1a      	ldrb	r2, [r3, #20]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	3318      	adds	r3, #24
 8012a80:	9300      	str	r3, [sp, #0]
 8012a82:	4623      	mov	r3, r4
 8012a84:	f7fe fe92 	bl	80117ac <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	3308      	adds	r3, #8
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	4798      	blx	r3
 8012a94:	e1a6      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	3308      	adds	r3, #8
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	2b07      	cmp	r3, #7
 8012a9e:	d14c      	bne.n	8012b3a <_ZN5BTHID7ACLDataEPh+0x6c6>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	330c      	adds	r3, #12
 8012aa4:	781a      	ldrb	r2, [r3, #0]
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	7edb      	ldrb	r3, [r3, #27]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d111      	bne.n	8012ad2 <_ZN5BTHID7ACLDataEPh+0x65e>
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	330d      	adds	r3, #13
 8012ab2:	781a      	ldrb	r2, [r3, #0]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	7f1b      	ldrb	r3, [r3, #28]
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d10a      	bne.n	8012ad2 <_ZN5BTHID7ACLDataEPh+0x65e>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	7a5a      	ldrb	r2, [r3, #9]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	691b      	ldr	r3, [r3, #16]
 8012ac8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	611a      	str	r2, [r3, #16]
 8012ad0:	e188      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	330c      	adds	r3, #12
 8012ad6:	781a      	ldrb	r2, [r3, #0]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	7d9b      	ldrb	r3, [r3, #22]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d111      	bne.n	8012b04 <_ZN5BTHID7ACLDataEPh+0x690>
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	330d      	adds	r3, #13
 8012ae4:	781a      	ldrb	r2, [r3, #0]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	7ddb      	ldrb	r3, [r3, #23]
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d10a      	bne.n	8012b04 <_ZN5BTHID7ACLDataEPh+0x690>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	7a5a      	ldrb	r2, [r3, #9]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	691b      	ldr	r3, [r3, #16]
 8012afa:	f043 0208 	orr.w	r2, r3, #8
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	611a      	str	r2, [r3, #16]
 8012b02:	e16f      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	330c      	adds	r3, #12
 8012b08:	781a      	ldrb	r2, [r3, #0]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	7e1b      	ldrb	r3, [r3, #24]
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	f040 8168 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	330d      	adds	r3, #13
 8012b18:	781a      	ldrb	r2, [r3, #0]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	7e5b      	ldrb	r3, [r3, #25]
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	f040 8160 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	7a5a      	ldrb	r2, [r3, #9]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	691b      	ldr	r3, [r3, #16]
 8012b30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	611a      	str	r2, [r3, #16]
 8012b38:	e154      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	3308      	adds	r3, #8
 8012b3e:	781b      	ldrb	r3, [r3, #0]
 8012b40:	2b0a      	cmp	r3, #10
 8012b42:	f040 814f 	bne.w	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
 8012b46:	2180      	movs	r1, #128	; 0x80
 8012b48:	4833      	ldr	r0, [pc, #204]	; (8012c18 <_ZN5BTHID7ACLDataEPh+0x7a4>)
 8012b4a:	f002 fedd 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                identifier = l2capinbuf[9];
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	7a5a      	ldrb	r2, [r3, #9]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6898      	ldr	r0, [r3, #8]
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	8999      	ldrh	r1, [r3, #12]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	7d1a      	ldrb	r2, [r3, #20]
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	330c      	adds	r3, #12
 8012b66:	781c      	ldrb	r4, [r3, #0]
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	330d      	adds	r3, #13
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	9300      	str	r3, [sp, #0]
 8012b70:	4623      	mov	r3, r4
 8012b72:	f7fe fe58 	bl	8011826 <_ZN3BTD26l2cap_information_responseEthhh>
 8012b76:	e135      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	3306      	adds	r3, #6
 8012b7c:	781a      	ldrb	r2, [r3, #0]
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012b84:	429a      	cmp	r2, r3
 8012b86:	f040 8091 	bne.w	8012cac <_ZN5BTHID7ACLDataEPh+0x838>
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	3307      	adds	r3, #7
 8012b8e:	781a      	ldrb	r2, [r3, #0]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8012b96:	429a      	cmp	r2, r3
 8012b98:	f040 8088 	bne.w	8012cac <_ZN5BTHID7ACLDataEPh+0x838>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	3308      	adds	r3, #8
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	2b02      	cmp	r3, #2
 8012ba4:	d13a      	bne.n	8012c1c <_ZN5BTHID7ACLDataEPh+0x7a8>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2203      	movs	r2, #3
 8012baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	7a5a      	ldrb	r2, [r3, #9]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	7a9a      	ldrb	r2, [r3, #10]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2205      	movs	r2, #5
 8012bce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2200      	movs	r2, #0
 8012be6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2200      	movs	r2, #0
 8012bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	3328      	adds	r3, #40	; 0x28
 8012bfe:	220a      	movs	r2, #10
 8012c00:	4619      	mov	r1, r3
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f000 fbca 	bl	801339c <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012c08:	e0e9      	b.n	8012dde <_ZN5BTHID7ACLDataEPh+0x96a>
 8012c0a:	bf00      	nop
 8012c0c:	08016908 	.word	0x08016908
 8012c10:	0801692c 	.word	0x0801692c
 8012c14:	08016954 	.word	0x08016954
 8012c18:	0801697c 	.word	0x0801697c
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	3308      	adds	r3, #8
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	2b04      	cmp	r3, #4
 8012c24:	d131      	bne.n	8012c8a <_ZN5BTHID7ACLDataEPh+0x816>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2205      	movs	r2, #5
 8012c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	7a5a      	ldrb	r2, [r3, #9]
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	7a9a      	ldrb	r2, [r3, #10]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2200      	movs	r2, #0
 8012c46:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2205      	movs	r2, #5
 8012c4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2200      	movs	r2, #0
 8012c56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2202      	movs	r2, #2
 8012c5e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2235      	movs	r2, #53	; 0x35
 8012c66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2200      	movs	r2, #0
 8012c76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	3328      	adds	r3, #40	; 0x28
 8012c7e:	220a      	movs	r2, #10
 8012c80:	4619      	mov	r1, r3
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f000 fb8a 	bl	801339c <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012c88:	e0a9      	b.n	8012dde <_ZN5BTHID7ACLDataEPh+0x96a>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	3308      	adds	r3, #8
 8012c8e:	781b      	ldrb	r3, [r3, #0]
 8012c90:	2b06      	cmp	r3, #6
 8012c92:	f040 80a4 	bne.w	8012dde <_ZN5BTHID7ACLDataEPh+0x96a>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	3309      	adds	r3, #9
 8012c9a:	7819      	ldrb	r1, [r3, #0]
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	330a      	adds	r3, #10
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f000 fb93 	bl	80133d0 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012caa:	e098      	b.n	8012dde <_ZN5BTHID7ACLDataEPh+0x96a>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	3306      	adds	r3, #6
 8012cb0:	781a      	ldrb	r2, [r3, #0]
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d162      	bne.n	8012d82 <_ZN5BTHID7ACLDataEPh+0x90e>
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	3307      	adds	r3, #7
 8012cc0:	781a      	ldrb	r2, [r3, #0]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d15a      	bne.n	8012d82 <_ZN5BTHID7ACLDataEPh+0x90e>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	3308      	adds	r3, #8
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	2ba1      	cmp	r3, #161	; 0xa1
 8012cd4:	f040 8085 	bne.w	8012de2 <_ZN5BTHID7ACLDataEPh+0x96e>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 8012cd8:	f7ef ff74 	bl	8002bc4 <HAL_GetTick>
 8012cdc:	4602      	mov	r2, r0
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	3305      	adds	r3, #5
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	021b      	lsls	r3, r3, #8
 8012cea:	b21a      	sxth	r2, r3
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	3304      	adds	r3, #4
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	b21b      	sxth	r3, r3
 8012cf4:	4313      	orrs	r3, r2
 8012cf6:	b21b      	sxth	r3, r3
 8012cf8:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	3314      	adds	r3, #20
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	89fa      	ldrh	r2, [r7, #14]
 8012d04:	b2d2      	uxtb	r2, r2
 8012d06:	3a01      	subs	r2, #1
 8012d08:	b2d1      	uxtb	r1, r2
 8012d0a:	683a      	ldr	r2, [r7, #0]
 8012d0c:	3209      	adds	r2, #9
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	3309      	adds	r3, #9
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	2b01      	cmp	r3, #1
 8012d1a:	d002      	beq.n	8012d22 <_ZN5BTHID7ACLDataEPh+0x8ae>
 8012d1c:	2b02      	cmp	r3, #2
 8012d1e:	d016      	beq.n	8012d4e <_ZN5BTHID7ACLDataEPh+0x8da>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 8012d20:	e05f      	b.n	8012de2 <_ZN5BTHID7ACLDataEPh+0x96e>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6a1b      	ldr	r3, [r3, #32]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d027      	beq.n	8012d7a <_ZN5BTHID7ACLDataEPh+0x906>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6a18      	ldr	r0, [r3, #32]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6a1b      	ldr	r3, [r3, #32]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	681c      	ldr	r4, [r3, #0]
 8012d36:	89fb      	ldrh	r3, [r7, #14]
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	3b02      	subs	r3, #2
 8012d3c:	b2da      	uxtb	r2, r3
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	330a      	adds	r3, #10
 8012d42:	9300      	str	r3, [sp, #0]
 8012d44:	4613      	mov	r3, r2
 8012d46:	2200      	movs	r2, #0
 8012d48:	6879      	ldr	r1, [r7, #4]
 8012d4a:	47a0      	blx	r4
                                                break;
 8012d4c:	e015      	b.n	8012d7a <_ZN5BTHID7ACLDataEPh+0x906>
                                                if(pRptParser[MOUSE_PARSER_ID])
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d013      	beq.n	8012d7e <_ZN5BTHID7ACLDataEPh+0x90a>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	681c      	ldr	r4, [r3, #0]
 8012d62:	89fb      	ldrh	r3, [r7, #14]
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	3b02      	subs	r3, #2
 8012d68:	b2da      	uxtb	r2, r3
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	330a      	adds	r3, #10
 8012d6e:	9300      	str	r3, [sp, #0]
 8012d70:	4613      	mov	r3, r2
 8012d72:	2200      	movs	r2, #0
 8012d74:	6879      	ldr	r1, [r7, #4]
 8012d76:	47a0      	blx	r4
                                                break;
 8012d78:	e001      	b.n	8012d7e <_ZN5BTHID7ACLDataEPh+0x90a>
                                                break;
 8012d7a:	bf00      	nop
 8012d7c:	e031      	b.n	8012de2 <_ZN5BTHID7ACLDataEPh+0x96e>
                                                break;
 8012d7e:	bf00      	nop
                        }
 8012d80:	e02f      	b.n	8012de2 <_ZN5BTHID7ACLDataEPh+0x96e>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	3306      	adds	r3, #6
 8012d86:	781a      	ldrb	r2, [r3, #0]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d128      	bne.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	3307      	adds	r3, #7
 8012d96:	781a      	ldrb	r2, [r3, #0]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8012d9e:	429a      	cmp	r2, r3
 8012da0:	d120      	bne.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	3308      	adds	r3, #8
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	2ba3      	cmp	r3, #163	; 0xa3
 8012daa:	d11b      	bne.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	3305      	adds	r3, #5
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	021b      	lsls	r3, r3, #8
 8012db4:	b21a      	sxth	r2, r3
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	3304      	adds	r3, #4
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	b21b      	sxth	r3, r3
 8012dbe:	4313      	orrs	r3, r2
 8012dc0:	b21b      	sxth	r3, r3
 8012dc2:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	3318      	adds	r3, #24
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	89ba      	ldrh	r2, [r7, #12]
 8012dce:	b2d2      	uxtb	r2, r2
 8012dd0:	3a01      	subs	r2, #1
 8012dd2:	b2d1      	uxtb	r1, r2
 8012dd4:	683a      	ldr	r2, [r7, #0]
 8012dd6:	3209      	adds	r2, #9
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	4798      	blx	r3
 8012ddc:	e002      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012dde:	bf00      	nop
 8012de0:	e000      	b.n	8012de4 <_ZN5BTHID7ACLDataEPh+0x970>
                        }
 8012de2:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f000 f807 	bl	8012df8 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f000 f8cc 	bl	8012f88 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 8012df0:	bf00      	nop
 8012df2:	3714      	adds	r7, #20
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd90      	pop	{r4, r7, pc}

08012df8 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 8012df8:	b5b0      	push	{r4, r5, r7, lr}
 8012dfa:	b084      	sub	sp, #16
 8012dfc:	af02      	add	r7, sp, #8
 8012dfe:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	7e9b      	ldrb	r3, [r3, #26]
 8012e04:	2b0e      	cmp	r3, #14
 8012e06:	f000 8090 	beq.w	8012f2a <_ZN5BTHID8SDP_taskEv+0x132>
 8012e0a:	2b0e      	cmp	r3, #14
 8012e0c:	f300 80af 	bgt.w	8012f6e <_ZN5BTHID8SDP_taskEv+0x176>
 8012e10:	2b0a      	cmp	r3, #10
 8012e12:	d002      	beq.n	8012e1a <_ZN5BTHID8SDP_taskEv+0x22>
 8012e14:	2b0b      	cmp	r3, #11
 8012e16:	d070      	beq.n	8012efa <_ZN5BTHID8SDP_taskEv+0x102>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 8012e18:	e0a9      	b.n	8012f6e <_ZN5BTHID8SDP_taskEv+0x176>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	691b      	ldr	r3, [r3, #16]
 8012e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d045      	beq.n	8012eb2 <_ZN5BTHID8SDP_taskEv+0xba>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	691b      	ldr	r3, [r3, #16]
 8012e2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	611a      	str	r2, [r3, #16]
                                Notify(PSTR("\r\nSDP Incoming Connection Request"), 0x80);
 8012e32:	2180      	movs	r1, #128	; 0x80
 8012e34:	4850      	ldr	r0, [pc, #320]	; (8012f78 <_ZN5BTHID8SDP_taskEv+0x180>)
 8012e36:	f002 fd67 	bl	8015908 <_Z8E_NotifyPKci>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6898      	ldr	r0, [r3, #8]
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	8999      	ldrh	r1, [r3, #12]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	7d1a      	ldrb	r2, [r3, #20]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	331b      	adds	r3, #27
 8012e50:	2501      	movs	r5, #1
 8012e52:	9501      	str	r5, [sp, #4]
 8012e54:	9300      	str	r3, [sp, #0]
 8012e56:	4623      	mov	r3, r4
 8012e58:	f7fe fb80 	bl	801155c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8012e5c:	2001      	movs	r0, #1
 8012e5e:	f7ef febd 	bl	8002bdc <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	6898      	ldr	r0, [r3, #8]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	8999      	ldrh	r1, [r3, #12]
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	7d1a      	ldrb	r2, [r3, #20]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	331b      	adds	r3, #27
 8012e78:	2500      	movs	r5, #0
 8012e7a:	9501      	str	r5, [sp, #4]
 8012e7c:	9300      	str	r3, [sp, #0]
 8012e7e:	4623      	mov	r3, r4
 8012e80:	f7fe fb6c 	bl	801155c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	7d1b      	ldrb	r3, [r3, #20]
 8012e88:	3301      	adds	r3, #1
 8012e8a:	b2da      	uxtb	r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8012e90:	2001      	movs	r0, #1
 8012e92:	f7ef fea3 	bl	8002bdc <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6898      	ldr	r0, [r3, #8]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	8999      	ldrh	r1, [r3, #12]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	7d1a      	ldrb	r2, [r3, #20]
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	331b      	adds	r3, #27
 8012ea6:	f7fe fba6 	bl	80115f6 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	220b      	movs	r2, #11
 8012eae:	769a      	strb	r2, [r3, #26]
                        break;
 8012eb0:	e058      	b.n	8012f64 <_ZN5BTHID8SDP_taskEv+0x16c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	691b      	ldr	r3, [r3, #16]
 8012eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d052      	beq.n	8012f64 <_ZN5BTHID8SDP_taskEv+0x16c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	691b      	ldr	r3, [r3, #16]
 8012ec2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                Notify(PSTR("\r\nDisconnected SDP Channel"), 0x80);
 8012ed2:	2180      	movs	r1, #128	; 0x80
 8012ed4:	4829      	ldr	r0, [pc, #164]	; (8012f7c <_ZN5BTHID8SDP_taskEv+0x184>)
 8012ed6:	f002 fd17 	bl	8015908 <_Z8E_NotifyPKci>
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	6898      	ldr	r0, [r3, #8]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	8999      	ldrh	r1, [r3, #12]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	7d1a      	ldrb	r2, [r3, #20]
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	331b      	adds	r3, #27
 8012ef0:	9300      	str	r3, [sp, #0]
 8012ef2:	4623      	mov	r3, r4
 8012ef4:	f7fe fc5a 	bl	80117ac <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8012ef8:	e034      	b.n	8012f64 <_ZN5BTHID8SDP_taskEv+0x16c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	691b      	ldr	r3, [r3, #16]
 8012efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d030      	beq.n	8012f68 <_ZN5BTHID8SDP_taskEv+0x170>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	691b      	ldr	r3, [r3, #16]
 8012f0a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	611a      	str	r2, [r3, #16]
                                Notify(PSTR("\r\nSDP Successfully Configured"), 0x80);
 8012f12:	2180      	movs	r1, #128	; 0x80
 8012f14:	481a      	ldr	r0, [pc, #104]	; (8012f80 <_ZN5BTHID8SDP_taskEv+0x188>)
 8012f16:	f002 fcf7 	bl	8015908 <_Z8E_NotifyPKci>
                                SDPConnected = true;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2201      	movs	r2, #1
 8012f1e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	220a      	movs	r2, #10
 8012f26:	769a      	strb	r2, [r3, #26]
                        break;
 8012f28:	e01e      	b.n	8012f68 <_ZN5BTHID8SDP_taskEv+0x170>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	691b      	ldr	r3, [r3, #16]
 8012f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d01a      	beq.n	8012f6c <_ZN5BTHID8SDP_taskEv+0x174>
                                Notify(PSTR("\r\nDisconnected L2CAP Connection"), 0x80);
 8012f36:	2180      	movs	r1, #128	; 0x80
 8012f38:	4812      	ldr	r0, [pc, #72]	; (8012f84 <_ZN5BTHID8SDP_taskEv+0x18c>)
 8012f3a:	f002 fce5 	bl	8015908 <_Z8E_NotifyPKci>
                                pBtd->hci_disconnect(hci_handle);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	689a      	ldr	r2, [r3, #8]
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	899b      	ldrh	r3, [r3, #12]
 8012f46:	4619      	mov	r1, r3
 8012f48:	4610      	mov	r0, r2
 8012f4a:	f7fe f9b7 	bl	80112bc <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f54:	819a      	strh	r2, [r3, #12]
                                Reset();
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	3308      	adds	r3, #8
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	4798      	blx	r3
                        break;
 8012f62:	e003      	b.n	8012f6c <_ZN5BTHID8SDP_taskEv+0x174>
                        break;
 8012f64:	bf00      	nop
 8012f66:	e002      	b.n	8012f6e <_ZN5BTHID8SDP_taskEv+0x176>
                        break;
 8012f68:	bf00      	nop
 8012f6a:	e000      	b.n	8012f6e <_ZN5BTHID8SDP_taskEv+0x176>
                        break;
 8012f6c:	bf00      	nop
}
 8012f6e:	bf00      	nop
 8012f70:	3708      	adds	r7, #8
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bdb0      	pop	{r4, r5, r7, pc}
 8012f76:	bf00      	nop
 8012f78:	08016994 	.word	0x08016994
 8012f7c:	080169b8 	.word	0x080169b8
 8012f80:	080169d4 	.word	0x080169d4
 8012f84:	080169f4 	.word	0x080169f4

08012f88 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 8012f88:	b5b0      	push	{r4, r5, r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af02      	add	r7, sp, #8
 8012f8e:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8012f96:	3b01      	subs	r3, #1
 8012f98:	2b08      	cmp	r3, #8
 8012f9a:	f200 814d 	bhi.w	8013238 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
 8012f9e:	a201      	add	r2, pc, #4	; (adr r2, 8012fa4 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 8012fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fa4:	08013217 	.word	0x08013217
 8012fa8:	0801307f 	.word	0x0801307f
 8012fac:	080130bf 	.word	0x080130bf
 8012fb0:	08012fc9 	.word	0x08012fc9
 8012fb4:	080131db 	.word	0x080131db
 8012fb8:	08012fef 	.word	0x08012fef
 8012fbc:	0801310f 	.word	0x0801310f
 8012fc0:	0801314f 	.word	0x0801314f
 8012fc4:	08013193 	.word	0x08013193
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	691b      	ldr	r3, [r3, #16]
 8012fcc:	f003 0302 	and.w	r3, r3, #2
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	f000 8122 	beq.w	801321a <_ZN5BTHID10L2CAP_taskEv+0x292>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
 8012fd6:	2180      	movs	r1, #128	; 0x80
 8012fd8:	4899      	ldr	r0, [pc, #612]	; (8013240 <_ZN5BTHID10L2CAP_taskEv+0x2b8>)
 8012fda:	f002 fc95 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f000 fa32 	bl	8013448 <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2206      	movs	r2, #6
 8012fe8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012fec:	e115      	b.n	801321a <_ZN5BTHID10L2CAP_taskEv+0x292>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	691b      	ldr	r3, [r3, #16]
 8012ff2:	f003 0310 	and.w	r3, r3, #16
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	f000 8111 	beq.w	801321e <_ZN5BTHID10L2CAP_taskEv+0x296>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
 8012ffc:	2180      	movs	r1, #128	; 0x80
 8012ffe:	4891      	ldr	r0, [pc, #580]	; (8013244 <_ZN5BTHID10L2CAP_taskEv+0x2bc>)
 8013000:	f002 fc82 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6898      	ldr	r0, [r3, #8]
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	8999      	ldrh	r1, [r3, #12]
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	7d1a      	ldrb	r2, [r3, #20]
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	3318      	adds	r3, #24
 801301a:	2501      	movs	r5, #1
 801301c:	9501      	str	r5, [sp, #4]
 801301e:	9300      	str	r3, [sp, #0]
 8013020:	4623      	mov	r3, r4
 8013022:	f7fe fa9b 	bl	801155c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8013026:	2001      	movs	r0, #1
 8013028:	f7ef fdd8 	bl	8002bdc <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6898      	ldr	r0, [r3, #8]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	8999      	ldrh	r1, [r3, #12]
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	7d1a      	ldrb	r2, [r3, #20]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	3318      	adds	r3, #24
 8013042:	2500      	movs	r5, #0
 8013044:	9501      	str	r5, [sp, #4]
 8013046:	9300      	str	r3, [sp, #0]
 8013048:	4623      	mov	r3, r4
 801304a:	f7fe fa87 	bl	801155c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	7d1b      	ldrb	r3, [r3, #20]
 8013052:	3301      	adds	r3, #1
 8013054:	b2da      	uxtb	r2, r3
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	751a      	strb	r2, [r3, #20]
                                delay(1);
 801305a:	2001      	movs	r0, #1
 801305c:	f7ef fdbe 	bl	8002bdc <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6898      	ldr	r0, [r3, #8]
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	8999      	ldrh	r1, [r3, #12]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	7d1a      	ldrb	r2, [r3, #20]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	3318      	adds	r3, #24
 8013070:	f7fe fac1 	bl	80115f6 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2208      	movs	r2, #8
 8013078:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801307c:	e0cf      	b.n	801321e <_ZN5BTHID10L2CAP_taskEv+0x296>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	691b      	ldr	r3, [r3, #16]
 8013082:	f003 0304 	and.w	r3, r3, #4
 8013086:	2b00      	cmp	r3, #0
 8013088:	f000 80cb 	beq.w	8013222 <_ZN5BTHID10L2CAP_taskEv+0x29a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
 801308c:	2180      	movs	r1, #128	; 0x80
 801308e:	486e      	ldr	r0, [pc, #440]	; (8013248 <_ZN5BTHID10L2CAP_taskEv+0x2c0>)
 8013090:	f002 fc3a 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	7d1b      	ldrb	r3, [r3, #20]
 8013098:	3301      	adds	r3, #1
 801309a:	b2da      	uxtb	r2, r3
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6898      	ldr	r0, [r3, #8]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	8999      	ldrh	r1, [r3, #12]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	7d1a      	ldrb	r2, [r3, #20]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	3316      	adds	r3, #22
 80130b0:	f7fe faa1 	bl	80115f6 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2203      	movs	r2, #3
 80130b8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80130bc:	e0b1      	b.n	8013222 <_ZN5BTHID10L2CAP_taskEv+0x29a>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	691b      	ldr	r3, [r3, #16]
 80130c2:	f003 0302 	and.w	r3, r3, #2
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	f000 80ad 	beq.w	8013226 <_ZN5BTHID10L2CAP_taskEv+0x29e>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f000 f9bb 	bl	8013448 <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 80130d2:	2001      	movs	r0, #1
 80130d4:	f7ef fd82 	bl	8002bdc <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
 80130d8:	2180      	movs	r1, #128	; 0x80
 80130da:	485c      	ldr	r0, [pc, #368]	; (801324c <_ZN5BTHID10L2CAP_taskEv+0x2c4>)
 80130dc:	f002 fc14 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	7d1b      	ldrb	r3, [r3, #20]
 80130e4:	3301      	adds	r3, #1
 80130e6:	b2da      	uxtb	r2, r3
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6898      	ldr	r0, [r3, #8]
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	8999      	ldrh	r1, [r3, #12]
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	7d1a      	ldrb	r2, [r3, #20]
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	336d      	adds	r3, #109	; 0x6d
 80130fc:	2413      	movs	r4, #19
 80130fe:	9400      	str	r4, [sp, #0]
 8013100:	f7fe f9ee 	bl	80114e0 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2207      	movs	r2, #7
 8013108:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801310c:	e08b      	b.n	8013226 <_ZN5BTHID10L2CAP_taskEv+0x29e>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	691b      	ldr	r3, [r3, #16]
 8013112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013116:	2b00      	cmp	r3, #0
 8013118:	f000 8087 	beq.w	801322a <_ZN5BTHID10L2CAP_taskEv+0x2a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
 801311c:	2180      	movs	r1, #128	; 0x80
 801311e:	484c      	ldr	r0, [pc, #304]	; (8013250 <_ZN5BTHID10L2CAP_taskEv+0x2c8>)
 8013120:	f002 fbf2 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	7d1b      	ldrb	r3, [r3, #20]
 8013128:	3301      	adds	r3, #1
 801312a:	b2da      	uxtb	r2, r3
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6898      	ldr	r0, [r3, #8]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	8999      	ldrh	r1, [r3, #12]
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	7d1a      	ldrb	r2, [r3, #20]
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	3318      	adds	r3, #24
 8013140:	f7fe fa59 	bl	80115f6 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2208      	movs	r2, #8
 8013148:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801314c:	e06d      	b.n	801322a <_ZN5BTHID10L2CAP_taskEv+0x2a2>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	691b      	ldr	r3, [r3, #16]
 8013152:	f003 0320 	and.w	r3, r3, #32
 8013156:	2b00      	cmp	r3, #0
 8013158:	d069      	beq.n	801322e <_ZN5BTHID10L2CAP_taskEv+0x2a6>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
 801315a:	2180      	movs	r1, #128	; 0x80
 801315c:	483d      	ldr	r0, [pc, #244]	; (8013254 <_ZN5BTHID10L2CAP_taskEv+0x2cc>)
 801315e:	f002 fbd3 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                pBtd->connectToHIDDevice = false;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	689b      	ldr	r3, [r3, #8]
 8013166:	2200      	movs	r2, #0
 8013168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
                                pBtd->pairWithHIDDevice = false;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	689b      	ldr	r3, [r3, #8]
 8013170:	2200      	movs	r2, #0
 8013172:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                                connected = true;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2201      	movs	r2, #1
 801317a:	755a      	strb	r2, [r3, #21]
                                onInit();
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	3310      	adds	r3, #16
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2201      	movs	r2, #1
 801318c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8013190:	e04d      	b.n	801322e <_ZN5BTHID10L2CAP_taskEv+0x2a6>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	691b      	ldr	r3, [r3, #16]
 8013196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801319a:	2b00      	cmp	r3, #0
 801319c:	d049      	beq.n	8013232 <_ZN5BTHID10L2CAP_taskEv+0x2aa>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
 801319e:	2180      	movs	r1, #128	; 0x80
 80131a0:	482d      	ldr	r0, [pc, #180]	; (8013258 <_ZN5BTHID10L2CAP_taskEv+0x2d0>)
 80131a2:	f002 fbb1 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                identifier++;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	7d1b      	ldrb	r3, [r3, #20]
 80131aa:	3301      	adds	r3, #1
 80131ac:	b2da      	uxtb	r2, r3
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6898      	ldr	r0, [r3, #8]
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	8999      	ldrh	r1, [r3, #12]
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	7d1a      	ldrb	r2, [r3, #20]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f103 0416 	add.w	r4, r3, #22
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	336b      	adds	r3, #107	; 0x6b
 80131c8:	9300      	str	r3, [sp, #0]
 80131ca:	4623      	mov	r3, r4
 80131cc:	f7fe fab1 	bl	8011732 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2205      	movs	r2, #5
 80131d4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80131d8:	e02b      	b.n	8013232 <_ZN5BTHID10L2CAP_taskEv+0x2aa>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	691b      	ldr	r3, [r3, #16]
 80131de:	f003 0308 	and.w	r3, r3, #8
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d027      	beq.n	8013236 <_ZN5BTHID10L2CAP_taskEv+0x2ae>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
 80131e6:	2180      	movs	r1, #128	; 0x80
 80131e8:	481c      	ldr	r0, [pc, #112]	; (801325c <_ZN5BTHID10L2CAP_taskEv+0x2d4>)
 80131ea:	f002 fb8d 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                pBtd->hci_disconnect(hci_handle);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	689a      	ldr	r2, [r3, #8]
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	899b      	ldrh	r3, [r3, #12]
 80131f6:	4619      	mov	r1, r3
 80131f8:	4610      	mov	r0, r2
 80131fa:	f7fe f85f 	bl	80112bc <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013204:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2200      	movs	r2, #0
 801320a:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2200      	movs	r2, #0
 8013210:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8013214:	e00f      	b.n	8013236 <_ZN5BTHID10L2CAP_taskEv+0x2ae>
                        break;
 8013216:	bf00      	nop
 8013218:	e00e      	b.n	8013238 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 801321a:	bf00      	nop
 801321c:	e00c      	b.n	8013238 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 801321e:	bf00      	nop
 8013220:	e00a      	b.n	8013238 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8013222:	bf00      	nop
 8013224:	e008      	b.n	8013238 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8013226:	bf00      	nop
 8013228:	e006      	b.n	8013238 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 801322a:	bf00      	nop
 801322c:	e004      	b.n	8013238 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 801322e:	bf00      	nop
 8013230:	e002      	b.n	8013238 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8013232:	bf00      	nop
 8013234:	e000      	b.n	8013238 <_ZN5BTHID10L2CAP_taskEv+0x2b0>
                        break;
 8013236:	bf00      	nop
        }
}
 8013238:	bf00      	nop
 801323a:	3708      	adds	r7, #8
 801323c:	46bd      	mov	sp, r7
 801323e:	bdb0      	pop	{r4, r5, r7, pc}
 8013240:	08016a14 	.word	0x08016a14
 8013244:	08016a3c 	.word	0x08016a3c
 8013248:	08016a68 	.word	0x08016a68
 801324c:	08016a8c 	.word	0x08016a8c
 8013250:	08016ab4 	.word	0x08016ab4
 8013254:	08016ad8 	.word	0x08016ad8
 8013258:	08016af4 	.word	0x08016af4
 801325c:	08016b18 	.word	0x08016b18

08013260 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 8013260:	b5b0      	push	{r4, r5, r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af02      	add	r7, sp, #8
 8013266:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801326e:	2b00      	cmp	r3, #0
 8013270:	f040 808c 	bne.w	801338c <_ZN5BTHID3RunEv+0x12c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	689b      	ldr	r3, [r3, #8]
 8013278:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801327c:	2b00      	cmp	r3, #0
 801327e:	d03e      	beq.n	80132fe <_ZN5BTHID3RunEv+0x9e>
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	689b      	ldr	r3, [r3, #8]
 8013284:	7a5b      	ldrb	r3, [r3, #9]
 8013286:	f083 0301 	eor.w	r3, r3, #1
 801328a:	b2db      	uxtb	r3, r3
 801328c:	2b00      	cmp	r3, #0
 801328e:	d036      	beq.n	80132fe <_ZN5BTHID3RunEv+0x9e>
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	7d5b      	ldrb	r3, [r3, #21]
 8013294:	f083 0301 	eor.w	r3, r3, #1
 8013298:	b2db      	uxtb	r3, r3
 801329a:	2b00      	cmp	r3, #0
 801329c:	d02f      	beq.n	80132fe <_ZN5BTHID3RunEv+0x9e>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80132a4:	f083 0301 	eor.w	r3, r3, #1
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d027      	beq.n	80132fe <_ZN5BTHID3RunEv+0x9e>
                                pBtd->l2capConnectionClaimed = true;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	689b      	ldr	r3, [r3, #8]
 80132b2:	2201      	movs	r2, #1
 80132b4:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	2201      	movs	r2, #1
 80132ba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
 80132be:	2180      	movs	r1, #128	; 0x80
 80132c0:	4834      	ldr	r0, [pc, #208]	; (8013394 <_ZN5BTHID3RunEv+0x134>)
 80132c2:	f002 fb21 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	689b      	ldr	r3, [r3, #8]
 80132ca:	8b5a      	ldrh	r2, [r3, #26]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2200      	movs	r2, #0
 80132d4:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2200      	movs	r2, #0
 80132da:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6898      	ldr	r0, [r3, #8]
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	8999      	ldrh	r1, [r3, #12]
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	7d1a      	ldrb	r2, [r3, #20]
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	336b      	adds	r3, #107	; 0x6b
 80132ec:	2411      	movs	r4, #17
 80132ee:	9400      	str	r4, [sp, #0]
 80132f0:	f7fe f8f6 	bl	80114e0 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2202      	movs	r2, #2
 80132f8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 80132fc:	e045      	b.n	801338a <_ZN5BTHID3RunEv+0x12a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	691b      	ldr	r3, [r3, #16]
 8013302:	f003 0301 	and.w	r3, r3, #1
 8013306:	2b00      	cmp	r3, #0
 8013308:	d03f      	beq.n	801338a <_ZN5BTHID3RunEv+0x12a>
                                Notify(PSTR("\r\nHID Control Incoming Connection Request"), 0x80);
 801330a:	2180      	movs	r1, #128	; 0x80
 801330c:	4822      	ldr	r0, [pc, #136]	; (8013398 <_ZN5BTHID3RunEv+0x138>)
 801330e:	f002 fafb 	bl	8015908 <_Z8E_NotifyPKci>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6898      	ldr	r0, [r3, #8]
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	8999      	ldrh	r1, [r3, #12]
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	7d1a      	ldrb	r2, [r3, #20]
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	3316      	adds	r3, #22
 8013328:	2501      	movs	r5, #1
 801332a:	9501      	str	r5, [sp, #4]
 801332c:	9300      	str	r3, [sp, #0]
 801332e:	4623      	mov	r3, r4
 8013330:	f7fe f914 	bl	801155c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8013334:	2001      	movs	r0, #1
 8013336:	f7ef fc51 	bl	8002bdc <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6898      	ldr	r0, [r3, #8]
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	8999      	ldrh	r1, [r3, #12]
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	7d1a      	ldrb	r2, [r3, #20]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	3316      	adds	r3, #22
 8013350:	2500      	movs	r5, #0
 8013352:	9501      	str	r5, [sp, #4]
 8013354:	9300      	str	r3, [sp, #0]
 8013356:	4623      	mov	r3, r4
 8013358:	f7fe f900 	bl	801155c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	7d1b      	ldrb	r3, [r3, #20]
 8013360:	3301      	adds	r3, #1
 8013362:	b2da      	uxtb	r2, r3
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8013368:	2001      	movs	r0, #1
 801336a:	f7ef fc37 	bl	8002bdc <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6898      	ldr	r0, [r3, #8]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	8999      	ldrh	r1, [r3, #12]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	7d1a      	ldrb	r2, [r3, #20]
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	3316      	adds	r3, #22
 801337e:	f7fe f93a 	bl	80115f6 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	2204      	movs	r2, #4
 8013386:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 801338a:	bf00      	nop
        }
}
 801338c:	bf00      	nop
 801338e:	3708      	adds	r7, #8
 8013390:	46bd      	mov	sp, r7
 8013392:	bdb0      	pop	{r4, r5, r7, pc}
 8013394:	08016b38 	.word	0x08016b38
 8013398:	08016b60 	.word	0x08016b60

0801339c <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 801339c:	b590      	push	{r4, r7, lr}
 801339e:	b087      	sub	sp, #28
 80133a0:	af02      	add	r7, sp, #8
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	60b9      	str	r1, [r7, #8]
 80133a6:	4613      	mov	r3, r2
 80133a8:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	6898      	ldr	r0, [r3, #8]
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	8999      	ldrh	r1, [r3, #12]
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	7edb      	ldrb	r3, [r3, #27]
 80133b6:	68fa      	ldr	r2, [r7, #12]
 80133b8:	7f12      	ldrb	r2, [r2, #28]
 80133ba:	79fc      	ldrb	r4, [r7, #7]
 80133bc:	9201      	str	r2, [sp, #4]
 80133be:	9300      	str	r3, [sp, #0]
 80133c0:	4623      	mov	r3, r4
 80133c2:	68ba      	ldr	r2, [r7, #8]
 80133c4:	f7fd ffda 	bl	801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80133c8:	bf00      	nop
 80133ca:	3714      	adds	r7, #20
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd90      	pop	{r4, r7, pc}

080133d0 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
 80133d8:	460b      	mov	r3, r1
 80133da:	70fb      	strb	r3, [r7, #3]
 80133dc:	4613      	mov	r3, r2
 80133de:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2207      	movs	r2, #7
 80133e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	78fa      	ldrb	r2, [r7, #3]
 80133ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	78ba      	ldrb	r2, [r7, #2]
 80133f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2200      	movs	r2, #0
 80133fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2205      	movs	r2, #5
 8013404:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2200      	movs	r2, #0
 801340c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2202      	movs	r2, #2
 8013414:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	2235      	movs	r2, #53	; 0x35
 801341c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2200      	movs	r2, #0
 8013424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2200      	movs	r2, #0
 801342c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	3328      	adds	r3, #40	; 0x28
 8013434:	220a      	movs	r2, #10
 8013436:	4619      	mov	r1, r3
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	f7ff ffaf 	bl	801339c <_ZN5BTHID11SDP_CommandEPhh>
}
 801343e:	bf00      	nop
 8013440:	3708      	adds	r7, #8
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
	...

08013448 <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 8013448:	b590      	push	{r4, r7, lr}
 801344a:	b087      	sub	sp, #28
 801344c:	af02      	add	r7, sp, #8
 801344e:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
 8013450:	2180      	movs	r1, #128	; 0x80
 8013452:	481b      	ldr	r0, [pc, #108]	; (80134c0 <_ZN5BTHID11setProtocolEv+0x78>)
 8013454:	f002 fa58 	bl	8015908 <_Z8E_NotifyPKci>
        D_PrintHex<uint8_t > (protocolMode, 0x80);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801345e:	2180      	movs	r1, #128	; 0x80
 8013460:	4618      	mov	r0, r3
 8013462:	f7fe fab0 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801346c:	2b00      	cmp	r3, #0
 801346e:	d00c      	beq.n	801348a <_ZN5BTHID11setProtocolEv+0x42>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8013476:	2b01      	cmp	r3, #1
 8013478:	d007      	beq.n	801348a <_ZN5BTHID11setProtocolEv+0x42>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
 801347a:	2180      	movs	r1, #128	; 0x80
 801347c:	4811      	ldr	r0, [pc, #68]	; (80134c4 <_ZN5BTHID11setProtocolEv+0x7c>)
 801347e:	f002 fa43 	bl	8015908 <_Z8E_NotifyPKci>
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	2200      	movs	r2, #0
 8013486:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8013490:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8013494:	b2db      	uxtb	r3, r3
 8013496:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	6898      	ldr	r0, [r3, #8]
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	8999      	ldrh	r1, [r3, #12]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	7d9b      	ldrb	r3, [r3, #22]
 80134a4:	687a      	ldr	r2, [r7, #4]
 80134a6:	7dd2      	ldrb	r2, [r2, #23]
 80134a8:	f107 040f 	add.w	r4, r7, #15
 80134ac:	9201      	str	r2, [sp, #4]
 80134ae:	9300      	str	r3, [sp, #0]
 80134b0:	2301      	movs	r3, #1
 80134b2:	4622      	mov	r2, r4
 80134b4:	f7fd ff62 	bl	801137c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80134b8:	bf00      	nop
 80134ba:	3714      	adds	r7, #20
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd90      	pop	{r4, r7, pc}
 80134c0:	08016b8c 	.word	0x08016b8c
 80134c4:	08016ba4 	.word	0x08016ba4

080134c8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 80134c8:	b480      	push	{r7}
 80134ca:	b083      	sub	sp, #12
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	460b      	mov	r3, r1
 80134d2:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 80134d4:	78fb      	ldrb	r3, [r7, #3]
 80134d6:	2b03      	cmp	r3, #3
 80134d8:	d86e      	bhi.n	80135b8 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 80134da:	a201      	add	r2, pc, #4	; (adr r2, 80134e0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 80134dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134e0:	080134f1 	.word	0x080134f1
 80134e4:	08013523 	.word	0x08013523
 80134e8:	08013555 	.word	0x08013555
 80134ec:	08013587 	.word	0x08013587
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	7a1b      	ldrb	r3, [r3, #8]
 80134f4:	f003 030f 	and.w	r3, r3, #15
 80134f8:	b2db      	uxtb	r3, r3
 80134fa:	2b07      	cmp	r3, #7
 80134fc:	d00d      	beq.n	801351a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	7a1b      	ldrb	r3, [r3, #8]
 8013502:	f003 030f 	and.w	r3, r3, #15
 8013506:	b2db      	uxtb	r3, r3
 8013508:	2b00      	cmp	r3, #0
 801350a:	d006      	beq.n	801351a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	7a1b      	ldrb	r3, [r3, #8]
 8013510:	f003 030f 	and.w	r3, r3, #15
 8013514:	b2db      	uxtb	r3, r3
 8013516:	2b01      	cmp	r3, #1
 8013518:	d101      	bne.n	801351e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 801351a:	2301      	movs	r3, #1
 801351c:	e04d      	b.n	80135ba <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 801351e:	2300      	movs	r3, #0
 8013520:	e04b      	b.n	80135ba <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	7a1b      	ldrb	r3, [r3, #8]
 8013526:	f003 030f 	and.w	r3, r3, #15
 801352a:	b2db      	uxtb	r3, r3
 801352c:	2b01      	cmp	r3, #1
 801352e:	d00d      	beq.n	801354c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	7a1b      	ldrb	r3, [r3, #8]
 8013534:	f003 030f 	and.w	r3, r3, #15
 8013538:	b2db      	uxtb	r3, r3
 801353a:	2b02      	cmp	r3, #2
 801353c:	d006      	beq.n	801354c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	7a1b      	ldrb	r3, [r3, #8]
 8013542:	f003 030f 	and.w	r3, r3, #15
 8013546:	b2db      	uxtb	r3, r3
 8013548:	2b03      	cmp	r3, #3
 801354a:	d101      	bne.n	8013550 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 801354c:	2301      	movs	r3, #1
 801354e:	e034      	b.n	80135ba <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8013550:	2300      	movs	r3, #0
 8013552:	e032      	b.n	80135ba <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	7a1b      	ldrb	r3, [r3, #8]
 8013558:	f003 030f 	and.w	r3, r3, #15
 801355c:	b2db      	uxtb	r3, r3
 801355e:	2b03      	cmp	r3, #3
 8013560:	d00d      	beq.n	801357e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	7a1b      	ldrb	r3, [r3, #8]
 8013566:	f003 030f 	and.w	r3, r3, #15
 801356a:	b2db      	uxtb	r3, r3
 801356c:	2b04      	cmp	r3, #4
 801356e:	d006      	beq.n	801357e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	7a1b      	ldrb	r3, [r3, #8]
 8013574:	f003 030f 	and.w	r3, r3, #15
 8013578:	b2db      	uxtb	r3, r3
 801357a:	2b05      	cmp	r3, #5
 801357c:	d101      	bne.n	8013582 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 801357e:	2301      	movs	r3, #1
 8013580:	e01b      	b.n	80135ba <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8013582:	2300      	movs	r3, #0
 8013584:	e019      	b.n	80135ba <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	7a1b      	ldrb	r3, [r3, #8]
 801358a:	f003 030f 	and.w	r3, r3, #15
 801358e:	b2db      	uxtb	r3, r3
 8013590:	2b05      	cmp	r3, #5
 8013592:	d00d      	beq.n	80135b0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	7a1b      	ldrb	r3, [r3, #8]
 8013598:	f003 030f 	and.w	r3, r3, #15
 801359c:	b2db      	uxtb	r3, r3
 801359e:	2b06      	cmp	r3, #6
 80135a0:	d006      	beq.n	80135b0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	7a1b      	ldrb	r3, [r3, #8]
 80135a6:	f003 030f 	and.w	r3, r3, #15
 80135aa:	b2db      	uxtb	r3, r3
 80135ac:	2b07      	cmp	r3, #7
 80135ae:	d101      	bne.n	80135b4 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 80135b0:	2301      	movs	r3, #1
 80135b2:	e002      	b.n	80135ba <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80135b4:	2300      	movs	r3, #0
 80135b6:	e000      	b.n	80135ba <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 80135b8:	2300      	movs	r3, #0
        }
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	370c      	adds	r7, #12
 80135be:	46bd      	mov	sp, r7
 80135c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c4:	4770      	bx	lr
 80135c6:	bf00      	nop

080135c8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	460b      	mov	r3, r1
 80135d2:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 80135d4:	78fb      	ldrb	r3, [r7, #3]
 80135d6:	2b03      	cmp	r3, #3
 80135d8:	d806      	bhi.n	80135e8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 80135da:	78fb      	ldrb	r3, [r7, #3]
 80135dc:	4619      	mov	r1, r3
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f7ff ff72 	bl	80134c8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80135e4:	4603      	mov	r3, r0
 80135e6:	e011      	b.n	801360c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	689b      	ldr	r3, [r3, #8]
 80135ec:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80135f0:	4619      	mov	r1, r3
 80135f2:	78fb      	ldrb	r3, [r7, #3]
 80135f4:	4a07      	ldr	r2, [pc, #28]	; (8013614 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 80135f6:	4413      	add	r3, r2
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	fa21 f303 	lsr.w	r3, r1, r3
 80135fe:	f003 0301 	and.w	r3, r3, #1
 8013602:	2b00      	cmp	r3, #0
 8013604:	bf14      	ite	ne
 8013606:	2301      	movne	r3, #1
 8013608:	2300      	moveq	r3, #0
 801360a:	b2db      	uxtb	r3, r3
}
 801360c:	4618      	mov	r0, r3
 801360e:	3708      	adds	r7, #8
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}
 8013614:	08017d2c 	.word	0x08017d2c

08013618 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 8013618:	b480      	push	{r7}
 801361a:	b085      	sub	sp, #20
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	460b      	mov	r3, r1
 8013622:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8013624:	78fb      	ldrb	r3, [r7, #3]
 8013626:	4a1b      	ldr	r2, [pc, #108]	; (8013694 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8013628:	4413      	add	r3, r2
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	461a      	mov	r2, r3
 801362e:	2301      	movs	r3, #1
 8013630:	4093      	lsls	r3, r2
 8013632:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 801363a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801363e:	021b      	lsls	r3, r3, #8
 8013640:	4313      	orrs	r3, r2
 8013642:	461a      	mov	r2, r3
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	4013      	ands	r3, r2
 8013648:	2b00      	cmp	r3, #0
 801364a:	bf14      	ite	ne
 801364c:	2301      	movne	r3, #1
 801364e:	2300      	moveq	r3, #0
 8013650:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8013658:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801365c:	021b      	lsls	r3, r3, #8
 801365e:	4313      	orrs	r3, r2
 8013660:	461a      	mov	r2, r3
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	43db      	mvns	r3, r3
 8013666:	4013      	ands	r3, r2
 8013668:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	b2d1      	uxtb	r1, r2
 8013670:	2000      	movs	r0, #0
 8013672:	4301      	orrs	r1, r0
 8013674:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8013678:	0a12      	lsrs	r2, r2, #8
 801367a:	b292      	uxth	r2, r2
 801367c:	2100      	movs	r1, #0
 801367e:	430a      	orrs	r2, r1
 8013680:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8013684:	7afb      	ldrb	r3, [r7, #11]
}
 8013686:	4618      	mov	r0, r3
 8013688:	3714      	adds	r7, #20
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr
 8013692:	bf00      	nop
 8013694:	08017d2c 	.word	0x08017d2c

08013698 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 8013698:	b480      	push	{r7}
 801369a:	b083      	sub	sp, #12
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	460b      	mov	r3, r1
 80136a2:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 80136a4:	78fb      	ldrb	r3, [r7, #3]
 80136a6:	2b08      	cmp	r3, #8
 80136a8:	d102      	bne.n	80136b0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	7adb      	ldrb	r3, [r3, #11]
 80136ae:	e006      	b.n	80136be <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 80136b0:	78fb      	ldrb	r3, [r7, #3]
 80136b2:	2b09      	cmp	r3, #9
 80136b4:	d102      	bne.n	80136bc <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	7b1b      	ldrb	r3, [r3, #12]
 80136ba:	e000      	b.n	80136be <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 80136bc:	2300      	movs	r3, #0
}
 80136be:	4618      	mov	r0, r3
 80136c0:	370c      	adds	r7, #12
 80136c2:	46bd      	mov	sp, r7
 80136c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c8:	4770      	bx	lr

080136ca <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 80136ca:	b480      	push	{r7}
 80136cc:	b083      	sub	sp, #12
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	6078      	str	r0, [r7, #4]
 80136d2:	460b      	mov	r3, r1
 80136d4:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 80136d6:	78fb      	ldrb	r3, [r7, #3]
 80136d8:	687a      	ldr	r2, [r7, #4]
 80136da:	4413      	add	r3, r2
 80136dc:	791b      	ldrb	r3, [r3, #4]
}
 80136de:	4618      	mov	r0, r3
 80136e0:	370c      	adds	r7, #12
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr
	...

080136ec <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b086      	sub	sp, #24
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	460b      	mov	r3, r1
 80136f6:	607a      	str	r2, [r7, #4]
 80136f8:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 80136fa:	7afb      	ldrb	r3, [r7, #11]
 80136fc:	2b01      	cmp	r3, #1
 80136fe:	f240 80ba 	bls.w	8013876 <_ZN9PS4Parser5ParseEhPh+0x18a>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2b00      	cmp	r3, #0
 8013706:	f000 80b6 	beq.w	8013876 <_ZN9PS4Parser5ParseEhPh+0x18a>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	2b01      	cmp	r3, #1
 8013710:	d10e      	bne.n	8013730 <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	1d18      	adds	r0, r3, #4
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	1c59      	adds	r1, r3, #1
 801371a:	7afb      	ldrb	r3, [r7, #11]
 801371c:	3b01      	subs	r3, #1
 801371e:	b2db      	uxtb	r3, r3
 8013720:	2b3c      	cmp	r3, #60	; 0x3c
 8013722:	bf28      	it	cs
 8013724:	233c      	movcs	r3, #60	; 0x3c
 8013726:	b2db      	uxtb	r3, r3
 8013728:	461a      	mov	r2, r3
 801372a:	f002 fa39 	bl	8015ba0 <memcpy>
 801372e:	e02a      	b.n	8013786 <_ZN9PS4Parser5ParseEhPh+0x9a>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	781b      	ldrb	r3, [r3, #0]
 8013734:	2b11      	cmp	r3, #17
 8013736:	d11b      	bne.n	8013770 <_ZN9PS4Parser5ParseEhPh+0x84>
                        if (len < 4) {
 8013738:	7afb      	ldrb	r3, [r7, #11]
 801373a:	2b03      	cmp	r3, #3
 801373c:	d809      	bhi.n	8013752 <_ZN9PS4Parser5ParseEhPh+0x66>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
 801373e:	2180      	movs	r1, #128	; 0x80
 8013740:	4855      	ldr	r0, [pc, #340]	; (8013898 <_ZN9PS4Parser5ParseEhPh+0x1ac>)
 8013742:	f002 f8e1 	bl	8015908 <_Z8E_NotifyPKci>
                                D_PrintHex<uint8_t > (len, 0x80);
 8013746:	7afb      	ldrb	r3, [r7, #11]
 8013748:	2180      	movs	r1, #128	; 0x80
 801374a:	4618      	mov	r0, r3
 801374c:	f7fe f93b 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
#endif
                                return;
 8013750:	e09e      	b.n	8013890 <_ZN9PS4Parser5ParseEhPh+0x1a4>
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	1d18      	adds	r0, r3, #4
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	1cd9      	adds	r1, r3, #3
 801375a:	7afb      	ldrb	r3, [r7, #11]
 801375c:	3b03      	subs	r3, #3
 801375e:	b2db      	uxtb	r3, r3
 8013760:	2b3c      	cmp	r3, #60	; 0x3c
 8013762:	bf28      	it	cs
 8013764:	233c      	movcs	r3, #60	; 0x3c
 8013766:	b2db      	uxtb	r3, r3
 8013768:	461a      	mov	r2, r3
 801376a:	f002 fa19 	bl	8015ba0 <memcpy>
 801376e:	e00a      	b.n	8013786 <_ZN9PS4Parser5ParseEhPh+0x9a>
                } else {
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nUnknown report id: "), 0x80);
 8013770:	2180      	movs	r1, #128	; 0x80
 8013772:	484a      	ldr	r0, [pc, #296]	; (801389c <_ZN9PS4Parser5ParseEhPh+0x1b0>)
 8013774:	f002 f8c8 	bl	8015908 <_Z8E_NotifyPKci>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	2180      	movs	r1, #128	; 0x80
 801377e:	4618      	mov	r0, r3
 8013780:	f7fe f921 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
#endif
                        return;
 8013784:	e084      	b.n	8013890 <_ZN9PS4Parser5ParseEhPh+0x1a4>
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	689b      	ldr	r3, [r3, #8]
 801378a:	f3c3 0217 	ubfx	r2, r3, #0, #24
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013792:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8013796:	429a      	cmp	r2, r3
 8013798:	d06d      	beq.n	8013876 <_ZN9PS4Parser5ParseEhPh+0x18a>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	689b      	ldr	r3, [r3, #8]
 801379e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80137a2:	461a      	mov	r2, r3
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137a8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80137ac:	43db      	mvns	r3, r3
 80137ae:	4013      	ands	r3, r2
 80137b0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	b2d1      	uxtb	r1, r2
 80137b8:	2000      	movs	r0, #0
 80137ba:	4301      	orrs	r1, r0
 80137bc:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 80137c0:	0a12      	lsrs	r2, r2, #8
 80137c2:	b292      	uxth	r2, r2
 80137c4:	2100      	movs	r1, #0
 80137c6:	430a      	orrs	r2, r1
 80137c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	689b      	ldr	r3, [r3, #8]
 80137d0:	f3c3 0117 	ubfx	r1, r3, #0, #24
 80137d4:	68fa      	ldr	r2, [r7, #12]
 80137d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80137d8:	f361 0317 	bfi	r3, r1, #0, #24
 80137dc:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 80137de:	2300      	movs	r3, #0
 80137e0:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 80137e2:	2100      	movs	r1, #0
 80137e4:	68f8      	ldr	r0, [r7, #12]
 80137e6:	f7ff fe6f 	bl	80134c8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 80137ea:	4603      	mov	r3, r0
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d003      	beq.n	80137f8 <_ZN9PS4Parser5ParseEhPh+0x10c>
                                newDpad |= 1 << UP;
 80137f0:	7dfb      	ldrb	r3, [r7, #23]
 80137f2:	f043 0301 	orr.w	r3, r3, #1
 80137f6:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 80137f8:	2101      	movs	r1, #1
 80137fa:	68f8      	ldr	r0, [r7, #12]
 80137fc:	f7ff fe64 	bl	80134c8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8013800:	4603      	mov	r3, r0
 8013802:	2b00      	cmp	r3, #0
 8013804:	d003      	beq.n	801380e <_ZN9PS4Parser5ParseEhPh+0x122>
                                newDpad |= 1 << RIGHT;
 8013806:	7dfb      	ldrb	r3, [r7, #23]
 8013808:	f043 0302 	orr.w	r3, r3, #2
 801380c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 801380e:	2102      	movs	r1, #2
 8013810:	68f8      	ldr	r0, [r7, #12]
 8013812:	f7ff fe59 	bl	80134c8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8013816:	4603      	mov	r3, r0
 8013818:	2b00      	cmp	r3, #0
 801381a:	d003      	beq.n	8013824 <_ZN9PS4Parser5ParseEhPh+0x138>
                                newDpad |= 1 << DOWN;
 801381c:	7dfb      	ldrb	r3, [r7, #23]
 801381e:	f043 0304 	orr.w	r3, r3, #4
 8013822:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 8013824:	2103      	movs	r1, #3
 8013826:	68f8      	ldr	r0, [r7, #12]
 8013828:	f7ff fe4e 	bl	80134c8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 801382c:	4603      	mov	r3, r0
 801382e:	2b00      	cmp	r3, #0
 8013830:	d003      	beq.n	801383a <_ZN9PS4Parser5ParseEhPh+0x14e>
                                newDpad |= 1 << LEFT;
 8013832:	7dfb      	ldrb	r3, [r7, #23]
 8013834:	f043 0308 	orr.w	r3, r3, #8
 8013838:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013840:	7dfa      	ldrb	r2, [r7, #23]
 8013842:	429a      	cmp	r2, r3
 8013844:	d017      	beq.n	8013876 <_ZN9PS4Parser5ParseEhPh+0x18a>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801384c:	b25b      	sxtb	r3, r3
 801384e:	43db      	mvns	r3, r3
 8013850:	b25a      	sxtb	r2, r3
 8013852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013856:	4013      	ands	r3, r2
 8013858:	b25b      	sxtb	r3, r3
 801385a:	f003 030f 	and.w	r3, r3, #15
 801385e:	b2d9      	uxtb	r1, r3
 8013860:	68fa      	ldr	r2, [r7, #12]
 8013862:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8013866:	f361 0303 	bfi	r3, r1, #0, #4
 801386a:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	7dfa      	ldrb	r2, [r7, #23]
 8013872:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801387c:	2b00      	cmp	r3, #0
 801387e:	d007      	beq.n	8013890 <_ZN9PS4Parser5ParseEhPh+0x1a4>
                sendOutputReport(&ps4Output); // Send output report
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	68fa      	ldr	r2, [r7, #12]
 8013888:	3246      	adds	r2, #70	; 0x46
 801388a:	4611      	mov	r1, r2
 801388c:	68f8      	ldr	r0, [r7, #12]
 801388e:	4798      	blx	r3
}
 8013890:	3718      	adds	r7, #24
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
 8013896:	bf00      	nop
 8013898:	08016be0 	.word	0x08016be0
 801389c:	08016bf8 	.word	0x08016bf8

080138a0 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 80138a0:	b480      	push	{r7}
 80138a2:	b085      	sub	sp, #20
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 80138a8:	2300      	movs	r3, #0
 80138aa:	73fb      	strb	r3, [r7, #15]
 80138ac:	7bfb      	ldrb	r3, [r7, #15]
 80138ae:	2b03      	cmp	r3, #3
 80138b0:	d808      	bhi.n	80138c4 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 80138b2:	7bfb      	ldrb	r3, [r7, #15]
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	4413      	add	r3, r2
 80138b8:	227f      	movs	r2, #127	; 0x7f
 80138ba:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 80138bc:	7bfb      	ldrb	r3, [r7, #15]
 80138be:	3301      	adds	r3, #1
 80138c0:	73fb      	strb	r3, [r7, #15]
 80138c2:	e7f3      	b.n	80138ac <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 80138c4:	687a      	ldr	r2, [r7, #4]
 80138c6:	6893      	ldr	r3, [r2, #8]
 80138c8:	f36f 0317 	bfc	r3, #0, #24
 80138cc:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80138d2:	f36f 0317 	bfc	r3, #0, #24
 80138d6:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 80138d8:	2300      	movs	r3, #0
 80138da:	73fb      	strb	r3, [r7, #15]
 80138dc:	7bfb      	ldrb	r3, [r7, #15]
 80138de:	2b01      	cmp	r3, #1
 80138e0:	d808      	bhi.n	80138f4 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 80138e2:	7bfb      	ldrb	r3, [r7, #15]
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	4413      	add	r3, r2
 80138e8:	2200      	movs	r2, #0
 80138ea:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 80138ec:	7bfb      	ldrb	r3, [r7, #15]
 80138ee:	3301      	adds	r3, #1
 80138f0:	73fb      	strb	r3, [r7, #15]
 80138f2:	e7f3      	b.n	80138dc <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 80138f4:	2300      	movs	r3, #0
 80138f6:	73fb      	strb	r3, [r7, #15]
 80138f8:	7bfb      	ldrb	r3, [r7, #15]
 80138fa:	2b02      	cmp	r3, #2
 80138fc:	d81b      	bhi.n	8013936 <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 80138fe:	2300      	movs	r3, #0
 8013900:	73bb      	strb	r3, [r7, #14]
 8013902:	7bbb      	ldrb	r3, [r7, #14]
 8013904:	2b01      	cmp	r3, #1
 8013906:	d812      	bhi.n	801392e <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 8013908:	7bfa      	ldrb	r2, [r7, #15]
 801390a:	7bbb      	ldrb	r3, [r7, #14]
 801390c:	6879      	ldr	r1, [r7, #4]
 801390e:	0098      	lsls	r0, r3, #2
 8013910:	4613      	mov	r3, r2
 8013912:	00db      	lsls	r3, r3, #3
 8013914:	4413      	add	r3, r2
 8013916:	4403      	add	r3, r0
 8013918:	440b      	add	r3, r1
 801391a:	f103 0220 	add.w	r2, r3, #32
 801391e:	7993      	ldrb	r3, [r2, #6]
 8013920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013924:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8013926:	7bbb      	ldrb	r3, [r7, #14]
 8013928:	3301      	adds	r3, #1
 801392a:	73bb      	strb	r3, [r7, #14]
 801392c:	e7e9      	b.n	8013902 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 801392e:	7bfb      	ldrb	r3, [r7, #15]
 8013930:	3301      	adds	r3, #1
 8013932:	73fb      	strb	r3, [r7, #15]
 8013934:	e7e0      	b.n	80138f8 <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8013936:	687a      	ldr	r2, [r7, #4]
 8013938:	7a13      	ldrb	r3, [r2, #8]
 801393a:	2108      	movs	r1, #8
 801393c:	f361 0303 	bfi	r3, r1, #0, #4
 8013940:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8013942:	687a      	ldr	r2, [r7, #4]
 8013944:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8013948:	2108      	movs	r1, #8
 801394a:	f361 0303 	bfi	r3, r1, #0, #4
 801394e:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8013952:	687a      	ldr	r2, [r7, #4]
 8013954:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8013958:	f36f 0303 	bfc	r3, #0, #4
 801395c:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2200      	movs	r2, #0
 8013964:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2200      	movs	r2, #0
 801396c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2200      	movs	r2, #0
 8013980:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2200      	movs	r2, #0
 80139a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2200      	movs	r2, #0
 80139b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 80139b8:	bf00      	nop
 80139ba:	3714      	adds	r7, #20
 80139bc:	46bd      	mov	sp, r7
 80139be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c2:	4770      	bx	lr

080139c4 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80139c4:	b580      	push	{r7, lr}
 80139c6:	af00      	add	r7, sp, #0
 80139c8:	2180      	movs	r1, #128	; 0x80
 80139ca:	4803      	ldr	r0, [pc, #12]	; (80139d8 <_ZN2P95IsSetEv+0x14>)
 80139cc:	f7ef fe88 	bl	80036e0 <HAL_GPIO_ReadPin>
 80139d0:	4603      	mov	r3, r0
 80139d2:	4618      	mov	r0, r3
 80139d4:	bd80      	pop	{r7, pc}
 80139d6:	bf00      	nop
 80139d8:	40020800 	.word	0x40020800

080139dc <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 80139dc:	b580      	push	{r7, lr}
 80139de:	b082      	sub	sp, #8
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f001 f9dd 	bl	8014da4 <_ZN8MAX3421eI3P102P9EC1Ev>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4618      	mov	r0, r3
 80139ee:	f001 f9f5 	bl	8014ddc <_ZN15AddressPoolImplILh16EEC1Ev>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2200      	movs	r2, #0
 80139f6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 80139fa:	4b05      	ldr	r3, [pc, #20]	; (8013a10 <_ZN3USBC1Ev+0x34>)
 80139fc:	2211      	movs	r2, #17
 80139fe:	701a      	strb	r2, [r3, #0]
        init();
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f000 f807 	bl	8013a14 <_ZN3USB4initEv>
}
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3708      	adds	r7, #8
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}
 8013a10:	200056ba 	.word	0x200056ba

08013a14 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8013a14:	b480      	push	{r7}
 8013a16:	b083      	sub	sp, #12
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8013a24:	bf00      	nop
 8013a26:	370c      	adds	r7, #12
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2e:	4770      	bx	lr

08013a30 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b086      	sub	sp, #24
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
 8013a38:	460b      	mov	r3, r1
 8013a3a:	70fb      	strb	r3, [r7, #3]
 8013a3c:	4613      	mov	r3, r2
 8013a3e:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	78fa      	ldrb	r2, [r7, #3]
 8013a44:	4611      	mov	r1, r2
 8013a46:	4618      	mov	r0, r3
 8013a48:	f001 fa02 	bl	8014e50 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8013a4c:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d003      	beq.n	8013a5c <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d101      	bne.n	8013a60 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	e018      	b.n	8013a92 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8013a66:	2300      	movs	r3, #0
 8013a68:	74fb      	strb	r3, [r7, #19]
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	795b      	ldrb	r3, [r3, #5]
 8013a6e:	7cfa      	ldrb	r2, [r7, #19]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d20d      	bcs.n	8013a90 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	78ba      	ldrb	r2, [r7, #2]
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d101      	bne.n	8013a82 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	e007      	b.n	8013a92 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	3303      	adds	r3, #3
 8013a86:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8013a88:	7cfb      	ldrb	r3, [r7, #19]
 8013a8a:	3301      	adds	r3, #1
 8013a8c:	74fb      	strb	r3, [r7, #19]
 8013a8e:	e7ec      	b.n	8013a6a <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8013a90:	2300      	movs	r3, #0
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3718      	adds	r7, #24
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}

08013a9a <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8013a9a:	b580      	push	{r7, lr}
 8013a9c:	b086      	sub	sp, #24
 8013a9e:	af00      	add	r7, sp, #0
 8013aa0:	60f8      	str	r0, [r7, #12]
 8013aa2:	607b      	str	r3, [r7, #4]
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	72fb      	strb	r3, [r7, #11]
 8013aa8:	4613      	mov	r3, r2
 8013aaa:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d101      	bne.n	8013ab6 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8013ab2:	23d8      	movs	r3, #216	; 0xd8
 8013ab4:	e015      	b.n	8013ae2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	7afa      	ldrb	r2, [r7, #11]
 8013aba:	4611      	mov	r1, r2
 8013abc:	4618      	mov	r0, r3
 8013abe:	f001 f9c7 	bl	8014e50 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8013ac2:	6178      	str	r0, [r7, #20]

        if(!p)
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d101      	bne.n	8013ace <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8013aca:	23d6      	movs	r3, #214	; 0xd6
 8013acc:	e009      	b.n	8013ae2 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	7afa      	ldrb	r2, [r7, #11]
 8013ad2:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	7aba      	ldrb	r2, [r7, #10]
 8013ade:	715a      	strb	r2, [r3, #5]

        return 0;
 8013ae0:	2300      	movs	r3, #0
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3718      	adds	r7, #24
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}

08013aea <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8013aea:	b580      	push	{r7, lr}
 8013aec:	b086      	sub	sp, #24
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	60f8      	str	r0, [r7, #12]
 8013af2:	607b      	str	r3, [r7, #4]
 8013af4:	460b      	mov	r3, r1
 8013af6:	72fb      	strb	r3, [r7, #11]
 8013af8:	4613      	mov	r3, r2
 8013afa:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	7afa      	ldrb	r2, [r7, #11]
 8013b00:	4611      	mov	r1, r2
 8013b02:	4618      	mov	r0, r3
 8013b04:	f001 f9a4 	bl	8014e50 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8013b08:	6178      	str	r0, [r7, #20]

        if(!p)
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d101      	bne.n	8013b14 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8013b10:	23d6      	movs	r3, #214	; 0xd6
 8013b12:	e04e      	b.n	8013bb2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d101      	bne.n	8013b20 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8013b1c:	23d7      	movs	r3, #215	; 0xd7
 8013b1e:	e048      	b.n	8013bb2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8013b20:	7aba      	ldrb	r2, [r7, #10]
 8013b22:	7afb      	ldrb	r3, [r7, #11]
 8013b24:	4619      	mov	r1, r3
 8013b26:	68f8      	ldr	r0, [r7, #12]
 8013b28:	f7ff ff82 	bl	8013a30 <_ZN3USB14getEpInfoEntryEhh>
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d101      	bne.n	8013b3e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8013b3a:	23db      	movs	r3, #219	; 0xdb
 8013b3c:	e039      	b.n	8013bb2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	789b      	ldrb	r3, [r3, #2]
 8013b44:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8013b48:	b2db      	uxtb	r3, r3
 8013b4a:	2b0f      	cmp	r3, #15
 8013b4c:	bf28      	it	cs
 8013b4e:	230f      	movcs	r3, #15
 8013b50:	b2db      	uxtb	r3, r3
 8013b52:	461a      	mov	r2, r3
 8013b54:	2301      	movs	r3, #1
 8013b56:	4093      	lsls	r3, r2
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	6a3b      	ldr	r3, [r7, #32]
 8013b5c:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8013b5e:	6a3b      	ldr	r3, [r7, #32]
 8013b60:	881b      	ldrh	r3, [r3, #0]
 8013b62:	3b01      	subs	r3, #1
 8013b64:	b29a      	uxth	r2, r3
 8013b66:	6a3b      	ldr	r3, [r7, #32]
 8013b68:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8013b6a:	7afb      	ldrb	r3, [r7, #11]
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	21e0      	movs	r1, #224	; 0xe0
 8013b70:	68f8      	ldr	r0, [r7, #12]
 8013b72:	f7ee fcb3 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8013b76:	21d8      	movs	r1, #216	; 0xd8
 8013b78:	68f8      	ldr	r0, [r7, #12]
 8013b7a:	f7ee fd01 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	799b      	ldrb	r3, [r3, #6]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d009      	beq.n	8013b9e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8013b90:	7cfb      	ldrb	r3, [r7, #19]
 8013b92:	4313      	orrs	r3, r2
 8013b94:	b2db      	uxtb	r3, r3
 8013b96:	f043 0302 	orr.w	r3, r3, #2
 8013b9a:	b2db      	uxtb	r3, r3
 8013b9c:	e003      	b.n	8013ba6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8013b9e:	7cfb      	ldrb	r3, [r7, #19]
 8013ba0:	f023 0306 	bic.w	r3, r3, #6
 8013ba4:	b2db      	uxtb	r3, r3
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	21d8      	movs	r1, #216	; 0xd8
 8013baa:	68f8      	ldr	r0, [r7, #12]
 8013bac:	f7ee fc96 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8013bb0:	2300      	movs	r3, #0
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	3718      	adds	r7, #24
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd80      	pop	{r7, pc}

08013bba <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8013bba:	b590      	push	{r4, r7, lr}
 8013bbc:	b08b      	sub	sp, #44	; 0x2c
 8013bbe:	af02      	add	r7, sp, #8
 8013bc0:	6078      	str	r0, [r7, #4]
 8013bc2:	4608      	mov	r0, r1
 8013bc4:	4611      	mov	r1, r2
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	4603      	mov	r3, r0
 8013bca:	70fb      	strb	r3, [r7, #3]
 8013bcc:	460b      	mov	r3, r1
 8013bce:	70bb      	strb	r3, [r7, #2]
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8013be0:	f107 000c 	add.w	r0, r7, #12
 8013be4:	78ba      	ldrb	r2, [r7, #2]
 8013be6:	78f9      	ldrb	r1, [r7, #3]
 8013be8:	f107 030a 	add.w	r3, r7, #10
 8013bec:	9300      	str	r3, [sp, #0]
 8013bee:	4603      	mov	r3, r0
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f7ff ff7a 	bl	8013aea <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 8013bfa:	7ffb      	ldrb	r3, [r7, #31]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d001      	beq.n	8013c04 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8013c00:	7ffb      	ldrb	r3, [r7, #31]
 8013c02:	e0ae      	b.n	8013d62 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8013c04:	787b      	ldrb	r3, [r7, #1]
 8013c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	bfcc      	ite	gt
 8013c0e:	2301      	movgt	r3, #1
 8013c10:	2300      	movle	r3, #0
 8013c12:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8013c14:	787b      	ldrb	r3, [r7, #1]
 8013c16:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 8013c18:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8013c1c:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8013c1e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013c22:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8013c24:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013c28:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 8013c2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013c2c:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8013c2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013c32:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8013c34:	f107 0310 	add.w	r3, r7, #16
 8013c38:	2208      	movs	r2, #8
 8013c3a:	2120      	movs	r1, #32
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f001 f92d 	bl	8014e9c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8013c42:	897b      	ldrh	r3, [r7, #10]
 8013c44:	78ba      	ldrb	r2, [r7, #2]
 8013c46:	2110      	movs	r1, #16
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f000 fb14 	bl	8014276 <_ZN3USB11dispatchPktEhht>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8013c52:	7ffb      	ldrb	r3, [r7, #31]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d001      	beq.n	8013c5c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 8013c58:	7ffb      	ldrb	r3, [r7, #31]
 8013c5a:	e082      	b.n	8013d62 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8013c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d072      	beq.n	8013d48 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8013c62:	7efb      	ldrb	r3, [r7, #27]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d057      	beq.n	8013d18 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 8013c68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013c6c:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8013c6e:	68fa      	ldr	r2, [r7, #12]
 8013c70:	7893      	ldrb	r3, [r2, #2]
 8013c72:	f043 0302 	orr.w	r3, r3, #2
 8013c76:	7093      	strb	r3, [r2, #2]

                        while(left) {
 8013c78:	8bbb      	ldrh	r3, [r7, #28]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d05f      	beq.n	8013d3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8013c7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013c82:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8013c84:	68f9      	ldr	r1, [r7, #12]
 8013c86:	897a      	ldrh	r2, [r7, #10]
 8013c88:	f107 0008 	add.w	r0, r7, #8
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	9301      	str	r3, [sp, #4]
 8013c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c92:	9300      	str	r3, [sp, #0]
 8013c94:	4603      	mov	r3, r0
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f000 f8c8 	bl	8013e2c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8013ca0:	7ffb      	ldrb	r3, [r7, #31]
 8013ca2:	2b06      	cmp	r3, #6
 8013ca4:	d114      	bne.n	8013cd0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8013ca6:	21f8      	movs	r1, #248	; 0xf8
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	f7ee fc69 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	f003 0320 	and.w	r3, r3, #32
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	bf0c      	ite	eq
 8013cb8:	2301      	moveq	r3, #1
 8013cba:	2300      	movne	r3, #0
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	68fa      	ldr	r2, [r7, #12]
 8013cc0:	f003 0301 	and.w	r3, r3, #1
 8013cc4:	b2d9      	uxtb	r1, r3
 8013cc6:	7893      	ldrb	r3, [r2, #2]
 8013cc8:	f361 0341 	bfi	r3, r1, #1, #1
 8013ccc:	7093      	strb	r3, [r2, #2]
 8013cce:	e7d3      	b.n	8013c78 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8013cd0:	7ffb      	ldrb	r3, [r7, #31]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d001      	beq.n	8013cda <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 8013cd6:	7ffb      	ldrb	r3, [r7, #31]
 8013cd8:	e043      	b.n	8013d62 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 8013cda:	7ffb      	ldrb	r3, [r7, #31]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d111      	bne.n	8013d04 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8013ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d00e      	beq.n	8013d04 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 8013ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	681c      	ldr	r4, [r3, #0]
 8013cec:	8939      	ldrh	r1, [r7, #8]
 8013cee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013cf2:	8bbb      	ldrh	r3, [r7, #28]
 8013cf4:	1ad3      	subs	r3, r2, r3
 8013cf6:	b29b      	uxth	r3, r3
 8013cf8:	833b      	strh	r3, [r7, #24]
 8013cfa:	f107 0318 	add.w	r3, r7, #24
 8013cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013d02:	47a0      	blx	r4

                                left -= read;
 8013d04:	893b      	ldrh	r3, [r7, #8]
 8013d06:	8bba      	ldrh	r2, [r7, #28]
 8013d08:	1ad3      	subs	r3, r2, r3
 8013d0a:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8013d0c:	893b      	ldrh	r3, [r7, #8]
 8013d0e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d812      	bhi.n	8013d3c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 8013d16:	e7af      	b.n	8013c78 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 8013d18:	68fa      	ldr	r2, [r7, #12]
 8013d1a:	7893      	ldrb	r3, [r2, #2]
 8013d1c:	f043 0301 	orr.w	r3, r3, #1
 8013d20:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8013d22:	68f9      	ldr	r1, [r7, #12]
 8013d24:	897a      	ldrh	r2, [r7, #10]
 8013d26:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 8013d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d2c:	9300      	str	r3, [sp, #0]
 8013d2e:	4603      	mov	r3, r0
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f000 f975 	bl	8014020 <_ZN3USB11OutTransferEP6EpInfottPh>
 8013d36:	4603      	mov	r3, r0
 8013d38:	77fb      	strb	r3, [r7, #31]
 8013d3a:	e000      	b.n	8013d3e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8013d3c:	bf00      	nop
                }
                if(rcode) //return error
 8013d3e:	7ffb      	ldrb	r3, [r7, #31]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d001      	beq.n	8013d48 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8013d44:	7ffb      	ldrb	r3, [r7, #31]
 8013d46:	e00c      	b.n	8013d62 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 8013d48:	7efb      	ldrb	r3, [r7, #27]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d001      	beq.n	8013d52 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8013d4e:	21a0      	movs	r1, #160	; 0xa0
 8013d50:	e000      	b.n	8013d54 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8013d52:	2180      	movs	r1, #128	; 0x80
 8013d54:	897b      	ldrh	r3, [r7, #10]
 8013d56:	78ba      	ldrb	r2, [r7, #2]
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f000 fa8c 	bl	8014276 <_ZN3USB11dispatchPktEhht>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	bf00      	nop
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3724      	adds	r7, #36	; 0x24
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd90      	pop	{r4, r7, pc}
	...

08013d6c <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b08a      	sub	sp, #40	; 0x28
 8013d70:	af02      	add	r7, sp, #8
 8013d72:	60f8      	str	r0, [r7, #12]
 8013d74:	607b      	str	r3, [r7, #4]
 8013d76:	460b      	mov	r3, r1
 8013d78:	72fb      	strb	r3, [r7, #11]
 8013d7a:	4613      	mov	r3, r2
 8013d7c:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 8013d82:	2300      	movs	r3, #0
 8013d84:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8013d86:	f107 0018 	add.w	r0, r7, #24
 8013d8a:	7aba      	ldrb	r2, [r7, #10]
 8013d8c:	7af9      	ldrb	r1, [r7, #11]
 8013d8e:	f107 0316 	add.w	r3, r7, #22
 8013d92:	9300      	str	r3, [sp, #0]
 8013d94:	4603      	mov	r3, r0
 8013d96:	68f8      	ldr	r0, [r7, #12]
 8013d98:	f7ff fea7 	bl	8013aea <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8013da0:	7ffb      	ldrb	r3, [r7, #31]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d028      	beq.n	8013df8 <_ZN3USB10inTransferEhhPtPhh+0x8c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8013da6:	2181      	movs	r1, #129	; 0x81
 8013da8:	481c      	ldr	r0, [pc, #112]	; (8013e1c <_ZN3USB10inTransferEhhPtPhh+0xb0>)
 8013daa:	f001 fdad 	bl	8015908 <_Z8E_NotifyPKci>
 8013dae:	7ffb      	ldrb	r3, [r7, #31]
 8013db0:	2181      	movs	r1, #129	; 0x81
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fd fe07 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
 8013db8:	2181      	movs	r1, #129	; 0x81
 8013dba:	4819      	ldr	r0, [pc, #100]	; (8013e20 <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 8013dbc:	f001 fda4 	bl	8015908 <_Z8E_NotifyPKci>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8013dc0:	2181      	movs	r1, #129	; 0x81
 8013dc2:	4818      	ldr	r0, [pc, #96]	; (8013e24 <_ZN3USB10inTransferEhhPtPhh+0xb8>)
 8013dc4:	f001 fda0 	bl	8015908 <_Z8E_NotifyPKci>
 8013dc8:	7afb      	ldrb	r3, [r7, #11]
 8013dca:	2181      	movs	r1, #129	; 0x81
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7fd fdfa 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
 8013dd2:	2181      	movs	r1, #129	; 0x81
 8013dd4:	4812      	ldr	r0, [pc, #72]	; (8013e20 <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 8013dd6:	f001 fd97 	bl	8015908 <_Z8E_NotifyPKci>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 8013dda:	2181      	movs	r1, #129	; 0x81
 8013ddc:	4812      	ldr	r0, [pc, #72]	; (8013e28 <_ZN3USB10inTransferEhhPtPhh+0xbc>)
 8013dde:	f001 fd93 	bl	8015908 <_Z8E_NotifyPKci>
 8013de2:	7abb      	ldrb	r3, [r7, #10]
 8013de4:	2181      	movs	r1, #129	; 0x81
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7fd fded 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
 8013dec:	2181      	movs	r1, #129	; 0x81
 8013dee:	480c      	ldr	r0, [pc, #48]	; (8013e20 <_ZN3USB10inTransferEhhPtPhh+0xb4>)
 8013df0:	f001 fd8a 	bl	8015908 <_Z8E_NotifyPKci>
                return rcode;
 8013df4:	7ffb      	ldrb	r3, [r7, #31]
 8013df6:	e00c      	b.n	8013e12 <_ZN3USB10inTransferEhhPtPhh+0xa6>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 8013df8:	69b9      	ldr	r1, [r7, #24]
 8013dfa:	8afa      	ldrh	r2, [r7, #22]
 8013dfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013e00:	9301      	str	r3, [sp, #4]
 8013e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e04:	9300      	str	r3, [sp, #0]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	68f8      	ldr	r0, [r7, #12]
 8013e0a:	f000 f80f 	bl	8013e2c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	bf00      	nop
}
 8013e12:	4618      	mov	r0, r3
 8013e14:	3720      	adds	r7, #32
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}
 8013e1a:	bf00      	nop
 8013e1c:	08016c10 	.word	0x08016c10
 8013e20:	08016c38 	.word	0x08016c38
 8013e24:	08016c3c 	.word	0x08016c3c
 8013e28:	08016c60 	.word	0x08016c60

08013e2c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b086      	sub	sp, #24
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	603b      	str	r3, [r7, #0]
 8013e38:	4613      	mov	r3, r2
 8013e3a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	881b      	ldrh	r3, [r3, #0]
 8013e44:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	785b      	ldrb	r3, [r3, #1]
 8013e4a:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	789b      	ldrb	r3, [r3, #2]
 8013e56:	f003 0302 	and.w	r3, r3, #2
 8013e5a:	b2db      	uxtb	r3, r3
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d001      	beq.n	8013e64 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8013e60:	2320      	movs	r3, #32
 8013e62:	e000      	b.n	8013e66 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8013e64:	2310      	movs	r3, #16
 8013e66:	461a      	mov	r2, r3
 8013e68:	21e8      	movs	r1, #232	; 0xe8
 8013e6a:	68f8      	ldr	r0, [r7, #12]
 8013e6c:	f7ee fb36 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	781a      	ldrb	r2, [r3, #0]
 8013e74:	88fb      	ldrh	r3, [r7, #6]
 8013e76:	2100      	movs	r1, #0
 8013e78:	68f8      	ldr	r0, [r7, #12]
 8013e7a:	f000 f9fc 	bl	8014276 <_ZN3USB11dispatchPktEhht>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8013e82:	7dfb      	ldrb	r3, [r7, #23]
 8013e84:	2b06      	cmp	r3, #6
 8013e86:	d123      	bne.n	8013ed0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8013e88:	21f8      	movs	r1, #248	; 0xf8
 8013e8a:	68f8      	ldr	r0, [r7, #12]
 8013e8c:	f7ee fb78 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013e90:	4603      	mov	r3, r0
 8013e92:	f003 0310 	and.w	r3, r3, #16
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	bf0c      	ite	eq
 8013e9a:	2301      	moveq	r3, #1
 8013e9c:	2300      	movne	r3, #0
 8013e9e:	b2db      	uxtb	r3, r3
 8013ea0:	f003 0301 	and.w	r3, r3, #1
 8013ea4:	b2d9      	uxtb	r1, r3
 8013ea6:	68ba      	ldr	r2, [r7, #8]
 8013ea8:	7893      	ldrb	r3, [r2, #2]
 8013eaa:	f361 0341 	bfi	r3, r1, #1, #1
 8013eae:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	789b      	ldrb	r3, [r3, #2]
 8013eb4:	f003 0302 	and.w	r3, r3, #2
 8013eb8:	b2db      	uxtb	r3, r3
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d001      	beq.n	8013ec2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 8013ebe:	2320      	movs	r3, #32
 8013ec0:	e000      	b.n	8013ec4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 8013ec2:	2310      	movs	r3, #16
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	21e8      	movs	r1, #232	; 0xe8
 8013ec8:	68f8      	ldr	r0, [r7, #12]
 8013eca:	f7ee fb07 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 8013ece:	e06e      	b.n	8013fae <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 8013ed0:	7dfb      	ldrb	r3, [r7, #23]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d16c      	bne.n	8013fb0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8013ed6:	21c8      	movs	r1, #200	; 0xc8
 8013ed8:	68f8      	ldr	r0, [r7, #12]
 8013eda:	f7ee fb51 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	f003 0304 	and.w	r3, r3, #4
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	bf0c      	ite	eq
 8013ee8:	2301      	moveq	r3, #1
 8013eea:	2300      	movne	r3, #0
 8013eec:	b2db      	uxtb	r3, r3
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d002      	beq.n	8013ef8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8013ef2:	23f0      	movs	r3, #240	; 0xf0
 8013ef4:	75fb      	strb	r3, [r7, #23]
                        break;
 8013ef6:	e05c      	b.n	8013fb2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8013ef8:	2130      	movs	r1, #48	; 0x30
 8013efa:	68f8      	ldr	r0, [r7, #12]
 8013efc:	f7ee fb40 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013f00:	4603      	mov	r3, r0
 8013f02:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8013f04:	7dba      	ldrb	r2, [r7, #22]
 8013f06:	8a7b      	ldrh	r3, [r7, #18]
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	dd01      	ble.n	8013f10 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 8013f0c:	8a7b      	ldrh	r3, [r7, #18]
 8013f0e:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f16:	b29b      	uxth	r3, r3
 8013f18:	8a7a      	ldrh	r2, [r7, #18]
 8013f1a:	1ad3      	subs	r3, r2, r3
 8013f1c:	b29b      	uxth	r3, r3
 8013f1e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8013f20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	da01      	bge.n	8013f2c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 8013f2c:	7dba      	ldrb	r2, [r7, #22]
 8013f2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013f32:	4293      	cmp	r3, r2
 8013f34:	bfa8      	it	ge
 8013f36:	4613      	movge	r3, r2
 8013f38:	b2da      	uxtb	r2, r3
 8013f3a:	6a3b      	ldr	r3, [r7, #32]
 8013f3c:	2108      	movs	r1, #8
 8013f3e:	68f8      	ldr	r0, [r7, #12]
 8013f40:	f000 ffda 	bl	8014ef8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8013f44:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8013f46:	2204      	movs	r2, #4
 8013f48:	21c8      	movs	r1, #200	; 0xc8
 8013f4a:	68f8      	ldr	r0, [r7, #12]
 8013f4c:	f7ee fac6 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	881a      	ldrh	r2, [r3, #0]
 8013f54:	7dbb      	ldrb	r3, [r7, #22]
 8013f56:	b29b      	uxth	r3, r3
 8013f58:	4413      	add	r3, r2
 8013f5a:	b29a      	uxth	r2, r3
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8013f60:	7dba      	ldrb	r2, [r7, #22]
 8013f62:	7c7b      	ldrb	r3, [r7, #17]
 8013f64:	429a      	cmp	r2, r3
 8013f66:	d304      	bcc.n	8013f72 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	881b      	ldrh	r3, [r3, #0]
 8013f6c:	8a7a      	ldrh	r2, [r7, #18]
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d813      	bhi.n	8013f9a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8013f72:	21f8      	movs	r1, #248	; 0xf8
 8013f74:	68f8      	ldr	r0, [r7, #12]
 8013f76:	f7ee fb03 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	f003 0310 	and.w	r3, r3, #16
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d001      	beq.n	8013f88 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8013f84:	2101      	movs	r1, #1
 8013f86:	e000      	b.n	8013f8a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8013f88:	2100      	movs	r1, #0
 8013f8a:	68ba      	ldr	r2, [r7, #8]
 8013f8c:	7893      	ldrb	r3, [r2, #2]
 8013f8e:	f361 0341 	bfi	r3, r1, #1, #1
 8013f92:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8013f94:	2300      	movs	r3, #0
 8013f96:	75fb      	strb	r3, [r7, #23]
                        break;
 8013f98:	e00b      	b.n	8013fb2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 8013f9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	f43f af66 	beq.w	8013e70 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8013fa4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7ee fe17 	bl	8002bdc <HAL_Delay>
        } //while( 1 )
 8013fae:	e75f      	b.n	8013e70 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8013fb0:	bf00      	nop
        return ( rcode);
 8013fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3718      	adds	r7, #24
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}

08013fbc <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b088      	sub	sp, #32
 8013fc0:	af02      	add	r7, sp, #8
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	4608      	mov	r0, r1
 8013fc6:	4611      	mov	r1, r2
 8013fc8:	461a      	mov	r2, r3
 8013fca:	4603      	mov	r3, r0
 8013fcc:	70fb      	strb	r3, [r7, #3]
 8013fce:	460b      	mov	r3, r1
 8013fd0:	70bb      	strb	r3, [r7, #2]
 8013fd2:	4613      	mov	r3, r2
 8013fd4:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8013fde:	f107 0010 	add.w	r0, r7, #16
 8013fe2:	78ba      	ldrb	r2, [r7, #2]
 8013fe4:	78f9      	ldrb	r1, [r7, #3]
 8013fe6:	f107 030e 	add.w	r3, r7, #14
 8013fea:	9300      	str	r3, [sp, #0]
 8013fec:	4603      	mov	r3, r0
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f7ff fd7b 	bl	8013aea <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8013ff8:	7dfb      	ldrb	r3, [r7, #23]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d001      	beq.n	8014002 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 8013ffe:	7dfb      	ldrb	r3, [r7, #23]
 8014000:	e00a      	b.n	8014018 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8014002:	6939      	ldr	r1, [r7, #16]
 8014004:	89fa      	ldrh	r2, [r7, #14]
 8014006:	8838      	ldrh	r0, [r7, #0]
 8014008:	6a3b      	ldr	r3, [r7, #32]
 801400a:	9300      	str	r3, [sp, #0]
 801400c:	4603      	mov	r3, r0
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f000 f806 	bl	8014020 <_ZN3USB11OutTransferEP6EpInfottPh>
 8014014:	4603      	mov	r3, r0
 8014016:	bf00      	nop
}
 8014018:	4618      	mov	r0, r3
 801401a:	3718      	adds	r7, #24
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8014020:	b580      	push	{r7, lr}
 8014022:	b08a      	sub	sp, #40	; 0x28
 8014024:	af00      	add	r7, sp, #0
 8014026:	60f8      	str	r0, [r7, #12]
 8014028:	60b9      	str	r1, [r7, #8]
 801402a:	4611      	mov	r1, r2
 801402c:	461a      	mov	r2, r3
 801402e:	460b      	mov	r3, r1
 8014030:	80fb      	strh	r3, [r7, #6]
 8014032:	4613      	mov	r3, r2
 8014034:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8014036:	2300      	movs	r3, #0
 8014038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 801403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801403e:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8014040:	88bb      	ldrh	r3, [r7, #4]
 8014042:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	785b      	ldrb	r3, [r3, #1]
 8014048:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 801404a:	7efb      	ldrb	r3, [r7, #27]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d002      	beq.n	8014056 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 8014050:	7efb      	ldrb	r3, [r7, #27]
 8014052:	2b40      	cmp	r3, #64	; 0x40
 8014054:	d901      	bls.n	801405a <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8014056:	23da      	movs	r3, #218	; 0xda
 8014058:	e109      	b.n	801426e <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 801405a:	f7ee fdb3 	bl	8002bc4 <HAL_GetTick>
 801405e:	4603      	mov	r3, r0
 8014060:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8014064:	3308      	adds	r3, #8
 8014066:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	789b      	ldrb	r3, [r3, #2]
 801406c:	f003 0301 	and.w	r3, r3, #1
 8014070:	b2db      	uxtb	r3, r3
 8014072:	2b00      	cmp	r3, #0
 8014074:	d001      	beq.n	801407a <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 8014076:	2380      	movs	r3, #128	; 0x80
 8014078:	e000      	b.n	801407c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 801407a:	2340      	movs	r3, #64	; 0x40
 801407c:	461a      	mov	r2, r3
 801407e:	21e8      	movs	r1, #232	; 0xe8
 8014080:	68f8      	ldr	r0, [r7, #12]
 8014082:	f7ee fa2b 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 8014086:	8bbb      	ldrh	r3, [r7, #28]
 8014088:	2b00      	cmp	r3, #0
 801408a:	f000 80da 	beq.w	8014242 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 801408e:	2300      	movs	r3, #0
 8014090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 8014094:	2300      	movs	r3, #0
 8014096:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 8014098:	7efb      	ldrb	r3, [r7, #27]
 801409a:	b29b      	uxth	r3, r3
 801409c:	8bba      	ldrh	r2, [r7, #28]
 801409e:	4293      	cmp	r3, r2
 80140a0:	bf28      	it	cs
 80140a2:	4613      	movcs	r3, r2
 80140a4:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 80140a6:	8a7b      	ldrh	r3, [r7, #18]
 80140a8:	b2da      	uxtb	r2, r3
 80140aa:	6a3b      	ldr	r3, [r7, #32]
 80140ac:	2110      	movs	r1, #16
 80140ae:	68f8      	ldr	r0, [r7, #12]
 80140b0:	f000 fef4 	bl	8014e9c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 80140b4:	8a7b      	ldrh	r3, [r7, #18]
 80140b6:	b2db      	uxtb	r3, r3
 80140b8:	461a      	mov	r2, r3
 80140ba:	2138      	movs	r1, #56	; 0x38
 80140bc:	68f8      	ldr	r0, [r7, #12]
 80140be:	f7ee fa0d 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80140c2:	68bb      	ldr	r3, [r7, #8]
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	f043 0320 	orr.w	r3, r3, #32
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	461a      	mov	r2, r3
 80140ce:	21f0      	movs	r1, #240	; 0xf0
 80140d0:	68f8      	ldr	r0, [r7, #12]
 80140d2:	f7ee fa03 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 80140d6:	21c8      	movs	r1, #200	; 0xc8
 80140d8:	68f8      	ldr	r0, [r7, #12]
 80140da:	f7ee fa51 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80140de:	4603      	mov	r3, r0
 80140e0:	b25b      	sxtb	r3, r3
 80140e2:	43db      	mvns	r3, r3
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	09db      	lsrs	r3, r3, #7
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d000      	beq.n	80140f0 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 80140ee:	e7f2      	b.n	80140d6 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 80140f0:	2280      	movs	r2, #128	; 0x80
 80140f2:	21c8      	movs	r1, #200	; 0xc8
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f7ee f9f1 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 80140fa:	21f8      	movs	r1, #248	; 0xf8
 80140fc:	68f8      	ldr	r0, [r7, #12]
 80140fe:	f7ee fa3f 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8014102:	4603      	mov	r3, r0
 8014104:	f003 030f 	and.w	r3, r3, #15
 8014108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801410c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014110:	2b00      	cmp	r3, #0
 8014112:	d008      	beq.n	8014126 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8014114:	f7ee fd56 	bl	8002bc4 <HAL_GetTick>
 8014118:	4602      	mov	r2, r0
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	1ad3      	subs	r3, r2, r3
 801411e:	2b00      	cmp	r3, #0
 8014120:	da01      	bge.n	8014126 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8014122:	2301      	movs	r3, #1
 8014124:	e000      	b.n	8014128 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8014126:	2300      	movs	r3, #0
 8014128:	2b00      	cmp	r3, #0
 801412a:	f000 8081 	beq.w	8014230 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801412e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014132:	2b0e      	cmp	r3, #14
 8014134:	d012      	beq.n	801415c <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8014136:	2b0e      	cmp	r3, #14
 8014138:	f300 8085 	bgt.w	8014246 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 801413c:	2b04      	cmp	r3, #4
 801413e:	d002      	beq.n	8014146 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 8014140:	2b06      	cmp	r3, #6
 8014142:	d015      	beq.n	8014170 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8014144:	e07f      	b.n	8014246 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8014146:	8bfb      	ldrh	r3, [r7, #30]
 8014148:	3301      	adds	r3, #1
 801414a:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 801414c:	88fb      	ldrh	r3, [r7, #6]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d032      	beq.n	80141b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 8014152:	8bfa      	ldrh	r2, [r7, #30]
 8014154:	88fb      	ldrh	r3, [r7, #6]
 8014156:	429a      	cmp	r2, r3
 8014158:	d12e      	bne.n	80141b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 801415a:	e075      	b.n	8014248 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 801415c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014160:	3301      	adds	r3, #1
 8014162:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8014166:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801416a:	2b03      	cmp	r3, #3
 801416c:	d126      	bne.n	80141bc <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 801416e:	e06b      	b.n	8014248 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8014170:	21f8      	movs	r1, #248	; 0xf8
 8014172:	68f8      	ldr	r0, [r7, #12]
 8014174:	f7ee fa04 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8014178:	4603      	mov	r3, r0
 801417a:	f003 0320 	and.w	r3, r3, #32
 801417e:	2b00      	cmp	r3, #0
 8014180:	bf0c      	ite	eq
 8014182:	2301      	moveq	r3, #1
 8014184:	2300      	movne	r3, #0
 8014186:	b2db      	uxtb	r3, r3
 8014188:	f003 0301 	and.w	r3, r3, #1
 801418c:	b2d9      	uxtb	r1, r3
 801418e:	68ba      	ldr	r2, [r7, #8]
 8014190:	7893      	ldrb	r3, [r2, #2]
 8014192:	f361 0300 	bfi	r3, r1, #0, #1
 8014196:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	789b      	ldrb	r3, [r3, #2]
 801419c:	f003 0301 	and.w	r3, r3, #1
 80141a0:	b2db      	uxtb	r3, r3
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d001      	beq.n	80141aa <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 80141a6:	2380      	movs	r3, #128	; 0x80
 80141a8:	e000      	b.n	80141ac <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 80141aa:	2340      	movs	r3, #64	; 0x40
 80141ac:	461a      	mov	r2, r3
 80141ae:	21e8      	movs	r1, #232	; 0xe8
 80141b0:	68f8      	ldr	r0, [r7, #12]
 80141b2:	f7ee f993 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 80141b6:	e002      	b.n	80141be <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80141b8:	bf00      	nop
 80141ba:	e000      	b.n	80141be <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80141bc:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 80141be:	2200      	movs	r2, #0
 80141c0:	2138      	movs	r1, #56	; 0x38
 80141c2:	68f8      	ldr	r0, [r7, #12]
 80141c4:	f7ee f98a 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 80141c8:	6a3b      	ldr	r3, [r7, #32]
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	461a      	mov	r2, r3
 80141ce:	2110      	movs	r1, #16
 80141d0:	68f8      	ldr	r0, [r7, #12]
 80141d2:	f7ee f983 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 80141d6:	8a7b      	ldrh	r3, [r7, #18]
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	461a      	mov	r2, r3
 80141dc:	2138      	movs	r1, #56	; 0x38
 80141de:	68f8      	ldr	r0, [r7, #12]
 80141e0:	f7ee f97c 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	781b      	ldrb	r3, [r3, #0]
 80141e8:	f043 0320 	orr.w	r3, r3, #32
 80141ec:	b2db      	uxtb	r3, r3
 80141ee:	461a      	mov	r2, r3
 80141f0:	21f0      	movs	r1, #240	; 0xf0
 80141f2:	68f8      	ldr	r0, [r7, #12]
 80141f4:	f7ee f972 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 80141f8:	21c8      	movs	r1, #200	; 0xc8
 80141fa:	68f8      	ldr	r0, [r7, #12]
 80141fc:	f7ee f9c0 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8014200:	4603      	mov	r3, r0
 8014202:	b25b      	sxtb	r3, r3
 8014204:	43db      	mvns	r3, r3
 8014206:	b2db      	uxtb	r3, r3
 8014208:	09db      	lsrs	r3, r3, #7
 801420a:	b2db      	uxtb	r3, r3
 801420c:	2b00      	cmp	r3, #0
 801420e:	d000      	beq.n	8014212 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8014210:	e7f2      	b.n	80141f8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8014212:	2280      	movs	r2, #128	; 0x80
 8014214:	21c8      	movs	r1, #200	; 0xc8
 8014216:	68f8      	ldr	r0, [r7, #12]
 8014218:	f7ee f960 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 801421c:	21f8      	movs	r1, #248	; 0xf8
 801421e:	68f8      	ldr	r0, [r7, #12]
 8014220:	f7ee f9ae 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8014224:	4603      	mov	r3, r0
 8014226:	f003 030f 	and.w	r3, r3, #15
 801422a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801422e:	e76d      	b.n	801410c <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 8014230:	8bba      	ldrh	r2, [r7, #28]
 8014232:	8a7b      	ldrh	r3, [r7, #18]
 8014234:	1ad3      	subs	r3, r2, r3
 8014236:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8014238:	8a7b      	ldrh	r3, [r7, #18]
 801423a:	6a3a      	ldr	r2, [r7, #32]
 801423c:	4413      	add	r3, r2
 801423e:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 8014240:	e721      	b.n	8014086 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 8014242:	bf00      	nop
 8014244:	e000      	b.n	8014248 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8014246:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8014248:	21f8      	movs	r1, #248	; 0xf8
 801424a:	68f8      	ldr	r0, [r7, #12]
 801424c:	f7ee f998 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8014250:	4603      	mov	r3, r0
 8014252:	f003 0320 	and.w	r3, r3, #32
 8014256:	2b00      	cmp	r3, #0
 8014258:	d001      	beq.n	801425e <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 801425a:	2101      	movs	r1, #1
 801425c:	e000      	b.n	8014260 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 801425e:	2100      	movs	r1, #0
 8014260:	68ba      	ldr	r2, [r7, #8]
 8014262:	7893      	ldrb	r3, [r2, #2]
 8014264:	f361 0300 	bfi	r3, r1, #0, #1
 8014268:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 801426a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801426e:	4618      	mov	r0, r3
 8014270:	3728      	adds	r7, #40	; 0x28
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}

08014276 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 8014276:	b580      	push	{r7, lr}
 8014278:	b086      	sub	sp, #24
 801427a:	af00      	add	r7, sp, #0
 801427c:	6078      	str	r0, [r7, #4]
 801427e:	4608      	mov	r0, r1
 8014280:	4611      	mov	r1, r2
 8014282:	461a      	mov	r2, r3
 8014284:	4603      	mov	r3, r0
 8014286:	70fb      	strb	r3, [r7, #3]
 8014288:	460b      	mov	r3, r1
 801428a:	70bb      	strb	r3, [r7, #2]
 801428c:	4613      	mov	r3, r2
 801428e:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8014290:	f7ee fc98 	bl	8002bc4 <HAL_GetTick>
 8014294:	4603      	mov	r3, r0
 8014296:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801429a:	3308      	adds	r3, #8
 801429c:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 801429e:	2300      	movs	r3, #0
 80142a0:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 80142a2:	2300      	movs	r3, #0
 80142a4:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 80142a6:	2300      	movs	r3, #0
 80142a8:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80142aa:	f7ee fc8b 	bl	8002bc4 <HAL_GetTick>
 80142ae:	4602      	mov	r2, r0
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	1ad3      	subs	r3, r2, r3
 80142b4:	0fdb      	lsrs	r3, r3, #31
 80142b6:	b2db      	uxtb	r3, r3
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d04c      	beq.n	8014356 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 80142bc:	78fa      	ldrb	r2, [r7, #3]
 80142be:	78bb      	ldrb	r3, [r7, #2]
 80142c0:	4313      	orrs	r3, r2
 80142c2:	b2db      	uxtb	r3, r3
 80142c4:	461a      	mov	r2, r3
 80142c6:	21f0      	movs	r1, #240	; 0xf0
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f7ee f907 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 80142ce:	23ff      	movs	r3, #255	; 0xff
 80142d0:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 80142d2:	f7ee fc77 	bl	8002bc4 <HAL_GetTick>
 80142d6:	4602      	mov	r2, r0
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	1ad3      	subs	r3, r2, r3
 80142dc:	0fdb      	lsrs	r3, r3, #31
 80142de:	b2db      	uxtb	r3, r3
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d010      	beq.n	8014306 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 80142e4:	21c8      	movs	r1, #200	; 0xc8
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f7ee f94a 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80142ec:	4603      	mov	r3, r0
 80142ee:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 80142f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	daec      	bge.n	80142d2 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 80142f8:	2280      	movs	r2, #128	; 0x80
 80142fa:	21c8      	movs	r1, #200	; 0xc8
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f7ee f8ed 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 8014302:	2300      	movs	r3, #0
 8014304:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 8014306:	21f8      	movs	r1, #248	; 0xf8
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f7ee f939 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801430e:	4603      	mov	r3, r0
 8014310:	f003 030f 	and.w	r3, r3, #15
 8014314:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8014316:	7dfb      	ldrb	r3, [r7, #23]
 8014318:	2b04      	cmp	r3, #4
 801431a:	d002      	beq.n	8014322 <_ZN3USB11dispatchPktEhht+0xac>
 801431c:	2b0e      	cmp	r3, #14
 801431e:	d00c      	beq.n	801433a <_ZN3USB11dispatchPktEhht+0xc4>
 8014320:	e013      	b.n	801434a <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8014322:	8abb      	ldrh	r3, [r7, #20]
 8014324:	3301      	adds	r3, #1
 8014326:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8014328:	883b      	ldrh	r3, [r7, #0]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d00f      	beq.n	801434e <_ZN3USB11dispatchPktEhht+0xd8>
 801432e:	8aba      	ldrh	r2, [r7, #20]
 8014330:	883b      	ldrh	r3, [r7, #0]
 8014332:	429a      	cmp	r2, r3
 8014334:	d10b      	bne.n	801434e <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8014336:	7dfb      	ldrb	r3, [r7, #23]
 8014338:	e00e      	b.n	8014358 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 801433a:	7dbb      	ldrb	r3, [r7, #22]
 801433c:	3301      	adds	r3, #1
 801433e:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 8014340:	7dbb      	ldrb	r3, [r7, #22]
 8014342:	2b03      	cmp	r3, #3
 8014344:	d105      	bne.n	8014352 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8014346:	7dfb      	ldrb	r3, [r7, #23]
 8014348:	e006      	b.n	8014358 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 801434a:	7dfb      	ldrb	r3, [r7, #23]
 801434c:	e004      	b.n	8014358 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 801434e:	bf00      	nop
 8014350:	e7ab      	b.n	80142aa <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 8014352:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8014354:	e7a9      	b.n	80142aa <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8014356:	7dfb      	ldrb	r3, [r7, #23]
}
 8014358:	4618      	mov	r0, r3
 801435a:	3718      	adds	r7, #24
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}

08014360 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b084      	sub	sp, #16
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8014368:	2300      	movs	r3, #0
 801436a:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f000 fdf1 	bl	8014f54 <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f000 fe06 	bl	8014f84 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 8014378:	4603      	mov	r3, r0
 801437a:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 801437c:	7b3b      	ldrb	r3, [r7, #12]
 801437e:	2b03      	cmp	r3, #3
 8014380:	d82e      	bhi.n	80143e0 <_ZN3USB4TaskEv+0x80>
 8014382:	a201      	add	r2, pc, #4	; (adr r2, 8014388 <_ZN3USB4TaskEv+0x28>)
 8014384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014388:	080143a5 	.word	0x080143a5
 801438c:	08014399 	.word	0x08014399
 8014390:	080143c1 	.word	0x080143c1
 8014394:	080143bd 	.word	0x080143bd
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 8014398:	4bbf      	ldr	r3, [pc, #764]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 801439a:	2213      	movs	r2, #19
 801439c:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 801439e:	2300      	movs	r3, #0
 80143a0:	73fb      	strb	r3, [r7, #15]
                        break;
 80143a2:	e01d      	b.n	80143e0 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 80143a4:	4bbc      	ldr	r3, [pc, #752]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143ac:	2b10      	cmp	r3, #16
 80143ae:	d002      	beq.n	80143b6 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 80143b0:	4bb9      	ldr	r3, [pc, #740]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 80143b2:	2211      	movs	r2, #17
 80143b4:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80143b6:	2300      	movs	r3, #0
 80143b8:	73fb      	strb	r3, [r7, #15]
                        break;
 80143ba:	e011      	b.n	80143e0 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 80143bc:	2301      	movs	r3, #1
 80143be:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 80143c0:	4bb5      	ldr	r3, [pc, #724]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 80143c2:	781b      	ldrb	r3, [r3, #0]
 80143c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143c8:	2b10      	cmp	r3, #16
 80143ca:	d108      	bne.n	80143de <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 80143cc:	f7ee fbfa 	bl	8002bc4 <HAL_GetTick>
 80143d0:	4603      	mov	r3, r0
 80143d2:	33c8      	adds	r3, #200	; 0xc8
 80143d4:	4ab1      	ldr	r2, [pc, #708]	; (801469c <_ZN3USB4TaskEv+0x33c>)
 80143d6:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 80143d8:	4baf      	ldr	r3, [pc, #700]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 80143da:	2220      	movs	r2, #32
 80143dc:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 80143de:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80143e0:	2300      	movs	r3, #0
 80143e2:	73bb      	strb	r3, [r7, #14]
 80143e4:	7bbb      	ldrb	r3, [r7, #14]
 80143e6:	2b0f      	cmp	r3, #15
 80143e8:	d81b      	bhi.n	8014422 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 80143ea:	7bba      	ldrb	r2, [r7, #14]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	321e      	adds	r2, #30
 80143f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d010      	beq.n	801441a <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 80143f8:	7bba      	ldrb	r2, [r7, #14]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	321e      	adds	r2, #30
 80143fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014402:	7bba      	ldrb	r2, [r7, #14]
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	321e      	adds	r2, #30
 8014408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	330c      	adds	r3, #12
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	4608      	mov	r0, r1
 8014414:	4798      	blx	r3
 8014416:	4603      	mov	r3, r0
 8014418:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801441a:	7bbb      	ldrb	r3, [r7, #14]
 801441c:	3301      	adds	r3, #1
 801441e:	73bb      	strb	r3, [r7, #14]
 8014420:	e7e0      	b.n	80143e4 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8014422:	4b9d      	ldr	r3, [pc, #628]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	2ba0      	cmp	r3, #160	; 0xa0
 8014428:	f000 8123 	beq.w	8014672 <_ZN3USB4TaskEv+0x312>
 801442c:	2ba0      	cmp	r3, #160	; 0xa0
 801442e:	f300 812f 	bgt.w	8014690 <_ZN3USB4TaskEv+0x330>
 8014432:	2b90      	cmp	r3, #144	; 0x90
 8014434:	f000 811f 	beq.w	8014676 <_ZN3USB4TaskEv+0x316>
 8014438:	2b90      	cmp	r3, #144	; 0x90
 801443a:	f300 8129 	bgt.w	8014690 <_ZN3USB4TaskEv+0x330>
 801443e:	2b80      	cmp	r3, #128	; 0x80
 8014440:	f000 80fe 	beq.w	8014640 <_ZN3USB4TaskEv+0x2e0>
 8014444:	2b80      	cmp	r3, #128	; 0x80
 8014446:	f300 8123 	bgt.w	8014690 <_ZN3USB4TaskEv+0x330>
 801444a:	2b51      	cmp	r3, #81	; 0x51
 801444c:	f000 80ea 	beq.w	8014624 <_ZN3USB4TaskEv+0x2c4>
 8014450:	2b51      	cmp	r3, #81	; 0x51
 8014452:	f300 811d 	bgt.w	8014690 <_ZN3USB4TaskEv+0x330>
 8014456:	2b40      	cmp	r3, #64	; 0x40
 8014458:	dc6a      	bgt.n	8014530 <_ZN3USB4TaskEv+0x1d0>
 801445a:	2b11      	cmp	r3, #17
 801445c:	f2c0 8118 	blt.w	8014690 <_ZN3USB4TaskEv+0x330>
 8014460:	3b11      	subs	r3, #17
 8014462:	2b2f      	cmp	r3, #47	; 0x2f
 8014464:	f200 8114 	bhi.w	8014690 <_ZN3USB4TaskEv+0x330>
 8014468:	a201      	add	r2, pc, #4	; (adr r2, 8014470 <_ZN3USB4TaskEv+0x110>)
 801446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801446e:	bf00      	nop
 8014470:	08014537 	.word	0x08014537
 8014474:	0801467b 	.word	0x0801467b
 8014478:	0801467b 	.word	0x0801467b
 801447c:	08014691 	.word	0x08014691
 8014480:	08014691 	.word	0x08014691
 8014484:	08014691 	.word	0x08014691
 8014488:	08014691 	.word	0x08014691
 801448c:	08014691 	.word	0x08014691
 8014490:	08014691 	.word	0x08014691
 8014494:	08014691 	.word	0x08014691
 8014498:	08014691 	.word	0x08014691
 801449c:	08014691 	.word	0x08014691
 80144a0:	08014691 	.word	0x08014691
 80144a4:	08014691 	.word	0x08014691
 80144a8:	08014691 	.word	0x08014691
 80144ac:	08014587 	.word	0x08014587
 80144b0:	08014691 	.word	0x08014691
 80144b4:	08014691 	.word	0x08014691
 80144b8:	08014691 	.word	0x08014691
 80144bc:	08014691 	.word	0x08014691
 80144c0:	08014691 	.word	0x08014691
 80144c4:	08014691 	.word	0x08014691
 80144c8:	08014691 	.word	0x08014691
 80144cc:	08014691 	.word	0x08014691
 80144d0:	08014691 	.word	0x08014691
 80144d4:	08014691 	.word	0x08014691
 80144d8:	08014691 	.word	0x08014691
 80144dc:	08014691 	.word	0x08014691
 80144e0:	08014691 	.word	0x08014691
 80144e4:	08014691 	.word	0x08014691
 80144e8:	08014691 	.word	0x08014691
 80144ec:	080145a3 	.word	0x080145a3
 80144f0:	08014691 	.word	0x08014691
 80144f4:	08014691 	.word	0x08014691
 80144f8:	08014691 	.word	0x08014691
 80144fc:	08014691 	.word	0x08014691
 8014500:	08014691 	.word	0x08014691
 8014504:	08014691 	.word	0x08014691
 8014508:	08014691 	.word	0x08014691
 801450c:	08014691 	.word	0x08014691
 8014510:	08014691 	.word	0x08014691
 8014514:	08014691 	.word	0x08014691
 8014518:	08014691 	.word	0x08014691
 801451c:	08014691 	.word	0x08014691
 8014520:	08014691 	.word	0x08014691
 8014524:	08014691 	.word	0x08014691
 8014528:	08014691 	.word	0x08014691
 801452c:	080145b5 	.word	0x080145b5
 8014530:	2b50      	cmp	r3, #80	; 0x50
 8014532:	d05f      	beq.n	80145f4 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8014534:	e0ac      	b.n	8014690 <_ZN3USB4TaskEv+0x330>
                        init();
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f7ff fa6c 	bl	8013a14 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801453c:	2300      	movs	r3, #0
 801453e:	737b      	strb	r3, [r7, #13]
 8014540:	7b7b      	ldrb	r3, [r7, #13]
 8014542:	2b0f      	cmp	r3, #15
 8014544:	d81b      	bhi.n	801457e <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8014546:	7b7a      	ldrb	r2, [r7, #13]
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	321e      	adds	r2, #30
 801454c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d010      	beq.n	8014576 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8014554:	7b7a      	ldrb	r2, [r7, #13]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	321e      	adds	r2, #30
 801455a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801455e:	7b7a      	ldrb	r2, [r7, #13]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	321e      	adds	r2, #30
 8014564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	3308      	adds	r3, #8
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	4608      	mov	r0, r1
 8014570:	4798      	blx	r3
 8014572:	4603      	mov	r3, r0
 8014574:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8014576:	7b7b      	ldrb	r3, [r7, #13]
 8014578:	3301      	adds	r3, #1
 801457a:	737b      	strb	r3, [r7, #13]
 801457c:	e7e0      	b.n	8014540 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 801457e:	4b46      	ldr	r3, [pc, #280]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 8014580:	2212      	movs	r2, #18
 8014582:	701a      	strb	r2, [r3, #0]
                        break;
 8014584:	e084      	b.n	8014690 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 8014586:	f7ee fb1d 	bl	8002bc4 <HAL_GetTick>
 801458a:	4602      	mov	r2, r0
 801458c:	4b43      	ldr	r3, [pc, #268]	; (801469c <_ZN3USB4TaskEv+0x33c>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	43db      	mvns	r3, r3
 8014594:	0fdb      	lsrs	r3, r3, #31
 8014596:	b2db      	uxtb	r3, r3
 8014598:	2b00      	cmp	r3, #0
 801459a:	d070      	beq.n	801467e <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 801459c:	4b3e      	ldr	r3, [pc, #248]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 801459e:	2230      	movs	r2, #48	; 0x30
 80145a0:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80145a2:	2201      	movs	r2, #1
 80145a4:	21e8      	movs	r1, #232	; 0xe8
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f7ed ff98 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 80145ac:	4b3a      	ldr	r3, [pc, #232]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 80145ae:	2240      	movs	r2, #64	; 0x40
 80145b0:	701a      	strb	r2, [r3, #0]
                        break;
 80145b2:	e06d      	b.n	8014690 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 80145b4:	21e8      	movs	r1, #232	; 0xe8
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f7ed ffe2 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80145bc:	4603      	mov	r3, r0
 80145be:	f003 0301 	and.w	r3, r3, #1
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	bf0c      	ite	eq
 80145c6:	2301      	moveq	r3, #1
 80145c8:	2300      	movne	r3, #0
 80145ca:	b2db      	uxtb	r3, r3
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d058      	beq.n	8014682 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 80145d0:	21d8      	movs	r1, #216	; 0xd8
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f7ed ffd4 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80145d8:	4603      	mov	r3, r0
 80145da:	f043 0308 	orr.w	r3, r3, #8
 80145de:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 80145e0:	7b3b      	ldrb	r3, [r7, #12]
 80145e2:	461a      	mov	r2, r3
 80145e4:	21d8      	movs	r1, #216	; 0xd8
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f7ed ff78 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 80145ec:	4b2a      	ldr	r3, [pc, #168]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 80145ee:	2250      	movs	r2, #80	; 0x50
 80145f0:	701a      	strb	r2, [r3, #0]
                        break;
 80145f2:	e046      	b.n	8014682 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 80145f4:	21c8      	movs	r1, #200	; 0xc8
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f7ed ffc2 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80145fc:	4603      	mov	r3, r0
 80145fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014602:	2b00      	cmp	r3, #0
 8014604:	bf14      	ite	ne
 8014606:	2301      	movne	r3, #1
 8014608:	2300      	moveq	r3, #0
 801460a:	b2db      	uxtb	r3, r3
 801460c:	2b00      	cmp	r3, #0
 801460e:	d03a      	beq.n	8014686 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 8014610:	4b21      	ldr	r3, [pc, #132]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 8014612:	2251      	movs	r2, #81	; 0x51
 8014614:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8014616:	f7ee fad5 	bl	8002bc4 <HAL_GetTick>
 801461a:	4603      	mov	r3, r0
 801461c:	3314      	adds	r3, #20
 801461e:	4a1f      	ldr	r2, [pc, #124]	; (801469c <_ZN3USB4TaskEv+0x33c>)
 8014620:	6013      	str	r3, [r2, #0]
                        break;
 8014622:	e030      	b.n	8014686 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8014624:	f7ee face 	bl	8002bc4 <HAL_GetTick>
 8014628:	4602      	mov	r2, r0
 801462a:	4b1c      	ldr	r3, [pc, #112]	; (801469c <_ZN3USB4TaskEv+0x33c>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	1ad3      	subs	r3, r2, r3
 8014630:	43db      	mvns	r3, r3
 8014632:	0fdb      	lsrs	r3, r3, #31
 8014634:	b2db      	uxtb	r3, r3
 8014636:	2b00      	cmp	r3, #0
 8014638:	d027      	beq.n	801468a <_ZN3USB4TaskEv+0x32a>
 801463a:	4b17      	ldr	r3, [pc, #92]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 801463c:	2280      	movs	r2, #128	; 0x80
 801463e:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 8014640:	7bfb      	ldrb	r3, [r7, #15]
 8014642:	2200      	movs	r2, #0
 8014644:	2100      	movs	r1, #0
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f000 f920 	bl	801488c <_ZN3USB11ConfiguringEhhb>
 801464c:	4603      	mov	r3, r0
 801464e:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 8014650:	7afb      	ldrb	r3, [r7, #11]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d009      	beq.n	801466a <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8014656:	7afb      	ldrb	r3, [r7, #11]
 8014658:	2bd2      	cmp	r3, #210	; 0xd2
 801465a:	d018      	beq.n	801468e <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 801465c:	4a10      	ldr	r2, [pc, #64]	; (80146a0 <_ZN3USB4TaskEv+0x340>)
 801465e:	7afb      	ldrb	r3, [r7, #11]
 8014660:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 8014662:	4b0d      	ldr	r3, [pc, #52]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 8014664:	22a0      	movs	r2, #160	; 0xa0
 8014666:	701a      	strb	r2, [r3, #0]
                        break;
 8014668:	e011      	b.n	801468e <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 801466a:	4b0b      	ldr	r3, [pc, #44]	; (8014698 <_ZN3USB4TaskEv+0x338>)
 801466c:	2290      	movs	r2, #144	; 0x90
 801466e:	701a      	strb	r2, [r3, #0]
                        break;
 8014670:	e00d      	b.n	801468e <_ZN3USB4TaskEv+0x32e>
                        break;
 8014672:	bf00      	nop
 8014674:	e00c      	b.n	8014690 <_ZN3USB4TaskEv+0x330>
                        break;
 8014676:	bf00      	nop
 8014678:	e00a      	b.n	8014690 <_ZN3USB4TaskEv+0x330>
                        break;
 801467a:	bf00      	nop
 801467c:	e008      	b.n	8014690 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801467e:	bf00      	nop
 8014680:	e006      	b.n	8014690 <_ZN3USB4TaskEv+0x330>
                        break;
 8014682:	bf00      	nop
 8014684:	e004      	b.n	8014690 <_ZN3USB4TaskEv+0x330>
                        break;
 8014686:	bf00      	nop
 8014688:	e002      	b.n	8014690 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 801468a:	bf00      	nop
 801468c:	e000      	b.n	8014690 <_ZN3USB4TaskEv+0x330>
                        break;
 801468e:	bf00      	nop
}
 8014690:	bf00      	nop
 8014692:	3710      	adds	r7, #16
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}
 8014698:	200056ba 	.word	0x200056ba
 801469c:	200056bc 	.word	0x200056bc
 80146a0:	200056b9 	.word	0x200056b9

080146a4 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b086      	sub	sp, #24
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	4608      	mov	r0, r1
 80146ae:	4611      	mov	r1, r2
 80146b0:	461a      	mov	r2, r3
 80146b2:	4603      	mov	r3, r0
 80146b4:	70fb      	strb	r3, [r7, #3]
 80146b6:	460b      	mov	r3, r1
 80146b8:	70bb      	strb	r3, [r7, #2]
 80146ba:	4613      	mov	r3, r2
 80146bc:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 80146be:	2300      	movs	r3, #0
 80146c0:	617b      	str	r3, [r7, #20]
 80146c2:	2300      	movs	r3, #0
 80146c4:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2100      	movs	r1, #0
 80146ca:	4618      	mov	r0, r3
 80146cc:	f000 fbc0 	bl	8014e50 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 80146d0:	6178      	str	r0, [r7, #20]

        if(!p0)
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d101      	bne.n	80146dc <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80146d8:	23d6      	movs	r3, #214	; 0xd6
 80146da:	e03a      	b.n	8014752 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d101      	bne.n	80146e8 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 80146e4:	23d7      	movs	r3, #215	; 0xd7
 80146e6:	e034      	b.n	8014752 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	787a      	ldrb	r2, [r7, #1]
 80146ec:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	78bb      	ldrb	r3, [r7, #2]
 80146f2:	78f9      	ldrb	r1, [r7, #3]
 80146f4:	2200      	movs	r2, #0
 80146f6:	f000 fc53 	bl	8014fa0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 80146fa:	4603      	mov	r3, r0
 80146fc:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 80146fe:	7bfb      	ldrb	r3, [r7, #15]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d101      	bne.n	8014708 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8014704:	23d4      	movs	r3, #212	; 0xd4
 8014706:	e024      	b.n	8014752 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	7bfa      	ldrb	r2, [r7, #15]
 801470c:	4611      	mov	r1, r2
 801470e:	4618      	mov	r0, r3
 8014710:	f000 fb9e 	bl	8014e50 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8014714:	6138      	str	r0, [r7, #16]

        if(!p)
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d101      	bne.n	8014720 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 801471c:	23d6      	movs	r3, #214	; 0xd6
 801471e:	e018      	b.n	8014752 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	787a      	ldrb	r2, [r7, #1]
 8014724:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8014726:	7bfb      	ldrb	r3, [r7, #15]
 8014728:	2200      	movs	r2, #0
 801472a:	2100      	movs	r1, #0
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f000 fae3 	bl	8014cf8 <_ZN3USB7setAddrEhhh>
 8014732:	4603      	mov	r3, r0
 8014734:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8014736:	7bbb      	ldrb	r3, [r7, #14]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d009      	beq.n	8014750 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	7bfa      	ldrb	r2, [r7, #15]
 8014740:	4611      	mov	r1, r2
 8014742:	4618      	mov	r0, r3
 8014744:	f000 fcc4 	bl	80150d0 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8014748:	2300      	movs	r3, #0
 801474a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 801474c:	7bbb      	ldrb	r3, [r7, #14]
 801474e:	e000      	b.n	8014752 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8014750:	2300      	movs	r3, #0
};
 8014752:	4618      	mov	r0, r3
 8014754:	3718      	adds	r7, #24
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}

0801475a <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 801475a:	b590      	push	{r4, r7, lr}
 801475c:	b085      	sub	sp, #20
 801475e:	af00      	add	r7, sp, #0
 8014760:	6078      	str	r0, [r7, #4]
 8014762:	4608      	mov	r0, r1
 8014764:	4611      	mov	r1, r2
 8014766:	461a      	mov	r2, r3
 8014768:	4603      	mov	r3, r0
 801476a:	70fb      	strb	r3, [r7, #3]
 801476c:	460b      	mov	r3, r1
 801476e:	70bb      	strb	r3, [r7, #2]
 8014770:	4613      	mov	r3, r2
 8014772:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8014774:	2300      	movs	r3, #0
 8014776:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8014778:	78fa      	ldrb	r2, [r7, #3]
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	321e      	adds	r2, #30
 801477e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014782:	78fa      	ldrb	r2, [r7, #3]
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	321e      	adds	r2, #30
 8014788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	3304      	adds	r3, #4
 8014790:	681c      	ldr	r4, [r3, #0]
 8014792:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014796:	787a      	ldrb	r2, [r7, #1]
 8014798:	78b9      	ldrb	r1, [r7, #2]
 801479a:	47a0      	blx	r4
 801479c:	4603      	mov	r3, r0
 801479e:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 80147a0:	7bbb      	ldrb	r3, [r7, #14]
 80147a2:	2be0      	cmp	r3, #224	; 0xe0
 80147a4:	d11c      	bne.n	80147e0 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 80147a6:	78bb      	ldrb	r3, [r7, #2]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d108      	bne.n	80147be <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 80147ac:	2201      	movs	r2, #1
 80147ae:	21e8      	movs	r1, #232	; 0xe8
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f7ed fe93 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 80147b6:	2066      	movs	r0, #102	; 0x66
 80147b8:	f7ee fa10 	bl	8002bdc <HAL_Delay>
 80147bc:	e022      	b.n	8014804 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 80147be:	78ba      	ldrb	r2, [r7, #2]
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	321e      	adds	r2, #30
 80147c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80147c8:	78ba      	ldrb	r2, [r7, #2]
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	321e      	adds	r2, #30
 80147ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	3314      	adds	r3, #20
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	787a      	ldrb	r2, [r7, #1]
 80147da:	4611      	mov	r1, r2
 80147dc:	4798      	blx	r3
 80147de:	e011      	b.n	8014804 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 80147e0:	7bbb      	ldrb	r3, [r7, #14]
 80147e2:	2b0d      	cmp	r3, #13
 80147e4:	d109      	bne.n	80147fa <_ZN3USB13AttemptConfigEhhhb+0xa0>
 80147e6:	7bfb      	ldrb	r3, [r7, #15]
 80147e8:	2b02      	cmp	r3, #2
 80147ea:	d806      	bhi.n	80147fa <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 80147ec:	2064      	movs	r0, #100	; 0x64
 80147ee:	f7ee f9f5 	bl	8002bdc <HAL_Delay>
                retries++;
 80147f2:	7bfb      	ldrb	r3, [r7, #15]
 80147f4:	3301      	adds	r3, #1
 80147f6:	73fb      	strb	r3, [r7, #15]
                goto again;
 80147f8:	e7be      	b.n	8014778 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 80147fa:	7bbb      	ldrb	r3, [r7, #14]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d001      	beq.n	8014804 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8014800:	7bbb      	ldrb	r3, [r7, #14]
 8014802:	e03f      	b.n	8014884 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8014804:	78fa      	ldrb	r2, [r7, #3]
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	321e      	adds	r2, #30
 801480a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801480e:	78fa      	ldrb	r2, [r7, #3]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	321e      	adds	r2, #30
 8014814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	681c      	ldr	r4, [r3, #0]
 801481c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014820:	787a      	ldrb	r2, [r7, #1]
 8014822:	78b9      	ldrb	r1, [r7, #2]
 8014824:	47a0      	blx	r4
 8014826:	4603      	mov	r3, r0
 8014828:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 801482a:	7bbb      	ldrb	r3, [r7, #14]
 801482c:	2b0d      	cmp	r3, #13
 801482e:	d109      	bne.n	8014844 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8014830:	7bfb      	ldrb	r3, [r7, #15]
 8014832:	2b02      	cmp	r3, #2
 8014834:	d806      	bhi.n	8014844 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8014836:	2064      	movs	r0, #100	; 0x64
 8014838:	f7ee f9d0 	bl	8002bdc <HAL_Delay>
                retries++;
 801483c:	7bfb      	ldrb	r3, [r7, #15]
 801483e:	3301      	adds	r3, #1
 8014840:	73fb      	strb	r3, [r7, #15]
                goto again;
 8014842:	e799      	b.n	8014778 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8014844:	7bbb      	ldrb	r3, [r7, #14]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d01b      	beq.n	8014882 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 801484a:	78bb      	ldrb	r3, [r7, #2]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d108      	bne.n	8014862 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8014850:	2201      	movs	r2, #1
 8014852:	21e8      	movs	r1, #232	; 0xe8
 8014854:	6878      	ldr	r0, [r7, #4]
 8014856:	f7ed fe41 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 801485a:	2066      	movs	r0, #102	; 0x66
 801485c:	f7ee f9be 	bl	8002bdc <HAL_Delay>
 8014860:	e00f      	b.n	8014882 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8014862:	78ba      	ldrb	r2, [r7, #2]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	321e      	adds	r2, #30
 8014868:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801486c:	78ba      	ldrb	r2, [r7, #2]
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	321e      	adds	r2, #30
 8014872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	3314      	adds	r3, #20
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	787a      	ldrb	r2, [r7, #1]
 801487e:	4611      	mov	r1, r2
 8014880:	4798      	blx	r3
                }
        }
        return rcode;
 8014882:	7bbb      	ldrb	r3, [r7, #14]
}
 8014884:	4618      	mov	r0, r3
 8014886:	3714      	adds	r7, #20
 8014888:	46bd      	mov	sp, r7
 801488a:	bd90      	pop	{r4, r7, pc}

0801488c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 801488c:	b580      	push	{r7, lr}
 801488e:	b090      	sub	sp, #64	; 0x40
 8014890:	af02      	add	r7, sp, #8
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	4608      	mov	r0, r1
 8014896:	4611      	mov	r1, r2
 8014898:	461a      	mov	r2, r3
 801489a:	4603      	mov	r3, r0
 801489c:	70fb      	strb	r3, [r7, #3]
 801489e:	460b      	mov	r3, r1
 80148a0:	70bb      	strb	r3, [r7, #2]
 80148a2:	4613      	mov	r3, r2
 80148a4:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 80148a6:	2300      	movs	r3, #0
 80148a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 80148ac:	f107 030c 	add.w	r3, r7, #12
 80148b0:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 80148b2:	2300      	movs	r3, #0
 80148b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 80148b6:	2300      	movs	r3, #0
 80148b8:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 80148ba:	2300      	movs	r3, #0
 80148bc:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 80148be:	2308      	movs	r3, #8
 80148c0:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 80148c2:	7abb      	ldrb	r3, [r7, #10]
 80148c4:	f36f 0300 	bfc	r3, #0, #1
 80148c8:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 80148ca:	7abb      	ldrb	r3, [r7, #10]
 80148cc:	f36f 0341 	bfc	r3, #1, #1
 80148d0:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 80148d2:	7abb      	ldrb	r3, [r7, #10]
 80148d4:	220f      	movs	r2, #15
 80148d6:	f362 0387 	bfi	r3, r2, #2, #6
 80148da:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 80148dc:	6878      	ldr	r0, [r7, #4]
 80148de:	f7f9 fe1b 	bl	800e518 <_ZN3USB14GetAddressPoolEv>
 80148e2:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 80148e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	2100      	movs	r1, #0
 80148ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148ee:	4798      	blx	r3
 80148f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 80148f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d101      	bne.n	80148fc <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80148f8:	23d6      	movs	r3, #214	; 0xd6
 80148fa:	e15c      	b.n	8014bb6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 80148fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8014902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014904:	f107 0208 	add.w	r2, r7, #8
 8014908:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 801490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801490c:	787a      	ldrb	r2, [r7, #1]
 801490e:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8014910:	f107 030c 	add.w	r3, r7, #12
 8014914:	9300      	str	r3, [sp, #0]
 8014916:	2312      	movs	r3, #18
 8014918:	2200      	movs	r2, #0
 801491a:	2100      	movs	r1, #0
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f000 f94e 	bl	8014bbe <_ZN3USB11getDevDescrEhhtPh>
 8014922:	4603      	mov	r3, r0
 8014924:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8014928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801492a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801492c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 801492e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014932:	2b00      	cmp	r3, #0
 8014934:	d002      	beq.n	801493c <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8014936:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801493a:	e13c      	b.n	8014bb6 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 801493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801493e:	7a1a      	ldrb	r2, [r3, #8]
 8014940:	7a5b      	ldrb	r3, [r3, #9]
 8014942:	021b      	lsls	r3, r3, #8
 8014944:	4313      	orrs	r3, r2
 8014946:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8014948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801494a:	7a9a      	ldrb	r2, [r3, #10]
 801494c:	7adb      	ldrb	r3, [r3, #11]
 801494e:	021b      	lsls	r3, r3, #8
 8014950:	4313      	orrs	r3, r2
 8014952:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8014954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014956:	791b      	ldrb	r3, [r3, #4]
 8014958:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 801495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801495c:	795b      	ldrb	r3, [r3, #5]
 801495e:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8014960:	2300      	movs	r3, #0
 8014962:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014966:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801496a:	2b0f      	cmp	r3, #15
 801496c:	f200 8081 	bhi.w	8014a72 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8014970:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	321e      	adds	r2, #30
 8014978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d06e      	beq.n	8014a5e <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8014980:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	321e      	adds	r2, #30
 8014988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801498c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	321e      	adds	r2, #30
 8014994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	3310      	adds	r3, #16
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	4608      	mov	r0, r1
 80149a0:	4798      	blx	r3
 80149a2:	4603      	mov	r3, r0
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	bf14      	ite	ne
 80149a8:	2301      	movne	r3, #1
 80149aa:	2300      	moveq	r3, #0
 80149ac:	b2db      	uxtb	r3, r3
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d157      	bne.n	8014a62 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 80149b2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	321e      	adds	r2, #30
 80149ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80149be:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	321e      	adds	r2, #30
 80149c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	3320      	adds	r3, #32
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	7fba      	ldrb	r2, [r7, #30]
 80149d2:	4611      	mov	r1, r2
 80149d4:	4798      	blx	r3
 80149d6:	4603      	mov	r3, r0
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d02b      	beq.n	8014a34 <_ZN3USB11ConfiguringEhhb+0x1a8>
 80149dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	321e      	adds	r2, #30
 80149e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80149e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	321e      	adds	r2, #30
 80149f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	3318      	adds	r3, #24
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	8c3a      	ldrh	r2, [r7, #32]
 80149fc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80149fe:	4798      	blx	r3
 8014a00:	4603      	mov	r3, r0
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d114      	bne.n	8014a30 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8014a06:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	321e      	adds	r2, #30
 8014a0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014a12:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	321e      	adds	r2, #30
 8014a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	331c      	adds	r3, #28
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	7ffa      	ldrb	r2, [r7, #31]
 8014a26:	4611      	mov	r1, r2
 8014a28:	4798      	blx	r3
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d001      	beq.n	8014a34 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8014a30:	2301      	movs	r3, #1
 8014a32:	e000      	b.n	8014a36 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8014a34:	2300      	movs	r3, #0
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d014      	beq.n	8014a64 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8014a3a:	78b8      	ldrb	r0, [r7, #2]
 8014a3c:	78fa      	ldrb	r2, [r7, #3]
 8014a3e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8014a42:	787b      	ldrb	r3, [r7, #1]
 8014a44:	9300      	str	r3, [sp, #0]
 8014a46:	4603      	mov	r3, r0
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f7ff fe86 	bl	801475a <_ZN3USB13AttemptConfigEhhhb>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8014a54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014a58:	2bd1      	cmp	r3, #209	; 0xd1
 8014a5a:	d109      	bne.n	8014a70 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8014a5c:	e002      	b.n	8014a64 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8014a5e:	bf00      	nop
 8014a60:	e000      	b.n	8014a64 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8014a62:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8014a64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a68:	3301      	adds	r3, #1
 8014a6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014a6e:	e77a      	b.n	8014966 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8014a70:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8014a72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a76:	2b0f      	cmp	r3, #15
 8014a78:	d802      	bhi.n	8014a80 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8014a7a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014a7e:	e09a      	b.n	8014bb6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8014a80:	2300      	movs	r3, #0
 8014a82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014a86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a8a:	2b0f      	cmp	r3, #15
 8014a8c:	f200 8088 	bhi.w	8014ba0 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8014a90:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	321e      	adds	r2, #30
 8014a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d074      	beq.n	8014b8a <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8014aa0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	321e      	adds	r2, #30
 8014aa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014aac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	321e      	adds	r2, #30
 8014ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	3310      	adds	r3, #16
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	4608      	mov	r0, r1
 8014ac0:	4798      	blx	r3
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	bf14      	ite	ne
 8014ac8:	2301      	movne	r3, #1
 8014aca:	2300      	moveq	r3, #0
 8014acc:	b2db      	uxtb	r3, r3
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d15d      	bne.n	8014b8e <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8014ad2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	321e      	adds	r2, #30
 8014ada:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014ade:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	321e      	adds	r2, #30
 8014ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	3320      	adds	r3, #32
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	7fba      	ldrb	r2, [r7, #30]
 8014af2:	4611      	mov	r1, r2
 8014af4:	4798      	blx	r3
 8014af6:	4603      	mov	r3, r0
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d02b      	beq.n	8014b54 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8014afc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	321e      	adds	r2, #30
 8014b04:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014b08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	321e      	adds	r2, #30
 8014b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	3318      	adds	r3, #24
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	8c3a      	ldrh	r2, [r7, #32]
 8014b1c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8014b1e:	4798      	blx	r3
 8014b20:	4603      	mov	r3, r0
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d114      	bne.n	8014b50 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8014b26:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	321e      	adds	r2, #30
 8014b2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014b32:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	321e      	adds	r2, #30
 8014b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	331c      	adds	r3, #28
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	7ffa      	ldrb	r2, [r7, #31]
 8014b46:	4611      	mov	r1, r2
 8014b48:	4798      	blx	r3
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d001      	beq.n	8014b54 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8014b50:	2301      	movs	r3, #1
 8014b52:	e000      	b.n	8014b56 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8014b54:	2300      	movs	r3, #0
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d11b      	bne.n	8014b92 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8014b5a:	78b8      	ldrb	r0, [r7, #2]
 8014b5c:	78fa      	ldrb	r2, [r7, #3]
 8014b5e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8014b62:	787b      	ldrb	r3, [r7, #1]
 8014b64:	9300      	str	r3, [sp, #0]
 8014b66:	4603      	mov	r3, r0
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f7ff fdf6 	bl	801475a <_ZN3USB13AttemptConfigEhhhb>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8014b74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014b78:	2bd1      	cmp	r3, #209	; 0xd1
 8014b7a:	d00b      	beq.n	8014b94 <_ZN3USB11ConfiguringEhhb+0x308>
 8014b7c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014b80:	2bd9      	cmp	r3, #217	; 0xd9
 8014b82:	d007      	beq.n	8014b94 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8014b84:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8014b88:	e015      	b.n	8014bb6 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8014b8a:	bf00      	nop
 8014b8c:	e002      	b.n	8014b94 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8014b8e:	bf00      	nop
 8014b90:	e000      	b.n	8014b94 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8014b92:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8014b94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b98:	3301      	adds	r3, #1
 8014b9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014b9e:	e772      	b.n	8014a86 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8014ba0:	787b      	ldrb	r3, [r7, #1]
 8014ba2:	78ba      	ldrb	r2, [r7, #2]
 8014ba4:	78f9      	ldrb	r1, [r7, #3]
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f7ff fd7c 	bl	80146a4 <_ZN3USB17DefaultAddressingEhhb>
 8014bac:	4603      	mov	r3, r0
 8014bae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8014bb2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3738      	adds	r7, #56	; 0x38
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}

08014bbe <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8014bbe:	b580      	push	{r7, lr}
 8014bc0:	b08a      	sub	sp, #40	; 0x28
 8014bc2:	af08      	add	r7, sp, #32
 8014bc4:	6078      	str	r0, [r7, #4]
 8014bc6:	4608      	mov	r0, r1
 8014bc8:	4611      	mov	r1, r2
 8014bca:	461a      	mov	r2, r3
 8014bcc:	4603      	mov	r3, r0
 8014bce:	70fb      	strb	r3, [r7, #3]
 8014bd0:	460b      	mov	r3, r1
 8014bd2:	70bb      	strb	r3, [r7, #2]
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8014bd8:	78ba      	ldrb	r2, [r7, #2]
 8014bda:	78f9      	ldrb	r1, [r7, #3]
 8014bdc:	2300      	movs	r3, #0
 8014bde:	9307      	str	r3, [sp, #28]
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	9306      	str	r3, [sp, #24]
 8014be4:	883b      	ldrh	r3, [r7, #0]
 8014be6:	9305      	str	r3, [sp, #20]
 8014be8:	883b      	ldrh	r3, [r7, #0]
 8014bea:	9304      	str	r3, [sp, #16]
 8014bec:	2300      	movs	r3, #0
 8014bee:	9303      	str	r3, [sp, #12]
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	9302      	str	r3, [sp, #8]
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	9301      	str	r3, [sp, #4]
 8014bf8:	2306      	movs	r3, #6
 8014bfa:	9300      	str	r3, [sp, #0]
 8014bfc:	2380      	movs	r3, #128	; 0x80
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f7fe ffdb 	bl	8013bba <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8014c04:	4603      	mov	r3, r0
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3708      	adds	r7, #8
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}

08014c0e <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8014c0e:	b580      	push	{r7, lr}
 8014c10:	b08a      	sub	sp, #40	; 0x28
 8014c12:	af08      	add	r7, sp, #32
 8014c14:	6078      	str	r0, [r7, #4]
 8014c16:	4608      	mov	r0, r1
 8014c18:	4611      	mov	r1, r2
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	70fb      	strb	r3, [r7, #3]
 8014c20:	460b      	mov	r3, r1
 8014c22:	70bb      	strb	r3, [r7, #2]
 8014c24:	4613      	mov	r3, r2
 8014c26:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8014c28:	78ba      	ldrb	r2, [r7, #2]
 8014c2a:	78f9      	ldrb	r1, [r7, #3]
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	9307      	str	r3, [sp, #28]
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	9306      	str	r3, [sp, #24]
 8014c34:	883b      	ldrh	r3, [r7, #0]
 8014c36:	9305      	str	r3, [sp, #20]
 8014c38:	883b      	ldrh	r3, [r7, #0]
 8014c3a:	9304      	str	r3, [sp, #16]
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	9303      	str	r3, [sp, #12]
 8014c40:	2302      	movs	r3, #2
 8014c42:	9302      	str	r3, [sp, #8]
 8014c44:	7c3b      	ldrb	r3, [r7, #16]
 8014c46:	9301      	str	r3, [sp, #4]
 8014c48:	2306      	movs	r3, #6
 8014c4a:	9300      	str	r3, [sp, #0]
 8014c4c:	2380      	movs	r3, #128	; 0x80
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f7fe ffb3 	bl	8013bba <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8014c54:	4603      	mov	r3, r0
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	3708      	adds	r7, #8
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}

08014c5e <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 8014c5e:	b580      	push	{r7, lr}
 8014c60:	b09e      	sub	sp, #120	; 0x78
 8014c62:	af08      	add	r7, sp, #32
 8014c64:	6078      	str	r0, [r7, #4]
 8014c66:	4608      	mov	r0, r1
 8014c68:	4611      	mov	r1, r2
 8014c6a:	461a      	mov	r2, r3
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	70fb      	strb	r3, [r7, #3]
 8014c70:	460b      	mov	r3, r1
 8014c72:	70bb      	strb	r3, [r7, #2]
 8014c74:	4613      	mov	r3, r2
 8014c76:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8014c78:	2340      	movs	r3, #64	; 0x40
 8014c7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 8014c7e:	f107 030c 	add.w	r3, r7, #12
 8014c82:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8014c84:	78ba      	ldrb	r2, [r7, #2]
 8014c86:	78f9      	ldrb	r1, [r7, #3]
 8014c88:	f107 030c 	add.w	r3, r7, #12
 8014c8c:	9301      	str	r3, [sp, #4]
 8014c8e:	787b      	ldrb	r3, [r7, #1]
 8014c90:	9300      	str	r3, [sp, #0]
 8014c92:	2309      	movs	r3, #9
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f7ff ffba 	bl	8014c0e <_ZN3USB12getConfDescrEhhthPh>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8014ca0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d002      	beq.n	8014cae <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8014ca8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014cac:	e020      	b.n	8014cf0 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 8014cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cb0:	789a      	ldrb	r2, [r3, #2]
 8014cb2:	78db      	ldrb	r3, [r3, #3]
 8014cb4:	021b      	lsls	r3, r3, #8
 8014cb6:	4313      	orrs	r3, r2
 8014cb8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 8014cbc:	78ba      	ldrb	r2, [r7, #2]
 8014cbe:	78f9      	ldrb	r1, [r7, #3]
 8014cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014cc2:	9307      	str	r3, [sp, #28]
 8014cc4:	f107 030c 	add.w	r3, r7, #12
 8014cc8:	9306      	str	r3, [sp, #24]
 8014cca:	2340      	movs	r3, #64	; 0x40
 8014ccc:	9305      	str	r3, [sp, #20]
 8014cce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8014cd2:	9304      	str	r3, [sp, #16]
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	9303      	str	r3, [sp, #12]
 8014cd8:	2302      	movs	r3, #2
 8014cda:	9302      	str	r3, [sp, #8]
 8014cdc:	787b      	ldrb	r3, [r7, #1]
 8014cde:	9301      	str	r3, [sp, #4]
 8014ce0:	2306      	movs	r3, #6
 8014ce2:	9300      	str	r3, [sp, #0]
 8014ce4:	2380      	movs	r3, #128	; 0x80
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f7fe ff67 	bl	8013bba <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8014cec:	4603      	mov	r3, r0
 8014cee:	bf00      	nop
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3758      	adds	r7, #88	; 0x58
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}

08014cf8 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b08c      	sub	sp, #48	; 0x30
 8014cfc:	af08      	add	r7, sp, #32
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	4608      	mov	r0, r1
 8014d02:	4611      	mov	r1, r2
 8014d04:	461a      	mov	r2, r3
 8014d06:	4603      	mov	r3, r0
 8014d08:	70fb      	strb	r3, [r7, #3]
 8014d0a:	460b      	mov	r3, r1
 8014d0c:	70bb      	strb	r3, [r7, #2]
 8014d0e:	4613      	mov	r3, r2
 8014d10:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8014d12:	78ba      	ldrb	r2, [r7, #2]
 8014d14:	78f9      	ldrb	r1, [r7, #3]
 8014d16:	2300      	movs	r3, #0
 8014d18:	9307      	str	r3, [sp, #28]
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	9306      	str	r3, [sp, #24]
 8014d1e:	2300      	movs	r3, #0
 8014d20:	9305      	str	r3, [sp, #20]
 8014d22:	2300      	movs	r3, #0
 8014d24:	9304      	str	r3, [sp, #16]
 8014d26:	2300      	movs	r3, #0
 8014d28:	9303      	str	r3, [sp, #12]
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	9302      	str	r3, [sp, #8]
 8014d2e:	787b      	ldrb	r3, [r7, #1]
 8014d30:	9301      	str	r3, [sp, #4]
 8014d32:	2305      	movs	r3, #5
 8014d34:	9300      	str	r3, [sp, #0]
 8014d36:	2300      	movs	r3, #0
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f7fe ff3e 	bl	8013bba <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8014d42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014d46:	f7ed ff49 	bl	8002bdc <HAL_Delay>
        return rcode;
 8014d4a:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	3710      	adds	r7, #16
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd80      	pop	{r7, pc}

08014d54 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b08a      	sub	sp, #40	; 0x28
 8014d58:	af08      	add	r7, sp, #32
 8014d5a:	6078      	str	r0, [r7, #4]
 8014d5c:	4608      	mov	r0, r1
 8014d5e:	4611      	mov	r1, r2
 8014d60:	461a      	mov	r2, r3
 8014d62:	4603      	mov	r3, r0
 8014d64:	70fb      	strb	r3, [r7, #3]
 8014d66:	460b      	mov	r3, r1
 8014d68:	70bb      	strb	r3, [r7, #2]
 8014d6a:	4613      	mov	r3, r2
 8014d6c:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 8014d6e:	78ba      	ldrb	r2, [r7, #2]
 8014d70:	78f9      	ldrb	r1, [r7, #3]
 8014d72:	2300      	movs	r3, #0
 8014d74:	9307      	str	r3, [sp, #28]
 8014d76:	2300      	movs	r3, #0
 8014d78:	9306      	str	r3, [sp, #24]
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	9305      	str	r3, [sp, #20]
 8014d7e:	2300      	movs	r3, #0
 8014d80:	9304      	str	r3, [sp, #16]
 8014d82:	2300      	movs	r3, #0
 8014d84:	9303      	str	r3, [sp, #12]
 8014d86:	2300      	movs	r3, #0
 8014d88:	9302      	str	r3, [sp, #8]
 8014d8a:	787b      	ldrb	r3, [r7, #1]
 8014d8c:	9301      	str	r3, [sp, #4]
 8014d8e:	2309      	movs	r3, #9
 8014d90:	9300      	str	r3, [sp, #0]
 8014d92:	2300      	movs	r3, #0
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f7fe ff10 	bl	8013bba <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8014d9a:	4603      	mov	r3, r0
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3708      	adds	r7, #8
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}

08014da4 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8014da4:	b480      	push	{r7}
 8014da6:	b083      	sub	sp, #12
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
};
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	4618      	mov	r0, r3
 8014db0:	370c      	adds	r7, #12
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr
	...

08014dbc <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 8014dbc:	b480      	push	{r7}
 8014dbe:	b083      	sub	sp, #12
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
 8014dc4:	4a04      	ldr	r2, [pc, #16]	; (8014dd8 <_ZN11AddressPoolC1Ev+0x1c>)
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	601a      	str	r2, [r3, #0]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	4618      	mov	r0, r3
 8014dce:	370c      	adds	r7, #12
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr
 8014dd8:	08017d5c 	.word	0x08017d5c

08014ddc <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7ff ffe8 	bl	8014dbc <_ZN11AddressPoolC1Ev>
 8014dec:	4a17      	ldr	r2, [pc, #92]	; (8014e4c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	601a      	str	r2, [r3, #0]
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2200      	movs	r2, #0
 8014df6:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8014df8:	2100      	movs	r1, #0
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	f000 f984 	bl	8015108 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	2200      	movs	r2, #0
 8014e04:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	1d1a      	adds	r2, r3, #4
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2200      	movs	r2, #0
 8014e12:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	2208      	movs	r2, #8
 8014e18:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 8014e1a:	687a      	ldr	r2, [r7, #4]
 8014e1c:	7993      	ldrb	r3, [r2, #6]
 8014e1e:	f36f 0300 	bfc	r3, #0, #1
 8014e22:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	7993      	ldrb	r3, [r2, #6]
 8014e28:	f36f 0341 	bfc	r3, #1, #1
 8014e2c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 8014e2e:	687a      	ldr	r2, [r7, #4]
 8014e30:	7993      	ldrb	r3, [r2, #6]
 8014e32:	210f      	movs	r1, #15
 8014e34:	f361 0387 	bfi	r3, r1, #2, #6
 8014e38:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f000 f995 	bl	801516a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	4618      	mov	r0, r3
 8014e44:	3708      	adds	r7, #8
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	08017d48 	.word	0x08017d48

08014e50 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b084      	sub	sp, #16
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
 8014e58:	460b      	mov	r3, r1
 8014e5a:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 8014e5c:	78fb      	ldrb	r3, [r7, #3]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d102      	bne.n	8014e68 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	3308      	adds	r3, #8
 8014e66:	e014      	b.n	8014e92 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8014e68:	78fb      	ldrb	r3, [r7, #3]
 8014e6a:	4619      	mov	r1, r3
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	f000 f995 	bl	801519c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8014e72:	4603      	mov	r3, r0
 8014e74:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8014e76:	7bfb      	ldrb	r3, [r7, #15]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d008      	beq.n	8014e8e <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	f103 0108 	add.w	r1, r3, #8
 8014e82:	7bfa      	ldrb	r2, [r7, #15]
 8014e84:	4613      	mov	r3, r2
 8014e86:	00db      	lsls	r3, r3, #3
 8014e88:	1a9b      	subs	r3, r3, r2
 8014e8a:	440b      	add	r3, r1
 8014e8c:	e000      	b.n	8014e90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 8014e8e:	2300      	movs	r3, #0
 8014e90:	bf00      	nop
        };
 8014e92:	4618      	mov	r0, r3
 8014e94:	3710      	adds	r7, #16
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
	...

08014e9c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b086      	sub	sp, #24
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	607b      	str	r3, [r7, #4]
 8014ea6:	460b      	mov	r3, r1
 8014ea8:	72fb      	strb	r3, [r7, #11]
 8014eaa:	4613      	mov	r3, r2
 8014eac:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8014eae:	f7eb fd99 	bl	80009e4 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8014eb2:	7afb      	ldrb	r3, [r7, #11]
 8014eb4:	f043 0302 	orr.w	r3, r3, #2
 8014eb8:	b2db      	uxtb	r3, r3
 8014eba:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 8014ebc:	f107 0117 	add.w	r1, r7, #23
 8014ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	480b      	ldr	r0, [pc, #44]	; (8014ef4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8014ec8:	f7f1 fb9d 	bl	8006606 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8014ecc:	7abb      	ldrb	r3, [r7, #10]
 8014ece:	b29a      	uxth	r2, r3
 8014ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ed4:	6879      	ldr	r1, [r7, #4]
 8014ed6:	4807      	ldr	r0, [pc, #28]	; (8014ef4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8014ed8:	f7f1 fb95 	bl	8006606 <HAL_SPI_Transmit>
        data_p += nbytes;
 8014edc:	7abb      	ldrb	r3, [r7, #10]
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8014ee4:	f7eb fd72 	bl	80009cc <_ZN3P103SetEv>
        return ( data_p);
 8014ee8:	687b      	ldr	r3, [r7, #4]
}
 8014eea:	4618      	mov	r0, r3
 8014eec:	3718      	adds	r7, #24
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	bd80      	pop	{r7, pc}
 8014ef2:	bf00      	nop
 8014ef4:	2000052c 	.word	0x2000052c

08014ef8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b084      	sub	sp, #16
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	60f8      	str	r0, [r7, #12]
 8014f00:	607b      	str	r3, [r7, #4]
 8014f02:	460b      	mov	r3, r1
 8014f04:	72fb      	strb	r3, [r7, #11]
 8014f06:	4613      	mov	r3, r2
 8014f08:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8014f0a:	f7eb fd6b 	bl	80009e4 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8014f0e:	f107 010b 	add.w	r1, r7, #11
 8014f12:	f04f 33ff 	mov.w	r3, #4294967295
 8014f16:	2201      	movs	r2, #1
 8014f18:	480d      	ldr	r0, [pc, #52]	; (8014f50 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8014f1a:	f7f1 fb74 	bl	8006606 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8014f1e:	7abb      	ldrb	r3, [r7, #10]
 8014f20:	461a      	mov	r2, r3
 8014f22:	2100      	movs	r1, #0
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	f000 fe49 	bl	8015bbc <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8014f2a:	7abb      	ldrb	r3, [r7, #10]
 8014f2c:	b29a      	uxth	r2, r3
 8014f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8014f32:	6879      	ldr	r1, [r7, #4]
 8014f34:	4806      	ldr	r0, [pc, #24]	; (8014f50 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8014f36:	f7f1 fca2 	bl	800687e <HAL_SPI_Receive>
        data_p += nbytes;
 8014f3a:	7abb      	ldrb	r3, [r7, #10]
 8014f3c:	687a      	ldr	r2, [r7, #4]
 8014f3e:	4413      	add	r3, r2
 8014f40:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8014f42:	f7eb fd43 	bl	80009cc <_ZN3P103SetEv>
        return ( data_p);
 8014f46:	687b      	ldr	r3, [r7, #4]
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3710      	adds	r7, #16
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	2000052c 	.word	0x2000052c

08014f54 <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b084      	sub	sp, #16
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8014f60:	f7fe fd30 	bl	80139c4 <_ZN2P95IsSetEv>
 8014f64:	4603      	mov	r3, r0
 8014f66:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8014f68:	7bbb      	ldrb	r3, [r7, #14]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d104      	bne.n	8014f78 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8014f6e:	6878      	ldr	r0, [r7, #4]
 8014f70:	f000 f937 	bl	80151e2 <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 8014f74:	4603      	mov	r3, r0
 8014f76:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8014f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3710      	adds	r7, #16
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}
	...

08014f84 <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 8014f84:	b480      	push	{r7}
 8014f86:	b083      	sub	sp, #12
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
                return vbusState;
 8014f8c:	4b03      	ldr	r3, [pc, #12]	; (8014f9c <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8014f8e:	781b      	ldrb	r3, [r3, #0]
        };
 8014f90:	4618      	mov	r0, r3
 8014f92:	370c      	adds	r7, #12
 8014f94:	46bd      	mov	sp, r7
 8014f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9a:	4770      	bx	lr
 8014f9c:	20000970 	.word	0x20000970

08014fa0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b084      	sub	sp, #16
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	4608      	mov	r0, r1
 8014faa:	4611      	mov	r1, r2
 8014fac:	461a      	mov	r2, r3
 8014fae:	4603      	mov	r3, r0
 8014fb0:	70fb      	strb	r3, [r7, #3]
 8014fb2:	460b      	mov	r3, r1
 8014fb4:	70bb      	strb	r3, [r7, #2]
 8014fb6:	4613      	mov	r3, r2
 8014fb8:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8014fba:	78fb      	ldrb	r3, [r7, #3]
 8014fbc:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8014fbe:	7b3b      	ldrb	r3, [r7, #12]
 8014fc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014fc4:	b2db      	uxtb	r3, r3
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d102      	bne.n	8014fd0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8014fca:	787b      	ldrb	r3, [r7, #1]
 8014fcc:	2b07      	cmp	r3, #7
 8014fce:	d901      	bls.n	8014fd4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	e079      	b.n	80150c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 8014fd4:	78bb      	ldrb	r3, [r7, #2]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d005      	beq.n	8014fe6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	79db      	ldrb	r3, [r3, #7]
 8014fde:	2b07      	cmp	r3, #7
 8014fe0:	d101      	bne.n	8014fe6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	e070      	b.n	80150c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 8014fe6:	2100      	movs	r1, #0
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f000 f8d7 	bl	801519c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 8014ff2:	7bfb      	ldrb	r3, [r7, #15]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d101      	bne.n	8014ffc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	e065      	b.n	80150c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8014ffc:	7b3b      	ldrb	r3, [r7, #12]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d124      	bne.n	801504c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 8015002:	78bb      	ldrb	r3, [r7, #2]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d00f      	beq.n	8015028 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8015008:	7bfa      	ldrb	r2, [r7, #15]
 801500a:	6879      	ldr	r1, [r7, #4]
 801500c:	4613      	mov	r3, r2
 801500e:	00db      	lsls	r3, r3, #3
 8015010:	1a9b      	subs	r3, r3, r2
 8015012:	440b      	add	r3, r1
 8015014:	330c      	adds	r3, #12
 8015016:	2241      	movs	r2, #65	; 0x41
 8015018:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	79db      	ldrb	r3, [r3, #7]
 801501e:	3301      	adds	r3, #1
 8015020:	b2da      	uxtb	r2, r3
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	71da      	strb	r2, [r3, #7]
 8015026:	e008      	b.n	801503a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8015028:	7bfa      	ldrb	r2, [r7, #15]
 801502a:	6879      	ldr	r1, [r7, #4]
 801502c:	4613      	mov	r3, r2
 801502e:	00db      	lsls	r3, r3, #3
 8015030:	1a9b      	subs	r3, r3, r2
 8015032:	440b      	add	r3, r1
 8015034:	330c      	adds	r3, #12
 8015036:	2201      	movs	r2, #1
 8015038:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 801503a:	7bfa      	ldrb	r2, [r7, #15]
 801503c:	6879      	ldr	r1, [r7, #4]
 801503e:	4613      	mov	r3, r2
 8015040:	00db      	lsls	r3, r3, #3
 8015042:	1a9b      	subs	r3, r3, r2
 8015044:	440b      	add	r3, r1
 8015046:	330c      	adds	r3, #12
 8015048:	781b      	ldrb	r3, [r3, #0]
 801504a:	e03d      	b.n	80150c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 801504c:	2300      	movs	r3, #0
 801504e:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8015050:	7b3b      	ldrb	r3, [r7, #12]
 8015052:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015056:	b2da      	uxtb	r2, r3
 8015058:	7a3b      	ldrb	r3, [r7, #8]
 801505a:	f362 03c5 	bfi	r3, r2, #3, #3
 801505e:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8015060:	78bb      	ldrb	r3, [r7, #2]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d013      	beq.n	801508e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 8015066:	7a3b      	ldrb	r3, [r7, #8]
 8015068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801506c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	79db      	ldrb	r3, [r3, #7]
 8015072:	3301      	adds	r3, #1
 8015074:	b2da      	uxtb	r2, r3
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	71da      	strb	r2, [r3, #7]
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	79db      	ldrb	r3, [r3, #7]
 801507e:	f003 0307 	and.w	r3, r3, #7
 8015082:	b2da      	uxtb	r2, r3
 8015084:	7a3b      	ldrb	r3, [r7, #8]
 8015086:	f362 0302 	bfi	r3, r2, #0, #3
 801508a:	723b      	strb	r3, [r7, #8]
 801508c:	e00b      	b.n	80150a6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 801508e:	7a3b      	ldrb	r3, [r7, #8]
 8015090:	f36f 1386 	bfc	r3, #6, #1
 8015094:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 8015096:	787b      	ldrb	r3, [r7, #1]
 8015098:	f003 0307 	and.w	r3, r3, #7
 801509c:	b2da      	uxtb	r2, r3
 801509e:	7a3b      	ldrb	r3, [r7, #8]
 80150a0:	f362 0302 	bfi	r3, r2, #0, #3
 80150a4:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 80150a6:	7bfa      	ldrb	r2, [r7, #15]
 80150a8:	6879      	ldr	r1, [r7, #4]
 80150aa:	4613      	mov	r3, r2
 80150ac:	00db      	lsls	r3, r3, #3
 80150ae:	1a9b      	subs	r3, r3, r2
 80150b0:	440b      	add	r3, r1
 80150b2:	330c      	adds	r3, #12
 80150b4:	7a3a      	ldrb	r2, [r7, #8]
 80150b6:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 80150b8:	7bfa      	ldrb	r2, [r7, #15]
 80150ba:	6879      	ldr	r1, [r7, #4]
 80150bc:	4613      	mov	r3, r2
 80150be:	00db      	lsls	r3, r3, #3
 80150c0:	1a9b      	subs	r3, r3, r2
 80150c2:	440b      	add	r3, r1
 80150c4:	330c      	adds	r3, #12
 80150c6:	781b      	ldrb	r3, [r3, #0]
        };
 80150c8:	4618      	mov	r0, r3
 80150ca:	3710      	adds	r7, #16
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b084      	sub	sp, #16
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	460b      	mov	r3, r1
 80150da:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 80150dc:	78fb      	ldrb	r3, [r7, #3]
 80150de:	2b41      	cmp	r3, #65	; 0x41
 80150e0:	d103      	bne.n	80150ea <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f000 f841 	bl	801516a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 80150e8:	e00b      	b.n	8015102 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 80150ea:	78fb      	ldrb	r3, [r7, #3]
 80150ec:	4619      	mov	r1, r3
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f000 f854 	bl	801519c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 80150f4:	4603      	mov	r3, r0
 80150f6:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 80150f8:	7bfb      	ldrb	r3, [r7, #15]
 80150fa:	4619      	mov	r1, r3
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f000 f893 	bl	8015228 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 8015102:	3710      	adds	r7, #16
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8015108:	b480      	push	{r7}
 801510a:	b083      	sub	sp, #12
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	460b      	mov	r3, r1
 8015112:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 8015114:	78fa      	ldrb	r2, [r7, #3]
 8015116:	6879      	ldr	r1, [r7, #4]
 8015118:	4613      	mov	r3, r2
 801511a:	00db      	lsls	r3, r3, #3
 801511c:	1a9b      	subs	r3, r3, r2
 801511e:	440b      	add	r3, r1
 8015120:	330c      	adds	r3, #12
 8015122:	2200      	movs	r2, #0
 8015124:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 8015126:	78fa      	ldrb	r2, [r7, #3]
 8015128:	6879      	ldr	r1, [r7, #4]
 801512a:	4613      	mov	r3, r2
 801512c:	00db      	lsls	r3, r3, #3
 801512e:	1a9b      	subs	r3, r3, r2
 8015130:	440b      	add	r3, r1
 8015132:	330d      	adds	r3, #13
 8015134:	2201      	movs	r2, #1
 8015136:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8015138:	78fa      	ldrb	r2, [r7, #3]
 801513a:	6879      	ldr	r1, [r7, #4]
 801513c:	4613      	mov	r3, r2
 801513e:	00db      	lsls	r3, r3, #3
 8015140:	1a9b      	subs	r3, r3, r2
 8015142:	440b      	add	r3, r1
 8015144:	330e      	adds	r3, #14
 8015146:	2200      	movs	r2, #0
 8015148:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 801514a:	78fa      	ldrb	r2, [r7, #3]
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	1d19      	adds	r1, r3, #4
 8015150:	6878      	ldr	r0, [r7, #4]
 8015152:	4613      	mov	r3, r2
 8015154:	00db      	lsls	r3, r3, #3
 8015156:	1a9b      	subs	r3, r3, r2
 8015158:	4403      	add	r3, r0
 801515a:	3308      	adds	r3, #8
 801515c:	6019      	str	r1, [r3, #0]
        };
 801515e:	bf00      	nop
 8015160:	370c      	adds	r7, #12
 8015162:	46bd      	mov	sp, r7
 8015164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015168:	4770      	bx	lr

0801516a <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 801516a:	b580      	push	{r7, lr}
 801516c:	b084      	sub	sp, #16
 801516e:	af00      	add	r7, sp, #0
 8015170:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 8015172:	2301      	movs	r3, #1
 8015174:	73fb      	strb	r3, [r7, #15]
 8015176:	7bfb      	ldrb	r3, [r7, #15]
 8015178:	2b0f      	cmp	r3, #15
 801517a:	d808      	bhi.n	801518e <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 801517c:	7bfb      	ldrb	r3, [r7, #15]
 801517e:	4619      	mov	r1, r3
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f7ff ffc1 	bl	8015108 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 8015186:	7bfb      	ldrb	r3, [r7, #15]
 8015188:	3301      	adds	r3, #1
 801518a:	73fb      	strb	r3, [r7, #15]
 801518c:	e7f3      	b.n	8015176 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	2200      	movs	r2, #0
 8015192:	71da      	strb	r2, [r3, #7]
        };
 8015194:	bf00      	nop
 8015196:	3710      	adds	r7, #16
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}

0801519c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 801519c:	b480      	push	{r7}
 801519e:	b085      	sub	sp, #20
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
 80151a4:	460b      	mov	r3, r1
 80151a6:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80151a8:	2301      	movs	r3, #1
 80151aa:	73fb      	strb	r3, [r7, #15]
 80151ac:	7bfb      	ldrb	r3, [r7, #15]
 80151ae:	2b0f      	cmp	r3, #15
 80151b0:	d810      	bhi.n	80151d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 80151b2:	7bfa      	ldrb	r2, [r7, #15]
 80151b4:	6879      	ldr	r1, [r7, #4]
 80151b6:	4613      	mov	r3, r2
 80151b8:	00db      	lsls	r3, r3, #3
 80151ba:	1a9b      	subs	r3, r3, r2
 80151bc:	440b      	add	r3, r1
 80151be:	330c      	adds	r3, #12
 80151c0:	781b      	ldrb	r3, [r3, #0]
 80151c2:	78fa      	ldrb	r2, [r7, #3]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d101      	bne.n	80151cc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 80151c8:	7bfb      	ldrb	r3, [r7, #15]
 80151ca:	e004      	b.n	80151d6 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80151cc:	7bfb      	ldrb	r3, [r7, #15]
 80151ce:	3301      	adds	r3, #1
 80151d0:	73fb      	strb	r3, [r7, #15]
 80151d2:	e7eb      	b.n	80151ac <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 80151d4:	2300      	movs	r3, #0
        };
 80151d6:	4618      	mov	r0, r3
 80151d8:	3714      	adds	r7, #20
 80151da:	46bd      	mov	sp, r7
 80151dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e0:	4770      	bx	lr

080151e2 <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 80151e2:	b580      	push	{r7, lr}
 80151e4:	b084      	sub	sp, #16
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 80151ea:	2300      	movs	r3, #0
 80151ec:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 80151ee:	21c8      	movs	r1, #200	; 0xc8
 80151f0:	6878      	ldr	r0, [r7, #4]
 80151f2:	f7ed f9c5 	bl	8002580 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80151f6:	4603      	mov	r3, r0
 80151f8:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 80151fa:	7bbb      	ldrb	r3, [r7, #14]
 80151fc:	f003 0320 	and.w	r3, r3, #32
 8015200:	2b00      	cmp	r3, #0
 8015202:	d006      	beq.n	8015212 <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 8015204:	6878      	ldr	r0, [r7, #4]
 8015206:	f7ed f9dd 	bl	80025c4 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 801520a:	7bfb      	ldrb	r3, [r7, #15]
 801520c:	f043 0320 	orr.w	r3, r3, #32
 8015210:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 8015212:	7bfb      	ldrb	r3, [r7, #15]
 8015214:	461a      	mov	r2, r3
 8015216:	21c8      	movs	r1, #200	; 0xc8
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f7ed f95f 	bl	80024dc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 801521e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015220:	4618      	mov	r0, r3
 8015222:	3710      	adds	r7, #16
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}

08015228 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	460b      	mov	r3, r1
 8015232:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 8015234:	78fb      	ldrb	r3, [r7, #3]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d03a      	beq.n	80152b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 801523a:	78fa      	ldrb	r2, [r7, #3]
 801523c:	6879      	ldr	r1, [r7, #4]
 801523e:	4613      	mov	r3, r2
 8015240:	00db      	lsls	r3, r3, #3
 8015242:	1a9b      	subs	r3, r3, r2
 8015244:	440b      	add	r3, r1
 8015246:	330c      	adds	r3, #12
 8015248:	781b      	ldrb	r3, [r3, #0]
 801524a:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 801524c:	7b3b      	ldrb	r3, [r7, #12]
 801524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015252:	b2db      	uxtb	r3, r3
 8015254:	2b00      	cmp	r3, #0
 8015256:	d025      	beq.n	80152a4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8015258:	2301      	movs	r3, #1
 801525a:	73fb      	strb	r3, [r7, #15]
 801525c:	7bfb      	ldrb	r3, [r7, #15]
 801525e:	461a      	mov	r2, r3
 8015260:	7b39      	ldrb	r1, [r7, #12]
 8015262:	6878      	ldr	r0, [r7, #4]
 8015264:	f000 f828 	bl	80152b8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 8015268:	4603      	mov	r3, r0
 801526a:	73fb      	strb	r3, [r7, #15]
 801526c:	7bfb      	ldrb	r3, [r7, #15]
 801526e:	2b00      	cmp	r3, #0
 8015270:	bf14      	ite	ne
 8015272:	2301      	movne	r3, #1
 8015274:	2300      	moveq	r3, #0
 8015276:	b2db      	uxtb	r3, r3
 8015278:	2b00      	cmp	r3, #0
 801527a:	d005      	beq.n	8015288 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 801527c:	7bfb      	ldrb	r3, [r7, #15]
 801527e:	4619      	mov	r1, r3
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f7ff ffd1 	bl	8015228 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8015286:	e7e9      	b.n	801525c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	79db      	ldrb	r3, [r3, #7]
 801528c:	7b3a      	ldrb	r2, [r7, #12]
 801528e:	f3c2 0202 	ubfx	r2, r2, #0, #3
 8015292:	b2d2      	uxtb	r2, r2
 8015294:	4293      	cmp	r3, r2
 8015296:	d105      	bne.n	80152a4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	79db      	ldrb	r3, [r3, #7]
 801529c:	3b01      	subs	r3, #1
 801529e:	b2da      	uxtb	r2, r3
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 80152a4:	78fb      	ldrb	r3, [r7, #3]
 80152a6:	4619      	mov	r1, r3
 80152a8:	6878      	ldr	r0, [r7, #4]
 80152aa:	f7ff ff2d 	bl	8015108 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 80152ae:	e000      	b.n	80152b2 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 80152b0:	bf00      	nop
        }
 80152b2:	3710      	adds	r7, #16
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bd80      	pop	{r7, pc}

080152b8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 80152b8:	b480      	push	{r7}
 80152ba:	b085      	sub	sp, #20
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
 80152c0:	7039      	strb	r1, [r7, #0]
 80152c2:	4613      	mov	r3, r2
 80152c4:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80152c6:	78fb      	ldrb	r3, [r7, #3]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d004      	beq.n	80152d6 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80152cc:	78fb      	ldrb	r3, [r7, #3]
 80152ce:	2b0f      	cmp	r3, #15
 80152d0:	d801      	bhi.n	80152d6 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80152d2:	78fb      	ldrb	r3, [r7, #3]
 80152d4:	e000      	b.n	80152d8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 80152d6:	2301      	movs	r3, #1
 80152d8:	73fb      	strb	r3, [r7, #15]
 80152da:	7bfb      	ldrb	r3, [r7, #15]
 80152dc:	2b0f      	cmp	r3, #15
 80152de:	d816      	bhi.n	801530e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 80152e0:	7bfa      	ldrb	r2, [r7, #15]
 80152e2:	6879      	ldr	r1, [r7, #4]
 80152e4:	4613      	mov	r3, r2
 80152e6:	00db      	lsls	r3, r3, #3
 80152e8:	1a9b      	subs	r3, r3, r2
 80152ea:	440b      	add	r3, r1
 80152ec:	3308      	adds	r3, #8
 80152ee:	791b      	ldrb	r3, [r3, #4]
 80152f0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80152f4:	b2da      	uxtb	r2, r3
 80152f6:	783b      	ldrb	r3, [r7, #0]
 80152f8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80152fc:	b2db      	uxtb	r3, r3
 80152fe:	429a      	cmp	r2, r3
 8015300:	d101      	bne.n	8015306 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 8015302:	7bfb      	ldrb	r3, [r7, #15]
 8015304:	e004      	b.n	8015310 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 8015306:	7bfb      	ldrb	r3, [r7, #15]
 8015308:	3301      	adds	r3, #1
 801530a:	73fb      	strb	r3, [r7, #15]
 801530c:	e7e5      	b.n	80152da <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 801530e:	2300      	movs	r3, #0
        };
 8015310:	4618      	mov	r0, r3
 8015312:	3714      	adds	r7, #20
 8015314:	46bd      	mov	sp, r7
 8015316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531a:	4770      	bx	lr

0801531c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>:
        DPAD_DOWN_LEFT = 0x6,
        DPAD_LEFT = 0x7,
        DPAD_LEFT_UP = 0x8,
};

bool XBOXONESParser::checkDpad(ButtonEnum b) {
 801531c:	b480      	push	{r7}
 801531e:	b083      	sub	sp, #12
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
 8015324:	460b      	mov	r3, r1
 8015326:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8015328:	78fb      	ldrb	r3, [r7, #3]
 801532a:	2b03      	cmp	r3, #3
 801532c:	d86e      	bhi.n	801540c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf0>
 801532e:	a201      	add	r2, pc, #4	; (adr r2, 8015334 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x18>)
 8015330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015334:	08015345 	.word	0x08015345
 8015338:	08015377 	.word	0x08015377
 801533c:	080153a9 	.word	0x080153a9
 8015340:	080153db 	.word	0x080153db
                case UP:
                        return xboxOneSData.btn.dpad == DPAD_LEFT_UP || xboxOneSData.btn.dpad == DPAD_UP || xboxOneSData.btn.dpad == DPAD_UP_RIGHT;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	7c1b      	ldrb	r3, [r3, #16]
 8015348:	f003 030f 	and.w	r3, r3, #15
 801534c:	b2db      	uxtb	r3, r3
 801534e:	2b08      	cmp	r3, #8
 8015350:	d00d      	beq.n	801536e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x52>
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	7c1b      	ldrb	r3, [r3, #16]
 8015356:	f003 030f 	and.w	r3, r3, #15
 801535a:	b2db      	uxtb	r3, r3
 801535c:	2b01      	cmp	r3, #1
 801535e:	d006      	beq.n	801536e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x52>
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	7c1b      	ldrb	r3, [r3, #16]
 8015364:	f003 030f 	and.w	r3, r3, #15
 8015368:	b2db      	uxtb	r3, r3
 801536a:	2b02      	cmp	r3, #2
 801536c:	d101      	bne.n	8015372 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x56>
 801536e:	2301      	movs	r3, #1
 8015370:	e04d      	b.n	801540e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 8015372:	2300      	movs	r3, #0
 8015374:	e04b      	b.n	801540e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return xboxOneSData.btn.dpad == DPAD_UP_RIGHT || xboxOneSData.btn.dpad == DPAD_RIGHT || xboxOneSData.btn.dpad == DPAD_RIGHT_DOWN;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	7c1b      	ldrb	r3, [r3, #16]
 801537a:	f003 030f 	and.w	r3, r3, #15
 801537e:	b2db      	uxtb	r3, r3
 8015380:	2b02      	cmp	r3, #2
 8015382:	d00d      	beq.n	80153a0 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x84>
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	7c1b      	ldrb	r3, [r3, #16]
 8015388:	f003 030f 	and.w	r3, r3, #15
 801538c:	b2db      	uxtb	r3, r3
 801538e:	2b03      	cmp	r3, #3
 8015390:	d006      	beq.n	80153a0 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x84>
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	7c1b      	ldrb	r3, [r3, #16]
 8015396:	f003 030f 	and.w	r3, r3, #15
 801539a:	b2db      	uxtb	r3, r3
 801539c:	2b04      	cmp	r3, #4
 801539e:	d101      	bne.n	80153a4 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0x88>
 80153a0:	2301      	movs	r3, #1
 80153a2:	e034      	b.n	801540e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 80153a4:	2300      	movs	r3, #0
 80153a6:	e032      	b.n	801540e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return xboxOneSData.btn.dpad == DPAD_RIGHT_DOWN || xboxOneSData.btn.dpad == DPAD_DOWN || xboxOneSData.btn.dpad == DPAD_DOWN_LEFT;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	7c1b      	ldrb	r3, [r3, #16]
 80153ac:	f003 030f 	and.w	r3, r3, #15
 80153b0:	b2db      	uxtb	r3, r3
 80153b2:	2b04      	cmp	r3, #4
 80153b4:	d00d      	beq.n	80153d2 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xb6>
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	7c1b      	ldrb	r3, [r3, #16]
 80153ba:	f003 030f 	and.w	r3, r3, #15
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	2b05      	cmp	r3, #5
 80153c2:	d006      	beq.n	80153d2 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xb6>
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	7c1b      	ldrb	r3, [r3, #16]
 80153c8:	f003 030f 	and.w	r3, r3, #15
 80153cc:	b2db      	uxtb	r3, r3
 80153ce:	2b06      	cmp	r3, #6
 80153d0:	d101      	bne.n	80153d6 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xba>
 80153d2:	2301      	movs	r3, #1
 80153d4:	e01b      	b.n	801540e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 80153d6:	2300      	movs	r3, #0
 80153d8:	e019      	b.n	801540e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return xboxOneSData.btn.dpad == DPAD_DOWN_LEFT || xboxOneSData.btn.dpad == DPAD_LEFT || xboxOneSData.btn.dpad == DPAD_LEFT_UP;
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	7c1b      	ldrb	r3, [r3, #16]
 80153de:	f003 030f 	and.w	r3, r3, #15
 80153e2:	b2db      	uxtb	r3, r3
 80153e4:	2b06      	cmp	r3, #6
 80153e6:	d00d      	beq.n	8015404 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xe8>
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	7c1b      	ldrb	r3, [r3, #16]
 80153ec:	f003 030f 	and.w	r3, r3, #15
 80153f0:	b2db      	uxtb	r3, r3
 80153f2:	2b07      	cmp	r3, #7
 80153f4:	d006      	beq.n	8015404 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xe8>
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	7c1b      	ldrb	r3, [r3, #16]
 80153fa:	f003 030f 	and.w	r3, r3, #15
 80153fe:	b2db      	uxtb	r3, r3
 8015400:	2b08      	cmp	r3, #8
 8015402:	d101      	bne.n	8015408 <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xec>
 8015404:	2301      	movs	r3, #1
 8015406:	e002      	b.n	801540e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
 8015408:	2300      	movs	r3, #0
 801540a:	e000      	b.n	801540e <_ZN14XBOXONESParser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 801540c:	2300      	movs	r3, #0
        }
}
 801540e:	4618      	mov	r0, r3
 8015410:	370c      	adds	r7, #12
 8015412:	46bd      	mov	sp, r7
 8015414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015418:	4770      	bx	lr
 801541a:	bf00      	nop

0801541c <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum>:

uint16_t XBOXONESParser::getButtonPress(ButtonEnum b) {
 801541c:	b580      	push	{r7, lr}
 801541e:	b082      	sub	sp, #8
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
 8015424:	460b      	mov	r3, r1
 8015426:	70fb      	strb	r3, [r7, #3]
        if (b == L2)
 8015428:	78fb      	ldrb	r3, [r7, #3]
 801542a:	2b08      	cmp	r3, #8
 801542c:	d102      	bne.n	8015434 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x18>
                return xboxOneSData.trigger[0];
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	899b      	ldrh	r3, [r3, #12]
 8015432:	e026      	b.n	8015482 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x66>
        else if (b == R2)
 8015434:	78fb      	ldrb	r3, [r7, #3]
 8015436:	2b09      	cmp	r3, #9
 8015438:	d102      	bne.n	8015440 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x24>
                return xboxOneSData.trigger[1];
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	89db      	ldrh	r3, [r3, #14]
 801543e:	e020      	b.n	8015482 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x66>
        else if (b <= LEFT) // Dpad
 8015440:	78fb      	ldrb	r3, [r7, #3]
 8015442:	2b03      	cmp	r3, #3
 8015444:	d807      	bhi.n	8015456 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x3a>
                return checkDpad(b);
 8015446:	78fb      	ldrb	r3, [r7, #3]
 8015448:	4619      	mov	r1, r3
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f7ff ff66 	bl	801531c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 8015450:	4603      	mov	r3, r0
 8015452:	b29b      	uxth	r3, r3
 8015454:	e015      	b.n	8015482 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x66>
        else if (b == XBOX)
 8015456:	78fb      	ldrb	r3, [r7, #3]
 8015458:	2b10      	cmp	r3, #16
 801545a:	d103      	bne.n	8015464 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x48>
                return xboxButtonState;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	7e9b      	ldrb	r3, [r3, #26]
 8015460:	b29b      	uxth	r3, r3
 8015462:	e00e      	b.n	8015482 <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x66>
        return xboxOneSData.btn.val & (1UL << pgm_read_byte(&XBOX_ONE_S_BUTTONS[(uint8_t)b]));
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	691b      	ldr	r3, [r3, #16]
 8015468:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801546c:	b29a      	uxth	r2, r3
 801546e:	78fb      	ldrb	r3, [r7, #3]
 8015470:	4906      	ldr	r1, [pc, #24]	; (801548c <_ZN14XBOXONESParser14getButtonPressE10ButtonEnum+0x70>)
 8015472:	440b      	add	r3, r1
 8015474:	781b      	ldrb	r3, [r3, #0]
 8015476:	4619      	mov	r1, r3
 8015478:	2301      	movs	r3, #1
 801547a:	408b      	lsls	r3, r1
 801547c:	b29b      	uxth	r3, r3
 801547e:	4013      	ands	r3, r2
 8015480:	b29b      	uxth	r3, r3
}
 8015482:	4618      	mov	r0, r3
 8015484:	3708      	adds	r7, #8
 8015486:	46bd      	mov	sp, r7
 8015488:	bd80      	pop	{r7, pc}
 801548a:	bf00      	nop
 801548c:	08017d68 	.word	0x08017d68

08015490 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum>:

bool XBOXONESParser::getButtonClick(ButtonEnum b) {
 8015490:	b480      	push	{r7}
 8015492:	b085      	sub	sp, #20
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
 8015498:	460b      	mov	r3, r1
 801549a:	70fb      	strb	r3, [r7, #3]
        if(b == L2) {
 801549c:	78fb      	ldrb	r3, [r7, #3]
 801549e:	2b08      	cmp	r3, #8
 80154a0:	d10c      	bne.n	80154bc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0x2c>
                if(L2Clicked) {
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d005      	beq.n	80154b8 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0x28>
                        L2Clicked = false;
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2200      	movs	r2, #0
 80154b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                        return true;
 80154b4:	2301      	movs	r3, #1
 80154b6:	e04b      	b.n	8015550 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xc0>
                }
                return false;
 80154b8:	2300      	movs	r3, #0
 80154ba:	e049      	b.n	8015550 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xc0>
        } else if(b == R2) {
 80154bc:	78fb      	ldrb	r3, [r7, #3]
 80154be:	2b09      	cmp	r3, #9
 80154c0:	d10c      	bne.n	80154dc <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0x4c>
                if(R2Clicked) {
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d005      	beq.n	80154d8 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0x48>
                        R2Clicked = false;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2200      	movs	r2, #0
 80154d0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                        return true;
 80154d4:	2301      	movs	r3, #1
 80154d6:	e03b      	b.n	8015550 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xc0>
                }
                return false;
 80154d8:	2300      	movs	r3, #0
 80154da:	e039      	b.n	8015550 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xc0>
        } else if (b == XBOX) {
 80154dc:	78fb      	ldrb	r3, [r7, #3]
 80154de:	2b10      	cmp	r3, #16
 80154e0:	d10b      	bne.n	80154fa <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0x6a>
                bool click = xboxbuttonClickState;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	7f1b      	ldrb	r3, [r3, #28]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	bf14      	ite	ne
 80154ea:	2301      	movne	r3, #1
 80154ec:	2300      	moveq	r3, #0
 80154ee:	72bb      	strb	r3, [r7, #10]
                xboxbuttonClickState = 0; // Clear "click" event
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2200      	movs	r2, #0
 80154f4:	771a      	strb	r2, [r3, #28]
                return click;
 80154f6:	7abb      	ldrb	r3, [r7, #10]
 80154f8:	e02a      	b.n	8015550 <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xc0>
        }
        uint32_t mask = 1UL << pgm_read_byte(&XBOX_ONE_S_BUTTONS[(uint8_t)b]);
 80154fa:	78fb      	ldrb	r3, [r7, #3]
 80154fc:	4a17      	ldr	r2, [pc, #92]	; (801555c <_ZN14XBOXONESParser14getButtonClickE10ButtonEnum+0xcc>)
 80154fe:	4413      	add	r3, r2
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	461a      	mov	r2, r3
 8015504:	2301      	movs	r3, #1
 8015506:	4093      	lsls	r3, r2
 8015508:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	8ada      	ldrh	r2, [r3, #22]
 801550e:	7e1b      	ldrb	r3, [r3, #24]
 8015510:	041b      	lsls	r3, r3, #16
 8015512:	4313      	orrs	r3, r2
 8015514:	461a      	mov	r2, r3
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	4013      	ands	r3, r2
 801551a:	2b00      	cmp	r3, #0
 801551c:	bf14      	ite	ne
 801551e:	2301      	movne	r3, #1
 8015520:	2300      	moveq	r3, #0
 8015522:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	8ada      	ldrh	r2, [r3, #22]
 8015528:	7e1b      	ldrb	r3, [r3, #24]
 801552a:	041b      	lsls	r3, r3, #16
 801552c:	4313      	orrs	r3, r2
 801552e:	461a      	mov	r2, r3
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	43db      	mvns	r3, r3
 8015534:	4013      	ands	r3, r2
 8015536:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	b291      	uxth	r1, r2
 801553e:	2000      	movs	r0, #0
 8015540:	4301      	orrs	r1, r0
 8015542:	82d9      	strh	r1, [r3, #22]
 8015544:	0c12      	lsrs	r2, r2, #16
 8015546:	b2d2      	uxtb	r2, r2
 8015548:	2100      	movs	r1, #0
 801554a:	430a      	orrs	r2, r1
 801554c:	761a      	strb	r2, [r3, #24]
        return click;
 801554e:	7afb      	ldrb	r3, [r7, #11]
}
 8015550:	4618      	mov	r0, r3
 8015552:	3714      	adds	r7, #20
 8015554:	46bd      	mov	sp, r7
 8015556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555a:	4770      	bx	lr
 801555c:	08017d68 	.word	0x08017d68

08015560 <_ZN14XBOXONESParser12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONESParser::getAnalogHat(AnalogHatEnum a) {
 8015560:	b480      	push	{r7}
 8015562:	b083      	sub	sp, #12
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
 8015568:	460b      	mov	r3, r1
 801556a:	70fb      	strb	r3, [r7, #3]
        return xboxOneSData.hatValue[(uint8_t)a] - 32768; // Convert to signed integer
 801556c:	78fb      	ldrb	r3, [r7, #3]
 801556e:	687a      	ldr	r2, [r7, #4]
 8015570:	005b      	lsls	r3, r3, #1
 8015572:	4413      	add	r3, r2
 8015574:	889b      	ldrh	r3, [r3, #4]
 8015576:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 801557a:	b29b      	uxth	r3, r3
 801557c:	b21b      	sxth	r3, r3
}
 801557e:	4618      	mov	r0, r3
 8015580:	370c      	adds	r7, #12
 8015582:	46bd      	mov	sp, r7
 8015584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015588:	4770      	bx	lr
	...

0801558c <_ZN14XBOXONESParser5ParseEhPh>:

void XBOXONESParser::Parse(uint8_t len, uint8_t *buf) {
 801558c:	b580      	push	{r7, lr}
 801558e:	b086      	sub	sp, #24
 8015590:	af00      	add	r7, sp, #0
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	460b      	mov	r3, r1
 8015596:	607a      	str	r2, [r7, #4]
 8015598:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 801559a:	7afb      	ldrb	r3, [r7, #11]
 801559c:	2b01      	cmp	r3, #1
 801559e:	f240 80e5 	bls.w	801576c <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	f000 80e1 	beq.w	801576c <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	781b      	ldrb	r3, [r3, #0]
 80155ae:	2b01      	cmp	r3, #1
 80155b0:	d11a      	bne.n	80155e8 <_ZN14XBOXONESParser5ParseEhPh+0x5c>
                        memcpy(&xboxOneSData, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(xboxOneSData)));
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	1d18      	adds	r0, r3, #4
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	1c59      	adds	r1, r3, #1
 80155ba:	7afb      	ldrb	r3, [r7, #11]
 80155bc:	3b01      	subs	r3, #1
 80155be:	b2db      	uxtb	r3, r3
 80155c0:	2b0f      	cmp	r3, #15
 80155c2:	bf28      	it	cs
 80155c4:	230f      	movcs	r3, #15
 80155c6:	b2db      	uxtb	r3, r3
 80155c8:	461a      	mov	r2, r3
 80155ca:	f000 fae9 	bl	8015ba0 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (xboxOneSData.btn.val != oldButtonState.val) { // Check if anything has changed
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	691b      	ldr	r3, [r3, #16]
 80155d2:	f3c3 0217 	ubfx	r2, r3, #0, #24
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	7cd9      	ldrb	r1, [r3, #19]
 80155da:	8a9b      	ldrh	r3, [r3, #20]
 80155dc:	021b      	lsls	r3, r3, #8
 80155de:	430b      	orrs	r3, r1
 80155e0:	429a      	cmp	r2, r3
 80155e2:	f000 809f 	beq.w	8015724 <_ZN14XBOXONESParser5ParseEhPh+0x198>
 80155e6:	e030      	b.n	801564a <_ZN14XBOXONESParser5ParseEhPh+0xbe>
                else if (buf[0] == 0x02) { // This report contains the Xbox button
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	781b      	ldrb	r3, [r3, #0]
 80155ec:	2b02      	cmp	r3, #2
 80155ee:	d11c      	bne.n	801562a <_ZN14XBOXONESParser5ParseEhPh+0x9e>
                        xboxButtonState = buf[1];
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	785a      	ldrb	r2, [r3, #1]
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	769a      	strb	r2, [r3, #26]
                        if(xboxButtonState != xboxOldButtonState) {
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	7e9a      	ldrb	r2, [r3, #26]
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	7edb      	ldrb	r3, [r3, #27]
 8015600:	429a      	cmp	r2, r3
 8015602:	f000 80b0 	beq.w	8015766 <_ZN14XBOXONESParser5ParseEhPh+0x1da>
                            xboxbuttonClickState = xboxButtonState & ~xboxOldButtonState; // Update click state variable
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	7e9b      	ldrb	r3, [r3, #26]
 801560a:	b25a      	sxtb	r2, r3
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	7edb      	ldrb	r3, [r3, #27]
 8015610:	b25b      	sxtb	r3, r3
 8015612:	43db      	mvns	r3, r3
 8015614:	b25b      	sxtb	r3, r3
 8015616:	4013      	ands	r3, r2
 8015618:	b25b      	sxtb	r3, r3
 801561a:	b2da      	uxtb	r2, r3
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	771a      	strb	r2, [r3, #28]
                            xboxOldButtonState = xboxButtonState;
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	7e9a      	ldrb	r2, [r3, #26]
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	76da      	strb	r2, [r3, #27]
                        return;
 8015628:	e09d      	b.n	8015766 <_ZN14XBOXONESParser5ParseEhPh+0x1da>
                } else if (buf[0] == 0x04) // Heartbeat
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	2b04      	cmp	r3, #4
 8015630:	f000 809b 	beq.w	801576a <_ZN14XBOXONESParser5ParseEhPh+0x1de>
                        Notify(PSTR("\r\nUnknown report id: "), 0x80);
 8015634:	2180      	movs	r1, #128	; 0x80
 8015636:	484f      	ldr	r0, [pc, #316]	; (8015774 <_ZN14XBOXONESParser5ParseEhPh+0x1e8>)
 8015638:	f000 f966 	bl	8015908 <_Z8E_NotifyPKci>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	781b      	ldrb	r3, [r3, #0]
 8015640:	2180      	movs	r1, #128	; 0x80
 8015642:	4618      	mov	r0, r3
 8015644:	f7fc f9bf 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
                        return;
 8015648:	e090      	b.n	801576c <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        buttonClickState.val = xboxOneSData.btn.val & ~oldButtonState.val; // Update click state variable
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	691b      	ldr	r3, [r3, #16]
 801564e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8015652:	4619      	mov	r1, r3
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	7cda      	ldrb	r2, [r3, #19]
 8015658:	8a9b      	ldrh	r3, [r3, #20]
 801565a:	021b      	lsls	r3, r3, #8
 801565c:	4313      	orrs	r3, r2
 801565e:	43db      	mvns	r3, r3
 8015660:	400b      	ands	r3, r1
 8015662:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	b291      	uxth	r1, r2
 801566a:	2000      	movs	r0, #0
 801566c:	4301      	orrs	r1, r0
 801566e:	82d9      	strh	r1, [r3, #22]
 8015670:	0c12      	lsrs	r2, r2, #16
 8015672:	b2d2      	uxtb	r2, r2
 8015674:	2100      	movs	r1, #0
 8015676:	430a      	orrs	r2, r1
 8015678:	761a      	strb	r2, [r3, #24]
                        oldButtonState.val = xboxOneSData.btn.val;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	691b      	ldr	r3, [r3, #16]
 801567e:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	b2d1      	uxtb	r1, r2
 8015686:	2000      	movs	r0, #0
 8015688:	4301      	orrs	r1, r0
 801568a:	74d9      	strb	r1, [r3, #19]
 801568c:	0a12      	lsrs	r2, r2, #8
 801568e:	b292      	uxth	r2, r2
 8015690:	2100      	movs	r1, #0
 8015692:	430a      	orrs	r2, r1
 8015694:	829a      	strh	r2, [r3, #20]

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8015696:	2300      	movs	r3, #0
 8015698:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 801569a:	2100      	movs	r1, #0
 801569c:	68f8      	ldr	r0, [r7, #12]
 801569e:	f7ff fe3d 	bl	801531c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 80156a2:	4603      	mov	r3, r0
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d003      	beq.n	80156b0 <_ZN14XBOXONESParser5ParseEhPh+0x124>
                                newDpad |= 1 << UP;
 80156a8:	7dfb      	ldrb	r3, [r7, #23]
 80156aa:	f043 0301 	orr.w	r3, r3, #1
 80156ae:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 80156b0:	2101      	movs	r1, #1
 80156b2:	68f8      	ldr	r0, [r7, #12]
 80156b4:	f7ff fe32 	bl	801531c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 80156b8:	4603      	mov	r3, r0
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d003      	beq.n	80156c6 <_ZN14XBOXONESParser5ParseEhPh+0x13a>
                                newDpad |= 1 << RIGHT;
 80156be:	7dfb      	ldrb	r3, [r7, #23]
 80156c0:	f043 0302 	orr.w	r3, r3, #2
 80156c4:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 80156c6:	2102      	movs	r1, #2
 80156c8:	68f8      	ldr	r0, [r7, #12]
 80156ca:	f7ff fe27 	bl	801531c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 80156ce:	4603      	mov	r3, r0
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d003      	beq.n	80156dc <_ZN14XBOXONESParser5ParseEhPh+0x150>
                                newDpad |= 1 << DOWN;
 80156d4:	7dfb      	ldrb	r3, [r7, #23]
 80156d6:	f043 0304 	orr.w	r3, r3, #4
 80156da:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 80156dc:	2103      	movs	r1, #3
 80156de:	68f8      	ldr	r0, [r7, #12]
 80156e0:	f7ff fe1c 	bl	801531c <_ZN14XBOXONESParser9checkDpadE10ButtonEnum>
 80156e4:	4603      	mov	r3, r0
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d003      	beq.n	80156f2 <_ZN14XBOXONESParser5ParseEhPh+0x166>
                                newDpad |= 1 << LEFT;
 80156ea:	7dfb      	ldrb	r3, [r7, #23]
 80156ec:	f043 0308 	orr.w	r3, r3, #8
 80156f0:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	7e5b      	ldrb	r3, [r3, #25]
 80156f6:	7dfa      	ldrb	r2, [r7, #23]
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d013      	beq.n	8015724 <_ZN14XBOXONESParser5ParseEhPh+0x198>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	7e5b      	ldrb	r3, [r3, #25]
 8015700:	b25b      	sxtb	r3, r3
 8015702:	43db      	mvns	r3, r3
 8015704:	b25a      	sxtb	r2, r3
 8015706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801570a:	4013      	ands	r3, r2
 801570c:	b25b      	sxtb	r3, r3
 801570e:	f003 030f 	and.w	r3, r3, #15
 8015712:	b2d9      	uxtb	r1, r3
 8015714:	68fa      	ldr	r2, [r7, #12]
 8015716:	7d93      	ldrb	r3, [r2, #22]
 8015718:	f361 0303 	bfi	r3, r1, #0, #4
 801571c:	7593      	strb	r3, [r2, #22]
                                oldDpad = newDpad;
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	7dfa      	ldrb	r2, [r7, #23]
 8015722:	765a      	strb	r2, [r3, #25]
                        }
                }

                // Handle click detection for triggers
                if(xboxOneSData.trigger[0] != 0 && triggerOld[0] == 0)
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	899b      	ldrh	r3, [r3, #12]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d007      	beq.n	801573c <_ZN14XBOXONESParser5ParseEhPh+0x1b0>
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	8bdb      	ldrh	r3, [r3, #30]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d103      	bne.n	801573c <_ZN14XBOXONESParser5ParseEhPh+0x1b0>
                        L2Clicked = true;
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	2201      	movs	r2, #1
 8015738:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                triggerOld[0] = xboxOneSData.trigger[0];
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	899a      	ldrh	r2, [r3, #12]
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	83da      	strh	r2, [r3, #30]
                if(xboxOneSData.trigger[1] != 0 && triggerOld[1] == 0)
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	89db      	ldrh	r3, [r3, #14]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d007      	beq.n	801575c <_ZN14XBOXONESParser5ParseEhPh+0x1d0>
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	8c1b      	ldrh	r3, [r3, #32]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d103      	bne.n	801575c <_ZN14XBOXONESParser5ParseEhPh+0x1d0>
                        R2Clicked = true;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	2201      	movs	r2, #1
 8015758:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                triggerOld[1] = xboxOneSData.trigger[1];
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	89da      	ldrh	r2, [r3, #14]
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	841a      	strh	r2, [r3, #32]
 8015764:	e002      	b.n	801576c <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        return;
 8015766:	bf00      	nop
 8015768:	e000      	b.n	801576c <_ZN14XBOXONESParser5ParseEhPh+0x1e0>
                        return;
 801576a:	bf00      	nop
        }
}
 801576c:	3718      	adds	r7, #24
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}
 8015772:	bf00      	nop
 8015774:	08016c80 	.word	0x08016c80

08015778 <_ZN14XBOXONESParser5ResetEv>:

void XBOXONESParser::Reset() {
 8015778:	b480      	push	{r7}
 801577a:	b085      	sub	sp, #20
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(xboxOneSData.hatValue) / sizeof(xboxOneSData.hatValue[0]); i++)
 8015780:	2300      	movs	r3, #0
 8015782:	73fb      	strb	r3, [r7, #15]
 8015784:	7bfb      	ldrb	r3, [r7, #15]
 8015786:	2b03      	cmp	r3, #3
 8015788:	d80a      	bhi.n	80157a0 <_ZN14XBOXONESParser5ResetEv+0x28>
                xboxOneSData.hatValue[i] = 32768; // Center value
 801578a:	7bfb      	ldrb	r3, [r7, #15]
 801578c:	687a      	ldr	r2, [r7, #4]
 801578e:	005b      	lsls	r3, r3, #1
 8015790:	4413      	add	r3, r2
 8015792:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015796:	809a      	strh	r2, [r3, #4]
        for (i = 0; i < sizeof(xboxOneSData.hatValue) / sizeof(xboxOneSData.hatValue[0]); i++)
 8015798:	7bfb      	ldrb	r3, [r7, #15]
 801579a:	3301      	adds	r3, #1
 801579c:	73fb      	strb	r3, [r7, #15]
 801579e:	e7f1      	b.n	8015784 <_ZN14XBOXONESParser5ResetEv+0xc>
        xboxOneSData.btn.val = 0;
 80157a0:	687a      	ldr	r2, [r7, #4]
 80157a2:	6913      	ldr	r3, [r2, #16]
 80157a4:	f36f 0317 	bfc	r3, #0, #24
 80157a8:	6113      	str	r3, [r2, #16]
        oldButtonState.val = 0;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	2200      	movs	r2, #0
 80157ae:	74da      	strb	r2, [r3, #19]
 80157b0:	2200      	movs	r2, #0
 80157b2:	829a      	strh	r2, [r3, #20]
        for (i = 0; i < sizeof(xboxOneSData.trigger) / sizeof(xboxOneSData.trigger[0]); i++)
 80157b4:	2300      	movs	r3, #0
 80157b6:	73fb      	strb	r3, [r7, #15]
 80157b8:	7bfb      	ldrb	r3, [r7, #15]
 80157ba:	2b01      	cmp	r3, #1
 80157bc:	d80a      	bhi.n	80157d4 <_ZN14XBOXONESParser5ResetEv+0x5c>
                xboxOneSData.trigger[i] = 0;
 80157be:	7bfb      	ldrb	r3, [r7, #15]
 80157c0:	687a      	ldr	r2, [r7, #4]
 80157c2:	3304      	adds	r3, #4
 80157c4:	005b      	lsls	r3, r3, #1
 80157c6:	4413      	add	r3, r2
 80157c8:	2200      	movs	r2, #0
 80157ca:	809a      	strh	r2, [r3, #4]
        for (i = 0; i < sizeof(xboxOneSData.trigger) / sizeof(xboxOneSData.trigger[0]); i++)
 80157cc:	7bfb      	ldrb	r3, [r7, #15]
 80157ce:	3301      	adds	r3, #1
 80157d0:	73fb      	strb	r3, [r7, #15]
 80157d2:	e7f1      	b.n	80157b8 <_ZN14XBOXONESParser5ResetEv+0x40>

        xboxOneSData.btn.dpad = DPAD_OFF;
 80157d4:	687a      	ldr	r2, [r7, #4]
 80157d6:	7c13      	ldrb	r3, [r2, #16]
 80157d8:	f36f 0303 	bfc	r3, #0, #4
 80157dc:	7413      	strb	r3, [r2, #16]
        oldButtonState.dpad = DPAD_OFF;
 80157de:	687a      	ldr	r2, [r7, #4]
 80157e0:	7cd3      	ldrb	r3, [r2, #19]
 80157e2:	f36f 0303 	bfc	r3, #0, #4
 80157e6:	74d3      	strb	r3, [r2, #19]
        buttonClickState.dpad = 0;
 80157e8:	687a      	ldr	r2, [r7, #4]
 80157ea:	7d93      	ldrb	r3, [r2, #22]
 80157ec:	f36f 0303 	bfc	r3, #0, #4
 80157f0:	7593      	strb	r3, [r2, #22]
        oldDpad = 0;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	2200      	movs	r2, #0
 80157f6:	765a      	strb	r2, [r3, #25]
};
 80157f8:	bf00      	nop
 80157fa:	3714      	adds	r7, #20
 80157fc:	46bd      	mov	sp, r7
 80157fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015802:	4770      	bx	lr

08015804 <_ZN14XBOXONESParser11setRumbleOnEhhhh>:
        buf[6] = 0; // Start delay in 10 ms
        buf[7] = 0; // Loop count
        sendOutputReport(buf, sizeof(buf));
}

void XBOXONESParser::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
 8015804:	b580      	push	{r7, lr}
 8015806:	b084      	sub	sp, #16
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
 801580c:	4608      	mov	r0, r1
 801580e:	4611      	mov	r1, r2
 8015810:	461a      	mov	r2, r3
 8015812:	4603      	mov	r3, r0
 8015814:	70fb      	strb	r3, [r7, #3]
 8015816:	460b      	mov	r3, r1
 8015818:	70bb      	strb	r3, [r7, #2]
 801581a:	4613      	mov	r3, r2
 801581c:	707b      	strb	r3, [r7, #1]
        // See: https://lore.kernel.org/patchwork/patch/973394/
        uint8_t buf[8];
        buf[0] = 1 << 3 /* Left trigger */ | 1 << 2 /* Right trigger */ | 1 << 1 /* Left motor */ | 1 << 0 /* Right motor */;
 801581e:	230f      	movs	r3, #15
 8015820:	723b      	strb	r3, [r7, #8]
        buf[1] = leftTrigger;
 8015822:	78fb      	ldrb	r3, [r7, #3]
 8015824:	727b      	strb	r3, [r7, #9]
        buf[2] = rightTrigger;
 8015826:	78bb      	ldrb	r3, [r7, #2]
 8015828:	72bb      	strb	r3, [r7, #10]
        buf[3] = leftMotor;
 801582a:	787b      	ldrb	r3, [r7, #1]
 801582c:	72fb      	strb	r3, [r7, #11]
        buf[4] = rightMotor;
 801582e:	7e3b      	ldrb	r3, [r7, #24]
 8015830:	733b      	strb	r3, [r7, #12]
        buf[5] = 255; // Duration of effect in 10 ms
 8015832:	23ff      	movs	r3, #255	; 0xff
 8015834:	737b      	strb	r3, [r7, #13]
        buf[6] = 0; // Start delay in 10 ms
 8015836:	2300      	movs	r3, #0
 8015838:	73bb      	strb	r3, [r7, #14]
        buf[7] = 255; // Loop count
 801583a:	23ff      	movs	r3, #255	; 0xff
 801583c:	73fb      	strb	r3, [r7, #15]
        sendOutputReport(buf, sizeof(buf));
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	f107 0108 	add.w	r1, r7, #8
 8015848:	2208      	movs	r2, #8
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	4798      	blx	r3
}
 801584e:	bf00      	nop
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}

08015856 <_Z10D_PrintHexItEvT_i>:
template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8015856:	b580      	push	{r7, lr}
 8015858:	b082      	sub	sp, #8
 801585a:	af00      	add	r7, sp, #0
 801585c:	4603      	mov	r3, r0
 801585e:	6039      	str	r1, [r7, #0]
 8015860:	80fb      	strh	r3, [r7, #6]
        PrintHex<T > (val, lvl);
 8015862:	88fb      	ldrh	r3, [r7, #6]
 8015864:	6839      	ldr	r1, [r7, #0]
 8015866:	4618      	mov	r0, r3
 8015868:	f000 f804 	bl	8015874 <_Z8PrintHexItEvT_i>
}
 801586c:	bf00      	nop
 801586e:	3708      	adds	r7, #8
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}

08015874 <_Z8PrintHexItEvT_i>:
void PrintHex(T val, int lvl) {
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0
 801587a:	4603      	mov	r3, r0
 801587c:	6039      	str	r1, [r7, #0]
 801587e:	80fb      	strh	r3, [r7, #6]
        int num_nibbles = sizeof (T) * 2;
 8015880:	2304      	movs	r3, #4
 8015882:	60fb      	str	r3, [r7, #12]
                char v = 48 + (((val >> (num_nibbles - 1) * 4)) & 0x0f);
 8015884:	88fa      	ldrh	r2, [r7, #6]
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	3b01      	subs	r3, #1
 801588a:	009b      	lsls	r3, r3, #2
 801588c:	fa42 f303 	asr.w	r3, r2, r3
 8015890:	b2db      	uxtb	r3, r3
 8015892:	f003 030f 	and.w	r3, r3, #15
 8015896:	b2db      	uxtb	r3, r3
 8015898:	3330      	adds	r3, #48	; 0x30
 801589a:	72fb      	strb	r3, [r7, #11]
                if(v > 57) v += 7;
 801589c:	7afb      	ldrb	r3, [r7, #11]
 801589e:	2b39      	cmp	r3, #57	; 0x39
 80158a0:	d902      	bls.n	80158a8 <_Z8PrintHexItEvT_i+0x34>
 80158a2:	7afb      	ldrb	r3, [r7, #11]
 80158a4:	3307      	adds	r3, #7
 80158a6:	72fb      	strb	r3, [r7, #11]
                E_Notifyc(v, lvl);
 80158a8:	7afb      	ldrb	r3, [r7, #11]
 80158aa:	6839      	ldr	r1, [r7, #0]
 80158ac:	4618      	mov	r0, r3
 80158ae:	f000 f811 	bl	80158d4 <_Z9E_Notifycci>
        do {
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	3b01      	subs	r3, #1
 80158b6:	60fb      	str	r3, [r7, #12]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	bf14      	ite	ne
 80158be:	2301      	movne	r3, #1
 80158c0:	2300      	moveq	r3, #0
 80158c2:	b2db      	uxtb	r3, r3
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d000      	beq.n	80158ca <_Z8PrintHexItEvT_i+0x56>
 80158c8:	e7dc      	b.n	8015884 <_Z8PrintHexItEvT_i+0x10>
}
 80158ca:	bf00      	nop
 80158cc:	3710      	adds	r7, #16
 80158ce:	46bd      	mov	sp, r7
 80158d0:	bd80      	pop	{r7, pc}
	...

080158d4 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b082      	sub	sp, #8
 80158d8:	af00      	add	r7, sp, #0
 80158da:	4603      	mov	r3, r0
 80158dc:	6039      	str	r1, [r7, #0]
 80158de:	71fb      	strb	r3, [r7, #7]
        if(UsbDEBUGlvl < lvl) return;
 80158e0:	4b07      	ldr	r3, [pc, #28]	; (8015900 <_Z9E_Notifycci+0x2c>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	683a      	ldr	r2, [r7, #0]
 80158e6:	429a      	cmp	r2, r3
 80158e8:	dc05      	bgt.n	80158f6 <_Z9E_Notifycci+0x22>
#if defined(ARDUINO) && ARDUINO >=100
        USB_HOST_SERIAL.print(c);
 80158ea:	79fb      	ldrb	r3, [r7, #7]
 80158ec:	4619      	mov	r1, r3
 80158ee:	4805      	ldr	r0, [pc, #20]	; (8015904 <_Z9E_Notifycci+0x30>)
 80158f0:	f7ea fe70 	bl	80005d4 <_ZN5Print5printEc>
 80158f4:	e000      	b.n	80158f8 <_Z9E_Notifycci+0x24>
        if(UsbDEBUGlvl < lvl) return;
 80158f6:	bf00      	nop
#else
        USB_HOST_SERIAL.print(c, BYTE);
#endif
        //USB_HOST_SERIAL.flush();
}
 80158f8:	3708      	adds	r7, #8
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}
 80158fe:	bf00      	nop
 8015900:	2000011c 	.word	0x2000011c
 8015904:	200005c8 	.word	0x200005c8

08015908 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
 8015908:	b580      	push	{r7, lr}
 801590a:	b084      	sub	sp, #16
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
 8015910:	6039      	str	r1, [r7, #0]
        if(UsbDEBUGlvl < lvl) return;
 8015912:	4b10      	ldr	r3, [pc, #64]	; (8015954 <_Z8E_NotifyPKci+0x4c>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	683a      	ldr	r2, [r7, #0]
 8015918:	429a      	cmp	r2, r3
 801591a:	dc15      	bgt.n	8015948 <_Z8E_NotifyPKci+0x40>
        if(!msg) return;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d014      	beq.n	801594c <_Z8E_NotifyPKci+0x44>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	1c5a      	adds	r2, r3, #1
 8015926:	607a      	str	r2, [r7, #4]
 8015928:	781b      	ldrb	r3, [r3, #0]
 801592a:	73fb      	strb	r3, [r7, #15]
 801592c:	7bfb      	ldrb	r3, [r7, #15]
 801592e:	2b00      	cmp	r3, #0
 8015930:	bf14      	ite	ne
 8015932:	2301      	movne	r3, #1
 8015934:	2300      	moveq	r3, #0
 8015936:	b2db      	uxtb	r3, r3
 8015938:	2b00      	cmp	r3, #0
 801593a:	d008      	beq.n	801594e <_Z8E_NotifyPKci+0x46>
 801593c:	7bfb      	ldrb	r3, [r7, #15]
 801593e:	6839      	ldr	r1, [r7, #0]
 8015940:	4618      	mov	r0, r3
 8015942:	f7ff ffc7 	bl	80158d4 <_Z9E_Notifycci>
 8015946:	e7ec      	b.n	8015922 <_Z8E_NotifyPKci+0x1a>
        if(UsbDEBUGlvl < lvl) return;
 8015948:	bf00      	nop
 801594a:	e000      	b.n	801594e <_Z8E_NotifyPKci+0x46>
        if(!msg) return;
 801594c:	bf00      	nop
}
 801594e:	3710      	adds	r7, #16
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}
 8015954:	2000011c 	.word	0x2000011c

08015958 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
 8015958:	b580      	push	{r7, lr}
 801595a:	b084      	sub	sp, #16
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
 8015960:	6039      	str	r1, [r7, #0]
        if(UsbDEBUGlvl < lvl) return;
 8015962:	4b10      	ldr	r3, [pc, #64]	; (80159a4 <_Z11E_NotifyStrPKci+0x4c>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	683a      	ldr	r2, [r7, #0]
 8015968:	429a      	cmp	r2, r3
 801596a:	dc15      	bgt.n	8015998 <_Z11E_NotifyStrPKci+0x40>
        if(!msg) return;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d014      	beq.n	801599c <_Z11E_NotifyStrPKci+0x44>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	1c5a      	adds	r2, r3, #1
 8015976:	607a      	str	r2, [r7, #4]
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	73fb      	strb	r3, [r7, #15]
 801597c:	7bfb      	ldrb	r3, [r7, #15]
 801597e:	2b00      	cmp	r3, #0
 8015980:	bf14      	ite	ne
 8015982:	2301      	movne	r3, #1
 8015984:	2300      	moveq	r3, #0
 8015986:	b2db      	uxtb	r3, r3
 8015988:	2b00      	cmp	r3, #0
 801598a:	d008      	beq.n	801599e <_Z11E_NotifyStrPKci+0x46>
 801598c:	7bfb      	ldrb	r3, [r7, #15]
 801598e:	6839      	ldr	r1, [r7, #0]
 8015990:	4618      	mov	r0, r3
 8015992:	f7ff ff9f 	bl	80158d4 <_Z9E_Notifycci>
 8015996:	e7ec      	b.n	8015972 <_Z11E_NotifyStrPKci+0x1a>
        if(UsbDEBUGlvl < lvl) return;
 8015998:	bf00      	nop
 801599a:	e000      	b.n	801599e <_Z11E_NotifyStrPKci+0x46>
        if(!msg) return;
 801599c:	bf00      	nop
}
 801599e:	3710      	adds	r7, #16
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}
 80159a4:	2000011c 	.word	0x2000011c

080159a8 <_Z21NotifyFailGetDevDescrv>:
        //USB_HOST_SERIAL.flush();
}

#ifdef DEBUG_USB_HOST

void NotifyFailGetDevDescr(void) {
 80159a8:	b580      	push	{r7, lr}
 80159aa:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\ngetDevDescr "), 0x80);
 80159ac:	2180      	movs	r1, #128	; 0x80
 80159ae:	4802      	ldr	r0, [pc, #8]	; (80159b8 <_Z21NotifyFailGetDevDescrv+0x10>)
 80159b0:	f7ff ffaa 	bl	8015908 <_Z8E_NotifyPKci>
}
 80159b4:	bf00      	nop
 80159b6:	bd80      	pop	{r7, pc}
 80159b8:	08016c98 	.word	0x08016c98

080159bc <_Z24NotifyFailSetDevTblEntryv>:

void NotifyFailSetDevTblEntry(void) {
 80159bc:	b580      	push	{r7, lr}
 80159be:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\nsetDevTblEn "), 0x80);
 80159c0:	2180      	movs	r1, #128	; 0x80
 80159c2:	4802      	ldr	r0, [pc, #8]	; (80159cc <_Z24NotifyFailSetDevTblEntryv+0x10>)
 80159c4:	f7ff ffa0 	bl	8015908 <_Z8E_NotifyPKci>
}
 80159c8:	bf00      	nop
 80159ca:	bd80      	pop	{r7, pc}
 80159cc:	08016ca8 	.word	0x08016ca8

080159d0 <_Z22NotifyFailGetConfDescrv>:

void NotifyFailGetConfDescr(void) {
 80159d0:	b580      	push	{r7, lr}
 80159d2:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\ngetConf "), 0x80);
 80159d4:	2180      	movs	r1, #128	; 0x80
 80159d6:	4802      	ldr	r0, [pc, #8]	; (80159e0 <_Z22NotifyFailGetConfDescrv+0x10>)
 80159d8:	f7ff ff96 	bl	8015908 <_Z8E_NotifyPKci>
}
 80159dc:	bf00      	nop
 80159de:	bd80      	pop	{r7, pc}
 80159e0:	08016cb8 	.word	0x08016cb8

080159e4 <_Z22NotifyFailSetConfDescrv>:

void NotifyFailSetConfDescr(void) {
 80159e4:	b580      	push	{r7, lr}
 80159e6:	af00      	add	r7, sp, #0
        Notify(PSTR("\r\nsetConf "), 0x80);
 80159e8:	2180      	movs	r1, #128	; 0x80
 80159ea:	4802      	ldr	r0, [pc, #8]	; (80159f4 <_Z22NotifyFailSetConfDescrv+0x10>)
 80159ec:	f7ff ff8c 	bl	8015908 <_Z8E_NotifyPKci>
}
 80159f0:	bf00      	nop
 80159f2:	bd80      	pop	{r7, pc}
 80159f4:	08016cc4 	.word	0x08016cc4

080159f8 <_Z21NotifyFailGetDevDescrh>:

void NotifyFailGetDevDescr(uint8_t reason) {
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b082      	sub	sp, #8
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	4603      	mov	r3, r0
 8015a00:	71fb      	strb	r3, [r7, #7]
        NotifyFailGetDevDescr();
 8015a02:	f7ff ffd1 	bl	80159a8 <_Z21NotifyFailGetDevDescrv>
        NotifyFail(reason);
 8015a06:	79fb      	ldrb	r3, [r7, #7]
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f000 f827 	bl	8015a5c <_Z10NotifyFailh>
}
 8015a0e:	bf00      	nop
 8015a10:	3708      	adds	r7, #8
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
	...

08015a18 <_Z23NotifyFailUnknownDevicett>:
void NotifyFailSetConfDescr(uint8_t reason) {
        NotifyFailSetConfDescr();
        NotifyFail(reason);
}

void NotifyFailUnknownDevice(uint16_t VID, uint16_t PID) {
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	4603      	mov	r3, r0
 8015a20:	460a      	mov	r2, r1
 8015a22:	80fb      	strh	r3, [r7, #6]
 8015a24:	4613      	mov	r3, r2
 8015a26:	80bb      	strh	r3, [r7, #4]
        Notify(PSTR("\r\nUnknown Device Connected - VID: "), 0x80);
 8015a28:	2180      	movs	r1, #128	; 0x80
 8015a2a:	480a      	ldr	r0, [pc, #40]	; (8015a54 <_Z23NotifyFailUnknownDevicett+0x3c>)
 8015a2c:	f7ff ff6c 	bl	8015908 <_Z8E_NotifyPKci>
        D_PrintHex<uint16_t > (VID, 0x80);
 8015a30:	88fb      	ldrh	r3, [r7, #6]
 8015a32:	2180      	movs	r1, #128	; 0x80
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7ff ff0e 	bl	8015856 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR(" PID: "), 0x80);
 8015a3a:	2180      	movs	r1, #128	; 0x80
 8015a3c:	4806      	ldr	r0, [pc, #24]	; (8015a58 <_Z23NotifyFailUnknownDevicett+0x40>)
 8015a3e:	f7ff ff63 	bl	8015908 <_Z8E_NotifyPKci>
        D_PrintHex<uint16_t > (PID, 0x80);
 8015a42:	88bb      	ldrh	r3, [r7, #4]
 8015a44:	2180      	movs	r1, #128	; 0x80
 8015a46:	4618      	mov	r0, r3
 8015a48:	f7ff ff05 	bl	8015856 <_Z10D_PrintHexItEvT_i>
}
 8015a4c:	bf00      	nop
 8015a4e:	3708      	adds	r7, #8
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}
 8015a54:	08016cd0 	.word	0x08016cd0
 8015a58:	08016cf4 	.word	0x08016cf4

08015a5c <_Z10NotifyFailh>:

void NotifyFail(uint8_t rcode) {
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b082      	sub	sp, #8
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	4603      	mov	r3, r0
 8015a64:	71fb      	strb	r3, [r7, #7]
        D_PrintHex<uint8_t > (rcode, 0x80);
 8015a66:	79fb      	ldrb	r3, [r7, #7]
 8015a68:	2180      	movs	r1, #128	; 0x80
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7fb ffab 	bl	80119c6 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\n"), 0x80);
 8015a70:	2180      	movs	r1, #128	; 0x80
 8015a72:	4803      	ldr	r0, [pc, #12]	; (8015a80 <_Z10NotifyFailh+0x24>)
 8015a74:	f7ff ff48 	bl	8015908 <_Z8E_NotifyPKci>
}
 8015a78:	bf00      	nop
 8015a7a:	3708      	adds	r7, #8
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	08016cfc 	.word	0x08016cfc

08015a84 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b084      	sub	sp, #16
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	60f8      	str	r0, [r7, #12]
 8015a8c:	60b9      	str	r1, [r7, #8]
 8015a8e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d105      	bne.n	8015aa4 <_ZN20MultiByteValueParser5ParseEPPhPt+0x20>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
 8015a98:	2180      	movs	r1, #128	; 0x80
 8015a9a:	481d      	ldr	r0, [pc, #116]	; (8015b10 <_ZN20MultiByteValueParser5ParseEPPhPt+0x8c>)
 8015a9c:	f7ff ff34 	bl	8015908 <_Z8E_NotifyPKci>
                return false;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	e031      	b.n	8015b08 <_ZN20MultiByteValueParser5ParseEPPhPt+0x84>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	791b      	ldrb	r3, [r3, #4]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d022      	beq.n	8015af2 <_ZN20MultiByteValueParser5ParseEPPhPt+0x6e>
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	881b      	ldrh	r3, [r3, #0]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d01e      	beq.n	8015af2 <_ZN20MultiByteValueParser5ParseEPPhPt+0x6e>
                pBuf[valueSize - countDown] = (**pp);
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	681a      	ldr	r2, [r3, #0]
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	68f9      	ldr	r1, [r7, #12]
 8015abe:	7949      	ldrb	r1, [r1, #5]
 8015ac0:	4608      	mov	r0, r1
 8015ac2:	68f9      	ldr	r1, [r7, #12]
 8015ac4:	7909      	ldrb	r1, [r1, #4]
 8015ac6:	1a41      	subs	r1, r0, r1
 8015ac8:	440b      	add	r3, r1
 8015aca:	7812      	ldrb	r2, [r2, #0]
 8015acc:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	791b      	ldrb	r3, [r3, #4]
 8015ad2:	3b01      	subs	r3, #1
 8015ad4:	b2da      	uxtb	r2, r3
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	711a      	strb	r2, [r3, #4]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	881b      	ldrh	r3, [r3, #0]
 8015ade:	3b01      	subs	r3, #1
 8015ae0:	b29a      	uxth	r2, r3
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	801a      	strh	r2, [r3, #0]
 8015ae6:	68bb      	ldr	r3, [r7, #8]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	1c5a      	adds	r2, r3, #1
 8015aec:	68bb      	ldr	r3, [r7, #8]
 8015aee:	601a      	str	r2, [r3, #0]
 8015af0:	e7d8      	b.n	8015aa4 <_ZN20MultiByteValueParser5ParseEPPhPt+0x20>

        if(countDown)
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	791b      	ldrb	r3, [r3, #4]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d001      	beq.n	8015afe <_ZN20MultiByteValueParser5ParseEPPhPt+0x7a>
                return false;
 8015afa:	2300      	movs	r3, #0
 8015afc:	e004      	b.n	8015b08 <_ZN20MultiByteValueParser5ParseEPPhPt+0x84>

        countDown = valueSize;
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	795a      	ldrb	r2, [r3, #5]
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	711a      	strb	r2, [r3, #4]
        return true;
 8015b06:	2301      	movs	r3, #1
}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3710      	adds	r7, #16
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}
 8015b10:	08016d00 	.word	0x08016d00

08015b14 <__cxa_pure_virtual>:
 8015b14:	b508      	push	{r3, lr}
 8015b16:	f000 f80d 	bl	8015b34 <_ZSt9terminatev>

08015b1a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8015b1a:	b508      	push	{r3, lr}
 8015b1c:	4780      	blx	r0
 8015b1e:	f000 f80e 	bl	8015b3e <abort>
	...

08015b24 <_ZSt13get_terminatev>:
 8015b24:	4b02      	ldr	r3, [pc, #8]	; (8015b30 <_ZSt13get_terminatev+0xc>)
 8015b26:	6818      	ldr	r0, [r3, #0]
 8015b28:	f3bf 8f5b 	dmb	ish
 8015b2c:	4770      	bx	lr
 8015b2e:	bf00      	nop
 8015b30:	20000120 	.word	0x20000120

08015b34 <_ZSt9terminatev>:
 8015b34:	b508      	push	{r3, lr}
 8015b36:	f7ff fff5 	bl	8015b24 <_ZSt13get_terminatev>
 8015b3a:	f7ff ffee 	bl	8015b1a <_ZN10__cxxabiv111__terminateEPFvvE>

08015b3e <abort>:
 8015b3e:	b508      	push	{r3, lr}
 8015b40:	2006      	movs	r0, #6
 8015b42:	f000 f86b 	bl	8015c1c <raise>
 8015b46:	2001      	movs	r0, #1
 8015b48:	f7ec ffbc 	bl	8002ac4 <_exit>

08015b4c <__errno>:
 8015b4c:	4b01      	ldr	r3, [pc, #4]	; (8015b54 <__errno+0x8>)
 8015b4e:	6818      	ldr	r0, [r3, #0]
 8015b50:	4770      	bx	lr
 8015b52:	bf00      	nop
 8015b54:	20000124 	.word	0x20000124

08015b58 <__libc_init_array>:
 8015b58:	b570      	push	{r4, r5, r6, lr}
 8015b5a:	4d0d      	ldr	r5, [pc, #52]	; (8015b90 <__libc_init_array+0x38>)
 8015b5c:	4c0d      	ldr	r4, [pc, #52]	; (8015b94 <__libc_init_array+0x3c>)
 8015b5e:	1b64      	subs	r4, r4, r5
 8015b60:	10a4      	asrs	r4, r4, #2
 8015b62:	2600      	movs	r6, #0
 8015b64:	42a6      	cmp	r6, r4
 8015b66:	d109      	bne.n	8015b7c <__libc_init_array+0x24>
 8015b68:	4d0b      	ldr	r5, [pc, #44]	; (8015b98 <__libc_init_array+0x40>)
 8015b6a:	4c0c      	ldr	r4, [pc, #48]	; (8015b9c <__libc_init_array+0x44>)
 8015b6c:	f000 f884 	bl	8015c78 <_init>
 8015b70:	1b64      	subs	r4, r4, r5
 8015b72:	10a4      	asrs	r4, r4, #2
 8015b74:	2600      	movs	r6, #0
 8015b76:	42a6      	cmp	r6, r4
 8015b78:	d105      	bne.n	8015b86 <__libc_init_array+0x2e>
 8015b7a:	bd70      	pop	{r4, r5, r6, pc}
 8015b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015b80:	4798      	blx	r3
 8015b82:	3601      	adds	r6, #1
 8015b84:	e7ee      	b.n	8015b64 <__libc_init_array+0xc>
 8015b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8015b8a:	4798      	blx	r3
 8015b8c:	3601      	adds	r6, #1
 8015b8e:	e7f2      	b.n	8015b76 <__libc_init_array+0x1e>
 8015b90:	08017de0 	.word	0x08017de0
 8015b94:	08017de0 	.word	0x08017de0
 8015b98:	08017de0 	.word	0x08017de0
 8015b9c:	08017de8 	.word	0x08017de8

08015ba0 <memcpy>:
 8015ba0:	440a      	add	r2, r1
 8015ba2:	4291      	cmp	r1, r2
 8015ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8015ba8:	d100      	bne.n	8015bac <memcpy+0xc>
 8015baa:	4770      	bx	lr
 8015bac:	b510      	push	{r4, lr}
 8015bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015bb6:	4291      	cmp	r1, r2
 8015bb8:	d1f9      	bne.n	8015bae <memcpy+0xe>
 8015bba:	bd10      	pop	{r4, pc}

08015bbc <memset>:
 8015bbc:	4402      	add	r2, r0
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	4293      	cmp	r3, r2
 8015bc2:	d100      	bne.n	8015bc6 <memset+0xa>
 8015bc4:	4770      	bx	lr
 8015bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8015bca:	e7f9      	b.n	8015bc0 <memset+0x4>

08015bcc <_raise_r>:
 8015bcc:	291f      	cmp	r1, #31
 8015bce:	b538      	push	{r3, r4, r5, lr}
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	460d      	mov	r5, r1
 8015bd4:	d904      	bls.n	8015be0 <_raise_r+0x14>
 8015bd6:	2316      	movs	r3, #22
 8015bd8:	6003      	str	r3, [r0, #0]
 8015bda:	f04f 30ff 	mov.w	r0, #4294967295
 8015bde:	bd38      	pop	{r3, r4, r5, pc}
 8015be0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015be2:	b112      	cbz	r2, 8015bea <_raise_r+0x1e>
 8015be4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015be8:	b94b      	cbnz	r3, 8015bfe <_raise_r+0x32>
 8015bea:	4620      	mov	r0, r4
 8015bec:	f000 f830 	bl	8015c50 <_getpid_r>
 8015bf0:	462a      	mov	r2, r5
 8015bf2:	4601      	mov	r1, r0
 8015bf4:	4620      	mov	r0, r4
 8015bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bfa:	f000 b817 	b.w	8015c2c <_kill_r>
 8015bfe:	2b01      	cmp	r3, #1
 8015c00:	d00a      	beq.n	8015c18 <_raise_r+0x4c>
 8015c02:	1c59      	adds	r1, r3, #1
 8015c04:	d103      	bne.n	8015c0e <_raise_r+0x42>
 8015c06:	2316      	movs	r3, #22
 8015c08:	6003      	str	r3, [r0, #0]
 8015c0a:	2001      	movs	r0, #1
 8015c0c:	e7e7      	b.n	8015bde <_raise_r+0x12>
 8015c0e:	2400      	movs	r4, #0
 8015c10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015c14:	4628      	mov	r0, r5
 8015c16:	4798      	blx	r3
 8015c18:	2000      	movs	r0, #0
 8015c1a:	e7e0      	b.n	8015bde <_raise_r+0x12>

08015c1c <raise>:
 8015c1c:	4b02      	ldr	r3, [pc, #8]	; (8015c28 <raise+0xc>)
 8015c1e:	4601      	mov	r1, r0
 8015c20:	6818      	ldr	r0, [r3, #0]
 8015c22:	f7ff bfd3 	b.w	8015bcc <_raise_r>
 8015c26:	bf00      	nop
 8015c28:	20000124 	.word	0x20000124

08015c2c <_kill_r>:
 8015c2c:	b538      	push	{r3, r4, r5, lr}
 8015c2e:	4d07      	ldr	r5, [pc, #28]	; (8015c4c <_kill_r+0x20>)
 8015c30:	2300      	movs	r3, #0
 8015c32:	4604      	mov	r4, r0
 8015c34:	4608      	mov	r0, r1
 8015c36:	4611      	mov	r1, r2
 8015c38:	602b      	str	r3, [r5, #0]
 8015c3a:	f7ec ff33 	bl	8002aa4 <_kill>
 8015c3e:	1c43      	adds	r3, r0, #1
 8015c40:	d102      	bne.n	8015c48 <_kill_r+0x1c>
 8015c42:	682b      	ldr	r3, [r5, #0]
 8015c44:	b103      	cbz	r3, 8015c48 <_kill_r+0x1c>
 8015c46:	6023      	str	r3, [r4, #0]
 8015c48:	bd38      	pop	{r3, r4, r5, pc}
 8015c4a:	bf00      	nop
 8015c4c:	20006044 	.word	0x20006044

08015c50 <_getpid_r>:
 8015c50:	f7ec bf20 	b.w	8002a94 <_getpid>

08015c54 <strncmp>:
 8015c54:	b510      	push	{r4, lr}
 8015c56:	b16a      	cbz	r2, 8015c74 <strncmp+0x20>
 8015c58:	3901      	subs	r1, #1
 8015c5a:	1884      	adds	r4, r0, r2
 8015c5c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015c60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015c64:	4293      	cmp	r3, r2
 8015c66:	d103      	bne.n	8015c70 <strncmp+0x1c>
 8015c68:	42a0      	cmp	r0, r4
 8015c6a:	d001      	beq.n	8015c70 <strncmp+0x1c>
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d1f5      	bne.n	8015c5c <strncmp+0x8>
 8015c70:	1a98      	subs	r0, r3, r2
 8015c72:	bd10      	pop	{r4, pc}
 8015c74:	4610      	mov	r0, r2
 8015c76:	e7fc      	b.n	8015c72 <strncmp+0x1e>

08015c78 <_init>:
 8015c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c7a:	bf00      	nop
 8015c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c7e:	bc08      	pop	{r3}
 8015c80:	469e      	mov	lr, r3
 8015c82:	4770      	bx	lr

08015c84 <_fini>:
 8015c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c86:	bf00      	nop
 8015c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c8a:	bc08      	pop	{r3}
 8015c8c:	469e      	mov	lr, r3
 8015c8e:	4770      	bx	lr
