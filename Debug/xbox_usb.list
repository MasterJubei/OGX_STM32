
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013888  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e8  08013a58  08013a58  00023a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d40  08014d40  00030184  2**0
                  CONTENTS
  4 .ARM          00000008  08014d40  08014d40  00024d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d48  08014d48  00030184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014d48  08014d48  00024d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d50  08014d50  00024d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08014d54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005be4  20000184  08014ed8  00030184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005d68  08014ed8  00035d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00061f4c  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008dc9  00000000  00000000  00092100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002900  00000000  00000000  0009aed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002738  00000000  00000000  0009d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d195  00000000  00000000  0009ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000317ae  00000000  00000000  000cd09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f883d  00000000  00000000  000fe84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f7088  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b31c  00000000  00000000  001f70dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000184 	.word	0x20000184
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013a40 	.word	0x08013a40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000188 	.word	0x20000188
 800020c:	08013a40 	.word	0x08013a40

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	460b      	mov	r3, r1
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f000 f856 	bl	80006be <_ZN5Print5printEmi>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f000 f805 	bl	800063c <_ZN5Print5printEli>
 8000632:	4603      	mov	r3, r0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <_ZN5Print5printEli+0x26>
    return write(n);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	4611      	mov	r1, r2
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	4798      	blx	r3
 800065e:	4603      	mov	r3, r0
 8000660:	e029      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d11d      	bne.n	80006a4 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	2b00      	cmp	r3, #0
 800066c:	da12      	bge.n	8000694 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800066e:	212d      	movs	r1, #45	; 0x2d
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffaf 	bl	80005d4 <_ZN5Print5printEc>
 8000676:	4603      	mov	r3, r0
 8000678:	617b      	str	r3, [r7, #20]
      n = -n;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	425b      	negs	r3, r3
 800067e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	220a      	movs	r2, #10
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f839 	bl	80006fe <_ZN5Print11printNumberEmh>
 800068c:	4602      	mov	r2, r0
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4413      	add	r3, r2
 8000692:	e010      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	220a      	movs	r2, #10
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f000 f82f 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006a0:	4603      	mov	r3, r0
 80006a2:	e008      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	4619      	mov	r1, r3
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f826 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006b2:	4603      	mov	r3, r0
 80006b4:	bf00      	nop
  }
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d109      	bne.n	80006e4 <_ZN5Print5printEmi+0x26>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	4798      	blx	r3
 80006e0:	4603      	mov	r3, r0
 80006e2:	e008      	b.n	80006f6 <_ZN5Print5printEmi+0x38>
  else return printNumber(n, base);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f000 f806 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006f2:	4603      	mov	r3, r0
 80006f4:	bf00      	nop
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80006fe:	b580      	push	{r7, lr}
 8000700:	b090      	sub	sp, #64	; 0x40
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	4613      	mov	r3, r2
 800070a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	3320      	adds	r3, #32
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8000714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d801      	bhi.n	8000724 <_ZN5Print11printNumberEmh+0x26>
 8000720:	230a      	movs	r3, #10
 8000722:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000730:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 8000732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000734:	b2da      	uxtb	r2, r3
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	79f9      	ldrb	r1, [r7, #7]
 800073c:	fb11 f303 	smulbb	r3, r1, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800074c:	2b09      	cmp	r3, #9
 800074e:	d804      	bhi.n	800075a <_ZN5Print11printNumberEmh+0x5c>
 8000750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000754:	3330      	adds	r3, #48	; 0x30
 8000756:	b2db      	uxtb	r3, r3
 8000758:	e003      	b.n	8000762 <_ZN5Print11printNumberEmh+0x64>
 800075a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800075e:	3337      	adds	r3, #55	; 0x37
 8000760:	b2db      	uxtb	r3, r3
 8000762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000764:	3a01      	subs	r2, #1
 8000766:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800076a:	7013      	strb	r3, [r2, #0]
  } while(n);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d000      	beq.n	8000774 <_ZN5Print11printNumberEmh+0x76>
  do {
 8000772:	e7d7      	b.n	8000724 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff fece 	bl	8000518 <_ZN5Print5writeEPKc>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3740      	adds	r7, #64	; 0x40
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3304      	adds	r3, #4
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1cf9      	adds	r1, r7, #3
 800079c:	2201      	movs	r2, #1
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	4798      	blx	r3
 80007a2:	4603      	mov	r3, r0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	6918      	ldr	r0, [r3, #16]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	6979      	ldr	r1, [r7, #20]
 80007ca:	f006 fb00 	bl	8006dce <HAL_UART_Transmit>
	return size;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6918      	ldr	r0, [r3, #16]
 80007e4:	f107 010f 	add.w	r1, r7, #15
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2201      	movs	r2, #1
 80007ee:	f006 fb80 	bl	8006ef2 <HAL_UART_Receive>
	return data;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	return -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <_ZN5PrintC1Ev+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	08013ce4 	.word	0x08013ce4

08000868 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffe4 	bl	8000840 <_ZN5PrintC1Ev>
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_ZN6StreamC1Ev+0x28>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	08013e34 	.word	0x08013e34

08000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffe1 	bl	8000868 <_ZN6StreamC1Ev>
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	611a      	str	r2, [r3, #16]
	};
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08013cf4 	.word	0x08013cf4

080008c0 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	4903      	ldr	r1, [pc, #12]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <_ZN2P910SetDirReadEv+0x28>)
 80008da:	f002 f941 	bl	8002b60 <HAL_GPIO_Init>
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001a0 	.word	0x200001a0
 80008e8:	40020800 	.word	0x40020800

080008ec <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <_ZN3P103SetEv+0x14>)
 80008f6:	f002 fadf 	bl	8002eb8 <HAL_GPIO_WritePin>
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400

08000904 <_ZN3P105ClearEv>:
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <_ZN3P105ClearEv+0x14>)
 800090e:	f002 fad3 	bl	8002eb8 <HAL_GPIO_WritePin>
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020400 	.word	0x40020400

0800091c <_ZN3P1011SetDirWriteEv>:
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000934:	2203      	movs	r2, #3
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	4902      	ldr	r1, [pc, #8]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <_ZN3P1011SetDirWriteEv+0x2c>)
 800093c:	f002 f910 	bl	8002b60 <HAL_GPIO_Init>
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200001b4 	.word	0x200001b4
 8000948:	40020400 	.word	0x40020400

0800094c <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2206      	movs	r2, #6
 8000966:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffde 	bl	800094c <_ZN3BTD11pairWithHIDEv>
        };
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4798      	blx	r3
                OnInitBTHID();
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	331c      	adds	r3, #28
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	4798      	blx	r3
        };
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	460b      	mov	r3, r1
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	72fb      	strb	r3, [r7, #11]
                return;
 80009d0:	bf00      	nop
        }
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_ZN9PS4ParserC1Ev+0x20>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
                Reset();
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f011 fa0a 	bl	8011e04 <_ZN9PS4Parser5ResetEv>
        };
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08013e28 	.word	0x08013e28

08000a00 <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f81c 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	460b      	mov	r3, r1
 8000a24:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	2b20      	cmp	r3, #32
 8000a2a:	d105      	bne.n	8000a38 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 8000a2c:	22ff      	movs	r2, #255	; 0xff
 8000a2e:	2100      	movs	r1, #0
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f80a 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000a36:	e004      	b.n	8000a42 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	21ff      	movs	r1, #255	; 0xff
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f804 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
 8000a56:	4613      	mov	r3, r2
 8000a58:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	78fa      	ldrb	r2, [r7, #3]
 8000a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	78ba      	ldrb	r2, [r7, #2]
 8000a66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	4608      	mov	r0, r1
 8000a88:	4611      	mov	r1, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	70fb      	strb	r3, [r7, #3]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70bb      	strb	r3, [r7, #2]
 8000a94:	4613      	mov	r3, r2
 8000a96:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	78fa      	ldrb	r2, [r7, #3]
 8000a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	78ba      	ldrb	r2, [r7, #2]
 8000aa4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	787a      	ldrb	r2, [r7, #1]
 8000aac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	141b      	asrs	r3, r3, #16
 8000ad2:	b2d9      	uxtb	r1, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	121b      	asrs	r3, r3, #8
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffcd 	bl	8000a7e <_ZN9PS4Parser6setLedEhhh>
        };
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	f00f ff98 	bl	8010a38 <_ZN5BTHIDC1EP3BTDbPKc>
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3378      	adds	r3, #120	; 0x78
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff65 	bl	80009dc <_ZN9PS4ParserC1Ev>
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3378      	adds	r3, #120	; 0x78
 8000b22:	4618      	mov	r0, r3
 8000b24:	f011 f96e 	bl	8011e04 <_ZN9PS4Parser5ResetEv>
        };
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	08013dec 	.word	0x08013dec
 8000b38:	08013e1c 	.word	0x08013e1c

08000b3c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3378      	adds	r3, #120	; 0x78
 8000b66:	7af9      	ldrb	r1, [r7, #11]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f011 f885 	bl	8011c7a <_ZN9PS4Parser5ParseEhPh>
        };
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3378      	adds	r3, #120	; 0x78
 8000b84:	4618      	mov	r0, r3
 8000b86:	f011 f93d 	bl	8011e04 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f855 	bl	8000c3a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3378      	adds	r3, #120	; 0x78
 8000b9c:	21ff      	movs	r1, #255	; 0xff
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff90 	bl	8000ac4 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3378      	adds	r3, #120	; 0x78
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f011 f923 	bl	8011e04 <_ZN9PS4Parser5ResetEv>
        };
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b096      	sub	sp, #88	; 0x58
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	224f      	movs	r2, #79	; 0x4f
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f012 fed3 	bl	8013984 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000bde:	2352      	movs	r3, #82	; 0x52
 8000be0:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000be2:	2311      	movs	r3, #17
 8000be4:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000bea:	23ff      	movs	r3, #255	; 0xff
 8000bec:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	785b      	ldrb	r3, [r3, #1]
 8000bf2:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	78db      	ldrb	r3, [r3, #3]
 8000c04:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	791b      	ldrb	r3, [r3, #4]
 8000c0a:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	799b      	ldrb	r3, [r3, #6]
 8000c16:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	224f      	movs	r2, #79	; 0x4f
 8000c24:	4619      	mov	r1, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f81a 	bl	8000c60 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c2c:	bf00      	nop
 8000c2e:	3758      	adds	r7, #88	; 0x58
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000c34:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000c38:	e7c5      	b.n	8000bc6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000c3a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000c42:	2343      	movs	r3, #67	; 0x43
 8000c44:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000c46:	2302      	movs	r3, #2
 8000c48:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	2202      	movs	r2, #2
 8000c50:	4619      	mov	r1, r3
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f804 	bl	8000c60 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6898      	ldr	r0, [r3, #8]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8999      	ldrh	r1, [r3, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	7d9b      	ldrb	r3, [r3, #22]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	7dd2      	ldrb	r2, [r2, #23]
 8000c7e:	79fc      	ldrb	r4, [r7, #7]
 8000c80:	9201      	str	r2, [sp, #4]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4623      	mov	r3, r4
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f00e ff72 	bl	800fb70 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
    {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f001 fe1a 	bl	80028d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f8e4 	bl	8000e68 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f000 fa42 	bl	8001128 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000ca4:	f000 fa12 	bl	80010cc <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000ca8:	f000 f9d4 	bl	8001054 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000cac:	f00c f8ae 	bl	800ce0c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000cb0:	f000 f972 	bl	8000f98 <_ZL13MX_TIM14_Initv>
  MX_I2C1_Init();
 8000cb4:	f000 f99a 	bl	8000fec <_ZL12MX_I2C1_Initv>

  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* For the USB Host Shield Library*/
  SPI_Handle = hspi1;
 8000cb8:	4a49      	ldr	r2, [pc, #292]	; (8000de0 <main+0x14c>)
 8000cba:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <main+0x150>)
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	2358      	movs	r3, #88	; 0x58
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	f012 fe50 	bl	8013968 <memcpy>
  UART_Handle = huart2;
 8000cc8:	4a47      	ldr	r2, [pc, #284]	; (8000de8 <main+0x154>)
 8000cca:	4b48      	ldr	r3, [pc, #288]	; (8000dec <main+0x158>)
 8000ccc:	4610      	mov	r0, r2
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2344      	movs	r3, #68	; 0x44
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f012 fe48 	bl	8013968 <memcpy>

  /* The Primary Timer, since using freeRTOS, not using systick */
  HAL_TIM_Base_Start_IT(&htim14);
 8000cd8:	4845      	ldr	r0, [pc, #276]	; (8000df0 <main+0x15c>)
 8000cda:	f005 fdd7 	bl	800688c <HAL_TIM_Base_Start_IT>

  /* Verify our CPU Frequency
   * We should get a 500ms delay here */
  Serial.print(F("\r\nCPU Frequency is: "));
 8000cde:	4945      	ldr	r1, [pc, #276]	; (8000df4 <main+0x160>)
 8000ce0:	4845      	ldr	r0, [pc, #276]	; (8000df8 <main+0x164>)
 8000ce2:	f7ff fc5b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq() / 1000000;
 8000ce6:	f003 fff9 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a43      	ldr	r2, [pc, #268]	; (8000dfc <main+0x168>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	0c9b      	lsrs	r3, r3, #18
 8000cf4:	4a42      	ldr	r2, [pc, #264]	; (8000e00 <main+0x16c>)
 8000cf6:	6013      	str	r3, [r2, #0]
  Serial.print((int) cpu_freq);
 8000cf8:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <main+0x16c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	4619      	mov	r1, r3
 8000d00:	483d      	ldr	r0, [pc, #244]	; (8000df8 <main+0x164>)
 8000d02:	f7ff fc8b 	bl	800061c <_ZN5Print5printEii>
  Serial.print("MHz");
 8000d06:	493f      	ldr	r1, [pc, #252]	; (8000e04 <main+0x170>)
 8000d08:	483b      	ldr	r0, [pc, #236]	; (8000df8 <main+0x164>)
 8000d0a:	f7ff fc55 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000d0e:	493e      	ldr	r1, [pc, #248]	; (8000e08 <main+0x174>)
 8000d10:	4839      	ldr	r0, [pc, #228]	; (8000df8 <main+0x164>)
 8000d12:	f7ff fc51 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <main+0x15c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <main+0x178>)
 8000d20:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500);
 8000d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d26:	f001 fe15 	bl	8002954 <HAL_Delay>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <main+0x15c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <main+0x178>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <main+0x178>)
 8000d3c:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000d3e:	4934      	ldr	r1, [pc, #208]	; (8000e10 <main+0x17c>)
 8000d40:	482d      	ldr	r0, [pc, #180]	; (8000df8 <main+0x164>)
 8000d42:	f7ff fc39 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int) timer_val / 10);
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <main+0x178>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <main+0x180>)
 8000d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	220a      	movs	r2, #10
 8000d56:	4619      	mov	r1, r3
 8000d58:	4827      	ldr	r0, [pc, #156]	; (8000df8 <main+0x164>)
 8000d5a:	f7ff fc5f 	bl	800061c <_ZN5Print5printEii>
  Serial.print(" ms");
 8000d5e:	492e      	ldr	r1, [pc, #184]	; (8000e18 <main+0x184>)
 8000d60:	4825      	ldr	r0, [pc, #148]	; (8000df8 <main+0x164>)
 8000d62:	f7ff fc29 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;
  Serial.print((int) hal_gettick);
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <main+0x188>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4822      	ldr	r0, [pc, #136]	; (8000df8 <main+0x164>)
 8000d70:	f7ff fc54 	bl	800061c <_ZN5Print5printEii>

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000d74:	f009 fafc 	bl	800a370 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000d78:	4a29      	ldr	r2, [pc, #164]	; (8000e20 <main+0x18c>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4829      	ldr	r0, [pc, #164]	; (8000e24 <main+0x190>)
 8000d7e:	f009 fb41 	bl	800a404 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <main+0x194>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000d88:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <main+0x198>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4828      	ldr	r0, [pc, #160]	; (8000e30 <main+0x19c>)
 8000d8e:	f009 fb39 	bl	800a404 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <main+0x1a0>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of controllerJoin */
  controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <main+0x1a4>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4827      	ldr	r0, [pc, #156]	; (8000e3c <main+0x1a8>)
 8000d9e:	f009 fb31 	bl	800a404 <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <main+0x1ac>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of buttonPress */
  buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 8000da8:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <main+0x1b0>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4826      	ldr	r0, [pc, #152]	; (8000e48 <main+0x1b4>)
 8000dae:	f009 fb29 	bl	800a404 <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <main+0x1b8>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of updateLCD */
  updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <main+0x1bc>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4825      	ldr	r0, [pc, #148]	; (8000e54 <main+0x1c0>)
 8000dbe:	f009 fb21 	bl	800a404 <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a24      	ldr	r2, [pc, #144]	; (8000e58 <main+0x1c4>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* creation of getLatencies, Used to Meaesure latencies of tasks*/
  getLatencies = osThreadNew(StartGetLatencies, NULL, &getLatencies_attributes);
 8000dc8:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <main+0x1c8>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4824      	ldr	r0, [pc, #144]	; (8000e60 <main+0x1cc>)
 8000dce:	f009 fb19 	bl	800a404 <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <main+0x1d0>)
 8000dd6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dd8:	f009 faee 	bl	800a3b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <main+0x148>
 8000dde:	bf00      	nop
 8000de0:	20000320 	.word	0x20000320
 8000de4:	20000224 	.word	0x20000224
 8000de8:	20000378 	.word	0x20000378
 8000dec:	2000027c 	.word	0x2000027c
 8000df0:	200002c0 	.word	0x200002c0
 8000df4:	08013aa0 	.word	0x08013aa0
 8000df8:	200003bc 	.word	0x200003bc
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	20000674 	.word	0x20000674
 8000e04:	08013ab8 	.word	0x08013ab8
 8000e08:	08013abc 	.word	0x08013abc
 8000e0c:	20000678 	.word	0x20000678
 8000e10:	08013ac4 	.word	0x08013ac4
 8000e14:	cccccccd 	.word	0xcccccccd
 8000e18:	08013ad8 	.word	0x08013ad8
 8000e1c:	2000067c 	.word	0x2000067c
 8000e20:	08013d0c 	.word	0x08013d0c
 8000e24:	080013a5 	.word	0x080013a5
 8000e28:	20000308 	.word	0x20000308
 8000e2c:	08013d30 	.word	0x08013d30
 8000e30:	08001ab1 	.word	0x08001ab1
 8000e34:	2000030c 	.word	0x2000030c
 8000e38:	08013d54 	.word	0x08013d54
 8000e3c:	08001b01 	.word	0x08001b01
 8000e40:	20000310 	.word	0x20000310
 8000e44:	08013d78 	.word	0x08013d78
 8000e48:	08001b59 	.word	0x08001b59
 8000e4c:	20000314 	.word	0x20000314
 8000e50:	08013d9c 	.word	0x08013d9c
 8000e54:	08001bf5 	.word	0x08001bf5
 8000e58:	20000318 	.word	0x20000318
 8000e5c:	08013dc0 	.word	0x08013dc0
 8000e60:	080012b5 	.word	0x080012b5
 8000e64:	2000031c 	.word	0x2000031c

08000e68 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
    {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0ac      	sub	sp, #176	; 0xb0
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e72:	2234      	movs	r2, #52	; 0x34
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f012 fd84 	bl	8013984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	225c      	movs	r2, #92	; 0x5c
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f012 fd75 	bl	8013984 <memset>

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <SystemClock_Config+0x128>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a3b      	ldr	r2, [pc, #236]	; (8000f90 <SystemClock_Config+0x128>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <SystemClock_Config+0x128>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a35      	ldr	r2, [pc, #212]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eec:	2304      	movs	r3, #4
 8000eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ef2:	23a8      	movs	r3, #168	; 0xa8
 8000ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000efe:	2307      	movs	r3, #7
 8000f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fc26 	bl	8005760 <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xc0>
      {
    Error_Handler();
 8000f24:	f000 ff96 	bl	8001e54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	66bb      	str	r3, [r7, #104]	; 0x68
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f38:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f44:	2105      	movs	r1, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fde2 	bl	8004b10 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0xf8>
      {
    Error_Handler();
 8000f5c:	f000 ff7a 	bl	8001e54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f64:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f66:	2300      	movs	r3, #0
 8000f68:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 ff1a 	bl	8004da8 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf14      	ite	ne
 8000f7a:	2301      	movne	r3, #1
 8000f7c:	2300      	moveq	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x120>
      {
    Error_Handler();
 8000f84:	f000 ff66 	bl	8001e54 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	37b0      	adds	r7, #176	; 0xb0
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <_ZL13MX_TIM14_Initv>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
    {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <_ZL13MX_TIM14_Initv+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168 / 2) * 100 - 1;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fa4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000fa8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000 - 1;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fb6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fc4:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fc6:	f005 fc11 	bl	80067ec <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf14      	ite	ne
 8000fd0:	2301      	movne	r3, #1
 8000fd2:	2300      	moveq	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <_ZL13MX_TIM14_Initv+0x46>
      {
    Error_Handler();
 8000fda:	f000 ff3b 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200002c0 	.word	0x200002c0
 8000fe8:	40002000 	.word	0x40002000

08000fec <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
    {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <_ZL12MX_I2C1_Initv+0x60>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <_ZL12MX_I2C1_Initv+0x64>)
 8000ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800100a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800102a:	f001 ff5f 	bl	8002eec <HAL_I2C_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <_ZL12MX_I2C1_Initv+0x56>
      {
    Error_Handler();
 800103e:	f000 ff09 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001d0 	.word	0x200001d0
 800104c:	40005400 	.word	0x40005400
 8001050:	00061a80 	.word	0x00061a80

08001054 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
    {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <_ZL12MX_SPI1_Initv+0x74>)
 800105c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001060:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001084:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001088:	2218      	movs	r2, #24
 800108a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 80010a0:	220a      	movs	r2, #10
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 80010a6:	f004 fdf9 	bl	8005c9c <HAL_SPI_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <_ZL12MX_SPI1_Initv+0x6a>
      {
    Error_Handler();
 80010ba:	f000 fecb 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000224 	.word	0x20000224
 80010c8:	40013000 	.word	0x40013000

080010cc <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
    {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_ZL19MX_USART2_UART_Initv+0x58>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001104:	f005 fe16 	bl	8006d34 <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf14      	ite	ne
 800110e:	2301      	movne	r3, #1
 8001110:	2300      	moveq	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <_ZL19MX_USART2_UART_Initv+0x50>
      {
    Error_Handler();
 8001118:	f000 fe9c 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000027c 	.word	0x2000027c
 8001124:	40004400 	.word	0x40004400

08001128 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
    {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a35      	ldr	r2, [pc, #212]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2e      	ldr	r2, [pc, #184]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a27      	ldr	r2, [pc, #156]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a20      	ldr	r2, [pc, #128]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <_ZL12MX_GPIO_Initv+0xf8>)
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <_ZL12MX_GPIO_Initv+0xfc>)
 80011c4:	f001 fccc 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4812      	ldr	r0, [pc, #72]	; (8001228 <_ZL12MX_GPIO_Initv+0x100>)
 80011de:	f001 fcbf 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011e2:	2310      	movs	r3, #16
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <_ZL12MX_GPIO_Initv+0x104>)
 80011f6:	f001 fcb3 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <_ZL12MX_GPIO_Initv+0x104>)
 8001210:	f001 fca6 	bl	8002b60 <HAL_GPIO_Init>
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	10210000 	.word	0x10210000
 8001224:	40020800 	.word	0x40020800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400

08001230 <_Z23ProcessKeyCodeInContexth>:

/* USER CODE BEGIN 4 */
void ProcessKeyCodeInContext(uint8_t keyCode)
    {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  /*Updates the display_no
   * We could also just call display funcitons directly here, but since we have extra processing speed
   * Let's play with freeRTOS */
  if (display_no == 0) { /* This is the status screen, show if controller or not connected */
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10d      	bne.n	800125e <_Z23ProcessKeyCodeInContexth+0x2e>
    if (keyCode == BACK_BTN)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d103      	bne.n	8001250 <_Z23ProcessKeyCodeInContexth+0x20>
      display_no = 1;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e01e      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b06      	cmp	r3, #6
 8001254:	d11b      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 1;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e017      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
  } else if (display_no == 1) { /* Pair Controller Screen */
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d113      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    if (keyCode == BACK_BTN)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d103      	bne.n	8001274 <_Z23ProcessKeyCodeInContexth+0x44>
      display_no = 0;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	e00c      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b06      	cmp	r3, #6
 8001278:	d103      	bne.n	8001282 <_Z23ProcessKeyCodeInContexth+0x52>
      display_no = 0;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e005      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == SELECT_BTN) {
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b05      	cmp	r3, #5
 8001286:	d102      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 7; /* Only get to the pair status screen from here */
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800128a:	2207      	movs	r2, #7
 800128c:	701a      	strb	r2, [r3, #0]
  } else if (display_no == 2) {

  }
//  Serial.print("\r\nDisplay no is: ");
//  Serial.print(display_no);
  display_run_once = 0;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_Z23ProcessKeyCodeInContexth+0x7c>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
  display_force_update = 1;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <_Z23ProcessKeyCodeInContexth+0x80>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000680 	.word	0x20000680
 80012ac:	20000684 	.word	0x20000684
 80012b0:	20000683 	.word	0x20000683

080012b4 <_Z17StartGetLatenciesPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartGetLatencies(void *argument)
    {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetLatencies */
  /* Infinite loop */
  for (;;)
      {
#if rtos_delay_view //this is just used to measure the delay of StartGetBT task
    if (timer_val_getBT >= 7) {
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <_Z17StartGetLatenciesPv+0xbc>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	2b06      	cmp	r3, #6
 80012c2:	d90a      	bls.n	80012da <_Z17StartGetLatenciesPv+0x26>
      Serial.print("\r\nWarning High CPU/BT Latency, getBT latency is: ");
 80012c4:	492b      	ldr	r1, [pc, #172]	; (8001374 <_Z17StartGetLatenciesPv+0xc0>)
 80012c6:	482c      	ldr	r0, [pc, #176]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012c8:	f7ff f976 	bl	80005b8 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getBT);
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <_Z17StartGetLatenciesPv+0xbc>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	220a      	movs	r2, #10
 80012d2:	4619      	mov	r1, r3
 80012d4:	4828      	ldr	r0, [pc, #160]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012d6:	f7ff f9a1 	bl	800061c <_ZN5Print5printEii>
    }
    if (timer_val_getUSB >= 4) {
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <_Z17StartGetLatenciesPv+0xc8>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d90a      	bls.n	80012f8 <_Z17StartGetLatenciesPv+0x44>
      Serial.print("\r\nWarning High CPU/USB Latency, getUSB latency is: ");
 80012e2:	4927      	ldr	r1, [pc, #156]	; (8001380 <_Z17StartGetLatenciesPv+0xcc>)
 80012e4:	4824      	ldr	r0, [pc, #144]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012e6:	f7ff f967 	bl	80005b8 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getUSB);
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <_Z17StartGetLatenciesPv+0xc8>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	220a      	movs	r2, #10
 80012f0:	4619      	mov	r1, r3
 80012f2:	4821      	ldr	r0, [pc, #132]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012f4:	f7ff f992 	bl	800061c <_ZN5Print5printEii>

#if rtos_delay_view
    /*This does not have to do with RTOS, but good place for 1 second status updates */
    /* Only rx_buf[3] and rx[5] have the rumble data */
    /* dataout ran should only run for THPS 2 or if used on XBCD on a PC */
    Serial.print("\r\nRumble Data: ");
 80012f8:	4922      	ldr	r1, [pc, #136]	; (8001384 <_Z17StartGetLatenciesPv+0xd0>)
 80012fa:	481f      	ldr	r0, [pc, #124]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012fc:	f7ff f95c 	bl	80005b8 <_ZN5Print5printEPKc>
//	Serial.print(" ");
//	Serial.print(rx_buf[1]);
//	Serial.print(" ");
//	Serial.print(rx_buf[2]);
//	Serial.print(" ");
    Serial.print(rx_buf[3]);
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <_Z17StartGetLatenciesPv+0xd4>)
 8001302:	78db      	ldrb	r3, [r3, #3]
 8001304:	220a      	movs	r2, #10
 8001306:	4619      	mov	r1, r3
 8001308:	481b      	ldr	r0, [pc, #108]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 800130a:	f7ff f975 	bl	80005f8 <_ZN5Print5printEhi>
    Serial.print(" ");
 800130e:	491f      	ldr	r1, [pc, #124]	; (800138c <_Z17StartGetLatenciesPv+0xd8>)
 8001310:	4819      	ldr	r0, [pc, #100]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001312:	f7ff f951 	bl	80005b8 <_ZN5Print5printEPKc>
//	Serial.print(rx_buf[4]);
//	Serial.print(" ");
    Serial.print(rx_buf[5]);
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <_Z17StartGetLatenciesPv+0xd4>)
 8001318:	795b      	ldrb	r3, [r3, #5]
 800131a:	220a      	movs	r2, #10
 800131c:	4619      	mov	r1, r3
 800131e:	4816      	ldr	r0, [pc, #88]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001320:	f7ff f96a 	bl	80005f8 <_ZN5Print5printEhi>
    Serial.print("   ");
 8001324:	491a      	ldr	r1, [pc, #104]	; (8001390 <_Z17StartGetLatenciesPv+0xdc>)
 8001326:	4814      	ldr	r0, [pc, #80]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001328:	f7ff f946 	bl	80005b8 <_ZN5Print5printEPKc>
    Serial.print(dataout_ran);
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <_Z17StartGetLatenciesPv+0xe0>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	220a      	movs	r2, #10
 8001332:	4619      	mov	r1, r3
 8001334:	4810      	ldr	r0, [pc, #64]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001336:	f7ff f95f 	bl	80005f8 <_ZN5Print5printEhi>
    Serial.print(" ");
 800133a:	4914      	ldr	r1, [pc, #80]	; (800138c <_Z17StartGetLatenciesPv+0xd8>)
 800133c:	480e      	ldr	r0, [pc, #56]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 800133e:	f7ff f93b 	bl	80005b8 <_ZN5Print5printEPKc>
    Serial.print(rumble_brequest_sent);
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_Z17StartGetLatenciesPv+0xe4>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	220a      	movs	r2, #10
 8001348:	4619      	mov	r1, r3
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 800134c:	f7ff f954 	bl	80005f8 <_ZN5Print5printEhi>
    Serial.print("\r\nController Idle Time: ");
 8001350:	4912      	ldr	r1, [pc, #72]	; (800139c <_Z17StartGetLatenciesPv+0xe8>)
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001354:	f7ff f930 	bl	80005b8 <_ZN5Print5printEPKc>
    Serial.print(button_press_idle);
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_Z17StartGetLatenciesPv+0xec>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	220a      	movs	r2, #10
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001362:	f7ff f9ac 	bl	80006be <_ZN5Print5printEmi>
#endif
    osDelay(1000);
 8001366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136a:	f009 f8dd 	bl	800a528 <osDelay>
    if (timer_val_getBT >= 7) {
 800136e:	e7a5      	b.n	80012bc <_Z17StartGetLatenciesPv+0x8>
 8001370:	20000686 	.word	0x20000686
 8001374:	08013adc 	.word	0x08013adc
 8001378:	200003bc 	.word	0x200003bc
 800137c:	20000688 	.word	0x20000688
 8001380:	08013b10 	.word	0x08013b10
 8001384:	08013b44 	.word	0x08013b44
 8001388:	200001c8 	.word	0x200001c8
 800138c:	08013b54 	.word	0x08013b54
 8001390:	08013b58 	.word	0x08013b58
 8001394:	20000abd 	.word	0x20000abd
 8001398:	20000abf 	.word	0x20000abf
 800139c:	08013b5c 	.word	0x08013b5c
 80013a0:	200006ac 	.word	0x200006ac

080013a4 <_Z10StartGetBTPv>:
  /* USER CODE END StartGetLatencies */
}
/* USER CODE END 4 */

void StartGetBT(void *argument)
    {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 80013ac:	48ae      	ldr	r0, [pc, #696]	; (8001668 <_Z10StartGetBTPv+0x2c4>)
 80013ae:	f000 fd5f 	bl	8001e70 <_ZN8MAX3421eI3P102P9E4InitEv>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b8:	bf0c      	ite	eq
 80013ba:	2301      	moveq	r3, #1
 80013bc:	2300      	movne	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <_Z10StartGetBTPv+0x2a>
    Serial.print(F("\r\nOSC did not start"));
 80013c4:	49a9      	ldr	r1, [pc, #676]	; (800166c <_Z10StartGetBTPv+0x2c8>)
 80013c6:	48aa      	ldr	r0, [pc, #680]	; (8001670 <_Z10StartGetBTPv+0x2cc>)
 80013c8:	f7ff f8e8 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
    while (1)
 80013cc:	e7fe      	b.n	80013cc <_Z10StartGetBTPv+0x28>
      ; // Halt
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 80013ce:	49a9      	ldr	r1, [pc, #676]	; (8001674 <_Z10StartGetBTPv+0x2d0>)
 80013d0:	48a7      	ldr	r0, [pc, #668]	; (8001670 <_Z10StartGetBTPv+0x2cc>)
 80013d2:	f7ff f8e3 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 80013d6:	4ba8      	ldr	r3, [pc, #672]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 80013dc:	4ba6      	ldr	r3, [pc, #664]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 80013e2:	4ba5      	ldr	r3, [pc, #660]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 80013e8:	4ba3      	ldr	r3, [pc, #652]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 80013ee:	4ba2      	ldr	r3, [pc, #648]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 80013f4:	4ba0      	ldr	r3, [pc, #640]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 80013fa:	4a9f      	ldr	r2, [pc, #636]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013fc:	7993      	ldrb	r3, [r2, #6]
 80013fe:	f36f 0300 	bfc	r3, #0, #1
 8001402:	7193      	strb	r3, [r2, #6]

  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 8001404:	4b9d      	ldr	r3, [pc, #628]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 800140a:	4b9c      	ldr	r3, [pc, #624]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800140c:	2214      	movs	r2, #20
 800140e:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 8001410:	4b9a      	ldr	r3, [pc, #616]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001412:	2200      	movs	r2, #0
 8001414:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 8001416:	4b99      	ldr	r3, [pc, #612]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001418:	2200      	movs	r2, #0
 800141a:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 800141c:	4b97      	ldr	r3, [pc, #604]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800141e:	2200      	movs	r2, #0
 8001420:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 8001422:	4b96      	ldr	r3, [pc, #600]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001424:	2200      	movs	r2, #0
 8001426:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 8001428:	4b94      	ldr	r3, [pc, #592]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800142a:	2200      	movs	r2, #0
 800142c:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 800142e:	4b93      	ldr	r3, [pc, #588]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001430:	2200      	movs	r2, #0
 8001432:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 8001434:	4b91      	ldr	r3, [pc, #580]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001436:	2200      	movs	r2, #0
 8001438:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 800143a:	4b90      	ldr	r3, [pc, #576]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800143c:	2200      	movs	r2, #0
 800143e:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 8001440:	4b8e      	ldr	r3, [pc, #568]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001442:	2200      	movs	r2, #0
 8001444:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 8001446:	4b8d      	ldr	r3, [pc, #564]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001448:	2200      	movs	r2, #0
 800144a:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 800144c:	4b8b      	ldr	r3, [pc, #556]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800144e:	2200      	movs	r2, #0
 8001450:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 8001452:	4b8a      	ldr	r3, [pc, #552]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001454:	2200      	movs	r2, #0
 8001456:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 8001458:	4b88      	ldr	r3, [pc, #544]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800145a:	2200      	movs	r2, #0
 800145c:	825a      	strh	r2, [r3, #18]
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}
#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 800145e:	4b88      	ldr	r3, [pc, #544]	; (8001680 <_Z10StartGetBTPv+0x2dc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b87      	ldr	r3, [pc, #540]	; (8001684 <_Z10StartGetBTPv+0x2e0>)
 8001468:	801a      	strh	r2, [r3, #0]
#endif
    Usb.Task();
 800146a:	487f      	ldr	r0, [pc, #508]	; (8001668 <_Z10StartGetBTPv+0x2c4>)
 800146c:	f011 fa08 	bl	8012880 <_ZN3USB4TaskEv>
    if (PS4.connected()) {
 8001470:	4885      	ldr	r0, [pc, #532]	; (8001688 <_Z10StartGetBTPv+0x2e4>)
 8001472:	f7ff fb63 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 82c2 	beq.w	8001a02 <_Z10StartGetBTPv+0x65e>
      ps4_connected = 1;
 800147e:	4b83      	ldr	r3, [pc, #524]	; (800168c <_Z10StartGetBTPv+0x2e8>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
      LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8001484:	2100      	movs	r1, #0
 8001486:	4882      	ldr	r0, [pc, #520]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 8001488:	f010 fbe7 	bl	8011c5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	4b80      	ldr	r3, [pc, #512]	; (8001694 <_Z10StartGetBTPv+0x2f0>)
 8001492:	701a      	strb	r2, [r3, #0]
      LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8001494:	2101      	movs	r1, #1
 8001496:	487e      	ldr	r0, [pc, #504]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 8001498:	f010 fbdf 	bl	8011c5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b7d      	ldr	r3, [pc, #500]	; (8001698 <_Z10StartGetBTPv+0x2f4>)
 80014a2:	701a      	strb	r2, [r3, #0]
      RightHatX_val = PS4.getAnalogHat(RightHatX);
 80014a4:	2102      	movs	r1, #2
 80014a6:	487a      	ldr	r0, [pc, #488]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80014a8:	f010 fbd7 	bl	8011c5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b7a      	ldr	r3, [pc, #488]	; (800169c <_Z10StartGetBTPv+0x2f8>)
 80014b2:	701a      	strb	r2, [r3, #0]
      RightHatY_val = PS4.getAnalogHat(RightHatY);
 80014b4:	2103      	movs	r1, #3
 80014b6:	4876      	ldr	r0, [pc, #472]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80014b8:	f010 fbcf 	bl	8011c5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	4b77      	ldr	r3, [pc, #476]	; (80016a0 <_Z10StartGetBTPv+0x2fc>)
 80014c2:	701a      	strb	r2, [r3, #0]
				gameHID.Joy2Y = 0;
				xboxHID.rightStickX = 0;
				xboxHID.rightStickY = 0;
			}
#elif !deadzone_enable
      gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 80014c4:	2100      	movs	r1, #0
 80014c6:	4872      	ldr	r0, [pc, #456]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80014c8:	f010 fbc7 	bl	8011c5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014cc:	4603      	mov	r3, r0
 80014ce:	3b80      	subs	r3, #128	; 0x80
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	b25a      	sxtb	r2, r3
 80014d4:	4b68      	ldr	r3, [pc, #416]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80014d6:	709a      	strb	r2, [r3, #2]
      gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 80014d8:	2101      	movs	r1, #1
 80014da:	486d      	ldr	r0, [pc, #436]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80014dc:	f010 fbbd 	bl	8011c5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014e0:	4603      	mov	r3, r0
 80014e2:	3b80      	subs	r3, #128	; 0x80
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	4b63      	ldr	r3, [pc, #396]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80014ea:	70da      	strb	r2, [r3, #3]
      xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 80014ec:	4b62      	ldr	r3, [pc, #392]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80014ee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	4b61      	ldr	r3, [pc, #388]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 80014f8:	819a      	strh	r2, [r3, #12]
      xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80014fc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	4b5d      	ldr	r3, [pc, #372]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001506:	81da      	strh	r2, [r3, #14]
      /* The Y axis by default is inverted on the Xbox */
      xboxHID.leftStickY = -xboxHID.leftStickY - 128;
 8001508:	4b5c      	ldr	r3, [pc, #368]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800150a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800150e:	b29a      	uxth	r2, r3
 8001510:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	b29b      	uxth	r3, r3
 8001518:	b21a      	sxth	r2, r3
 800151a:	4b58      	ldr	r3, [pc, #352]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800151c:	81da      	strh	r2, [r3, #14]

      gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 800151e:	2102      	movs	r1, #2
 8001520:	485b      	ldr	r0, [pc, #364]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 8001522:	f010 fb9a 	bl	8011c5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001526:	4603      	mov	r3, r0
 8001528:	3b80      	subs	r3, #128	; 0x80
 800152a:	b2db      	uxtb	r3, r3
 800152c:	b25a      	sxtb	r2, r3
 800152e:	4b52      	ldr	r3, [pc, #328]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001530:	711a      	strb	r2, [r3, #4]
      gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8001532:	2103      	movs	r1, #3
 8001534:	4856      	ldr	r0, [pc, #344]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 8001536:	f010 fb90 	bl	8011c5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800153a:	4603      	mov	r3, r0
 800153c:	3b80      	subs	r3, #128	; 0x80
 800153e:	b2db      	uxtb	r3, r3
 8001540:	b25a      	sxtb	r2, r3
 8001542:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001544:	715a      	strb	r2, [r3, #5]
      xboxHID.rightStickX = gameHID.Joy2X << 8;
 8001546:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001548:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	4b4a      	ldr	r3, [pc, #296]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001552:	821a      	strh	r2, [r3, #16]
      xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001554:	4b48      	ldr	r3, [pc, #288]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001556:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	4b47      	ldr	r3, [pc, #284]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001560:	825a      	strh	r2, [r3, #18]

      /* The Y axis by default is inverted on the Xbox */
      xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 8001562:	4b46      	ldr	r3, [pc, #280]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001564:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001568:	b29a      	uxth	r2, r3
 800156a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b41      	ldr	r3, [pc, #260]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001576:	825a      	strh	r2, [r3, #18]
#endif
      xboxHID.L = PS4.getAnalogButton(L2);
 8001578:	2108      	movs	r1, #8
 800157a:	4845      	ldr	r0, [pc, #276]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 800157c:	f010 fb54 	bl	8011c28 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b3d      	ldr	r3, [pc, #244]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001586:	729a      	strb	r2, [r3, #10]
      xboxHID.R = PS4.getAnalogButton(R2);
 8001588:	2109      	movs	r1, #9
 800158a:	4841      	ldr	r0, [pc, #260]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 800158c:	f010 fb4c 	bl	8011c28 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b39      	ldr	r3, [pc, #228]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001596:	72da      	strb	r2, [r3, #11]
      gameHID.Joy_LT = xboxHID.L - 128;
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800159a:	7a9b      	ldrb	r3, [r3, #10]
 800159c:	3b80      	subs	r3, #128	; 0x80
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	4b35      	ldr	r3, [pc, #212]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80015a4:	701a      	strb	r2, [r3, #0]
      gameHID.Joy_RT = xboxHID.R - 128;
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 80015a8:	7adb      	ldrb	r3, [r3, #11]
 80015aa:	3b80      	subs	r3, #128	; 0x80
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	4b31      	ldr	r3, [pc, #196]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80015b2:	705a      	strb	r2, [r3, #1]

      if (PS4.getButtonClick(PS)) {
 80015b4:	2110      	movs	r1, #16
 80015b6:	4836      	ldr	r0, [pc, #216]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80015b8:	f010 faf6 	bl	8011ba8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d008      	beq.n	80015d4 <_Z10StartGetBTPv+0x230>
        PS4.disconnect();
 80015c2:	4831      	ldr	r0, [pc, #196]	; (8001688 <_Z10StartGetBTPv+0x2e4>)
 80015c4:	f00f faa9 	bl	8010b1a <_ZN5BTHID10disconnectEv>
        display_run_once = 0;
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <_Z10StartGetBTPv+0x300>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
        rumble_once = 0;
 80015ce:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <_Z10StartGetBTPv+0x304>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
      }

      if (PS4.getButtonPress(TRIANGLE)) {
 80015d4:	210c      	movs	r1, #12
 80015d6:	482e      	ldr	r0, [pc, #184]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80015d8:	f010 fabe 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <_Z10StartGetBTPv+0x256>
        gameHID.ps4ButtonsTag.button_triangle = 1;
 80015e2:	4a25      	ldr	r2, [pc, #148]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80015e4:	79d3      	ldrb	r3, [r2, #7]
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0xFF;
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 80015ee:	22ff      	movs	r2, #255	; 0xff
 80015f0:	71da      	strb	r2, [r3, #7]
        button_press_idle = 0;
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <_Z10StartGetBTPv+0x308>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e007      	b.n	800160a <_Z10StartGetBTPv+0x266>
      } else {
        gameHID.ps4ButtonsTag.button_triangle = 0;
 80015fa:	4a1f      	ldr	r2, [pc, #124]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80015fc:	79d3      	ldrb	r3, [r2, #7]
 80015fe:	f36f 0300 	bfc	r3, #0, #1
 8001602:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001606:	2200      	movs	r2, #0
 8001608:	71da      	strb	r2, [r3, #7]
      }

      if (PS4.getButtonPress(CIRCLE)) {
 800160a:	210d      	movs	r1, #13
 800160c:	4820      	ldr	r0, [pc, #128]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 800160e:	f010 faa3 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00b      	beq.n	8001630 <_Z10StartGetBTPv+0x28c>
        gameHID.ps4ButtonsTag.button_circle = 1;
 8001618:	4a17      	ldr	r2, [pc, #92]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 800161a:	7993      	ldrb	r3, [r2, #6]
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0xFF;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001624:	22ff      	movs	r2, #255	; 0xff
 8001626:	715a      	strb	r2, [r3, #5]
        button_press_idle = 0;
 8001628:	4b20      	ldr	r3, [pc, #128]	; (80016ac <_Z10StartGetBTPv+0x308>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e007      	b.n	8001640 <_Z10StartGetBTPv+0x29c>
      } else {
        gameHID.ps4ButtonsTag.button_circle = 0;
 8001630:	4a11      	ldr	r2, [pc, #68]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001632:	7993      	ldrb	r3, [r2, #6]
 8001634:	f36f 13c7 	bfc	r3, #7, #1
 8001638:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800163c:	2200      	movs	r2, #0
 800163e:	715a      	strb	r2, [r3, #5]
      }

      if (PS4.getButtonPress(CROSS)) {
 8001640:	210e      	movs	r1, #14
 8001642:	4813      	ldr	r0, [pc, #76]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 8001644:	f010 fa88 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d030      	beq.n	80016b0 <_Z10StartGetBTPv+0x30c>
        gameHID.ps4ButtonsTag.button_cross = 1;
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001650:	7993      	ldrb	r3, [r2, #6]
 8001652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001656:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0xFF;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	711a      	strb	r2, [r3, #4]
        button_press_idle = 0;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <_Z10StartGetBTPv+0x308>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e02c      	b.n	80016c0 <_Z10StartGetBTPv+0x31c>
 8001666:	bf00      	nop
 8001668:	200003d0 	.word	0x200003d0
 800166c:	08013b78 	.word	0x08013b78
 8001670:	200003bc 	.word	0x200003bc
 8001674:	08013b8c 	.word	0x08013b8c
 8001678:	2000068c 	.word	0x2000068c
 800167c:	20000694 	.word	0x20000694
 8001680:	200002c0 	.word	0x200002c0
 8001684:	20000686 	.word	0x20000686
 8001688:	200005a4 	.word	0x200005a4
 800168c:	2000066e 	.word	0x2000066e
 8001690:	2000061c 	.word	0x2000061c
 8001694:	2000066f 	.word	0x2000066f
 8001698:	20000670 	.word	0x20000670
 800169c:	20000671 	.word	0x20000671
 80016a0:	20000672 	.word	0x20000672
 80016a4:	20000684 	.word	0x20000684
 80016a8:	2000066d 	.word	0x2000066d
 80016ac:	200006ac 	.word	0x200006ac
      } else {
        gameHID.ps4ButtonsTag.button_cross = 0;
 80016b0:	4aac      	ldr	r2, [pc, #688]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80016b2:	7993      	ldrb	r3, [r2, #6]
 80016b4:	f36f 1386 	bfc	r3, #6, #1
 80016b8:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0;
 80016ba:	4bab      	ldr	r3, [pc, #684]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	711a      	strb	r2, [r3, #4]
      }

      if (PS4.getButtonPress(SQUARE)) {
 80016c0:	210f      	movs	r1, #15
 80016c2:	48aa      	ldr	r0, [pc, #680]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80016c4:	f010 fa48 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <_Z10StartGetBTPv+0x342>
        gameHID.ps4ButtonsTag.button_square = 1;
 80016ce:	4aa5      	ldr	r2, [pc, #660]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80016d0:	79d3      	ldrb	r3, [r2, #7]
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0xFF;
 80016d8:	4ba3      	ldr	r3, [pc, #652]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80016da:	22ff      	movs	r2, #255	; 0xff
 80016dc:	719a      	strb	r2, [r3, #6]
        button_press_idle = 0;
 80016de:	4ba4      	ldr	r3, [pc, #656]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e007      	b.n	80016f6 <_Z10StartGetBTPv+0x352>
      } else {
        gameHID.ps4ButtonsTag.button_square = 0;
 80016e6:	4a9f      	ldr	r2, [pc, #636]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80016e8:	79d3      	ldrb	r3, [r2, #7]
 80016ea:	f36f 0341 	bfc	r3, #1, #1
 80016ee:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0;
 80016f0:	4b9d      	ldr	r3, [pc, #628]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	719a      	strb	r2, [r3, #6]
      }

      if (PS4.getButtonPress(UP)) {
 80016f6:	2100      	movs	r1, #0
 80016f8:	489c      	ldr	r0, [pc, #624]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80016fa:	f010 fa2d 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00c      	beq.n	800171e <_Z10StartGetBTPv+0x37a>
        gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8001704:	4a97      	ldr	r2, [pc, #604]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001706:	79d3      	ldrb	r3, [r2, #7]
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DUP;
 800170e:	4b96      	ldr	r3, [pc, #600]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001710:	789b      	ldrb	r3, [r3, #2]
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	b2da      	uxtb	r2, r3
 8001718:	4b93      	ldr	r3, [pc, #588]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800171a:	709a      	strb	r2, [r3, #2]
 800171c:	e00b      	b.n	8001736 <_Z10StartGetBTPv+0x392>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_up = 0;
 800171e:	4a91      	ldr	r2, [pc, #580]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001720:	79d3      	ldrb	r3, [r2, #7]
 8001722:	f36f 0382 	bfc	r3, #2, #1
 8001726:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 8001728:	4b8f      	ldr	r3, [pc, #572]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800172a:	789b      	ldrb	r3, [r3, #2]
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b8d      	ldr	r3, [pc, #564]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001734:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(RIGHT)) {
 8001736:	2101      	movs	r1, #1
 8001738:	488c      	ldr	r0, [pc, #560]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 800173a:	f010 fa0d 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00c      	beq.n	800175e <_Z10StartGetBTPv+0x3ba>
        gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8001744:	4a87      	ldr	r2, [pc, #540]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001746:	79d3      	ldrb	r3, [r2, #7]
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DRIGHT;
 800174e:	4b86      	ldr	r3, [pc, #536]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001750:	789b      	ldrb	r3, [r3, #2]
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b83      	ldr	r3, [pc, #524]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800175a:	709a      	strb	r2, [r3, #2]
 800175c:	e00b      	b.n	8001776 <_Z10StartGetBTPv+0x3d2>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_right = 0;
 800175e:	4a81      	ldr	r2, [pc, #516]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001760:	79d3      	ldrb	r3, [r2, #7]
 8001762:	f36f 03c3 	bfc	r3, #3, #1
 8001766:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 8001768:	4b7f      	ldr	r3, [pc, #508]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800176a:	789b      	ldrb	r3, [r3, #2]
 800176c:	f023 0308 	bic.w	r3, r3, #8
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001774:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(DOWN)) {
 8001776:	2102      	movs	r1, #2
 8001778:	487c      	ldr	r0, [pc, #496]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 800177a:	f010 f9ed 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00c      	beq.n	800179e <_Z10StartGetBTPv+0x3fa>
        gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8001784:	4a77      	ldr	r2, [pc, #476]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001786:	79d3      	ldrb	r3, [r2, #7]
 8001788:	f043 0320 	orr.w	r3, r3, #32
 800178c:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DDOWN;
 800178e:	4b76      	ldr	r3, [pc, #472]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001790:	789b      	ldrb	r3, [r3, #2]
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b73      	ldr	r3, [pc, #460]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800179a:	709a      	strb	r2, [r3, #2]
 800179c:	e00b      	b.n	80017b6 <_Z10StartGetBTPv+0x412>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_down = 0;
 800179e:	4a71      	ldr	r2, [pc, #452]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80017a0:	79d3      	ldrb	r3, [r2, #7]
 80017a2:	f36f 1345 	bfc	r3, #5, #1
 80017a6:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 80017a8:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017aa:	789b      	ldrb	r3, [r3, #2]
 80017ac:	f023 0302 	bic.w	r3, r3, #2
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b6d      	ldr	r3, [pc, #436]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017b4:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(LEFT)) {
 80017b6:	2103      	movs	r1, #3
 80017b8:	486c      	ldr	r0, [pc, #432]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80017ba:	f010 f9cd 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00c      	beq.n	80017de <_Z10StartGetBTPv+0x43a>
        gameHID.ps4ButtonsTag.button_dpad_left = 1;
 80017c4:	4a67      	ldr	r2, [pc, #412]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80017c6:	79d3      	ldrb	r3, [r2, #7]
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DLEFT;
 80017ce:	4b66      	ldr	r3, [pc, #408]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017d0:	789b      	ldrb	r3, [r3, #2]
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b63      	ldr	r3, [pc, #396]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017da:	709a      	strb	r2, [r3, #2]
 80017dc:	e00b      	b.n	80017f6 <_Z10StartGetBTPv+0x452>

      } else {
        gameHID.ps4ButtonsTag.button_dpad_left = 0;
 80017de:	4a61      	ldr	r2, [pc, #388]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80017e0:	79d3      	ldrb	r3, [r2, #7]
 80017e2:	f36f 1304 	bfc	r3, #4, #1
 80017e6:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 80017e8:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017ea:	789b      	ldrb	r3, [r3, #2]
 80017ec:	f023 0304 	bic.w	r3, r3, #4
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017f4:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(L1)) {
 80017f6:	210a      	movs	r1, #10
 80017f8:	485c      	ldr	r0, [pc, #368]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80017fa:	f010 f9ad 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00b      	beq.n	800181c <_Z10StartGetBTPv+0x478>
        gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8001804:	4a57      	ldr	r2, [pc, #348]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001806:	7993      	ldrb	r3, [r2, #6]
 8001808:	f043 0320 	orr.w	r3, r3, #32
 800180c:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0xFF;
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001810:	22ff      	movs	r2, #255	; 0xff
 8001812:	725a      	strb	r2, [r3, #9]
        button_press_idle = 0;
 8001814:	4b56      	ldr	r3, [pc, #344]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e007      	b.n	800182c <_Z10StartGetBTPv+0x488>

      } else {
        gameHID.ps4ButtonsTag.button_left_trigger = 0;
 800181c:	4a51      	ldr	r2, [pc, #324]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 800181e:	7993      	ldrb	r3, [r2, #6]
 8001820:	f36f 1345 	bfc	r3, #5, #1
 8001824:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0;
 8001826:	4b50      	ldr	r3, [pc, #320]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001828:	2200      	movs	r2, #0
 800182a:	725a      	strb	r2, [r3, #9]
      }

      if (PS4.getButtonPress(L3)) {
 800182c:	2106      	movs	r1, #6
 800182e:	484f      	ldr	r0, [pc, #316]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 8001830:	f010 f992 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00f      	beq.n	800185a <_Z10StartGetBTPv+0x4b6>
        gameHID.ps4ButtonsTag.button_left_thumb = 1;
 800183a:	4a4a      	ldr	r2, [pc, #296]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 800183c:	79d3      	ldrb	r3, [r2, #7]
 800183e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001842:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_LS_BTN;
 8001844:	4b48      	ldr	r3, [pc, #288]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001846:	789b      	ldrb	r3, [r3, #2]
 8001848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001850:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	e00b      	b.n	8001872 <_Z10StartGetBTPv+0x4ce>
      } else {
        gameHID.ps4ButtonsTag.button_left_thumb = 0;
 800185a:	4a42      	ldr	r2, [pc, #264]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 800185c:	79d3      	ldrb	r3, [r2, #7]
 800185e:	f36f 1386 	bfc	r3, #6, #1
 8001862:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 8001864:	4b40      	ldr	r3, [pc, #256]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001866:	789b      	ldrb	r3, [r3, #2]
 8001868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001870:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(R1)) {
 8001872:	210b      	movs	r1, #11
 8001874:	483d      	ldr	r0, [pc, #244]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 8001876:	f010 f96f 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <_Z10StartGetBTPv+0x4f4>
        gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8001880:	4a38      	ldr	r2, [pc, #224]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001882:	7993      	ldrb	r3, [r2, #6]
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0xFF;
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800188c:	22ff      	movs	r2, #255	; 0xff
 800188e:	721a      	strb	r2, [r3, #8]
        button_press_idle = 0;
 8001890:	4b37      	ldr	r3, [pc, #220]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e007      	b.n	80018a8 <_Z10StartGetBTPv+0x504>
      } else {
        gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8001898:	4a32      	ldr	r2, [pc, #200]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 800189a:	7993      	ldrb	r3, [r2, #6]
 800189c:	f36f 1304 	bfc	r3, #4, #1
 80018a0:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0;
 80018a2:	4b31      	ldr	r3, [pc, #196]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	721a      	strb	r2, [r3, #8]
      }

      if (PS4.getButtonPress(R3)) {
 80018a8:	2107      	movs	r1, #7
 80018aa:	4830      	ldr	r0, [pc, #192]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80018ac:	f010 f954 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00f      	beq.n	80018d6 <_Z10StartGetBTPv+0x532>
        gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80018b6:	4a2b      	ldr	r2, [pc, #172]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80018b8:	79d3      	ldrb	r3, [r2, #7]
 80018ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018be:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_RS_BTN;
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80018c2:	789b      	ldrb	r3, [r3, #2]
 80018c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80018cc:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e00b      	b.n	80018ee <_Z10StartGetBTPv+0x54a>
      } else {
        gameHID.ps4ButtonsTag.button_right_thumb = 0;
 80018d6:	4a23      	ldr	r2, [pc, #140]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80018d8:	79d3      	ldrb	r3, [r2, #7]
 80018da:	f36f 13c7 	bfc	r3, #7, #1
 80018de:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80018e2:	789b      	ldrb	r3, [r3, #2]
 80018e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80018ec:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(SHARE)) {
 80018ee:	2104      	movs	r1, #4
 80018f0:	481e      	ldr	r0, [pc, #120]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80018f2:	f010 f931 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00f      	beq.n	800191c <_Z10StartGetBTPv+0x578>
        gameHID.ps4ButtonsTag.button_share = 1;
 80018fc:	4a19      	ldr	r2, [pc, #100]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80018fe:	7993      	ldrb	r3, [r2, #6]
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_BACK_BTN;
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001908:	789b      	ldrb	r3, [r3, #2]
 800190a:	f043 0320 	orr.w	r3, r3, #32
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001912:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e00b      	b.n	8001934 <_Z10StartGetBTPv+0x590>
      } else {
        gameHID.ps4ButtonsTag.button_share = 0;
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 800191e:	7993      	ldrb	r3, [r2, #6]
 8001920:	f36f 03c3 	bfc	r3, #3, #1
 8001924:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001928:	789b      	ldrb	r3, [r3, #2]
 800192a:	f023 0320 	bic.w	r3, r3, #32
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001932:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(OPTIONS)) {
 8001934:	2105      	movs	r1, #5
 8001936:	480d      	ldr	r0, [pc, #52]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 8001938:	f010 f90e 	bl	8011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d018      	beq.n	8001974 <_Z10StartGetBTPv+0x5d0>
        gameHID.ps4ButtonsTag.button_start = 1;
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001944:	7993      	ldrb	r3, [r2, #6]
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_START_BTN;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800194e:	789b      	ldrb	r3, [r3, #2]
 8001950:	f043 0310 	orr.w	r3, r3, #16
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001958:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e014      	b.n	800198c <_Z10StartGetBTPv+0x5e8>
 8001962:	bf00      	nop
 8001964:	2000068c 	.word	0x2000068c
 8001968:	20000694 	.word	0x20000694
 800196c:	2000061c 	.word	0x2000061c
 8001970:	200006ac 	.word	0x200006ac
      } else {
        gameHID.ps4ButtonsTag.button_start = 0;
 8001974:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <_Z10StartGetBTPv+0x6c0>)
 8001976:	7993      	ldrb	r3, [r2, #6]
 8001978:	f36f 0382 	bfc	r3, #2, #1
 800197c:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <_Z10StartGetBTPv+0x6c4>)
 8001980:	789b      	ldrb	r3, [r3, #2]
 8001982:	f023 0310 	bic.w	r3, r3, #16
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <_Z10StartGetBTPv+0x6c4>)
 800198a:	709a      	strb	r2, [r3, #2]
      }

      /*We don't want to spam the PS4 controller with rumble updates
       * If we do not do this, latency increases greatly */
      new_rumble_val_L = rx_buf[3];
 800198c:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <_Z10StartGetBTPv+0x6c8>)
 800198e:	78da      	ldrb	r2, [r3, #3]
 8001990:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <_Z10StartGetBTPv+0x6cc>)
 8001992:	701a      	strb	r2, [r3, #0]
      new_rumble_val_R = rx_buf[5];
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <_Z10StartGetBTPv+0x6c8>)
 8001996:	795a      	ldrb	r2, [r3, #5]
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <_Z10StartGetBTPv+0x6d0>)
 800199a:	701a      	strb	r2, [r3, #0]

      if (new_rumble_val_L != old_rumble_val_L || new_rumble_val_R != old_rumble_val_R) {
 800199c:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <_Z10StartGetBTPv+0x6cc>)
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <_Z10StartGetBTPv+0x6d4>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d105      	bne.n	80019b4 <_Z10StartGetBTPv+0x610>
 80019a8:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <_Z10StartGetBTPv+0x6d0>)
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <_Z10StartGetBTPv+0x6d8>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d00f      	beq.n	80019d4 <_Z10StartGetBTPv+0x630>
        PS4.setRumbleOn(new_rumble_val_L, new_rumble_val_R);
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <_Z10StartGetBTPv+0x6cc>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4a2e      	ldr	r2, [pc, #184]	; (8001a74 <_Z10StartGetBTPv+0x6d0>)
 80019ba:	7812      	ldrb	r2, [r2, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	4830      	ldr	r0, [pc, #192]	; (8001a80 <_Z10StartGetBTPv+0x6dc>)
 80019c0:	f7ff f843 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        old_rumble_val_L = new_rumble_val_L;
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <_Z10StartGetBTPv+0x6cc>)
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <_Z10StartGetBTPv+0x6d4>)
 80019ca:	701a      	strb	r2, [r3, #0]
        old_rumble_val_R = new_rumble_val_R;
 80019cc:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <_Z10StartGetBTPv+0x6d0>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <_Z10StartGetBTPv+0x6d8>)
 80019d2:	701a      	strb	r2, [r3, #0]
      }
      /* After roughly 5+minutes of idle time, disconnect controller
       * Not the best solution since the rate the counter increases is based on BT Latency */
      if (button_press_idle > 400000) {
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <_Z10StartGetBTPv+0x6e0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2b      	ldr	r2, [pc, #172]	; (8001a88 <_Z10StartGetBTPv+0x6e4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d90b      	bls.n	80019f6 <_Z10StartGetBTPv+0x652>
        PS4.disconnect();
 80019de:	482b      	ldr	r0, [pc, #172]	; (8001a8c <_Z10StartGetBTPv+0x6e8>)
 80019e0:	f00f f89b 	bl	8010b1a <_ZN5BTHID10disconnectEv>
        rumble_once = 0;
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <_Z10StartGetBTPv+0x6ec>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
        button_press_idle = 0;
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <_Z10StartGetBTPv+0x6e0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
        display_run_once = 0;
 80019f0:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <_Z10StartGetBTPv+0x6f0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
      }
      button_press_idle++;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <_Z10StartGetBTPv+0x6e0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <_Z10StartGetBTPv+0x6e0>)
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e021      	b.n	8001a46 <_Z10StartGetBTPv+0x6a2>

    } else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a06:	4824      	ldr	r0, [pc, #144]	; (8001a98 <_Z10StartGetBTPv+0x6f4>)
 8001a08:	f001 fa3e 	bl	8002e88 <HAL_GPIO_ReadPin>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf0c      	ite	eq
 8001a12:	2301      	moveq	r3, #1
 8001a14:	2300      	movne	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d011      	beq.n	8001a40 <_Z10StartGetBTPv+0x69c>
      if (!buttonPressed) {
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <_Z10StartGetBTPv+0x6f8>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <_Z10StartGetBTPv+0x694>
        Serial.print(F("\r\nButton Pressed"));
 8001a2a:	491d      	ldr	r1, [pc, #116]	; (8001aa0 <_Z10StartGetBTPv+0x6fc>)
 8001a2c:	481d      	ldr	r0, [pc, #116]	; (8001aa4 <_Z10StartGetBTPv+0x700>)
 8001a2e:	f7fe fdb5 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
        PS4.pair(); // Start paring routine if user button was just pressed
 8001a32:	4816      	ldr	r0, [pc, #88]	; (8001a8c <_Z10StartGetBTPv+0x6e8>)
 8001a34:	f7fe ff9f 	bl	8000976 <_ZN5BTHID4pairEv>
      }
      buttonPressed = true;
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <_Z10StartGetBTPv+0x6f8>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e002      	b.n	8001a46 <_Z10StartGetBTPv+0x6a2>
    } else
      buttonPressed = false;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <_Z10StartGetBTPv+0x6f8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getBT;
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <_Z10StartGetBTPv+0x704>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <_Z10StartGetBTPv+0x708>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <_Z10StartGetBTPv+0x708>)
 8001a58:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(1);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f008 fd64 	bl	800a528 <osDelay>
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 8001a60:	e4fd      	b.n	800145e <_Z10StartGetBTPv+0xba>
 8001a62:	bf00      	nop
 8001a64:	2000068c 	.word	0x2000068c
 8001a68:	20000694 	.word	0x20000694
 8001a6c:	200001c8 	.word	0x200001c8
 8001a70:	200006aa 	.word	0x200006aa
 8001a74:	200006ab 	.word	0x200006ab
 8001a78:	200006a8 	.word	0x200006a8
 8001a7c:	200006a9 	.word	0x200006a9
 8001a80:	2000061c 	.word	0x2000061c
 8001a84:	200006ac 	.word	0x200006ac
 8001a88:	00061a80 	.word	0x00061a80
 8001a8c:	200005a4 	.word	0x200005a4
 8001a90:	2000066d 	.word	0x2000066d
 8001a94:	20000684 	.word	0x20000684
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	2000066c 	.word	0x2000066c
 8001aa0:	08013bac 	.word	0x08013bac
 8001aa4:	200003bc 	.word	0x200003bc
 8001aa8:	200002c0 	.word	0x200002c0
 8001aac:	20000686 	.word	0x20000686

08001ab0 <_Z12StartSendUSBPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
    {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
  MX_USB_DEVICE_Init();
 8001ab8:	f00b f9a8 	bl	800ce0c <MX_USB_DEVICE_Init>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
#endif

#if OG_XBOX_SETUP
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <_Z12StartSendUSBPv+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <_Z12StartSendUSBPv+0x44>)
 8001ac6:	801a      	strh	r2, [r3, #0]
#endif
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001ac8:	2214      	movs	r2, #20
 8001aca:	490b      	ldr	r1, [pc, #44]	; (8001af8 <_Z12StartSendUSBPv+0x48>)
 8001acc:	480b      	ldr	r0, [pc, #44]	; (8001afc <_Z12StartSendUSBPv+0x4c>)
 8001ace:	f007 f9c7 	bl	8008e60 <USBD_HID_SendReport>
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getUSB;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <_Z12StartSendUSBPv+0x40>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <_Z12StartSendUSBPv+0x44>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <_Z12StartSendUSBPv+0x44>)
 8001ae4:	801a      	strh	r2, [r3, #0]
#endif
#endif
    osDelay(1);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f008 fd1e 	bl	800a528 <osDelay>
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8001aec:	e7e6      	b.n	8001abc <_Z12StartSendUSBPv+0xc>
 8001aee:	bf00      	nop
 8001af0:	200002c0 	.word	0x200002c0
 8001af4:	20000688 	.word	0x20000688
 8001af8:	20000694 	.word	0x20000694
 8001afc:	2000548c 	.word	0x2000548c

08001b00 <_Z19StartControllerJoinPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
    {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for (;;)
      {
    if (PS4.connected() && !rumble_once) {
 8001b08:	4810      	ldr	r0, [pc, #64]	; (8001b4c <_Z19StartControllerJoinPv+0x4c>)
 8001b0a:	f7ff f817 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <_Z19StartControllerJoinPv+0x20>
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <_Z19StartControllerJoinPv+0x50>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <_Z19StartControllerJoinPv+0x20>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <_Z19StartControllerJoinPv+0x22>
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00d      	beq.n	8001b42 <_Z19StartControllerJoinPv+0x42>
      PS4.setRumbleOn(RumbleLow);
 8001b26:	2120      	movs	r1, #32
 8001b28:	480a      	ldr	r0, [pc, #40]	; (8001b54 <_Z19StartControllerJoinPv+0x54>)
 8001b2a:	f7fe ff76 	bl	8000a1a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
      osDelay(500);
 8001b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b32:	f008 fcf9 	bl	800a528 <osDelay>
      PS4.setRumbleOff();
 8001b36:	4807      	ldr	r0, [pc, #28]	; (8001b54 <_Z19StartControllerJoinPv+0x54>)
 8001b38:	f7fe ff62 	bl	8000a00 <_ZN9PS4Parser12setRumbleOffEv>
      rumble_once = 1;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <_Z19StartControllerJoinPv+0x50>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
    }
    osDelay(300);
 8001b42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b46:	f008 fcef 	bl	800a528 <osDelay>
    if (PS4.connected() && !rumble_once) {
 8001b4a:	e7dd      	b.n	8001b08 <_Z19StartControllerJoinPv+0x8>
 8001b4c:	200005a4 	.word	0x200005a4
 8001b50:	2000066d 	.word	0x2000066d
 8001b54:	2000061c 	.word	0x2000061c

08001b58 <_Z16StartButtonPressPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonPress */
void StartButtonPress(void *argument)
    {
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPress */
  /* Infinite loop */
  for (;;)
      {
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b64:	481e      	ldr	r0, [pc, #120]	; (8001be0 <_Z16StartButtonPressPv+0x88>)
 8001b66:	f001 f98f 	bl	8002e88 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b74:	481b      	ldr	r0, [pc, #108]	; (8001be4 <_Z16StartButtonPressPv+0x8c>)
 8001b76:	f001 f987 	bl	8002e88 <HAL_GPIO_ReadPin>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	005b      	lsls	r3, r3, #1
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	4323      	orrs	r3, r4
 8001b82:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(FORWARD_BTN_GPIO) << 0);
 8001b84:	2110      	movs	r1, #16
 8001b86:	4817      	ldr	r0, [pc, #92]	; (8001be4 <_Z16StartButtonPressPv+0x8c>)
 8001b88:	f001 f97e 	bl	8002e88 <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b25b      	sxtb	r3, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001b90:	4323      	orrs	r3, r4
 8001b92:	b25b      	sxtb	r3, r3
 8001b94:	b2da      	uxtb	r2, r3
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <_Z16StartButtonPressPv+0x90>)
 8001b98:	701a      	strb	r2, [r3, #0]

    if (BUTTON_PRESSED) {
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_Z16StartButtonPressPv+0x90>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	d014      	beq.n	8001bcc <_Z16StartButtonPressPv+0x74>
      if (buttonDebounced == 1) {  // you only get here if the same button combination has been pressed for 100mS
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <_Z16StartButtonPressPv+0x94>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d10c      	bne.n	8001bc4 <_Z16StartButtonPressPv+0x6c>
        if (buttonProcessed == 0) { // here's where we do the real work on the keyboard, and ensure we only do it once/keypress
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <_Z16StartButtonPressPv+0x98>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d112      	bne.n	8001bd8 <_Z16StartButtonPressPv+0x80>
          buttonProcessed = 1;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <_Z16StartButtonPressPv+0x98>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
          ProcessKeyCodeInContext(keyCode);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <_Z16StartButtonPressPv+0x90>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fb37 	bl	8001230 <_Z23ProcessKeyCodeInContexth>
 8001bc2:	e009      	b.n	8001bd8 <_Z16StartButtonPressPv+0x80>
        }
      } else {
        buttonDebounced = true;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <_Z16StartButtonPressPv+0x94>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	e005      	b.n	8001bd8 <_Z16StartButtonPressPv+0x80>
      }
    } else {
      buttonDebounced = false;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <_Z16StartButtonPressPv+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
      buttonProcessed = false;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <_Z16StartButtonPressPv+0x98>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
    }
//  	Serial.print("\r\n");
//  	Serial.print(keyCode);
    osDelay(100);
 8001bd8:	2064      	movs	r0, #100	; 0x64
 8001bda:	f008 fca5 	bl	800a528 <osDelay>
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001bde:	e7bf      	b.n	8001b60 <_Z16StartButtonPressPv+0x8>
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020400 	.word	0x40020400
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000681 	.word	0x20000681
 8001bf0:	20000682 	.word	0x20000682

08001bf4 <_Z14StartUpdateLCDPv>:
 * @brief Function implementing the updateLCD thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpdateLCD */
  /* Infinite loop */

  ssd1306_Fill(Black_);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f000 fcf5 	bl	80025ec <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8001c02:	f000 fd17 	bl	8002634 <ssd1306_UpdateScreen>
  for (;;) {
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14);
 8001c06:	4b7d      	ldr	r3, [pc, #500]	; (8001dfc <_Z14StartUpdateLCDPv+0x208>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b7c      	ldr	r3, [pc, #496]	; (8001e00 <_Z14StartUpdateLCDPv+0x20c>)
 8001c10:	801a      	strh	r2, [r3, #0]
#endif
    if (display_run_once == 0) {
 8001c12:	4b7c      	ldr	r3, [pc, #496]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 80e1 	bne.w	8001dde <_Z14StartUpdateLCDPv+0x1ea>
      ssd1306_Fill(Black_);
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f000 fce5 	bl	80025ec <ssd1306_Fill>
      ssd1306_UpdateScreen();
 8001c22:	f000 fd07 	bl	8002634 <ssd1306_UpdateScreen>
      switch (display_no) {
 8001c26:	4b78      	ldr	r3, [pc, #480]	; (8001e08 <_Z14StartUpdateLCDPv+0x214>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	f000 80a0 	beq.w	8001d70 <_Z14StartUpdateLCDPv+0x17c>
 8001c30:	2b07      	cmp	r3, #7
 8001c32:	f300 80d4 	bgt.w	8001dde <_Z14StartUpdateLCDPv+0x1ea>
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <_Z14StartUpdateLCDPv+0x4e>
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	f000 8082 	beq.w	8001d44 <_Z14StartUpdateLCDPv+0x150>
 8001c40:	e0cd      	b.n	8001dde <_Z14StartUpdateLCDPv+0x1ea>
        case 0: {
          uint8_t alternate_print = 1;
 8001c42:	2301      	movs	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
          if (!PS4.connected()) {
 8001c46:	4871      	ldr	r0, [pc, #452]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001c48:	f7fe ff78 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f083 0301 	eor.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d017      	beq.n	8001c88 <_Z14StartUpdateLCDPv+0x94>
            ssd1306_SetCursor((128 - 11 * 3) / 2, 0);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	202f      	movs	r0, #47	; 0x2f
 8001c5c:	f000 fe20 	bl	80028a0 <ssd1306_SetCursor>
            ssd1306_WriteString("Not", Font_11x18, White_);
 8001c60:	4a6b      	ldr	r2, [pc, #428]	; (8001e10 <_Z14StartUpdateLCDPv+0x21c>)
 8001c62:	2301      	movs	r3, #1
 8001c64:	ca06      	ldmia	r2, {r1, r2}
 8001c66:	486b      	ldr	r0, [pc, #428]	; (8001e14 <_Z14StartUpdateLCDPv+0x220>)
 8001c68:	f000 fdf4 	bl	8002854 <ssd1306_WriteString>
            display_force_update = 0;
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <_Z14StartUpdateLCDPv+0x224>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 8001c72:	211a      	movs	r1, #26
 8001c74:	200e      	movs	r0, #14
 8001c76:	f000 fe13 	bl	80028a0 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 8001c7a:	4a65      	ldr	r2, [pc, #404]	; (8001e10 <_Z14StartUpdateLCDPv+0x21c>)
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	ca06      	ldmia	r2, {r1, r2}
 8001c80:	4866      	ldr	r0, [pc, #408]	; (8001e1c <_Z14StartUpdateLCDPv+0x228>)
 8001c82:	f000 fde7 	bl	8002854 <ssd1306_WriteString>
 8001c86:	e017      	b.n	8001cb8 <_Z14StartUpdateLCDPv+0xc4>
          } else if (PS4.connected()) {
 8001c88:	4860      	ldr	r0, [pc, #384]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001c8a:	f7fe ff57 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d011      	beq.n	8001cb8 <_Z14StartUpdateLCDPv+0xc4>
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 8001c94:	211a      	movs	r1, #26
 8001c96:	200e      	movs	r0, #14
 8001c98:	f000 fe02 	bl	80028a0 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 8001c9c:	4a5c      	ldr	r2, [pc, #368]	; (8001e10 <_Z14StartUpdateLCDPv+0x21c>)
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	ca06      	ldmia	r2, {r1, r2}
 8001ca2:	485e      	ldr	r0, [pc, #376]	; (8001e1c <_Z14StartUpdateLCDPv+0x228>)
 8001ca4:	f000 fdd6 	bl	8002854 <ssd1306_WriteString>
            alternate_print = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
            display_run_once = 1;
 8001cac:	4b55      	ldr	r3, [pc, #340]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
            display_force_update = 0;
 8001cb2:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <_Z14StartUpdateLCDPv+0x224>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
          }
          ssd1306_UpdateScreen();
 8001cb8:	f000 fcbc 	bl	8002634 <ssd1306_UpdateScreen>

          while (!PS4.connected() && display_force_update == 0) {
 8001cbc:	4853      	ldr	r0, [pc, #332]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001cbe:	f7fe ff3d 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <_Z14StartUpdateLCDPv+0xe6>
 8001cce:	4b52      	ldr	r3, [pc, #328]	; (8001e18 <_Z14StartUpdateLCDPv+0x224>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <_Z14StartUpdateLCDPv+0xe6>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <_Z14StartUpdateLCDPv+0xe8>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <_Z14StartUpdateLCDPv+0xf4>
            osDelay(100);
 8001ce0:	2064      	movs	r0, #100	; 0x64
 8001ce2:	f008 fc21 	bl	800a528 <osDelay>
          while (!PS4.connected() && display_force_update == 0) {
 8001ce6:	e7e9      	b.n	8001cbc <_Z14StartUpdateLCDPv+0xc8>
          }
          /* If the user presses a Button, interrupt and show next screen */
          if (display_force_update == 1) {
 8001ce8:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <_Z14StartUpdateLCDPv+0x224>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d106      	bne.n	8001cfe <_Z14StartUpdateLCDPv+0x10a>
            display_force_update = 0;
 8001cf0:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <_Z14StartUpdateLCDPv+0x224>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
            display_run_once = 0;
 8001cf6:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
            break;
 8001cfc:	e06f      	b.n	8001dde <_Z14StartUpdateLCDPv+0x1ea>
          }
          /* When the controller is finally paired, update current screen
           * Only runs if the first PS4.connected() above does not run*/
          if (PS4.connected() && alternate_print) {
 8001cfe:	4843      	ldr	r0, [pc, #268]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001d00:	f7fe ff1c 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <_Z14StartUpdateLCDPv+0x120>
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <_Z14StartUpdateLCDPv+0x120>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <_Z14StartUpdateLCDPv+0x122>
 8001d14:	2300      	movs	r3, #0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d060      	beq.n	8001ddc <_Z14StartUpdateLCDPv+0x1e8>
            ssd1306_Fill(Black_);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f000 fc66 	bl	80025ec <ssd1306_Fill>
            ssd1306_UpdateScreen();
 8001d20:	f000 fc88 	bl	8002634 <ssd1306_UpdateScreen>
            //				    ssd1306_SetCursor(25,0);
            //				    ssd1306_WriteString("Status:", Font_11x18, White_);
            ssd1306_SetCursor((128 - 11 * 10) / 2, 26);
 8001d24:	211a      	movs	r1, #26
 8001d26:	2009      	movs	r0, #9
 8001d28:	f000 fdba 	bl	80028a0 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected!", Font_11x18, White_);
 8001d2c:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <_Z14StartUpdateLCDPv+0x21c>)
 8001d2e:	2301      	movs	r3, #1
 8001d30:	ca06      	ldmia	r2, {r1, r2}
 8001d32:	483b      	ldr	r0, [pc, #236]	; (8001e20 <_Z14StartUpdateLCDPv+0x22c>)
 8001d34:	f000 fd8e 	bl	8002854 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8001d38:	f000 fc7c 	bl	8002634 <ssd1306_UpdateScreen>
            display_run_once = 1;
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
          }
          break;
 8001d42:	e04b      	b.n	8001ddc <_Z14StartUpdateLCDPv+0x1e8>
        }

        case 1:
          display_run_once = 1;
 8001d44:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 8001d4a:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <_Z14StartUpdateLCDPv+0x224>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f000 fc4b 	bl	80025ec <ssd1306_Fill>
          ssd1306_SetCursor((128 - 11 * 5) / 2, 0);
 8001d56:	2100      	movs	r1, #0
 8001d58:	2024      	movs	r0, #36	; 0x24
 8001d5a:	f000 fda1 	bl	80028a0 <ssd1306_SetCursor>
          ssd1306_WriteString("Pair?", Font_11x18, White_);
 8001d5e:	4a2c      	ldr	r2, [pc, #176]	; (8001e10 <_Z14StartUpdateLCDPv+0x21c>)
 8001d60:	2301      	movs	r3, #1
 8001d62:	ca06      	ldmia	r2, {r1, r2}
 8001d64:	482f      	ldr	r0, [pc, #188]	; (8001e24 <_Z14StartUpdateLCDPv+0x230>)
 8001d66:	f000 fd75 	bl	8002854 <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8001d6a:	f000 fc63 	bl	8002634 <ssd1306_UpdateScreen>
          break;
 8001d6e:	e036      	b.n	8001dde <_Z14StartUpdateLCDPv+0x1ea>

        case 7:
          display_run_once = 1;
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <_Z14StartUpdateLCDPv+0x224>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 fc35 	bl	80025ec <ssd1306_Fill>
          ssd1306_UpdateScreen();
 8001d82:	f000 fc57 	bl	8002634 <ssd1306_UpdateScreen>
          ssd1306_SetCursor((128 - 11 * 10) / 2, 0);
 8001d86:	2100      	movs	r1, #0
 8001d88:	2009      	movs	r0, #9
 8001d8a:	f000 fd89 	bl	80028a0 <ssd1306_SetCursor>
          ssd1306_WriteString("Pairing...", Font_11x18, White_);
 8001d8e:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <_Z14StartUpdateLCDPv+0x21c>)
 8001d90:	2301      	movs	r3, #1
 8001d92:	ca06      	ldmia	r2, {r1, r2}
 8001d94:	4824      	ldr	r0, [pc, #144]	; (8001e28 <_Z14StartUpdateLCDPv+0x234>)
 8001d96:	f000 fd5d 	bl	8002854 <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8001d9a:	f000 fc4b 	bl	8002634 <ssd1306_UpdateScreen>
          PS4.pair();
 8001d9e:	481b      	ldr	r0, [pc, #108]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001da0:	f7fe fde9 	bl	8000976 <_ZN5BTHID4pairEv>
          while (PS4.connected() == 0) {
 8001da4:	4819      	ldr	r0, [pc, #100]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001da6:	f7fe fec9 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <_Z14StartUpdateLCDPv+0x1ce>
            osDelay(100);
 8001dba:	2064      	movs	r0, #100	; 0x64
 8001dbc:	f008 fbb4 	bl	800a528 <osDelay>
          while (PS4.connected() == 0) {
 8001dc0:	e7f0      	b.n	8001da4 <_Z14StartUpdateLCDPv+0x1b0>
          }
          ssd1306_SetCursor((128 - 11 * 10) / 2, 26);
 8001dc2:	211a      	movs	r1, #26
 8001dc4:	2009      	movs	r0, #9
 8001dc6:	f000 fd6b 	bl	80028a0 <ssd1306_SetCursor>
          ssd1306_WriteString("Paired!", Font_11x18, White_);
 8001dca:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <_Z14StartUpdateLCDPv+0x21c>)
 8001dcc:	2301      	movs	r3, #1
 8001dce:	ca06      	ldmia	r2, {r1, r2}
 8001dd0:	4816      	ldr	r0, [pc, #88]	; (8001e2c <_Z14StartUpdateLCDPv+0x238>)
 8001dd2:	f000 fd3f 	bl	8002854 <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8001dd6:	f000 fc2d 	bl	8002634 <ssd1306_UpdateScreen>
          break;
 8001dda:	e000      	b.n	8001dde <_Z14StartUpdateLCDPv+0x1ea>
          break;
 8001ddc:	bf00      	nop
      }
    }
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_LCD;
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <_Z14StartUpdateLCDPv+0x208>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <_Z14StartUpdateLCDPv+0x20c>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <_Z14StartUpdateLCDPv+0x20c>)
 8001df0:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(100);
 8001df2:	2064      	movs	r0, #100	; 0x64
 8001df4:	f008 fb98 	bl	800a528 <osDelay>
  }
 8001df8:	e705      	b.n	8001c06 <_Z14StartUpdateLCDPv+0x12>
 8001dfa:	bf00      	nop
 8001dfc:	200002c0 	.word	0x200002c0
 8001e00:	2000068a 	.word	0x2000068a
 8001e04:	20000684 	.word	0x20000684
 8001e08:	20000680 	.word	0x20000680
 8001e0c:	200005a4 	.word	0x200005a4
 8001e10:	20000008 	.word	0x20000008
 8001e14:	08013bc0 	.word	0x08013bc0
 8001e18:	20000683 	.word	0x20000683
 8001e1c:	08013bc4 	.word	0x08013bc4
 8001e20:	08013bd0 	.word	0x08013bd0
 8001e24:	08013bdc 	.word	0x08013bdc
 8001e28:	08013be4 	.word	0x08013be4
 8001e2c:	08013bf0 	.word	0x08013bf0

08001e30 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END StartUpdateLCD */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d101      	bne.n	8001e46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e42:	f000 fd67 	bl	8002914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40001c00 	.word	0x40001c00

08001e54 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
    {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  Serial.print("\r\nSomething went wrong!");
 8001e58:	4903      	ldr	r1, [pc, #12]	; (8001e68 <Error_Handler+0x14>)
 8001e5a:	4804      	ldr	r0, [pc, #16]	; (8001e6c <Error_Handler+0x18>)
 8001e5c:	f7fe fbac 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e60:	b672      	cpsid	i
}
 8001e62:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <Error_Handler+0x10>
 8001e66:	bf00      	nop
 8001e68:	08013bf8 	.word	0x08013bf8
 8001e6c:	200003bc 	.word	0x200003bc

08001e70 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8001e78:	f7fe fd50 	bl	800091c <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001e7c:	f7fe fd36 	bl	80008ec <_ZN3P103SetEv>
        spi::init();
 8001e80:	f000 f845 	bl	8001f0e <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001e84:	f7fe fd1c 	bl	80008c0 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8001e88:	2218      	movs	r2, #24
 8001e8a:	2188      	movs	r1, #136	; 0x88
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f845 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f864 	bl	8001f60 <_ZN8MAX3421eI3P102P9E5resetEv>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eac:	e02b      	b.n	8001f06 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001eae:	22c1      	movs	r2, #193	; 0xc1
 8001eb0:	21d8      	movs	r1, #216	; 0xd8
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f832 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8001eb8:	2260      	movs	r2, #96	; 0x60
 8001eba:	21d0      	movs	r1, #208	; 0xd0
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f82d 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	21e8      	movs	r1, #232	; 0xe8
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f828 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8001ecc:	21e8      	movs	r1, #232	; 0xe8
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f876 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bf0c      	ite	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	2300      	movne	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d000      	beq.n	8001eea <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8001ee8:	e7f0      	b.n	8001ecc <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f88a 	bl	8002004 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	21c8      	movs	r1, #200	; 0xc8
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f811 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001efa:	2201      	movs	r2, #1
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f80c 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
        }
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001f2c:	f7fe fcea 	bl	8000904 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8001f3a:	78bb      	ldrb	r3, [r7, #2]
 8001f3c:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001f3e:	f107 010c 	add.w	r1, r7, #12
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	2202      	movs	r2, #2
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8001f4a:	f003 ff30 	bl	8005dae <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001f4e:	f7fe fccd 	bl	80008ec <_ZN3P103SetEv>
        return;
 8001f52:	bf00      	nop
};
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000320 	.word	0x20000320

08001f60 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	2178      	movs	r1, #120	; 0x78
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ffd3 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2178      	movs	r1, #120	; 0x78
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffce 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	3301      	adds	r3, #1
 8001f84:	81fb      	strh	r3, [r7, #14]
 8001f86:	89fb      	ldrh	r3, [r7, #14]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00f      	beq.n	8001fb6 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8001f96:	2168      	movs	r1, #104	; 0x68
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f811 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d100      	bne.n	8001fb4 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8001fb2:	e7e5      	b.n	8001f80 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8001fb4:	bf00      	nop
        return ( i);
 8001fb6:	89fb      	ldrh	r3, [r7, #14]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 8001fcc:	f7fe fc9a 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8001fd0:	1cf9      	adds	r1, r7, #3
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4809      	ldr	r0, [pc, #36]	; (8002000 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001fda:	f003 fee8 	bl	8005dae <HAL_SPI_Transmit>
        uint8_t rv = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8001fe2:	f107 010f 	add.w	r1, r7, #15
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	2201      	movs	r2, #1
 8001fec:	4804      	ldr	r0, [pc, #16]	; (8002000 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001fee:	f004 f81a 	bl	8006026 <HAL_SPI_Receive>
        SPI_SS::Set();
 8001ff2:	f7fe fc7b 	bl	80008ec <_ZN3P103SetEv>
        return (rv);
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000320 	.word	0x20000320

08002004 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 800200c:	21f8      	movs	r1, #248	; 0xf8
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffd6 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002014:	4603      	mov	r3, r0
 8002016:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800201e:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2bc0      	cmp	r3, #192	; 0xc0
 8002024:	d04a      	beq.n	80020bc <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 8002026:	2bc0      	cmp	r3, #192	; 0xc0
 8002028:	dc55      	bgt.n	80020d6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800202a:	2b80      	cmp	r3, #128	; 0x80
 800202c:	d006      	beq.n	800203c <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 800202e:	2b80      	cmp	r3, #128	; 0x80
 8002030:	dc51      	bgt.n	80020d6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8002032:	2b00      	cmp	r3, #0
 8002034:	d046      	beq.n	80020c4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 8002036:	2b40      	cmp	r3, #64	; 0x40
 8002038:	d020      	beq.n	800207c <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 800203a:	e04c      	b.n	80020d6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 800203c:	21d8      	movs	r1, #216	; 0xd8
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ffbe 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002044:	4603      	mov	r3, r0
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf0c      	ite	eq
 800204e:	2301      	moveq	r3, #1
 8002050:	2300      	movne	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8002058:	22c9      	movs	r2, #201	; 0xc9
 800205a:	21d8      	movs	r1, #216	; 0xd8
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff5d 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002064:	2202      	movs	r2, #2
 8002066:	701a      	strb	r2, [r3, #0]
                        break;
 8002068:	e035      	b.n	80020d6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800206a:	22cb      	movs	r2, #203	; 0xcb
 800206c:	21d8      	movs	r1, #216	; 0xd8
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ff54 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002076:	2203      	movs	r2, #3
 8002078:	701a      	strb	r2, [r3, #0]
                        break;
 800207a:	e02c      	b.n	80020d6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 800207c:	21d8      	movs	r1, #216	; 0xd8
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ff9e 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002084:	4603      	mov	r3, r0
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf0c      	ite	eq
 800208e:	2301      	moveq	r3, #1
 8002090:	2300      	movne	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8002098:	22cb      	movs	r2, #203	; 0xcb
 800209a:	21d8      	movs	r1, #216	; 0xd8
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff3d 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 80020a2:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80020a4:	2203      	movs	r2, #3
 80020a6:	701a      	strb	r2, [r3, #0]
                        break;
 80020a8:	e015      	b.n	80020d6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 80020aa:	22c9      	movs	r2, #201	; 0xc9
 80020ac:	21d8      	movs	r1, #216	; 0xd8
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ff34 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80020b6:	2202      	movs	r2, #2
 80020b8:	701a      	strb	r2, [r3, #0]
                        break;
 80020ba:	e00c      	b.n	80020d6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
                        break;
 80020c2:	e008      	b.n	80020d6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 80020c4:	22d1      	movs	r2, #209	; 0xd1
 80020c6:	21d8      	movs	r1, #216	; 0xd8
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff27 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
                        break;
 80020d4:	bf00      	nop
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200006b0 	.word	0x200006b0

080020e4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d115      	bne.n	8002120 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d110      	bne.n	8002120 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 80020fe:	490a      	ldr	r1, [pc, #40]	; (8002128 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002100:	480a      	ldr	r0, [pc, #40]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002102:	f7fe fbc7 	bl	8000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 8002106:	480a      	ldr	r0, [pc, #40]	; (8002130 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002108:	f00f ff1a 	bl	8011f40 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 800210c:	4908      	ldr	r1, [pc, #32]	; (8002130 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800210e:	4809      	ldr	r0, [pc, #36]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002110:	f00b fd1a 	bl	800db48 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002116:	2200      	movs	r2, #0
 8002118:	4906      	ldr	r1, [pc, #24]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800211a:	4808      	ldr	r0, [pc, #32]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800211c:	f7fe fce6 	bl	8000aec <_ZN5PS4BTC1EP3BTDbPKc>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	2000027c 	.word	0x2000027c
 800212c:	200003bc 	.word	0x200003bc
 8002130:	200003d0 	.word	0x200003d0
 8002134:	2000048c 	.word	0x2000048c
 8002138:	08013c10 	.word	0x08013c10
 800213c:	200005a4 	.word	0x200005a4

08002140 <_GLOBAL__sub_I_rx_buf>:
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
 8002144:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002148:	2001      	movs	r0, #1
 800214a:	f7ff ffcb 	bl	80020e4 <_Z41__static_initialization_and_destruction_0ii>
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_MspInit+0x54>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a11      	ldr	r2, [pc, #68]	; (80021a4 <HAL_MspInit+0x54>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_MspInit+0x54>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_MspInit+0x54>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_MspInit+0x54>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_MspInit+0x54>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	210f      	movs	r1, #15
 8002192:	f06f 0001 	mvn.w	r0, #1
 8002196:	f000 fcb9 	bl	8002b0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_I2C_MspInit+0x84>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d12c      	bne.n	8002224 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_I2C_MspInit+0x88>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_I2C_MspInit+0x88>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_I2C_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ec:	2312      	movs	r3, #18
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021f8:	2304      	movs	r3, #4
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	480c      	ldr	r0, [pc, #48]	; (8002234 <HAL_I2C_MspInit+0x8c>)
 8002204:	f000 fcac 	bl	8002b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_I2C_MspInit+0x88>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_I2C_MspInit+0x88>)
 8002212:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002216:	6413      	str	r3, [r2, #64]	; 0x40
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_I2C_MspInit+0x88>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40005400 	.word	0x40005400
 8002230:	40023800 	.word	0x40023800
 8002234:	40020400 	.word	0x40020400

08002238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a19      	ldr	r2, [pc, #100]	; (80022bc <HAL_SPI_MspInit+0x84>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d12b      	bne.n	80022b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_SPI_MspInit+0x88>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_SPI_MspInit+0x88>)
 8002264:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_SPI_MspInit+0x88>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_SPI_MspInit+0x88>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_SPI_MspInit+0x88>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_SPI_MspInit+0x88>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002292:	23e0      	movs	r3, #224	; 0xe0
 8002294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a2:	2305      	movs	r3, #5
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_SPI_MspInit+0x8c>)
 80022ae:	f000 fc57 	bl	8002b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	3728      	adds	r7, #40	; 0x28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40013000 	.word	0x40013000
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020000 	.word	0x40020000

080022c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_TIM_Base_MspInit+0x48>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d115      	bne.n	8002306 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_TIM_Base_MspInit+0x4c>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <HAL_TIM_Base_MspInit+0x4c>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_TIM_Base_MspInit+0x4c>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2105      	movs	r1, #5
 80022fa:	202d      	movs	r0, #45	; 0x2d
 80022fc:	f000 fc06 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002300:	202d      	movs	r0, #45	; 0x2d
 8002302:	f000 fc1f 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40002000 	.word	0x40002000
 8002314:	40023800 	.word	0x40023800

08002318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a19      	ldr	r2, [pc, #100]	; (800239c <HAL_UART_MspInit+0x84>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d12b      	bne.n	8002392 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <HAL_UART_MspInit+0x88>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a17      	ldr	r2, [pc, #92]	; (80023a0 <HAL_UART_MspInit+0x88>)
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_UART_MspInit+0x88>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_UART_MspInit+0x88>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <HAL_UART_MspInit+0x88>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_UART_MspInit+0x88>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002372:	230c      	movs	r3, #12
 8002374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002382:	2307      	movs	r3, #7
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <HAL_UART_MspInit+0x8c>)
 800238e:	f000 fbe7 	bl	8002b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002392:	bf00      	nop
 8002394:	3728      	adds	r7, #40	; 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40004400 	.word	0x40004400
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020000 	.word	0x40020000

080023a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	202c      	movs	r0, #44	; 0x2c
 80023be:	f000 fba5 	bl	8002b0c <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80023c2:	202c      	movs	r0, #44	; 0x2c
 80023c4:	f000 fbbe 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	4b1f      	ldr	r3, [pc, #124]	; (800244c <HAL_InitTick+0xa4>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	4a1e      	ldr	r2, [pc, #120]	; (800244c <HAL_InitTick+0xa4>)
 80023d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d6:	6413      	str	r3, [r2, #64]	; 0x40
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <HAL_InitTick+0xa4>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023e4:	f107 0210 	add.w	r2, r7, #16
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fca8 	bl	8004d44 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80023f4:	f002 fc7e 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 80023f8:	4603      	mov	r3, r0
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	4a13      	ldr	r2, [pc, #76]	; (8002450 <HAL_InitTick+0xa8>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0c9b      	lsrs	r3, r3, #18
 8002408:	3b01      	subs	r3, #1
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_InitTick+0xac>)
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <HAL_InitTick+0xb0>)
 8002410:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_InitTick+0xac>)
 8002414:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002418:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 800241a:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <HAL_InitTick+0xac>)
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <HAL_InitTick+0xac>)
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_InitTick+0xac>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 800242c:	4809      	ldr	r0, [pc, #36]	; (8002454 <HAL_InitTick+0xac>)
 800242e:	f004 f9dd 	bl	80067ec <HAL_TIM_Base_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d104      	bne.n	8002442 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8002438:	4806      	ldr	r0, [pc, #24]	; (8002454 <HAL_InitTick+0xac>)
 800243a:	f004 fa27 	bl	800688c <HAL_TIM_Base_Start_IT>
 800243e:	4603      	mov	r3, r0
 8002440:	e000      	b.n	8002444 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	3730      	adds	r7, #48	; 0x30
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	431bde83 	.word	0x431bde83
 8002454:	20005400 	.word	0x20005400
 8002458:	40001c00 	.word	0x40001c00

0800245c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <NMI_Handler+0x4>

08002462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <MemManage_Handler+0x4>

0800246e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <UsageFault_Handler+0x4>

0800247a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800248e:	f004 fa6d 	bl	800696c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20005400 	.word	0x20005400

0800249c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80024a2:	f004 fa63 	bl	800696c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200002c0 	.word	0x200002c0

080024b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <OTG_FS_IRQHandler+0x10>)
 80024b6:	f001 facb 	bl	8003a50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	2000595c 	.word	0x2000595c

080024c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
	return 1;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_kill>:

int _kill(int pid, int sig)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024de:	f011 fa19 	bl	8013914 <__errno>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2216      	movs	r2, #22
 80024e6:	601a      	str	r2, [r3, #0]
	return -1;
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_exit>:

void _exit (int status)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ffe7 	bl	80024d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002506:	e7fe      	b.n	8002506 <_exit+0x12>

08002508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <SystemInit+0x28>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <SystemInit+0x28>)
 8002514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <SystemInit+0x28>)
 800251e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002522:	609a      	str	r2, [r3, #8]
#endif
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800256c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002538:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800253a:	e003      	b.n	8002544 <LoopCopyDataInit>

0800253c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800253e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002540:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002542:	3104      	adds	r1, #4

08002544 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002544:	480b      	ldr	r0, [pc, #44]	; (8002574 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002548:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800254a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800254c:	d3f6      	bcc.n	800253c <CopyDataInit>
  ldr  r2, =_sbss
 800254e:	4a0b      	ldr	r2, [pc, #44]	; (800257c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002550:	e002      	b.n	8002558 <LoopFillZerobss>

08002552 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002552:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002554:	f842 3b04 	str.w	r3, [r2], #4

08002558 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800255a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800255c:	d3f9      	bcc.n	8002552 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800255e:	f7ff ffd3 	bl	8002508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002562:	f011 f9dd 	bl	8013920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002566:	f7fe fb95 	bl	8000c94 <main>
  bx  lr    
 800256a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800256c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002570:	08014d54 	.word	0x08014d54
  ldr  r0, =_sdata
 8002574:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002578:	20000184 	.word	0x20000184
  ldr  r2, =_sbss
 800257c:	20000184 	.word	0x20000184
  ldr  r3, = _ebss
 8002580:	20005d68 	.word	0x20005d68

08002584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <ADC_IRQHandler>
	...

08002588 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af04      	add	r7, sp, #16
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	2301      	movs	r3, #1
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	1dfb      	adds	r3, r7, #7
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	2301      	movs	r3, #1
 80025a2:	2200      	movs	r2, #0
 80025a4:	2178      	movs	r1, #120	; 0x78
 80025a6:	4803      	ldr	r0, [pc, #12]	; (80025b4 <ssd1306_WriteCommand+0x2c>)
 80025a8:	f000 fde4 	bl	8003174 <HAL_I2C_Mem_Write>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200001d0 	.word	0x200001d0

080025b8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af04      	add	r7, sp, #16
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ca:	9202      	str	r2, [sp, #8]
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2301      	movs	r3, #1
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	2178      	movs	r1, #120	; 0x78
 80025d8:	4803      	ldr	r0, [pc, #12]	; (80025e8 <ssd1306_WriteData+0x30>)
 80025da:	f000 fdcb 	bl	8003174 <HAL_I2C_Mem_Write>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200001d0 	.word	0x200001d0

080025ec <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e00d      	b.n	8002618 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black_) ? 0x00 : 0xFF;
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <ssd1306_Fill+0x1a>
 8002602:	2100      	movs	r1, #0
 8002604:	e000      	b.n	8002608 <ssd1306_Fill+0x1c>
 8002606:	21ff      	movs	r1, #255	; 0xff
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <ssd1306_Fill+0x44>)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	460a      	mov	r2, r1
 8002610:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3301      	adds	r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261e:	d3ed      	bcc.n	80025fc <ssd1306_Fill+0x10>
    }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	200006b4 	.word	0x200006b4

08002634 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800263a:	2300      	movs	r3, #0
 800263c:	71fb      	strb	r3, [r7, #7]
 800263e:	e016      	b.n	800266e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	3b50      	subs	r3, #80	; 0x50
 8002644:	b2db      	uxtb	r3, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff9e 	bl	8002588 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800264c:	2000      	movs	r0, #0
 800264e:	f7ff ff9b 	bl	8002588 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002652:	2010      	movs	r0, #16
 8002654:	f7ff ff98 	bl	8002588 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	01db      	lsls	r3, r3, #7
 800265c:	4a08      	ldr	r2, [pc, #32]	; (8002680 <ssd1306_UpdateScreen+0x4c>)
 800265e:	4413      	add	r3, r2
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ffa8 	bl	80025b8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	3301      	adds	r3, #1
 800266c:	71fb      	strb	r3, [r7, #7]
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	2b07      	cmp	r3, #7
 8002672:	d9e5      	bls.n	8002640 <ssd1306_UpdateScreen+0xc>
    }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200006b4 	.word	0x200006b4

08002684 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
 800268e:	460b      	mov	r3, r1
 8002690:	71bb      	strb	r3, [r7, #6]
 8002692:	4613      	mov	r3, r2
 8002694:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	2b00      	cmp	r3, #0
 800269c:	db48      	blt.n	8002730 <ssd1306_DrawPixel+0xac>
 800269e:	79bb      	ldrb	r3, [r7, #6]
 80026a0:	2b3f      	cmp	r3, #63	; 0x3f
 80026a2:	d845      	bhi.n	8002730 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80026a4:	4b25      	ldr	r3, [pc, #148]	; (800273c <ssd1306_DrawPixel+0xb8>)
 80026a6:	791b      	ldrb	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80026ac:	797b      	ldrb	r3, [r7, #5]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White_) {
 80026ba:	797b      	ldrb	r3, [r7, #5]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d11a      	bne.n	80026f6 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80026c0:	79fa      	ldrb	r2, [r7, #7]
 80026c2:	79bb      	ldrb	r3, [r7, #6]
 80026c4:	08db      	lsrs	r3, r3, #3
 80026c6:	b2d8      	uxtb	r0, r3
 80026c8:	4603      	mov	r3, r0
 80026ca:	01db      	lsls	r3, r3, #7
 80026cc:	4413      	add	r3, r2
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <ssd1306_DrawPixel+0xbc>)
 80026d0:	5cd3      	ldrb	r3, [r2, r3]
 80026d2:	b25a      	sxtb	r2, r3
 80026d4:	79bb      	ldrb	r3, [r7, #6]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	b25b      	sxtb	r3, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b259      	sxtb	r1, r3
 80026e6:	79fa      	ldrb	r2, [r7, #7]
 80026e8:	4603      	mov	r3, r0
 80026ea:	01db      	lsls	r3, r3, #7
 80026ec:	4413      	add	r3, r2
 80026ee:	b2c9      	uxtb	r1, r1
 80026f0:	4a13      	ldr	r2, [pc, #76]	; (8002740 <ssd1306_DrawPixel+0xbc>)
 80026f2:	54d1      	strb	r1, [r2, r3]
 80026f4:	e01d      	b.n	8002732 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80026f6:	79fa      	ldrb	r2, [r7, #7]
 80026f8:	79bb      	ldrb	r3, [r7, #6]
 80026fa:	08db      	lsrs	r3, r3, #3
 80026fc:	b2d8      	uxtb	r0, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	01db      	lsls	r3, r3, #7
 8002702:	4413      	add	r3, r2
 8002704:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <ssd1306_DrawPixel+0xbc>)
 8002706:	5cd3      	ldrb	r3, [r2, r3]
 8002708:	b25a      	sxtb	r2, r3
 800270a:	79bb      	ldrb	r3, [r7, #6]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	b25b      	sxtb	r3, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	b25b      	sxtb	r3, r3
 800271c:	4013      	ands	r3, r2
 800271e:	b259      	sxtb	r1, r3
 8002720:	79fa      	ldrb	r2, [r7, #7]
 8002722:	4603      	mov	r3, r0
 8002724:	01db      	lsls	r3, r3, #7
 8002726:	4413      	add	r3, r2
 8002728:	b2c9      	uxtb	r1, r1
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <ssd1306_DrawPixel+0xbc>)
 800272c:	54d1      	strb	r1, [r2, r3]
 800272e:	e000      	b.n	8002732 <ssd1306_DrawPixel+0xae>
        return;
 8002730:	bf00      	nop
    }
}
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	20000ab4 	.word	0x20000ab4
 8002740:	200006b4 	.word	0x200006b4

08002744 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	4604      	mov	r4, r0
 800274c:	1d38      	adds	r0, r7, #4
 800274e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002752:	461a      	mov	r2, r3
 8002754:	4623      	mov	r3, r4
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	4613      	mov	r3, r2
 800275a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b1f      	cmp	r3, #31
 8002760:	d902      	bls.n	8002768 <ssd1306_WriteChar+0x24>
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b7e      	cmp	r3, #126	; 0x7e
 8002766:	d901      	bls.n	800276c <ssd1306_WriteChar+0x28>
        return 0;
 8002768:	2300      	movs	r3, #0
 800276a:	e06d      	b.n	8002848 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800276c:	4b38      	ldr	r3, [pc, #224]	; (8002850 <ssd1306_WriteChar+0x10c>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	793b      	ldrb	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	2b80      	cmp	r3, #128	; 0x80
 8002778:	dc06      	bgt.n	8002788 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800277a:	4b35      	ldr	r3, [pc, #212]	; (8002850 <ssd1306_WriteChar+0x10c>)
 800277c:	885b      	ldrh	r3, [r3, #2]
 800277e:	461a      	mov	r2, r3
 8002780:	797b      	ldrb	r3, [r7, #5]
 8002782:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	dd01      	ble.n	800278c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002788:	2300      	movs	r3, #0
 800278a:	e05d      	b.n	8002848 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	e04c      	b.n	800282c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	3b20      	subs	r3, #32
 8002798:	7979      	ldrb	r1, [r7, #5]
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4619      	mov	r1, r3
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	440b      	add	r3, r1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80027ac:	2300      	movs	r3, #0
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	e034      	b.n	800281c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d012      	beq.n	80027e8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80027c2:	4b23      	ldr	r3, [pc, #140]	; (8002850 <ssd1306_WriteChar+0x10c>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	b2d8      	uxtb	r0, r3
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <ssd1306_WriteChar+0x10c>)
 80027d2:	885b      	ldrh	r3, [r3, #2]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	4413      	add	r3, r2
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	7bba      	ldrb	r2, [r7, #14]
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7ff ff4f 	bl	8002684 <ssd1306_DrawPixel>
 80027e6:	e016      	b.n	8002816 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <ssd1306_WriteChar+0x10c>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	b2d8      	uxtb	r0, r3
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <ssd1306_WriteChar+0x10c>)
 80027f8:	885b      	ldrh	r3, [r3, #2]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	4413      	add	r3, r2
 8002802:	b2d9      	uxtb	r1, r3
 8002804:	7bbb      	ldrb	r3, [r7, #14]
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	f7ff ff37 	bl	8002684 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	3301      	adds	r3, #1
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	793b      	ldrb	r3, [r7, #4]
 800281e:	461a      	mov	r2, r3
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4293      	cmp	r3, r2
 8002824:	d3c5      	bcc.n	80027b2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3301      	adds	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	797b      	ldrb	r3, [r7, #5]
 800282e:	461a      	mov	r2, r3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4293      	cmp	r3, r2
 8002834:	d3ad      	bcc.n	8002792 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <ssd1306_WriteChar+0x10c>)
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	793b      	ldrb	r3, [r7, #4]
 800283c:	b29b      	uxth	r3, r3
 800283e:	4413      	add	r3, r2
 8002840:	b29a      	uxth	r2, r3
 8002842:	4b03      	ldr	r3, [pc, #12]	; (8002850 <ssd1306_WriteChar+0x10c>)
 8002844:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3724      	adds	r7, #36	; 0x24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	20000ab4 	.word	0x20000ab4

08002854 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	1d38      	adds	r0, r7, #4
 800285e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002862:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002864:	e012      	b.n	800288c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	7818      	ldrb	r0, [r3, #0]
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	1d3a      	adds	r2, r7, #4
 800286e:	ca06      	ldmia	r2, {r1, r2}
 8002870:	f7ff ff68 	bl	8002744 <ssd1306_WriteChar>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d002      	beq.n	8002886 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	e008      	b.n	8002898 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3301      	adds	r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e8      	bne.n	8002866 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	781b      	ldrb	r3, [r3, #0]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	460a      	mov	r2, r1
 80028aa:	71fb      	strb	r3, [r7, #7]
 80028ac:	4613      	mov	r3, r2
 80028ae:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <ssd1306_SetCursor+0x2c>)
 80028b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80028b8:	79bb      	ldrb	r3, [r7, #6]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <ssd1306_SetCursor+0x2c>)
 80028be:	805a      	strh	r2, [r3, #2]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	20000ab4 	.word	0x20000ab4

080028d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_Init+0x40>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	; (8002910 <HAL_Init+0x40>)
 80028da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_Init+0x40>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <HAL_Init+0x40>)
 80028e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <HAL_Init+0x40>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a07      	ldr	r2, [pc, #28]	; (8002910 <HAL_Init+0x40>)
 80028f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f8:	2003      	movs	r0, #3
 80028fa:	f000 f8fc 	bl	8002af6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7ff fd52 	bl	80023a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002904:	f7ff fc24 	bl	8002150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023c00 	.word	0x40023c00

08002914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_IncTick+0x20>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_IncTick+0x24>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4413      	add	r3, r2
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_IncTick+0x24>)
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000014 	.word	0x20000014
 8002938:	20005448 	.word	0x20005448

0800293c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return uwTick;
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_GetTick+0x14>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20005448 	.word	0x20005448

08002954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff ffee 	bl	800293c <HAL_GetTick>
 8002960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d005      	beq.n	800297a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_Delay+0x44>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4413      	add	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800297a:	bf00      	nop
 800297c:	f7ff ffde 	bl	800293c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	429a      	cmp	r2, r3
 800298a:	d8f7      	bhi.n	800297c <HAL_Delay+0x28>
  {
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000014 	.word	0x20000014

0800299c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4907      	ldr	r1, [pc, #28]	; (8002a38 <__NVIC_EnableIRQ+0x38>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db0a      	blt.n	8002a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	490c      	ldr	r1, [pc, #48]	; (8002a88 <__NVIC_SetPriority+0x4c>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a64:	e00a      	b.n	8002a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4908      	ldr	r1, [pc, #32]	; (8002a8c <__NVIC_SetPriority+0x50>)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3b04      	subs	r3, #4
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	440b      	add	r3, r1
 8002a7a:	761a      	strb	r2, [r3, #24]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f1c3 0307 	rsb	r3, r3, #7
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	bf28      	it	cs
 8002aae:	2304      	movcs	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d902      	bls.n	8002ac0 <NVIC_EncodePriority+0x30>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b03      	subs	r3, #3
 8002abe:	e000      	b.n	8002ac2 <NVIC_EncodePriority+0x32>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	4313      	orrs	r3, r2
         );
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ff4c 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1e:	f7ff ff61 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f7ff ffb1 	bl	8002a90 <NVIC_EncodePriority>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff80 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff54 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e165      	b.n	8002e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	f040 8154 	bne.w	8002e42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d005      	beq.n	8002bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d130      	bne.n	8002c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0201 	and.w	r2, r3, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d017      	beq.n	8002c50 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d123      	bne.n	8002ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	08da      	lsrs	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3208      	adds	r2, #8
 8002c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	220f      	movs	r2, #15
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	69b9      	ldr	r1, [r7, #24]
 8002ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0203 	and.w	r2, r3, #3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80ae 	beq.w	8002e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b5d      	ldr	r3, [pc, #372]	; (8002e60 <HAL_GPIO_Init+0x300>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a5c      	ldr	r2, [pc, #368]	; (8002e60 <HAL_GPIO_Init+0x300>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b5a      	ldr	r3, [pc, #360]	; (8002e60 <HAL_GPIO_Init+0x300>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d02:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <HAL_GPIO_Init+0x304>)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4f      	ldr	r2, [pc, #316]	; (8002e68 <HAL_GPIO_Init+0x308>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d025      	beq.n	8002d7a <HAL_GPIO_Init+0x21a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4e      	ldr	r2, [pc, #312]	; (8002e6c <HAL_GPIO_Init+0x30c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01f      	beq.n	8002d76 <HAL_GPIO_Init+0x216>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4d      	ldr	r2, [pc, #308]	; (8002e70 <HAL_GPIO_Init+0x310>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d019      	beq.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <HAL_GPIO_Init+0x314>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_GPIO_Init+0x20e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4b      	ldr	r2, [pc, #300]	; (8002e78 <HAL_GPIO_Init+0x318>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00d      	beq.n	8002d6a <HAL_GPIO_Init+0x20a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4a      	ldr	r2, [pc, #296]	; (8002e7c <HAL_GPIO_Init+0x31c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d007      	beq.n	8002d66 <HAL_GPIO_Init+0x206>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a49      	ldr	r2, [pc, #292]	; (8002e80 <HAL_GPIO_Init+0x320>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_GPIO_Init+0x202>
 8002d5e:	2306      	movs	r3, #6
 8002d60:	e00c      	b.n	8002d7c <HAL_GPIO_Init+0x21c>
 8002d62:	2307      	movs	r3, #7
 8002d64:	e00a      	b.n	8002d7c <HAL_GPIO_Init+0x21c>
 8002d66:	2305      	movs	r3, #5
 8002d68:	e008      	b.n	8002d7c <HAL_GPIO_Init+0x21c>
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	e006      	b.n	8002d7c <HAL_GPIO_Init+0x21c>
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e004      	b.n	8002d7c <HAL_GPIO_Init+0x21c>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e002      	b.n	8002d7c <HAL_GPIO_Init+0x21c>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_GPIO_Init+0x21c>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	f002 0203 	and.w	r2, r2, #3
 8002d82:	0092      	lsls	r2, r2, #2
 8002d84:	4093      	lsls	r3, r2
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d8c:	4935      	ldr	r1, [pc, #212]	; (8002e64 <HAL_GPIO_Init+0x304>)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	089b      	lsrs	r3, r3, #2
 8002d92:	3302      	adds	r3, #2
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d9a:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <HAL_GPIO_Init+0x324>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dbe:	4a31      	ldr	r2, [pc, #196]	; (8002e84 <HAL_GPIO_Init+0x324>)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dc4:	4b2f      	ldr	r3, [pc, #188]	; (8002e84 <HAL_GPIO_Init+0x324>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002de8:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <HAL_GPIO_Init+0x324>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_GPIO_Init+0x324>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <HAL_GPIO_Init+0x324>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_GPIO_Init+0x324>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <HAL_GPIO_Init+0x324>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3301      	adds	r3, #1
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b0f      	cmp	r3, #15
 8002e4c:	f67f ae96 	bls.w	8002b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40013800 	.word	0x40013800
 8002e68:	40020000 	.word	0x40020000
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40020800 	.word	0x40020800
 8002e74:	40020c00 	.word	0x40020c00
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40021400 	.word	0x40021400
 8002e80:	40021800 	.word	0x40021800
 8002e84:	40013c00 	.word	0x40013c00

08002e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	887b      	ldrh	r3, [r7, #2]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	e001      	b.n	8002eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec8:	787b      	ldrb	r3, [r7, #1]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ed4:	e003      	b.n	8002ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ed6:	887b      	ldrh	r3, [r7, #2]
 8002ed8:	041a      	lsls	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	619a      	str	r2, [r3, #24]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e12b      	b.n	8003156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff f948 	bl	80021a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f50:	f001 fed0 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8002f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a81      	ldr	r2, [pc, #516]	; (8003160 <HAL_I2C_Init+0x274>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d807      	bhi.n	8002f70 <HAL_I2C_Init+0x84>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a80      	ldr	r2, [pc, #512]	; (8003164 <HAL_I2C_Init+0x278>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	bf94      	ite	ls
 8002f68:	2301      	movls	r3, #1
 8002f6a:	2300      	movhi	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e006      	b.n	8002f7e <HAL_I2C_Init+0x92>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a7d      	ldr	r2, [pc, #500]	; (8003168 <HAL_I2C_Init+0x27c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0e7      	b.n	8003156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a78      	ldr	r2, [pc, #480]	; (800316c <HAL_I2C_Init+0x280>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0c9b      	lsrs	r3, r3, #18
 8002f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a6a      	ldr	r2, [pc, #424]	; (8003160 <HAL_I2C_Init+0x274>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d802      	bhi.n	8002fc0 <HAL_I2C_Init+0xd4>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	e009      	b.n	8002fd4 <HAL_I2C_Init+0xe8>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	4a69      	ldr	r2, [pc, #420]	; (8003170 <HAL_I2C_Init+0x284>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	495c      	ldr	r1, [pc, #368]	; (8003160 <HAL_I2C_Init+0x274>)
 8002ff0:	428b      	cmp	r3, r1
 8002ff2:	d819      	bhi.n	8003028 <HAL_I2C_Init+0x13c>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e59      	subs	r1, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003002:	1c59      	adds	r1, r3, #1
 8003004:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003008:	400b      	ands	r3, r1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_I2C_Init+0x138>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1e59      	subs	r1, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fbb1 f3f3 	udiv	r3, r1, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	e051      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003024:	2304      	movs	r3, #4
 8003026:	e04f      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d111      	bne.n	8003054 <HAL_I2C_Init+0x168>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e58      	subs	r0, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	440b      	add	r3, r1
 800303e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003042:	3301      	adds	r3, #1
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e012      	b.n	800307a <HAL_I2C_Init+0x18e>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	0099      	lsls	r1, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Init+0x196>
 800307e:	2301      	movs	r3, #1
 8003080:	e022      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10e      	bne.n	80030a8 <HAL_I2C_Init+0x1bc>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e58      	subs	r0, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	440b      	add	r3, r1
 8003098:	fbb0 f3f3 	udiv	r3, r0, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a6:	e00f      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1e58      	subs	r0, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	0099      	lsls	r1, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	6809      	ldr	r1, [r1, #0]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6911      	ldr	r1, [r2, #16]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68d2      	ldr	r2, [r2, #12]
 8003102:	4311      	orrs	r1, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	430b      	orrs	r3, r1
 800310a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	000186a0 	.word	0x000186a0
 8003164:	001e847f 	.word	0x001e847f
 8003168:	003d08ff 	.word	0x003d08ff
 800316c:	431bde83 	.word	0x431bde83
 8003170:	10624dd3 	.word	0x10624dd3

08003174 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	4608      	mov	r0, r1
 800317e:	4611      	mov	r1, r2
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	817b      	strh	r3, [r7, #10]
 8003186:	460b      	mov	r3, r1
 8003188:	813b      	strh	r3, [r7, #8]
 800318a:	4613      	mov	r3, r2
 800318c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800318e:	f7ff fbd5 	bl	800293c <HAL_GetTick>
 8003192:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b20      	cmp	r3, #32
 800319e:	f040 80d9 	bne.w	8003354 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2319      	movs	r3, #25
 80031a8:	2201      	movs	r2, #1
 80031aa:	496d      	ldr	r1, [pc, #436]	; (8003360 <HAL_I2C_Mem_Write+0x1ec>)
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f971 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
 80031ba:	e0cc      	b.n	8003356 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_I2C_Mem_Write+0x56>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0c5      	b.n	8003356 <HAL_I2C_Mem_Write+0x1e2>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d007      	beq.n	80031f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2221      	movs	r2, #33	; 0x21
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2240      	movs	r2, #64	; 0x40
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a3a      	ldr	r2, [r7, #32]
 800321a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003220:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a4d      	ldr	r2, [pc, #308]	; (8003364 <HAL_I2C_Mem_Write+0x1f0>)
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003232:	88f8      	ldrh	r0, [r7, #6]
 8003234:	893a      	ldrh	r2, [r7, #8]
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	4603      	mov	r3, r0
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f890 	bl	8003368 <I2C_RequestMemoryWrite>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d052      	beq.n	80032f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e081      	b.n	8003356 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f9f2 	bl	8003640 <I2C_WaitOnTXEFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b04      	cmp	r3, #4
 8003268:	d107      	bne.n	800327a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003278:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e06b      	b.n	8003356 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	781a      	ldrb	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d11b      	bne.n	80032f4 <HAL_I2C_Mem_Write+0x180>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d017      	beq.n	80032f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1aa      	bne.n	8003252 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f9de 	bl	80036c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	2b04      	cmp	r3, #4
 8003312:	d107      	bne.n	8003324 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003322:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e016      	b.n	8003356 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	00100002 	.word	0x00100002
 8003364:	ffff0000 	.word	0xffff0000

08003368 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	461a      	mov	r2, r3
 8003376:	4603      	mov	r3, r0
 8003378:	817b      	strh	r3, [r7, #10]
 800337a:	460b      	mov	r3, r1
 800337c:	813b      	strh	r3, [r7, #8]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003390:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	2200      	movs	r2, #0
 800339a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f878 	bl	8003494 <I2C_WaitOnFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00d      	beq.n	80033c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b8:	d103      	bne.n	80033c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e05f      	b.n	8003486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033c6:	897b      	ldrh	r3, [r7, #10]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	6a3a      	ldr	r2, [r7, #32]
 80033da:	492d      	ldr	r1, [pc, #180]	; (8003490 <I2C_RequestMemoryWrite+0x128>)
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f8b0 	bl	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e04c      	b.n	8003486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003404:	6a39      	ldr	r1, [r7, #32]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f91a 	bl	8003640 <I2C_WaitOnTXEFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b04      	cmp	r3, #4
 8003418:	d107      	bne.n	800342a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003428:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e02b      	b.n	8003486 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d105      	bne.n	8003440 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003434:	893b      	ldrh	r3, [r7, #8]
 8003436:	b2da      	uxtb	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	611a      	str	r2, [r3, #16]
 800343e:	e021      	b.n	8003484 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003440:	893b      	ldrh	r3, [r7, #8]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	b29b      	uxth	r3, r3
 8003446:	b2da      	uxtb	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800344e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003450:	6a39      	ldr	r1, [r7, #32]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f8f4 	bl	8003640 <I2C_WaitOnTXEFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b04      	cmp	r3, #4
 8003464:	d107      	bne.n	8003476 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003474:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e005      	b.n	8003486 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800347a:	893b      	ldrh	r3, [r7, #8]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	00010002 	.word	0x00010002

08003494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a4:	e025      	b.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d021      	beq.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7ff fa45 	bl	800293c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e023      	b.n	800353a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10d      	bne.n	8003518 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	e00c      	b.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4013      	ands	r3, r2
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	429a      	cmp	r2, r3
 8003536:	d0b6      	beq.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003550:	e051      	b.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003560:	d123      	bne.n	80035aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003570:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800357a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f043 0204 	orr.w	r2, r3, #4
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e046      	b.n	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d021      	beq.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7ff f9c3 	bl	800293c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d116      	bne.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f043 0220 	orr.w	r2, r3, #32
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e020      	b.n	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d10c      	bne.n	800361a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf14      	ite	ne
 8003612:	2301      	movne	r3, #1
 8003614:	2300      	moveq	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	e00b      	b.n	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	43da      	mvns	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4013      	ands	r3, r2
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf14      	ite	ne
 800362c:	2301      	movne	r3, #1
 800362e:	2300      	moveq	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d18d      	bne.n	8003552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800364c:	e02d      	b.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f878 	bl	8003744 <I2C_IsAcknowledgeFailed>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e02d      	b.n	80036ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d021      	beq.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003666:	f7ff f969 	bl	800293c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	d302      	bcc.n	800367c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d116      	bne.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f043 0220 	orr.w	r2, r3, #32
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e007      	b.n	80036ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b80      	cmp	r3, #128	; 0x80
 80036b6:	d1ca      	bne.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036ce:	e02d      	b.n	800372c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f837 	bl	8003744 <I2C_IsAcknowledgeFailed>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e02d      	b.n	800373c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e6:	d021      	beq.n	800372c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e8:	f7ff f928 	bl	800293c <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d302      	bcc.n	80036fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d116      	bne.n	800372c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e007      	b.n	800373c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b04      	cmp	r3, #4
 8003738:	d1ca      	bne.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d11b      	bne.n	8003794 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003764:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f043 0204 	orr.w	r2, r3, #4
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a4:	b08f      	sub	sp, #60	; 0x3c
 80037a6:	af0a      	add	r7, sp, #40	; 0x28
 80037a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e116      	b.n	80039e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f009 fc5c 	bl	800d08c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2203      	movs	r2, #3
 80037d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f003 ff47 	bl	8007686 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	687e      	ldr	r6, [r7, #4]
 8003800:	466d      	mov	r5, sp
 8003802:	f106 0410 	add.w	r4, r6, #16
 8003806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800380a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800380c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800380e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003812:	e885 0003 	stmia.w	r5, {r0, r1}
 8003816:	1d33      	adds	r3, r6, #4
 8003818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800381a:	6838      	ldr	r0, [r7, #0]
 800381c:	f003 fe1e 	bl	800745c <USB_CoreInit>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0d7      	b.n	80039e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f003 ff35 	bl	80076a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383e:	2300      	movs	r3, #0
 8003840:	73fb      	strb	r3, [r7, #15]
 8003842:	e04a      	b.n	80038da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	333d      	adds	r3, #61	; 0x3d
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	333c      	adds	r3, #60	; 0x3c
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	b298      	uxth	r0, r3
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	3342      	adds	r3, #66	; 0x42
 8003880:	4602      	mov	r2, r0
 8003882:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	333f      	adds	r3, #63	; 0x3f
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	3344      	adds	r3, #68	; 0x44
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3348      	adds	r3, #72	; 0x48
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3350      	adds	r3, #80	; 0x50
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	3301      	adds	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3af      	bcc.n	8003844 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	e044      	b.n	8003974 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003912:	7bfa      	ldrb	r2, [r7, #15]
 8003914:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800392c:	7bfa      	ldrb	r2, [r7, #15]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003958:	7bfa      	ldrb	r2, [r7, #15]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	3301      	adds	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d3b5      	bcc.n	80038ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	687e      	ldr	r6, [r7, #4]
 8003986:	466d      	mov	r5, sp
 8003988:	f106 0410 	add.w	r4, r6, #16
 800398c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800398e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003994:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003998:	e885 0003 	stmia.w	r5, {r0, r1}
 800399c:	1d33      	adds	r3, r6, #4
 800399e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039a0:	6838      	ldr	r0, [r7, #0]
 80039a2:	f003 feab 	bl	80076fc <USB_DevInit>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e014      	b.n	80039e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d102      	bne.n	80039d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f001 f879 	bl	8004ac8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f004 fee6 	bl	80087ac <USB_DevDisconnect>

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_PCD_Start+0x1c>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e020      	b.n	8003a48 <HAL_PCD_Start+0x5e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d109      	bne.n	8003a2a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d005      	beq.n	8003a2a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f003 fe18 	bl	8007664 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f004 fe96 	bl	800876a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b08d      	sub	sp, #52	; 0x34
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f004 ff54 	bl	8008914 <USB_GetMode>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 83ca 	bne.w	8004208 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f004 feb8 	bl	80087ee <USB_ReadInterrupts>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 83c0 	beq.w	8004206 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f004 feaf 	bl	80087ee <USB_ReadInterrupts>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d107      	bne.n	8003aaa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f002 0202 	and.w	r2, r2, #2
 8003aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 fe9d 	bl	80087ee <USB_ReadInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d161      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699a      	ldr	r2, [r3, #24]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0210 	bic.w	r2, r2, #16
 8003acc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	f003 020f 	and.w	r2, r3, #15
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	3304      	adds	r3, #4
 8003aec:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	0c5b      	lsrs	r3, r3, #17
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d124      	bne.n	8003b44 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d035      	beq.n	8003b72 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	6a38      	ldr	r0, [r7, #32]
 8003b1a:	f004 fd03 	bl	8008524 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b2a:	441a      	add	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	699a      	ldr	r2, [r3, #24]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b3c:	441a      	add	r2, r3
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	619a      	str	r2, [r3, #24]
 8003b42:	e016      	b.n	8003b72 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	0c5b      	lsrs	r3, r3, #17
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	2b06      	cmp	r3, #6
 8003b4e:	d110      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b56:	2208      	movs	r2, #8
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6a38      	ldr	r0, [r7, #32]
 8003b5c:	f004 fce2 	bl	8008524 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b6c:	441a      	add	r2, r3
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0210 	orr.w	r2, r2, #16
 8003b80:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f004 fe31 	bl	80087ee <USB_ReadInterrupts>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b96:	d16e      	bne.n	8003c76 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f004 fe37 	bl	8008814 <USB_ReadDevAllOutEpInterrupt>
 8003ba6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ba8:	e062      	b.n	8003c70 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d057      	beq.n	8003c64 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f004 fe5c 	bl	800887c <USB_ReadDevOutEPInterrupt>
 8003bc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00c      	beq.n	8003bea <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2301      	movs	r3, #1
 8003be0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003be2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 fdc5 	bl	8004774 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00c      	beq.n	8003c0e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	461a      	mov	r2, r3
 8003c02:	2308      	movs	r3, #8
 8003c04:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 febf 	bl	800498c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c24:	461a      	mov	r2, r3
 8003c26:	2310      	movs	r3, #16
 8003c28:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	461a      	mov	r2, r3
 8003c42:	2320      	movs	r3, #32
 8003c44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d009      	beq.n	8003c64 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c62:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	3301      	adds	r3, #1
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d199      	bne.n	8003baa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f004 fdb7 	bl	80087ee <USB_ReadInterrupts>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c8a:	f040 80c0 	bne.w	8003e0e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f004 fdd8 	bl	8008848 <USB_ReadDevAllInEpInterrupt>
 8003c98:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c9e:	e0b2      	b.n	8003e06 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 80a7 	beq.w	8003dfa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f004 fdfe 	bl	80088b8 <USB_ReadDevInEPInterrupt>
 8003cbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d057      	beq.n	8003d78 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	2201      	movs	r2, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69f9      	ldr	r1, [r7, #28]
 8003ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ce8:	4013      	ands	r3, r2
 8003cea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d132      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	3348      	adds	r3, #72	; 0x48
 8003d16:	6819      	ldr	r1, [r3, #0]
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4403      	add	r3, r0
 8003d26:	3344      	adds	r3, #68	; 0x44
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4419      	add	r1, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4403      	add	r3, r0
 8003d3a:	3348      	adds	r3, #72	; 0x48
 8003d3c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d113      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x31c>
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	3350      	adds	r3, #80	; 0x50
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d108      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d64:	461a      	mov	r2, r3
 8003d66:	2101      	movs	r1, #1
 8003d68:	f004 fe06 	bl	8008978 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f009 fa0b 	bl	800d18e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2308      	movs	r3, #8
 8003d92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003daa:	461a      	mov	r2, r3
 8003dac:	2310      	movs	r3, #16
 8003dae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2340      	movs	r3, #64	; 0x40
 8003dca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de2:	461a      	mov	r2, r3
 8003de4:	2302      	movs	r3, #2
 8003de6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fc30 	bl	800465a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f47f af49 	bne.w	8003ca0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f004 fceb 	bl	80087ee <USB_ReadInterrupts>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e22:	d122      	bne.n	8003e6a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d108      	bne.n	8003e54 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f009 fbdb 	bl	800d608 <HAL_PCDEx_LPM_Callback>
 8003e52:	e002      	b.n	8003e5a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f009 fa11 	bl	800d27c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f004 fcbd 	bl	80087ee <USB_ReadInterrupts>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e7e:	d112      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d102      	bne.n	8003e96 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f009 f9cd 	bl	800d230 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ea4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f004 fc9f 	bl	80087ee <USB_ReadInterrupts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eba:	d121      	bne.n	8003f00 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003eca:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d111      	bne.n	8003efa <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	f003 020f 	and.w	r2, r3, #15
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f009 fb88 	bl	800d608 <HAL_PCDEx_LPM_Callback>
 8003ef8:	e002      	b.n	8003f00 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f009 f998 	bl	800d230 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f004 fc72 	bl	80087ee <USB_ReadInterrupts>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f14:	f040 80c7 	bne.w	80040a6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f26:	f023 0301 	bic.w	r3, r3, #1
 8003f2a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2110      	movs	r1, #16
 8003f32:	4618      	mov	r0, r3
 8003f34:	f003 fd40 	bl	80079b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3c:	e056      	b.n	8003fec <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f50:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f70:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fa4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fe4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	3301      	adds	r3, #1
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d3a3      	bcc.n	8003f3e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004004:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004008:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004022:	f043 030b 	orr.w	r3, r3, #11
 8004026:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004038:	f043 030b 	orr.w	r3, r3, #11
 800403c:	6453      	str	r3, [r2, #68]	; 0x44
 800403e:	e015      	b.n	800406c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800404e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004052:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004056:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004066:	f043 030b 	orr.w	r3, r3, #11
 800406a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800407a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800407e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004090:	461a      	mov	r2, r3
 8004092:	f004 fc71 	bl	8008978 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f004 fb9f 	bl	80087ee <USB_ReadInterrupts>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ba:	d124      	bne.n	8004106 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f004 fc35 	bl	8008930 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f003 fcd5 	bl	8007a7a <USB_GetDevSpeed>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461a      	mov	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681c      	ldr	r4, [r3, #0]
 80040dc:	f000 fdfe 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 80040e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	4620      	mov	r0, r4
 80040ec:	f003 fa18 	bl	8007520 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f009 f874 	bl	800d1de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004104:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f004 fb6f 	bl	80087ee <USB_ReadInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b08      	cmp	r3, #8
 8004118:	d10a      	bne.n	8004130 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f009 f851 	bl	800d1c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f002 0208 	and.w	r2, r2, #8
 800412e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f004 fb5a 	bl	80087ee <USB_ReadInterrupts>
 800413a:	4603      	mov	r3, r0
 800413c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004144:	d10f      	bne.n	8004166 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	b2db      	uxtb	r3, r3
 800414e:	4619      	mov	r1, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f009 f8b3 	bl	800d2bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004164:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f004 fb3f 	bl	80087ee <USB_ReadInterrupts>
 8004170:	4603      	mov	r3, r0
 8004172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800417a:	d10f      	bne.n	800419c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	b2db      	uxtb	r3, r3
 8004184:	4619      	mov	r1, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f009 f886 	bl	800d298 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800419a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f004 fb24 	bl	80087ee <USB_ReadInterrupts>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b0:	d10a      	bne.n	80041c8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f009 f894 	bl	800d2e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f004 fb0e 	bl	80087ee <USB_ReadInterrupts>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d115      	bne.n	8004208 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f009 f884 	bl	800d2fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	e000      	b.n	8004208 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004206:	bf00      	nop
    }
  }
}
 8004208:	3734      	adds	r7, #52	; 0x34
 800420a:	46bd      	mov	sp, r7
 800420c:	bd90      	pop	{r4, r7, pc}

0800420e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_PCD_SetAddress+0x1a>
 8004224:	2302      	movs	r3, #2
 8004226:	e013      	b.n	8004250 <HAL_PCD_SetAddress+0x42>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f004 fa6c 	bl	800871e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	461a      	mov	r2, r3
 8004266:	4603      	mov	r3, r0
 8004268:	70fb      	strb	r3, [r7, #3]
 800426a:	460b      	mov	r3, r1
 800426c:	803b      	strh	r3, [r7, #0]
 800426e:	4613      	mov	r3, r2
 8004270:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800427a:	2b00      	cmp	r3, #0
 800427c:	da0f      	bge.n	800429e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	f003 020f 	and.w	r2, r3, #15
 8004284:	4613      	mov	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	3338      	adds	r3, #56	; 0x38
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	3304      	adds	r3, #4
 8004294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	705a      	strb	r2, [r3, #1]
 800429c:	e00f      	b.n	80042be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 020f 	and.w	r2, r3, #15
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4413      	add	r3, r2
 80042b4:	3304      	adds	r3, #4
 80042b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042ca:	883a      	ldrh	r2, [r7, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	78ba      	ldrb	r2, [r7, #2]
 80042d4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042e8:	78bb      	ldrb	r3, [r7, #2]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d102      	bne.n	80042f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_PCD_EP_Open+0xaa>
 80042fe:	2302      	movs	r3, #2
 8004300:	e00e      	b.n	8004320 <HAL_PCD_EP_Open+0xc8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68f9      	ldr	r1, [r7, #12]
 8004310:	4618      	mov	r0, r3
 8004312:	f003 fbd7 	bl	8007ac4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800431e:	7afb      	ldrb	r3, [r7, #11]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004338:	2b00      	cmp	r3, #0
 800433a:	da0f      	bge.n	800435c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	3338      	adds	r3, #56	; 0x38
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	705a      	strb	r2, [r3, #1]
 800435a:	e00f      	b.n	800437c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f003 020f 	and.w	r2, r3, #15
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	3304      	adds	r3, #4
 8004374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_PCD_EP_Close+0x6e>
 8004392:	2302      	movs	r3, #2
 8004394:	e00e      	b.n	80043b4 <HAL_PCD_EP_Close+0x8c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68f9      	ldr	r1, [r7, #12]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f003 fc15 	bl	8007bd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	460b      	mov	r3, r1
 80043ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043cc:	7afb      	ldrb	r3, [r7, #11]
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	4613      	mov	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	3304      	adds	r3, #4
 80043e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2200      	movs	r2, #0
 80043f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2200      	movs	r2, #0
 80043fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	b2da      	uxtb	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d102      	bne.n	8004418 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004418:	7afb      	ldrb	r3, [r7, #11]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	6979      	ldr	r1, [r7, #20]
 8004430:	f003 fef0 	bl	8008214 <USB_EP0StartXfer>
 8004434:	e008      	b.n	8004448 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	6979      	ldr	r1, [r7, #20]
 8004444:	f003 fca2 	bl	8007d8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	460b      	mov	r3, r1
 8004460:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004462:	7afb      	ldrb	r3, [r7, #11]
 8004464:	f003 020f 	and.w	r2, r3, #15
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	3338      	adds	r3, #56	; 0x38
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	3304      	adds	r3, #4
 8004478:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2200      	movs	r2, #0
 800448a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2201      	movs	r2, #1
 8004490:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004492:	7afb      	ldrb	r3, [r7, #11]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	b2da      	uxtb	r2, r3
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d102      	bne.n	80044ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ac:	7afb      	ldrb	r3, [r7, #11]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	6979      	ldr	r1, [r7, #20]
 80044c4:	f003 fea6 	bl	8008214 <USB_EP0StartXfer>
 80044c8:	e008      	b.n	80044dc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	6979      	ldr	r1, [r7, #20]
 80044d8:	f003 fc58 	bl	8007d8c <USB_EPStartXfer>
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	f003 020f 	and.w	r2, r3, #15
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d901      	bls.n	8004504 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e050      	b.n	80045a6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004508:	2b00      	cmp	r3, #0
 800450a:	da0f      	bge.n	800452c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	f003 020f 	and.w	r2, r3, #15
 8004512:	4613      	mov	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	3338      	adds	r3, #56	; 0x38
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	4413      	add	r3, r2
 8004520:	3304      	adds	r3, #4
 8004522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	705a      	strb	r2, [r3, #1]
 800452a:	e00d      	b.n	8004548 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	4613      	mov	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	4413      	add	r3, r2
 800453e:	3304      	adds	r3, #4
 8004540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_PCD_EP_SetStall+0x82>
 8004564:	2302      	movs	r3, #2
 8004566:	e01e      	b.n	80045a6 <HAL_PCD_EP_SetStall+0xc0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68f9      	ldr	r1, [r7, #12]
 8004576:	4618      	mov	r0, r3
 8004578:	f003 fffd 	bl	8008576 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	b2d9      	uxtb	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004596:	461a      	mov	r2, r3
 8004598:	f004 f9ee 	bl	8008978 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	f003 020f 	and.w	r2, r3, #15
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d901      	bls.n	80045cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e042      	b.n	8004652 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	da0f      	bge.n	80045f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	f003 020f 	and.w	r2, r3, #15
 80045da:	4613      	mov	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	3338      	adds	r3, #56	; 0x38
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	3304      	adds	r3, #4
 80045ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	705a      	strb	r2, [r3, #1]
 80045f2:	e00f      	b.n	8004614 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	f003 020f 	and.w	r2, r3, #15
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	3304      	adds	r3, #4
 800460c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_PCD_EP_ClrStall+0x86>
 8004630:	2302      	movs	r3, #2
 8004632:	e00e      	b.n	8004652 <HAL_PCD_EP_ClrStall+0xa4>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	4618      	mov	r0, r3
 8004644:	f004 f805 	bl	8008652 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b08a      	sub	sp, #40	; 0x28
 800465e:	af02      	add	r7, sp, #8
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	3338      	adds	r3, #56	; 0x38
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	3304      	adds	r3, #4
 8004680:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	429a      	cmp	r2, r3
 800468c:	d901      	bls.n	8004692 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e06c      	b.n	800476c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d902      	bls.n	80046ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3303      	adds	r3, #3
 80046b2:	089b      	lsrs	r3, r3, #2
 80046b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046b6:	e02b      	b.n	8004710 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d902      	bls.n	80046d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	3303      	adds	r3, #3
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68d9      	ldr	r1, [r3, #12]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	4603      	mov	r3, r0
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f003 fee1 	bl	80084ba <USB_WritePacket>

    ep->xfer_buff  += len;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	441a      	add	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	441a      	add	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	b29b      	uxth	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	429a      	cmp	r2, r3
 8004724:	d809      	bhi.n	800473a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800472e:	429a      	cmp	r2, r3
 8004730:	d203      	bcs.n	800473a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1be      	bne.n	80046b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	429a      	cmp	r2, r3
 8004744:	d811      	bhi.n	800476a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	2201      	movs	r2, #1
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	43db      	mvns	r3, r3
 8004760:	6939      	ldr	r1, [r7, #16]
 8004762:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004766:	4013      	ands	r3, r2
 8004768:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	333c      	adds	r3, #60	; 0x3c
 800478c:	3304      	adds	r3, #4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	f040 80a0 	bne.w	80048ec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d015      	beq.n	80047e2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a72      	ldr	r2, [pc, #456]	; (8004984 <PCD_EP_OutXfrComplete_int+0x210>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	f240 80dd 	bls.w	800497a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 80d7 	beq.w	800497a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d8:	461a      	mov	r2, r3
 80047da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047de:	6093      	str	r3, [r2, #8]
 80047e0:	e0cb      	b.n	800497a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f8:	461a      	mov	r2, r3
 80047fa:	2320      	movs	r3, #32
 80047fc:	6093      	str	r3, [r2, #8]
 80047fe:	e0bc      	b.n	800497a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 80b7 	bne.w	800497a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4a5d      	ldr	r2, [pc, #372]	; (8004984 <PCD_EP_OutXfrComplete_int+0x210>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d90f      	bls.n	8004834 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482a:	461a      	mov	r2, r3
 800482c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004830:	6093      	str	r3, [r2, #8]
 8004832:	e0a2      	b.n	800497a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004846:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	0159      	lsls	r1, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	440b      	add	r3, r1
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800485a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4403      	add	r3, r0
 800486a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800486e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4403      	add	r3, r0
 8004892:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4419      	add	r1, r3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4403      	add	r3, r0
 80048a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048ac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d114      	bne.n	80048de <PCD_EP_OutXfrComplete_int+0x16a>
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048d6:	461a      	mov	r2, r3
 80048d8:	2101      	movs	r1, #1
 80048da:	f004 f84d 	bl	8008978 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	4619      	mov	r1, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f008 fc37 	bl	800d158 <HAL_PCD_DataOutStageCallback>
 80048ea:	e046      	b.n	800497a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4a26      	ldr	r2, [pc, #152]	; (8004988 <PCD_EP_OutXfrComplete_int+0x214>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d124      	bne.n	800493e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	461a      	mov	r2, r3
 800490c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004910:	6093      	str	r3, [r2, #8]
 8004912:	e032      	b.n	800497a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	461a      	mov	r2, r3
 800492c:	2320      	movs	r3, #32
 800492e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f008 fc0e 	bl	800d158 <HAL_PCD_DataOutStageCallback>
 800493c:	e01d      	b.n	800497a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d114      	bne.n	800496e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d108      	bne.n	800496e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004966:	461a      	mov	r2, r3
 8004968:	2100      	movs	r1, #0
 800496a:	f004 f805 	bl	8008978 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f008 fbef 	bl	800d158 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	4f54300a 	.word	0x4f54300a
 8004988:	4f54310a 	.word	0x4f54310a

0800498c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	333c      	adds	r3, #60	; 0x3c
 80049a4:	3304      	adds	r3, #4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <PCD_EP_OutSetupPacket_int+0x88>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d90e      	bls.n	80049e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d8:	461a      	mov	r2, r3
 80049da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f008 fba7 	bl	800d134 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <PCD_EP_OutSetupPacket_int+0x88>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d90c      	bls.n	8004a08 <PCD_EP_OutSetupPacket_int+0x7c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d108      	bne.n	8004a08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a00:	461a      	mov	r2, r3
 8004a02:	2101      	movs	r1, #1
 8004a04:	f003 ffb8 	bl	8008978 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	4f54300a 	.word	0x4f54300a

08004a18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
 8004a24:	4613      	mov	r3, r2
 8004a26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d107      	bne.n	8004a46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a36:	883b      	ldrh	r3, [r7, #0]
 8004a38:	0419      	lsls	r1, r3, #16
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
 8004a44:	e028      	b.n	8004a98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	4413      	add	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	73fb      	strb	r3, [r7, #15]
 8004a58:	e00d      	b.n	8004a76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	3340      	adds	r3, #64	; 0x40
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	3301      	adds	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
 8004a76:	7bfa      	ldrb	r2, [r7, #15]
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d3ec      	bcc.n	8004a5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a80:	883b      	ldrh	r3, [r7, #0]
 8004a82:	0418      	lsls	r0, r3, #16
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6819      	ldr	r1, [r3, #0]
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	4302      	orrs	r2, r0
 8004a90:	3340      	adds	r3, #64	; 0x40
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	887a      	ldrh	r2, [r7, #2]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afa:	f043 0303 	orr.w	r3, r3, #3
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0cc      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b24:	4b68      	ldr	r3, [pc, #416]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d90c      	bls.n	8004b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b65      	ldr	r3, [pc, #404]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b63      	ldr	r3, [pc, #396]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0b8      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d020      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b64:	4b59      	ldr	r3, [pc, #356]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	4a58      	ldr	r2, [pc, #352]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b7c:	4b53      	ldr	r3, [pc, #332]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4a52      	ldr	r2, [pc, #328]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b88:	4b50      	ldr	r3, [pc, #320]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	494d      	ldr	r1, [pc, #308]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d044      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d107      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	4b47      	ldr	r3, [pc, #284]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d119      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e07f      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bce:	4b3f      	ldr	r3, [pc, #252]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e06f      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bde:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e067      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bee:	4b37      	ldr	r3, [pc, #220]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 0203 	bic.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4934      	ldr	r1, [pc, #208]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c00:	f7fd fe9c 	bl	800293c <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c08:	f7fd fe98 	bl	800293c <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e04f      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 020c 	and.w	r2, r3, #12
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1eb      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c30:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d20c      	bcs.n	8004c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e032      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c64:	4b19      	ldr	r3, [pc, #100]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4916      	ldr	r1, [pc, #88]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c82:	4b12      	ldr	r3, [pc, #72]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	490e      	ldr	r1, [pc, #56]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c96:	f000 fbb1 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	490a      	ldr	r1, [pc, #40]	; (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca8:	5ccb      	ldrb	r3, [r1, r3]
 8004caa:	fa22 f303 	lsr.w	r3, r2, r3
 8004cae:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cb2:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fd fb76 	bl	80023a8 <HAL_InitTick>

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023c00 	.word	0x40023c00
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	08013e4c 	.word	0x08013e4c
 8004cd4:	20000004 	.word	0x20000004
 8004cd8:	20000010 	.word	0x20000010

08004cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000004 	.word	0x20000004

08004cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cf8:	f7ff fff0 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	0a9b      	lsrs	r3, r3, #10
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	4903      	ldr	r1, [pc, #12]	; (8004d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40023800 	.word	0x40023800
 8004d18:	08013e5c 	.word	0x08013e5c

08004d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d20:	f7ff ffdc 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	0b5b      	lsrs	r3, r3, #13
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4903      	ldr	r1, [pc, #12]	; (8004d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	08013e5c 	.word	0x08013e5c

08004d44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	220f      	movs	r2, #15
 8004d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d54:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 0203 	and.w	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d60:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d78:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	08db      	lsrs	r3, r3, #3
 8004d7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d86:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <HAL_RCC_GetClockConfig+0x60>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 020f 	and.w	r2, r3, #15
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	601a      	str	r2, [r3, #0]
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40023c00 	.word	0x40023c00

08004da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08c      	sub	sp, #48	; 0x30
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d010      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004de0:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	496c      	ldr	r1, [pc, #432]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d010      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004e0e:	4b64      	ldr	r3, [pc, #400]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e14:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	4960      	ldr	r1, [pc, #384]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d017      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e3c:	4b58      	ldr	r3, [pc, #352]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	4955      	ldr	r1, [pc, #340]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d017      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e78:	4b49      	ldr	r3, [pc, #292]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	4946      	ldr	r1, [pc, #280]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e96:	d101      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 808a 	beq.w	8004fca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	4a38      	ldr	r2, [pc, #224]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ed2:	4b34      	ldr	r3, [pc, #208]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a33      	ldr	r2, [pc, #204]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004edc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ede:	f7fd fd2d 	bl	800293c <HAL_GetTick>
 8004ee2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ee6:	f7fd fd29 	bl	800293c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e278      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ef8:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f04:	4b26      	ldr	r3, [pc, #152]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d02f      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1c:	6a3a      	ldr	r2, [r7, #32]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d028      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f22:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f32:	4b1d      	ldr	r3, [pc, #116]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f38:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f3e:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d114      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f4a:	f7fd fcf7 	bl	800293c <HAL_GetTick>
 8004f4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f50:	e00a      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f52:	f7fd fcf3 	bl	800293c <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e240      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f68:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0ee      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f80:	d114      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004f82:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f96:	4902      	ldr	r1, [pc, #8]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	608b      	str	r3, [r1, #8]
 8004f9c:	e00c      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	42470e40 	.word	0x42470e40
 8004fac:	4b4a      	ldr	r3, [pc, #296]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4a49      	ldr	r2, [pc, #292]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fb6:	6093      	str	r3, [r2, #8]
 8004fb8:	4b47      	ldr	r3, [pc, #284]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc4:	4944      	ldr	r1, [pc, #272]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004fdc:	4b3f      	ldr	r3, [pc, #252]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004fde:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004fec:	4b3a      	ldr	r3, [pc, #232]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffa:	4937      	ldr	r1, [pc, #220]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800500e:	4b32      	ldr	r3, [pc, #200]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005014:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501c:	492e      	ldr	r1, [pc, #184]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d011      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005030:	4b29      	ldr	r3, [pc, #164]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005036:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	4926      	ldr	r1, [pc, #152]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800504e:	d101      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005050:	2301      	movs	r3, #1
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005060:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005066:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	491a      	ldr	r1, [pc, #104]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507e:	2b00      	cmp	r3, #0
 8005080:	d011      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005082:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005088:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005090:	4911      	ldr	r1, [pc, #68]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800509c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a0:	d101      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80050a2:	2301      	movs	r3, #1
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d005      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b4:	f040 80ff 	bne.w	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050be:	f7fd fc3d 	bl	800293c <HAL_GetTick>
 80050c2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050c4:	e00e      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050c6:	f7fd fc39 	bl	800293c <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d907      	bls.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e188      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80050d8:	40023800 	.word	0x40023800
 80050dc:	424711e0 	.word	0x424711e0
 80050e0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050e4:	4b7e      	ldr	r3, [pc, #504]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1ea      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800510c:	2b00      	cmp	r3, #0
 800510e:	d028      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d124      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005118:	4b71      	ldr	r3, [pc, #452]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800511a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	3301      	adds	r3, #1
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800512a:	4b6d      	ldr	r3, [pc, #436]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800512c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005130:	0e1b      	lsrs	r3, r3, #24
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	019b      	lsls	r3, r3, #6
 8005142:	431a      	orrs	r2, r3
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	3b01      	subs	r3, #1
 800514a:	041b      	lsls	r3, r3, #16
 800514c:	431a      	orrs	r2, r3
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	071b      	lsls	r3, r3, #28
 800515a:	4961      	ldr	r1, [pc, #388]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005180:	2b00      	cmp	r3, #0
 8005182:	d035      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800518c:	d130      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800518e:	4b54      	ldr	r3, [pc, #336]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	3301      	adds	r3, #1
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051a0:	4b4f      	ldr	r3, [pc, #316]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a6:	0f1b      	lsrs	r3, r3, #28
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	019b      	lsls	r3, r3, #6
 80051b8:	431a      	orrs	r2, r3
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	085b      	lsrs	r3, r3, #1
 80051be:	3b01      	subs	r3, #1
 80051c0:	041b      	lsls	r3, r3, #16
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	061b      	lsls	r3, r3, #24
 80051ca:	431a      	orrs	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	071b      	lsls	r3, r3, #28
 80051d0:	4943      	ldr	r1, [pc, #268]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051d8:	4b41      	ldr	r3, [pc, #260]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051de:	f023 021f 	bic.w	r2, r3, #31
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	3b01      	subs	r3, #1
 80051e8:	493d      	ldr	r1, [pc, #244]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d029      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005204:	d124      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005206:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	3301      	adds	r3, #1
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005218:	4b31      	ldr	r3, [pc, #196]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800521a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521e:	0f1b      	lsrs	r3, r3, #28
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	019b      	lsls	r3, r3, #6
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	3b01      	subs	r3, #1
 800523a:	041b      	lsls	r3, r3, #16
 800523c:	431a      	orrs	r2, r3
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	061b      	lsls	r3, r3, #24
 8005242:	431a      	orrs	r2, r3
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	071b      	lsls	r3, r3, #28
 8005248:	4925      	ldr	r1, [pc, #148]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005258:	2b00      	cmp	r3, #0
 800525a:	d016      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	019b      	lsls	r3, r3, #6
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	085b      	lsrs	r3, r3, #1
 800526e:	3b01      	subs	r3, #1
 8005270:	041b      	lsls	r3, r3, #16
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	061b      	lsls	r3, r3, #24
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	071b      	lsls	r3, r3, #28
 8005282:	4917      	ldr	r1, [pc, #92]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800528a:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800528c:	2201      	movs	r2, #1
 800528e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005290:	f7fd fb54 	bl	800293c <HAL_GetTick>
 8005294:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005298:	f7fd fb50 	bl	800293c <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e09f      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052aa:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	f040 8095 	bne.w	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052be:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052c4:	f7fd fb3a 	bl	800293c <HAL_GetTick>
 80052c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052ca:	e00f      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052cc:	f7fd fb36 	bl	800293c <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d908      	bls.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e085      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800
 80052e4:	42470068 	.word	0x42470068
 80052e8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052ec:	4b41      	ldr	r3, [pc, #260]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f8:	d0e8      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005316:	2b00      	cmp	r3, #0
 8005318:	d02b      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	2b00      	cmp	r3, #0
 8005320:	d127      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005322:	4b34      	ldr	r3, [pc, #208]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	0c1b      	lsrs	r3, r3, #16
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	3301      	adds	r3, #1
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699a      	ldr	r2, [r3, #24]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	019b      	lsls	r3, r3, #6
 800533e:	431a      	orrs	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	3b01      	subs	r3, #1
 8005346:	041b      	lsls	r3, r3, #16
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	061b      	lsls	r3, r3, #24
 8005350:	4928      	ldr	r1, [pc, #160]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005358:	4b26      	ldr	r3, [pc, #152]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800535a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800535e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	3b01      	subs	r3, #1
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	4922      	ldr	r1, [pc, #136]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01d      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x612>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005386:	d118      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005388:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	0e1b      	lsrs	r3, r3, #24
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	019b      	lsls	r3, r3, #6
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	3b01      	subs	r3, #1
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	431a      	orrs	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	4910      	ldr	r1, [pc, #64]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053ba:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053c0:	f7fd fabc 	bl	800293c <HAL_GetTick>
 80053c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053c8:	f7fd fab8 	bl	800293c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e007      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053da:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e6:	d1ef      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3730      	adds	r7, #48	; 0x30
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40023800 	.word	0x40023800
 80053f8:	42470070 	.word	0x42470070

080053fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005400:	b088      	sub	sp, #32
 8005402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005418:	4bce      	ldr	r3, [pc, #824]	; (8005754 <HAL_RCC_GetSysClockFreq+0x358>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 030c 	and.w	r3, r3, #12
 8005420:	2b0c      	cmp	r3, #12
 8005422:	f200 818d 	bhi.w	8005740 <HAL_RCC_GetSysClockFreq+0x344>
 8005426:	a201      	add	r2, pc, #4	; (adr r2, 800542c <HAL_RCC_GetSysClockFreq+0x30>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	08005461 	.word	0x08005461
 8005430:	08005741 	.word	0x08005741
 8005434:	08005741 	.word	0x08005741
 8005438:	08005741 	.word	0x08005741
 800543c:	08005467 	.word	0x08005467
 8005440:	08005741 	.word	0x08005741
 8005444:	08005741 	.word	0x08005741
 8005448:	08005741 	.word	0x08005741
 800544c:	0800546d 	.word	0x0800546d
 8005450:	08005741 	.word	0x08005741
 8005454:	08005741 	.word	0x08005741
 8005458:	08005741 	.word	0x08005741
 800545c:	080055e1 	.word	0x080055e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005460:	4bbd      	ldr	r3, [pc, #756]	; (8005758 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005462:	61bb      	str	r3, [r7, #24]
       break;
 8005464:	e16f      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005466:	4bbd      	ldr	r3, [pc, #756]	; (800575c <HAL_RCC_GetSysClockFreq+0x360>)
 8005468:	61bb      	str	r3, [r7, #24]
      break;
 800546a:	e16c      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800546c:	4bb9      	ldr	r3, [pc, #740]	; (8005754 <HAL_RCC_GetSysClockFreq+0x358>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005474:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005476:	4bb7      	ldr	r3, [pc, #732]	; (8005754 <HAL_RCC_GetSysClockFreq+0x358>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d053      	beq.n	800552a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005482:	4bb4      	ldr	r3, [pc, #720]	; (8005754 <HAL_RCC_GetSysClockFreq+0x358>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	099b      	lsrs	r3, r3, #6
 8005488:	461a      	mov	r2, r3
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005492:	f04f 0100 	mov.w	r1, #0
 8005496:	ea02 0400 	and.w	r4, r2, r0
 800549a:	603c      	str	r4, [r7, #0]
 800549c:	400b      	ands	r3, r1
 800549e:	607b      	str	r3, [r7, #4]
 80054a0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054a4:	4620      	mov	r0, r4
 80054a6:	4629      	mov	r1, r5
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	014b      	lsls	r3, r1, #5
 80054b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054b6:	0142      	lsls	r2, r0, #5
 80054b8:	4610      	mov	r0, r2
 80054ba:	4619      	mov	r1, r3
 80054bc:	4623      	mov	r3, r4
 80054be:	1ac0      	subs	r0, r0, r3
 80054c0:	462b      	mov	r3, r5
 80054c2:	eb61 0103 	sbc.w	r1, r1, r3
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	018b      	lsls	r3, r1, #6
 80054d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054d4:	0182      	lsls	r2, r0, #6
 80054d6:	1a12      	subs	r2, r2, r0
 80054d8:	eb63 0301 	sbc.w	r3, r3, r1
 80054dc:	f04f 0000 	mov.w	r0, #0
 80054e0:	f04f 0100 	mov.w	r1, #0
 80054e4:	00d9      	lsls	r1, r3, #3
 80054e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054ea:	00d0      	lsls	r0, r2, #3
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4621      	mov	r1, r4
 80054f2:	1852      	adds	r2, r2, r1
 80054f4:	4629      	mov	r1, r5
 80054f6:	eb43 0101 	adc.w	r1, r3, r1
 80054fa:	460b      	mov	r3, r1
 80054fc:	f04f 0000 	mov.w	r0, #0
 8005500:	f04f 0100 	mov.w	r1, #0
 8005504:	0259      	lsls	r1, r3, #9
 8005506:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800550a:	0250      	lsls	r0, r2, #9
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4610      	mov	r0, r2
 8005512:	4619      	mov	r1, r3
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	461a      	mov	r2, r3
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	f7fa fe80 	bl	8000220 <__aeabi_uldivmod>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4613      	mov	r3, r2
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e04c      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800552a:	4b8a      	ldr	r3, [pc, #552]	; (8005754 <HAL_RCC_GetSysClockFreq+0x358>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	099b      	lsrs	r3, r3, #6
 8005530:	461a      	mov	r2, r3
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	f240 10ff 	movw	r0, #511	; 0x1ff
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	ea02 0a00 	and.w	sl, r2, r0
 8005542:	ea03 0b01 	and.w	fp, r3, r1
 8005546:	4650      	mov	r0, sl
 8005548:	4659      	mov	r1, fp
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	014b      	lsls	r3, r1, #5
 8005554:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005558:	0142      	lsls	r2, r0, #5
 800555a:	4610      	mov	r0, r2
 800555c:	4619      	mov	r1, r3
 800555e:	ebb0 000a 	subs.w	r0, r0, sl
 8005562:	eb61 010b 	sbc.w	r1, r1, fp
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	018b      	lsls	r3, r1, #6
 8005570:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005574:	0182      	lsls	r2, r0, #6
 8005576:	1a12      	subs	r2, r2, r0
 8005578:	eb63 0301 	sbc.w	r3, r3, r1
 800557c:	f04f 0000 	mov.w	r0, #0
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	00d9      	lsls	r1, r3, #3
 8005586:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800558a:	00d0      	lsls	r0, r2, #3
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	eb12 020a 	adds.w	r2, r2, sl
 8005594:	eb43 030b 	adc.w	r3, r3, fp
 8005598:	f04f 0000 	mov.w	r0, #0
 800559c:	f04f 0100 	mov.w	r1, #0
 80055a0:	0299      	lsls	r1, r3, #10
 80055a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055a6:	0290      	lsls	r0, r2, #10
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	f7fa fe32 	bl	8000220 <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4613      	mov	r3, r2
 80055c2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055c4:	4b63      	ldr	r3, [pc, #396]	; (8005754 <HAL_RCC_GetSysClockFreq+0x358>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	0c1b      	lsrs	r3, r3, #16
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	3301      	adds	r3, #1
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	61bb      	str	r3, [r7, #24]
      break;
 80055de:	e0b2      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055e0:	4b5c      	ldr	r3, [pc, #368]	; (8005754 <HAL_RCC_GetSysClockFreq+0x358>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055e8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055ea:	4b5a      	ldr	r3, [pc, #360]	; (8005754 <HAL_RCC_GetSysClockFreq+0x358>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d04d      	beq.n	8005692 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055f6:	4b57      	ldr	r3, [pc, #348]	; (8005754 <HAL_RCC_GetSysClockFreq+0x358>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	099b      	lsrs	r3, r3, #6
 80055fc:	461a      	mov	r2, r3
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005606:	f04f 0100 	mov.w	r1, #0
 800560a:	ea02 0800 	and.w	r8, r2, r0
 800560e:	ea03 0901 	and.w	r9, r3, r1
 8005612:	4640      	mov	r0, r8
 8005614:	4649      	mov	r1, r9
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	014b      	lsls	r3, r1, #5
 8005620:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005624:	0142      	lsls	r2, r0, #5
 8005626:	4610      	mov	r0, r2
 8005628:	4619      	mov	r1, r3
 800562a:	ebb0 0008 	subs.w	r0, r0, r8
 800562e:	eb61 0109 	sbc.w	r1, r1, r9
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	018b      	lsls	r3, r1, #6
 800563c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005640:	0182      	lsls	r2, r0, #6
 8005642:	1a12      	subs	r2, r2, r0
 8005644:	eb63 0301 	sbc.w	r3, r3, r1
 8005648:	f04f 0000 	mov.w	r0, #0
 800564c:	f04f 0100 	mov.w	r1, #0
 8005650:	00d9      	lsls	r1, r3, #3
 8005652:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005656:	00d0      	lsls	r0, r2, #3
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	eb12 0208 	adds.w	r2, r2, r8
 8005660:	eb43 0309 	adc.w	r3, r3, r9
 8005664:	f04f 0000 	mov.w	r0, #0
 8005668:	f04f 0100 	mov.w	r1, #0
 800566c:	0259      	lsls	r1, r3, #9
 800566e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005672:	0250      	lsls	r0, r2, #9
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	461a      	mov	r2, r3
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	f7fa fdcc 	bl	8000220 <__aeabi_uldivmod>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4613      	mov	r3, r2
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	e04a      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005692:	4b30      	ldr	r3, [pc, #192]	; (8005754 <HAL_RCC_GetSysClockFreq+0x358>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	099b      	lsrs	r3, r3, #6
 8005698:	461a      	mov	r2, r3
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80056a2:	f04f 0100 	mov.w	r1, #0
 80056a6:	ea02 0400 	and.w	r4, r2, r0
 80056aa:	ea03 0501 	and.w	r5, r3, r1
 80056ae:	4620      	mov	r0, r4
 80056b0:	4629      	mov	r1, r5
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	014b      	lsls	r3, r1, #5
 80056bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056c0:	0142      	lsls	r2, r0, #5
 80056c2:	4610      	mov	r0, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	1b00      	subs	r0, r0, r4
 80056c8:	eb61 0105 	sbc.w	r1, r1, r5
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	018b      	lsls	r3, r1, #6
 80056d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056da:	0182      	lsls	r2, r0, #6
 80056dc:	1a12      	subs	r2, r2, r0
 80056de:	eb63 0301 	sbc.w	r3, r3, r1
 80056e2:	f04f 0000 	mov.w	r0, #0
 80056e6:	f04f 0100 	mov.w	r1, #0
 80056ea:	00d9      	lsls	r1, r3, #3
 80056ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056f0:	00d0      	lsls	r0, r2, #3
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	1912      	adds	r2, r2, r4
 80056f8:	eb45 0303 	adc.w	r3, r5, r3
 80056fc:	f04f 0000 	mov.w	r0, #0
 8005700:	f04f 0100 	mov.w	r1, #0
 8005704:	0299      	lsls	r1, r3, #10
 8005706:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800570a:	0290      	lsls	r0, r2, #10
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4610      	mov	r0, r2
 8005712:	4619      	mov	r1, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	461a      	mov	r2, r3
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	f7fa fd80 	bl	8000220 <__aeabi_uldivmod>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4613      	mov	r3, r2
 8005726:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <HAL_RCC_GetSysClockFreq+0x358>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	0f1b      	lsrs	r3, r3, #28
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	fbb2 f3f3 	udiv	r3, r2, r3
 800573c:	61bb      	str	r3, [r7, #24]
      break;
 800573e:	e002      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005742:	61bb      	str	r3, [r7, #24]
      break;
 8005744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005746:	69bb      	ldr	r3, [r7, #24]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3720      	adds	r7, #32
 800574c:	46bd      	mov	sp, r7
 800574e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005752:	bf00      	nop
 8005754:	40023800 	.word	0x40023800
 8005758:	00f42400 	.word	0x00f42400
 800575c:	007a1200 	.word	0x007a1200

08005760 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e28d      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 8083 	beq.w	8005886 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005780:	4b94      	ldr	r3, [pc, #592]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 030c 	and.w	r3, r3, #12
 8005788:	2b04      	cmp	r3, #4
 800578a:	d019      	beq.n	80057c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800578c:	4b91      	ldr	r3, [pc, #580]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005794:	2b08      	cmp	r3, #8
 8005796:	d106      	bne.n	80057a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005798:	4b8e      	ldr	r3, [pc, #568]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a4:	d00c      	beq.n	80057c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057a6:	4b8b      	ldr	r3, [pc, #556]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057ae:	2b0c      	cmp	r3, #12
 80057b0:	d112      	bne.n	80057d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057b2:	4b88      	ldr	r3, [pc, #544]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057be:	d10b      	bne.n	80057d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c0:	4b84      	ldr	r3, [pc, #528]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d05b      	beq.n	8005884 <HAL_RCC_OscConfig+0x124>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d157      	bne.n	8005884 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e25a      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e0:	d106      	bne.n	80057f0 <HAL_RCC_OscConfig+0x90>
 80057e2:	4b7c      	ldr	r3, [pc, #496]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a7b      	ldr	r2, [pc, #492]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80057e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e01d      	b.n	800582c <HAL_RCC_OscConfig+0xcc>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057f8:	d10c      	bne.n	8005814 <HAL_RCC_OscConfig+0xb4>
 80057fa:	4b76      	ldr	r3, [pc, #472]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a75      	ldr	r2, [pc, #468]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	4b73      	ldr	r3, [pc, #460]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a72      	ldr	r2, [pc, #456]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 800580c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e00b      	b.n	800582c <HAL_RCC_OscConfig+0xcc>
 8005814:	4b6f      	ldr	r3, [pc, #444]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a6e      	ldr	r2, [pc, #440]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 800581a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	4b6c      	ldr	r3, [pc, #432]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a6b      	ldr	r2, [pc, #428]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d013      	beq.n	800585c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fd f882 	bl	800293c <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800583c:	f7fd f87e 	bl	800293c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	; 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e21f      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584e:	4b61      	ldr	r3, [pc, #388]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0xdc>
 800585a:	e014      	b.n	8005886 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585c:	f7fd f86e 	bl	800293c <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005864:	f7fd f86a 	bl	800293c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b64      	cmp	r3, #100	; 0x64
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e20b      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005876:	4b57      	ldr	r3, [pc, #348]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x104>
 8005882:	e000      	b.n	8005886 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d06f      	beq.n	8005972 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005892:	4b50      	ldr	r3, [pc, #320]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b00      	cmp	r3, #0
 800589c:	d017      	beq.n	80058ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800589e:	4b4d      	ldr	r3, [pc, #308]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d105      	bne.n	80058b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058aa:	4b4a      	ldr	r3, [pc, #296]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00b      	beq.n	80058ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058b6:	4b47      	ldr	r3, [pc, #284]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058be:	2b0c      	cmp	r3, #12
 80058c0:	d11c      	bne.n	80058fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058c2:	4b44      	ldr	r3, [pc, #272]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d116      	bne.n	80058fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ce:	4b41      	ldr	r3, [pc, #260]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <HAL_RCC_OscConfig+0x186>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d001      	beq.n	80058e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e1d3      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e6:	4b3b      	ldr	r3, [pc, #236]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4937      	ldr	r1, [pc, #220]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058fa:	e03a      	b.n	8005972 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d020      	beq.n	8005946 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005904:	4b34      	ldr	r3, [pc, #208]	; (80059d8 <HAL_RCC_OscConfig+0x278>)
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590a:	f7fd f817 	bl	800293c <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005912:	f7fd f813 	bl	800293c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e1b4      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005924:	4b2b      	ldr	r3, [pc, #172]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0f0      	beq.n	8005912 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005930:	4b28      	ldr	r3, [pc, #160]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4925      	ldr	r1, [pc, #148]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005940:	4313      	orrs	r3, r2
 8005942:	600b      	str	r3, [r1, #0]
 8005944:	e015      	b.n	8005972 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005946:	4b24      	ldr	r3, [pc, #144]	; (80059d8 <HAL_RCC_OscConfig+0x278>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fc fff6 	bl	800293c <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005954:	f7fc fff2 	bl	800293c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e193      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005966:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d036      	beq.n	80059ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d016      	beq.n	80059b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005986:	4b15      	ldr	r3, [pc, #84]	; (80059dc <HAL_RCC_OscConfig+0x27c>)
 8005988:	2201      	movs	r2, #1
 800598a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7fc ffd6 	bl	800293c <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005994:	f7fc ffd2 	bl	800293c <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e173      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <HAL_RCC_OscConfig+0x274>)
 80059a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x234>
 80059b2:	e01b      	b.n	80059ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059b4:	4b09      	ldr	r3, [pc, #36]	; (80059dc <HAL_RCC_OscConfig+0x27c>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ba:	f7fc ffbf 	bl	800293c <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c0:	e00e      	b.n	80059e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059c2:	f7fc ffbb 	bl	800293c <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d907      	bls.n	80059e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e15c      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
 80059d4:	40023800 	.word	0x40023800
 80059d8:	42470000 	.word	0x42470000
 80059dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e0:	4b8a      	ldr	r3, [pc, #552]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 80059e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1ea      	bne.n	80059c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8097 	beq.w	8005b28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059fa:	2300      	movs	r3, #0
 80059fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059fe:	4b83      	ldr	r3, [pc, #524]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10f      	bne.n	8005a2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	4b7f      	ldr	r3, [pc, #508]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	4a7e      	ldr	r2, [pc, #504]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a18:	6413      	str	r3, [r2, #64]	; 0x40
 8005a1a:	4b7c      	ldr	r3, [pc, #496]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a22:	60bb      	str	r3, [r7, #8]
 8005a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a26:	2301      	movs	r3, #1
 8005a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2a:	4b79      	ldr	r3, [pc, #484]	; (8005c10 <HAL_RCC_OscConfig+0x4b0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d118      	bne.n	8005a68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a36:	4b76      	ldr	r3, [pc, #472]	; (8005c10 <HAL_RCC_OscConfig+0x4b0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a75      	ldr	r2, [pc, #468]	; (8005c10 <HAL_RCC_OscConfig+0x4b0>)
 8005a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a42:	f7fc ff7b 	bl	800293c <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a4a:	f7fc ff77 	bl	800293c <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e118      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5c:	4b6c      	ldr	r3, [pc, #432]	; (8005c10 <HAL_RCC_OscConfig+0x4b0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f0      	beq.n	8005a4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d106      	bne.n	8005a7e <HAL_RCC_OscConfig+0x31e>
 8005a70:	4b66      	ldr	r3, [pc, #408]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a74:	4a65      	ldr	r2, [pc, #404]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a7c:	e01c      	b.n	8005ab8 <HAL_RCC_OscConfig+0x358>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b05      	cmp	r3, #5
 8005a84:	d10c      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x340>
 8005a86:	4b61      	ldr	r3, [pc, #388]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a60      	ldr	r2, [pc, #384]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005a8c:	f043 0304 	orr.w	r3, r3, #4
 8005a90:	6713      	str	r3, [r2, #112]	; 0x70
 8005a92:	4b5e      	ldr	r3, [pc, #376]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	4a5d      	ldr	r2, [pc, #372]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9e:	e00b      	b.n	8005ab8 <HAL_RCC_OscConfig+0x358>
 8005aa0:	4b5a      	ldr	r3, [pc, #360]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa4:	4a59      	ldr	r2, [pc, #356]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8005aac:	4b57      	ldr	r3, [pc, #348]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	4a56      	ldr	r2, [pc, #344]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005ab2:	f023 0304 	bic.w	r3, r3, #4
 8005ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d015      	beq.n	8005aec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac0:	f7fc ff3c 	bl	800293c <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac6:	e00a      	b.n	8005ade <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac8:	f7fc ff38 	bl	800293c <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e0d7      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ade:	4b4b      	ldr	r3, [pc, #300]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0ee      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x368>
 8005aea:	e014      	b.n	8005b16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aec:	f7fc ff26 	bl	800293c <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005af2:	e00a      	b.n	8005b0a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005af4:	f7fc ff22 	bl	800293c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e0c1      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b0a:	4b40      	ldr	r3, [pc, #256]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1ee      	bne.n	8005af4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d105      	bne.n	8005b28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b1c:	4b3b      	ldr	r3, [pc, #236]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	4a3a      	ldr	r2, [pc, #232]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 80ad 	beq.w	8005c8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b32:	4b36      	ldr	r3, [pc, #216]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 030c 	and.w	r3, r3, #12
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d060      	beq.n	8005c00 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d145      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b46:	4b33      	ldr	r3, [pc, #204]	; (8005c14 <HAL_RCC_OscConfig+0x4b4>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4c:	f7fc fef6 	bl	800293c <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b54:	f7fc fef2 	bl	800293c <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e093      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b66:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f0      	bne.n	8005b54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	019b      	lsls	r3, r3, #6
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	041b      	lsls	r3, r3, #16
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	061b      	lsls	r3, r3, #24
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	071b      	lsls	r3, r3, #28
 8005b9e:	491b      	ldr	r1, [pc, #108]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba4:	4b1b      	ldr	r3, [pc, #108]	; (8005c14 <HAL_RCC_OscConfig+0x4b4>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005baa:	f7fc fec7 	bl	800293c <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb2:	f7fc fec3 	bl	800293c <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e064      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc4:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0f0      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x452>
 8005bd0:	e05c      	b.n	8005c8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd2:	4b10      	ldr	r3, [pc, #64]	; (8005c14 <HAL_RCC_OscConfig+0x4b4>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd8:	f7fc feb0 	bl	800293c <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be0:	f7fc feac 	bl	800293c <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e04d      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf2:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <HAL_RCC_OscConfig+0x4ac>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f0      	bne.n	8005be0 <HAL_RCC_OscConfig+0x480>
 8005bfe:	e045      	b.n	8005c8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d107      	bne.n	8005c18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e040      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
 8005c0c:	40023800 	.word	0x40023800
 8005c10:	40007000 	.word	0x40007000
 8005c14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c18:	4b1f      	ldr	r3, [pc, #124]	; (8005c98 <HAL_RCC_OscConfig+0x538>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d030      	beq.n	8005c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d129      	bne.n	8005c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d122      	bne.n	8005c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c48:	4013      	ands	r3, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d119      	bne.n	8005c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	085b      	lsrs	r3, r3, #1
 8005c60:	3b01      	subs	r3, #1
 8005c62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d10f      	bne.n	8005c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d107      	bne.n	8005c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d001      	beq.n	8005c8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e000      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40023800 	.word	0x40023800

08005c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e07b      	b.n	8005da6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d108      	bne.n	8005cc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cbe:	d009      	beq.n	8005cd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	61da      	str	r2, [r3, #28]
 8005cc6:	e005      	b.n	8005cd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fc faa2 	bl	8002238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d58:	ea42 0103 	orr.w	r1, r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	0c1b      	lsrs	r3, r3, #16
 8005d72:	f003 0104 	and.w	r1, r3, #4
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	f003 0210 	and.w	r2, r3, #16
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69da      	ldr	r2, [r3, #28]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b088      	sub	sp, #32
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	603b      	str	r3, [r7, #0]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_SPI_Transmit+0x22>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e126      	b.n	800601e <HAL_SPI_Transmit+0x270>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dd8:	f7fc fdb0 	bl	800293c <HAL_GetTick>
 8005ddc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d002      	beq.n	8005df4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dee:	2302      	movs	r3, #2
 8005df0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005df2:	e10b      	b.n	800600c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_SPI_Transmit+0x52>
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e04:	e102      	b.n	800600c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2203      	movs	r2, #3
 8005e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	88fa      	ldrh	r2, [r7, #6]
 8005e1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4c:	d10f      	bne.n	8005e6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d007      	beq.n	8005e8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e94:	d14b      	bne.n	8005f2e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_SPI_Transmit+0xf6>
 8005e9e:	8afb      	ldrh	r3, [r7, #22]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d13e      	bne.n	8005f22 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	881a      	ldrh	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb4:	1c9a      	adds	r2, r3, #2
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ec8:	e02b      	b.n	8005f22 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d112      	bne.n	8005efe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	1c9a      	adds	r2, r3, #2
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	86da      	strh	r2, [r3, #54]	; 0x36
 8005efc:	e011      	b.n	8005f22 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005efe:	f7fc fd1d 	bl	800293c <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d803      	bhi.n	8005f16 <HAL_SPI_Transmit+0x168>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d102      	bne.n	8005f1c <HAL_SPI_Transmit+0x16e>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f20:	e074      	b.n	800600c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1ce      	bne.n	8005eca <HAL_SPI_Transmit+0x11c>
 8005f2c:	e04c      	b.n	8005fc8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_SPI_Transmit+0x18e>
 8005f36:	8afb      	ldrh	r3, [r7, #22]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d140      	bne.n	8005fbe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	330c      	adds	r3, #12
 8005f46:	7812      	ldrb	r2, [r2, #0]
 8005f48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f62:	e02c      	b.n	8005fbe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d113      	bne.n	8005f9a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	330c      	adds	r3, #12
 8005f7c:	7812      	ldrb	r2, [r2, #0]
 8005f7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f98:	e011      	b.n	8005fbe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f9a:	f7fc fccf 	bl	800293c <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d803      	bhi.n	8005fb2 <HAL_SPI_Transmit+0x204>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d102      	bne.n	8005fb8 <HAL_SPI_Transmit+0x20a>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fbc:	e026      	b.n	800600c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1cd      	bne.n	8005f64 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 fbcb 	bl	8006768 <SPI_EndRxTxTransaction>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	77fb      	strb	r3, [r7, #31]
 8006008:	e000      	b.n	800600c <HAL_SPI_Transmit+0x25e>
  }

error:
 800600a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800601c:	7ffb      	ldrb	r3, [r7, #31]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3720      	adds	r7, #32
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b088      	sub	sp, #32
 800602a:	af02      	add	r7, sp, #8
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	603b      	str	r3, [r7, #0]
 8006032:	4613      	mov	r3, r2
 8006034:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006042:	d112      	bne.n	800606a <HAL_SPI_Receive+0x44>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10e      	bne.n	800606a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2204      	movs	r2, #4
 8006050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006054:	88fa      	ldrh	r2, [r7, #6]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	4613      	mov	r3, r2
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	68b9      	ldr	r1, [r7, #8]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f8f1 	bl	8006248 <HAL_SPI_TransmitReceive>
 8006066:	4603      	mov	r3, r0
 8006068:	e0ea      	b.n	8006240 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_SPI_Receive+0x52>
 8006074:	2302      	movs	r3, #2
 8006076:	e0e3      	b.n	8006240 <HAL_SPI_Receive+0x21a>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006080:	f7fc fc5c 	bl	800293c <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b01      	cmp	r3, #1
 8006090:	d002      	beq.n	8006098 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006092:	2302      	movs	r3, #2
 8006094:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006096:	e0ca      	b.n	800622e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <HAL_SPI_Receive+0x7e>
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d102      	bne.n	80060aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060a8:	e0c1      	b.n	800622e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2204      	movs	r2, #4
 80060ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	88fa      	ldrh	r2, [r7, #6]
 80060c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	88fa      	ldrh	r2, [r7, #6]
 80060c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f0:	d10f      	bne.n	8006112 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006100:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006110:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	d007      	beq.n	8006130 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800612e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d162      	bne.n	80061fe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006138:	e02e      	b.n	8006198 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b01      	cmp	r3, #1
 8006146:	d115      	bne.n	8006174 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f103 020c 	add.w	r2, r3, #12
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	7812      	ldrb	r2, [r2, #0]
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006172:	e011      	b.n	8006198 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006174:	f7fc fbe2 	bl	800293c <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d803      	bhi.n	800618c <HAL_SPI_Receive+0x166>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d102      	bne.n	8006192 <HAL_SPI_Receive+0x16c>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d102      	bne.n	8006198 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006196:	e04a      	b.n	800622e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1cb      	bne.n	800613a <HAL_SPI_Receive+0x114>
 80061a2:	e031      	b.n	8006208 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d113      	bne.n	80061da <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	b292      	uxth	r2, r2
 80061be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	1c9a      	adds	r2, r3, #2
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061d8:	e011      	b.n	80061fe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061da:	f7fc fbaf 	bl	800293c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d803      	bhi.n	80061f2 <HAL_SPI_Receive+0x1cc>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d102      	bne.n	80061f8 <HAL_SPI_Receive+0x1d2>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061fc:	e017      	b.n	800622e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1cd      	bne.n	80061a4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fa45 	bl	800669c <SPI_EndRxTransaction>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	75fb      	strb	r3, [r7, #23]
 800622a:	e000      	b.n	800622e <HAL_SPI_Receive+0x208>
  }

error :
 800622c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08c      	sub	sp, #48	; 0x30
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006256:	2301      	movs	r3, #1
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <HAL_SPI_TransmitReceive+0x26>
 800626a:	2302      	movs	r3, #2
 800626c:	e18a      	b.n	8006584 <HAL_SPI_TransmitReceive+0x33c>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006276:	f7fc fb61 	bl	800293c <HAL_GetTick>
 800627a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800628c:	887b      	ldrh	r3, [r7, #2]
 800628e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006290:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006294:	2b01      	cmp	r3, #1
 8006296:	d00f      	beq.n	80062b8 <HAL_SPI_TransmitReceive+0x70>
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800629e:	d107      	bne.n	80062b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <HAL_SPI_TransmitReceive+0x68>
 80062a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d003      	beq.n	80062b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062b0:	2302      	movs	r3, #2
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062b6:	e15b      	b.n	8006570 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x82>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x82>
 80062c4:	887b      	ldrh	r3, [r7, #2]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062d0:	e14e      	b.n	8006570 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d003      	beq.n	80062e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2205      	movs	r2, #5
 80062e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	887a      	ldrh	r2, [r7, #2]
 80062f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	887a      	ldrh	r2, [r7, #2]
 80062fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	887a      	ldrh	r2, [r7, #2]
 8006308:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	887a      	ldrh	r2, [r7, #2]
 800630e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006326:	2b40      	cmp	r3, #64	; 0x40
 8006328:	d007      	beq.n	800633a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006338:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006342:	d178      	bne.n	8006436 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_SPI_TransmitReceive+0x10a>
 800634c:	8b7b      	ldrh	r3, [r7, #26]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d166      	bne.n	8006420 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	881a      	ldrh	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	1c9a      	adds	r2, r3, #2
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006376:	e053      	b.n	8006420 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b02      	cmp	r3, #2
 8006384:	d11b      	bne.n	80063be <HAL_SPI_TransmitReceive+0x176>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d016      	beq.n	80063be <HAL_SPI_TransmitReceive+0x176>
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	2b01      	cmp	r3, #1
 8006394:	d113      	bne.n	80063be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	881a      	ldrh	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	1c9a      	adds	r2, r3, #2
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d119      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x1b8>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d014      	beq.n	8006400 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	b292      	uxth	r2, r2
 80063e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	1c9a      	adds	r2, r3, #2
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063fc:	2301      	movs	r3, #1
 80063fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006400:	f7fc fa9c 	bl	800293c <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800640c:	429a      	cmp	r2, r3
 800640e:	d807      	bhi.n	8006420 <HAL_SPI_TransmitReceive+0x1d8>
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006416:	d003      	beq.n	8006420 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800641e:	e0a7      	b.n	8006570 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1a6      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x130>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1a1      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x130>
 8006434:	e07c      	b.n	8006530 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_SPI_TransmitReceive+0x1fc>
 800643e:	8b7b      	ldrh	r3, [r7, #26]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d16b      	bne.n	800651c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	7812      	ldrb	r2, [r2, #0]
 8006450:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800646a:	e057      	b.n	800651c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b02      	cmp	r3, #2
 8006478:	d11c      	bne.n	80064b4 <HAL_SPI_TransmitReceive+0x26c>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d017      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x26c>
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	2b01      	cmp	r3, #1
 8006488:	d114      	bne.n	80064b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	330c      	adds	r3, #12
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d119      	bne.n	80064f6 <HAL_SPI_TransmitReceive+0x2ae>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d014      	beq.n	80064f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064f2:	2301      	movs	r3, #1
 80064f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064f6:	f7fc fa21 	bl	800293c <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006502:	429a      	cmp	r2, r3
 8006504:	d803      	bhi.n	800650e <HAL_SPI_TransmitReceive+0x2c6>
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650c:	d102      	bne.n	8006514 <HAL_SPI_TransmitReceive+0x2cc>
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	2b00      	cmp	r3, #0
 8006512:	d103      	bne.n	800651c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800651a:	e029      	b.n	8006570 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1a2      	bne.n	800646c <HAL_SPI_TransmitReceive+0x224>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d19d      	bne.n	800646c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006532:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f917 	bl	8006768 <SPI_EndRxTxTransaction>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d006      	beq.n	800654e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800654c:	e010      	b.n	8006570 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	e000      	b.n	8006570 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800656e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006584:	4618      	mov	r0, r3
 8006586:	3730      	adds	r7, #48	; 0x30
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	4613      	mov	r3, r2
 800659a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800659c:	f7fc f9ce 	bl	800293c <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	4413      	add	r3, r2
 80065aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065ac:	f7fc f9c6 	bl	800293c <HAL_GetTick>
 80065b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065b2:	4b39      	ldr	r3, [pc, #228]	; (8006698 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	015b      	lsls	r3, r3, #5
 80065b8:	0d1b      	lsrs	r3, r3, #20
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	fb02 f303 	mul.w	r3, r2, r3
 80065c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065c2:	e054      	b.n	800666e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d050      	beq.n	800666e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065cc:	f7fc f9b6 	bl	800293c <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d902      	bls.n	80065e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d13d      	bne.n	800665e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065fa:	d111      	bne.n	8006620 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006604:	d004      	beq.n	8006610 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660e:	d107      	bne.n	8006620 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800661e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006628:	d10f      	bne.n	800664a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e017      	b.n	800668e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	3b01      	subs	r3, #1
 800666c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4013      	ands	r3, r2
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	429a      	cmp	r2, r3
 800667c:	bf0c      	ite	eq
 800667e:	2301      	moveq	r3, #1
 8006680:	2300      	movne	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	429a      	cmp	r2, r3
 800668a:	d19b      	bne.n	80065c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20000004 	.word	0x20000004

0800669c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b0:	d111      	bne.n	80066d6 <SPI_EndRxTransaction+0x3a>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ba:	d004      	beq.n	80066c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c4:	d107      	bne.n	80066d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066de:	d12a      	bne.n	8006736 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e8:	d012      	beq.n	8006710 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2200      	movs	r2, #0
 80066f2:	2180      	movs	r1, #128	; 0x80
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f7ff ff49 	bl	800658c <SPI_WaitFlagStateUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d02d      	beq.n	800675c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006704:	f043 0220 	orr.w	r2, r3, #32
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e026      	b.n	800675e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2200      	movs	r2, #0
 8006718:	2101      	movs	r1, #1
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f7ff ff36 	bl	800658c <SPI_WaitFlagStateUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01a      	beq.n	800675c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672a:	f043 0220 	orr.w	r2, r3, #32
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e013      	b.n	800675e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	2101      	movs	r1, #1
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7ff ff23 	bl	800658c <SPI_WaitFlagStateUntilTimeout>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d007      	beq.n	800675c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006750:	f043 0220 	orr.w	r2, r3, #32
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e000      	b.n	800675e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
	...

08006768 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006774:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <SPI_EndRxTxTransaction+0x7c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a1b      	ldr	r2, [pc, #108]	; (80067e8 <SPI_EndRxTxTransaction+0x80>)
 800677a:	fba2 2303 	umull	r2, r3, r2, r3
 800677e:	0d5b      	lsrs	r3, r3, #21
 8006780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006784:	fb02 f303 	mul.w	r3, r2, r3
 8006788:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006792:	d112      	bne.n	80067ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	2180      	movs	r1, #128	; 0x80
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff fef4 	bl	800658c <SPI_WaitFlagStateUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d016      	beq.n	80067d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ae:	f043 0220 	orr.w	r2, r3, #32
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e00f      	b.n	80067da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00a      	beq.n	80067d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d0:	2b80      	cmp	r3, #128	; 0x80
 80067d2:	d0f2      	beq.n	80067ba <SPI_EndRxTxTransaction+0x52>
 80067d4:	e000      	b.n	80067d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80067d6:	bf00      	nop
  }

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000004 	.word	0x20000004
 80067e8:	165e9f81 	.word	0x165e9f81

080067ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e041      	b.n	8006882 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fb fd58 	bl	80022c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3304      	adds	r3, #4
 8006828:	4619      	mov	r1, r3
 800682a:	4610      	mov	r0, r2
 800682c:	f000 f9ce 	bl	8006bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d001      	beq.n	80068a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e04e      	b.n	8006942 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a23      	ldr	r2, [pc, #140]	; (8006950 <HAL_TIM_Base_Start_IT+0xc4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d022      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ce:	d01d      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <HAL_TIM_Base_Start_IT+0xc8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d018      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <HAL_TIM_Base_Start_IT+0xcc>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1c      	ldr	r2, [pc, #112]	; (800695c <HAL_TIM_Base_Start_IT+0xd0>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00e      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1b      	ldr	r2, [pc, #108]	; (8006960 <HAL_TIM_Base_Start_IT+0xd4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d009      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a19      	ldr	r2, [pc, #100]	; (8006964 <HAL_TIM_Base_Start_IT+0xd8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x80>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a18      	ldr	r2, [pc, #96]	; (8006968 <HAL_TIM_Base_Start_IT+0xdc>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d111      	bne.n	8006930 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b06      	cmp	r3, #6
 800691c:	d010      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0201 	orr.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692e:	e007      	b.n	8006940 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0201 	orr.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40010000 	.word	0x40010000
 8006954:	40000400 	.word	0x40000400
 8006958:	40000800 	.word	0x40000800
 800695c:	40000c00 	.word	0x40000c00
 8006960:	40010400 	.word	0x40010400
 8006964:	40014000 	.word	0x40014000
 8006968:	40001800 	.word	0x40001800

0800696c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b02      	cmp	r3, #2
 8006980:	d122      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b02      	cmp	r3, #2
 800698e:	d11b      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f06f 0202 	mvn.w	r2, #2
 8006998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f8ee 	bl	8006b90 <HAL_TIM_IC_CaptureCallback>
 80069b4:	e005      	b.n	80069c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f8e0 	bl	8006b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f8f1 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d122      	bne.n	8006a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d11b      	bne.n	8006a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0204 	mvn.w	r2, #4
 80069ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2202      	movs	r2, #2
 80069f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f8c4 	bl	8006b90 <HAL_TIM_IC_CaptureCallback>
 8006a08:	e005      	b.n	8006a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f8b6 	bl	8006b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f8c7 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d122      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d11b      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0208 	mvn.w	r2, #8
 8006a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2204      	movs	r2, #4
 8006a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f89a 	bl	8006b90 <HAL_TIM_IC_CaptureCallback>
 8006a5c:	e005      	b.n	8006a6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f88c 	bl	8006b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f89d 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	d122      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d11b      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0210 	mvn.w	r2, #16
 8006a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2208      	movs	r2, #8
 8006a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f870 	bl	8006b90 <HAL_TIM_IC_CaptureCallback>
 8006ab0:	e005      	b.n	8006abe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f862 	bl	8006b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f873 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d10e      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d107      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0201 	mvn.w	r2, #1
 8006ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7fb f9a0 	bl	8001e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afa:	2b80      	cmp	r3, #128	; 0x80
 8006afc:	d10e      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b08:	2b80      	cmp	r3, #128	; 0x80
 8006b0a:	d107      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f902 	bl	8006d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d10e      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b34:	2b40      	cmp	r3, #64	; 0x40
 8006b36:	d107      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f838 	bl	8006bb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d10e      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d107      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0220 	mvn.w	r2, #32
 8006b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f8cc 	bl	8006d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a40      	ldr	r2, [pc, #256]	; (8006ce0 <TIM_Base_SetConfig+0x114>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d013      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bea:	d00f      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a3d      	ldr	r2, [pc, #244]	; (8006ce4 <TIM_Base_SetConfig+0x118>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00b      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a3c      	ldr	r2, [pc, #240]	; (8006ce8 <TIM_Base_SetConfig+0x11c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d007      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a3b      	ldr	r2, [pc, #236]	; (8006cec <TIM_Base_SetConfig+0x120>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d003      	beq.n	8006c0c <TIM_Base_SetConfig+0x40>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a3a      	ldr	r2, [pc, #232]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d108      	bne.n	8006c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2f      	ldr	r2, [pc, #188]	; (8006ce0 <TIM_Base_SetConfig+0x114>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d02b      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2c:	d027      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a2c      	ldr	r2, [pc, #176]	; (8006ce4 <TIM_Base_SetConfig+0x118>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d023      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a2b      	ldr	r2, [pc, #172]	; (8006ce8 <TIM_Base_SetConfig+0x11c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01f      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a2a      	ldr	r2, [pc, #168]	; (8006cec <TIM_Base_SetConfig+0x120>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d01b      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a29      	ldr	r2, [pc, #164]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d017      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a28      	ldr	r2, [pc, #160]	; (8006cf4 <TIM_Base_SetConfig+0x128>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d013      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a27      	ldr	r2, [pc, #156]	; (8006cf8 <TIM_Base_SetConfig+0x12c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00f      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a26      	ldr	r2, [pc, #152]	; (8006cfc <TIM_Base_SetConfig+0x130>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00b      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a25      	ldr	r2, [pc, #148]	; (8006d00 <TIM_Base_SetConfig+0x134>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d007      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a24      	ldr	r2, [pc, #144]	; (8006d04 <TIM_Base_SetConfig+0x138>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d003      	beq.n	8006c7e <TIM_Base_SetConfig+0xb2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a23      	ldr	r2, [pc, #140]	; (8006d08 <TIM_Base_SetConfig+0x13c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d108      	bne.n	8006c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a0a      	ldr	r2, [pc, #40]	; (8006ce0 <TIM_Base_SetConfig+0x114>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d003      	beq.n	8006cc4 <TIM_Base_SetConfig+0xf8>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a0c      	ldr	r2, [pc, #48]	; (8006cf0 <TIM_Base_SetConfig+0x124>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d103      	bne.n	8006ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	615a      	str	r2, [r3, #20]
}
 8006cd2:	bf00      	nop
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	40000800 	.word	0x40000800
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	40010400 	.word	0x40010400
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800
 8006d00:	40001800 	.word	0x40001800
 8006d04:	40001c00 	.word	0x40001c00
 8006d08:	40002000 	.word	0x40002000

08006d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e03f      	b.n	8006dc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fb fadc 	bl	8002318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2224      	movs	r2, #36	; 0x24
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f9a7 	bl	80070cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695a      	ldr	r2, [r3, #20]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b08a      	sub	sp, #40	; 0x28
 8006dd2:	af02      	add	r7, sp, #8
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	603b      	str	r3, [r7, #0]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d17c      	bne.n	8006ee8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <HAL_UART_Transmit+0x2c>
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e075      	b.n	8006eea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_UART_Transmit+0x3e>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e06e      	b.n	8006eea <HAL_UART_Transmit+0x11c>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2221      	movs	r2, #33	; 0x21
 8006e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e22:	f7fb fd8b 	bl	800293c <HAL_GetTick>
 8006e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	88fa      	ldrh	r2, [r7, #6]
 8006e2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	88fa      	ldrh	r2, [r7, #6]
 8006e32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3c:	d108      	bne.n	8006e50 <HAL_UART_Transmit+0x82>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d104      	bne.n	8006e50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	e003      	b.n	8006e58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e54:	2300      	movs	r3, #0
 8006e56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e60:	e02a      	b.n	8006eb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2180      	movs	r1, #128	; 0x80
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 f8e2 	bl	8007036 <UART_WaitOnFlagUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e036      	b.n	8006eea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10b      	bne.n	8006e9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	3302      	adds	r3, #2
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	e007      	b.n	8006eaa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	781a      	ldrb	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1cf      	bne.n	8006e62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2140      	movs	r1, #64	; 0x40
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 f8b2 	bl	8007036 <UART_WaitOnFlagUntilTimeout>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e006      	b.n	8006eea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	e000      	b.n	8006eea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ee8:	2302      	movs	r3, #2
  }
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3720      	adds	r7, #32
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b08a      	sub	sp, #40	; 0x28
 8006ef6:	af02      	add	r7, sp, #8
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	603b      	str	r3, [r7, #0]
 8006efe:	4613      	mov	r3, r2
 8006f00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	f040 808c 	bne.w	800702c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <HAL_UART_Receive+0x2e>
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e084      	b.n	800702e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_UART_Receive+0x40>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e07d      	b.n	800702e <HAL_UART_Receive+0x13c>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2222      	movs	r2, #34	; 0x22
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f4e:	f7fb fcf5 	bl	800293c <HAL_GetTick>
 8006f52:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	88fa      	ldrh	r2, [r7, #6]
 8006f58:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	88fa      	ldrh	r2, [r7, #6]
 8006f5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f68:	d108      	bne.n	8006f7c <HAL_UART_Receive+0x8a>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d104      	bne.n	8006f7c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	e003      	b.n	8006f84 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006f8c:	e043      	b.n	8007016 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2200      	movs	r2, #0
 8006f96:	2120      	movs	r1, #32
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 f84c 	bl	8007036 <UART_WaitOnFlagUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e042      	b.n	800702e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10c      	bne.n	8006fc8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	3302      	adds	r3, #2
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	e01f      	b.n	8007008 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd0:	d007      	beq.n	8006fe2 <HAL_UART_Receive+0xf0>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <HAL_UART_Receive+0xfe>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d106      	bne.n	8006ff0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e008      	b.n	8007002 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	3301      	adds	r3, #1
 8007006:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800701a:	b29b      	uxth	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1b6      	bne.n	8006f8e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	e000      	b.n	800702e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800702c:	2302      	movs	r3, #2
  }
}
 800702e:	4618      	mov	r0, r3
 8007030:	3720      	adds	r7, #32
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	603b      	str	r3, [r7, #0]
 8007042:	4613      	mov	r3, r2
 8007044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007046:	e02c      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704e:	d028      	beq.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d007      	beq.n	8007066 <UART_WaitOnFlagUntilTimeout+0x30>
 8007056:	f7fb fc71 	bl	800293c <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	429a      	cmp	r2, r3
 8007064:	d21d      	bcs.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007074:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	695a      	ldr	r2, [r3, #20]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0201 	bic.w	r2, r2, #1
 8007084:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e00f      	b.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	4013      	ands	r3, r2
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	bf0c      	ite	eq
 80070b2:	2301      	moveq	r3, #1
 80070b4:	2300      	movne	r3, #0
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	461a      	mov	r2, r3
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d0c3      	beq.n	8007048 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d0:	b09f      	sub	sp, #124	; 0x7c
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e2:	68d9      	ldr	r1, [r3, #12]
 80070e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	ea40 0301 	orr.w	r3, r0, r1
 80070ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	431a      	orrs	r2, r3
 80070fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	4313      	orrs	r3, r2
 8007104:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007110:	f021 010c 	bic.w	r1, r1, #12
 8007114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800711a:	430b      	orrs	r3, r1
 800711c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800711e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712a:	6999      	ldr	r1, [r3, #24]
 800712c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	ea40 0301 	orr.w	r3, r0, r1
 8007134:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	4bc5      	ldr	r3, [pc, #788]	; (8007450 <UART_SetConfig+0x384>)
 800713c:	429a      	cmp	r2, r3
 800713e:	d004      	beq.n	800714a <UART_SetConfig+0x7e>
 8007140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	4bc3      	ldr	r3, [pc, #780]	; (8007454 <UART_SetConfig+0x388>)
 8007146:	429a      	cmp	r2, r3
 8007148:	d103      	bne.n	8007152 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800714a:	f7fd fde7 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 800714e:	6778      	str	r0, [r7, #116]	; 0x74
 8007150:	e002      	b.n	8007158 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007152:	f7fd fdcf 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8007156:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007160:	f040 80b6 	bne.w	80072d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007166:	461c      	mov	r4, r3
 8007168:	f04f 0500 	mov.w	r5, #0
 800716c:	4622      	mov	r2, r4
 800716e:	462b      	mov	r3, r5
 8007170:	1891      	adds	r1, r2, r2
 8007172:	6439      	str	r1, [r7, #64]	; 0x40
 8007174:	415b      	adcs	r3, r3
 8007176:	647b      	str	r3, [r7, #68]	; 0x44
 8007178:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800717c:	1912      	adds	r2, r2, r4
 800717e:	eb45 0303 	adc.w	r3, r5, r3
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f04f 0100 	mov.w	r1, #0
 800718a:	00d9      	lsls	r1, r3, #3
 800718c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007190:	00d0      	lsls	r0, r2, #3
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	1911      	adds	r1, r2, r4
 8007198:	6639      	str	r1, [r7, #96]	; 0x60
 800719a:	416b      	adcs	r3, r5
 800719c:	667b      	str	r3, [r7, #100]	; 0x64
 800719e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	461a      	mov	r2, r3
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	1891      	adds	r1, r2, r2
 80071aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80071ac:	415b      	adcs	r3, r3
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80071b8:	f7f9 f832 	bl	8000220 <__aeabi_uldivmod>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4ba5      	ldr	r3, [pc, #660]	; (8007458 <UART_SetConfig+0x38c>)
 80071c2:	fba3 2302 	umull	r2, r3, r3, r2
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	011e      	lsls	r6, r3, #4
 80071ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071cc:	461c      	mov	r4, r3
 80071ce:	f04f 0500 	mov.w	r5, #0
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	1891      	adds	r1, r2, r2
 80071d8:	6339      	str	r1, [r7, #48]	; 0x30
 80071da:	415b      	adcs	r3, r3
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071e2:	1912      	adds	r2, r2, r4
 80071e4:	eb45 0303 	adc.w	r3, r5, r3
 80071e8:	f04f 0000 	mov.w	r0, #0
 80071ec:	f04f 0100 	mov.w	r1, #0
 80071f0:	00d9      	lsls	r1, r3, #3
 80071f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071f6:	00d0      	lsls	r0, r2, #3
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	1911      	adds	r1, r2, r4
 80071fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8007200:	416b      	adcs	r3, r5
 8007202:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	461a      	mov	r2, r3
 800720a:	f04f 0300 	mov.w	r3, #0
 800720e:	1891      	adds	r1, r2, r2
 8007210:	62b9      	str	r1, [r7, #40]	; 0x28
 8007212:	415b      	adcs	r3, r3
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800721a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800721e:	f7f8 ffff 	bl	8000220 <__aeabi_uldivmod>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4b8c      	ldr	r3, [pc, #560]	; (8007458 <UART_SetConfig+0x38c>)
 8007228:	fba3 1302 	umull	r1, r3, r3, r2
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	2164      	movs	r1, #100	; 0x64
 8007230:	fb01 f303 	mul.w	r3, r1, r3
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	3332      	adds	r3, #50	; 0x32
 800723a:	4a87      	ldr	r2, [pc, #540]	; (8007458 <UART_SetConfig+0x38c>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	095b      	lsrs	r3, r3, #5
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007248:	441e      	add	r6, r3
 800724a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800724c:	4618      	mov	r0, r3
 800724e:	f04f 0100 	mov.w	r1, #0
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	1894      	adds	r4, r2, r2
 8007258:	623c      	str	r4, [r7, #32]
 800725a:	415b      	adcs	r3, r3
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
 800725e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007262:	1812      	adds	r2, r2, r0
 8007264:	eb41 0303 	adc.w	r3, r1, r3
 8007268:	f04f 0400 	mov.w	r4, #0
 800726c:	f04f 0500 	mov.w	r5, #0
 8007270:	00dd      	lsls	r5, r3, #3
 8007272:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007276:	00d4      	lsls	r4, r2, #3
 8007278:	4622      	mov	r2, r4
 800727a:	462b      	mov	r3, r5
 800727c:	1814      	adds	r4, r2, r0
 800727e:	653c      	str	r4, [r7, #80]	; 0x50
 8007280:	414b      	adcs	r3, r1
 8007282:	657b      	str	r3, [r7, #84]	; 0x54
 8007284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	461a      	mov	r2, r3
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	1891      	adds	r1, r2, r2
 8007290:	61b9      	str	r1, [r7, #24]
 8007292:	415b      	adcs	r3, r3
 8007294:	61fb      	str	r3, [r7, #28]
 8007296:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800729a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800729e:	f7f8 ffbf 	bl	8000220 <__aeabi_uldivmod>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4b6c      	ldr	r3, [pc, #432]	; (8007458 <UART_SetConfig+0x38c>)
 80072a8:	fba3 1302 	umull	r1, r3, r3, r2
 80072ac:	095b      	lsrs	r3, r3, #5
 80072ae:	2164      	movs	r1, #100	; 0x64
 80072b0:	fb01 f303 	mul.w	r3, r1, r3
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	3332      	adds	r3, #50	; 0x32
 80072ba:	4a67      	ldr	r2, [pc, #412]	; (8007458 <UART_SetConfig+0x38c>)
 80072bc:	fba2 2303 	umull	r2, r3, r2, r3
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	f003 0207 	and.w	r2, r3, #7
 80072c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4432      	add	r2, r6
 80072cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072ce:	e0b9      	b.n	8007444 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072d2:	461c      	mov	r4, r3
 80072d4:	f04f 0500 	mov.w	r5, #0
 80072d8:	4622      	mov	r2, r4
 80072da:	462b      	mov	r3, r5
 80072dc:	1891      	adds	r1, r2, r2
 80072de:	6139      	str	r1, [r7, #16]
 80072e0:	415b      	adcs	r3, r3
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80072e8:	1912      	adds	r2, r2, r4
 80072ea:	eb45 0303 	adc.w	r3, r5, r3
 80072ee:	f04f 0000 	mov.w	r0, #0
 80072f2:	f04f 0100 	mov.w	r1, #0
 80072f6:	00d9      	lsls	r1, r3, #3
 80072f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072fc:	00d0      	lsls	r0, r2, #3
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	eb12 0804 	adds.w	r8, r2, r4
 8007306:	eb43 0905 	adc.w	r9, r3, r5
 800730a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	4618      	mov	r0, r3
 8007310:	f04f 0100 	mov.w	r1, #0
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	008b      	lsls	r3, r1, #2
 800731e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007322:	0082      	lsls	r2, r0, #2
 8007324:	4640      	mov	r0, r8
 8007326:	4649      	mov	r1, r9
 8007328:	f7f8 ff7a 	bl	8000220 <__aeabi_uldivmod>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4b49      	ldr	r3, [pc, #292]	; (8007458 <UART_SetConfig+0x38c>)
 8007332:	fba3 2302 	umull	r2, r3, r3, r2
 8007336:	095b      	lsrs	r3, r3, #5
 8007338:	011e      	lsls	r6, r3, #4
 800733a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800733c:	4618      	mov	r0, r3
 800733e:	f04f 0100 	mov.w	r1, #0
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	1894      	adds	r4, r2, r2
 8007348:	60bc      	str	r4, [r7, #8]
 800734a:	415b      	adcs	r3, r3
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007352:	1812      	adds	r2, r2, r0
 8007354:	eb41 0303 	adc.w	r3, r1, r3
 8007358:	f04f 0400 	mov.w	r4, #0
 800735c:	f04f 0500 	mov.w	r5, #0
 8007360:	00dd      	lsls	r5, r3, #3
 8007362:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007366:	00d4      	lsls	r4, r2, #3
 8007368:	4622      	mov	r2, r4
 800736a:	462b      	mov	r3, r5
 800736c:	1814      	adds	r4, r2, r0
 800736e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007370:	414b      	adcs	r3, r1
 8007372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	4618      	mov	r0, r3
 800737a:	f04f 0100 	mov.w	r1, #0
 800737e:	f04f 0200 	mov.w	r2, #0
 8007382:	f04f 0300 	mov.w	r3, #0
 8007386:	008b      	lsls	r3, r1, #2
 8007388:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800738c:	0082      	lsls	r2, r0, #2
 800738e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007392:	f7f8 ff45 	bl	8000220 <__aeabi_uldivmod>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	4b2f      	ldr	r3, [pc, #188]	; (8007458 <UART_SetConfig+0x38c>)
 800739c:	fba3 1302 	umull	r1, r3, r3, r2
 80073a0:	095b      	lsrs	r3, r3, #5
 80073a2:	2164      	movs	r1, #100	; 0x64
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	3332      	adds	r3, #50	; 0x32
 80073ae:	4a2a      	ldr	r2, [pc, #168]	; (8007458 <UART_SetConfig+0x38c>)
 80073b0:	fba2 2303 	umull	r2, r3, r2, r3
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ba:	441e      	add	r6, r3
 80073bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073be:	4618      	mov	r0, r3
 80073c0:	f04f 0100 	mov.w	r1, #0
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	1894      	adds	r4, r2, r2
 80073ca:	603c      	str	r4, [r7, #0]
 80073cc:	415b      	adcs	r3, r3
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d4:	1812      	adds	r2, r2, r0
 80073d6:	eb41 0303 	adc.w	r3, r1, r3
 80073da:	f04f 0400 	mov.w	r4, #0
 80073de:	f04f 0500 	mov.w	r5, #0
 80073e2:	00dd      	lsls	r5, r3, #3
 80073e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073e8:	00d4      	lsls	r4, r2, #3
 80073ea:	4622      	mov	r2, r4
 80073ec:	462b      	mov	r3, r5
 80073ee:	eb12 0a00 	adds.w	sl, r2, r0
 80073f2:	eb43 0b01 	adc.w	fp, r3, r1
 80073f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f04f 0100 	mov.w	r1, #0
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	008b      	lsls	r3, r1, #2
 800740a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800740e:	0082      	lsls	r2, r0, #2
 8007410:	4650      	mov	r0, sl
 8007412:	4659      	mov	r1, fp
 8007414:	f7f8 ff04 	bl	8000220 <__aeabi_uldivmod>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <UART_SetConfig+0x38c>)
 800741e:	fba3 1302 	umull	r1, r3, r3, r2
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	2164      	movs	r1, #100	; 0x64
 8007426:	fb01 f303 	mul.w	r3, r1, r3
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	011b      	lsls	r3, r3, #4
 800742e:	3332      	adds	r3, #50	; 0x32
 8007430:	4a09      	ldr	r2, [pc, #36]	; (8007458 <UART_SetConfig+0x38c>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	f003 020f 	and.w	r2, r3, #15
 800743c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4432      	add	r2, r6
 8007442:	609a      	str	r2, [r3, #8]
}
 8007444:	bf00      	nop
 8007446:	377c      	adds	r7, #124	; 0x7c
 8007448:	46bd      	mov	sp, r7
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	bf00      	nop
 8007450:	40011000 	.word	0x40011000
 8007454:	40011400 	.word	0x40011400
 8007458:	51eb851f 	.word	0x51eb851f

0800745c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800745c:	b084      	sub	sp, #16
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	f107 001c 	add.w	r0, r7, #28
 800746a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	2b01      	cmp	r3, #1
 8007472:	d122      	bne.n	80074ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800749c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d105      	bne.n	80074ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 fac0 	bl	8008a34 <USB_CoreReset>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]
 80074b8:	e01a      	b.n	80074f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 fab4 	bl	8008a34 <USB_CoreReset>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	639a      	str	r2, [r3, #56]	; 0x38
 80074e2:	e005      	b.n	80074f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d10b      	bne.n	800750e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f043 0206 	orr.w	r2, r3, #6
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f043 0220 	orr.w	r2, r3, #32
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800750e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800751a:	b004      	add	sp, #16
 800751c:	4770      	bx	lr
	...

08007520 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	4613      	mov	r3, r2
 800752c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d165      	bne.n	8007600 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	4a41      	ldr	r2, [pc, #260]	; (800763c <USB_SetTurnaroundTime+0x11c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d906      	bls.n	800754a <USB_SetTurnaroundTime+0x2a>
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	4a40      	ldr	r2, [pc, #256]	; (8007640 <USB_SetTurnaroundTime+0x120>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d202      	bcs.n	800754a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007544:	230f      	movs	r3, #15
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	e062      	b.n	8007610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	4a3c      	ldr	r2, [pc, #240]	; (8007640 <USB_SetTurnaroundTime+0x120>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d306      	bcc.n	8007560 <USB_SetTurnaroundTime+0x40>
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	4a3b      	ldr	r2, [pc, #236]	; (8007644 <USB_SetTurnaroundTime+0x124>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d202      	bcs.n	8007560 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800755a:	230e      	movs	r3, #14
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	e057      	b.n	8007610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4a38      	ldr	r2, [pc, #224]	; (8007644 <USB_SetTurnaroundTime+0x124>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d306      	bcc.n	8007576 <USB_SetTurnaroundTime+0x56>
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4a37      	ldr	r2, [pc, #220]	; (8007648 <USB_SetTurnaroundTime+0x128>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d202      	bcs.n	8007576 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007570:	230d      	movs	r3, #13
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	e04c      	b.n	8007610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	4a33      	ldr	r2, [pc, #204]	; (8007648 <USB_SetTurnaroundTime+0x128>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d306      	bcc.n	800758c <USB_SetTurnaroundTime+0x6c>
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	4a32      	ldr	r2, [pc, #200]	; (800764c <USB_SetTurnaroundTime+0x12c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d802      	bhi.n	800758c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007586:	230c      	movs	r3, #12
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	e041      	b.n	8007610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4a2f      	ldr	r2, [pc, #188]	; (800764c <USB_SetTurnaroundTime+0x12c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d906      	bls.n	80075a2 <USB_SetTurnaroundTime+0x82>
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4a2e      	ldr	r2, [pc, #184]	; (8007650 <USB_SetTurnaroundTime+0x130>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d802      	bhi.n	80075a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800759c:	230b      	movs	r3, #11
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	e036      	b.n	8007610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4a2a      	ldr	r2, [pc, #168]	; (8007650 <USB_SetTurnaroundTime+0x130>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d906      	bls.n	80075b8 <USB_SetTurnaroundTime+0x98>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4a29      	ldr	r2, [pc, #164]	; (8007654 <USB_SetTurnaroundTime+0x134>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d802      	bhi.n	80075b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80075b2:	230a      	movs	r3, #10
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	e02b      	b.n	8007610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4a26      	ldr	r2, [pc, #152]	; (8007654 <USB_SetTurnaroundTime+0x134>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d906      	bls.n	80075ce <USB_SetTurnaroundTime+0xae>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4a25      	ldr	r2, [pc, #148]	; (8007658 <USB_SetTurnaroundTime+0x138>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d202      	bcs.n	80075ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80075c8:	2309      	movs	r3, #9
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	e020      	b.n	8007610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	4a21      	ldr	r2, [pc, #132]	; (8007658 <USB_SetTurnaroundTime+0x138>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d306      	bcc.n	80075e4 <USB_SetTurnaroundTime+0xc4>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	4a20      	ldr	r2, [pc, #128]	; (800765c <USB_SetTurnaroundTime+0x13c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d802      	bhi.n	80075e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80075de:	2308      	movs	r3, #8
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	e015      	b.n	8007610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	4a1d      	ldr	r2, [pc, #116]	; (800765c <USB_SetTurnaroundTime+0x13c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d906      	bls.n	80075fa <USB_SetTurnaroundTime+0xda>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	4a1c      	ldr	r2, [pc, #112]	; (8007660 <USB_SetTurnaroundTime+0x140>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d202      	bcs.n	80075fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80075f4:	2307      	movs	r3, #7
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	e00a      	b.n	8007610 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80075fa:	2306      	movs	r3, #6
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	e007      	b.n	8007610 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d102      	bne.n	800760c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007606:	2309      	movs	r3, #9
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	e001      	b.n	8007610 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800760c:	2309      	movs	r3, #9
 800760e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	029b      	lsls	r3, r3, #10
 8007624:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007628:	431a      	orrs	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	00d8acbf 	.word	0x00d8acbf
 8007640:	00e4e1c0 	.word	0x00e4e1c0
 8007644:	00f42400 	.word	0x00f42400
 8007648:	01067380 	.word	0x01067380
 800764c:	011a499f 	.word	0x011a499f
 8007650:	01312cff 	.word	0x01312cff
 8007654:	014ca43f 	.word	0x014ca43f
 8007658:	016e3600 	.word	0x016e3600
 800765c:	01a6ab1f 	.word	0x01a6ab1f
 8007660:	01e84800 	.word	0x01e84800

08007664 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f043 0201 	orr.w	r2, r3, #1
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f023 0201 	bic.w	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d106      	bne.n	80076d4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60da      	str	r2, [r3, #12]
 80076d2:	e00b      	b.n	80076ec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d106      	bne.n	80076e8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	60da      	str	r2, [r3, #12]
 80076e6:	e001      	b.n	80076ec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e003      	b.n	80076f4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80076ec:	2032      	movs	r0, #50	; 0x32
 80076ee:	f7fb f931 	bl	8002954 <HAL_Delay>

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076fc:	b084      	sub	sp, #16
 80076fe:	b580      	push	{r7, lr}
 8007700:	b086      	sub	sp, #24
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800770a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	e009      	b.n	8007730 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	3340      	adds	r3, #64	; 0x40
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	2200      	movs	r2, #0
 8007728:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	3301      	adds	r3, #1
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b0e      	cmp	r3, #14
 8007734:	d9f2      	bls.n	800771c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d11c      	bne.n	8007776 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800774a:	f043 0302 	orr.w	r3, r3, #2
 800774e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007754:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	e005      	b.n	8007782 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007788:	461a      	mov	r2, r3
 800778a:	2300      	movs	r3, #0
 800778c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007794:	4619      	mov	r1, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779c:	461a      	mov	r2, r3
 800779e:	680b      	ldr	r3, [r1, #0]
 80077a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d10c      	bne.n	80077c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d104      	bne.n	80077b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077ae:	2100      	movs	r1, #0
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f949 	bl	8007a48 <USB_SetDevSpeed>
 80077b6:	e008      	b.n	80077ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077b8:	2101      	movs	r1, #1
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f944 	bl	8007a48 <USB_SetDevSpeed>
 80077c0:	e003      	b.n	80077ca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077c2:	2103      	movs	r1, #3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f93f 	bl	8007a48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077ca:	2110      	movs	r1, #16
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f8f3 	bl	80079b8 <USB_FlushTxFifo>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f911 	bl	8007a04 <USB_FlushRxFifo>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f2:	461a      	mov	r2, r3
 80077f4:	2300      	movs	r3, #0
 80077f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fe:	461a      	mov	r2, r3
 8007800:	2300      	movs	r3, #0
 8007802:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780a:	461a      	mov	r2, r3
 800780c:	2300      	movs	r3, #0
 800780e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
 8007814:	e043      	b.n	800789e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800782c:	d118      	bne.n	8007860 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007840:	461a      	mov	r2, r3
 8007842:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	e013      	b.n	8007872 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007856:	461a      	mov	r2, r3
 8007858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	e008      	b.n	8007872 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786c:	461a      	mov	r2, r3
 800786e:	2300      	movs	r3, #0
 8007870:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787e:	461a      	mov	r2, r3
 8007880:	2300      	movs	r3, #0
 8007882:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007890:	461a      	mov	r2, r3
 8007892:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007896:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	3301      	adds	r3, #1
 800789c:	613b      	str	r3, [r7, #16]
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d3b7      	bcc.n	8007816 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	e043      	b.n	8007934 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078c2:	d118      	bne.n	80078f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d6:	461a      	mov	r2, r3
 80078d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	e013      	b.n	8007908 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ec:	461a      	mov	r2, r3
 80078ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	e008      	b.n	8007908 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007902:	461a      	mov	r2, r3
 8007904:	2300      	movs	r3, #0
 8007906:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007914:	461a      	mov	r2, r3
 8007916:	2300      	movs	r3, #0
 8007918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007926:	461a      	mov	r2, r3
 8007928:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800792c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	3301      	adds	r3, #1
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	429a      	cmp	r2, r3
 800793a:	d3b7      	bcc.n	80078ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800794a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800794e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800795c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	2b00      	cmp	r3, #0
 8007962:	d105      	bne.n	8007970 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f043 0210 	orr.w	r2, r3, #16
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699a      	ldr	r2, [r3, #24]
 8007974:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <USB_DevInit+0x2b8>)
 8007976:	4313      	orrs	r3, r2
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800797c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797e:	2b00      	cmp	r3, #0
 8007980:	d005      	beq.n	800798e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	f043 0208 	orr.w	r2, r3, #8
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800798e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007990:	2b01      	cmp	r3, #1
 8007992:	d107      	bne.n	80079a4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800799c:	f043 0304 	orr.w	r3, r3, #4
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079b0:	b004      	add	sp, #16
 80079b2:	4770      	bx	lr
 80079b4:	803c3800 	.word	0x803c3800

080079b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	019b      	lsls	r3, r3, #6
 80079ca:	f043 0220 	orr.w	r2, r3, #32
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3301      	adds	r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4a09      	ldr	r2, [pc, #36]	; (8007a00 <USB_FlushTxFifo+0x48>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d901      	bls.n	80079e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e006      	b.n	80079f2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d0f0      	beq.n	80079d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	00030d40 	.word	0x00030d40

08007a04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2210      	movs	r2, #16
 8007a14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4a09      	ldr	r2, [pc, #36]	; (8007a44 <USB_FlushRxFifo+0x40>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d901      	bls.n	8007a28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e006      	b.n	8007a36 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f003 0310 	and.w	r3, r3, #16
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	d0f0      	beq.n	8007a16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	00030d40 	.word	0x00030d40

08007a48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b087      	sub	sp, #28
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f003 0306 	and.w	r3, r3, #6
 8007a92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d102      	bne.n	8007aa0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75fb      	strb	r3, [r7, #23]
 8007a9e:	e00a      	b.n	8007ab6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d002      	beq.n	8007aac <USB_GetDevSpeed+0x32>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2b06      	cmp	r3, #6
 8007aaa:	d102      	bne.n	8007ab2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007aac:	2302      	movs	r3, #2
 8007aae:	75fb      	strb	r3, [r7, #23]
 8007ab0:	e001      	b.n	8007ab6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007ab2:	230f      	movs	r3, #15
 8007ab4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d13a      	bne.n	8007b56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	2101      	movs	r1, #1
 8007af2:	fa01 f303 	lsl.w	r3, r1, r3
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	68f9      	ldr	r1, [r7, #12]
 8007afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007afe:	4313      	orrs	r3, r2
 8007b00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d155      	bne.n	8007bc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	78db      	ldrb	r3, [r3, #3]
 8007b32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	059b      	lsls	r3, r3, #22
 8007b3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	e036      	b.n	8007bc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5c:	69da      	ldr	r2, [r3, #28]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	2101      	movs	r1, #1
 8007b68:	fa01 f303 	lsl.w	r3, r1, r3
 8007b6c:	041b      	lsls	r3, r3, #16
 8007b6e:	68f9      	ldr	r1, [r7, #12]
 8007b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b74:	4313      	orrs	r3, r2
 8007b76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d11a      	bne.n	8007bc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	78db      	ldrb	r3, [r3, #3]
 8007ba8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007baa:	430b      	orrs	r3, r1
 8007bac:	4313      	orrs	r3, r2
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
	...

08007bd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	785b      	ldrb	r3, [r3, #1]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d161      	bne.n	8007cb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c06:	d11f      	bne.n	8007c48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	2101      	movs	r1, #1
 8007c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	43db      	mvns	r3, r3
 8007c62:	68f9      	ldr	r1, [r7, #12]
 8007c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c68:	4013      	ands	r3, r2
 8007c6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c72:	69da      	ldr	r2, [r3, #28]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	43db      	mvns	r3, r3
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	0159      	lsls	r1, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	440b      	add	r3, r1
 8007ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007caa:	4619      	mov	r1, r3
 8007cac:	4b35      	ldr	r3, [pc, #212]	; (8007d84 <USB_DeactivateEndpoint+0x1b0>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	600b      	str	r3, [r1, #0]
 8007cb2:	e060      	b.n	8007d76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cca:	d11f      	bne.n	8007d0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	0151      	lsls	r1, r2, #5
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	440a      	add	r2, r1
 8007ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	0151      	lsls	r1, r2, #5
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	440a      	add	r2, r1
 8007d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d22:	041b      	lsls	r3, r3, #16
 8007d24:	43db      	mvns	r3, r3
 8007d26:	68f9      	ldr	r1, [r7, #12]
 8007d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d36:	69da      	ldr	r2, [r3, #28]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	f003 030f 	and.w	r3, r3, #15
 8007d40:	2101      	movs	r1, #1
 8007d42:	fa01 f303 	lsl.w	r3, r1, r3
 8007d46:	041b      	lsls	r3, r3, #16
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	68f9      	ldr	r1, [r7, #12]
 8007d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d50:	4013      	ands	r3, r2
 8007d52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	0159      	lsls	r1, r3, #5
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	440b      	add	r3, r1
 8007d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <USB_DeactivateEndpoint+0x1b4>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	ec337800 	.word	0xec337800
 8007d88:	eff37800 	.word	0xeff37800

08007d8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	; 0x28
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	4613      	mov	r3, r2
 8007d98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	785b      	ldrb	r3, [r3, #1]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	f040 815c 	bne.w	8008066 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d132      	bne.n	8007e1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007dd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007dd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	0151      	lsls	r1, r2, #5
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	440a      	add	r2, r1
 8007df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007df8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	0151      	lsls	r1, r2, #5
 8007e0c:	69fa      	ldr	r2, [r7, #28]
 8007e0e:	440a      	add	r2, r1
 8007e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e14:	0cdb      	lsrs	r3, r3, #19
 8007e16:	04db      	lsls	r3, r3, #19
 8007e18:	6113      	str	r3, [r2, #16]
 8007e1a:	e074      	b.n	8007f06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	0151      	lsls	r1, r2, #5
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	440a      	add	r2, r1
 8007e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e36:	0cdb      	lsrs	r3, r3, #19
 8007e38:	04db      	lsls	r3, r3, #19
 8007e3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6c:	691a      	ldr	r2, [r3, #16]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	6959      	ldr	r1, [r3, #20]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	440b      	add	r3, r1
 8007e78:	1e59      	subs	r1, r3, #1
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e82:	04d9      	lsls	r1, r3, #19
 8007e84:	4b9d      	ldr	r3, [pc, #628]	; (80080fc <USB_EPStartXfer+0x370>)
 8007e86:	400b      	ands	r3, r1
 8007e88:	69b9      	ldr	r1, [r7, #24]
 8007e8a:	0148      	lsls	r0, r1, #5
 8007e8c:	69f9      	ldr	r1, [r7, #28]
 8007e8e:	4401      	add	r1, r0
 8007e90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e94:	4313      	orrs	r3, r2
 8007e96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea4:	691a      	ldr	r2, [r3, #16]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eae:	69b9      	ldr	r1, [r7, #24]
 8007eb0:	0148      	lsls	r0, r1, #5
 8007eb2:	69f9      	ldr	r1, [r7, #28]
 8007eb4:	4401      	add	r1, r0
 8007eb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	78db      	ldrb	r3, [r3, #3]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d11f      	bne.n	8007f06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	0151      	lsls	r1, r2, #5
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	440a      	add	r2, r1
 8007edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ee4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	0151      	lsls	r1, r2, #5
 8007ef8:	69fa      	ldr	r2, [r7, #28]
 8007efa:	440a      	add	r2, r1
 8007efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d14b      	bne.n	8007fa4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d009      	beq.n	8007f28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f20:	461a      	mov	r2, r3
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	78db      	ldrb	r3, [r3, #3]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d128      	bne.n	8007f82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d110      	bne.n	8007f62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	0151      	lsls	r1, r2, #5
 8007f52:	69fa      	ldr	r2, [r7, #28]
 8007f54:	440a      	add	r2, r1
 8007f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	e00f      	b.n	8007f82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	0151      	lsls	r1, r2, #5
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	440a      	add	r2, r1
 8007f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	0151      	lsls	r1, r2, #5
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	440a      	add	r2, r1
 8007f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fa0:	6013      	str	r3, [r2, #0]
 8007fa2:	e12f      	b.n	8008204 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	0151      	lsls	r1, r2, #5
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	440a      	add	r2, r1
 8007fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fc2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	78db      	ldrb	r3, [r3, #3]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d015      	beq.n	8007ff8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 8117 	beq.w	8008204 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fec:	69f9      	ldr	r1, [r7, #28]
 8007fee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	634b      	str	r3, [r1, #52]	; 0x34
 8007ff6:	e105      	b.n	8008204 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008004:	2b00      	cmp	r3, #0
 8008006:	d110      	bne.n	800802a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008022:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	e00f      	b.n	800804a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	4413      	add	r3, r2
 8008032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	0151      	lsls	r1, r2, #5
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	440a      	add	r2, r1
 8008040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008048:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	68d9      	ldr	r1, [r3, #12]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	781a      	ldrb	r2, [r3, #0]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	b298      	uxth	r0, r3
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	4603      	mov	r3, r0
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 fa2b 	bl	80084ba <USB_WritePacket>
 8008064:	e0ce      	b.n	8008204 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	0151      	lsls	r1, r2, #5
 8008078:	69fa      	ldr	r2, [r7, #28]
 800807a:	440a      	add	r2, r1
 800807c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008080:	0cdb      	lsrs	r3, r3, #19
 8008082:	04db      	lsls	r3, r3, #19
 8008084:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	4413      	add	r3, r2
 800808e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	0151      	lsls	r1, r2, #5
 8008098:	69fa      	ldr	r2, [r7, #28]
 800809a:	440a      	add	r2, r1
 800809c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d126      	bne.n	8008100 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080c8:	69b9      	ldr	r1, [r7, #24]
 80080ca:	0148      	lsls	r0, r1, #5
 80080cc:	69f9      	ldr	r1, [r7, #28]
 80080ce:	4401      	add	r1, r0
 80080d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80080d4:	4313      	orrs	r3, r2
 80080d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080f6:	6113      	str	r3, [r2, #16]
 80080f8:	e036      	b.n	8008168 <USB_EPStartXfer+0x3dc>
 80080fa:	bf00      	nop
 80080fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	695a      	ldr	r2, [r3, #20]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	4413      	add	r3, r2
 800810a:	1e5a      	subs	r2, r3, #1
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	fbb2 f3f3 	udiv	r3, r2, r3
 8008114:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	4413      	add	r3, r2
 800811e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	8afb      	ldrh	r3, [r7, #22]
 8008126:	04d9      	lsls	r1, r3, #19
 8008128:	4b39      	ldr	r3, [pc, #228]	; (8008210 <USB_EPStartXfer+0x484>)
 800812a:	400b      	ands	r3, r1
 800812c:	69b9      	ldr	r1, [r7, #24]
 800812e:	0148      	lsls	r0, r1, #5
 8008130:	69f9      	ldr	r1, [r7, #28]
 8008132:	4401      	add	r1, r0
 8008134:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008138:	4313      	orrs	r3, r2
 800813a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008148:	691a      	ldr	r2, [r3, #16]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	8af9      	ldrh	r1, [r7, #22]
 8008150:	fb01 f303 	mul.w	r3, r1, r3
 8008154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008158:	69b9      	ldr	r1, [r7, #24]
 800815a:	0148      	lsls	r0, r1, #5
 800815c:	69f9      	ldr	r1, [r7, #28]
 800815e:	4401      	add	r1, r0
 8008160:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008164:	4313      	orrs	r3, r2
 8008166:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d10d      	bne.n	800818a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d009      	beq.n	800818a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	68d9      	ldr	r1, [r3, #12]
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	4413      	add	r3, r2
 8008182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008186:	460a      	mov	r2, r1
 8008188:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	78db      	ldrb	r3, [r3, #3]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d128      	bne.n	80081e4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d110      	bne.n	80081c4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	0151      	lsls	r1, r2, #5
 80081b4:	69fa      	ldr	r2, [r7, #28]
 80081b6:	440a      	add	r2, r1
 80081b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081c0:	6013      	str	r3, [r2, #0]
 80081c2:	e00f      	b.n	80081e4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	0151      	lsls	r1, r2, #5
 80081d6:	69fa      	ldr	r2, [r7, #28]
 80081d8:	440a      	add	r2, r1
 80081da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	0151      	lsls	r1, r2, #5
 80081f6:	69fa      	ldr	r2, [r7, #28]
 80081f8:	440a      	add	r2, r1
 80081fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008202:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3720      	adds	r7, #32
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	1ff80000 	.word	0x1ff80000

08008214 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008214:	b480      	push	{r7}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	4613      	mov	r3, r2
 8008220:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b01      	cmp	r3, #1
 8008232:	f040 80cd 	bne.w	80083d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d132      	bne.n	80082a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	0151      	lsls	r1, r2, #5
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	440a      	add	r2, r1
 8008254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008258:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800825c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	0151      	lsls	r1, r2, #5
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	440a      	add	r2, r1
 8008278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800827c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008280:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	440a      	add	r2, r1
 8008298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800829c:	0cdb      	lsrs	r3, r3, #19
 800829e:	04db      	lsls	r3, r3, #19
 80082a0:	6113      	str	r3, [r2, #16]
 80082a2:	e04e      	b.n	8008342 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	0151      	lsls	r1, r2, #5
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	440a      	add	r2, r1
 80082ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082be:	0cdb      	lsrs	r3, r3, #19
 80082c0:	04db      	lsls	r3, r3, #19
 80082c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	0151      	lsls	r1, r2, #5
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	440a      	add	r2, r1
 80082da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	695a      	ldr	r2, [r3, #20]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d903      	bls.n	80082fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	0151      	lsls	r1, r2, #5
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	440a      	add	r2, r1
 8008312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800831a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008332:	6939      	ldr	r1, [r7, #16]
 8008334:	0148      	lsls	r0, r1, #5
 8008336:	6979      	ldr	r1, [r7, #20]
 8008338:	4401      	add	r1, r0
 800833a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800833e:	4313      	orrs	r3, r2
 8008340:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d11e      	bne.n	8008386 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d009      	beq.n	8008364 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835c:	461a      	mov	r2, r3
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	0151      	lsls	r1, r2, #5
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	440a      	add	r2, r1
 800837a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800837e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	e092      	b.n	80084ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	4413      	add	r3, r2
 800838e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	0151      	lsls	r1, r2, #5
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	440a      	add	r2, r1
 800839c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d07e      	beq.n	80084ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	f003 030f 	and.w	r3, r3, #15
 80083be:	2101      	movs	r1, #1
 80083c0:	fa01 f303 	lsl.w	r3, r1, r3
 80083c4:	6979      	ldr	r1, [r7, #20]
 80083c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083ca:	4313      	orrs	r3, r2
 80083cc:	634b      	str	r3, [r1, #52]	; 0x34
 80083ce:	e06d      	b.n	80084ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	0151      	lsls	r1, r2, #5
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	440a      	add	r2, r1
 80083e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ea:	0cdb      	lsrs	r3, r3, #19
 80083ec:	04db      	lsls	r3, r3, #19
 80083ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	0151      	lsls	r1, r2, #5
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	440a      	add	r2, r1
 8008406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800840a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800840e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008412:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	0151      	lsls	r1, r2, #5
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	440a      	add	r2, r1
 800843a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800843e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008442:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008450:	691a      	ldr	r2, [r3, #16]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800845a:	6939      	ldr	r1, [r7, #16]
 800845c:	0148      	lsls	r0, r1, #5
 800845e:	6979      	ldr	r1, [r7, #20]
 8008460:	4401      	add	r1, r0
 8008462:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008466:	4313      	orrs	r3, r2
 8008468:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d10d      	bne.n	800848c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	68d9      	ldr	r1, [r3, #12]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008488:	460a      	mov	r2, r1
 800848a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b089      	sub	sp, #36	; 0x24
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	4611      	mov	r1, r2
 80084c6:	461a      	mov	r2, r3
 80084c8:	460b      	mov	r3, r1
 80084ca:	71fb      	strb	r3, [r7, #7]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80084d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d11a      	bne.n	8008516 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80084e0:	88bb      	ldrh	r3, [r7, #4]
 80084e2:	3303      	adds	r3, #3
 80084e4:	089b      	lsrs	r3, r3, #2
 80084e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80084e8:	2300      	movs	r3, #0
 80084ea:	61bb      	str	r3, [r7, #24]
 80084ec:	e00f      	b.n	800850e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80084ee:	79fb      	ldrb	r3, [r7, #7]
 80084f0:	031a      	lsls	r2, r3, #12
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084fa:	461a      	mov	r2, r3
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	3304      	adds	r3, #4
 8008506:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	3301      	adds	r3, #1
 800850c:	61bb      	str	r3, [r7, #24]
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	429a      	cmp	r2, r3
 8008514:	d3eb      	bcc.n	80084ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3724      	adds	r7, #36	; 0x24
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008524:	b480      	push	{r7}
 8008526:	b089      	sub	sp, #36	; 0x24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	4613      	mov	r3, r2
 8008530:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800853a:	88fb      	ldrh	r3, [r7, #6]
 800853c:	3303      	adds	r3, #3
 800853e:	089b      	lsrs	r3, r3, #2
 8008540:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008542:	2300      	movs	r3, #0
 8008544:	61bb      	str	r3, [r7, #24]
 8008546:	e00b      	b.n	8008560 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	601a      	str	r2, [r3, #0]
    pDest++;
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	3304      	adds	r3, #4
 8008558:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	3301      	adds	r3, #1
 800855e:	61bb      	str	r3, [r7, #24]
 8008560:	69ba      	ldr	r2, [r7, #24]
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	429a      	cmp	r2, r3
 8008566:	d3ef      	bcc.n	8008548 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008568:	69fb      	ldr	r3, [r7, #28]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3724      	adds	r7, #36	; 0x24
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d12c      	bne.n	80085ec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4413      	add	r3, r2
 800859a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	db12      	blt.n	80085ca <USB_EPSetStall+0x54>
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00f      	beq.n	80085ca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	0151      	lsls	r1, r2, #5
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	440a      	add	r2, r1
 80085c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085c8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	e02b      	b.n	8008644 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	db12      	blt.n	8008624 <USB_EPSetStall+0xae>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00f      	beq.n	8008624 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	0151      	lsls	r1, r2, #5
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	440a      	add	r2, r1
 800861a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800861e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008622:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4413      	add	r3, r2
 800862c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	0151      	lsls	r1, r2, #5
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	440a      	add	r2, r1
 800863a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800863e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	785b      	ldrb	r3, [r3, #1]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d128      	bne.n	80086c0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	0151      	lsls	r1, r2, #5
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	440a      	add	r2, r1
 8008684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008688:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800868c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	78db      	ldrb	r3, [r3, #3]
 8008692:	2b03      	cmp	r3, #3
 8008694:	d003      	beq.n	800869e <USB_EPClearStall+0x4c>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	78db      	ldrb	r3, [r3, #3]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d138      	bne.n	8008710 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	0151      	lsls	r1, r2, #5
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	440a      	add	r2, r1
 80086b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	e027      	b.n	8008710 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	78db      	ldrb	r3, [r3, #3]
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d003      	beq.n	80086f0 <USB_EPClearStall+0x9e>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	78db      	ldrb	r3, [r3, #3]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d10f      	bne.n	8008710 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	0151      	lsls	r1, r2, #5
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	440a      	add	r2, r1
 8008706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800870a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800870e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800871e:	b480      	push	{r7}
 8008720:	b085      	sub	sp, #20
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	460b      	mov	r3, r1
 8008728:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800873c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008740:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008752:	68f9      	ldr	r1, [r7, #12]
 8008754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008758:	4313      	orrs	r3, r2
 800875a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008784:	f023 0303 	bic.w	r3, r3, #3
 8008788:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008798:	f023 0302 	bic.w	r3, r3, #2
 800879c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087c6:	f023 0303 	bic.w	r3, r3, #3
 80087ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087da:	f043 0302 	orr.w	r3, r3, #2
 80087de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b085      	sub	sp, #20
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4013      	ands	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008806:	68fb      	ldr	r3, [r7, #12]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	4013      	ands	r3, r2
 8008836:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	0c1b      	lsrs	r3, r3, #16
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	4013      	ands	r3, r2
 800886a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	b29b      	uxth	r3, r3
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800888c:	78fb      	ldrb	r3, [r7, #3]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	4013      	ands	r3, r2
 80088a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088aa:	68bb      	ldr	r3, [r7, #8]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	f003 030f 	and.w	r3, r3, #15
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	fa22 f303 	lsr.w	r3, r2, r3
 80088e8:	01db      	lsls	r3, r3, #7
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4013      	ands	r3, r2
 8008904:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008906:	68bb      	ldr	r3, [r7, #8]
}
 8008908:	4618      	mov	r0, r3
 800890a:	371c      	adds	r7, #28
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	f003 0301 	and.w	r3, r3, #1
}
 8008924:	4618      	mov	r0, r3
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800894a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800894e:	f023 0307 	bic.w	r3, r3, #7
 8008952:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008966:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
	...

08008978 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	460b      	mov	r3, r1
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	333c      	adds	r3, #60	; 0x3c
 800898e:	3304      	adds	r3, #4
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	4a26      	ldr	r2, [pc, #152]	; (8008a30 <USB_EP0_OutStart+0xb8>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d90a      	bls.n	80089b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089ac:	d101      	bne.n	80089b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	e037      	b.n	8008a22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b8:	461a      	mov	r2, r3
 80089ba:	2300      	movs	r3, #0
 80089bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e0:	f043 0318 	orr.w	r3, r3, #24
 80089e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80089f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80089fa:	7afb      	ldrb	r3, [r7, #11]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d10f      	bne.n	8008a20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a06:	461a      	mov	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008a1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	4f54300a 	.word	0x4f54300a

08008a34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3301      	adds	r3, #1
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4a13      	ldr	r2, [pc, #76]	; (8008a98 <USB_CoreReset+0x64>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d901      	bls.n	8008a52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e01b      	b.n	8008a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	daf2      	bge.n	8008a40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f043 0201 	orr.w	r2, r3, #1
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4a09      	ldr	r2, [pc, #36]	; (8008a98 <USB_CoreReset+0x64>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d901      	bls.n	8008a7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e006      	b.n	8008a8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	f003 0301 	and.w	r3, r3, #1
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d0f0      	beq.n	8008a6a <USB_CoreReset+0x36>

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	00030d40 	.word	0x00030d40

08008a9c <USBD_HID_Init>:
  * @retval status
  */
/* We have to add the dataout/ep_out function here to get USB pipe data out
 * This is only used with XBCD or THPS 2, every other XBOX game sends rumble through control requests */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008aa8:	2010      	movs	r0, #16
 8008aaa:	f004 fdfb 	bl	800d6a4 <USBD_static_malloc>
 8008aae:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d105      	bne.n	8008ac2 <USBD_HID_Init+0x26>
  {
	  //usb_failed = 1;
    pdev->pClassData = NULL;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e033      	b.n	8008b2a <USBD_HID_Init+0x8e>
  }

  pdev->pClassData = (void *)hhid;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	7c1b      	ldrb	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d107      	bne.n	8008ae2 <USBD_HID_Init+0x46>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2207      	movs	r2, #7
 8008ad6:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2207      	movs	r2, #7
 8008adc:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
 8008ae0:	e006      	b.n	8008af0 <USBD_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2204      	movs	r2, #4
 8008ae6:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2204      	movs	r2, #4
 8008aec:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008af0:	2320      	movs	r3, #32
 8008af2:	2203      	movs	r2, #3
 8008af4:	2181      	movs	r1, #129	; 0x81
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f004 fc75 	bl	800d3e6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8008b02:	2306      	movs	r3, #6
 8008b04:	2203      	movs	r2, #3
 8008b06:	2102      	movs	r1, #2
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f004 fc6c 	bl	800d3e6 <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  (void)USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR,(uint8_t*)rx_buf, HID_EPOUT_SIZE);
 8008b16:	2306      	movs	r3, #6
 8008b18:	4a06      	ldr	r2, [pc, #24]	; (8008b34 <USBD_HID_Init+0x98>)
 8008b1a:	2102      	movs	r1, #2
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f004 fd51 	bl	800d5c4 <USBD_LL_PrepareReceive>

  hhid->state = HID_IDLE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	731a      	strb	r2, [r3, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();

  /* Prepare Out endpoint to receive 1st packet */

  return (uint8_t)USBD_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	200001c8 	.word	0x200001c8

08008b38 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008b44:	2181      	movs	r1, #129	; 0x81
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f004 fc73 	bl	800d432 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, HID_EPOUT_ADDR);
 8008b58:	2102      	movs	r1, #2
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f004 fc69 	bl	800d432 <USBD_LL_CloseEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d009      	beq.n	8008b8e <USBD_HID_DeInit+0x56>
  {
    (void)USBD_free(pdev->pClassData);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b80:	4618      	mov	r0, r3
 8008b82:	f004 fd9d 	bl	800d6c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ba8:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d104      	bne.n	8008bc2 <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 8008bb8:	4b9f      	ldr	r3, [pc, #636]	; (8008e38 <USBD_HID_Setup+0x2a0>)
 8008bba:	2201      	movs	r2, #1
 8008bbc:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e136      	b.n	8008e30 <USBD_HID_Setup+0x298>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bca:	2b40      	cmp	r3, #64	; 0x40
 8008bcc:	f000 80e1 	beq.w	8008d92 <USBD_HID_Setup+0x1fa>
 8008bd0:	2b40      	cmp	r3, #64	; 0x40
 8008bd2:	f200 8124 	bhi.w	8008e1e <USBD_HID_Setup+0x286>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d058      	beq.n	8008c8c <USBD_HID_Setup+0xf4>
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	f040 811f 	bne.w	8008e1e <USBD_HID_Setup+0x286>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	3b02      	subs	r3, #2
 8008be6:	2b09      	cmp	r3, #9
 8008be8:	d848      	bhi.n	8008c7c <USBD_HID_Setup+0xe4>
 8008bea:	a201      	add	r2, pc, #4	; (adr r2, 8008bf0 <USBD_HID_Setup+0x58>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c47 	.word	0x08008c47
 8008bf4:	08008c27 	.word	0x08008c27
 8008bf8:	08008c7d 	.word	0x08008c7d
 8008bfc:	08008c7d 	.word	0x08008c7d
 8008c00:	08008c7d 	.word	0x08008c7d
 8008c04:	08008c7d 	.word	0x08008c7d
 8008c08:	08008c7d 	.word	0x08008c7d
 8008c0c:	08008c57 	.word	0x08008c57
 8008c10:	08008c35 	.word	0x08008c35
 8008c14:	08008c19 	.word	0x08008c19
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	885b      	ldrh	r3, [r3, #2]
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	461a      	mov	r2, r3
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	601a      	str	r2, [r3, #0]
          break;
 8008c24:	e031      	b.n	8008c8a <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 fada 	bl	800a1e6 <USBD_CtlSendData>
          break;
 8008c32:	e02a      	b.n	8008c8a <USBD_HID_Setup+0xf2>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	885b      	ldrh	r3, [r3, #2]
 8008c38:	0a1b      	lsrs	r3, r3, #8
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	461a      	mov	r2, r3
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	605a      	str	r2, [r3, #4]
          break;
 8008c44:	e021      	b.n	8008c8a <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	3304      	adds	r3, #4
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f001 fac9 	bl	800a1e6 <USBD_CtlSendData>
          break;
 8008c54:	e019      	b.n	8008c8a <USBD_HID_Setup+0xf2>

        /*We need to get Control request data for the rumble data from the XBOX, we have to add this ourselves */
        case HID_REQ_SET_REPORT:
          rumble_flag = 1;
 8008c56:	4b79      	ldr	r3, [pc, #484]	; (8008e3c <USBD_HID_Setup+0x2a4>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_ID = (uint8_t)(req->wValue);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	885b      	ldrh	r3, [r3, #2]
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	4b77      	ldr	r3, [pc, #476]	; (8008e40 <USBD_HID_Setup+0x2a8>)
 8008c64:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_LENGTH = (uint8_t)(req->wLength);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	4b75      	ldr	r3, [pc, #468]	; (8008e44 <USBD_HID_Setup+0x2ac>)
 8008c6e:	701a      	strb	r2, [r3, #0]
          USBD_CtlPrepareRx (pdev, ctl_report_buf, HID_EPOUT_SIZE);
 8008c70:	2206      	movs	r2, #6
 8008c72:	4975      	ldr	r1, [pc, #468]	; (8008e48 <USBD_HID_Setup+0x2b0>)
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 fae2 	bl	800a23e <USBD_CtlPrepareRx>
          break;
 8008c7a:	e006      	b.n	8008c8a <USBD_HID_Setup+0xf2>
//                            (uint8_t *)&Report_buf,
//                            8);
//          break;

        default:
          USBD_CtlError(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 fa40 	bl	800a104 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c84:	2303      	movs	r3, #3
 8008c86:	77fb      	strb	r3, [r7, #31]
          break;
 8008c88:	bf00      	nop
      }
      break;
 8008c8a:	e0d0      	b.n	8008e2e <USBD_HID_Setup+0x296>
    case USB_REQ_TYPE_STANDARD:

      switch (req->bRequest)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	785b      	ldrb	r3, [r3, #1]
 8008c90:	2b0b      	cmp	r3, #11
 8008c92:	d875      	bhi.n	8008d80 <USBD_HID_Setup+0x1e8>
 8008c94:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <USBD_HID_Setup+0x104>)
 8008c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9a:	bf00      	nop
 8008c9c:	08008ccd 	.word	0x08008ccd
 8008ca0:	08008d8f 	.word	0x08008d8f
 8008ca4:	08008d81 	.word	0x08008d81
 8008ca8:	08008d81 	.word	0x08008d81
 8008cac:	08008d81 	.word	0x08008d81
 8008cb0:	08008d81 	.word	0x08008d81
 8008cb4:	08008cf7 	.word	0x08008cf7
 8008cb8:	08008d81 	.word	0x08008d81
 8008cbc:	08008d81 	.word	0x08008d81
 8008cc0:	08008d81 	.word	0x08008d81
 8008cc4:	08008d2f 	.word	0x08008d2f
 8008cc8:	08008d59 	.word	0x08008d59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b03      	cmp	r3, #3
 8008cd6:	d107      	bne.n	8008ce8 <USBD_HID_Setup+0x150>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008cd8:	f107 030e 	add.w	r3, r7, #14
 8008cdc:	2202      	movs	r2, #2
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 fa80 	bl	800a1e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ce6:	e053      	b.n	8008d90 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 fa0a 	bl	800a104 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	77fb      	strb	r3, [r7, #31]
          break;
 8008cf4:	e04c      	b.n	8008d90 <USBD_HID_Setup+0x1f8>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	885b      	ldrh	r3, [r3, #2]
 8008cfa:	0a1b      	lsrs	r3, r3, #8
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	2b21      	cmp	r3, #33	; 0x21
 8008d00:	d10e      	bne.n	8008d20 <USBD_HID_Setup+0x188>
          {
            pbuf = USBD_HID_Desc;
 8008d02:	4b52      	ldr	r3, [pc, #328]	; (8008e4c <USBD_HID_Setup+0x2b4>)
 8008d04:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	88db      	ldrh	r3, [r3, #6]
 8008d0a:	2b12      	cmp	r3, #18
 8008d0c:	bf28      	it	cs
 8008d0e:	2312      	movcs	r3, #18
 8008d10:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d12:	8afb      	ldrh	r3, [r7, #22]
 8008d14:	461a      	mov	r2, r3
 8008d16:	6939      	ldr	r1, [r7, #16]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f001 fa64 	bl	800a1e6 <USBD_CtlSendData>
          break;
 8008d1e:	e037      	b.n	8008d90 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 f9ee 	bl	800a104 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	77fb      	strb	r3, [r7, #31]
            break;
 8008d2c:	e030      	b.n	8008d90 <USBD_HID_Setup+0x1f8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d107      	bne.n	8008d4a <USBD_HID_Setup+0x1b2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	2201      	movs	r2, #1
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 fa4f 	bl	800a1e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d48:	e022      	b.n	8008d90 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 f9d9 	bl	800a104 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d52:	2303      	movs	r3, #3
 8008d54:	77fb      	strb	r3, [r7, #31]
          break;
 8008d56:	e01b      	b.n	8008d90 <USBD_HID_Setup+0x1f8>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d106      	bne.n	8008d72 <USBD_HID_Setup+0x1da>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	885b      	ldrh	r3, [r3, #2]
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d70:	e00e      	b.n	8008d90 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 f9c5 	bl	800a104 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	77fb      	strb	r3, [r7, #31]
          break;
 8008d7e:	e007      	b.n	8008d90 <USBD_HID_Setup+0x1f8>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 f9be 	bl	800a104 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	77fb      	strb	r3, [r7, #31]
          break;
 8008d8c:	e000      	b.n	8008d90 <USBD_HID_Setup+0x1f8>
          break;
 8008d8e:	bf00      	nop
      }
      break;
 8008d90:	e04d      	b.n	8008e2e <USBD_HID_Setup+0x296>
    /*This is for the og XBOX, this is the custom vendor request
     * We intercept these and return either the controller's capabilities
     * This is equivalent to the USB HID Descriptor which would normally be used for most devices */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 8008d92:	4b2f      	ldr	r3, [pc, #188]	; (8008e50 <USBD_HID_Setup+0x2b8>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	3301      	adds	r3, #1
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	4b2d      	ldr	r3, [pc, #180]	; (8008e50 <USBD_HID_Setup+0x2b8>)
 8008d9c:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	2b06      	cmp	r3, #6
 8008da4:	d10f      	bne.n	8008dc6 <USBD_HID_Setup+0x22e>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	885b      	ldrh	r3, [r3, #2]
 8008daa:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8008dae:	d10a      	bne.n	8008dc6 <USBD_HID_Setup+0x22e>
    		len = 16;
 8008db0:	2310      	movs	r3, #16
 8008db2:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 8008db4:	4b25      	ldr	r3, [pc, #148]	; (8008e4c <USBD_HID_Setup+0x2b4>)
 8008db6:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008db8:	8afb      	ldrh	r3, [r7, #22]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	6939      	ldr	r1, [r7, #16]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f001 fa11 	bl	800a1e6 <USBD_CtlSendData>
 8008dc4:	e02a      	b.n	8008e1c <USBD_HID_Setup+0x284>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	785b      	ldrb	r3, [r3, #1]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d10f      	bne.n	8008dee <USBD_HID_Setup+0x256>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	885b      	ldrh	r3, [r3, #2]
 8008dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd6:	d10a      	bne.n	8008dee <USBD_HID_Setup+0x256>
    		len = 20;
 8008dd8:	2314      	movs	r3, #20
 8008dda:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8008ddc:	4b1d      	ldr	r3, [pc, #116]	; (8008e54 <USBD_HID_Setup+0x2bc>)
 8008dde:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008de0:	8afb      	ldrh	r3, [r7, #22]
 8008de2:	461a      	mov	r2, r3
 8008de4:	6939      	ldr	r1, [r7, #16]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f001 f9fd 	bl	800a1e6 <USBD_CtlSendData>
 8008dec:	e016      	b.n	8008e1c <USBD_HID_Setup+0x284>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	785b      	ldrb	r3, [r3, #1]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d11a      	bne.n	8008e2c <USBD_HID_Setup+0x294>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	885b      	ldrh	r3, [r3, #2]
 8008dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dfe:	d115      	bne.n	8008e2c <USBD_HID_Setup+0x294>
    		rumble_brequest_sent = 1;
 8008e00:	4b15      	ldr	r3, [pc, #84]	; (8008e58 <USBD_HID_Setup+0x2c0>)
 8008e02:	2201      	movs	r2, #1
 8008e04:	701a      	strb	r2, [r3, #0]
    		len = 6;
 8008e06:	2306      	movs	r3, #6
 8008e08:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8008e0a:	4b14      	ldr	r3, [pc, #80]	; (8008e5c <USBD_HID_Setup+0x2c4>)
 8008e0c:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008e0e:	8afb      	ldrh	r3, [r7, #22]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6939      	ldr	r1, [r7, #16]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 f9e6 	bl	800a1e6 <USBD_CtlSendData>
    	}
    break;
 8008e1a:	e007      	b.n	8008e2c <USBD_HID_Setup+0x294>
 8008e1c:	e006      	b.n	8008e2c <USBD_HID_Setup+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 f96f 	bl	800a104 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e26:	2303      	movs	r3, #3
 8008e28:	77fb      	strb	r3, [r7, #31]
      break;
 8008e2a:	e000      	b.n	8008e2e <USBD_HID_Setup+0x296>
    break;
 8008e2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3720      	adds	r7, #32
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	20000abe 	.word	0x20000abe
 8008e3c:	20000aca 	.word	0x20000aca
 8008e40:	20000ac0 	.word	0x20000ac0
 8008e44:	20000ac1 	.word	0x20000ac1
 8008e48:	20000ac4 	.word	0x20000ac4
 8008e4c:	20000090 	.word	0x20000090
 8008e50:	20000abc 	.word	0x20000abc
 8008e54:	200000ac 	.word	0x200000ac
 8008e58:	20000abf 	.word	0x20000abf
 8008e5c:	200000c0 	.word	0x200000c0

08008e60 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e74:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e013      	b.n	8008ea8 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d10c      	bne.n	8008ea6 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	7b1b      	ldrb	r3, [r3, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d108      	bne.n	8008ea6 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	2201      	movs	r2, #1
 8008e98:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008e9a:	88fb      	ldrh	r3, [r7, #6]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	2181      	movs	r1, #129	; 0x81
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f004 fb6e 	bl	800d582 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008ebe:	4b03      	ldr	r3, [pc, #12]	; (8008ecc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	20000050 	.word	0x20000050

08008ed0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8008ed8:	bf00      	nop
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
	...

08008ee8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008ef6:	4b03      	ldr	r3, [pc, #12]	; (8008f04 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	20000070 	.word	0x20000070

08008f08 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USBD_HID_DataOut>:
/* DataOut will only run for THPS 2 or activating rumble in XBCD on a PC */
static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
	dataout_ran++;
 8008f38:	4b08      	ldr	r3, [pc, #32]	; (8008f5c <USBD_HID_DataOut+0x30>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <USBD_HID_DataOut+0x30>)
 8008f42:	701a      	strb	r2, [r3, #0]
	USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, (uint8_t*) (rx_buf), HID_EPOUT_SIZE);
 8008f44:	2306      	movs	r3, #6
 8008f46:	4a06      	ldr	r2, [pc, #24]	; (8008f60 <USBD_HID_DataOut+0x34>)
 8008f48:	2102      	movs	r1, #2
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f004 fb3a 	bl	800d5c4 <USBD_LL_PrepareReceive>
	return USBD_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000abd 	.word	0x20000abd
 8008f60:	200001c8 	.word	0x200001c8

08008f64 <USBD_HID_EP0_RxReady>:
  * @retval status
  */
/*This is to put the rumble data from the USB control requests into rx_buf so we can read that in main
 * This is the standard way XBOX sends rumble data, this different from a PC which would send data through USB Out Pipe */
static uint8_t USBD_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
	if (rumble_flag) {
 8008f6c:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <USBD_HID_EP0_RxReady+0x4c>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d015      	beq.n	8008fa0 <USBD_HID_EP0_RxReady+0x3c>
		rumble_flag = 0;
 8008f74:	4b0e      	ldr	r3, [pc, #56]	; (8008fb0 <USBD_HID_EP0_RxReady+0x4c>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	701a      	strb	r2, [r3, #0]
		if (USBD_HID_Report_LENGTH == HID_EPOUT_SIZE) {
 8008f7a:	4b0e      	ldr	r3, [pc, #56]	; (8008fb4 <USBD_HID_EP0_RxReady+0x50>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b06      	cmp	r3, #6
 8008f80:	d10e      	bne.n	8008fa0 <USBD_HID_EP0_RxReady+0x3c>
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 8008f82:	2300      	movs	r3, #0
 8008f84:	73fb      	strb	r3, [r7, #15]
 8008f86:	e008      	b.n	8008f9a <USBD_HID_EP0_RxReady+0x36>
				rx_buf[i] = ctl_report_buf[i];
 8008f88:	7bfa      	ldrb	r2, [r7, #15]
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	490a      	ldr	r1, [pc, #40]	; (8008fb8 <USBD_HID_EP0_RxReady+0x54>)
 8008f8e:	5c89      	ldrb	r1, [r1, r2]
 8008f90:	4a0a      	ldr	r2, [pc, #40]	; (8008fbc <USBD_HID_EP0_RxReady+0x58>)
 8008f92:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	3301      	adds	r3, #1
 8008f98:	73fb      	strb	r3, [r7, #15]
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	2b05      	cmp	r3, #5
 8008f9e:	d9f3      	bls.n	8008f88 <USBD_HID_EP0_RxReady+0x24>
			}
		}
	}
	return (uint8_t) USBD_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	20000aca 	.word	0x20000aca
 8008fb4:	20000ac1 	.word	0x20000ac1
 8008fb8:	20000ac4 	.word	0x20000ac4
 8008fbc:	200001c8 	.word	0x200001c8

08008fc0 <USBD_HID_EP0_TxSent>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_HID_EP0_TxSent(USBD_HandleTypeDef *pdev)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
//    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
//                                                              hhid->Report_buf[1]);
//    hhid->IsReportAvailable = 0U;
//  }

  return (uint8_t)USBD_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
	...

08008fd8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	220a      	movs	r2, #10
 8008fe4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008fe6:	4b03      	ldr	r3, [pc, #12]	; (8008ff4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr
 8008ff4:	200000a0 	.word	0x200000a0

08008ff8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	4613      	mov	r3, r2
 8009004:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800900c:	2303      	movs	r3, #3
 800900e:	e01f      	b.n	8009050 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	79fa      	ldrb	r2, [r7, #7]
 8009042:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f004 f967 	bl	800d318 <USBD_LL_Init>
 800904a:	4603      	mov	r3, r0
 800904c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800904e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800906c:	2303      	movs	r3, #3
 800906e:	e016      	b.n	800909e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00b      	beq.n	800909c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	f107 020e 	add.w	r2, r7, #14
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	4602      	mov	r2, r0
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f004 f97e 	bl	800d3b0 <USBD_LL_Start>
 80090b4:	4603      	mov	r3, r0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80090e0:	2303      	movs	r3, #3
 80090e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d009      	beq.n	8009102 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	78fa      	ldrb	r2, [r7, #3]
 80090f8:	4611      	mov	r1, r2
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	4798      	blx	r3
 80090fe:	4603      	mov	r3, r0
 8009100:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009102:	7bfb      	ldrb	r3, [r7, #15]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800911e:	2b00      	cmp	r3, #0
 8009120:	d007      	beq.n	8009132 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	4611      	mov	r1, r2
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	4798      	blx	r3
  }

  return USBD_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	4618      	mov	r0, r3
 8009150:	f000 ff9e 	bl	800a090 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009162:	461a      	mov	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009170:	f003 031f 	and.w	r3, r3, #31
 8009174:	2b02      	cmp	r3, #2
 8009176:	d01a      	beq.n	80091ae <USBD_LL_SetupStage+0x72>
 8009178:	2b02      	cmp	r3, #2
 800917a:	d822      	bhi.n	80091c2 <USBD_LL_SetupStage+0x86>
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <USBD_LL_SetupStage+0x4a>
 8009180:	2b01      	cmp	r3, #1
 8009182:	d00a      	beq.n	800919a <USBD_LL_SetupStage+0x5e>
 8009184:	e01d      	b.n	80091c2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 fa62 	bl	8009658 <USBD_StdDevReq>
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]
      break;
 8009198:	e020      	b.n	80091dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fad4 	bl	8009750 <USBD_StdItfReq>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]
      break;
 80091ac:	e016      	b.n	80091dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fb13 	bl	80097e2 <USBD_StdEPReq>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
      break;
 80091c0:	e00c      	b.n	80091dc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f004 f94d 	bl	800d470 <USBD_LL_StallEP>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]
      break;
 80091da:	bf00      	nop
  }

  return ret;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b086      	sub	sp, #24
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	460b      	mov	r3, r1
 80091f0:	607a      	str	r2, [r7, #4]
 80091f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80091f4:	7afb      	ldrb	r3, [r7, #11]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d138      	bne.n	800926c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009200:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009208:	2b03      	cmp	r3, #3
 800920a:	d14a      	bne.n	80092a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	689a      	ldr	r2, [r3, #8]
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	429a      	cmp	r2, r3
 8009216:	d913      	bls.n	8009240 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	689a      	ldr	r2, [r3, #8]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	1ad2      	subs	r2, r2, r3
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	68da      	ldr	r2, [r3, #12]
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	4293      	cmp	r3, r2
 8009230:	bf28      	it	cs
 8009232:	4613      	movcs	r3, r2
 8009234:	461a      	mov	r2, r3
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f001 f81d 	bl	800a278 <USBD_CtlContinueRx>
 800923e:	e030      	b.n	80092a2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b03      	cmp	r3, #3
 800924a:	d10b      	bne.n	8009264 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f001 f818 	bl	800a29a <USBD_CtlSendStatus>
 800926a:	e01a      	b.n	80092a2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b03      	cmp	r3, #3
 8009276:	d114      	bne.n	80092a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927e:	699b      	ldr	r3, [r3, #24]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00e      	beq.n	80092a2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	7afa      	ldrb	r2, [r7, #11]
 800928e:	4611      	mov	r1, r2
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	4798      	blx	r3
 8009294:	4603      	mov	r3, r0
 8009296:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800929e:	7dfb      	ldrb	r3, [r7, #23]
 80092a0:	e000      	b.n	80092a4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	460b      	mov	r3, r1
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80092ba:	7afb      	ldrb	r3, [r7, #11]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d16b      	bne.n	8009398 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3314      	adds	r3, #20
 80092c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d156      	bne.n	800937e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d914      	bls.n	8009306 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	689a      	ldr	r2, [r3, #8]
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	1ad2      	subs	r2, r2, r3
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	461a      	mov	r2, r3
 80092f0:	6879      	ldr	r1, [r7, #4]
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 ff92 	bl	800a21c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092f8:	2300      	movs	r3, #0
 80092fa:	2200      	movs	r2, #0
 80092fc:	2100      	movs	r1, #0
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f004 f960 	bl	800d5c4 <USBD_LL_PrepareReceive>
 8009304:	e03b      	b.n	800937e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	68da      	ldr	r2, [r3, #12]
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	429a      	cmp	r2, r3
 8009310:	d11c      	bne.n	800934c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800931a:	429a      	cmp	r2, r3
 800931c:	d316      	bcc.n	800934c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009328:	429a      	cmp	r2, r3
 800932a:	d20f      	bcs.n	800934c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800932c:	2200      	movs	r2, #0
 800932e:	2100      	movs	r1, #0
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 ff73 	bl	800a21c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800933e:	2300      	movs	r3, #0
 8009340:	2200      	movs	r2, #0
 8009342:	2100      	movs	r1, #0
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f004 f93d 	bl	800d5c4 <USBD_LL_PrepareReceive>
 800934a:	e018      	b.n	800937e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b03      	cmp	r3, #3
 8009356:	d10b      	bne.n	8009370 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d005      	beq.n	8009370 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009370:	2180      	movs	r1, #128	; 0x80
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f004 f87c 	bl	800d470 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 ffa1 	bl	800a2c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009384:	2b01      	cmp	r3, #1
 8009386:	d122      	bne.n	80093ce <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7ff fe98 	bl	80090be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009396:	e01a      	b.n	80093ce <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d114      	bne.n	80093ce <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00e      	beq.n	80093ce <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	7afa      	ldrb	r2, [r7, #11]
 80093ba:	4611      	mov	r1, r2
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	4798      	blx	r3
 80093c0:	4603      	mov	r3, r0
 80093c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
 80093cc:	e000      	b.n	80093d0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3718      	adds	r7, #24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009408:	2303      	movs	r3, #3
 800940a:	e02f      	b.n	800946c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00f      	beq.n	8009436 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d009      	beq.n	8009436 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	6852      	ldr	r2, [r2, #4]
 800942e:	b2d2      	uxtb	r2, r2
 8009430:	4611      	mov	r1, r2
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009436:	2340      	movs	r3, #64	; 0x40
 8009438:	2200      	movs	r2, #0
 800943a:	2100      	movs	r1, #0
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f003 ffd2 	bl	800d3e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2240      	movs	r2, #64	; 0x40
 800944e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009452:	2340      	movs	r3, #64	; 0x40
 8009454:	2200      	movs	r2, #0
 8009456:	2180      	movs	r1, #128	; 0x80
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f003 ffc4 	bl	800d3e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2240      	movs	r2, #64	; 0x40
 8009468:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	78fa      	ldrb	r2, [r7, #3]
 8009484:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2204      	movs	r2, #4
 80094ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b04      	cmp	r3, #4
 80094d2:	d106      	bne.n	80094e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009502:	2303      	movs	r3, #3
 8009504:	e012      	b.n	800952c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b03      	cmp	r3, #3
 8009510:	d10b      	bne.n	800952a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d005      	beq.n	800952a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800954a:	2303      	movs	r3, #3
 800954c:	e014      	b.n	8009578 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b03      	cmp	r3, #3
 8009558:	d10d      	bne.n	8009576 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d007      	beq.n	8009576 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	78fa      	ldrb	r2, [r7, #3]
 8009570:	4611      	mov	r1, r2
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009596:	2303      	movs	r3, #3
 8009598:	e014      	b.n	80095c4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d10d      	bne.n	80095c2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d007      	beq.n	80095c2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	4611      	mov	r1, r2
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d009      	beq.n	8009610 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	6852      	ldr	r2, [r2, #4]
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	4611      	mov	r1, r2
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	4798      	blx	r3
  }

  return USBD_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800961a:	b480      	push	{r7}
 800961c:	b087      	sub	sp, #28
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	3301      	adds	r3, #1
 8009630:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009638:	8a3b      	ldrh	r3, [r7, #16]
 800963a:	021b      	lsls	r3, r3, #8
 800963c:	b21a      	sxth	r2, r3
 800963e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009642:	4313      	orrs	r3, r2
 8009644:	b21b      	sxth	r3, r3
 8009646:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009648:	89fb      	ldrh	r3, [r7, #14]
}
 800964a:	4618      	mov	r0, r3
 800964c:	371c      	adds	r7, #28
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
	...

08009658 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]

	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	4798      	blx	r3
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]

	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009680:	2b40      	cmp	r3, #64	; 0x40
 8009682:	d005      	beq.n	8009690 <USBD_StdDevReq+0x38>
 8009684:	2b40      	cmp	r3, #64	; 0x40
 8009686:	d854      	bhi.n	8009732 <USBD_StdDevReq+0xda>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <USBD_StdDevReq+0x4c>
 800968c:	2b20      	cmp	r3, #32
 800968e:	d150      	bne.n	8009732 <USBD_StdDevReq+0xda>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
 800969e:	4603      	mov	r3, r0
 80096a0:	73fb      	strb	r3, [r7, #15]
		  break;
 80096a2:	e04e      	b.n	8009742 <USBD_StdDevReq+0xea>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	785b      	ldrb	r3, [r3, #1]
 80096a8:	2b09      	cmp	r3, #9
 80096aa:	d83c      	bhi.n	8009726 <USBD_StdDevReq+0xce>
 80096ac:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <USBD_StdDevReq+0x5c>)
 80096ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b2:	bf00      	nop
 80096b4:	08009709 	.word	0x08009709
 80096b8:	0800971d 	.word	0x0800971d
 80096bc:	08009727 	.word	0x08009727
 80096c0:	08009713 	.word	0x08009713
 80096c4:	08009727 	.word	0x08009727
 80096c8:	080096e7 	.word	0x080096e7
 80096cc:	080096dd 	.word	0x080096dd
 80096d0:	08009727 	.word	0x08009727
 80096d4:	080096ff 	.word	0x080096ff
 80096d8:	080096f1 	.word	0x080096f1
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 80096dc:	6839      	ldr	r1, [r7, #0]
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f9e2 	bl	8009aa8 <USBD_GetDescriptor>
			  break;
 80096e4:	e024      	b.n	8009730 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fb47 	bl	8009d7c <USBD_SetAddress>
			  break;
 80096ee:	e01f      	b.n	8009730 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fb86 	bl	8009e04 <USBD_SetConfig>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]
			  break;
 80096fc:	e018      	b.n	8009730 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fc25 	bl	8009f50 <USBD_GetConfig>
			  break;
 8009706:	e013      	b.n	8009730 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fc56 	bl	8009fbc <USBD_GetStatus>
			  break;
 8009710:	e00e      	b.n	8009730 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fc85 	bl	800a024 <USBD_SetFeature>
			  break;
 800971a:	e009      	b.n	8009730 <USBD_StdDevReq+0xd8>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fc94 	bl	800a04c <USBD_ClrFeature>
			  break;
 8009724:	e004      	b.n	8009730 <USBD_StdDevReq+0xd8>

			default:
			  USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fceb 	bl	800a104 <USBD_CtlError>
			  break;
 800972e:	bf00      	nop
		  }
		  break;
 8009730:	e007      	b.n	8009742 <USBD_StdDevReq+0xea>

		default:
		  unknown_bmrequest = 1;
 8009732:	4b06      	ldr	r3, [pc, #24]	; (800974c <USBD_StdDevReq+0xf4>)
 8009734:	2201      	movs	r2, #1
 8009736:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fce2 	bl	800a104 <USBD_CtlError>
		  break;
 8009740:	bf00      	nop
	  }

  return ret;
 8009742:	7bfb      	ldrb	r3, [r7, #15]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20000acb 	.word	0x20000acb

08009750 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009766:	2b40      	cmp	r3, #64	; 0x40
 8009768:	d005      	beq.n	8009776 <USBD_StdItfReq+0x26>
 800976a:	2b40      	cmp	r3, #64	; 0x40
 800976c:	d82f      	bhi.n	80097ce <USBD_StdItfReq+0x7e>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <USBD_StdItfReq+0x26>
 8009772:	2b20      	cmp	r3, #32
 8009774:	d12b      	bne.n	80097ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800977c:	b2db      	uxtb	r3, r3
 800977e:	3b01      	subs	r3, #1
 8009780:	2b02      	cmp	r3, #2
 8009782:	d81d      	bhi.n	80097c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	889b      	ldrh	r3, [r3, #4]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b01      	cmp	r3, #1
 800978c:	d813      	bhi.n	80097b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	4798      	blx	r3
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	88db      	ldrh	r3, [r3, #6]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d110      	bne.n	80097ca <USBD_StdItfReq+0x7a>
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10d      	bne.n	80097ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fd73 	bl	800a29a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097b4:	e009      	b.n	80097ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fca3 	bl	800a104 <USBD_CtlError>
          break;
 80097be:	e004      	b.n	80097ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fc9e 	bl	800a104 <USBD_CtlError>
          break;
 80097c8:	e000      	b.n	80097cc <USBD_StdItfReq+0x7c>
          break;
 80097ca:	bf00      	nop
      }
      break;
 80097cc:	e004      	b.n	80097d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fc97 	bl	800a104 <USBD_CtlError>
      break;
 80097d6:	bf00      	nop
  }

  return ret;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b084      	sub	sp, #16
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	889b      	ldrh	r3, [r3, #4]
 80097f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097fe:	2b40      	cmp	r3, #64	; 0x40
 8009800:	d007      	beq.n	8009812 <USBD_StdEPReq+0x30>
 8009802:	2b40      	cmp	r3, #64	; 0x40
 8009804:	f200 8145 	bhi.w	8009a92 <USBD_StdEPReq+0x2b0>
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00c      	beq.n	8009826 <USBD_StdEPReq+0x44>
 800980c:	2b20      	cmp	r3, #32
 800980e:	f040 8140 	bne.w	8009a92 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
 8009820:	4603      	mov	r3, r0
 8009822:	73fb      	strb	r3, [r7, #15]
      break;
 8009824:	e13a      	b.n	8009a9c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b03      	cmp	r3, #3
 800982c:	d007      	beq.n	800983e <USBD_StdEPReq+0x5c>
 800982e:	2b03      	cmp	r3, #3
 8009830:	f300 8129 	bgt.w	8009a86 <USBD_StdEPReq+0x2a4>
 8009834:	2b00      	cmp	r3, #0
 8009836:	d07f      	beq.n	8009938 <USBD_StdEPReq+0x156>
 8009838:	2b01      	cmp	r3, #1
 800983a:	d03c      	beq.n	80098b6 <USBD_StdEPReq+0xd4>
 800983c:	e123      	b.n	8009a86 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b02      	cmp	r3, #2
 8009848:	d002      	beq.n	8009850 <USBD_StdEPReq+0x6e>
 800984a:	2b03      	cmp	r3, #3
 800984c:	d016      	beq.n	800987c <USBD_StdEPReq+0x9a>
 800984e:	e02c      	b.n	80098aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009850:	7bbb      	ldrb	r3, [r7, #14]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00d      	beq.n	8009872 <USBD_StdEPReq+0x90>
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	2b80      	cmp	r3, #128	; 0x80
 800985a:	d00a      	beq.n	8009872 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800985c:	7bbb      	ldrb	r3, [r7, #14]
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f003 fe05 	bl	800d470 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009866:	2180      	movs	r1, #128	; 0x80
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f003 fe01 	bl	800d470 <USBD_LL_StallEP>
 800986e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009870:	e020      	b.n	80098b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fc45 	bl	800a104 <USBD_CtlError>
              break;
 800987a:	e01b      	b.n	80098b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	885b      	ldrh	r3, [r3, #2]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10e      	bne.n	80098a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <USBD_StdEPReq+0xc0>
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	2b80      	cmp	r3, #128	; 0x80
 800988e:	d008      	beq.n	80098a2 <USBD_StdEPReq+0xc0>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	88db      	ldrh	r3, [r3, #6]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d104      	bne.n	80098a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f003 fde7 	bl	800d470 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fcf9 	bl	800a29a <USBD_CtlSendStatus>

              break;
 80098a8:	e004      	b.n	80098b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fc29 	bl	800a104 <USBD_CtlError>
              break;
 80098b2:	bf00      	nop
          }
          break;
 80098b4:	e0ec      	b.n	8009a90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d002      	beq.n	80098c8 <USBD_StdEPReq+0xe6>
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d016      	beq.n	80098f4 <USBD_StdEPReq+0x112>
 80098c6:	e030      	b.n	800992a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00d      	beq.n	80098ea <USBD_StdEPReq+0x108>
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b80      	cmp	r3, #128	; 0x80
 80098d2:	d00a      	beq.n	80098ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f003 fdc9 	bl	800d470 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098de:	2180      	movs	r1, #128	; 0x80
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f003 fdc5 	bl	800d470 <USBD_LL_StallEP>
 80098e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098e8:	e025      	b.n	8009936 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fc09 	bl	800a104 <USBD_CtlError>
              break;
 80098f2:	e020      	b.n	8009936 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	885b      	ldrh	r3, [r3, #2]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d11b      	bne.n	8009934 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098fc:	7bbb      	ldrb	r3, [r7, #14]
 80098fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009902:	2b00      	cmp	r3, #0
 8009904:	d004      	beq.n	8009910 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009906:	7bbb      	ldrb	r3, [r7, #14]
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f003 fdcf 	bl	800d4ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fcc2 	bl	800a29a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	4798      	blx	r3
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009928:	e004      	b.n	8009934 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fbe9 	bl	800a104 <USBD_CtlError>
              break;
 8009932:	e000      	b.n	8009936 <USBD_StdEPReq+0x154>
              break;
 8009934:	bf00      	nop
          }
          break;
 8009936:	e0ab      	b.n	8009a90 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b02      	cmp	r3, #2
 8009942:	d002      	beq.n	800994a <USBD_StdEPReq+0x168>
 8009944:	2b03      	cmp	r3, #3
 8009946:	d032      	beq.n	80099ae <USBD_StdEPReq+0x1cc>
 8009948:	e097      	b.n	8009a7a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800994a:	7bbb      	ldrb	r3, [r7, #14]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d007      	beq.n	8009960 <USBD_StdEPReq+0x17e>
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	2b80      	cmp	r3, #128	; 0x80
 8009954:	d004      	beq.n	8009960 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fbd3 	bl	800a104 <USBD_CtlError>
                break;
 800995e:	e091      	b.n	8009a84 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009964:	2b00      	cmp	r3, #0
 8009966:	da0b      	bge.n	8009980 <USBD_StdEPReq+0x19e>
 8009968:	7bbb      	ldrb	r3, [r7, #14]
 800996a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800996e:	4613      	mov	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	3310      	adds	r3, #16
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	4413      	add	r3, r2
 800997c:	3304      	adds	r3, #4
 800997e:	e00b      	b.n	8009998 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	4413      	add	r3, r2
 8009996:	3304      	adds	r3, #4
 8009998:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2202      	movs	r2, #2
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fc1d 	bl	800a1e6 <USBD_CtlSendData>
              break;
 80099ac:	e06a      	b.n	8009a84 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80099ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	da11      	bge.n	80099da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
 80099b8:	f003 020f 	and.w	r2, r3, #15
 80099bc:	6879      	ldr	r1, [r7, #4]
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	440b      	add	r3, r1
 80099c8:	3324      	adds	r3, #36	; 0x24
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d117      	bne.n	8009a00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fb96 	bl	800a104 <USBD_CtlError>
                  break;
 80099d8:	e054      	b.n	8009a84 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	f003 020f 	and.w	r2, r3, #15
 80099e0:	6879      	ldr	r1, [r7, #4]
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	440b      	add	r3, r1
 80099ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d104      	bne.n	8009a00 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fb83 	bl	800a104 <USBD_CtlError>
                  break;
 80099fe:	e041      	b.n	8009a84 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	da0b      	bge.n	8009a20 <USBD_StdEPReq+0x23e>
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a0e:	4613      	mov	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	3310      	adds	r3, #16
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	e00b      	b.n	8009a38 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a26:	4613      	mov	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	4413      	add	r3, r2
 8009a36:	3304      	adds	r3, #4
 8009a38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <USBD_StdEPReq+0x264>
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d103      	bne.n	8009a4e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	e00e      	b.n	8009a6c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f003 fd4a 	bl	800d4ec <USBD_LL_IsStallEP>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2201      	movs	r2, #1
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	e002      	b.n	8009a6c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fbb7 	bl	800a1e6 <USBD_CtlSendData>
              break;
 8009a78:	e004      	b.n	8009a84 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fb41 	bl	800a104 <USBD_CtlError>
              break;
 8009a82:	bf00      	nop
          }
          break;
 8009a84:	e004      	b.n	8009a90 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fb3b 	bl	800a104 <USBD_CtlError>
          break;
 8009a8e:	bf00      	nop
      }
      break;
 8009a90:	e004      	b.n	8009a9c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fb35 	bl	800a104 <USBD_CtlError>
      break;
 8009a9a:	bf00      	nop
  }

  return ret;
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	885b      	ldrh	r3, [r3, #2]
 8009ac2:	0a1b      	lsrs	r3, r3, #8
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	2b06      	cmp	r3, #6
 8009aca:	f200 8128 	bhi.w	8009d1e <USBD_GetDescriptor+0x276>
 8009ace:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <USBD_GetDescriptor+0x2c>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009af1 	.word	0x08009af1
 8009ad8:	08009b09 	.word	0x08009b09
 8009adc:	08009b49 	.word	0x08009b49
 8009ae0:	08009d1f 	.word	0x08009d1f
 8009ae4:	08009d1f 	.word	0x08009d1f
 8009ae8:	08009cbf 	.word	0x08009cbf
 8009aec:	08009ceb 	.word	0x08009ceb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	7c12      	ldrb	r2, [r2, #16]
 8009afc:	f107 0108 	add.w	r1, r7, #8
 8009b00:	4610      	mov	r0, r2
 8009b02:	4798      	blx	r3
 8009b04:	60f8      	str	r0, [r7, #12]
      break;
 8009b06:	e112      	b.n	8009d2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	7c1b      	ldrb	r3, [r3, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10d      	bne.n	8009b2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b18:	f107 0208 	add.w	r2, r7, #8
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4798      	blx	r3
 8009b20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3301      	adds	r3, #1
 8009b26:	2202      	movs	r2, #2
 8009b28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b2a:	e100      	b.n	8009d2e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	f107 0208 	add.w	r2, r7, #8
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
 8009b3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3301      	adds	r3, #1
 8009b42:	2202      	movs	r2, #2
 8009b44:	701a      	strb	r2, [r3, #0]
      break;
 8009b46:	e0f2      	b.n	8009d2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	885b      	ldrh	r3, [r3, #2]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b05      	cmp	r3, #5
 8009b50:	f200 80ac 	bhi.w	8009cac <USBD_GetDescriptor+0x204>
 8009b54:	a201      	add	r2, pc, #4	; (adr r2, 8009b5c <USBD_GetDescriptor+0xb4>)
 8009b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5a:	bf00      	nop
 8009b5c:	08009b75 	.word	0x08009b75
 8009b60:	08009ba9 	.word	0x08009ba9
 8009b64:	08009bdd 	.word	0x08009bdd
 8009b68:	08009c11 	.word	0x08009c11
 8009b6c:	08009c45 	.word	0x08009c45
 8009b70:	08009c79 	.word	0x08009c79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	7c12      	ldrb	r2, [r2, #16]
 8009b8c:	f107 0108 	add.w	r1, r7, #8
 8009b90:	4610      	mov	r0, r2
 8009b92:	4798      	blx	r3
 8009b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b96:	e091      	b.n	8009cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fab2 	bl	800a104 <USBD_CtlError>
            err++;
 8009ba0:	7afb      	ldrb	r3, [r7, #11]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ba6:	e089      	b.n	8009cbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	7c12      	ldrb	r2, [r2, #16]
 8009bc0:	f107 0108 	add.w	r1, r7, #8
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
 8009bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bca:	e077      	b.n	8009cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa98 	bl	800a104 <USBD_CtlError>
            err++;
 8009bd4:	7afb      	ldrb	r3, [r7, #11]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bda:	e06f      	b.n	8009cbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00b      	beq.n	8009c00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	7c12      	ldrb	r2, [r2, #16]
 8009bf4:	f107 0108 	add.w	r1, r7, #8
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
 8009bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bfe:	e05d      	b.n	8009cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa7e 	bl	800a104 <USBD_CtlError>
            err++;
 8009c08:	7afb      	ldrb	r3, [r7, #11]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c0e:	e055      	b.n	8009cbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00b      	beq.n	8009c34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	7c12      	ldrb	r2, [r2, #16]
 8009c28:	f107 0108 	add.w	r1, r7, #8
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4798      	blx	r3
 8009c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c32:	e043      	b.n	8009cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fa64 	bl	800a104 <USBD_CtlError>
            err++;
 8009c3c:	7afb      	ldrb	r3, [r7, #11]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	72fb      	strb	r3, [r7, #11]
          break;
 8009c42:	e03b      	b.n	8009cbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	7c12      	ldrb	r2, [r2, #16]
 8009c5c:	f107 0108 	add.w	r1, r7, #8
 8009c60:	4610      	mov	r0, r2
 8009c62:	4798      	blx	r3
 8009c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c66:	e029      	b.n	8009cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fa4a 	bl	800a104 <USBD_CtlError>
            err++;
 8009c70:	7afb      	ldrb	r3, [r7, #11]
 8009c72:	3301      	adds	r3, #1
 8009c74:	72fb      	strb	r3, [r7, #11]
          break;
 8009c76:	e021      	b.n	8009cbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00b      	beq.n	8009c9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	7c12      	ldrb	r2, [r2, #16]
 8009c90:	f107 0108 	add.w	r1, r7, #8
 8009c94:	4610      	mov	r0, r2
 8009c96:	4798      	blx	r3
 8009c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c9a:	e00f      	b.n	8009cbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fa30 	bl	800a104 <USBD_CtlError>
            err++;
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8009caa:	e007      	b.n	8009cbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa28 	bl	800a104 <USBD_CtlError>
          err++;
 8009cb4:	7afb      	ldrb	r3, [r7, #11]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009cba:	bf00      	nop
      }
      break;
 8009cbc:	e037      	b.n	8009d2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	7c1b      	ldrb	r3, [r3, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d109      	bne.n	8009cda <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cce:	f107 0208 	add.w	r2, r7, #8
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	4798      	blx	r3
 8009cd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cd8:	e029      	b.n	8009d2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fa11 	bl	800a104 <USBD_CtlError>
        err++;
 8009ce2:	7afb      	ldrb	r3, [r7, #11]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ce8:	e021      	b.n	8009d2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	7c1b      	ldrb	r3, [r3, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10d      	bne.n	8009d0e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfa:	f107 0208 	add.w	r2, r7, #8
 8009cfe:	4610      	mov	r0, r2
 8009d00:	4798      	blx	r3
 8009d02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3301      	adds	r3, #1
 8009d08:	2207      	movs	r2, #7
 8009d0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d0c:	e00f      	b.n	8009d2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f9f7 	bl	800a104 <USBD_CtlError>
        err++;
 8009d16:	7afb      	ldrb	r3, [r7, #11]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d1c:	e007      	b.n	8009d2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f9ef 	bl	800a104 <USBD_CtlError>
      err++;
 8009d26:	7afb      	ldrb	r3, [r7, #11]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d2c:	bf00      	nop
  }

  if (err != 0U)
 8009d2e:	7afb      	ldrb	r3, [r7, #11]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d11e      	bne.n	8009d72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	88db      	ldrh	r3, [r3, #6]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d016      	beq.n	8009d6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009d3c:	893b      	ldrh	r3, [r7, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00e      	beq.n	8009d60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	88da      	ldrh	r2, [r3, #6]
 8009d46:	893b      	ldrh	r3, [r7, #8]
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	bf28      	it	cs
 8009d4c:	4613      	movcs	r3, r2
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d52:	893b      	ldrh	r3, [r7, #8]
 8009d54:	461a      	mov	r2, r3
 8009d56:	68f9      	ldr	r1, [r7, #12]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fa44 	bl	800a1e6 <USBD_CtlSendData>
 8009d5e:	e009      	b.n	8009d74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f9ce 	bl	800a104 <USBD_CtlError>
 8009d68:	e004      	b.n	8009d74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fa95 	bl	800a29a <USBD_CtlSendStatus>
 8009d70:	e000      	b.n	8009d74 <USBD_GetDescriptor+0x2cc>
    return;
 8009d72:	bf00      	nop
  }
}
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop

08009d7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	889b      	ldrh	r3, [r3, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d131      	bne.n	8009df2 <USBD_SetAddress+0x76>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	88db      	ldrh	r3, [r3, #6]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d12d      	bne.n	8009df2 <USBD_SetAddress+0x76>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	885b      	ldrh	r3, [r3, #2]
 8009d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8009d9c:	d829      	bhi.n	8009df2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	885b      	ldrh	r3, [r3, #2]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009da8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d104      	bne.n	8009dc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f9a3 	bl	800a104 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dbe:	e01d      	b.n	8009dfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	7bfa      	ldrb	r2, [r7, #15]
 8009dc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f003 fbb9 	bl	800d544 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fa61 	bl	800a29a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d004      	beq.n	8009de8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2202      	movs	r2, #2
 8009de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009de6:	e009      	b.n	8009dfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df0:	e004      	b.n	8009dfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f985 	bl	800a104 <USBD_CtlError>
  }
}
 8009dfa:	bf00      	nop
 8009dfc:	bf00      	nop
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	885b      	ldrh	r3, [r3, #2]
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	4b4c      	ldr	r3, [pc, #304]	; (8009f4c <USBD_SetConfig+0x148>)
 8009e1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e1c:	4b4b      	ldr	r3, [pc, #300]	; (8009f4c <USBD_SetConfig+0x148>)
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d905      	bls.n	8009e30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f96c 	bl	800a104 <USBD_CtlError>
    return USBD_FAIL;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e088      	b.n	8009f42 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d002      	beq.n	8009e42 <USBD_SetConfig+0x3e>
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d025      	beq.n	8009e8c <USBD_SetConfig+0x88>
 8009e40:	e071      	b.n	8009f26 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009e42:	4b42      	ldr	r3, [pc, #264]	; (8009f4c <USBD_SetConfig+0x148>)
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d01c      	beq.n	8009e84 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009e4a:	4b40      	ldr	r3, [pc, #256]	; (8009f4c <USBD_SetConfig+0x148>)
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e54:	4b3d      	ldr	r3, [pc, #244]	; (8009f4c <USBD_SetConfig+0x148>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7ff f93a 	bl	80090d4 <USBD_SetClassConfig>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d004      	beq.n	8009e74 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f949 	bl	800a104 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e72:	e065      	b.n	8009f40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fa10 	bl	800a29a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2203      	movs	r2, #3
 8009e7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e82:	e05d      	b.n	8009f40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fa08 	bl	800a29a <USBD_CtlSendStatus>
      break;
 8009e8a:	e059      	b.n	8009f40 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e8c:	4b2f      	ldr	r3, [pc, #188]	; (8009f4c <USBD_SetConfig+0x148>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d112      	bne.n	8009eba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2202      	movs	r2, #2
 8009e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009e9c:	4b2b      	ldr	r3, [pc, #172]	; (8009f4c <USBD_SetConfig+0x148>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ea6:	4b29      	ldr	r3, [pc, #164]	; (8009f4c <USBD_SetConfig+0x148>)
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff f92d 	bl	800910c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f9f1 	bl	800a29a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009eb8:	e042      	b.n	8009f40 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009eba:	4b24      	ldr	r3, [pc, #144]	; (8009f4c <USBD_SetConfig+0x148>)
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d02a      	beq.n	8009f1e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff f91b 	bl	800910c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009ed6:	4b1d      	ldr	r3, [pc, #116]	; (8009f4c <USBD_SetConfig+0x148>)
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ee0:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <USBD_SetConfig+0x148>)
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7ff f8f4 	bl	80090d4 <USBD_SetClassConfig>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00f      	beq.n	8009f16 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f903 	bl	800a104 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	4619      	mov	r1, r3
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7ff f900 	bl	800910c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f14:	e014      	b.n	8009f40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f9bf 	bl	800a29a <USBD_CtlSendStatus>
      break;
 8009f1c:	e010      	b.n	8009f40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f9bb 	bl	800a29a <USBD_CtlSendStatus>
      break;
 8009f24:	e00c      	b.n	8009f40 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f8eb 	bl	800a104 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f2e:	4b07      	ldr	r3, [pc, #28]	; (8009f4c <USBD_SetConfig+0x148>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff f8e9 	bl	800910c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f3e:	bf00      	nop
  }

  return ret;
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20000acc 	.word	0x20000acc

08009f50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	88db      	ldrh	r3, [r3, #6]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d004      	beq.n	8009f6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f8cd 	bl	800a104 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f6a:	e023      	b.n	8009fb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	dc02      	bgt.n	8009f7e <USBD_GetConfig+0x2e>
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	dc03      	bgt.n	8009f84 <USBD_GetConfig+0x34>
 8009f7c:	e015      	b.n	8009faa <USBD_GetConfig+0x5a>
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d00b      	beq.n	8009f9a <USBD_GetConfig+0x4a>
 8009f82:	e012      	b.n	8009faa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	2201      	movs	r2, #1
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f927 	bl	800a1e6 <USBD_CtlSendData>
        break;
 8009f98:	e00c      	b.n	8009fb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f91f 	bl	800a1e6 <USBD_CtlSendData>
        break;
 8009fa8:	e004      	b.n	8009fb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f8a9 	bl	800a104 <USBD_CtlError>
        break;
 8009fb2:	bf00      	nop
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d81e      	bhi.n	800a012 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	88db      	ldrh	r3, [r3, #6]
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d004      	beq.n	8009fe6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f890 	bl	800a104 <USBD_CtlError>
        break;
 8009fe4:	e01a      	b.n	800a01c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f043 0202 	orr.w	r2, r3, #2
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	330c      	adds	r3, #12
 800a006:	2202      	movs	r2, #2
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f8eb 	bl	800a1e6 <USBD_CtlSendData>
      break;
 800a010:	e004      	b.n	800a01c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 f875 	bl	800a104 <USBD_CtlError>
      break;
 800a01a:	bf00      	nop
  }
}
 800a01c:	bf00      	nop
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	885b      	ldrh	r3, [r3, #2]
 800a032:	2b01      	cmp	r3, #1
 800a034:	d106      	bne.n	800a044 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f92b 	bl	800a29a <USBD_CtlSendStatus>
  }
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	3b01      	subs	r3, #1
 800a060:	2b02      	cmp	r3, #2
 800a062:	d80b      	bhi.n	800a07c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	885b      	ldrh	r3, [r3, #2]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d10c      	bne.n	800a086 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f910 	bl	800a29a <USBD_CtlSendStatus>
      }
      break;
 800a07a:	e004      	b.n	800a086 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f840 	bl	800a104 <USBD_CtlError>
      break;
 800a084:	e000      	b.n	800a088 <USBD_ClrFeature+0x3c>
      break;
 800a086:	bf00      	nop
  }
}
 800a088:	bf00      	nop
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	781a      	ldrb	r2, [r3, #0]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	781a      	ldrb	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f7ff faad 	bl	800961a <SWAPBYTE>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f7ff faa0 	bl	800961a <SWAPBYTE>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	461a      	mov	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f7ff fa93 	bl	800961a <SWAPBYTE>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	80da      	strh	r2, [r3, #6]
}
 800a0fc:	bf00      	nop
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a10e:	2180      	movs	r1, #128	; 0x80
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f003 f9ad 	bl	800d470 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a116:	2100      	movs	r1, #0
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f003 f9a9 	bl	800d470 <USBD_LL_StallEP>
}
 800a11e:	bf00      	nop
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b086      	sub	sp, #24
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	60f8      	str	r0, [r7, #12]
 800a12e:	60b9      	str	r1, [r7, #8]
 800a130:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d036      	beq.n	800a1aa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a140:	6938      	ldr	r0, [r7, #16]
 800a142:	f000 f836 	bl	800a1b2 <USBD_GetLen>
 800a146:	4603      	mov	r3, r0
 800a148:	3301      	adds	r3, #1
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	b29a      	uxth	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	4413      	add	r3, r2
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	7812      	ldrb	r2, [r2, #0]
 800a15e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	3301      	adds	r3, #1
 800a164:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	4413      	add	r3, r2
 800a16c:	2203      	movs	r2, #3
 800a16e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a170:	7dfb      	ldrb	r3, [r7, #23]
 800a172:	3301      	adds	r3, #1
 800a174:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a176:	e013      	b.n	800a1a0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	4413      	add	r3, r2
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	7812      	ldrb	r2, [r2, #0]
 800a182:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	3301      	adds	r3, #1
 800a188:	613b      	str	r3, [r7, #16]
    idx++;
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	3301      	adds	r3, #1
 800a18e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	4413      	add	r3, r2
 800a196:	2200      	movs	r2, #0
 800a198:	701a      	strb	r2, [r3, #0]
    idx++;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	3301      	adds	r3, #1
 800a19e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1e7      	bne.n	800a178 <USBD_GetString+0x52>
 800a1a8:	e000      	b.n	800a1ac <USBD_GetString+0x86>
    return;
 800a1aa:	bf00      	nop
  }
}
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	b085      	sub	sp, #20
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a1c2:	e005      	b.n	800a1d0 <USBD_GetLen+0x1e>
  {
    len++;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1f5      	bne.n	800a1c4 <USBD_GetLen+0x12>
  }

  return len;
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	2100      	movs	r1, #0
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f003 f9b8 	bl	800d582 <USBD_LL_Transmit>

  return USBD_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	2100      	movs	r1, #0
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f003 f9a7 	bl	800d582 <USBD_LL_Transmit>

  return USBD_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	60f8      	str	r0, [r7, #12]
 800a246:	60b9      	str	r1, [r7, #8]
 800a248:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2203      	movs	r2, #3
 800a24e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	2100      	movs	r1, #0
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f003 f9ab 	bl	800d5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	2100      	movs	r1, #0
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f003 f99a 	bl	800d5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b082      	sub	sp, #8
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2204      	movs	r2, #4
 800a2a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f003 f966 	bl	800d582 <USBD_LL_Transmit>

  return USBD_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2205      	movs	r2, #5
 800a2cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f003 f974 	bl	800d5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <__NVIC_SetPriority>:
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	6039      	str	r1, [r7, #0]
 800a2f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a2f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	db0a      	blt.n	800a312 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	490c      	ldr	r1, [pc, #48]	; (800a334 <__NVIC_SetPriority+0x4c>)
 800a302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a306:	0112      	lsls	r2, r2, #4
 800a308:	b2d2      	uxtb	r2, r2
 800a30a:	440b      	add	r3, r1
 800a30c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a310:	e00a      	b.n	800a328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	b2da      	uxtb	r2, r3
 800a316:	4908      	ldr	r1, [pc, #32]	; (800a338 <__NVIC_SetPriority+0x50>)
 800a318:	79fb      	ldrb	r3, [r7, #7]
 800a31a:	f003 030f 	and.w	r3, r3, #15
 800a31e:	3b04      	subs	r3, #4
 800a320:	0112      	lsls	r2, r2, #4
 800a322:	b2d2      	uxtb	r2, r2
 800a324:	440b      	add	r3, r1
 800a326:	761a      	strb	r2, [r3, #24]
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	e000e100 	.word	0xe000e100
 800a338:	e000ed00 	.word	0xe000ed00

0800a33c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a33c:	b580      	push	{r7, lr}
 800a33e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a340:	4b05      	ldr	r3, [pc, #20]	; (800a358 <SysTick_Handler+0x1c>)
 800a342:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a344:	f001 fcfe 	bl	800bd44 <xTaskGetSchedulerState>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d001      	beq.n	800a352 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a34e:	f002 fae3 	bl	800c918 <xPortSysTickHandler>
  }
}
 800a352:	bf00      	nop
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	e000e010 	.word	0xe000e010

0800a35c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a360:	2100      	movs	r1, #0
 800a362:	f06f 0004 	mvn.w	r0, #4
 800a366:	f7ff ffbf 	bl	800a2e8 <__NVIC_SetPriority>
#endif
}
 800a36a:	bf00      	nop
 800a36c:	bd80      	pop	{r7, pc}
	...

0800a370 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a376:	f3ef 8305 	mrs	r3, IPSR
 800a37a:	603b      	str	r3, [r7, #0]
  return(result);
 800a37c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a382:	f06f 0305 	mvn.w	r3, #5
 800a386:	607b      	str	r3, [r7, #4]
 800a388:	e00c      	b.n	800a3a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a38a:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <osKernelInitialize+0x44>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d105      	bne.n	800a39e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a392:	4b08      	ldr	r3, [pc, #32]	; (800a3b4 <osKernelInitialize+0x44>)
 800a394:	2201      	movs	r2, #1
 800a396:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a398:	2300      	movs	r3, #0
 800a39a:	607b      	str	r3, [r7, #4]
 800a39c:	e002      	b.n	800a3a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a39e:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3a4:	687b      	ldr	r3, [r7, #4]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	20000ad0 	.word	0x20000ad0

0800a3b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3be:	f3ef 8305 	mrs	r3, IPSR
 800a3c2:	603b      	str	r3, [r7, #0]
  return(result);
 800a3c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a3ca:	f06f 0305 	mvn.w	r3, #5
 800a3ce:	607b      	str	r3, [r7, #4]
 800a3d0:	e010      	b.n	800a3f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a3d2:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <osKernelStart+0x48>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d109      	bne.n	800a3ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a3da:	f7ff ffbf 	bl	800a35c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a3de:	4b08      	ldr	r3, [pc, #32]	; (800a400 <osKernelStart+0x48>)
 800a3e0:	2202      	movs	r2, #2
 800a3e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a3e4:	f001 f866 	bl	800b4b4 <vTaskStartScheduler>
      stat = osOK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	607b      	str	r3, [r7, #4]
 800a3ec:	e002      	b.n	800a3f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3f4:	687b      	ldr	r3, [r7, #4]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	20000ad0 	.word	0x20000ad0

0800a404 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a404:	b580      	push	{r7, lr}
 800a406:	b08e      	sub	sp, #56	; 0x38
 800a408:	af04      	add	r7, sp, #16
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a410:	2300      	movs	r3, #0
 800a412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a414:	f3ef 8305 	mrs	r3, IPSR
 800a418:	617b      	str	r3, [r7, #20]
  return(result);
 800a41a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d17e      	bne.n	800a51e <osThreadNew+0x11a>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d07b      	beq.n	800a51e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a426:	2380      	movs	r3, #128	; 0x80
 800a428:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a42a:	2318      	movs	r3, #24
 800a42c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a42e:	2300      	movs	r3, #0
 800a430:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a432:	f04f 33ff 	mov.w	r3, #4294967295
 800a436:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d045      	beq.n	800a4ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d002      	beq.n	800a44c <osThreadNew+0x48>
        name = attr->name;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d008      	beq.n	800a472 <osThreadNew+0x6e>
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	2b38      	cmp	r3, #56	; 0x38
 800a464:	d805      	bhi.n	800a472 <osThreadNew+0x6e>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <osThreadNew+0x72>
        return (NULL);
 800a472:	2300      	movs	r3, #0
 800a474:	e054      	b.n	800a520 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	089b      	lsrs	r3, r3, #2
 800a484:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00e      	beq.n	800a4ac <osThreadNew+0xa8>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	2b5b      	cmp	r3, #91	; 0x5b
 800a494:	d90a      	bls.n	800a4ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d006      	beq.n	800a4ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <osThreadNew+0xa8>
        mem = 1;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	61bb      	str	r3, [r7, #24]
 800a4aa:	e010      	b.n	800a4ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10c      	bne.n	800a4ce <osThreadNew+0xca>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d108      	bne.n	800a4ce <osThreadNew+0xca>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d104      	bne.n	800a4ce <osThreadNew+0xca>
          mem = 0;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	61bb      	str	r3, [r7, #24]
 800a4c8:	e001      	b.n	800a4ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d110      	bne.n	800a4f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4dc:	9202      	str	r2, [sp, #8]
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	6a3a      	ldr	r2, [r7, #32]
 800a4e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fe0c 	bl	800b108 <xTaskCreateStatic>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	613b      	str	r3, [r7, #16]
 800a4f4:	e013      	b.n	800a51e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d110      	bne.n	800a51e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a4fc:	6a3b      	ldr	r3, [r7, #32]
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	f107 0310 	add.w	r3, r7, #16
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 fe57 	bl	800b1c2 <xTaskCreate>
 800a514:	4603      	mov	r3, r0
 800a516:	2b01      	cmp	r3, #1
 800a518:	d001      	beq.n	800a51e <osThreadNew+0x11a>
            hTask = NULL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a51e:	693b      	ldr	r3, [r7, #16]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3728      	adds	r7, #40	; 0x28
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a530:	f3ef 8305 	mrs	r3, IPSR
 800a534:	60bb      	str	r3, [r7, #8]
  return(result);
 800a536:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <osDelay+0x1c>
    stat = osErrorISR;
 800a53c:	f06f 0305 	mvn.w	r3, #5
 800a540:	60fb      	str	r3, [r7, #12]
 800a542:	e007      	b.n	800a554 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a544:	2300      	movs	r3, #0
 800a546:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d002      	beq.n	800a554 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 ff7c 	bl	800b44c <vTaskDelay>
    }
  }

  return (stat);
 800a554:	68fb      	ldr	r3, [r7, #12]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4a07      	ldr	r2, [pc, #28]	; (800a58c <vApplicationGetIdleTaskMemory+0x2c>)
 800a570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	4a06      	ldr	r2, [pc, #24]	; (800a590 <vApplicationGetIdleTaskMemory+0x30>)
 800a576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2280      	movs	r2, #128	; 0x80
 800a57c:	601a      	str	r2, [r3, #0]
}
 800a57e:	bf00      	nop
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	20000ad4 	.word	0x20000ad4
 800a590:	20000b30 	.word	0x20000b30

0800a594 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4a07      	ldr	r2, [pc, #28]	; (800a5c0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a5a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	4a06      	ldr	r2, [pc, #24]	; (800a5c4 <vApplicationGetTimerTaskMemory+0x30>)
 800a5aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5b2:	601a      	str	r2, [r3, #0]
}
 800a5b4:	bf00      	nop
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	20000d30 	.word	0x20000d30
 800a5c4:	20000d8c 	.word	0x20000d8c

0800a5c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f103 0208 	add.w	r2, r3, #8
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f103 0208 	add.w	r2, r3, #8
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f103 0208 	add.w	r2, r3, #8
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a616:	bf00      	nop
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a622:	b480      	push	{r7}
 800a624:	b085      	sub	sp, #20
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	689a      	ldr	r2, [r3, #8]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	1c5a      	adds	r2, r3, #1
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	601a      	str	r2, [r3, #0]
}
 800a65e:	bf00      	nop
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a66a:	b480      	push	{r7}
 800a66c:	b085      	sub	sp, #20
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a680:	d103      	bne.n	800a68a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	e00c      	b.n	800a6a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3308      	adds	r3, #8
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	e002      	b.n	800a698 <vListInsert+0x2e>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d2f6      	bcs.n	800a692 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	1c5a      	adds	r2, r3, #1
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	601a      	str	r2, [r3, #0]
}
 800a6d0:	bf00      	nop
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	6892      	ldr	r2, [r2, #8]
 800a6f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	6852      	ldr	r2, [r2, #4]
 800a6fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	429a      	cmp	r2, r3
 800a706:	d103      	bne.n	800a710 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	689a      	ldr	r2, [r3, #8]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	1e5a      	subs	r2, r3, #1
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10a      	bne.n	800a75a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a75a:	f002 f84b 	bl	800c7f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a766:	68f9      	ldr	r1, [r7, #12]
 800a768:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a76a:	fb01 f303 	mul.w	r3, r1, r3
 800a76e:	441a      	add	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a78a:	3b01      	subs	r3, #1
 800a78c:	68f9      	ldr	r1, [r7, #12]
 800a78e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a790:	fb01 f303 	mul.w	r3, r1, r3
 800a794:	441a      	add	r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	22ff      	movs	r2, #255	; 0xff
 800a79e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	22ff      	movs	r2, #255	; 0xff
 800a7a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d114      	bne.n	800a7da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d01a      	beq.n	800a7ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	3310      	adds	r3, #16
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f001 f903 	bl	800b9c8 <xTaskRemoveFromEventList>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d012      	beq.n	800a7ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7c8:	4b0c      	ldr	r3, [pc, #48]	; (800a7fc <xQueueGenericReset+0xcc>)
 800a7ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	e009      	b.n	800a7ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3310      	adds	r3, #16
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff fef2 	bl	800a5c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	3324      	adds	r3, #36	; 0x24
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7ff feed 	bl	800a5c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7ee:	f002 f831 	bl	800c854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7f2:	2301      	movs	r3, #1
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	e000ed04 	.word	0xe000ed04

0800a800 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a800:	b580      	push	{r7, lr}
 800a802:	b08e      	sub	sp, #56	; 0x38
 800a804:	af02      	add	r7, sp, #8
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10a      	bne.n	800a82a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a826:	bf00      	nop
 800a828:	e7fe      	b.n	800a828 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10a      	bne.n	800a846 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a842:	bf00      	nop
 800a844:	e7fe      	b.n	800a844 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <xQueueGenericCreateStatic+0x52>
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <xQueueGenericCreateStatic+0x56>
 800a852:	2301      	movs	r3, #1
 800a854:	e000      	b.n	800a858 <xQueueGenericCreateStatic+0x58>
 800a856:	2300      	movs	r3, #0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10a      	bne.n	800a872 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	623b      	str	r3, [r7, #32]
}
 800a86e:	bf00      	nop
 800a870:	e7fe      	b.n	800a870 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d102      	bne.n	800a87e <xQueueGenericCreateStatic+0x7e>
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <xQueueGenericCreateStatic+0x82>
 800a87e:	2301      	movs	r3, #1
 800a880:	e000      	b.n	800a884 <xQueueGenericCreateStatic+0x84>
 800a882:	2300      	movs	r3, #0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10a      	bne.n	800a89e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	61fb      	str	r3, [r7, #28]
}
 800a89a:	bf00      	nop
 800a89c:	e7fe      	b.n	800a89c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a89e:	2350      	movs	r3, #80	; 0x50
 800a8a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b50      	cmp	r3, #80	; 0x50
 800a8a6:	d00a      	beq.n	800a8be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	61bb      	str	r3, [r7, #24]
}
 800a8ba:	bf00      	nop
 800a8bc:	e7fe      	b.n	800a8bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00d      	beq.n	800a8e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	68b9      	ldr	r1, [r7, #8]
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 f805 	bl	800a8f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3730      	adds	r7, #48	; 0x30
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d103      	bne.n	800a90c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	69ba      	ldr	r2, [r7, #24]
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	e002      	b.n	800a912 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a91e:	2101      	movs	r1, #1
 800a920:	69b8      	ldr	r0, [r7, #24]
 800a922:	f7ff ff05 	bl	800a730 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	78fa      	ldrb	r2, [r7, #3]
 800a92a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a92e:	bf00      	nop
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b08e      	sub	sp, #56	; 0x38
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a946:	2300      	movs	r3, #0
 800a948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10a      	bne.n	800a96a <xQueueGenericSend+0x32>
	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a966:	bf00      	nop
 800a968:	e7fe      	b.n	800a968 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d103      	bne.n	800a978 <xQueueGenericSend+0x40>
 800a970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a974:	2b00      	cmp	r3, #0
 800a976:	d101      	bne.n	800a97c <xQueueGenericSend+0x44>
 800a978:	2301      	movs	r3, #1
 800a97a:	e000      	b.n	800a97e <xQueueGenericSend+0x46>
 800a97c:	2300      	movs	r3, #0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d10a      	bne.n	800a998 <xQueueGenericSend+0x60>
	__asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a994:	bf00      	nop
 800a996:	e7fe      	b.n	800a996 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d103      	bne.n	800a9a6 <xQueueGenericSend+0x6e>
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d101      	bne.n	800a9aa <xQueueGenericSend+0x72>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e000      	b.n	800a9ac <xQueueGenericSend+0x74>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10a      	bne.n	800a9c6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	623b      	str	r3, [r7, #32]
}
 800a9c2:	bf00      	nop
 800a9c4:	e7fe      	b.n	800a9c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9c6:	f001 f9bd 	bl	800bd44 <xTaskGetSchedulerState>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d102      	bne.n	800a9d6 <xQueueGenericSend+0x9e>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <xQueueGenericSend+0xa2>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e000      	b.n	800a9dc <xQueueGenericSend+0xa4>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10a      	bne.n	800a9f6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	61fb      	str	r3, [r7, #28]
}
 800a9f2:	bf00      	nop
 800a9f4:	e7fe      	b.n	800a9f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9f6:	f001 fefd 	bl	800c7f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d302      	bcc.n	800aa0c <xQueueGenericSend+0xd4>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d129      	bne.n	800aa60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	68b9      	ldr	r1, [r7, #8]
 800aa10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa12:	f000 fa0b 	bl	800ae2c <prvCopyDataToQueue>
 800aa16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d010      	beq.n	800aa42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	3324      	adds	r3, #36	; 0x24
 800aa24:	4618      	mov	r0, r3
 800aa26:	f000 ffcf 	bl	800b9c8 <xTaskRemoveFromEventList>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d013      	beq.n	800aa58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa30:	4b3f      	ldr	r3, [pc, #252]	; (800ab30 <xQueueGenericSend+0x1f8>)
 800aa32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	e00a      	b.n	800aa58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d007      	beq.n	800aa58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa48:	4b39      	ldr	r3, [pc, #228]	; (800ab30 <xQueueGenericSend+0x1f8>)
 800aa4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa58:	f001 fefc 	bl	800c854 <vPortExitCritical>
				return pdPASS;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e063      	b.n	800ab28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa66:	f001 fef5 	bl	800c854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e05c      	b.n	800ab28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa74:	f107 0314 	add.w	r3, r7, #20
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f001 f809 	bl	800ba90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa82:	f001 fee7 	bl	800c854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa86:	f000 fd7b 	bl	800b580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa8a:	f001 feb3 	bl	800c7f4 <vPortEnterCritical>
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa94:	b25b      	sxtb	r3, r3
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9a:	d103      	bne.n	800aaa4 <xQueueGenericSend+0x16c>
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaaa:	b25b      	sxtb	r3, r3
 800aaac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab0:	d103      	bne.n	800aaba <xQueueGenericSend+0x182>
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaba:	f001 fecb 	bl	800c854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aabe:	1d3a      	adds	r2, r7, #4
 800aac0:	f107 0314 	add.w	r3, r7, #20
 800aac4:	4611      	mov	r1, r2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 fff8 	bl	800babc <xTaskCheckForTimeOut>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d124      	bne.n	800ab1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aad4:	f000 faa2 	bl	800b01c <prvIsQueueFull>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d018      	beq.n	800ab10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	3310      	adds	r3, #16
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	4611      	mov	r1, r2
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 ff1e 	bl	800b928 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aaec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaee:	f000 fa2d 	bl	800af4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aaf2:	f000 fd53 	bl	800b59c <xTaskResumeAll>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f47f af7c 	bne.w	800a9f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aafe:	4b0c      	ldr	r3, [pc, #48]	; (800ab30 <xQueueGenericSend+0x1f8>)
 800ab00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab04:	601a      	str	r2, [r3, #0]
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	e772      	b.n	800a9f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab12:	f000 fa1b 	bl	800af4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab16:	f000 fd41 	bl	800b59c <xTaskResumeAll>
 800ab1a:	e76c      	b.n	800a9f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab1e:	f000 fa15 	bl	800af4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab22:	f000 fd3b 	bl	800b59c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3738      	adds	r7, #56	; 0x38
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	e000ed04 	.word	0xe000ed04

0800ab34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b090      	sub	sp, #64	; 0x40
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
 800ab40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ab46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10a      	bne.n	800ab62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d103      	bne.n	800ab70 <xQueueGenericSendFromISR+0x3c>
 800ab68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <xQueueGenericSendFromISR+0x40>
 800ab70:	2301      	movs	r3, #1
 800ab72:	e000      	b.n	800ab76 <xQueueGenericSendFromISR+0x42>
 800ab74:	2300      	movs	r3, #0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10a      	bne.n	800ab90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab8c:	bf00      	nop
 800ab8e:	e7fe      	b.n	800ab8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d103      	bne.n	800ab9e <xQueueGenericSendFromISR+0x6a>
 800ab96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d101      	bne.n	800aba2 <xQueueGenericSendFromISR+0x6e>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e000      	b.n	800aba4 <xQueueGenericSendFromISR+0x70>
 800aba2:	2300      	movs	r3, #0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	623b      	str	r3, [r7, #32]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abbe:	f001 fefb 	bl	800c9b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800abc2:	f3ef 8211 	mrs	r2, BASEPRI
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	61fa      	str	r2, [r7, #28]
 800abd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800abda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abdc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d302      	bcc.n	800abf0 <xQueueGenericSendFromISR+0xbc>
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b02      	cmp	r3, #2
 800abee:	d12f      	bne.n	800ac50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	68b9      	ldr	r1, [r7, #8]
 800ac04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac06:	f000 f911 	bl	800ae2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ac0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac12:	d112      	bne.n	800ac3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d016      	beq.n	800ac4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1e:	3324      	adds	r3, #36	; 0x24
 800ac20:	4618      	mov	r0, r3
 800ac22:	f000 fed1 	bl	800b9c8 <xTaskRemoveFromEventList>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00e      	beq.n	800ac4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00b      	beq.n	800ac4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	601a      	str	r2, [r3, #0]
 800ac38:	e007      	b.n	800ac4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac3e:	3301      	adds	r3, #1
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	b25a      	sxtb	r2, r3
 800ac44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ac4e:	e001      	b.n	800ac54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac50:	2300      	movs	r3, #0
 800ac52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3740      	adds	r7, #64	; 0x40
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08c      	sub	sp, #48	; 0x30
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10a      	bne.n	800ac9c <xQueueReceive+0x30>
	__asm volatile
 800ac86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	623b      	str	r3, [r7, #32]
}
 800ac98:	bf00      	nop
 800ac9a:	e7fe      	b.n	800ac9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d103      	bne.n	800acaa <xQueueReceive+0x3e>
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <xQueueReceive+0x42>
 800acaa:	2301      	movs	r3, #1
 800acac:	e000      	b.n	800acb0 <xQueueReceive+0x44>
 800acae:	2300      	movs	r3, #0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10a      	bne.n	800acca <xQueueReceive+0x5e>
	__asm volatile
 800acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	61fb      	str	r3, [r7, #28]
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acca:	f001 f83b 	bl	800bd44 <xTaskGetSchedulerState>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d102      	bne.n	800acda <xQueueReceive+0x6e>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <xQueueReceive+0x72>
 800acda:	2301      	movs	r3, #1
 800acdc:	e000      	b.n	800ace0 <xQueueReceive+0x74>
 800acde:	2300      	movs	r3, #0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10a      	bne.n	800acfa <xQueueReceive+0x8e>
	__asm volatile
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	61bb      	str	r3, [r7, #24]
}
 800acf6:	bf00      	nop
 800acf8:	e7fe      	b.n	800acf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acfa:	f001 fd7b 	bl	800c7f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d01f      	beq.n	800ad4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad0a:	68b9      	ldr	r1, [r7, #8]
 800ad0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad0e:	f000 f8f7 	bl	800af00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	1e5a      	subs	r2, r3, #1
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00f      	beq.n	800ad42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad24:	3310      	adds	r3, #16
 800ad26:	4618      	mov	r0, r3
 800ad28:	f000 fe4e 	bl	800b9c8 <xTaskRemoveFromEventList>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d007      	beq.n	800ad42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad32:	4b3d      	ldr	r3, [pc, #244]	; (800ae28 <xQueueReceive+0x1bc>)
 800ad34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad42:	f001 fd87 	bl	800c854 <vPortExitCritical>
				return pdPASS;
 800ad46:	2301      	movs	r3, #1
 800ad48:	e069      	b.n	800ae1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d103      	bne.n	800ad58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad50:	f001 fd80 	bl	800c854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad54:	2300      	movs	r3, #0
 800ad56:	e062      	b.n	800ae1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d106      	bne.n	800ad6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad5e:	f107 0310 	add.w	r3, r7, #16
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 fe94 	bl	800ba90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad6c:	f001 fd72 	bl	800c854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad70:	f000 fc06 	bl	800b580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad74:	f001 fd3e 	bl	800c7f4 <vPortEnterCritical>
 800ad78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad7e:	b25b      	sxtb	r3, r3
 800ad80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad84:	d103      	bne.n	800ad8e <xQueueReceive+0x122>
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad94:	b25b      	sxtb	r3, r3
 800ad96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9a:	d103      	bne.n	800ada4 <xQueueReceive+0x138>
 800ad9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ada4:	f001 fd56 	bl	800c854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ada8:	1d3a      	adds	r2, r7, #4
 800adaa:	f107 0310 	add.w	r3, r7, #16
 800adae:	4611      	mov	r1, r2
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 fe83 	bl	800babc <xTaskCheckForTimeOut>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d123      	bne.n	800ae04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adbe:	f000 f917 	bl	800aff0 <prvIsQueueEmpty>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d017      	beq.n	800adf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	3324      	adds	r3, #36	; 0x24
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	4611      	mov	r1, r2
 800add0:	4618      	mov	r0, r3
 800add2:	f000 fda9 	bl	800b928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800add6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800add8:	f000 f8b8 	bl	800af4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800addc:	f000 fbde 	bl	800b59c <xTaskResumeAll>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d189      	bne.n	800acfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ade6:	4b10      	ldr	r3, [pc, #64]	; (800ae28 <xQueueReceive+0x1bc>)
 800ade8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	e780      	b.n	800acfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800adf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adfa:	f000 f8a7 	bl	800af4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adfe:	f000 fbcd 	bl	800b59c <xTaskResumeAll>
 800ae02:	e77a      	b.n	800acfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae06:	f000 f8a1 	bl	800af4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae0a:	f000 fbc7 	bl	800b59c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae10:	f000 f8ee 	bl	800aff0 <prvIsQueueEmpty>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f43f af6f 	beq.w	800acfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3730      	adds	r7, #48	; 0x30
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	e000ed04 	.word	0xe000ed04

0800ae2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10d      	bne.n	800ae66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d14d      	bne.n	800aeee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 ff92 	bl	800bd80 <xTaskPriorityDisinherit>
 800ae5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	609a      	str	r2, [r3, #8]
 800ae64:	e043      	b.n	800aeee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d119      	bne.n	800aea0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6858      	ldr	r0, [r3, #4]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae74:	461a      	mov	r2, r3
 800ae76:	68b9      	ldr	r1, [r7, #8]
 800ae78:	f008 fd76 	bl	8013968 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	685a      	ldr	r2, [r3, #4]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae84:	441a      	add	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	685a      	ldr	r2, [r3, #4]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d32b      	bcc.n	800aeee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	605a      	str	r2, [r3, #4]
 800ae9e:	e026      	b.n	800aeee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	68d8      	ldr	r0, [r3, #12]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea8:	461a      	mov	r2, r3
 800aeaa:	68b9      	ldr	r1, [r7, #8]
 800aeac:	f008 fd5c 	bl	8013968 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	68da      	ldr	r2, [r3, #12]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb8:	425b      	negs	r3, r3
 800aeba:	441a      	add	r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	68da      	ldr	r2, [r3, #12]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d207      	bcs.n	800aedc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed4:	425b      	negs	r3, r3
 800aed6:	441a      	add	r2, r3
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d105      	bne.n	800aeee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d002      	beq.n	800aeee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	1c5a      	adds	r2, r3, #1
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aef6:	697b      	ldr	r3, [r7, #20]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d018      	beq.n	800af44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	68da      	ldr	r2, [r3, #12]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1a:	441a      	add	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d303      	bcc.n	800af34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	68d9      	ldr	r1, [r3, #12]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3c:	461a      	mov	r2, r3
 800af3e:	6838      	ldr	r0, [r7, #0]
 800af40:	f008 fd12 	bl	8013968 <memcpy>
	}
}
 800af44:	bf00      	nop
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af54:	f001 fc4e 	bl	800c7f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af60:	e011      	b.n	800af86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af66:	2b00      	cmp	r3, #0
 800af68:	d012      	beq.n	800af90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3324      	adds	r3, #36	; 0x24
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 fd2a 	bl	800b9c8 <xTaskRemoveFromEventList>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af7a:	f000 fe01 	bl	800bb80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	3b01      	subs	r3, #1
 800af82:	b2db      	uxtb	r3, r3
 800af84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	dce9      	bgt.n	800af62 <prvUnlockQueue+0x16>
 800af8e:	e000      	b.n	800af92 <prvUnlockQueue+0x46>
					break;
 800af90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	22ff      	movs	r2, #255	; 0xff
 800af96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af9a:	f001 fc5b 	bl	800c854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af9e:	f001 fc29 	bl	800c7f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afaa:	e011      	b.n	800afd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d012      	beq.n	800afda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3310      	adds	r3, #16
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 fd05 	bl	800b9c8 <xTaskRemoveFromEventList>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afc4:	f000 fddc 	bl	800bb80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
 800afca:	3b01      	subs	r3, #1
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	dce9      	bgt.n	800afac <prvUnlockQueue+0x60>
 800afd8:	e000      	b.n	800afdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	22ff      	movs	r2, #255	; 0xff
 800afe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800afe4:	f001 fc36 	bl	800c854 <vPortExitCritical>
}
 800afe8:	bf00      	nop
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aff8:	f001 fbfc 	bl	800c7f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b000:	2b00      	cmp	r3, #0
 800b002:	d102      	bne.n	800b00a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b004:	2301      	movs	r3, #1
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	e001      	b.n	800b00e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b00a:	2300      	movs	r3, #0
 800b00c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b00e:	f001 fc21 	bl	800c854 <vPortExitCritical>

	return xReturn;
 800b012:	68fb      	ldr	r3, [r7, #12]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b024:	f001 fbe6 	bl	800c7f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b030:	429a      	cmp	r2, r3
 800b032:	d102      	bne.n	800b03a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b034:	2301      	movs	r3, #1
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	e001      	b.n	800b03e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b03e:	f001 fc09 	bl	800c854 <vPortExitCritical>

	return xReturn;
 800b042:	68fb      	ldr	r3, [r7, #12]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b056:	2300      	movs	r3, #0
 800b058:	60fb      	str	r3, [r7, #12]
 800b05a:	e014      	b.n	800b086 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b05c:	4a0f      	ldr	r2, [pc, #60]	; (800b09c <vQueueAddToRegistry+0x50>)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10b      	bne.n	800b080 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b068:	490c      	ldr	r1, [pc, #48]	; (800b09c <vQueueAddToRegistry+0x50>)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	683a      	ldr	r2, [r7, #0]
 800b06e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b072:	4a0a      	ldr	r2, [pc, #40]	; (800b09c <vQueueAddToRegistry+0x50>)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	4413      	add	r3, r2
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b07e:	e006      	b.n	800b08e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3301      	adds	r3, #1
 800b084:	60fb      	str	r3, [r7, #12]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2b07      	cmp	r3, #7
 800b08a:	d9e7      	bls.n	800b05c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b08c:	bf00      	nop
 800b08e:	bf00      	nop
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	2000544c 	.word	0x2000544c

0800b0a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0b0:	f001 fba0 	bl	800c7f4 <vPortEnterCritical>
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0ba:	b25b      	sxtb	r3, r3
 800b0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c0:	d103      	bne.n	800b0ca <vQueueWaitForMessageRestricted+0x2a>
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0d0:	b25b      	sxtb	r3, r3
 800b0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d6:	d103      	bne.n	800b0e0 <vQueueWaitForMessageRestricted+0x40>
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0e0:	f001 fbb8 	bl	800c854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d106      	bne.n	800b0fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	3324      	adds	r3, #36	; 0x24
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	68b9      	ldr	r1, [r7, #8]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f000 fc3b 	bl	800b970 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b0fa:	6978      	ldr	r0, [r7, #20]
 800b0fc:	f7ff ff26 	bl	800af4c <prvUnlockQueue>
	}
 800b100:	bf00      	nop
 800b102:	3718      	adds	r7, #24
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08e      	sub	sp, #56	; 0x38
 800b10c:	af04      	add	r7, sp, #16
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
 800b114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10a      	bne.n	800b132 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	623b      	str	r3, [r7, #32]
}
 800b12e:	bf00      	nop
 800b130:	e7fe      	b.n	800b130 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10a      	bne.n	800b14e <xTaskCreateStatic+0x46>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	61fb      	str	r3, [r7, #28]
}
 800b14a:	bf00      	nop
 800b14c:	e7fe      	b.n	800b14c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b14e:	235c      	movs	r3, #92	; 0x5c
 800b150:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	2b5c      	cmp	r3, #92	; 0x5c
 800b156:	d00a      	beq.n	800b16e <xTaskCreateStatic+0x66>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	61bb      	str	r3, [r7, #24]
}
 800b16a:	bf00      	nop
 800b16c:	e7fe      	b.n	800b16c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b16e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b172:	2b00      	cmp	r3, #0
 800b174:	d01e      	beq.n	800b1b4 <xTaskCreateStatic+0xac>
 800b176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d01b      	beq.n	800b1b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b184:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	2202      	movs	r2, #2
 800b18a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b18e:	2300      	movs	r3, #0
 800b190:	9303      	str	r3, [sp, #12]
 800b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b194:	9302      	str	r3, [sp, #8]
 800b196:	f107 0314 	add.w	r3, r7, #20
 800b19a:	9301      	str	r3, [sp, #4]
 800b19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	68b9      	ldr	r1, [r7, #8]
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f000 f850 	bl	800b24c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1ae:	f000 f8dd 	bl	800b36c <prvAddNewTaskToReadyList>
 800b1b2:	e001      	b.n	800b1b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1b8:	697b      	ldr	r3, [r7, #20]
	}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3728      	adds	r7, #40	; 0x28
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b08c      	sub	sp, #48	; 0x30
 800b1c6:	af04      	add	r7, sp, #16
 800b1c8:	60f8      	str	r0, [r7, #12]
 800b1ca:	60b9      	str	r1, [r7, #8]
 800b1cc:	603b      	str	r3, [r7, #0]
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1d2:	88fb      	ldrh	r3, [r7, #6]
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f001 fc2e 	bl	800ca38 <pvPortMalloc>
 800b1dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00e      	beq.n	800b202 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1e4:	205c      	movs	r0, #92	; 0x5c
 800b1e6:	f001 fc27 	bl	800ca38 <pvPortMalloc>
 800b1ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d003      	beq.n	800b1fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	631a      	str	r2, [r3, #48]	; 0x30
 800b1f8:	e005      	b.n	800b206 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b1fa:	6978      	ldr	r0, [r7, #20]
 800b1fc:	f001 fce8 	bl	800cbd0 <vPortFree>
 800b200:	e001      	b.n	800b206 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d017      	beq.n	800b23c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	2200      	movs	r2, #0
 800b210:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b214:	88fa      	ldrh	r2, [r7, #6]
 800b216:	2300      	movs	r3, #0
 800b218:	9303      	str	r3, [sp, #12]
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	9302      	str	r3, [sp, #8]
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	9301      	str	r3, [sp, #4]
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	68b9      	ldr	r1, [r7, #8]
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f000 f80e 	bl	800b24c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b230:	69f8      	ldr	r0, [r7, #28]
 800b232:	f000 f89b 	bl	800b36c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b236:	2301      	movs	r3, #1
 800b238:	61bb      	str	r3, [r7, #24]
 800b23a:	e002      	b.n	800b242 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b23c:	f04f 33ff 	mov.w	r3, #4294967295
 800b240:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b242:	69bb      	ldr	r3, [r7, #24]
	}
 800b244:	4618      	mov	r0, r3
 800b246:	3720      	adds	r7, #32
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b088      	sub	sp, #32
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
 800b258:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	461a      	mov	r2, r3
 800b264:	21a5      	movs	r1, #165	; 0xa5
 800b266:	f008 fb8d 	bl	8013984 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b274:	3b01      	subs	r3, #1
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	f023 0307 	bic.w	r3, r3, #7
 800b282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	f003 0307 	and.w	r3, r3, #7
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	617b      	str	r3, [r7, #20]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d01f      	beq.n	800b2ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61fb      	str	r3, [r7, #28]
 800b2ae:	e012      	b.n	800b2d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	7819      	ldrb	r1, [r3, #0]
 800b2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	4413      	add	r3, r2
 800b2be:	3334      	adds	r3, #52	; 0x34
 800b2c0:	460a      	mov	r2, r1
 800b2c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d006      	beq.n	800b2de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	2b0f      	cmp	r3, #15
 800b2da:	d9e9      	bls.n	800b2b0 <prvInitialiseNewTask+0x64>
 800b2dc:	e000      	b.n	800b2e0 <prvInitialiseNewTask+0x94>
			{
				break;
 800b2de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2e8:	e003      	b.n	800b2f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f4:	2b37      	cmp	r3, #55	; 0x37
 800b2f6:	d901      	bls.n	800b2fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b2f8:	2337      	movs	r3, #55	; 0x37
 800b2fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b300:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b306:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	2200      	movs	r2, #0
 800b30c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b310:	3304      	adds	r3, #4
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff f978 	bl	800a608 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31a:	3318      	adds	r3, #24
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff f973 	bl	800a608 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b326:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b336:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33a:	2200      	movs	r2, #0
 800b33c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	68f9      	ldr	r1, [r7, #12]
 800b34a:	69b8      	ldr	r0, [r7, #24]
 800b34c:	f001 f928 	bl	800c5a0 <pxPortInitialiseStack>
 800b350:	4602      	mov	r2, r0
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b362:	bf00      	nop
 800b364:	3720      	adds	r7, #32
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
	...

0800b36c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b374:	f001 fa3e 	bl	800c7f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b378:	4b2d      	ldr	r3, [pc, #180]	; (800b430 <prvAddNewTaskToReadyList+0xc4>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3301      	adds	r3, #1
 800b37e:	4a2c      	ldr	r2, [pc, #176]	; (800b430 <prvAddNewTaskToReadyList+0xc4>)
 800b380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b382:	4b2c      	ldr	r3, [pc, #176]	; (800b434 <prvAddNewTaskToReadyList+0xc8>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d109      	bne.n	800b39e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b38a:	4a2a      	ldr	r2, [pc, #168]	; (800b434 <prvAddNewTaskToReadyList+0xc8>)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b390:	4b27      	ldr	r3, [pc, #156]	; (800b430 <prvAddNewTaskToReadyList+0xc4>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d110      	bne.n	800b3ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b398:	f000 fc16 	bl	800bbc8 <prvInitialiseTaskLists>
 800b39c:	e00d      	b.n	800b3ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b39e:	4b26      	ldr	r3, [pc, #152]	; (800b438 <prvAddNewTaskToReadyList+0xcc>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d109      	bne.n	800b3ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3a6:	4b23      	ldr	r3, [pc, #140]	; (800b434 <prvAddNewTaskToReadyList+0xc8>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d802      	bhi.n	800b3ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3b4:	4a1f      	ldr	r2, [pc, #124]	; (800b434 <prvAddNewTaskToReadyList+0xc8>)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3ba:	4b20      	ldr	r3, [pc, #128]	; (800b43c <prvAddNewTaskToReadyList+0xd0>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	4a1e      	ldr	r2, [pc, #120]	; (800b43c <prvAddNewTaskToReadyList+0xd0>)
 800b3c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3c4:	4b1d      	ldr	r3, [pc, #116]	; (800b43c <prvAddNewTaskToReadyList+0xd0>)
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d0:	4b1b      	ldr	r3, [pc, #108]	; (800b440 <prvAddNewTaskToReadyList+0xd4>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d903      	bls.n	800b3e0 <prvAddNewTaskToReadyList+0x74>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3dc:	4a18      	ldr	r2, [pc, #96]	; (800b440 <prvAddNewTaskToReadyList+0xd4>)
 800b3de:	6013      	str	r3, [r2, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	4a15      	ldr	r2, [pc, #84]	; (800b444 <prvAddNewTaskToReadyList+0xd8>)
 800b3ee:	441a      	add	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	f7ff f913 	bl	800a622 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3fc:	f001 fa2a 	bl	800c854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b400:	4b0d      	ldr	r3, [pc, #52]	; (800b438 <prvAddNewTaskToReadyList+0xcc>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00e      	beq.n	800b426 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b408:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <prvAddNewTaskToReadyList+0xc8>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b412:	429a      	cmp	r2, r3
 800b414:	d207      	bcs.n	800b426 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <prvAddNewTaskToReadyList+0xdc>)
 800b418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b426:	bf00      	nop
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	20001660 	.word	0x20001660
 800b434:	2000118c 	.word	0x2000118c
 800b438:	2000166c 	.word	0x2000166c
 800b43c:	2000167c 	.word	0x2000167c
 800b440:	20001668 	.word	0x20001668
 800b444:	20001190 	.word	0x20001190
 800b448:	e000ed04 	.word	0xe000ed04

0800b44c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b454:	2300      	movs	r3, #0
 800b456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d017      	beq.n	800b48e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b45e:	4b13      	ldr	r3, [pc, #76]	; (800b4ac <vTaskDelay+0x60>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00a      	beq.n	800b47c <vTaskDelay+0x30>
	__asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	60bb      	str	r3, [r7, #8]
}
 800b478:	bf00      	nop
 800b47a:	e7fe      	b.n	800b47a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b47c:	f000 f880 	bl	800b580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b480:	2100      	movs	r1, #0
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fcea 	bl	800be5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b488:	f000 f888 	bl	800b59c <xTaskResumeAll>
 800b48c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d107      	bne.n	800b4a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b494:	4b06      	ldr	r3, [pc, #24]	; (800b4b0 <vTaskDelay+0x64>)
 800b496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b49a:	601a      	str	r2, [r3, #0]
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4a4:	bf00      	nop
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	20001688 	.word	0x20001688
 800b4b0:	e000ed04 	.word	0xe000ed04

0800b4b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b08a      	sub	sp, #40	; 0x28
 800b4b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4c2:	463a      	mov	r2, r7
 800b4c4:	1d39      	adds	r1, r7, #4
 800b4c6:	f107 0308 	add.w	r3, r7, #8
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7ff f848 	bl	800a560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	9202      	str	r2, [sp, #8]
 800b4d8:	9301      	str	r3, [sp, #4]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	2300      	movs	r3, #0
 800b4e0:	460a      	mov	r2, r1
 800b4e2:	4921      	ldr	r1, [pc, #132]	; (800b568 <vTaskStartScheduler+0xb4>)
 800b4e4:	4821      	ldr	r0, [pc, #132]	; (800b56c <vTaskStartScheduler+0xb8>)
 800b4e6:	f7ff fe0f 	bl	800b108 <xTaskCreateStatic>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	4a20      	ldr	r2, [pc, #128]	; (800b570 <vTaskStartScheduler+0xbc>)
 800b4ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4f0:	4b1f      	ldr	r3, [pc, #124]	; (800b570 <vTaskStartScheduler+0xbc>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	617b      	str	r3, [r7, #20]
 800b4fc:	e001      	b.n	800b502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d102      	bne.n	800b50e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b508:	f000 fcfc 	bl	800bf04 <xTimerCreateTimerTask>
 800b50c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d116      	bne.n	800b542 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	613b      	str	r3, [r7, #16]
}
 800b526:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b528:	4b12      	ldr	r3, [pc, #72]	; (800b574 <vTaskStartScheduler+0xc0>)
 800b52a:	f04f 32ff 	mov.w	r2, #4294967295
 800b52e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b530:	4b11      	ldr	r3, [pc, #68]	; (800b578 <vTaskStartScheduler+0xc4>)
 800b532:	2201      	movs	r2, #1
 800b534:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b536:	4b11      	ldr	r3, [pc, #68]	; (800b57c <vTaskStartScheduler+0xc8>)
 800b538:	2200      	movs	r2, #0
 800b53a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b53c:	f001 f8b8 	bl	800c6b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b540:	e00e      	b.n	800b560 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b548:	d10a      	bne.n	800b560 <vTaskStartScheduler+0xac>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	60fb      	str	r3, [r7, #12]
}
 800b55c:	bf00      	nop
 800b55e:	e7fe      	b.n	800b55e <vTaskStartScheduler+0xaa>
}
 800b560:	bf00      	nop
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	08013c18 	.word	0x08013c18
 800b56c:	0800bb99 	.word	0x0800bb99
 800b570:	20001684 	.word	0x20001684
 800b574:	20001680 	.word	0x20001680
 800b578:	2000166c 	.word	0x2000166c
 800b57c:	20001664 	.word	0x20001664

0800b580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b580:	b480      	push	{r7}
 800b582:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b584:	4b04      	ldr	r3, [pc, #16]	; (800b598 <vTaskSuspendAll+0x18>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3301      	adds	r3, #1
 800b58a:	4a03      	ldr	r2, [pc, #12]	; (800b598 <vTaskSuspendAll+0x18>)
 800b58c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b58e:	bf00      	nop
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	20001688 	.word	0x20001688

0800b59c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5aa:	4b42      	ldr	r3, [pc, #264]	; (800b6b4 <xTaskResumeAll+0x118>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d10a      	bne.n	800b5c8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	603b      	str	r3, [r7, #0]
}
 800b5c4:	bf00      	nop
 800b5c6:	e7fe      	b.n	800b5c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5c8:	f001 f914 	bl	800c7f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5cc:	4b39      	ldr	r3, [pc, #228]	; (800b6b4 <xTaskResumeAll+0x118>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	4a38      	ldr	r2, [pc, #224]	; (800b6b4 <xTaskResumeAll+0x118>)
 800b5d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5d6:	4b37      	ldr	r3, [pc, #220]	; (800b6b4 <xTaskResumeAll+0x118>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d162      	bne.n	800b6a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5de:	4b36      	ldr	r3, [pc, #216]	; (800b6b8 <xTaskResumeAll+0x11c>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d05e      	beq.n	800b6a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5e6:	e02f      	b.n	800b648 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e8:	4b34      	ldr	r3, [pc, #208]	; (800b6bc <xTaskResumeAll+0x120>)
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	3318      	adds	r3, #24
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7ff f871 	bl	800a6dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff f86c 	bl	800a6dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b608:	4b2d      	ldr	r3, [pc, #180]	; (800b6c0 <xTaskResumeAll+0x124>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d903      	bls.n	800b618 <xTaskResumeAll+0x7c>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b614:	4a2a      	ldr	r2, [pc, #168]	; (800b6c0 <xTaskResumeAll+0x124>)
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61c:	4613      	mov	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4a27      	ldr	r2, [pc, #156]	; (800b6c4 <xTaskResumeAll+0x128>)
 800b626:	441a      	add	r2, r3
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	3304      	adds	r3, #4
 800b62c:	4619      	mov	r1, r3
 800b62e:	4610      	mov	r0, r2
 800b630:	f7fe fff7 	bl	800a622 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b638:	4b23      	ldr	r3, [pc, #140]	; (800b6c8 <xTaskResumeAll+0x12c>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63e:	429a      	cmp	r2, r3
 800b640:	d302      	bcc.n	800b648 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b642:	4b22      	ldr	r3, [pc, #136]	; (800b6cc <xTaskResumeAll+0x130>)
 800b644:	2201      	movs	r2, #1
 800b646:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b648:	4b1c      	ldr	r3, [pc, #112]	; (800b6bc <xTaskResumeAll+0x120>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1cb      	bne.n	800b5e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b656:	f000 fb55 	bl	800bd04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b65a:	4b1d      	ldr	r3, [pc, #116]	; (800b6d0 <xTaskResumeAll+0x134>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d010      	beq.n	800b688 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b666:	f000 f847 	bl	800b6f8 <xTaskIncrementTick>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b670:	4b16      	ldr	r3, [pc, #88]	; (800b6cc <xTaskResumeAll+0x130>)
 800b672:	2201      	movs	r2, #1
 800b674:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	3b01      	subs	r3, #1
 800b67a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1f1      	bne.n	800b666 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b682:	4b13      	ldr	r3, [pc, #76]	; (800b6d0 <xTaskResumeAll+0x134>)
 800b684:	2200      	movs	r2, #0
 800b686:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b688:	4b10      	ldr	r3, [pc, #64]	; (800b6cc <xTaskResumeAll+0x130>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d009      	beq.n	800b6a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b690:	2301      	movs	r3, #1
 800b692:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b694:	4b0f      	ldr	r3, [pc, #60]	; (800b6d4 <xTaskResumeAll+0x138>)
 800b696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b69a:	601a      	str	r2, [r3, #0]
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6a4:	f001 f8d6 	bl	800c854 <vPortExitCritical>

	return xAlreadyYielded;
 800b6a8:	68bb      	ldr	r3, [r7, #8]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20001688 	.word	0x20001688
 800b6b8:	20001660 	.word	0x20001660
 800b6bc:	20001620 	.word	0x20001620
 800b6c0:	20001668 	.word	0x20001668
 800b6c4:	20001190 	.word	0x20001190
 800b6c8:	2000118c 	.word	0x2000118c
 800b6cc:	20001674 	.word	0x20001674
 800b6d0:	20001670 	.word	0x20001670
 800b6d4:	e000ed04 	.word	0xe000ed04

0800b6d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6de:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <xTaskGetTickCount+0x1c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6e4:	687b      	ldr	r3, [r7, #4]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	20001664 	.word	0x20001664

0800b6f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6fe:	2300      	movs	r3, #0
 800b700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b702:	4b4f      	ldr	r3, [pc, #316]	; (800b840 <xTaskIncrementTick+0x148>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	f040 808f 	bne.w	800b82a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b70c:	4b4d      	ldr	r3, [pc, #308]	; (800b844 <xTaskIncrementTick+0x14c>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3301      	adds	r3, #1
 800b712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b714:	4a4b      	ldr	r2, [pc, #300]	; (800b844 <xTaskIncrementTick+0x14c>)
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d120      	bne.n	800b762 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b720:	4b49      	ldr	r3, [pc, #292]	; (800b848 <xTaskIncrementTick+0x150>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00a      	beq.n	800b740 <xTaskIncrementTick+0x48>
	__asm volatile
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	603b      	str	r3, [r7, #0]
}
 800b73c:	bf00      	nop
 800b73e:	e7fe      	b.n	800b73e <xTaskIncrementTick+0x46>
 800b740:	4b41      	ldr	r3, [pc, #260]	; (800b848 <xTaskIncrementTick+0x150>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	4b41      	ldr	r3, [pc, #260]	; (800b84c <xTaskIncrementTick+0x154>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a3f      	ldr	r2, [pc, #252]	; (800b848 <xTaskIncrementTick+0x150>)
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	4a3f      	ldr	r2, [pc, #252]	; (800b84c <xTaskIncrementTick+0x154>)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6013      	str	r3, [r2, #0]
 800b754:	4b3e      	ldr	r3, [pc, #248]	; (800b850 <xTaskIncrementTick+0x158>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3301      	adds	r3, #1
 800b75a:	4a3d      	ldr	r2, [pc, #244]	; (800b850 <xTaskIncrementTick+0x158>)
 800b75c:	6013      	str	r3, [r2, #0]
 800b75e:	f000 fad1 	bl	800bd04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b762:	4b3c      	ldr	r3, [pc, #240]	; (800b854 <xTaskIncrementTick+0x15c>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d349      	bcc.n	800b800 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b76c:	4b36      	ldr	r3, [pc, #216]	; (800b848 <xTaskIncrementTick+0x150>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d104      	bne.n	800b780 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b776:	4b37      	ldr	r3, [pc, #220]	; (800b854 <xTaskIncrementTick+0x15c>)
 800b778:	f04f 32ff 	mov.w	r2, #4294967295
 800b77c:	601a      	str	r2, [r3, #0]
					break;
 800b77e:	e03f      	b.n	800b800 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b780:	4b31      	ldr	r3, [pc, #196]	; (800b848 <xTaskIncrementTick+0x150>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b790:	693a      	ldr	r2, [r7, #16]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	429a      	cmp	r2, r3
 800b796:	d203      	bcs.n	800b7a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b798:	4a2e      	ldr	r2, [pc, #184]	; (800b854 <xTaskIncrementTick+0x15c>)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b79e:	e02f      	b.n	800b800 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fe ff99 	bl	800a6dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d004      	beq.n	800b7bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	3318      	adds	r3, #24
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe ff90 	bl	800a6dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c0:	4b25      	ldr	r3, [pc, #148]	; (800b858 <xTaskIncrementTick+0x160>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d903      	bls.n	800b7d0 <xTaskIncrementTick+0xd8>
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	4a22      	ldr	r2, [pc, #136]	; (800b858 <xTaskIncrementTick+0x160>)
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4413      	add	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4a1f      	ldr	r2, [pc, #124]	; (800b85c <xTaskIncrementTick+0x164>)
 800b7de:	441a      	add	r2, r3
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	f7fe ff1b 	bl	800a622 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f0:	4b1b      	ldr	r3, [pc, #108]	; (800b860 <xTaskIncrementTick+0x168>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d3b8      	bcc.n	800b76c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7fe:	e7b5      	b.n	800b76c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b800:	4b17      	ldr	r3, [pc, #92]	; (800b860 <xTaskIncrementTick+0x168>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b806:	4915      	ldr	r1, [pc, #84]	; (800b85c <xTaskIncrementTick+0x164>)
 800b808:	4613      	mov	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	440b      	add	r3, r1
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d901      	bls.n	800b81c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b818:	2301      	movs	r3, #1
 800b81a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b81c:	4b11      	ldr	r3, [pc, #68]	; (800b864 <xTaskIncrementTick+0x16c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d007      	beq.n	800b834 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b824:	2301      	movs	r3, #1
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	e004      	b.n	800b834 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b82a:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <xTaskIncrementTick+0x170>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3301      	adds	r3, #1
 800b830:	4a0d      	ldr	r2, [pc, #52]	; (800b868 <xTaskIncrementTick+0x170>)
 800b832:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b834:	697b      	ldr	r3, [r7, #20]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3718      	adds	r7, #24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20001688 	.word	0x20001688
 800b844:	20001664 	.word	0x20001664
 800b848:	20001618 	.word	0x20001618
 800b84c:	2000161c 	.word	0x2000161c
 800b850:	20001678 	.word	0x20001678
 800b854:	20001680 	.word	0x20001680
 800b858:	20001668 	.word	0x20001668
 800b85c:	20001190 	.word	0x20001190
 800b860:	2000118c 	.word	0x2000118c
 800b864:	20001674 	.word	0x20001674
 800b868:	20001670 	.word	0x20001670

0800b86c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b872:	4b28      	ldr	r3, [pc, #160]	; (800b914 <vTaskSwitchContext+0xa8>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b87a:	4b27      	ldr	r3, [pc, #156]	; (800b918 <vTaskSwitchContext+0xac>)
 800b87c:	2201      	movs	r2, #1
 800b87e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b880:	e041      	b.n	800b906 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b882:	4b25      	ldr	r3, [pc, #148]	; (800b918 <vTaskSwitchContext+0xac>)
 800b884:	2200      	movs	r2, #0
 800b886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b888:	4b24      	ldr	r3, [pc, #144]	; (800b91c <vTaskSwitchContext+0xb0>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	60fb      	str	r3, [r7, #12]
 800b88e:	e010      	b.n	800b8b2 <vTaskSwitchContext+0x46>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10a      	bne.n	800b8ac <vTaskSwitchContext+0x40>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	607b      	str	r3, [r7, #4]
}
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <vTaskSwitchContext+0x3e>
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	60fb      	str	r3, [r7, #12]
 800b8b2:	491b      	ldr	r1, [pc, #108]	; (800b920 <vTaskSwitchContext+0xb4>)
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4413      	add	r3, r2
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	440b      	add	r3, r1
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0e4      	beq.n	800b890 <vTaskSwitchContext+0x24>
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4413      	add	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4a13      	ldr	r2, [pc, #76]	; (800b920 <vTaskSwitchContext+0xb4>)
 800b8d2:	4413      	add	r3, r2
 800b8d4:	60bb      	str	r3, [r7, #8]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	605a      	str	r2, [r3, #4]
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	685a      	ldr	r2, [r3, #4]
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d104      	bne.n	800b8f6 <vTaskSwitchContext+0x8a>
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	605a      	str	r2, [r3, #4]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	4a09      	ldr	r2, [pc, #36]	; (800b924 <vTaskSwitchContext+0xb8>)
 800b8fe:	6013      	str	r3, [r2, #0]
 800b900:	4a06      	ldr	r2, [pc, #24]	; (800b91c <vTaskSwitchContext+0xb0>)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6013      	str	r3, [r2, #0]
}
 800b906:	bf00      	nop
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	20001688 	.word	0x20001688
 800b918:	20001674 	.word	0x20001674
 800b91c:	20001668 	.word	0x20001668
 800b920:	20001190 	.word	0x20001190
 800b924:	2000118c 	.word	0x2000118c

0800b928 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10a      	bne.n	800b94e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	60fb      	str	r3, [r7, #12]
}
 800b94a:	bf00      	nop
 800b94c:	e7fe      	b.n	800b94c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b94e:	4b07      	ldr	r3, [pc, #28]	; (800b96c <vTaskPlaceOnEventList+0x44>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	3318      	adds	r3, #24
 800b954:	4619      	mov	r1, r3
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7fe fe87 	bl	800a66a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b95c:	2101      	movs	r1, #1
 800b95e:	6838      	ldr	r0, [r7, #0]
 800b960:	f000 fa7c 	bl	800be5c <prvAddCurrentTaskToDelayedList>
}
 800b964:	bf00      	nop
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	2000118c 	.word	0x2000118c

0800b970 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10a      	bne.n	800b998 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	617b      	str	r3, [r7, #20]
}
 800b994:	bf00      	nop
 800b996:	e7fe      	b.n	800b996 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b998:	4b0a      	ldr	r3, [pc, #40]	; (800b9c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3318      	adds	r3, #24
 800b99e:	4619      	mov	r1, r3
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f7fe fe3e 	bl	800a622 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9b2:	6879      	ldr	r1, [r7, #4]
 800b9b4:	68b8      	ldr	r0, [r7, #8]
 800b9b6:	f000 fa51 	bl	800be5c <prvAddCurrentTaskToDelayedList>
	}
 800b9ba:	bf00      	nop
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	2000118c 	.word	0x2000118c

0800b9c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10a      	bne.n	800b9f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	60fb      	str	r3, [r7, #12]
}
 800b9f0:	bf00      	nop
 800b9f2:	e7fe      	b.n	800b9f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	3318      	adds	r3, #24
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fe fe6f 	bl	800a6dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9fe:	4b1e      	ldr	r3, [pc, #120]	; (800ba78 <xTaskRemoveFromEventList+0xb0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d11d      	bne.n	800ba42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	3304      	adds	r3, #4
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe fe66 	bl	800a6dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba14:	4b19      	ldr	r3, [pc, #100]	; (800ba7c <xTaskRemoveFromEventList+0xb4>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d903      	bls.n	800ba24 <xTaskRemoveFromEventList+0x5c>
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba20:	4a16      	ldr	r2, [pc, #88]	; (800ba7c <xTaskRemoveFromEventList+0xb4>)
 800ba22:	6013      	str	r3, [r2, #0]
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba28:	4613      	mov	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4a13      	ldr	r2, [pc, #76]	; (800ba80 <xTaskRemoveFromEventList+0xb8>)
 800ba32:	441a      	add	r2, r3
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	3304      	adds	r3, #4
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f7fe fdf1 	bl	800a622 <vListInsertEnd>
 800ba40:	e005      	b.n	800ba4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	3318      	adds	r3, #24
 800ba46:	4619      	mov	r1, r3
 800ba48:	480e      	ldr	r0, [pc, #56]	; (800ba84 <xTaskRemoveFromEventList+0xbc>)
 800ba4a:	f7fe fdea 	bl	800a622 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba52:	4b0d      	ldr	r3, [pc, #52]	; (800ba88 <xTaskRemoveFromEventList+0xc0>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d905      	bls.n	800ba68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba60:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <xTaskRemoveFromEventList+0xc4>)
 800ba62:	2201      	movs	r2, #1
 800ba64:	601a      	str	r2, [r3, #0]
 800ba66:	e001      	b.n	800ba6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba6c:	697b      	ldr	r3, [r7, #20]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20001688 	.word	0x20001688
 800ba7c:	20001668 	.word	0x20001668
 800ba80:	20001190 	.word	0x20001190
 800ba84:	20001620 	.word	0x20001620
 800ba88:	2000118c 	.word	0x2000118c
 800ba8c:	20001674 	.word	0x20001674

0800ba90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba98:	4b06      	ldr	r3, [pc, #24]	; (800bab4 <vTaskInternalSetTimeOutState+0x24>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800baa0:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <vTaskInternalSetTimeOutState+0x28>)
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	605a      	str	r2, [r3, #4]
}
 800baa8:	bf00      	nop
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	20001678 	.word	0x20001678
 800bab8:	20001664 	.word	0x20001664

0800babc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b088      	sub	sp, #32
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10a      	bne.n	800bae2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad0:	f383 8811 	msr	BASEPRI, r3
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	613b      	str	r3, [r7, #16]
}
 800bade:	bf00      	nop
 800bae0:	e7fe      	b.n	800bae0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10a      	bne.n	800bafe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	60fb      	str	r3, [r7, #12]
}
 800bafa:	bf00      	nop
 800bafc:	e7fe      	b.n	800bafc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bafe:	f000 fe79 	bl	800c7f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb02:	4b1d      	ldr	r3, [pc, #116]	; (800bb78 <xTaskCheckForTimeOut+0xbc>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	69ba      	ldr	r2, [r7, #24]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1a:	d102      	bne.n	800bb22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	61fb      	str	r3, [r7, #28]
 800bb20:	e023      	b.n	800bb6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4b15      	ldr	r3, [pc, #84]	; (800bb7c <xTaskCheckForTimeOut+0xc0>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d007      	beq.n	800bb3e <xTaskCheckForTimeOut+0x82>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	69ba      	ldr	r2, [r7, #24]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d302      	bcc.n	800bb3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	61fb      	str	r3, [r7, #28]
 800bb3c:	e015      	b.n	800bb6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d20b      	bcs.n	800bb60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	1ad2      	subs	r2, r2, r3
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7ff ff9b 	bl	800ba90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	61fb      	str	r3, [r7, #28]
 800bb5e:	e004      	b.n	800bb6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb66:	2301      	movs	r3, #1
 800bb68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb6a:	f000 fe73 	bl	800c854 <vPortExitCritical>

	return xReturn;
 800bb6e:	69fb      	ldr	r3, [r7, #28]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3720      	adds	r7, #32
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	20001664 	.word	0x20001664
 800bb7c:	20001678 	.word	0x20001678

0800bb80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb80:	b480      	push	{r7}
 800bb82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb84:	4b03      	ldr	r3, [pc, #12]	; (800bb94 <vTaskMissedYield+0x14>)
 800bb86:	2201      	movs	r2, #1
 800bb88:	601a      	str	r2, [r3, #0]
}
 800bb8a:	bf00      	nop
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	20001674 	.word	0x20001674

0800bb98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bba0:	f000 f852 	bl	800bc48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bba4:	4b06      	ldr	r3, [pc, #24]	; (800bbc0 <prvIdleTask+0x28>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d9f9      	bls.n	800bba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bbac:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <prvIdleTask+0x2c>)
 800bbae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbb2:	601a      	str	r2, [r3, #0]
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbbc:	e7f0      	b.n	800bba0 <prvIdleTask+0x8>
 800bbbe:	bf00      	nop
 800bbc0:	20001190 	.word	0x20001190
 800bbc4:	e000ed04 	.word	0xe000ed04

0800bbc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbce:	2300      	movs	r3, #0
 800bbd0:	607b      	str	r3, [r7, #4]
 800bbd2:	e00c      	b.n	800bbee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	4a12      	ldr	r2, [pc, #72]	; (800bc28 <prvInitialiseTaskLists+0x60>)
 800bbe0:	4413      	add	r3, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe fcf0 	bl	800a5c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	3301      	adds	r3, #1
 800bbec:	607b      	str	r3, [r7, #4]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b37      	cmp	r3, #55	; 0x37
 800bbf2:	d9ef      	bls.n	800bbd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbf4:	480d      	ldr	r0, [pc, #52]	; (800bc2c <prvInitialiseTaskLists+0x64>)
 800bbf6:	f7fe fce7 	bl	800a5c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbfa:	480d      	ldr	r0, [pc, #52]	; (800bc30 <prvInitialiseTaskLists+0x68>)
 800bbfc:	f7fe fce4 	bl	800a5c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc00:	480c      	ldr	r0, [pc, #48]	; (800bc34 <prvInitialiseTaskLists+0x6c>)
 800bc02:	f7fe fce1 	bl	800a5c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc06:	480c      	ldr	r0, [pc, #48]	; (800bc38 <prvInitialiseTaskLists+0x70>)
 800bc08:	f7fe fcde 	bl	800a5c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc0c:	480b      	ldr	r0, [pc, #44]	; (800bc3c <prvInitialiseTaskLists+0x74>)
 800bc0e:	f7fe fcdb 	bl	800a5c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc12:	4b0b      	ldr	r3, [pc, #44]	; (800bc40 <prvInitialiseTaskLists+0x78>)
 800bc14:	4a05      	ldr	r2, [pc, #20]	; (800bc2c <prvInitialiseTaskLists+0x64>)
 800bc16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc18:	4b0a      	ldr	r3, [pc, #40]	; (800bc44 <prvInitialiseTaskLists+0x7c>)
 800bc1a:	4a05      	ldr	r2, [pc, #20]	; (800bc30 <prvInitialiseTaskLists+0x68>)
 800bc1c:	601a      	str	r2, [r3, #0]
}
 800bc1e:	bf00      	nop
 800bc20:	3708      	adds	r7, #8
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	20001190 	.word	0x20001190
 800bc2c:	200015f0 	.word	0x200015f0
 800bc30:	20001604 	.word	0x20001604
 800bc34:	20001620 	.word	0x20001620
 800bc38:	20001634 	.word	0x20001634
 800bc3c:	2000164c 	.word	0x2000164c
 800bc40:	20001618 	.word	0x20001618
 800bc44:	2000161c 	.word	0x2000161c

0800bc48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc4e:	e019      	b.n	800bc84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc50:	f000 fdd0 	bl	800c7f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc54:	4b10      	ldr	r3, [pc, #64]	; (800bc98 <prvCheckTasksWaitingTermination+0x50>)
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fe fd3b 	bl	800a6dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc66:	4b0d      	ldr	r3, [pc, #52]	; (800bc9c <prvCheckTasksWaitingTermination+0x54>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	4a0b      	ldr	r2, [pc, #44]	; (800bc9c <prvCheckTasksWaitingTermination+0x54>)
 800bc6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc70:	4b0b      	ldr	r3, [pc, #44]	; (800bca0 <prvCheckTasksWaitingTermination+0x58>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3b01      	subs	r3, #1
 800bc76:	4a0a      	ldr	r2, [pc, #40]	; (800bca0 <prvCheckTasksWaitingTermination+0x58>)
 800bc78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc7a:	f000 fdeb 	bl	800c854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f810 	bl	800bca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc84:	4b06      	ldr	r3, [pc, #24]	; (800bca0 <prvCheckTasksWaitingTermination+0x58>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1e1      	bne.n	800bc50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc8c:	bf00      	nop
 800bc8e:	bf00      	nop
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20001634 	.word	0x20001634
 800bc9c:	20001660 	.word	0x20001660
 800bca0:	20001648 	.word	0x20001648

0800bca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d108      	bne.n	800bcc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 ff88 	bl	800cbd0 <vPortFree>
				vPortFree( pxTCB );
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 ff85 	bl	800cbd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bcc6:	e018      	b.n	800bcfa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d103      	bne.n	800bcda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 ff7c 	bl	800cbd0 <vPortFree>
	}
 800bcd8:	e00f      	b.n	800bcfa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d00a      	beq.n	800bcfa <prvDeleteTCB+0x56>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	60fb      	str	r3, [r7, #12]
}
 800bcf6:	bf00      	nop
 800bcf8:	e7fe      	b.n	800bcf8 <prvDeleteTCB+0x54>
	}
 800bcfa:	bf00      	nop
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
	...

0800bd04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd0a:	4b0c      	ldr	r3, [pc, #48]	; (800bd3c <prvResetNextTaskUnblockTime+0x38>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d104      	bne.n	800bd1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd14:	4b0a      	ldr	r3, [pc, #40]	; (800bd40 <prvResetNextTaskUnblockTime+0x3c>)
 800bd16:	f04f 32ff 	mov.w	r2, #4294967295
 800bd1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd1c:	e008      	b.n	800bd30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd1e:	4b07      	ldr	r3, [pc, #28]	; (800bd3c <prvResetNextTaskUnblockTime+0x38>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	4a04      	ldr	r2, [pc, #16]	; (800bd40 <prvResetNextTaskUnblockTime+0x3c>)
 800bd2e:	6013      	str	r3, [r2, #0]
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	20001618 	.word	0x20001618
 800bd40:	20001680 	.word	0x20001680

0800bd44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd4a:	4b0b      	ldr	r3, [pc, #44]	; (800bd78 <xTaskGetSchedulerState+0x34>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d102      	bne.n	800bd58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd52:	2301      	movs	r3, #1
 800bd54:	607b      	str	r3, [r7, #4]
 800bd56:	e008      	b.n	800bd6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd58:	4b08      	ldr	r3, [pc, #32]	; (800bd7c <xTaskGetSchedulerState+0x38>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd60:	2302      	movs	r3, #2
 800bd62:	607b      	str	r3, [r7, #4]
 800bd64:	e001      	b.n	800bd6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd66:	2300      	movs	r3, #0
 800bd68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd6a:	687b      	ldr	r3, [r7, #4]
	}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	2000166c 	.word	0x2000166c
 800bd7c:	20001688 	.word	0x20001688

0800bd80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d056      	beq.n	800be44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd96:	4b2e      	ldr	r3, [pc, #184]	; (800be50 <xTaskPriorityDisinherit+0xd0>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	693a      	ldr	r2, [r7, #16]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d00a      	beq.n	800bdb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	60fb      	str	r3, [r7, #12]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10a      	bne.n	800bdd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	60bb      	str	r3, [r7, #8]
}
 800bdd0:	bf00      	nop
 800bdd2:	e7fe      	b.n	800bdd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd8:	1e5a      	subs	r2, r3, #1
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d02c      	beq.n	800be44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d128      	bne.n	800be44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fe fc70 	bl	800a6dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be14:	4b0f      	ldr	r3, [pc, #60]	; (800be54 <xTaskPriorityDisinherit+0xd4>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d903      	bls.n	800be24 <xTaskPriorityDisinherit+0xa4>
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be20:	4a0c      	ldr	r2, [pc, #48]	; (800be54 <xTaskPriorityDisinherit+0xd4>)
 800be22:	6013      	str	r3, [r2, #0]
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be28:	4613      	mov	r3, r2
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4413      	add	r3, r2
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4a09      	ldr	r2, [pc, #36]	; (800be58 <xTaskPriorityDisinherit+0xd8>)
 800be32:	441a      	add	r2, r3
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	3304      	adds	r3, #4
 800be38:	4619      	mov	r1, r3
 800be3a:	4610      	mov	r0, r2
 800be3c:	f7fe fbf1 	bl	800a622 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be40:	2301      	movs	r3, #1
 800be42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be44:	697b      	ldr	r3, [r7, #20]
	}
 800be46:	4618      	mov	r0, r3
 800be48:	3718      	adds	r7, #24
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	2000118c 	.word	0x2000118c
 800be54:	20001668 	.word	0x20001668
 800be58:	20001190 	.word	0x20001190

0800be5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be66:	4b21      	ldr	r3, [pc, #132]	; (800beec <prvAddCurrentTaskToDelayedList+0x90>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be6c:	4b20      	ldr	r3, [pc, #128]	; (800bef0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	3304      	adds	r3, #4
 800be72:	4618      	mov	r0, r3
 800be74:	f7fe fc32 	bl	800a6dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be7e:	d10a      	bne.n	800be96 <prvAddCurrentTaskToDelayedList+0x3a>
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d007      	beq.n	800be96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be86:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	3304      	adds	r3, #4
 800be8c:	4619      	mov	r1, r3
 800be8e:	4819      	ldr	r0, [pc, #100]	; (800bef4 <prvAddCurrentTaskToDelayedList+0x98>)
 800be90:	f7fe fbc7 	bl	800a622 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be94:	e026      	b.n	800bee4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4413      	add	r3, r2
 800be9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be9e:	4b14      	ldr	r3, [pc, #80]	; (800bef0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d209      	bcs.n	800bec2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beae:	4b12      	ldr	r3, [pc, #72]	; (800bef8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	4b0f      	ldr	r3, [pc, #60]	; (800bef0 <prvAddCurrentTaskToDelayedList+0x94>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	3304      	adds	r3, #4
 800beb8:	4619      	mov	r1, r3
 800beba:	4610      	mov	r0, r2
 800bebc:	f7fe fbd5 	bl	800a66a <vListInsert>
}
 800bec0:	e010      	b.n	800bee4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bec2:	4b0e      	ldr	r3, [pc, #56]	; (800befc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3304      	adds	r3, #4
 800becc:	4619      	mov	r1, r3
 800bece:	4610      	mov	r0, r2
 800bed0:	f7fe fbcb 	bl	800a66a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bed4:	4b0a      	ldr	r3, [pc, #40]	; (800bf00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d202      	bcs.n	800bee4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bede:	4a08      	ldr	r2, [pc, #32]	; (800bf00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	6013      	str	r3, [r2, #0]
}
 800bee4:	bf00      	nop
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	20001664 	.word	0x20001664
 800bef0:	2000118c 	.word	0x2000118c
 800bef4:	2000164c 	.word	0x2000164c
 800bef8:	2000161c 	.word	0x2000161c
 800befc:	20001618 	.word	0x20001618
 800bf00:	20001680 	.word	0x20001680

0800bf04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08a      	sub	sp, #40	; 0x28
 800bf08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf0e:	f000 fb07 	bl	800c520 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf12:	4b1c      	ldr	r3, [pc, #112]	; (800bf84 <xTimerCreateTimerTask+0x80>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d021      	beq.n	800bf5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf22:	1d3a      	adds	r2, r7, #4
 800bf24:	f107 0108 	add.w	r1, r7, #8
 800bf28:	f107 030c 	add.w	r3, r7, #12
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7fe fb31 	bl	800a594 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf32:	6879      	ldr	r1, [r7, #4]
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	9202      	str	r2, [sp, #8]
 800bf3a:	9301      	str	r3, [sp, #4]
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	2300      	movs	r3, #0
 800bf42:	460a      	mov	r2, r1
 800bf44:	4910      	ldr	r1, [pc, #64]	; (800bf88 <xTimerCreateTimerTask+0x84>)
 800bf46:	4811      	ldr	r0, [pc, #68]	; (800bf8c <xTimerCreateTimerTask+0x88>)
 800bf48:	f7ff f8de 	bl	800b108 <xTaskCreateStatic>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	4a10      	ldr	r2, [pc, #64]	; (800bf90 <xTimerCreateTimerTask+0x8c>)
 800bf50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf52:	4b0f      	ldr	r3, [pc, #60]	; (800bf90 <xTimerCreateTimerTask+0x8c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10a      	bne.n	800bf7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	613b      	str	r3, [r7, #16]
}
 800bf76:	bf00      	nop
 800bf78:	e7fe      	b.n	800bf78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bf7a:	697b      	ldr	r3, [r7, #20]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3718      	adds	r7, #24
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	200016bc 	.word	0x200016bc
 800bf88:	08013c20 	.word	0x08013c20
 800bf8c:	0800c0c9 	.word	0x0800c0c9
 800bf90:	200016c0 	.word	0x200016c0

0800bf94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b08a      	sub	sp, #40	; 0x28
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
 800bfa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10a      	bne.n	800bfc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	623b      	str	r3, [r7, #32]
}
 800bfbe:	bf00      	nop
 800bfc0:	e7fe      	b.n	800bfc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bfc2:	4b1a      	ldr	r3, [pc, #104]	; (800c02c <xTimerGenericCommand+0x98>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d02a      	beq.n	800c020 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	2b05      	cmp	r3, #5
 800bfda:	dc18      	bgt.n	800c00e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bfdc:	f7ff feb2 	bl	800bd44 <xTaskGetSchedulerState>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d109      	bne.n	800bffa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bfe6:	4b11      	ldr	r3, [pc, #68]	; (800c02c <xTimerGenericCommand+0x98>)
 800bfe8:	6818      	ldr	r0, [r3, #0]
 800bfea:	f107 0110 	add.w	r1, r7, #16
 800bfee:	2300      	movs	r3, #0
 800bff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bff2:	f7fe fca1 	bl	800a938 <xQueueGenericSend>
 800bff6:	6278      	str	r0, [r7, #36]	; 0x24
 800bff8:	e012      	b.n	800c020 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bffa:	4b0c      	ldr	r3, [pc, #48]	; (800c02c <xTimerGenericCommand+0x98>)
 800bffc:	6818      	ldr	r0, [r3, #0]
 800bffe:	f107 0110 	add.w	r1, r7, #16
 800c002:	2300      	movs	r3, #0
 800c004:	2200      	movs	r2, #0
 800c006:	f7fe fc97 	bl	800a938 <xQueueGenericSend>
 800c00a:	6278      	str	r0, [r7, #36]	; 0x24
 800c00c:	e008      	b.n	800c020 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c00e:	4b07      	ldr	r3, [pc, #28]	; (800c02c <xTimerGenericCommand+0x98>)
 800c010:	6818      	ldr	r0, [r3, #0]
 800c012:	f107 0110 	add.w	r1, r7, #16
 800c016:	2300      	movs	r3, #0
 800c018:	683a      	ldr	r2, [r7, #0]
 800c01a:	f7fe fd8b 	bl	800ab34 <xQueueGenericSendFromISR>
 800c01e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c022:	4618      	mov	r0, r3
 800c024:	3728      	adds	r7, #40	; 0x28
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	200016bc 	.word	0x200016bc

0800c030 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b088      	sub	sp, #32
 800c034:	af02      	add	r7, sp, #8
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c03a:	4b22      	ldr	r3, [pc, #136]	; (800c0c4 <prvProcessExpiredTimer+0x94>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	3304      	adds	r3, #4
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fe fb47 	bl	800a6dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c054:	f003 0304 	and.w	r3, r3, #4
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d022      	beq.n	800c0a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	699a      	ldr	r2, [r3, #24]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	18d1      	adds	r1, r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	6978      	ldr	r0, [r7, #20]
 800c06a:	f000 f8d1 	bl	800c210 <prvInsertTimerInActiveList>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d01f      	beq.n	800c0b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c074:	2300      	movs	r3, #0
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	2300      	movs	r3, #0
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	2100      	movs	r1, #0
 800c07e:	6978      	ldr	r0, [r7, #20]
 800c080:	f7ff ff88 	bl	800bf94 <xTimerGenericCommand>
 800c084:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d113      	bne.n	800c0b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	60fb      	str	r3, [r7, #12]
}
 800c09e:	bf00      	nop
 800c0a0:	e7fe      	b.n	800c0a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0a8:	f023 0301 	bic.w	r3, r3, #1
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	6a1b      	ldr	r3, [r3, #32]
 800c0b8:	6978      	ldr	r0, [r7, #20]
 800c0ba:	4798      	blx	r3
}
 800c0bc:	bf00      	nop
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	200016b4 	.word	0x200016b4

0800c0c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0d0:	f107 0308 	add.w	r3, r7, #8
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 f857 	bl	800c188 <prvGetNextExpireTime>
 800c0da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	4619      	mov	r1, r3
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f000 f803 	bl	800c0ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c0e6:	f000 f8d5 	bl	800c294 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0ea:	e7f1      	b.n	800c0d0 <prvTimerTask+0x8>

0800c0ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c0f6:	f7ff fa43 	bl	800b580 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0fa:	f107 0308 	add.w	r3, r7, #8
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 f866 	bl	800c1d0 <prvSampleTimeNow>
 800c104:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d130      	bne.n	800c16e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10a      	bne.n	800c128 <prvProcessTimerOrBlockTask+0x3c>
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	429a      	cmp	r2, r3
 800c118:	d806      	bhi.n	800c128 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c11a:	f7ff fa3f 	bl	800b59c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c11e:	68f9      	ldr	r1, [r7, #12]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7ff ff85 	bl	800c030 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c126:	e024      	b.n	800c172 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d008      	beq.n	800c140 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c12e:	4b13      	ldr	r3, [pc, #76]	; (800c17c <prvProcessTimerOrBlockTask+0x90>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d101      	bne.n	800c13c <prvProcessTimerOrBlockTask+0x50>
 800c138:	2301      	movs	r3, #1
 800c13a:	e000      	b.n	800c13e <prvProcessTimerOrBlockTask+0x52>
 800c13c:	2300      	movs	r3, #0
 800c13e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c140:	4b0f      	ldr	r3, [pc, #60]	; (800c180 <prvProcessTimerOrBlockTask+0x94>)
 800c142:	6818      	ldr	r0, [r3, #0]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	1ad3      	subs	r3, r2, r3
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	4619      	mov	r1, r3
 800c14e:	f7fe ffa7 	bl	800b0a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c152:	f7ff fa23 	bl	800b59c <xTaskResumeAll>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10a      	bne.n	800c172 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c15c:	4b09      	ldr	r3, [pc, #36]	; (800c184 <prvProcessTimerOrBlockTask+0x98>)
 800c15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c162:	601a      	str	r2, [r3, #0]
 800c164:	f3bf 8f4f 	dsb	sy
 800c168:	f3bf 8f6f 	isb	sy
}
 800c16c:	e001      	b.n	800c172 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c16e:	f7ff fa15 	bl	800b59c <xTaskResumeAll>
}
 800c172:	bf00      	nop
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	200016b8 	.word	0x200016b8
 800c180:	200016bc 	.word	0x200016bc
 800c184:	e000ed04 	.word	0xe000ed04

0800c188 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c190:	4b0e      	ldr	r3, [pc, #56]	; (800c1cc <prvGetNextExpireTime+0x44>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d101      	bne.n	800c19e <prvGetNextExpireTime+0x16>
 800c19a:	2201      	movs	r2, #1
 800c19c:	e000      	b.n	800c1a0 <prvGetNextExpireTime+0x18>
 800c19e:	2200      	movs	r2, #0
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d105      	bne.n	800c1b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1ac:	4b07      	ldr	r3, [pc, #28]	; (800c1cc <prvGetNextExpireTime+0x44>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	60fb      	str	r3, [r7, #12]
 800c1b6:	e001      	b.n	800c1bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3714      	adds	r7, #20
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	200016b4 	.word	0x200016b4

0800c1d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c1d8:	f7ff fa7e 	bl	800b6d8 <xTaskGetTickCount>
 800c1dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c1de:	4b0b      	ldr	r3, [pc, #44]	; (800c20c <prvSampleTimeNow+0x3c>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d205      	bcs.n	800c1f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c1e8:	f000 f936 	bl	800c458 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	601a      	str	r2, [r3, #0]
 800c1f2:	e002      	b.n	800c1fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c1fa:	4a04      	ldr	r2, [pc, #16]	; (800c20c <prvSampleTimeNow+0x3c>)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c200:	68fb      	ldr	r3, [r7, #12]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	200016c4 	.word	0x200016c4

0800c210 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b086      	sub	sp, #24
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
 800c21c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c21e:	2300      	movs	r3, #0
 800c220:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	429a      	cmp	r2, r3
 800c234:	d812      	bhi.n	800c25c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	1ad2      	subs	r2, r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	429a      	cmp	r2, r3
 800c242:	d302      	bcc.n	800c24a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c244:	2301      	movs	r3, #1
 800c246:	617b      	str	r3, [r7, #20]
 800c248:	e01b      	b.n	800c282 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c24a:	4b10      	ldr	r3, [pc, #64]	; (800c28c <prvInsertTimerInActiveList+0x7c>)
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3304      	adds	r3, #4
 800c252:	4619      	mov	r1, r3
 800c254:	4610      	mov	r0, r2
 800c256:	f7fe fa08 	bl	800a66a <vListInsert>
 800c25a:	e012      	b.n	800c282 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	429a      	cmp	r2, r3
 800c262:	d206      	bcs.n	800c272 <prvInsertTimerInActiveList+0x62>
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d302      	bcc.n	800c272 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c26c:	2301      	movs	r3, #1
 800c26e:	617b      	str	r3, [r7, #20]
 800c270:	e007      	b.n	800c282 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c272:	4b07      	ldr	r3, [pc, #28]	; (800c290 <prvInsertTimerInActiveList+0x80>)
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3304      	adds	r3, #4
 800c27a:	4619      	mov	r1, r3
 800c27c:	4610      	mov	r0, r2
 800c27e:	f7fe f9f4 	bl	800a66a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c282:	697b      	ldr	r3, [r7, #20]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3718      	adds	r7, #24
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	200016b8 	.word	0x200016b8
 800c290:	200016b4 	.word	0x200016b4

0800c294 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b08e      	sub	sp, #56	; 0x38
 800c298:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c29a:	e0ca      	b.n	800c432 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	da18      	bge.n	800c2d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c2a2:	1d3b      	adds	r3, r7, #4
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d10a      	bne.n	800c2c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	61fb      	str	r3, [r7, #28]
}
 800c2c0:	bf00      	nop
 800c2c2:	e7fe      	b.n	800c2c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ca:	6850      	ldr	r0, [r2, #4]
 800c2cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ce:	6892      	ldr	r2, [r2, #8]
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f2c0 80aa 	blt.w	800c430 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	695b      	ldr	r3, [r3, #20]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d004      	beq.n	800c2f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ea:	3304      	adds	r3, #4
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe f9f5 	bl	800a6dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2f2:	463b      	mov	r3, r7
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7ff ff6b 	bl	800c1d0 <prvSampleTimeNow>
 800c2fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b09      	cmp	r3, #9
 800c300:	f200 8097 	bhi.w	800c432 <prvProcessReceivedCommands+0x19e>
 800c304:	a201      	add	r2, pc, #4	; (adr r2, 800c30c <prvProcessReceivedCommands+0x78>)
 800c306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30a:	bf00      	nop
 800c30c:	0800c335 	.word	0x0800c335
 800c310:	0800c335 	.word	0x0800c335
 800c314:	0800c335 	.word	0x0800c335
 800c318:	0800c3a9 	.word	0x0800c3a9
 800c31c:	0800c3bd 	.word	0x0800c3bd
 800c320:	0800c407 	.word	0x0800c407
 800c324:	0800c335 	.word	0x0800c335
 800c328:	0800c335 	.word	0x0800c335
 800c32c:	0800c3a9 	.word	0x0800c3a9
 800c330:	0800c3bd 	.word	0x0800c3bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c33a:	f043 0301 	orr.w	r3, r3, #1
 800c33e:	b2da      	uxtb	r2, r3
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	18d1      	adds	r1, r2, r3
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c354:	f7ff ff5c 	bl	800c210 <prvInsertTimerInActiveList>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d069      	beq.n	800c432 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c364:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c36c:	f003 0304 	and.w	r3, r3, #4
 800c370:	2b00      	cmp	r3, #0
 800c372:	d05e      	beq.n	800c432 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	441a      	add	r2, r3
 800c37c:	2300      	movs	r3, #0
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	2300      	movs	r3, #0
 800c382:	2100      	movs	r1, #0
 800c384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c386:	f7ff fe05 	bl	800bf94 <xTimerGenericCommand>
 800c38a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c38c:	6a3b      	ldr	r3, [r7, #32]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d14f      	bne.n	800c432 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	61bb      	str	r3, [r7, #24]
}
 800c3a4:	bf00      	nop
 800c3a6:	e7fe      	b.n	800c3a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ae:	f023 0301 	bic.w	r3, r3, #1
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c3ba:	e03a      	b.n	800c432 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3c2:	f043 0301 	orr.w	r3, r3, #1
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10a      	bne.n	800c3f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	617b      	str	r3, [r7, #20]
}
 800c3ee:	bf00      	nop
 800c3f0:	e7fe      	b.n	800c3f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f4:	699a      	ldr	r2, [r3, #24]
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f8:	18d1      	adds	r1, r2, r3
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c400:	f7ff ff06 	bl	800c210 <prvInsertTimerInActiveList>
					break;
 800c404:	e015      	b.n	800c432 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c40c:	f003 0302 	and.w	r3, r3, #2
 800c410:	2b00      	cmp	r3, #0
 800c412:	d103      	bne.n	800c41c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c416:	f000 fbdb 	bl	800cbd0 <vPortFree>
 800c41a:	e00a      	b.n	800c432 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c422:	f023 0301 	bic.w	r3, r3, #1
 800c426:	b2da      	uxtb	r2, r3
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c42e:	e000      	b.n	800c432 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c430:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c432:	4b08      	ldr	r3, [pc, #32]	; (800c454 <prvProcessReceivedCommands+0x1c0>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	1d39      	adds	r1, r7, #4
 800c438:	2200      	movs	r2, #0
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fe fc16 	bl	800ac6c <xQueueReceive>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	f47f af2a 	bne.w	800c29c <prvProcessReceivedCommands+0x8>
	}
}
 800c448:	bf00      	nop
 800c44a:	bf00      	nop
 800c44c:	3730      	adds	r7, #48	; 0x30
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	200016bc 	.word	0x200016bc

0800c458 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b088      	sub	sp, #32
 800c45c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c45e:	e048      	b.n	800c4f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c460:	4b2d      	ldr	r3, [pc, #180]	; (800c518 <prvSwitchTimerLists+0xc0>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c46a:	4b2b      	ldr	r3, [pc, #172]	; (800c518 <prvSwitchTimerLists+0xc0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	3304      	adds	r3, #4
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fe f92f 	bl	800a6dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c48c:	f003 0304 	and.w	r3, r3, #4
 800c490:	2b00      	cmp	r3, #0
 800c492:	d02e      	beq.n	800c4f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	693a      	ldr	r2, [r7, #16]
 800c49a:	4413      	add	r3, r2
 800c49c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d90e      	bls.n	800c4c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4b2:	4b19      	ldr	r3, [pc, #100]	; (800c518 <prvSwitchTimerLists+0xc0>)
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	4610      	mov	r0, r2
 800c4be:	f7fe f8d4 	bl	800a66a <vListInsert>
 800c4c2:	e016      	b.n	800c4f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	693a      	ldr	r2, [r7, #16]
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f7ff fd60 	bl	800bf94 <xTimerGenericCommand>
 800c4d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10a      	bne.n	800c4f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	603b      	str	r3, [r7, #0]
}
 800c4ee:	bf00      	nop
 800c4f0:	e7fe      	b.n	800c4f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4f2:	4b09      	ldr	r3, [pc, #36]	; (800c518 <prvSwitchTimerLists+0xc0>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1b1      	bne.n	800c460 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c4fc:	4b06      	ldr	r3, [pc, #24]	; (800c518 <prvSwitchTimerLists+0xc0>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c502:	4b06      	ldr	r3, [pc, #24]	; (800c51c <prvSwitchTimerLists+0xc4>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a04      	ldr	r2, [pc, #16]	; (800c518 <prvSwitchTimerLists+0xc0>)
 800c508:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c50a:	4a04      	ldr	r2, [pc, #16]	; (800c51c <prvSwitchTimerLists+0xc4>)
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	6013      	str	r3, [r2, #0]
}
 800c510:	bf00      	nop
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	200016b4 	.word	0x200016b4
 800c51c:	200016b8 	.word	0x200016b8

0800c520 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c526:	f000 f965 	bl	800c7f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c52a:	4b15      	ldr	r3, [pc, #84]	; (800c580 <prvCheckForValidListAndQueue+0x60>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d120      	bne.n	800c574 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c532:	4814      	ldr	r0, [pc, #80]	; (800c584 <prvCheckForValidListAndQueue+0x64>)
 800c534:	f7fe f848 	bl	800a5c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c538:	4813      	ldr	r0, [pc, #76]	; (800c588 <prvCheckForValidListAndQueue+0x68>)
 800c53a:	f7fe f845 	bl	800a5c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c53e:	4b13      	ldr	r3, [pc, #76]	; (800c58c <prvCheckForValidListAndQueue+0x6c>)
 800c540:	4a10      	ldr	r2, [pc, #64]	; (800c584 <prvCheckForValidListAndQueue+0x64>)
 800c542:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c544:	4b12      	ldr	r3, [pc, #72]	; (800c590 <prvCheckForValidListAndQueue+0x70>)
 800c546:	4a10      	ldr	r2, [pc, #64]	; (800c588 <prvCheckForValidListAndQueue+0x68>)
 800c548:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c54a:	2300      	movs	r3, #0
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	4b11      	ldr	r3, [pc, #68]	; (800c594 <prvCheckForValidListAndQueue+0x74>)
 800c550:	4a11      	ldr	r2, [pc, #68]	; (800c598 <prvCheckForValidListAndQueue+0x78>)
 800c552:	2110      	movs	r1, #16
 800c554:	200a      	movs	r0, #10
 800c556:	f7fe f953 	bl	800a800 <xQueueGenericCreateStatic>
 800c55a:	4603      	mov	r3, r0
 800c55c:	4a08      	ldr	r2, [pc, #32]	; (800c580 <prvCheckForValidListAndQueue+0x60>)
 800c55e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c560:	4b07      	ldr	r3, [pc, #28]	; (800c580 <prvCheckForValidListAndQueue+0x60>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d005      	beq.n	800c574 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c568:	4b05      	ldr	r3, [pc, #20]	; (800c580 <prvCheckForValidListAndQueue+0x60>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	490b      	ldr	r1, [pc, #44]	; (800c59c <prvCheckForValidListAndQueue+0x7c>)
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fe fd6c 	bl	800b04c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c574:	f000 f96e 	bl	800c854 <vPortExitCritical>
}
 800c578:	bf00      	nop
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	200016bc 	.word	0x200016bc
 800c584:	2000168c 	.word	0x2000168c
 800c588:	200016a0 	.word	0x200016a0
 800c58c:	200016b4 	.word	0x200016b4
 800c590:	200016b8 	.word	0x200016b8
 800c594:	20001768 	.word	0x20001768
 800c598:	200016c8 	.word	0x200016c8
 800c59c:	08013c28 	.word	0x08013c28

0800c5a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	3b04      	subs	r3, #4
 800c5b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c5b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3b04      	subs	r3, #4
 800c5be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	f023 0201 	bic.w	r2, r3, #1
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	3b04      	subs	r3, #4
 800c5ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5d0:	4a0c      	ldr	r2, [pc, #48]	; (800c604 <pxPortInitialiseStack+0x64>)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3b14      	subs	r3, #20
 800c5da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3b04      	subs	r3, #4
 800c5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f06f 0202 	mvn.w	r2, #2
 800c5ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	3b20      	subs	r3, #32
 800c5f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3714      	adds	r7, #20
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr
 800c604:	0800c609 	.word	0x0800c609

0800c608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c60e:	2300      	movs	r3, #0
 800c610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c612:	4b12      	ldr	r3, [pc, #72]	; (800c65c <prvTaskExitError+0x54>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61a:	d00a      	beq.n	800c632 <prvTaskExitError+0x2a>
	__asm volatile
 800c61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	60fb      	str	r3, [r7, #12]
}
 800c62e:	bf00      	nop
 800c630:	e7fe      	b.n	800c630 <prvTaskExitError+0x28>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	60bb      	str	r3, [r7, #8]
}
 800c644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c646:	bf00      	nop
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d0fc      	beq.n	800c648 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c64e:	bf00      	nop
 800c650:	bf00      	nop
 800c652:	3714      	adds	r7, #20
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	200000c8 	.word	0x200000c8

0800c660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c660:	4b07      	ldr	r3, [pc, #28]	; (800c680 <pxCurrentTCBConst2>)
 800c662:	6819      	ldr	r1, [r3, #0]
 800c664:	6808      	ldr	r0, [r1, #0]
 800c666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66a:	f380 8809 	msr	PSP, r0
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	f04f 0000 	mov.w	r0, #0
 800c676:	f380 8811 	msr	BASEPRI, r0
 800c67a:	4770      	bx	lr
 800c67c:	f3af 8000 	nop.w

0800c680 <pxCurrentTCBConst2>:
 800c680:	2000118c 	.word	0x2000118c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c684:	bf00      	nop
 800c686:	bf00      	nop

0800c688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c688:	4808      	ldr	r0, [pc, #32]	; (800c6ac <prvPortStartFirstTask+0x24>)
 800c68a:	6800      	ldr	r0, [r0, #0]
 800c68c:	6800      	ldr	r0, [r0, #0]
 800c68e:	f380 8808 	msr	MSP, r0
 800c692:	f04f 0000 	mov.w	r0, #0
 800c696:	f380 8814 	msr	CONTROL, r0
 800c69a:	b662      	cpsie	i
 800c69c:	b661      	cpsie	f
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	df00      	svc	0
 800c6a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6aa:	bf00      	nop
 800c6ac:	e000ed08 	.word	0xe000ed08

0800c6b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c6b6:	4b46      	ldr	r3, [pc, #280]	; (800c7d0 <xPortStartScheduler+0x120>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a46      	ldr	r2, [pc, #280]	; (800c7d4 <xPortStartScheduler+0x124>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d10a      	bne.n	800c6d6 <xPortStartScheduler+0x26>
	__asm volatile
 800c6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c4:	f383 8811 	msr	BASEPRI, r3
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	613b      	str	r3, [r7, #16]
}
 800c6d2:	bf00      	nop
 800c6d4:	e7fe      	b.n	800c6d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c6d6:	4b3e      	ldr	r3, [pc, #248]	; (800c7d0 <xPortStartScheduler+0x120>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a3f      	ldr	r2, [pc, #252]	; (800c7d8 <xPortStartScheduler+0x128>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d10a      	bne.n	800c6f6 <xPortStartScheduler+0x46>
	__asm volatile
 800c6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e4:	f383 8811 	msr	BASEPRI, r3
 800c6e8:	f3bf 8f6f 	isb	sy
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	60fb      	str	r3, [r7, #12]
}
 800c6f2:	bf00      	nop
 800c6f4:	e7fe      	b.n	800c6f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6f6:	4b39      	ldr	r3, [pc, #228]	; (800c7dc <xPortStartScheduler+0x12c>)
 800c6f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	22ff      	movs	r2, #255	; 0xff
 800c706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c710:	78fb      	ldrb	r3, [r7, #3]
 800c712:	b2db      	uxtb	r3, r3
 800c714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	4b31      	ldr	r3, [pc, #196]	; (800c7e0 <xPortStartScheduler+0x130>)
 800c71c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c71e:	4b31      	ldr	r3, [pc, #196]	; (800c7e4 <xPortStartScheduler+0x134>)
 800c720:	2207      	movs	r2, #7
 800c722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c724:	e009      	b.n	800c73a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c726:	4b2f      	ldr	r3, [pc, #188]	; (800c7e4 <xPortStartScheduler+0x134>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3b01      	subs	r3, #1
 800c72c:	4a2d      	ldr	r2, [pc, #180]	; (800c7e4 <xPortStartScheduler+0x134>)
 800c72e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c730:	78fb      	ldrb	r3, [r7, #3]
 800c732:	b2db      	uxtb	r3, r3
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	b2db      	uxtb	r3, r3
 800c738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c73a:	78fb      	ldrb	r3, [r7, #3]
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c742:	2b80      	cmp	r3, #128	; 0x80
 800c744:	d0ef      	beq.n	800c726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c746:	4b27      	ldr	r3, [pc, #156]	; (800c7e4 <xPortStartScheduler+0x134>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f1c3 0307 	rsb	r3, r3, #7
 800c74e:	2b04      	cmp	r3, #4
 800c750:	d00a      	beq.n	800c768 <xPortStartScheduler+0xb8>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	60bb      	str	r3, [r7, #8]
}
 800c764:	bf00      	nop
 800c766:	e7fe      	b.n	800c766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c768:	4b1e      	ldr	r3, [pc, #120]	; (800c7e4 <xPortStartScheduler+0x134>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	021b      	lsls	r3, r3, #8
 800c76e:	4a1d      	ldr	r2, [pc, #116]	; (800c7e4 <xPortStartScheduler+0x134>)
 800c770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c772:	4b1c      	ldr	r3, [pc, #112]	; (800c7e4 <xPortStartScheduler+0x134>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c77a:	4a1a      	ldr	r2, [pc, #104]	; (800c7e4 <xPortStartScheduler+0x134>)
 800c77c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	b2da      	uxtb	r2, r3
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c786:	4b18      	ldr	r3, [pc, #96]	; (800c7e8 <xPortStartScheduler+0x138>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a17      	ldr	r2, [pc, #92]	; (800c7e8 <xPortStartScheduler+0x138>)
 800c78c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c792:	4b15      	ldr	r3, [pc, #84]	; (800c7e8 <xPortStartScheduler+0x138>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a14      	ldr	r2, [pc, #80]	; (800c7e8 <xPortStartScheduler+0x138>)
 800c798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c79c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c79e:	f000 f8dd 	bl	800c95c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c7a2:	4b12      	ldr	r3, [pc, #72]	; (800c7ec <xPortStartScheduler+0x13c>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c7a8:	f000 f8fc 	bl	800c9a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c7ac:	4b10      	ldr	r3, [pc, #64]	; (800c7f0 <xPortStartScheduler+0x140>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a0f      	ldr	r2, [pc, #60]	; (800c7f0 <xPortStartScheduler+0x140>)
 800c7b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c7b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c7b8:	f7ff ff66 	bl	800c688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7bc:	f7ff f856 	bl	800b86c <vTaskSwitchContext>
	prvTaskExitError();
 800c7c0:	f7ff ff22 	bl	800c608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3718      	adds	r7, #24
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	e000ed00 	.word	0xe000ed00
 800c7d4:	410fc271 	.word	0x410fc271
 800c7d8:	410fc270 	.word	0x410fc270
 800c7dc:	e000e400 	.word	0xe000e400
 800c7e0:	200017b8 	.word	0x200017b8
 800c7e4:	200017bc 	.word	0x200017bc
 800c7e8:	e000ed20 	.word	0xe000ed20
 800c7ec:	200000c8 	.word	0x200000c8
 800c7f0:	e000ef34 	.word	0xe000ef34

0800c7f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	607b      	str	r3, [r7, #4]
}
 800c80c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c80e:	4b0f      	ldr	r3, [pc, #60]	; (800c84c <vPortEnterCritical+0x58>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	3301      	adds	r3, #1
 800c814:	4a0d      	ldr	r2, [pc, #52]	; (800c84c <vPortEnterCritical+0x58>)
 800c816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c818:	4b0c      	ldr	r3, [pc, #48]	; (800c84c <vPortEnterCritical+0x58>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d10f      	bne.n	800c840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c820:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <vPortEnterCritical+0x5c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	b2db      	uxtb	r3, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00a      	beq.n	800c840 <vPortEnterCritical+0x4c>
	__asm volatile
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	603b      	str	r3, [r7, #0]
}
 800c83c:	bf00      	nop
 800c83e:	e7fe      	b.n	800c83e <vPortEnterCritical+0x4a>
	}
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr
 800c84c:	200000c8 	.word	0x200000c8
 800c850:	e000ed04 	.word	0xe000ed04

0800c854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c85a:	4b12      	ldr	r3, [pc, #72]	; (800c8a4 <vPortExitCritical+0x50>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10a      	bne.n	800c878 <vPortExitCritical+0x24>
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c866:	f383 8811 	msr	BASEPRI, r3
 800c86a:	f3bf 8f6f 	isb	sy
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	607b      	str	r3, [r7, #4]
}
 800c874:	bf00      	nop
 800c876:	e7fe      	b.n	800c876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c878:	4b0a      	ldr	r3, [pc, #40]	; (800c8a4 <vPortExitCritical+0x50>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3b01      	subs	r3, #1
 800c87e:	4a09      	ldr	r2, [pc, #36]	; (800c8a4 <vPortExitCritical+0x50>)
 800c880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c882:	4b08      	ldr	r3, [pc, #32]	; (800c8a4 <vPortExitCritical+0x50>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d105      	bne.n	800c896 <vPortExitCritical+0x42>
 800c88a:	2300      	movs	r3, #0
 800c88c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	f383 8811 	msr	BASEPRI, r3
}
 800c894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c896:	bf00      	nop
 800c898:	370c      	adds	r7, #12
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	200000c8 	.word	0x200000c8
	...

0800c8b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8b0:	f3ef 8009 	mrs	r0, PSP
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	4b15      	ldr	r3, [pc, #84]	; (800c910 <pxCurrentTCBConst>)
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	f01e 0f10 	tst.w	lr, #16
 800c8c0:	bf08      	it	eq
 800c8c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c8c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ca:	6010      	str	r0, [r2, #0]
 800c8cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c8d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c8d4:	f380 8811 	msr	BASEPRI, r0
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f7fe ffc4 	bl	800b86c <vTaskSwitchContext>
 800c8e4:	f04f 0000 	mov.w	r0, #0
 800c8e8:	f380 8811 	msr	BASEPRI, r0
 800c8ec:	bc09      	pop	{r0, r3}
 800c8ee:	6819      	ldr	r1, [r3, #0]
 800c8f0:	6808      	ldr	r0, [r1, #0]
 800c8f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f6:	f01e 0f10 	tst.w	lr, #16
 800c8fa:	bf08      	it	eq
 800c8fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c900:	f380 8809 	msr	PSP, r0
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop
 800c90c:	f3af 8000 	nop.w

0800c910 <pxCurrentTCBConst>:
 800c910:	2000118c 	.word	0x2000118c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c914:	bf00      	nop
 800c916:	bf00      	nop

0800c918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	607b      	str	r3, [r7, #4]
}
 800c930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c932:	f7fe fee1 	bl	800b6f8 <xTaskIncrementTick>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d003      	beq.n	800c944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c93c:	4b06      	ldr	r3, [pc, #24]	; (800c958 <xPortSysTickHandler+0x40>)
 800c93e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c942:	601a      	str	r2, [r3, #0]
 800c944:	2300      	movs	r3, #0
 800c946:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	f383 8811 	msr	BASEPRI, r3
}
 800c94e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c950:	bf00      	nop
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	e000ed04 	.word	0xe000ed04

0800c95c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c95c:	b480      	push	{r7}
 800c95e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c960:	4b0b      	ldr	r3, [pc, #44]	; (800c990 <vPortSetupTimerInterrupt+0x34>)
 800c962:	2200      	movs	r2, #0
 800c964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c966:	4b0b      	ldr	r3, [pc, #44]	; (800c994 <vPortSetupTimerInterrupt+0x38>)
 800c968:	2200      	movs	r2, #0
 800c96a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c96c:	4b0a      	ldr	r3, [pc, #40]	; (800c998 <vPortSetupTimerInterrupt+0x3c>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a0a      	ldr	r2, [pc, #40]	; (800c99c <vPortSetupTimerInterrupt+0x40>)
 800c972:	fba2 2303 	umull	r2, r3, r2, r3
 800c976:	099b      	lsrs	r3, r3, #6
 800c978:	4a09      	ldr	r2, [pc, #36]	; (800c9a0 <vPortSetupTimerInterrupt+0x44>)
 800c97a:	3b01      	subs	r3, #1
 800c97c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c97e:	4b04      	ldr	r3, [pc, #16]	; (800c990 <vPortSetupTimerInterrupt+0x34>)
 800c980:	2207      	movs	r2, #7
 800c982:	601a      	str	r2, [r3, #0]
}
 800c984:	bf00      	nop
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	e000e010 	.word	0xe000e010
 800c994:	e000e018 	.word	0xe000e018
 800c998:	20000004 	.word	0x20000004
 800c99c:	10624dd3 	.word	0x10624dd3
 800c9a0:	e000e014 	.word	0xe000e014

0800c9a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c9a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c9b4 <vPortEnableVFP+0x10>
 800c9a8:	6801      	ldr	r1, [r0, #0]
 800c9aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c9ae:	6001      	str	r1, [r0, #0]
 800c9b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c9b2:	bf00      	nop
 800c9b4:	e000ed88 	.word	0xe000ed88

0800c9b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c9be:	f3ef 8305 	mrs	r3, IPSR
 800c9c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2b0f      	cmp	r3, #15
 800c9c8:	d914      	bls.n	800c9f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c9ca:	4a17      	ldr	r2, [pc, #92]	; (800ca28 <vPortValidateInterruptPriority+0x70>)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c9d4:	4b15      	ldr	r3, [pc, #84]	; (800ca2c <vPortValidateInterruptPriority+0x74>)
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	7afa      	ldrb	r2, [r7, #11]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d20a      	bcs.n	800c9f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e2:	f383 8811 	msr	BASEPRI, r3
 800c9e6:	f3bf 8f6f 	isb	sy
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	607b      	str	r3, [r7, #4]
}
 800c9f0:	bf00      	nop
 800c9f2:	e7fe      	b.n	800c9f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c9f4:	4b0e      	ldr	r3, [pc, #56]	; (800ca30 <vPortValidateInterruptPriority+0x78>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c9fc:	4b0d      	ldr	r3, [pc, #52]	; (800ca34 <vPortValidateInterruptPriority+0x7c>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d90a      	bls.n	800ca1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	603b      	str	r3, [r7, #0]
}
 800ca16:	bf00      	nop
 800ca18:	e7fe      	b.n	800ca18 <vPortValidateInterruptPriority+0x60>
	}
 800ca1a:	bf00      	nop
 800ca1c:	3714      	adds	r7, #20
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	e000e3f0 	.word	0xe000e3f0
 800ca2c:	200017b8 	.word	0x200017b8
 800ca30:	e000ed0c 	.word	0xe000ed0c
 800ca34:	200017bc 	.word	0x200017bc

0800ca38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08a      	sub	sp, #40	; 0x28
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca40:	2300      	movs	r3, #0
 800ca42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca44:	f7fe fd9c 	bl	800b580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca48:	4b5b      	ldr	r3, [pc, #364]	; (800cbb8 <pvPortMalloc+0x180>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d101      	bne.n	800ca54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca50:	f000 f920 	bl	800cc94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca54:	4b59      	ldr	r3, [pc, #356]	; (800cbbc <pvPortMalloc+0x184>)
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f040 8093 	bne.w	800cb88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d01d      	beq.n	800caa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ca68:	2208      	movs	r2, #8
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f003 0307 	and.w	r3, r3, #7
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d014      	beq.n	800caa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f023 0307 	bic.w	r3, r3, #7
 800ca80:	3308      	adds	r3, #8
 800ca82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f003 0307 	and.w	r3, r3, #7
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00a      	beq.n	800caa4 <pvPortMalloc+0x6c>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	617b      	str	r3, [r7, #20]
}
 800caa0:	bf00      	nop
 800caa2:	e7fe      	b.n	800caa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d06e      	beq.n	800cb88 <pvPortMalloc+0x150>
 800caaa:	4b45      	ldr	r3, [pc, #276]	; (800cbc0 <pvPortMalloc+0x188>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d869      	bhi.n	800cb88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cab4:	4b43      	ldr	r3, [pc, #268]	; (800cbc4 <pvPortMalloc+0x18c>)
 800cab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cab8:	4b42      	ldr	r3, [pc, #264]	; (800cbc4 <pvPortMalloc+0x18c>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cabe:	e004      	b.n	800caca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d903      	bls.n	800cadc <pvPortMalloc+0xa4>
 800cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1f1      	bne.n	800cac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cadc:	4b36      	ldr	r3, [pc, #216]	; (800cbb8 <pvPortMalloc+0x180>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d050      	beq.n	800cb88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2208      	movs	r2, #8
 800caec:	4413      	add	r3, r2
 800caee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800caf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	6a3b      	ldr	r3, [r7, #32]
 800caf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800caf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	1ad2      	subs	r2, r2, r3
 800cb00:	2308      	movs	r3, #8
 800cb02:	005b      	lsls	r3, r3, #1
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d91f      	bls.n	800cb48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	f003 0307 	and.w	r3, r3, #7
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00a      	beq.n	800cb30 <pvPortMalloc+0xf8>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	613b      	str	r3, [r7, #16]
}
 800cb2c:	bf00      	nop
 800cb2e:	e7fe      	b.n	800cb2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	685a      	ldr	r2, [r3, #4]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	1ad2      	subs	r2, r2, r3
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb42:	69b8      	ldr	r0, [r7, #24]
 800cb44:	f000 f908 	bl	800cd58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb48:	4b1d      	ldr	r3, [pc, #116]	; (800cbc0 <pvPortMalloc+0x188>)
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	4a1b      	ldr	r2, [pc, #108]	; (800cbc0 <pvPortMalloc+0x188>)
 800cb54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb56:	4b1a      	ldr	r3, [pc, #104]	; (800cbc0 <pvPortMalloc+0x188>)
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	4b1b      	ldr	r3, [pc, #108]	; (800cbc8 <pvPortMalloc+0x190>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d203      	bcs.n	800cb6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb62:	4b17      	ldr	r3, [pc, #92]	; (800cbc0 <pvPortMalloc+0x188>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a18      	ldr	r2, [pc, #96]	; (800cbc8 <pvPortMalloc+0x190>)
 800cb68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6c:	685a      	ldr	r2, [r3, #4]
 800cb6e:	4b13      	ldr	r3, [pc, #76]	; (800cbbc <pvPortMalloc+0x184>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	431a      	orrs	r2, r3
 800cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb7e:	4b13      	ldr	r3, [pc, #76]	; (800cbcc <pvPortMalloc+0x194>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	3301      	adds	r3, #1
 800cb84:	4a11      	ldr	r2, [pc, #68]	; (800cbcc <pvPortMalloc+0x194>)
 800cb86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb88:	f7fe fd08 	bl	800b59c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	f003 0307 	and.w	r3, r3, #7
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00a      	beq.n	800cbac <pvPortMalloc+0x174>
	__asm volatile
 800cb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9a:	f383 8811 	msr	BASEPRI, r3
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	60fb      	str	r3, [r7, #12]
}
 800cba8:	bf00      	nop
 800cbaa:	e7fe      	b.n	800cbaa <pvPortMalloc+0x172>
	return pvReturn;
 800cbac:	69fb      	ldr	r3, [r7, #28]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3728      	adds	r7, #40	; 0x28
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	200053c8 	.word	0x200053c8
 800cbbc:	200053dc 	.word	0x200053dc
 800cbc0:	200053cc 	.word	0x200053cc
 800cbc4:	200053c0 	.word	0x200053c0
 800cbc8:	200053d0 	.word	0x200053d0
 800cbcc:	200053d4 	.word	0x200053d4

0800cbd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d04d      	beq.n	800cc7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbe2:	2308      	movs	r3, #8
 800cbe4:	425b      	negs	r3, r3
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	4413      	add	r3, r2
 800cbea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	685a      	ldr	r2, [r3, #4]
 800cbf4:	4b24      	ldr	r3, [pc, #144]	; (800cc88 <vPortFree+0xb8>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10a      	bne.n	800cc14 <vPortFree+0x44>
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	60fb      	str	r3, [r7, #12]
}
 800cc10:	bf00      	nop
 800cc12:	e7fe      	b.n	800cc12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00a      	beq.n	800cc32 <vPortFree+0x62>
	__asm volatile
 800cc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc20:	f383 8811 	msr	BASEPRI, r3
 800cc24:	f3bf 8f6f 	isb	sy
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	60bb      	str	r3, [r7, #8]
}
 800cc2e:	bf00      	nop
 800cc30:	e7fe      	b.n	800cc30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	685a      	ldr	r2, [r3, #4]
 800cc36:	4b14      	ldr	r3, [pc, #80]	; (800cc88 <vPortFree+0xb8>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d01e      	beq.n	800cc7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d11a      	bne.n	800cc7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	4b0e      	ldr	r3, [pc, #56]	; (800cc88 <vPortFree+0xb8>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	43db      	mvns	r3, r3
 800cc52:	401a      	ands	r2, r3
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc58:	f7fe fc92 	bl	800b580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	4b0a      	ldr	r3, [pc, #40]	; (800cc8c <vPortFree+0xbc>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4413      	add	r3, r2
 800cc66:	4a09      	ldr	r2, [pc, #36]	; (800cc8c <vPortFree+0xbc>)
 800cc68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc6a:	6938      	ldr	r0, [r7, #16]
 800cc6c:	f000 f874 	bl	800cd58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc70:	4b07      	ldr	r3, [pc, #28]	; (800cc90 <vPortFree+0xc0>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3301      	adds	r3, #1
 800cc76:	4a06      	ldr	r2, [pc, #24]	; (800cc90 <vPortFree+0xc0>)
 800cc78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc7a:	f7fe fc8f 	bl	800b59c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc7e:	bf00      	nop
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	200053dc 	.word	0x200053dc
 800cc8c:	200053cc 	.word	0x200053cc
 800cc90:	200053d8 	.word	0x200053d8

0800cc94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cc9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cca0:	4b27      	ldr	r3, [pc, #156]	; (800cd40 <prvHeapInit+0xac>)
 800cca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f003 0307 	and.w	r3, r3, #7
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00c      	beq.n	800ccc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	3307      	adds	r3, #7
 800ccb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f023 0307 	bic.w	r3, r3, #7
 800ccba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	4a1f      	ldr	r2, [pc, #124]	; (800cd40 <prvHeapInit+0xac>)
 800ccc4:	4413      	add	r3, r2
 800ccc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cccc:	4a1d      	ldr	r2, [pc, #116]	; (800cd44 <prvHeapInit+0xb0>)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ccd2:	4b1c      	ldr	r3, [pc, #112]	; (800cd44 <prvHeapInit+0xb0>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	4413      	add	r3, r2
 800ccde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cce0:	2208      	movs	r2, #8
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	1a9b      	subs	r3, r3, r2
 800cce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f023 0307 	bic.w	r3, r3, #7
 800ccee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4a15      	ldr	r2, [pc, #84]	; (800cd48 <prvHeapInit+0xb4>)
 800ccf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ccf6:	4b14      	ldr	r3, [pc, #80]	; (800cd48 <prvHeapInit+0xb4>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccfe:	4b12      	ldr	r3, [pc, #72]	; (800cd48 <prvHeapInit+0xb4>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	1ad2      	subs	r2, r2, r3
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd14:	4b0c      	ldr	r3, [pc, #48]	; (800cd48 <prvHeapInit+0xb4>)
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	4a0a      	ldr	r2, [pc, #40]	; (800cd4c <prvHeapInit+0xb8>)
 800cd22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	4a09      	ldr	r2, [pc, #36]	; (800cd50 <prvHeapInit+0xbc>)
 800cd2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd2c:	4b09      	ldr	r3, [pc, #36]	; (800cd54 <prvHeapInit+0xc0>)
 800cd2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd32:	601a      	str	r2, [r3, #0]
}
 800cd34:	bf00      	nop
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr
 800cd40:	200017c0 	.word	0x200017c0
 800cd44:	200053c0 	.word	0x200053c0
 800cd48:	200053c8 	.word	0x200053c8
 800cd4c:	200053d0 	.word	0x200053d0
 800cd50:	200053cc 	.word	0x200053cc
 800cd54:	200053dc 	.word	0x200053dc

0800cd58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd60:	4b28      	ldr	r3, [pc, #160]	; (800ce04 <prvInsertBlockIntoFreeList+0xac>)
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	e002      	b.n	800cd6c <prvInsertBlockIntoFreeList+0x14>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d8f7      	bhi.n	800cd66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	4413      	add	r3, r2
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d108      	bne.n	800cd9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	441a      	add	r2, r3
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	441a      	add	r2, r3
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d118      	bne.n	800cde0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	4b15      	ldr	r3, [pc, #84]	; (800ce08 <prvInsertBlockIntoFreeList+0xb0>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d00d      	beq.n	800cdd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	441a      	add	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	e008      	b.n	800cde8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cdd6:	4b0c      	ldr	r3, [pc, #48]	; (800ce08 <prvInsertBlockIntoFreeList+0xb0>)
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	e003      	b.n	800cde8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d002      	beq.n	800cdf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdf6:	bf00      	nop
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	200053c0 	.word	0x200053c0
 800ce08:	200053c8 	.word	0x200053c8

0800ce0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce10:	2201      	movs	r2, #1
 800ce12:	4912      	ldr	r1, [pc, #72]	; (800ce5c <MX_USB_DEVICE_Init+0x50>)
 800ce14:	4812      	ldr	r0, [pc, #72]	; (800ce60 <MX_USB_DEVICE_Init+0x54>)
 800ce16:	f7fc f8ef 	bl	8008ff8 <USBD_Init>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d004      	beq.n	800ce2a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800ce20:	4b10      	ldr	r3, [pc, #64]	; (800ce64 <MX_USB_DEVICE_Init+0x58>)
 800ce22:	2201      	movs	r2, #1
 800ce24:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800ce26:	f7f5 f815 	bl	8001e54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800ce2a:	490f      	ldr	r1, [pc, #60]	; (800ce68 <MX_USB_DEVICE_Init+0x5c>)
 800ce2c:	480c      	ldr	r0, [pc, #48]	; (800ce60 <MX_USB_DEVICE_Init+0x54>)
 800ce2e:	f7fc f913 	bl	8009058 <USBD_RegisterClass>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d004      	beq.n	800ce42 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800ce38:	4b0a      	ldr	r3, [pc, #40]	; (800ce64 <MX_USB_DEVICE_Init+0x58>)
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800ce3e:	f7f5 f809 	bl	8001e54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce42:	4807      	ldr	r0, [pc, #28]	; (800ce60 <MX_USB_DEVICE_Init+0x54>)
 800ce44:	f7fc f92f 	bl	80090a6 <USBD_Start>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d004      	beq.n	800ce58 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800ce4e:	4b05      	ldr	r3, [pc, #20]	; (800ce64 <MX_USB_DEVICE_Init+0x58>)
 800ce50:	2201      	movs	r2, #1
 800ce52:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800ce54:	f7f4 fffe 	bl	8001e54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce58:	bf00      	nop
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	200000cc 	.word	0x200000cc
 800ce60:	2000548c 	.word	0x2000548c
 800ce64:	200053e0 	.word	0x200053e0
 800ce68:	20000018 	.word	0x20000018

0800ce6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	4603      	mov	r3, r0
 800ce74:	6039      	str	r1, [r7, #0]
 800ce76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	2212      	movs	r2, #18
 800ce7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce7e:	4b03      	ldr	r3, [pc, #12]	; (800ce8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr
 800ce8c:	200000e8 	.word	0x200000e8

0800ce90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	6039      	str	r1, [r7, #0]
 800ce9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	2204      	movs	r2, #4
 800cea0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cea2:	4b03      	ldr	r3, [pc, #12]	; (800ceb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr
 800ceb0:	200000fc 	.word	0x200000fc

0800ceb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	4603      	mov	r3, r0
 800cebc:	6039      	str	r1, [r7, #0]
 800cebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cec0:	79fb      	ldrb	r3, [r7, #7]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d105      	bne.n	800ced2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cec6:	683a      	ldr	r2, [r7, #0]
 800cec8:	4907      	ldr	r1, [pc, #28]	; (800cee8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ceca:	4808      	ldr	r0, [pc, #32]	; (800ceec <USBD_FS_ProductStrDescriptor+0x38>)
 800cecc:	f7fd f92b 	bl	800a126 <USBD_GetString>
 800ced0:	e004      	b.n	800cedc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	4904      	ldr	r1, [pc, #16]	; (800cee8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ced6:	4805      	ldr	r0, [pc, #20]	; (800ceec <USBD_FS_ProductStrDescriptor+0x38>)
 800ced8:	f7fd f925 	bl	800a126 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cedc:	4b02      	ldr	r3, [pc, #8]	; (800cee8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	2000575c 	.word	0x2000575c
 800ceec:	08013c30 	.word	0x08013c30

0800cef0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	4603      	mov	r3, r0
 800cef8:	6039      	str	r1, [r7, #0]
 800cefa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	4904      	ldr	r1, [pc, #16]	; (800cf10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cf00:	4804      	ldr	r0, [pc, #16]	; (800cf14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cf02:	f7fd f910 	bl	800a126 <USBD_GetString>
  return USBD_StrDesc;
 800cf06:	4b02      	ldr	r3, [pc, #8]	; (800cf10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	2000575c 	.word	0x2000575c
 800cf14:	08013c48 	.word	0x08013c48

0800cf18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	4603      	mov	r3, r0
 800cf20:	6039      	str	r1, [r7, #0]
 800cf22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	221a      	movs	r2, #26
 800cf28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cf2a:	f000 f843 	bl	800cfb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cf2e:	4b02      	ldr	r3, [pc, #8]	; (800cf38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	20000100 	.word	0x20000100

0800cf3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	6039      	str	r1, [r7, #0]
 800cf46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf48:	79fb      	ldrb	r3, [r7, #7]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d105      	bne.n	800cf5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	4907      	ldr	r1, [pc, #28]	; (800cf70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf52:	4808      	ldr	r0, [pc, #32]	; (800cf74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf54:	f7fd f8e7 	bl	800a126 <USBD_GetString>
 800cf58:	e004      	b.n	800cf64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	4904      	ldr	r1, [pc, #16]	; (800cf70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf5e:	4805      	ldr	r0, [pc, #20]	; (800cf74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf60:	f7fd f8e1 	bl	800a126 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf64:	4b02      	ldr	r3, [pc, #8]	; (800cf70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3708      	adds	r7, #8
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	2000575c 	.word	0x2000575c
 800cf74:	08013c5c 	.word	0x08013c5c

0800cf78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	4603      	mov	r3, r0
 800cf80:	6039      	str	r1, [r7, #0]
 800cf82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf84:	79fb      	ldrb	r3, [r7, #7]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d105      	bne.n	800cf96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	4907      	ldr	r1, [pc, #28]	; (800cfac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf8e:	4808      	ldr	r0, [pc, #32]	; (800cfb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf90:	f7fd f8c9 	bl	800a126 <USBD_GetString>
 800cf94:	e004      	b.n	800cfa0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	4904      	ldr	r1, [pc, #16]	; (800cfac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf9a:	4805      	ldr	r0, [pc, #20]	; (800cfb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf9c:	f7fd f8c3 	bl	800a126 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfa0:	4b02      	ldr	r3, [pc, #8]	; (800cfac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	2000575c 	.word	0x2000575c
 800cfb0:	08013c68 	.word	0x08013c68

0800cfb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cfba:	4b0f      	ldr	r3, [pc, #60]	; (800cff8 <Get_SerialNum+0x44>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cfc0:	4b0e      	ldr	r3, [pc, #56]	; (800cffc <Get_SerialNum+0x48>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cfc6:	4b0e      	ldr	r3, [pc, #56]	; (800d000 <Get_SerialNum+0x4c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d009      	beq.n	800cfee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cfda:	2208      	movs	r2, #8
 800cfdc:	4909      	ldr	r1, [pc, #36]	; (800d004 <Get_SerialNum+0x50>)
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 f814 	bl	800d00c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cfe4:	2204      	movs	r2, #4
 800cfe6:	4908      	ldr	r1, [pc, #32]	; (800d008 <Get_SerialNum+0x54>)
 800cfe8:	68b8      	ldr	r0, [r7, #8]
 800cfea:	f000 f80f 	bl	800d00c <IntToUnicode>
  }
}
 800cfee:	bf00      	nop
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	1fff7a10 	.word	0x1fff7a10
 800cffc:	1fff7a14 	.word	0x1fff7a14
 800d000:	1fff7a18 	.word	0x1fff7a18
 800d004:	20000102 	.word	0x20000102
 800d008:	20000112 	.word	0x20000112

0800d00c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b087      	sub	sp, #28
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	4613      	mov	r3, r2
 800d018:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d01e:	2300      	movs	r3, #0
 800d020:	75fb      	strb	r3, [r7, #23]
 800d022:	e027      	b.n	800d074 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	0f1b      	lsrs	r3, r3, #28
 800d028:	2b09      	cmp	r3, #9
 800d02a:	d80b      	bhi.n	800d044 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	0f1b      	lsrs	r3, r3, #28
 800d030:	b2da      	uxtb	r2, r3
 800d032:	7dfb      	ldrb	r3, [r7, #23]
 800d034:	005b      	lsls	r3, r3, #1
 800d036:	4619      	mov	r1, r3
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	440b      	add	r3, r1
 800d03c:	3230      	adds	r2, #48	; 0x30
 800d03e:	b2d2      	uxtb	r2, r2
 800d040:	701a      	strb	r2, [r3, #0]
 800d042:	e00a      	b.n	800d05a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	0f1b      	lsrs	r3, r3, #28
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	7dfb      	ldrb	r3, [r7, #23]
 800d04c:	005b      	lsls	r3, r3, #1
 800d04e:	4619      	mov	r1, r3
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	440b      	add	r3, r1
 800d054:	3237      	adds	r2, #55	; 0x37
 800d056:	b2d2      	uxtb	r2, r2
 800d058:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	011b      	lsls	r3, r3, #4
 800d05e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d060:	7dfb      	ldrb	r3, [r7, #23]
 800d062:	005b      	lsls	r3, r3, #1
 800d064:	3301      	adds	r3, #1
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	4413      	add	r3, r2
 800d06a:	2200      	movs	r2, #0
 800d06c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d06e:	7dfb      	ldrb	r3, [r7, #23]
 800d070:	3301      	adds	r3, #1
 800d072:	75fb      	strb	r3, [r7, #23]
 800d074:	7dfa      	ldrb	r2, [r7, #23]
 800d076:	79fb      	ldrb	r3, [r7, #7]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d3d3      	bcc.n	800d024 <IntToUnicode+0x18>
  }
}
 800d07c:	bf00      	nop
 800d07e:	bf00      	nop
 800d080:	371c      	adds	r7, #28
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
	...

0800d08c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08a      	sub	sp, #40	; 0x28
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d094:	f107 0314 	add.w	r3, r7, #20
 800d098:	2200      	movs	r2, #0
 800d09a:	601a      	str	r2, [r3, #0]
 800d09c:	605a      	str	r2, [r3, #4]
 800d09e:	609a      	str	r2, [r3, #8]
 800d0a0:	60da      	str	r2, [r3, #12]
 800d0a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0ac:	d13a      	bne.n	800d124 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	613b      	str	r3, [r7, #16]
 800d0b2:	4b1e      	ldr	r3, [pc, #120]	; (800d12c <HAL_PCD_MspInit+0xa0>)
 800d0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b6:	4a1d      	ldr	r2, [pc, #116]	; (800d12c <HAL_PCD_MspInit+0xa0>)
 800d0b8:	f043 0301 	orr.w	r3, r3, #1
 800d0bc:	6313      	str	r3, [r2, #48]	; 0x30
 800d0be:	4b1b      	ldr	r3, [pc, #108]	; (800d12c <HAL_PCD_MspInit+0xa0>)
 800d0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0c2:	f003 0301 	and.w	r3, r3, #1
 800d0c6:	613b      	str	r3, [r7, #16]
 800d0c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d0ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d0ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0d0:	2302      	movs	r3, #2
 800d0d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0d8:	2303      	movs	r3, #3
 800d0da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d0dc:	230a      	movs	r3, #10
 800d0de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0e0:	f107 0314 	add.w	r3, r7, #20
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	4812      	ldr	r0, [pc, #72]	; (800d130 <HAL_PCD_MspInit+0xa4>)
 800d0e8:	f7f5 fd3a 	bl	8002b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d0ec:	4b0f      	ldr	r3, [pc, #60]	; (800d12c <HAL_PCD_MspInit+0xa0>)
 800d0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0f0:	4a0e      	ldr	r2, [pc, #56]	; (800d12c <HAL_PCD_MspInit+0xa0>)
 800d0f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0f6:	6353      	str	r3, [r2, #52]	; 0x34
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	4b0b      	ldr	r3, [pc, #44]	; (800d12c <HAL_PCD_MspInit+0xa0>)
 800d0fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d100:	4a0a      	ldr	r2, [pc, #40]	; (800d12c <HAL_PCD_MspInit+0xa0>)
 800d102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d106:	6453      	str	r3, [r2, #68]	; 0x44
 800d108:	4b08      	ldr	r3, [pc, #32]	; (800d12c <HAL_PCD_MspInit+0xa0>)
 800d10a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d10c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d110:	60fb      	str	r3, [r7, #12]
 800d112:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d114:	2200      	movs	r2, #0
 800d116:	2105      	movs	r1, #5
 800d118:	2043      	movs	r0, #67	; 0x43
 800d11a:	f7f5 fcf7 	bl	8002b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d11e:	2043      	movs	r0, #67	; 0x43
 800d120:	f7f5 fd10 	bl	8002b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d124:	bf00      	nop
 800d126:	3728      	adds	r7, #40	; 0x28
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	40023800 	.word	0x40023800
 800d130:	40020000 	.word	0x40020000

0800d134 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d148:	4619      	mov	r1, r3
 800d14a:	4610      	mov	r0, r2
 800d14c:	f7fb fff6 	bl	800913c <USBD_LL_SetupStage>
}
 800d150:	bf00      	nop
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	460b      	mov	r3, r1
 800d162:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d16a:	78fa      	ldrb	r2, [r7, #3]
 800d16c:	6879      	ldr	r1, [r7, #4]
 800d16e:	4613      	mov	r3, r2
 800d170:	00db      	lsls	r3, r3, #3
 800d172:	1a9b      	subs	r3, r3, r2
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	440b      	add	r3, r1
 800d178:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	78fb      	ldrb	r3, [r7, #3]
 800d180:	4619      	mov	r1, r3
 800d182:	f7fc f830 	bl	80091e6 <USBD_LL_DataOutStage>
}
 800d186:	bf00      	nop
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b082      	sub	sp, #8
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	460b      	mov	r3, r1
 800d198:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d1a0:	78fa      	ldrb	r2, [r7, #3]
 800d1a2:	6879      	ldr	r1, [r7, #4]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	00db      	lsls	r3, r3, #3
 800d1a8:	1a9b      	subs	r3, r3, r2
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	440b      	add	r3, r1
 800d1ae:	3348      	adds	r3, #72	; 0x48
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	78fb      	ldrb	r3, [r7, #3]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	f7fc f879 	bl	80092ac <USBD_LL_DataInStage>
}
 800d1ba:	bf00      	nop
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b082      	sub	sp, #8
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fc f98d 	bl	80094f0 <USBD_LL_SOF>
}
 800d1d6:	bf00      	nop
 800d1d8:	3708      	adds	r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b084      	sub	sp, #16
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d102      	bne.n	800d1f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	73fb      	strb	r3, [r7, #15]
 800d1f6:	e008      	b.n	800d20a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d102      	bne.n	800d206 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d200:	2301      	movs	r3, #1
 800d202:	73fb      	strb	r3, [r7, #15]
 800d204:	e001      	b.n	800d20a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d206:	f7f4 fe25 	bl	8001e54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d210:	7bfa      	ldrb	r2, [r7, #15]
 800d212:	4611      	mov	r1, r2
 800d214:	4618      	mov	r0, r3
 800d216:	f7fc f92d 	bl	8009474 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d220:	4618      	mov	r0, r3
 800d222:	f7fc f8d9 	bl	80093d8 <USBD_LL_Reset>
}
 800d226:	bf00      	nop
 800d228:	3710      	adds	r7, #16
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
	...

0800d230 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fc f928 	bl	8009494 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	6812      	ldr	r2, [r2, #0]
 800d252:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d256:	f043 0301 	orr.w	r3, r3, #1
 800d25a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6a1b      	ldr	r3, [r3, #32]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d005      	beq.n	800d270 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d264:	4b04      	ldr	r3, [pc, #16]	; (800d278 <HAL_PCD_SuspendCallback+0x48>)
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	4a03      	ldr	r2, [pc, #12]	; (800d278 <HAL_PCD_SuspendCallback+0x48>)
 800d26a:	f043 0306 	orr.w	r3, r3, #6
 800d26e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	e000ed00 	.word	0xe000ed00

0800d27c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fc f918 	bl	80094c0 <USBD_LL_Resume>
}
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2aa:	78fa      	ldrb	r2, [r7, #3]
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fc f966 	bl	8009580 <USBD_LL_IsoOUTIncomplete>
}
 800d2b4:	bf00      	nop
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2ce:	78fa      	ldrb	r2, [r7, #3]
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fc f92e 	bl	8009534 <USBD_LL_IsoINIncomplete>
}
 800d2d8:	bf00      	nop
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fc f96c 	bl	80095cc <USBD_LL_DevConnected>
}
 800d2f4:	bf00      	nop
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7fc f969 	bl	80095e2 <USBD_LL_DevDisconnected>
}
 800d310:	bf00      	nop
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	2b01      	cmp	r3, #1
 800d326:	d13c      	bne.n	800d3a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d328:	4a20      	ldr	r2, [pc, #128]	; (800d3ac <USBD_LL_Init+0x94>)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a1e      	ldr	r2, [pc, #120]	; (800d3ac <USBD_LL_Init+0x94>)
 800d334:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d338:	4b1c      	ldr	r3, [pc, #112]	; (800d3ac <USBD_LL_Init+0x94>)
 800d33a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d33e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d340:	4b1a      	ldr	r3, [pc, #104]	; (800d3ac <USBD_LL_Init+0x94>)
 800d342:	2206      	movs	r2, #6
 800d344:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d346:	4b19      	ldr	r3, [pc, #100]	; (800d3ac <USBD_LL_Init+0x94>)
 800d348:	2202      	movs	r2, #2
 800d34a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d34c:	4b17      	ldr	r3, [pc, #92]	; (800d3ac <USBD_LL_Init+0x94>)
 800d34e:	2200      	movs	r2, #0
 800d350:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d352:	4b16      	ldr	r3, [pc, #88]	; (800d3ac <USBD_LL_Init+0x94>)
 800d354:	2202      	movs	r2, #2
 800d356:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d358:	4b14      	ldr	r3, [pc, #80]	; (800d3ac <USBD_LL_Init+0x94>)
 800d35a:	2200      	movs	r2, #0
 800d35c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d35e:	4b13      	ldr	r3, [pc, #76]	; (800d3ac <USBD_LL_Init+0x94>)
 800d360:	2200      	movs	r2, #0
 800d362:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d364:	4b11      	ldr	r3, [pc, #68]	; (800d3ac <USBD_LL_Init+0x94>)
 800d366:	2200      	movs	r2, #0
 800d368:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d36a:	4b10      	ldr	r3, [pc, #64]	; (800d3ac <USBD_LL_Init+0x94>)
 800d36c:	2200      	movs	r2, #0
 800d36e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d370:	4b0e      	ldr	r3, [pc, #56]	; (800d3ac <USBD_LL_Init+0x94>)
 800d372:	2200      	movs	r2, #0
 800d374:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d376:	480d      	ldr	r0, [pc, #52]	; (800d3ac <USBD_LL_Init+0x94>)
 800d378:	f7f6 fa13 	bl	80037a2 <HAL_PCD_Init>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d001      	beq.n	800d386 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d382:	f7f4 fd67 	bl	8001e54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d386:	2180      	movs	r1, #128	; 0x80
 800d388:	4808      	ldr	r0, [pc, #32]	; (800d3ac <USBD_LL_Init+0x94>)
 800d38a:	f7f7 fb8c 	bl	8004aa6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d38e:	2240      	movs	r2, #64	; 0x40
 800d390:	2100      	movs	r1, #0
 800d392:	4806      	ldr	r0, [pc, #24]	; (800d3ac <USBD_LL_Init+0x94>)
 800d394:	f7f7 fb40 	bl	8004a18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d398:	2280      	movs	r2, #128	; 0x80
 800d39a:	2101      	movs	r1, #1
 800d39c:	4803      	ldr	r0, [pc, #12]	; (800d3ac <USBD_LL_Init+0x94>)
 800d39e:	f7f7 fb3b 	bl	8004a18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3708      	adds	r7, #8
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	2000595c 	.word	0x2000595c

0800d3b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7f6 fb0f 	bl	80039ea <HAL_PCD_Start>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3d0:	7bfb      	ldrb	r3, [r7, #15]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 f97e 	bl	800d6d4 <USBD_Get_USB_Status>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b084      	sub	sp, #16
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
 800d3ee:	4608      	mov	r0, r1
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	70fb      	strb	r3, [r7, #3]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	70bb      	strb	r3, [r7, #2]
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d400:	2300      	movs	r3, #0
 800d402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d404:	2300      	movs	r3, #0
 800d406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d40e:	78bb      	ldrb	r3, [r7, #2]
 800d410:	883a      	ldrh	r2, [r7, #0]
 800d412:	78f9      	ldrb	r1, [r7, #3]
 800d414:	f7f6 ff20 	bl	8004258 <HAL_PCD_EP_Open>
 800d418:	4603      	mov	r3, r0
 800d41a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
 800d41e:	4618      	mov	r0, r3
 800d420:	f000 f958 	bl	800d6d4 <USBD_Get_USB_Status>
 800d424:	4603      	mov	r3, r0
 800d426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d428:	7bbb      	ldrb	r3, [r7, #14]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d432:	b580      	push	{r7, lr}
 800d434:	b084      	sub	sp, #16
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
 800d43a:	460b      	mov	r3, r1
 800d43c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d43e:	2300      	movs	r3, #0
 800d440:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d442:	2300      	movs	r3, #0
 800d444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d44c:	78fa      	ldrb	r2, [r7, #3]
 800d44e:	4611      	mov	r1, r2
 800d450:	4618      	mov	r0, r3
 800d452:	f7f6 ff69 	bl	8004328 <HAL_PCD_EP_Close>
 800d456:	4603      	mov	r3, r0
 800d458:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f000 f939 	bl	800d6d4 <USBD_Get_USB_Status>
 800d462:	4603      	mov	r3, r0
 800d464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d466:	7bbb      	ldrb	r3, [r7, #14]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	460b      	mov	r3, r1
 800d47a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d47c:	2300      	movs	r3, #0
 800d47e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d48a:	78fa      	ldrb	r2, [r7, #3]
 800d48c:	4611      	mov	r1, r2
 800d48e:	4618      	mov	r0, r3
 800d490:	f7f7 f829 	bl	80044e6 <HAL_PCD_EP_SetStall>
 800d494:	4603      	mov	r3, r0
 800d496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d498:	7bfb      	ldrb	r3, [r7, #15]
 800d49a:	4618      	mov	r0, r3
 800d49c:	f000 f91a 	bl	800d6d4 <USBD_Get_USB_Status>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b084      	sub	sp, #16
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4c8:	78fa      	ldrb	r2, [r7, #3]
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7f7 f86e 	bl	80045ae <HAL_PCD_EP_ClrStall>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4d6:	7bfb      	ldrb	r3, [r7, #15]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f000 f8fb 	bl	800d6d4 <USBD_Get_USB_Status>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3710      	adds	r7, #16
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d504:	2b00      	cmp	r3, #0
 800d506:	da0b      	bge.n	800d520 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d508:	78fb      	ldrb	r3, [r7, #3]
 800d50a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d50e:	68f9      	ldr	r1, [r7, #12]
 800d510:	4613      	mov	r3, r2
 800d512:	00db      	lsls	r3, r3, #3
 800d514:	1a9b      	subs	r3, r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	440b      	add	r3, r1
 800d51a:	333e      	adds	r3, #62	; 0x3e
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	e00b      	b.n	800d538 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d520:	78fb      	ldrb	r3, [r7, #3]
 800d522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d526:	68f9      	ldr	r1, [r7, #12]
 800d528:	4613      	mov	r3, r2
 800d52a:	00db      	lsls	r3, r3, #3
 800d52c:	1a9b      	subs	r3, r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	440b      	add	r3, r1
 800d532:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d536:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3714      	adds	r7, #20
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	460b      	mov	r3, r1
 800d54e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d550:	2300      	movs	r3, #0
 800d552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d554:	2300      	movs	r3, #0
 800d556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d55e:	78fa      	ldrb	r2, [r7, #3]
 800d560:	4611      	mov	r1, r2
 800d562:	4618      	mov	r0, r3
 800d564:	f7f6 fe53 	bl	800420e <HAL_PCD_SetAddress>
 800d568:	4603      	mov	r3, r0
 800d56a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d56c:	7bfb      	ldrb	r3, [r7, #15]
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 f8b0 	bl	800d6d4 <USBD_Get_USB_Status>
 800d574:	4603      	mov	r3, r0
 800d576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d578:	7bbb      	ldrb	r3, [r7, #14]
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3710      	adds	r7, #16
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b086      	sub	sp, #24
 800d586:	af00      	add	r7, sp, #0
 800d588:	60f8      	str	r0, [r7, #12]
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	603b      	str	r3, [r7, #0]
 800d58e:	460b      	mov	r3, r1
 800d590:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d592:	2300      	movs	r3, #0
 800d594:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d596:	2300      	movs	r3, #0
 800d598:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d5a0:	7af9      	ldrb	r1, [r7, #11]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	f7f6 ff54 	bl	8004452 <HAL_PCD_EP_Transmit>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5ae:	7dfb      	ldrb	r3, [r7, #23]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f000 f88f 	bl	800d6d4 <USBD_Get_USB_Status>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3718      	adds	r7, #24
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b086      	sub	sp, #24
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	607a      	str	r2, [r7, #4]
 800d5ce:	603b      	str	r3, [r7, #0]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d5e2:	7af9      	ldrb	r1, [r7, #11]
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	f7f6 fee8 	bl	80043bc <HAL_PCD_EP_Receive>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5f0:	7dfb      	ldrb	r3, [r7, #23]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f000 f86e 	bl	800d6d4 <USBD_Get_USB_Status>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3718      	adds	r7, #24
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
	...

0800d608 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	460b      	mov	r3, r1
 800d612:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d614:	78fb      	ldrb	r3, [r7, #3]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d002      	beq.n	800d620 <HAL_PCDEx_LPM_Callback+0x18>
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d01f      	beq.n	800d65e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d61e:	e03b      	b.n	800d698 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6a1b      	ldr	r3, [r3, #32]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d007      	beq.n	800d638 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d628:	f7f3 fc1e 	bl	8000e68 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d62c:	4b1c      	ldr	r3, [pc, #112]	; (800d6a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	4a1b      	ldr	r2, [pc, #108]	; (800d6a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d632:	f023 0306 	bic.w	r3, r3, #6
 800d636:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	6812      	ldr	r2, [r2, #0]
 800d646:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d64a:	f023 0301 	bic.w	r3, r3, #1
 800d64e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d656:	4618      	mov	r0, r3
 800d658:	f7fb ff32 	bl	80094c0 <USBD_LL_Resume>
    break;
 800d65c:	e01c      	b.n	800d698 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	6812      	ldr	r2, [r2, #0]
 800d66c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d670:	f043 0301 	orr.w	r3, r3, #1
 800d674:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7fb ff09 	bl	8009494 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6a1b      	ldr	r3, [r3, #32]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d005      	beq.n	800d696 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d68a:	4b05      	ldr	r3, [pc, #20]	; (800d6a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d68c:	691b      	ldr	r3, [r3, #16]
 800d68e:	4a04      	ldr	r2, [pc, #16]	; (800d6a0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d690:	f043 0306 	orr.w	r3, r3, #6
 800d694:	6113      	str	r3, [r2, #16]
    break;
 800d696:	bf00      	nop
}
 800d698:	bf00      	nop
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	e000ed00 	.word	0xe000ed00

0800d6a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d6ac:	4b03      	ldr	r3, [pc, #12]	; (800d6bc <USBD_static_malloc+0x18>)
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	370c      	adds	r7, #12
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	200053e4 	.word	0x200053e4

0800d6c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]

}
 800d6c8:	bf00      	nop
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	2b03      	cmp	r3, #3
 800d6e6:	d817      	bhi.n	800d718 <USBD_Get_USB_Status+0x44>
 800d6e8:	a201      	add	r2, pc, #4	; (adr r2, 800d6f0 <USBD_Get_USB_Status+0x1c>)
 800d6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ee:	bf00      	nop
 800d6f0:	0800d701 	.word	0x0800d701
 800d6f4:	0800d707 	.word	0x0800d707
 800d6f8:	0800d70d 	.word	0x0800d70d
 800d6fc:	0800d713 	.word	0x0800d713
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d700:	2300      	movs	r3, #0
 800d702:	73fb      	strb	r3, [r7, #15]
    break;
 800d704:	e00b      	b.n	800d71e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d706:	2303      	movs	r3, #3
 800d708:	73fb      	strb	r3, [r7, #15]
    break;
 800d70a:	e008      	b.n	800d71e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d70c:	2301      	movs	r3, #1
 800d70e:	73fb      	strb	r3, [r7, #15]
    break;
 800d710:	e005      	b.n	800d71e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d712:	2303      	movs	r3, #3
 800d714:	73fb      	strb	r3, [r7, #15]
    break;
 800d716:	e002      	b.n	800d71e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d718:	2303      	movs	r3, #3
 800d71a:	73fb      	strb	r3, [r7, #15]
    break;
 800d71c:	bf00      	nop
  }
  return usb_status;
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3714      	adds	r7, #20
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	4608      	mov	r0, r1
 800d736:	4611      	mov	r1, r2
 800d738:	461a      	mov	r2, r3
 800d73a:	4603      	mov	r3, r0
 800d73c:	70fb      	strb	r3, [r7, #3]
 800d73e:	460b      	mov	r3, r1
 800d740:	70bb      	strb	r3, [r7, #2]
 800d742:	4613      	mov	r3, r2
 800d744:	707b      	strb	r3, [r7, #1]
                return 0;
 800d746:	2300      	movs	r3, #0
        }
 800d748:	4618      	mov	r0, r3
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	4608      	mov	r0, r1
 800d75e:	4611      	mov	r1, r2
 800d760:	461a      	mov	r2, r3
 800d762:	4603      	mov	r3, r0
 800d764:	70fb      	strb	r3, [r7, #3]
 800d766:	460b      	mov	r3, r1
 800d768:	70bb      	strb	r3, [r7, #2]
 800d76a:	4613      	mov	r3, r2
 800d76c:	707b      	strb	r3, [r7, #1]
                return 0;
 800d76e:	2300      	movs	r3, #0
        }
 800d770:	4618      	mov	r0, r3
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
                return 0;
 800d784:	2300      	movs	r3, #0
        }
 800d786:	4618      	mov	r0, r3
 800d788:	370c      	adds	r7, #12
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr

0800d792 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800d792:	b480      	push	{r7}
 800d794:	b083      	sub	sp, #12
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
                return 0;
 800d79a:	2300      	movs	r3, #0
        }
 800d79c:	4618      	mov	r0, r3
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
                return 0;
 800d7b0:	2300      	movs	r3, #0
        }
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr

0800d7be <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800d7be:	b480      	push	{r7}
 800d7c0:	b083      	sub	sp, #12
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	70fb      	strb	r3, [r7, #3]
                return;
 800d7ca:	bf00      	nop
        } // Note used for hubs only!
 800d7cc:	370c      	adds	r7, #12
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr

0800d7d6 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800d7d6:	b480      	push	{r7}
 800d7d8:	b083      	sub	sp, #12
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
 800d7de:	460b      	mov	r3, r1
 800d7e0:	807b      	strh	r3, [r7, #2]
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	803b      	strh	r3, [r7, #0]
                return false;
 800d7e6:	2300      	movs	r3, #0
        }
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	70fb      	strb	r3, [r7, #3]
                return false;
 800d800:	2300      	movs	r3, #0
        }
 800d802:	4618      	mov	r0, r3
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	460b      	mov	r3, r1
 800d818:	70fb      	strb	r3, [r7, #3]
                return true;
 800d81a:	2301      	movs	r3, #1
        }
 800d81c:	4618      	mov	r0, r3
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800d830:	687b      	ldr	r3, [r7, #4]
        };
 800d832:	4618      	mov	r0, r3
 800d834:	370c      	adds	r7, #12
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr

0800d83e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800d83e:	b480      	push	{r7}
 800d840:	b085      	sub	sp, #20
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d848:	2300      	movs	r3, #0
 800d84a:	73fb      	strb	r3, [r7, #15]
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	2b0f      	cmp	r3, #15
 800d850:	d812      	bhi.n	800d878 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800d852:	7bfa      	ldrb	r2, [r7, #15]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	321e      	adds	r2, #30
 800d858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d107      	bne.n	800d870 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800d860:	7bfa      	ldrb	r2, [r7, #15]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	321e      	adds	r2, #30
 800d866:	6839      	ldr	r1, [r7, #0]
 800d868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800d86c:	2300      	movs	r3, #0
 800d86e:	e004      	b.n	800d87a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d870:	7bfb      	ldrb	r3, [r7, #15]
 800d872:	3301      	adds	r3, #1
 800d874:	73fb      	strb	r3, [r7, #15]
 800d876:	e7e9      	b.n	800d84c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800d878:	23d3      	movs	r3, #211	; 0xd3
        };
 800d87a:	4618      	mov	r0, r3
 800d87c:	3714      	adds	r7, #20
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr

0800d886 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800d886:	b480      	push	{r7}
 800d888:	b083      	sub	sp, #12
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	701a      	strb	r2, [r3, #0]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	705a      	strb	r2, [r3, #1]
 800d89a:	2200      	movs	r2, #0
 800d89c:	709a      	strb	r2, [r3, #2]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	70da      	strb	r2, [r3, #3]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	711a      	strb	r2, [r3, #4]
        };
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	601a      	str	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	711a      	strb	r2, [r3, #4]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	715a      	strb	r2, [r3, #5]
        };
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	781a      	ldrb	r2, [r3, #0]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	715a      	strb	r2, [r3, #5]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	795a      	ldrb	r2, [r3, #5]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	711a      	strb	r2, [r3, #4]
        };
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	711a      	strb	r2, [r3, #4]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	80da      	strh	r2, [r3, #6]
        };
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4618      	mov	r0, r3
 800d92a:	370c      	adds	r7, #12
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	80da      	strh	r2, [r3, #6]
        };
 800d94e:	bf00      	nop
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800d95a:	b480      	push	{r7}
 800d95c:	b085      	sub	sp, #20
 800d95e:	af00      	add	r7, sp, #0
 800d960:	60f8      	str	r0, [r7, #12]
 800d962:	60b9      	str	r1, [r7, #8]
 800d964:	607a      	str	r2, [r7, #4]
 800d966:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	791b      	ldrb	r3, [r3, #4]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d002      	beq.n	800d976 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800d970:	2b01      	cmp	r3, #1
 800d972:	d009      	beq.n	800d988 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800d974:	e029      	b.n	800d9ca <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	887a      	ldrh	r2, [r7, #2]
 800d97a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	791b      	ldrb	r3, [r3, #4]
 800d980:	3301      	adds	r3, #1
 800d982:	b2da      	uxtb	r2, r3
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	88db      	ldrh	r3, [r3, #6]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d015      	beq.n	800d9bc <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	881b      	ldrh	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d011      	beq.n	800d9bc <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	88db      	ldrh	r3, [r3, #6]
 800d99c:	3b01      	subs	r3, #1
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	80da      	strh	r2, [r3, #6]
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	1c5a      	adds	r2, r3, #1
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	881b      	ldrh	r3, [r3, #0]
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	801a      	strh	r2, [r3, #0]
 800d9ba:	e7e5      	b.n	800d988 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	88db      	ldrh	r3, [r3, #6]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d102      	bne.n	800d9ca <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	88db      	ldrh	r3, [r3, #6]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	bf0c      	ite	eq
 800d9d2:	2301      	moveq	r3, #1
 800d9d4:	2300      	movne	r3, #0
 800d9d6:	b2db      	uxtb	r3, r3
        };
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	4608      	mov	r0, r1
 800d9ee:	4611      	mov	r1, r2
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	70fb      	strb	r3, [r7, #3]
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	70bb      	strb	r3, [r7, #2]
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	707b      	strb	r3, [r7, #1]
        };
 800d9fe:	bf00      	nop
 800da00:	370c      	adds	r7, #12
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
	...

0800da0c <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	4a04      	ldr	r2, [pc, #16]	; (800da28 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	601a      	str	r2, [r3, #0]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4618      	mov	r0, r3
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr
 800da28:	08014c38 	.word	0x08014c38

0800da2c <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	4a04      	ldr	r2, [pc, #16]	; (800da48 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	601a      	str	r2, [r3, #0]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4618      	mov	r0, r3
 800da3e:	370c      	adds	r7, #12
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr
 800da48:	08014c20 	.word	0x08014c20

0800da4c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
                return bAddress;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800da5a:	4618      	mov	r0, r3
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800da66:	b480      	push	{r7}
 800da68:	b083      	sub	sp, #12
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800da74:	4618      	mov	r0, r3
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	460b      	mov	r3, r1
 800da8a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800da8c:	78fb      	ldrb	r3, [r7, #3]
 800da8e:	2be0      	cmp	r3, #224	; 0xe0
 800da90:	bf0c      	ite	eq
 800da92:	2301      	moveq	r3, #1
 800da94:	2300      	movne	r3, #0
 800da96:	b2db      	uxtb	r3, r3
        };
 800da98:	4618      	mov	r0, r3
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	460b      	mov	r3, r1
 800daae:	807b      	strh	r3, [r7, #2]
 800dab0:	4613      	mov	r3, r2
 800dab2:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800dab4:	887b      	ldrh	r3, [r7, #2]
 800dab6:	f640 225c 	movw	r2, #2652	; 0xa5c
 800daba:	4293      	cmp	r3, r2
 800dabc:	d104      	bne.n	800dac8 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800dabe:	883b      	ldrh	r3, [r7, #0]
 800dac0:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d009      	beq.n	800dadc <_ZN3BTD8VIDPIDOKEtt+0x38>
 800dac8:	887b      	ldrh	r3, [r7, #2]
 800daca:	f240 520d 	movw	r2, #1293	; 0x50d
 800dace:	4293      	cmp	r3, r2
 800dad0:	d106      	bne.n	800dae0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800dad2:	883b      	ldrh	r3, [r7, #0]
 800dad4:	f240 625a 	movw	r2, #1626	; 0x65a
 800dad8:	4293      	cmp	r3, r2
 800dada:	d101      	bne.n	800dae0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800dadc:	2301      	movs	r3, #1
 800dade:	e02d      	b.n	800db3c <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	7d1b      	ldrb	r3, [r3, #20]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d113      	bne.n	800db10 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	7d5b      	ldrb	r3, [r3, #21]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d10f      	bne.n	800db10 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	7d9b      	ldrb	r3, [r3, #22]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10b      	bne.n	800db10 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7ddb      	ldrb	r3, [r3, #23]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d107      	bne.n	800db10 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	7e1b      	ldrb	r3, [r3, #24]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d103      	bne.n	800db10 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	7e5b      	ldrb	r3, [r3, #25]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d014      	beq.n	800db3a <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800db10:	887b      	ldrh	r3, [r7, #2]
 800db12:	f240 524c 	movw	r2, #1356	; 0x54c
 800db16:	4293      	cmp	r3, r2
 800db18:	d10f      	bne.n	800db3a <_ZN3BTD8VIDPIDOKEtt+0x96>
 800db1a:	883b      	ldrh	r3, [r7, #0]
 800db1c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800db20:	d009      	beq.n	800db36 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800db22:	883b      	ldrh	r3, [r7, #0]
 800db24:	f240 422f 	movw	r2, #1071	; 0x42f
 800db28:	4293      	cmp	r3, r2
 800db2a:	d004      	beq.n	800db36 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800db2c:	883b      	ldrh	r3, [r7, #0]
 800db2e:	f240 32d5 	movw	r2, #981	; 0x3d5
 800db32:	4293      	cmp	r3, r2
 800db34:	d101      	bne.n	800db3a <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800db36:	2301      	movs	r3, #1
 800db38:	e000      	b.n	800db3c <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800db3a:	2300      	movs	r3, #0
        };
 800db3c:	4618      	mov	r0, r3
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4618      	mov	r0, r3
 800db56:	f7ff ff59 	bl	800da0c <_ZN15USBDeviceConfigC1Ev>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	3304      	adds	r3, #4
 800db5e:	4618      	mov	r0, r3
 800db60:	f7ff ff64 	bl	800da2c <_ZN17UsbConfigXtracterC1Ev>
 800db64:	4a2b      	ldr	r2, [pc, #172]	; (800dc14 <_ZN3BTDC1EP3USB+0xcc>)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	601a      	str	r2, [r3, #0]
 800db6a:	4a2b      	ldr	r2, [pc, #172]	; (800dc18 <_ZN3BTDC1EP3USB+0xd0>)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	605a      	str	r2, [r3, #4]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	683a      	ldr	r2, [r7, #0]
 800db9c:	64da      	str	r2, [r3, #76]	; 0x4c
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	661a      	str	r2, [r3, #96]	; 0x60
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dbcc:	2300      	movs	r3, #0
 800dbce:	73fb      	strb	r3, [r7, #15]
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	d80a      	bhi.n	800dbec <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800dbd6:	7bfb      	ldrb	r3, [r7, #15]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	3318      	adds	r3, #24
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4413      	add	r3, r2
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dbe4:	7bfb      	ldrb	r3, [r7, #15]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	73fb      	strb	r3, [r7, #15]
 800dbea:	e7f1      	b.n	800dbd0 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 fa7d 	bl	800e0ec <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d006      	beq.n	800dc08 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	4611      	mov	r1, r2
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7ff fe1b 	bl	800d83e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	08014be0 	.word	0x08014be0
 800dc18:	08014c14 	.word	0x08014c14

0800dc1c <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800dc1c:	b590      	push	{r4, r7, lr}
 800dc1e:	b08f      	sub	sp, #60	; 0x3c
 800dc20:	af02      	add	r7, sp, #8
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	4608      	mov	r0, r1
 800dc26:	4611      	mov	r1, r2
 800dc28:	461a      	mov	r2, r3
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	70fb      	strb	r3, [r7, #3]
 800dc2e:	460b      	mov	r3, r1
 800dc30:	70bb      	strb	r3, [r7, #2]
 800dc32:	4613      	mov	r3, r2
 800dc34:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800dc36:	2312      	movs	r3, #18
 800dc38:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800dc3c:	f107 0308 	add.w	r3, r7, #8
 800dc40:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800dc42:	2300      	movs	r3, #0
 800dc44:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800dc46:	2300      	movs	r3, #0
 800dc48:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fa4e 	bl	800e0ec <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7ff fde7 	bl	800d828 <_ZN3USB14GetAddressPoolEv>
 800dc5a:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800dc66:	23d9      	movs	r3, #217	; 0xd9
 800dc68:	e087      	b.n	800dd7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2100      	movs	r1, #0
 800dc72:	69f8      	ldr	r0, [r7, #28]
 800dc74:	4798      	blx	r3
 800dc76:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d101      	bne.n	800dc82 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dc7e:	23d6      	movs	r3, #214	; 0xd6
 800dc80:	e07b      	b.n	800dd7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800dc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d101      	bne.n	800dc8e <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800dc8a:	23d7      	movs	r3, #215	; 0xd7
 800dc8c:	e075      	b.n	800dd7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca0:	787a      	ldrb	r2, [r7, #1]
 800dca2:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dca8:	f107 0308 	add.w	r3, r7, #8
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	2312      	movs	r3, #18
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	f005 fa13 	bl	80130de <_ZN3USB11getDevDescrEhhtPh>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc0:	6a3a      	ldr	r2, [r7, #32]
 800dcc2:	601a      	str	r2, [r3, #0]

        if(rcode)
 800dcc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d146      	bne.n	800dd5a <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	681c      	ldr	r4, [r3, #0]
 800dcd4:	78bb      	ldrb	r3, [r7, #2]
 800dcd6:	78f9      	ldrb	r1, [r7, #3]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	69f8      	ldr	r0, [r7, #28]
 800dcdc:	47a0      	blx	r4
 800dcde:	4603      	mov	r3, r0
 800dce0:	461a      	mov	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d101      	bne.n	800dcf6 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800dcf2:	23d4      	movs	r3, #212	; 0xd4
 800dcf4:	e041      	b.n	800dd7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800dcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf8:	791b      	ldrb	r3, [r3, #4]
 800dcfa:	2b09      	cmp	r3, #9
 800dcfc:	d017      	beq.n	800dd2e <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800dcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd00:	79da      	ldrb	r2, [r3, #7]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800dd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0a:	7c5a      	ldrb	r2, [r3, #17]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800dd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd14:	891b      	ldrh	r3, [r3, #8]
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800dd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd20:	895b      	ldrh	r3, [r3, #10]
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800dd2a:	23e0      	movs	r3, #224	; 0xe0
 800dd2c:	e025      	b.n	800dd7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800dd2e:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f005 fa6b 	bl	8013218 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800dd42:	23d1      	movs	r3, #209	; 0xd1
 800dd44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3308      	adds	r3, #8
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	4798      	blx	r3
        return rcode;
 800dd54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd58:	e00f      	b.n	800dd7a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800dd5a:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800dd5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd60:	2b0d      	cmp	r3, #13
 800dd62:	d002      	beq.n	800dd6a <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800dd64:	23e1      	movs	r3, #225	; 0xe1
 800dd66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	3308      	adds	r3, #8
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	4798      	blx	r3
        return rcode;
 800dd76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3734      	adds	r7, #52	; 0x34
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd90      	pop	{r4, r7, pc}

0800dd82 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b096      	sub	sp, #88	; 0x58
 800dd86:	af02      	add	r7, sp, #8
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	4608      	mov	r0, r1
 800dd8c:	4611      	mov	r1, r2
 800dd8e:	461a      	mov	r2, r3
 800dd90:	4603      	mov	r3, r0
 800dd92:	70fb      	strb	r3, [r7, #3]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70bb      	strb	r3, [r7, #2]
 800dd98:	4613      	mov	r3, r2
 800dd9a:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dda2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7ff fd38 	bl	800d828 <_ZN3USB14GetAddressPoolEv>
 800ddb8:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800ddba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ddca:	4798      	blx	r3
 800ddcc:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800ddce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d101      	bne.n	800ddd8 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ddd4:	23d6      	movs	r3, #214	; 0xd6
 800ddd6:	e185      	b.n	800e0e4 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800ddd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800dddc:	f7f4 fdba 	bl	8002954 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ddea:	2200      	movs	r2, #0
 800ddec:	2100      	movs	r1, #0
 800ddee:	f005 fa13 	bl	8013218 <_ZN3USB7setAddrEhhh>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800ddf8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d003      	beq.n	800de08 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800de00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de02:	2200      	movs	r2, #0
 800de04:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800de06:	e165      	b.n	800e0d4 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800de08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de0a:	2200      	movs	r2, #0
 800de0c:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800de0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800de1a:	4611      	mov	r1, r2
 800de1c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800de1e:	4798      	blx	r3
 800de20:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800de22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de24:	2b00      	cmp	r3, #0
 800de26:	d101      	bne.n	800de2c <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800de28:	23d6      	movs	r3, #214	; 0xd6
 800de2a:	e15b      	b.n	800e0e4 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800de2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de2e:	787a      	ldrb	r2, [r7, #1]
 800de30:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3351      	adds	r3, #81	; 0x51
 800de40:	2201      	movs	r2, #1
 800de42:	f004 f8dc 	bl	8011ffe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800de46:	4603      	mov	r3, r0
 800de48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800de4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de50:	2b00      	cmp	r3, #0
 800de52:	f040 8128 	bne.w	800e0a6 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800de5c:	f240 524c 	movw	r2, #1356	; 0x54c
 800de60:	4293      	cmp	r3, r2
 800de62:	d177      	bne.n	800df54 <_ZN3BTD4InitEhhb+0x1d2>
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800de6a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800de6e:	d00d      	beq.n	800de8c <_ZN3BTD4InitEhhb+0x10a>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800de76:	f240 422f 	movw	r2, #1071	; 0x42f
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d006      	beq.n	800de8c <_ZN3BTD4InitEhhb+0x10a>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800de84:	f240 32d5 	movw	r2, #981	; 0x3d5
 800de88:	4293      	cmp	r3, r2
 800de8a:	d163      	bne.n	800df54 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800de8c:	2064      	movs	r0, #100	; 0x64
 800de8e:	f7f4 fd61 	bl	8002954 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dea2:	2301      	movs	r3, #1
 800dea4:	f005 f9e6 	bl	8013274 <_ZN3USB7setConfEhhh>
 800dea8:	4603      	mov	r3, r0
 800deaa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800deae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f040 80f9 	bne.w	800e0aa <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	7d1b      	ldrb	r3, [r3, #20]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d113      	bne.n	800dee8 <_ZN3BTD4InitEhhb+0x166>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	7d5b      	ldrb	r3, [r3, #21]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10f      	bne.n	800dee8 <_ZN3BTD4InitEhhb+0x166>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	7d9b      	ldrb	r3, [r3, #22]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10b      	bne.n	800dee8 <_ZN3BTD4InitEhhb+0x166>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	7ddb      	ldrb	r3, [r3, #23]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d107      	bne.n	800dee8 <_ZN3BTD4InitEhhb+0x166>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	7e1b      	ldrb	r3, [r3, #24]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d103      	bne.n	800dee8 <_ZN3BTD4InitEhhb+0x166>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	7e5b      	ldrb	r3, [r3, #25]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d019      	beq.n	800df1c <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800deee:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800def2:	d006      	beq.n	800df02 <_ZN3BTD4InitEhhb+0x180>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800defa:	f240 422f 	movw	r2, #1071	; 0x42f
 800defe:	4293      	cmp	r3, r2
 800df00:	d106      	bne.n	800df10 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	3314      	adds	r3, #20
 800df06:	4619      	mov	r1, r3
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f002 f8b0 	bl	801006e <_ZN3BTD9setBdaddrEPh>
 800df0e:	e005      	b.n	800df1c <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	3314      	adds	r3, #20
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f002 f8e9 	bl	80100ee <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800df2c:	2300      	movs	r3, #0
 800df2e:	f005 f9a1 	bl	8013274 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800df3c:	2300      	movs	r3, #0
 800df3e:	2200      	movs	r2, #0
 800df40:	f005 f96a 	bl	8013218 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	3308      	adds	r3, #8
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800df50:	23d1      	movs	r3, #209	; 0xd1
 800df52:	e0c7      	b.n	800e0e4 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800df54:	2300      	movs	r3, #0
 800df56:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800df5a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800df5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800df62:	429a      	cmp	r2, r3
 800df64:	d25e      	bcs.n	800e024 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800df6c:	f640 225c 	movw	r2, #2652	; 0xa5c
 800df70:	4293      	cmp	r3, r2
 800df72:	d106      	bne.n	800df82 <_ZN3BTD4InitEhhb+0x200>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800df7a:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800df7e:	4293      	cmp	r3, r2
 800df80:	d00d      	beq.n	800df9e <_ZN3BTD4InitEhhb+0x21c>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800df88:	f240 520d 	movw	r2, #1293	; 0x50d
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d120      	bne.n	800dfd2 <_ZN3BTD4InitEhhb+0x250>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800df96:	f240 625a 	movw	r2, #1626	; 0x65a
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d119      	bne.n	800dfd2 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	1d1a      	adds	r2, r3, #4
 800dfa2:	f107 0308 	add.w	r3, r7, #8
 800dfa6:	4611      	mov	r1, r2
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f002 f8f3 	bl	8010194 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dfb8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800dfbc:	f107 0308 	add.w	r3, r7, #8
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f005 f8da 	bl	801317e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dfd0:	e018      	b.n	800e004 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	1d1a      	adds	r2, r3, #4
 800dfd6:	f107 0308 	add.w	r3, r7, #8
 800dfda:	4611      	mov	r1, r2
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f002 f927 	bl	8010230 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dfec:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800dff0:	f107 0308 	add.w	r3, r7, #8
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	4613      	mov	r3, r2
 800dff8:	2200      	movs	r2, #0
 800dffa:	f005 f8c0 	bl	801317e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800dffe:	4603      	mov	r3, r0
 800e000:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800e004:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d150      	bne.n	800e0ae <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e012:	2b03      	cmp	r3, #3
 800e014:	d805      	bhi.n	800e022 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800e016:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800e01a:	3301      	adds	r3, #1
 800e01c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800e020:	e79b      	b.n	800df5a <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800e022:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e02a:	2b03      	cmp	r3, #3
 800e02c:	d945      	bls.n	800e0ba <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	3351      	adds	r3, #81	; 0x51
 800e042:	f003 ffdc 	bl	8011ffe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800e046:	4603      	mov	r3, r0
 800e048:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800e04c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e050:	2b00      	cmp	r3, #0
 800e052:	d12e      	bne.n	800e0b2 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e06a:	f005 f903 	bl	8013274 <_ZN3USB7setConfEhhh>
 800e06e:	4603      	mov	r3, r0
 800e070:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800e074:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d11c      	bne.n	800e0b6 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2264      	movs	r2, #100	; 0x64
 800e080:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	e01e      	b.n	800e0e4 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800e0a6:	bf00      	nop
 800e0a8:	e014      	b.n	800e0d4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800e0aa:	bf00      	nop
 800e0ac:	e012      	b.n	800e0d4 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800e0ae:	bf00      	nop
 800e0b0:	e010      	b.n	800e0d4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800e0b2:	bf00      	nop
 800e0b4:	e00e      	b.n	800e0d4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800e0b6:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800e0b8:	e00c      	b.n	800e0d4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800e0ba:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f005 f8a5 	bl	8013218 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800e0ce:	23d1      	movs	r3, #209	; 0xd1
 800e0d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	3308      	adds	r3, #8
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	4798      	blx	r3
        return rcode;
 800e0e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3750      	adds	r7, #80	; 0x50
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	73fb      	strb	r3, [r7, #15]
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
 800e0fa:	2b03      	cmp	r3, #3
 800e0fc:	d845      	bhi.n	800e18a <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800e0fe:	7bfa      	ldrb	r2, [r7, #15]
 800e100:	6879      	ldr	r1, [r7, #4]
 800e102:	4613      	mov	r3, r2
 800e104:	005b      	lsls	r3, r3, #1
 800e106:	4413      	add	r3, r2
 800e108:	440b      	add	r3, r1
 800e10a:	3351      	adds	r3, #81	; 0x51
 800e10c:	2200      	movs	r2, #0
 800e10e:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800e110:	7bfb      	ldrb	r3, [r7, #15]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d001      	beq.n	800e11a <_ZN3BTD10InitializeEv+0x2e>
 800e116:	2000      	movs	r0, #0
 800e118:	e000      	b.n	800e11c <_ZN3BTD10InitializeEv+0x30>
 800e11a:	2008      	movs	r0, #8
 800e11c:	7bfa      	ldrb	r2, [r7, #15]
 800e11e:	6879      	ldr	r1, [r7, #4]
 800e120:	4613      	mov	r3, r2
 800e122:	005b      	lsls	r3, r3, #1
 800e124:	4413      	add	r3, r2
 800e126:	440b      	add	r3, r1
 800e128:	3352      	adds	r3, #82	; 0x52
 800e12a:	4602      	mov	r2, r0
 800e12c:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800e12e:	7bfa      	ldrb	r2, [r7, #15]
 800e130:	6879      	ldr	r1, [r7, #4]
 800e132:	4613      	mov	r3, r2
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4413      	add	r3, r2
 800e138:	440b      	add	r3, r1
 800e13a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e13e:	78d3      	ldrb	r3, [r2, #3]
 800e140:	f36f 0300 	bfc	r3, #0, #1
 800e144:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800e146:	7bfa      	ldrb	r2, [r7, #15]
 800e148:	6879      	ldr	r1, [r7, #4]
 800e14a:	4613      	mov	r3, r2
 800e14c:	005b      	lsls	r3, r3, #1
 800e14e:	4413      	add	r3, r2
 800e150:	440b      	add	r3, r1
 800e152:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e156:	78d3      	ldrb	r3, [r2, #3]
 800e158:	f36f 0341 	bfc	r3, #1, #1
 800e15c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800e15e:	7bfb      	ldrb	r3, [r7, #15]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <_ZN3BTD10InitializeEv+0x7c>
 800e164:	2101      	movs	r1, #1
 800e166:	e000      	b.n	800e16a <_ZN3BTD10InitializeEv+0x7e>
 800e168:	210f      	movs	r1, #15
 800e16a:	7bfa      	ldrb	r2, [r7, #15]
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	4613      	mov	r3, r2
 800e170:	005b      	lsls	r3, r3, #1
 800e172:	4413      	add	r3, r2
 800e174:	4403      	add	r3, r0
 800e176:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e17a:	78d3      	ldrb	r3, [r2, #3]
 800e17c:	f361 0387 	bfi	r3, r1, #2, #6
 800e180:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800e182:	7bfb      	ldrb	r3, [r7, #15]
 800e184:	3301      	adds	r3, #1
 800e186:	73fb      	strb	r3, [r7, #15]
 800e188:	e7b6      	b.n	800e0f8 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800e18a:	2300      	movs	r3, #0
 800e18c:	73fb      	strb	r3, [r7, #15]
 800e18e:	7bfb      	ldrb	r3, [r7, #15]
 800e190:	2b03      	cmp	r3, #3
 800e192:	d81c      	bhi.n	800e1ce <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800e194:	7bfb      	ldrb	r3, [r7, #15]
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	3318      	adds	r3, #24
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	4413      	add	r3, r2
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d010      	beq.n	800e1c6 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	3318      	adds	r3, #24
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4413      	add	r3, r2
 800e1ae:	6859      	ldr	r1, [r3, #4]
 800e1b0:	7bfb      	ldrb	r3, [r7, #15]
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	3318      	adds	r3, #24
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4413      	add	r3, r2
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3308      	adds	r3, #8
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4608      	mov	r0, r1
 800e1c4:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800e1c6:	7bfb      	ldrb	r3, [r7, #15]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	73fb      	strb	r3, [r7, #15]
 800e1cc:	e7df      	b.n	800e18e <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2200      	movs	r2, #0
 800e20a:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2200      	movs	r2, #0
 800e210:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2200      	movs	r2, #0
 800e220:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800e224:	bf00      	nop
 800e226:	3710      	adds	r7, #16
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800e22c:	b480      	push	{r7}
 800e22e:	b085      	sub	sp, #20
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	4608      	mov	r0, r1
 800e236:	4611      	mov	r1, r2
 800e238:	461a      	mov	r2, r3
 800e23a:	4603      	mov	r3, r0
 800e23c:	70fb      	strb	r3, [r7, #3]
 800e23e:	460b      	mov	r3, r1
 800e240:	70bb      	strb	r3, [r7, #2]
 800e242:	4613      	mov	r3, r2
 800e244:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800e246:	787b      	ldrb	r3, [r7, #1]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d15d      	bne.n	800e308 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	78fa      	ldrb	r2, [r7, #3]
 800e250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	78db      	ldrb	r3, [r3, #3]
 800e258:	f003 0303 	and.w	r3, r3, #3
 800e25c:	2b03      	cmp	r3, #3
 800e25e:	d114      	bne.n	800e28a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	789b      	ldrb	r3, [r3, #2]
 800e264:	b25b      	sxtb	r3, r3
 800e266:	2b00      	cmp	r3, #0
 800e268:	da0f      	bge.n	800e28a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800e26a:	2301      	movs	r3, #1
 800e26c:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800e26e:	7bfa      	ldrb	r2, [r7, #15]
 800e270:	6879      	ldr	r1, [r7, #4]
 800e272:	4613      	mov	r3, r2
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	4413      	add	r3, r2
 800e278:	440b      	add	r3, r1
 800e27a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e27e:	78d3      	ldrb	r3, [r2, #3]
 800e280:	2101      	movs	r1, #1
 800e282:	f361 0387 	bfi	r3, r1, #2, #6
 800e286:	70d3      	strb	r3, [r2, #3]
 800e288:	e00e      	b.n	800e2a8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	78db      	ldrb	r3, [r3, #3]
 800e28e:	f003 0303 	and.w	r3, r3, #3
 800e292:	2b02      	cmp	r3, #2
 800e294:	d13a      	bne.n	800e30c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	789b      	ldrb	r3, [r3, #2]
 800e29a:	b25b      	sxtb	r3, r3
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	da01      	bge.n	800e2a4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800e2a0:	2302      	movs	r3, #2
 800e2a2:	e000      	b.n	800e2a6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	789b      	ldrb	r3, [r3, #2]
 800e2ac:	7bfa      	ldrb	r2, [r7, #15]
 800e2ae:	f003 030f 	and.w	r3, r3, #15
 800e2b2:	b2d8      	uxtb	r0, r3
 800e2b4:	6879      	ldr	r1, [r7, #4]
 800e2b6:	4613      	mov	r3, r2
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	4413      	add	r3, r2
 800e2bc:	440b      	add	r3, r1
 800e2be:	3351      	adds	r3, #81	; 0x51
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	889b      	ldrh	r3, [r3, #4]
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	7bfa      	ldrb	r2, [r7, #15]
 800e2cc:	b2d8      	uxtb	r0, r3
 800e2ce:	6879      	ldr	r1, [r7, #4]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	4413      	add	r3, r2
 800e2d6:	440b      	add	r3, r1
 800e2d8:	3352      	adds	r3, #82	; 0x52
 800e2da:	4602      	mov	r2, r0
 800e2dc:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	799b      	ldrb	r3, [r3, #6]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d204      	bcs.n	800e2f6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	799a      	ldrb	r2, [r3, #6]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800e306:	e002      	b.n	800e30e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800e308:	bf00      	nop
 800e30a:	e000      	b.n	800e30e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800e30c:	bf00      	nop
}
 800e30e:	3714      	adds	r7, #20
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800e318:	f1a0 0004 	sub.w	r0, r0, #4
 800e31c:	f7ff bf86 	b.w	800e22c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800e320 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f7ff fedf 	bl	800e0ec <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e332:	4618      	mov	r0, r3
 800e334:	f7ff fa78 	bl	800d828 <_ZN3USB14GetAddressPoolEv>
 800e338:	4603      	mov	r3, r0
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	3208      	adds	r2, #8
 800e33e:	6812      	ldr	r2, [r2, #0]
 800e340:	6879      	ldr	r1, [r7, #4]
 800e342:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800e346:	4618      	mov	r0, r3
 800e348:	4790      	blx	r2
        return 0;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3708      	adds	r7, #8
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800e362:	f083 0301 	eor.w	r3, r3, #1
 800e366:	b2db      	uxtb	r3, r3
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d001      	beq.n	800e370 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800e36c:	2300      	movs	r3, #0
 800e36e:	e01d      	b.n	800e3ac <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800e370:	f7f4 fae4 	bl	800293c <HAL_GetTick>
 800e374:	4602      	mov	r2, r0
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e37a:	1ad3      	subs	r3, r2, r3
 800e37c:	43db      	mvns	r3, r3
 800e37e:	0fdb      	lsrs	r3, r3, #31
 800e380:	b2db      	uxtb	r3, r3
 800e382:	2b00      	cmp	r3, #0
 800e384:	d011      	beq.n	800e3aa <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800e386:	f7f4 fad9 	bl	800293c <HAL_GetTick>
 800e38a:	4602      	mov	r2, r0
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e392:	441a      	add	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 f80b 	bl	800e3b4 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 fb22 	bl	800e9e8 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 fe4b 	bl	800f040 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800e3b4:	b5b0      	push	{r4, r5, r7, lr}
 800e3b6:	b088      	sub	sp, #32
 800e3b8:	af02      	add	r7, sp, #8
 800e3ba:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800e3bc:	2340      	movs	r3, #64	; 0x40
 800e3be:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	3389      	adds	r3, #137	; 0x89
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800e3da:	f107 050c 	add.w	r5, r7, #12
 800e3de:	9201      	str	r2, [sp, #4]
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	462b      	mov	r3, r5
 800e3e4:	4622      	mov	r2, r4
 800e3e6:	f003 ff72 	bl	80122ce <_ZN3USB10inTransferEhhPtPhh>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800e3ee:	7bfb      	ldrb	r3, [r7, #15]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d003      	beq.n	800e3fc <_ZN3BTD14HCI_event_taskEv+0x48>
 800e3f4:	7bfb      	ldrb	r3, [r7, #15]
 800e3f6:	2b04      	cmp	r3, #4
 800e3f8:	f040 82f1 	bne.w	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e402:	3b01      	subs	r3, #1
 800e404:	2b35      	cmp	r3, #53	; 0x35
 800e406:	f200 82ea 	bhi.w	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
 800e40a:	a201      	add	r2, pc, #4	; (adr r2, 800e410 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800e40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e410:	0800e5f1 	.word	0x0800e5f1
 800e414:	0800e651 	.word	0x0800e651
 800e418:	0800e7a9 	.word	0x0800e7a9
 800e41c:	0800e893 	.word	0x0800e893
 800e420:	0800e805 	.word	0x0800e805
 800e424:	0800e951 	.word	0x0800e951
 800e428:	0800e837 	.word	0x0800e837
 800e42c:	0800e9c9 	.word	0x0800e9c9
 800e430:	0800e9c9 	.word	0x0800e9c9
 800e434:	0800e9df 	.word	0x0800e9df
 800e438:	0800e9df 	.word	0x0800e9df
 800e43c:	0800e9c9 	.word	0x0800e9c9
 800e440:	0800e9c9 	.word	0x0800e9c9
 800e444:	0800e4e9 	.word	0x0800e4e9
 800e448:	0800e9c9 	.word	0x0800e9c9
 800e44c:	0800e9df 	.word	0x0800e9df
 800e450:	0800e9df 	.word	0x0800e9df
 800e454:	0800e9c9 	.word	0x0800e9c9
 800e458:	0800e9c9 	.word	0x0800e9c9
 800e45c:	0800e9df 	.word	0x0800e9df
 800e460:	0800e9df 	.word	0x0800e9df
 800e464:	0800e91f 	.word	0x0800e91f
 800e468:	0800e949 	.word	0x0800e949
 800e46c:	0800e9c9 	.word	0x0800e9c9
 800e470:	0800e9c9 	.word	0x0800e9c9
 800e474:	0800e9c9 	.word	0x0800e9c9
 800e478:	0800e9c9 	.word	0x0800e9c9
 800e47c:	0800e9df 	.word	0x0800e9df
 800e480:	0800e9df 	.word	0x0800e9df
 800e484:	0800e9df 	.word	0x0800e9df
 800e488:	0800e9df 	.word	0x0800e9df
 800e48c:	0800e9c9 	.word	0x0800e9c9
 800e490:	0800e9df 	.word	0x0800e9df
 800e494:	0800e9df 	.word	0x0800e9df
 800e498:	0800e9df 	.word	0x0800e9df
 800e49c:	0800e9df 	.word	0x0800e9df
 800e4a0:	0800e9df 	.word	0x0800e9df
 800e4a4:	0800e9df 	.word	0x0800e9df
 800e4a8:	0800e9df 	.word	0x0800e9df
 800e4ac:	0800e9df 	.word	0x0800e9df
 800e4b0:	0800e9df 	.word	0x0800e9df
 800e4b4:	0800e9df 	.word	0x0800e9df
 800e4b8:	0800e9df 	.word	0x0800e9df
 800e4bc:	0800e9df 	.word	0x0800e9df
 800e4c0:	0800e9df 	.word	0x0800e9df
 800e4c4:	0800e9df 	.word	0x0800e9df
 800e4c8:	0800e9df 	.word	0x0800e9df
 800e4cc:	0800e9df 	.word	0x0800e9df
 800e4d0:	0800e9b9 	.word	0x0800e9b9
 800e4d4:	0800e9c9 	.word	0x0800e9c9
 800e4d8:	0800e9c1 	.word	0x0800e9c1
 800e4dc:	0800e9df 	.word	0x0800e9df
 800e4e0:	0800e9df 	.word	0x0800e9df
 800e4e4:	0800e9c9 	.word	0x0800e9c9
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f040 826c 	bne.w	800e9cc <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e4fa:	f043 0301 	orr.w	r3, r3, #1
 800e4fe:	b29a      	uxth	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d114      	bne.n	800e53a <_ZN3BTD14HCI_event_taskEv+0x186>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e516:	2b10      	cmp	r3, #16
 800e518:	d10f      	bne.n	800e53a <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e530:	b29a      	uxth	r2, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e538:	e059      	b.n	800e5ee <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e540:	2b04      	cmp	r3, #4
 800e542:	d12a      	bne.n	800e59a <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e54a:	2b10      	cmp	r3, #16
 800e54c:	d125      	bne.n	800e59a <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d114      	bne.n	800e586 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800e562:	2b00      	cmp	r3, #0
 800e564:	d10f      	bne.n	800e586 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800e56c:	f003 0308 	and.w	r3, r3, #8
 800e570:	2b00      	cmp	r3, #0
 800e572:	d004      	beq.n	800e57e <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800e57c:	e003      	b.n	800e586 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e58c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e590:	b29a      	uxth	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e598:	e029      	b.n	800e5ee <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e5a0:	2b09      	cmp	r3, #9
 800e5a2:	f040 8213 	bne.w	800e9cc <_ZN3BTD14HCI_event_taskEv+0x618>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e5ac:	2b10      	cmp	r3, #16
 800e5ae:	f040 820d 	bne.w	800e9cc <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	75fb      	strb	r3, [r7, #23]
 800e5b6:	7dfb      	ldrb	r3, [r7, #23]
 800e5b8:	2b05      	cmp	r3, #5
 800e5ba:	d80e      	bhi.n	800e5da <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800e5bc:	7dfb      	ldrb	r3, [r7, #23]
 800e5be:	1d9a      	adds	r2, r3, #6
 800e5c0:	7dfb      	ldrb	r3, [r7, #23]
 800e5c2:	6879      	ldr	r1, [r7, #4]
 800e5c4:	440a      	add	r2, r1
 800e5c6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	460a      	mov	r2, r1
 800e5d0:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800e5d2:	7dfb      	ldrb	r3, [r7, #23]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	75fb      	strb	r3, [r7, #23]
 800e5d8:	e7ed      	b.n	800e5b6 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e5e0:	f043 0320 	orr.w	r3, r3, #32
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800e5ec:	e1ee      	b.n	800e9cc <_ZN3BTD14HCI_event_taskEv+0x618>
 800e5ee:	e1ed      	b.n	800e9cc <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e5f6:	2b04      	cmp	r3, #4
 800e5f8:	d921      	bls.n	800e63e <_ZN3BTD14HCI_event_taskEv+0x28a>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e600:	2b00      	cmp	r3, #0
 800e602:	d104      	bne.n	800e60e <_ZN3BTD14HCI_event_taskEv+0x25a>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d017      	beq.n	800e63e <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2200      	movs	r2, #0
 800e61a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	220a      	movs	r2, #10
 800e63a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e644:	3301      	adds	r3, #1
 800e646:	b2da      	uxtb	r2, r3
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800e64e:	e1c6      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e656:	2b00      	cmp	r3, #0
 800e658:	f000 81ba 	beq.w	800e9d0 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800e65c:	2300      	movs	r3, #0
 800e65e:	75bb      	strb	r3, [r7, #22]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e666:	7dba      	ldrb	r2, [r7, #22]
 800e668:	429a      	cmp	r2, r3
 800e66a:	f080 81b1 	bcs.w	800e9d0 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e674:	00db      	lsls	r3, r3, #3
 800e676:	b2da      	uxtb	r2, r3
 800e678:	7dbb      	ldrb	r3, [r7, #22]
 800e67a:	4619      	mov	r1, r3
 800e67c:	0049      	lsls	r1, r1, #1
 800e67e:	440b      	add	r3, r1
 800e680:	b2db      	uxtb	r3, r3
 800e682:	4413      	add	r3, r2
 800e684:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800e686:	2300      	movs	r3, #0
 800e688:	757b      	strb	r3, [r7, #21]
 800e68a:	7d7b      	ldrb	r3, [r7, #21]
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	d811      	bhi.n	800e6b4 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800e690:	7d7b      	ldrb	r3, [r7, #21]
 800e692:	1d1a      	adds	r2, r3, #4
 800e694:	7bbb      	ldrb	r3, [r7, #14]
 800e696:	441a      	add	r2, r3
 800e698:	7d7b      	ldrb	r3, [r7, #21]
 800e69a:	6879      	ldr	r1, [r7, #4]
 800e69c:	440a      	add	r2, r1
 800e69e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	460a      	mov	r2, r1
 800e6a8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800e6ac:	7d7b      	ldrb	r3, [r7, #21]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	757b      	strb	r3, [r7, #21]
 800e6b2:	e7ea      	b.n	800e68a <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d038      	beq.n	800e730 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d133      	bne.n	800e730 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e6ce:	2b05      	cmp	r3, #5
 800e6d0:	d12e      	bne.n	800e730 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e6d8:	f003 030c 	and.w	r3, r3, #12
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d027      	beq.n	800e730 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	753b      	strb	r3, [r7, #20]
 800e6ec:	7d3b      	ldrb	r3, [r7, #20]
 800e6ee:	2b05      	cmp	r3, #5
 800e6f0:	d814      	bhi.n	800e71c <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800e6f2:	7d3b      	ldrb	r3, [r7, #20]
 800e6f4:	1cd9      	adds	r1, r3, #3
 800e6f6:	7dba      	ldrb	r2, [r7, #22]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	005b      	lsls	r3, r3, #1
 800e6fc:	4413      	add	r3, r2
 800e6fe:	005b      	lsls	r3, r3, #1
 800e700:	18ca      	adds	r2, r1, r3
 800e702:	7d3b      	ldrb	r3, [r7, #20]
 800e704:	6879      	ldr	r1, [r7, #4]
 800e706:	440a      	add	r2, r1
 800e708:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	4413      	add	r3, r2
 800e710:	460a      	mov	r2, r1
 800e712:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800e714:	7d3b      	ldrb	r3, [r7, #20]
 800e716:	3301      	adds	r3, #1
 800e718:	753b      	strb	r3, [r7, #20]
 800e71a:	e7e7      	b.n	800e6ec <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e726:	b29a      	uxth	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800e72e:	e03a      	b.n	800e7a6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e736:	2b00      	cmp	r3, #0
 800e738:	d031      	beq.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e740:	f003 030f 	and.w	r3, r3, #15
 800e744:	2b05      	cmp	r3, #5
 800e746:	d12a      	bne.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e74e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800e752:	2b00      	cmp	r3, #0
 800e754:	d023      	beq.n	800e79e <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800e756:	2300      	movs	r3, #0
 800e758:	74fb      	strb	r3, [r7, #19]
 800e75a:	7cfb      	ldrb	r3, [r7, #19]
 800e75c:	2b05      	cmp	r3, #5
 800e75e:	d814      	bhi.n	800e78a <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800e760:	7cfb      	ldrb	r3, [r7, #19]
 800e762:	1cd9      	adds	r1, r3, #3
 800e764:	7dba      	ldrb	r2, [r7, #22]
 800e766:	4613      	mov	r3, r2
 800e768:	005b      	lsls	r3, r3, #1
 800e76a:	4413      	add	r3, r2
 800e76c:	005b      	lsls	r3, r3, #1
 800e76e:	18ca      	adds	r2, r1, r3
 800e770:	7cfb      	ldrb	r3, [r7, #19]
 800e772:	6879      	ldr	r1, [r7, #4]
 800e774:	440a      	add	r2, r1
 800e776:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	4413      	add	r3, r2
 800e77e:	460a      	mov	r2, r1
 800e780:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800e782:	7cfb      	ldrb	r3, [r7, #19]
 800e784:	3301      	adds	r3, #1
 800e786:	74fb      	strb	r3, [r7, #19]
 800e788:	e7e7      	b.n	800e75a <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e794:	b29a      	uxth	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800e79c:	e003      	b.n	800e7a6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800e79e:	7dbb      	ldrb	r3, [r7, #22]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	75bb      	strb	r3, [r7, #22]
 800e7a4:	e75c      	b.n	800e660 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800e7a6:	e113      	b.n	800e9d0 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e7ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d11a      	bne.n	800e7fa <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e7ca:	b21a      	sxth	r2, r3
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e7d2:	021b      	lsls	r3, r3, #8
 800e7d4:	b21b      	sxth	r3, r3
 800e7d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e7da:	b21b      	sxth	r3, r3
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	b21b      	sxth	r3, r3
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e7ec:	f043 0302 	orr.w	r3, r3, #2
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800e7f8:	e0f1      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2206      	movs	r2, #6
 800e7fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800e802:	e0ec      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	f040 80e2 	bne.w	800e9d4 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e816:	f043 0304 	orr.w	r3, r3, #4
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e828:	f023 0302 	bic.w	r3, r3, #2
 800e82c:	b29a      	uxth	r2, r3
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800e834:	e0ce      	b.n	800e9d4 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f040 80cb 	bne.w	800e9d8 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800e842:	2300      	movs	r3, #0
 800e844:	74bb      	strb	r3, [r7, #18]
 800e846:	7cbb      	ldrb	r3, [r7, #18]
 800e848:	2b1d      	cmp	r3, #29
 800e84a:	d818      	bhi.n	800e87e <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800e84c:	7cbb      	ldrb	r3, [r7, #18]
 800e84e:	f103 0209 	add.w	r2, r3, #9
 800e852:	7cbb      	ldrb	r3, [r7, #18]
 800e854:	6879      	ldr	r1, [r7, #4]
 800e856:	440a      	add	r2, r1
 800e858:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	4413      	add	r3, r2
 800e860:	460a      	mov	r2, r1
 800e862:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800e866:	7cbb      	ldrb	r3, [r7, #18]
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	4413      	add	r3, r2
 800e86c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e870:	2b00      	cmp	r3, #0
 800e872:	d003      	beq.n	800e87c <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800e874:	7cbb      	ldrb	r3, [r7, #18]
 800e876:	3301      	adds	r3, #1
 800e878:	74bb      	strb	r3, [r7, #18]
 800e87a:	e7e4      	b.n	800e846 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800e87c:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e884:	f043 0308 	orr.w	r3, r3, #8
 800e888:	b29a      	uxth	r2, r3
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800e890:	e0a2      	b.n	800e9d8 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800e892:	2300      	movs	r3, #0
 800e894:	747b      	strb	r3, [r7, #17]
 800e896:	7c7b      	ldrb	r3, [r7, #17]
 800e898:	2b05      	cmp	r3, #5
 800e89a:	d80e      	bhi.n	800e8ba <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800e89c:	7c7b      	ldrb	r3, [r7, #17]
 800e89e:	1c9a      	adds	r2, r3, #2
 800e8a0:	7c7b      	ldrb	r3, [r7, #17]
 800e8a2:	6879      	ldr	r1, [r7, #4]
 800e8a4:	440a      	add	r2, r1
 800e8a6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	460a      	mov	r2, r1
 800e8b0:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800e8b2:	7c7b      	ldrb	r3, [r7, #17]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	747b      	strb	r3, [r7, #17]
 800e8b8:	e7ed      	b.n	800e896 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	743b      	strb	r3, [r7, #16]
 800e8be:	7c3b      	ldrb	r3, [r7, #16]
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	d810      	bhi.n	800e8e6 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800e8c4:	7c3b      	ldrb	r3, [r7, #16]
 800e8c6:	f103 0208 	add.w	r2, r3, #8
 800e8ca:	7c3b      	ldrb	r3, [r7, #16]
 800e8cc:	6879      	ldr	r1, [r7, #4]
 800e8ce:	440a      	add	r2, r1
 800e8d0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	460a      	mov	r2, r1
 800e8da:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800e8de:	7c3b      	ldrb	r3, [r7, #16]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	743b      	strb	r3, [r7, #16]
 800e8e4:	e7eb      	b.n	800e8be <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e8ec:	f003 030f 	and.w	r3, r3, #15
 800e8f0:	2b05      	cmp	r3, #5
 800e8f2:	d10a      	bne.n	800e90a <_ZN3BTD14HCI_event_taskEv+0x556>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e8fa:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d003      	beq.n	800e90a <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2201      	movs	r2, #1
 800e906:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e910:	f043 0310 	orr.w	r3, r3, #16
 800e914:	b29a      	uxth	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800e91c:	e05f      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e924:	2b00      	cmp	r3, #0
 800e926:	d003      	beq.n	800e930 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f000 feec 	bl	800f706 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800e92e:	e056      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d003      	beq.n	800e940 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 fee4 	bl	800f706 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800e93e:	e04e      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f000 ff93 	bl	800f86c <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800e946:	e04a      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 ffca 	bl	800f8e2 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800e94e:	e046      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e956:	2b00      	cmp	r3, #0
 800e958:	d123      	bne.n	800e9a2 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e960:	2b00      	cmp	r3, #0
 800e962:	d00c      	beq.n	800e97e <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e96a:	f083 0301 	eor.w	r3, r3, #1
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	2b00      	cmp	r3, #0
 800e972:	d004      	beq.n	800e97e <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800e97c:	e02e      	b.n	800e9dc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e984:	2b00      	cmp	r3, #0
 800e986:	d029      	beq.n	800e9dc <_ZN3BTD14HCI_event_taskEv+0x628>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e98e:	f083 0301 	eor.w	r3, r3, #1
 800e992:	b2db      	uxtb	r3, r3
 800e994:	2b00      	cmp	r3, #0
 800e996:	d021      	beq.n	800e9dc <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2201      	movs	r2, #1
 800e99c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800e9a0:	e01c      	b.n	800e9dc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	8b5b      	ldrh	r3, [r3, #26]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f001 f882 	bl	800fab2 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2210      	movs	r2, #16
 800e9b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800e9b6:	e011      	b.n	800e9dc <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f000 ffcd 	bl	800f958 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800e9be:	e00e      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f001 f810 	bl	800f9e6 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800e9c6:	e00a      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800e9c8:	bf00      	nop
 800e9ca:	e008      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e9cc:	bf00      	nop
 800e9ce:	e006      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e9d0:	bf00      	nop
 800e9d2:	e004      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e9d4:	bf00      	nop
 800e9d6:	e002      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e9d8:	bf00      	nop
 800e9da:	e000      	b.n	800e9de <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e9dc:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800e9de:	bf00      	nop
 800e9e0:	3718      	adds	r7, #24
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bdb0      	pop	{r4, r5, r7, pc}
 800e9e6:	bf00      	nop

0800e9e8 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9f6:	2b13      	cmp	r3, #19
 800e9f8:	f200 82ef 	bhi.w	800efda <_ZN3BTD8HCI_taskEv+0x5f2>
 800e9fc:	a201      	add	r2, pc, #4	; (adr r2, 800ea04 <_ZN3BTD8HCI_taskEv+0x1c>)
 800e9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea02:	bf00      	nop
 800ea04:	0800ea55 	.word	0x0800ea55
 800ea08:	0800ea8f 	.word	0x0800ea8f
 800ea0c:	0800eb15 	.word	0x0800eb15
 800ea10:	0800eb35 	.word	0x0800eb35
 800ea14:	0800eb55 	.word	0x0800eb55
 800ea18:	0800eba9 	.word	0x0800eba9
 800ea1c:	0800ec4f 	.word	0x0800ec4f
 800ea20:	0800ec7d 	.word	0x0800ec7d
 800ea24:	0800ecb7 	.word	0x0800ecb7
 800ea28:	0800ecdf 	.word	0x0800ecdf
 800ea2c:	0800ed15 	.word	0x0800ed15
 800ea30:	0800ed73 	.word	0x0800ed73
 800ea34:	0800edb1 	.word	0x0800edb1
 800ea38:	0800eed7 	.word	0x0800eed7
 800ea3c:	0800efdb 	.word	0x0800efdb
 800ea40:	0800ef1d 	.word	0x0800ef1d
 800ea44:	0800ef4b 	.word	0x0800ef4b
 800ea48:	0800ebdf 	.word	0x0800ebdf
 800ea4c:	0800ec15 	.word	0x0800ec15
 800ea50:	0800ec35 	.word	0x0800ec35
                case HCI_INIT_STATE:
                        hci_counter++;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800ea70:	429a      	cmp	r2, r3
 800ea72:	f240 82b4 	bls.w	800efde <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 fb7d 	bl	800f176 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800ea8c:	e2a7      	b.n	800efde <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ea94:	3301      	adds	r3, #1
 800ea96:	b29a      	uxth	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eaa4:	f003 0301 	and.w	r3, r3, #1
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00b      	beq.n	800eac4 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2200      	movs	r2, #0
 800eab0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2202      	movs	r2, #2
 800eab8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f001 f830 	bl	800fb22 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800eac2:	e28e      	b.n	800efe2 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800ead0:	429a      	cmp	r2, r3
 800ead2:	f240 8286 	bls.w	800efe2 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800eadc:	461a      	mov	r2, r3
 800eade:	0092      	lsls	r2, r2, #2
 800eae0:	4413      	add	r3, r2
 800eae2:	005b      	lsls	r3, r3, #1
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800eaf2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800eaf6:	d904      	bls.n	800eb02 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800eafe:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2200      	movs	r2, #0
 800eb06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800eb12:	e266      	b.n	800efe2 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb1a:	f003 0301 	and.w	r3, r3, #1
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f000 8261 	beq.w	800efe6 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2203      	movs	r2, #3
 800eb28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f000 fb72 	bl	800f216 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800eb32:	e258      	b.n	800efe6 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb3a:	f003 0320 	and.w	r3, r3, #32
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f000 8253 	beq.w	800efea <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 fb8a 	bl	800f25e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2204      	movs	r2, #4
 800eb4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800eb52:	e24a      	b.n	800efea <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	f000 8245 	beq.w	800efee <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00a      	beq.n	800eb82 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	4619      	mov	r1, r3
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 fc5d 	bl	800f432 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2205      	movs	r2, #5
 800eb7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800eb80:	e235      	b.n	800efee <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d008      	beq.n	800eb9e <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800eb8c:	2100      	movs	r1, #0
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f000 fb89 	bl	800f2a6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2211      	movs	r2, #17
 800eb98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eb9c:	e227      	b.n	800efee <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2206      	movs	r2, #6
 800eba2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eba6:	e222      	b.n	800efee <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	f000 821d 	beq.w	800eff2 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d008      	beq.n	800ebd4 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 fb6e 	bl	800f2a6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2211      	movs	r2, #17
 800ebce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800ebd2:	e20e      	b.n	800eff2 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2206      	movs	r2, #6
 800ebd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ebdc:	e209      	b.n	800eff2 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ebe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	f000 8204 	beq.w	800eff6 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d008      	beq.n	800ec0a <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800ebf8:	2101      	movs	r1, #1
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 fc9d 	bl	800f53a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2212      	movs	r2, #18
 800ec04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800ec08:	e1f5      	b.n	800eff6 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2206      	movs	r2, #6
 800ec0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ec12:	e1f0      	b.n	800eff6 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f000 81eb 	beq.w	800effa <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 fc4d 	bl	800f4c4 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2213      	movs	r2, #19
 800ec2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ec32:	e1e2      	b.n	800effa <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec3a:	f003 0301 	and.w	r3, r3, #1
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	f000 81dd 	beq.w	800effe <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2206      	movs	r2, #6
 800ec48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ec4c:	e1d7      	b.n	800effe <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d104      	bne.n	800ec62 <_ZN3BTD8HCI_taskEv+0x27a>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d007      	beq.n	800ec72 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 fc8f 	bl	800f586 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2207      	movs	r2, #7
 800ec6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800ec70:	e1d8      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	220a      	movs	r2, #10
 800ec76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ec7a:	e1d3      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f000 81bb 	beq.w	800f002 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 fcb2 	bl	800f5f6 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d007      	beq.n	800ecac <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f000 fb74 	bl	800f38a <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	220c      	movs	r2, #12
 800eca6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800ecaa:	e1aa      	b.n	800f002 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2208      	movs	r2, #8
 800ecb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ecb4:	e1a5      	b.n	800f002 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ecbc:	f003 0301 	and.w	r3, r3, #1
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 81a0 	beq.w	800f006 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 fcac 	bl	800f62c <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2209      	movs	r2, #9
 800ecd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ecdc:	e193      	b.n	800f006 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ece4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f000 818e 	beq.w	800f00a <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ecf4:	f003 0302 	and.w	r3, r3, #2
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d007      	beq.n	800ed0c <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f000 fead 	bl	800fa5c <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	220a      	movs	r2, #10
 800ed06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800ed0a:	e17e      	b.n	800f00a <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 fc8d 	bl	800f62c <_ZN3BTD11hci_connectEv>
                        break;
 800ed12:	e17a      	b.n	800f00a <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed1a:	f083 0301 	eor.w	r3, r3, #1
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f000 8174 	beq.w	800f00e <_ZN3BTD8HCI_taskEv+0x626>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed2c:	f083 0301 	eor.w	r3, r3, #1
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f000 816b 	beq.w	800f00e <_ZN3BTD8HCI_taskEv+0x626>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ed3e:	f083 0301 	eor.w	r3, r3, #1
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	f000 8162 	beq.w	800f00e <_ZN3BTD8HCI_taskEv+0x626>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ed50:	f083 0301 	eor.w	r3, r3, #1
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f000 8159 	beq.w	800f00e <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f000 fa29 	bl	800f1b4 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2201      	movs	r2, #1
 800ed66:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	220b      	movs	r2, #11
 800ed6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ed70:	e14d      	b.n	800f00e <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ed78:	f003 0310 	and.w	r3, r3, #16
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d00a      	beq.n	800ed96 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 faff 	bl	800f38a <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	220c      	movs	r2, #12
 800ed90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800ed94:	e13d      	b.n	800f012 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ed9c:	f003 0304 	and.w	r3, r3, #4
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f000 8136 	beq.w	800f012 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2210      	movs	r2, #16
 800edaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800edae:	e130      	b.n	800f012 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800edb6:	f003 0308 	and.w	r3, r3, #8
 800edba:	2b00      	cmp	r3, #0
 800edbc:	f000 812b 	beq.w	800f016 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	3322      	adds	r3, #34	; 0x22
 800edc4:	2208      	movs	r2, #8
 800edc6:	4999      	ldr	r1, [pc, #612]	; (800f02c <_ZN3BTD8HCI_taskEv+0x644>)
 800edc8:	4618      	mov	r0, r3
 800edca:	f004 fe27 	bl	8013a1c <strncmp>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d147      	bne.n	800ee64 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2201      	movs	r2, #1
 800edd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2200      	movs	r2, #0
 800ede0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	3322      	adds	r3, #34	; 0x22
 800edf8:	2216      	movs	r2, #22
 800edfa:	498d      	ldr	r1, [pc, #564]	; (800f030 <_ZN3BTD8HCI_taskEv+0x648>)
 800edfc:	4618      	mov	r0, r3
 800edfe:	f004 fe0d 	bl	8013a1c <strncmp>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d104      	bne.n	800ee12 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee10:	e028      	b.n	800ee64 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	3322      	adds	r3, #34	; 0x22
 800ee16:	2216      	movs	r2, #22
 800ee18:	4986      	ldr	r1, [pc, #536]	; (800f034 <_ZN3BTD8HCI_taskEv+0x64c>)
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f004 fdfe 	bl	8013a1c <strncmp>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d110      	bne.n	800ee48 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee46:	e00d      	b.n	800ee64 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	3322      	adds	r3, #34	; 0x22
 800ee4c:	2213      	movs	r2, #19
 800ee4e:	497a      	ldr	r1, [pc, #488]	; (800f038 <_ZN3BTD8HCI_taskEv+0x650>)
 800ee50:	4618      	mov	r0, r3
 800ee52:	f004 fde3 	bl	8013a1c <strncmp>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d103      	bne.n	800ee64 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2201      	movs	r2, #1
 800ee60:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d117      	bne.n	800ee9e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800ee74:	2b25      	cmp	r3, #37	; 0x25
 800ee76:	d112      	bne.n	800ee9e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ee7e:	2b08      	cmp	r3, #8
 800ee80:	d10d      	bne.n	800ee9e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	3322      	adds	r3, #34	; 0x22
 800ee86:	2213      	movs	r2, #19
 800ee88:	496c      	ldr	r1, [pc, #432]	; (800f03c <_ZN3BTD8HCI_taskEv+0x654>)
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f004 fdc6 	bl	8013a1c <strncmp>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d103      	bne.n	800ee9e <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2201      	movs	r2, #1
 800ee9a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d104      	bne.n	800eeb2 <_ZN3BTD8HCI_taskEv+0x4ca>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d009      	beq.n	800eec6 <_ZN3BTD8HCI_taskEv+0x4de>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d004      	beq.n	800eec6 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2208      	movs	r2, #8
 800eec0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800eec4:	e0a7      	b.n	800f016 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 fa17 	bl	800f2fa <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	220d      	movs	r2, #13
 800eed0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eed4:	e09f      	b.n	800f016 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eedc:	f003 0302 	and.w	r3, r3, #2
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	f000 809a 	beq.w	800f01a <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d003      	beq.n	800eef8 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2201      	movs	r2, #1
 800eef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	220f      	movs	r2, #15
 800ef16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ef1a:	e07e      	b.n	800f01a <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ef22:	3301      	adds	r3, #1
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ef32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef36:	d972      	bls.n	800f01e <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	220a      	movs	r2, #10
 800ef44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ef48:	e069      	b.n	800f01e <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ef50:	f003 0304 	and.w	r3, r3, #4
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d064      	beq.n	800f022 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	3389      	adds	r3, #137	; 0x89
 800ef64:	2240      	movs	r2, #64	; 0x40
 800ef66:	2100      	movs	r1, #0
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f004 fd0b 	bl	8013984 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	33c9      	adds	r3, #201	; 0xc9
 800ef72:	2240      	movs	r2, #64	; 0x40
 800ef74:	2100      	movs	r1, #0
 800ef76:	4618      	mov	r0, r3
 800ef78:	f004 fd04 	bl	8013984 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	220a      	movs	r2, #10
 800efd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800efd8:	e023      	b.n	800f022 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800efda:	bf00      	nop
 800efdc:	e022      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efde:	bf00      	nop
 800efe0:	e020      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efe2:	bf00      	nop
 800efe4:	e01e      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efe6:	bf00      	nop
 800efe8:	e01c      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efea:	bf00      	nop
 800efec:	e01a      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efee:	bf00      	nop
 800eff0:	e018      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eff2:	bf00      	nop
 800eff4:	e016      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eff6:	bf00      	nop
 800eff8:	e014      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800effa:	bf00      	nop
 800effc:	e012      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800effe:	bf00      	nop
 800f000:	e010      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f002:	bf00      	nop
 800f004:	e00e      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f006:	bf00      	nop
 800f008:	e00c      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f00a:	bf00      	nop
 800f00c:	e00a      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f00e:	bf00      	nop
 800f010:	e008      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f012:	bf00      	nop
 800f014:	e006      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f016:	bf00      	nop
 800f018:	e004      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f01a:	bf00      	nop
 800f01c:	e002      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f01e:	bf00      	nop
 800f020:	e000      	b.n	800f024 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f022:	bf00      	nop
        }
}
 800f024:	bf00      	nop
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	08013c78 	.word	0x08013c78
 800f030:	08013c84 	.word	0x08013c84
 800f034:	08013c9c 	.word	0x08013c9c
 800f038:	08013cb4 	.word	0x08013cb4
 800f03c:	08013cc8 	.word	0x08013cc8

0800f040 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800f040:	b5b0      	push	{r4, r5, r7, lr}
 800f042:	b086      	sub	sp, #24
 800f044:	af02      	add	r7, sp, #8
 800f046:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800f048:	2340      	movs	r3, #64	; 0x40
 800f04a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	33c9      	adds	r3, #201	; 0xc9
 800f060:	687a      	ldr	r2, [r7, #4]
 800f062:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800f066:	f107 050a 	add.w	r5, r7, #10
 800f06a:	9201      	str	r2, [sp, #4]
 800f06c:	9300      	str	r3, [sp, #0]
 800f06e:	462b      	mov	r3, r5
 800f070:	4622      	mov	r2, r4
 800f072:	f003 f92c 	bl	80122ce <_ZN3USB10inTransferEhhPtPhh>
 800f076:	4603      	mov	r3, r0
 800f078:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800f07a:	7b7b      	ldrb	r3, [r7, #13]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d125      	bne.n	800f0cc <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800f080:	897b      	ldrh	r3, [r7, #10]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d022      	beq.n	800f0cc <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f086:	2300      	movs	r3, #0
 800f088:	73fb      	strb	r3, [r7, #15]
 800f08a:	7bfb      	ldrb	r3, [r7, #15]
 800f08c:	2b03      	cmp	r3, #3
 800f08e:	d81d      	bhi.n	800f0cc <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800f090:	7bfb      	ldrb	r3, [r7, #15]
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	3318      	adds	r3, #24
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	4413      	add	r3, r2
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d011      	beq.n	800f0c4 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800f0a0:	7bfb      	ldrb	r3, [r7, #15]
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	3318      	adds	r3, #24
 800f0a6:	009b      	lsls	r3, r3, #2
 800f0a8:	4413      	add	r3, r2
 800f0aa:	6858      	ldr	r0, [r3, #4]
 800f0ac:	7bfb      	ldrb	r3, [r7, #15]
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	3318      	adds	r3, #24
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4413      	add	r3, r2
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	32c9      	adds	r2, #201	; 0xc9
 800f0c0:	4611      	mov	r1, r2
 800f0c2:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	73fb      	strb	r3, [r7, #15]
 800f0ca:	e7de      	b.n	800f08a <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	73bb      	strb	r3, [r7, #14]
 800f0d0:	7bbb      	ldrb	r3, [r7, #14]
 800f0d2:	2b03      	cmp	r3, #3
 800f0d4:	d81c      	bhi.n	800f110 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800f0d6:	7bbb      	ldrb	r3, [r7, #14]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	3318      	adds	r3, #24
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	4413      	add	r3, r2
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d010      	beq.n	800f108 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800f0e6:	7bbb      	ldrb	r3, [r7, #14]
 800f0e8:	687a      	ldr	r2, [r7, #4]
 800f0ea:	3318      	adds	r3, #24
 800f0ec:	009b      	lsls	r3, r3, #2
 800f0ee:	4413      	add	r3, r2
 800f0f0:	6859      	ldr	r1, [r3, #4]
 800f0f2:	7bbb      	ldrb	r3, [r7, #14]
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	3318      	adds	r3, #24
 800f0f8:	009b      	lsls	r3, r3, #2
 800f0fa:	4413      	add	r3, r2
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	3304      	adds	r3, #4
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4608      	mov	r0, r1
 800f106:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800f108:	7bbb      	ldrb	r3, [r7, #14]
 800f10a:	3301      	adds	r3, #1
 800f10c:	73bb      	strb	r3, [r7, #14]
 800f10e:	e7df      	b.n	800f0d0 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800f110:	bf00      	nop
 800f112:	3710      	adds	r7, #16
 800f114:	46bd      	mov	sp, r7
 800f116:	bdb0      	pop	{r4, r5, r7, pc}

0800f118 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800f118:	b580      	push	{r7, lr}
 800f11a:	b08c      	sub	sp, #48	; 0x30
 800f11c:	af08      	add	r7, sp, #32
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	4613      	mov	r3, r2
 800f124:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f12c:	f023 0301 	bic.w	r3, r3, #1
 800f130:	b29a      	uxth	r2, r3
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800f148:	2300      	movs	r3, #0
 800f14a:	9307      	str	r3, [sp, #28]
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	9306      	str	r3, [sp, #24]
 800f150:	88fb      	ldrh	r3, [r7, #6]
 800f152:	9305      	str	r3, [sp, #20]
 800f154:	88fb      	ldrh	r3, [r7, #6]
 800f156:	9304      	str	r3, [sp, #16]
 800f158:	2300      	movs	r3, #0
 800f15a:	9303      	str	r3, [sp, #12]
 800f15c:	2300      	movs	r3, #0
 800f15e:	9302      	str	r3, [sp, #8]
 800f160:	2300      	movs	r3, #0
 800f162:	9301      	str	r3, [sp, #4]
 800f164:	2300      	movs	r3, #0
 800f166:	9300      	str	r3, [sp, #0]
 800f168:	2320      	movs	r3, #32
 800f16a:	f002 ffd8 	bl	801211e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800f16e:	bf00      	nop
 800f170:	3710      	adds	r7, #16
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800f176:	b580      	push	{r7, lr}
 800f178:	b082      	sub	sp, #8
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2203      	movs	r2, #3
 800f18a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	220c      	movs	r2, #12
 800f192:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	3389      	adds	r3, #137	; 0x89
 800f1a2:	2203      	movs	r2, #3
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f7ff ffb6 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f1ac:	bf00      	nop
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f1c2:	f023 0310 	bic.w	r3, r3, #16
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	221a      	movs	r2, #26
 800f1d2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	220c      	movs	r2, #12
 800f1da:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d004      	beq.n	800f1f8 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2203      	movs	r2, #3
 800f1f2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800f1f6:	e003      	b.n	800f200 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2202      	movs	r2, #2
 800f1fc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	3389      	adds	r3, #137	; 0x89
 800f204:	2204      	movs	r2, #4
 800f206:	4619      	mov	r1, r3
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f7ff ff85 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f20e:	bf00      	nop
 800f210:	3708      	adds	r7, #8
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800f216:	b580      	push	{r7, lr}
 800f218:	b082      	sub	sp, #8
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f224:	f023 0320 	bic.w	r3, r3, #32
 800f228:	b29a      	uxth	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2209      	movs	r2, #9
 800f234:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2210      	movs	r2, #16
 800f23c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	3389      	adds	r3, #137	; 0x89
 800f24c:	2203      	movs	r2, #3
 800f24e:	4619      	mov	r1, r3
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f7ff ff61 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f256:	bf00      	nop
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800f25e:	b580      	push	{r7, lr}
 800f260:	b082      	sub	sp, #8
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f26c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f270:	b29a      	uxth	r2, r3
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2201      	movs	r2, #1
 800f27c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2210      	movs	r2, #16
 800f284:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	3389      	adds	r3, #137	; 0x89
 800f294:	2203      	movs	r2, #3
 800f296:	4619      	mov	r1, r3
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7ff ff3d 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f29e:	bf00      	nop
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b082      	sub	sp, #8
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f2b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f2bc:	b29a      	uxth	r2, r3
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2204      	movs	r2, #4
 800f2c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2210      	movs	r2, #16
 800f2d0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	78fa      	ldrb	r2, [r7, #3]
 800f2e0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	3389      	adds	r3, #137	; 0x89
 800f2e8:	2204      	movs	r2, #4
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7ff ff13 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f2f2:	bf00      	nop
 800f2f4:	3708      	adds	r7, #8
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b082      	sub	sp, #8
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f308:	f023 0302 	bic.w	r3, r3, #2
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2209      	movs	r2, #9
 800f318:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2204      	movs	r2, #4
 800f320:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2207      	movs	r2, #7
 800f328:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	7f1a      	ldrb	r2, [r3, #28]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	7f5a      	ldrb	r2, [r3, #29]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	7f9a      	ldrb	r2, [r3, #30]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	7fda      	ldrb	r2, [r3, #31]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	3389      	adds	r3, #137	; 0x89
 800f378:	220a      	movs	r2, #10
 800f37a:	4619      	mov	r1, r3
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f7ff fecb 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f382:	bf00      	nop
 800f384:	3708      	adds	r7, #8
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800f38a:	b580      	push	{r7, lr}
 800f38c:	b082      	sub	sp, #8
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f398:	f023 0308 	bic.w	r3, r3, #8
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2219      	movs	r2, #25
 800f3a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2204      	movs	r2, #4
 800f3b0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	220a      	movs	r2, #10
 800f3b8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	7f1a      	ldrb	r2, [r3, #28]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	7f5a      	ldrb	r2, [r3, #29]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	7f9a      	ldrb	r2, [r3, #30]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	7fda      	ldrb	r2, [r3, #31]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2201      	movs	r2, #1
 800f400:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2200      	movs	r2, #0
 800f418:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	3389      	adds	r3, #137	; 0x89
 800f420:	220d      	movs	r2, #13
 800f422:	4619      	mov	r1, r3
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f7ff fe77 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f42a:	bf00      	nop
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800f432:	b590      	push	{r4, r7, lr}
 800f434:	b085      	sub	sp, #20
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
 800f43a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2213      	movs	r2, #19
 800f440:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	220c      	movs	r2, #12
 800f448:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800f44c:	6838      	ldr	r0, [r7, #0]
 800f44e:	f7f0 fedf 	bl	8000210 <strlen>
 800f452:	4603      	mov	r3, r0
 800f454:	b2db      	uxtb	r3, r3
 800f456:	3301      	adds	r3, #1
 800f458:	b2da      	uxtb	r2, r3
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800f460:	2300      	movs	r3, #0
 800f462:	73fb      	strb	r3, [r7, #15]
 800f464:	7bfc      	ldrb	r4, [r7, #15]
 800f466:	6838      	ldr	r0, [r7, #0]
 800f468:	f7f0 fed2 	bl	8000210 <strlen>
 800f46c:	4603      	mov	r3, r0
 800f46e:	429c      	cmp	r4, r3
 800f470:	d20e      	bcs.n	800f490 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800f472:	7bfb      	ldrb	r3, [r7, #15]
 800f474:	683a      	ldr	r2, [r7, #0]
 800f476:	441a      	add	r2, r3
 800f478:	7bfb      	ldrb	r3, [r7, #15]
 800f47a:	3303      	adds	r3, #3
 800f47c:	7811      	ldrb	r1, [r2, #0]
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	4413      	add	r3, r2
 800f482:	460a      	mov	r2, r1
 800f484:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800f488:	7bfb      	ldrb	r3, [r7, #15]
 800f48a:	3301      	adds	r3, #1
 800f48c:	73fb      	strb	r3, [r7, #15]
 800f48e:	e7e9      	b.n	800f464 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800f490:	7bfb      	ldrb	r3, [r7, #15]
 800f492:	3303      	adds	r3, #3
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	4413      	add	r3, r2
 800f498:	2200      	movs	r2, #0
 800f49a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800f4a4:	6838      	ldr	r0, [r7, #0]
 800f4a6:	f7f0 feb3 	bl	8000210 <strlen>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	4621      	mov	r1, r4
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7ff fe2e 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f4bc:	bf00      	nop
 800f4be:	3714      	adds	r7, #20
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd90      	pop	{r4, r7, pc}

0800f4c4 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	220c      	movs	r2, #12
 800f4d8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2208      	movs	r2, #8
 800f4e0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	22ff      	movs	r2, #255	; 0xff
 800f4e8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	22ff      	movs	r2, #255	; 0xff
 800f4f0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	22ff      	movs	r2, #255	; 0xff
 800f4f8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	22ff      	movs	r2, #255	; 0xff
 800f500:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	22ff      	movs	r2, #255	; 0xff
 800f508:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	221f      	movs	r2, #31
 800f510:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	22ff      	movs	r2, #255	; 0xff
 800f518:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	3389      	adds	r3, #137	; 0x89
 800f528:	220b      	movs	r2, #11
 800f52a:	4619      	mov	r1, r3
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f7ff fdf3 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f532:	bf00      	nop
 800f534:	3708      	adds	r7, #8
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}

0800f53a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b082      	sub	sp, #8
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
 800f542:	460b      	mov	r3, r1
 800f544:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2256      	movs	r2, #86	; 0x56
 800f54a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	220c      	movs	r2, #12
 800f552:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2201      	movs	r2, #1
 800f55a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800f55e:	78fb      	ldrb	r3, [r7, #3]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d001      	beq.n	800f568 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800f564:	2201      	movs	r2, #1
 800f566:	e000      	b.n	800f56a <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800f568:	2200      	movs	r2, #0
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	3389      	adds	r3, #137	; 0x89
 800f574:	2204      	movs	r2, #4
 800f576:	4619      	mov	r1, r3
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7ff fdcd 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f57e:	bf00      	nop
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}

0800f586 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800f586:	b580      	push	{r7, lr}
 800f588:	b082      	sub	sp, #8
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f598:	b29a      	uxth	r2, r3
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2204      	movs	r2, #4
 800f5ac:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2205      	movs	r2, #5
 800f5b4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2233      	movs	r2, #51	; 0x33
 800f5bc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	228b      	movs	r2, #139	; 0x8b
 800f5c4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	229e      	movs	r2, #158	; 0x9e
 800f5cc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2230      	movs	r2, #48	; 0x30
 800f5d4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	220a      	movs	r2, #10
 800f5dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	3389      	adds	r3, #137	; 0x89
 800f5e4:	2208      	movs	r2, #8
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7ff fd95 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f5ee:	bf00      	nop
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b082      	sub	sp, #8
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2202      	movs	r2, #2
 800f602:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2204      	movs	r2, #4
 800f60a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2200      	movs	r2, #0
 800f612:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	3389      	adds	r3, #137	; 0x89
 800f61a:	2203      	movs	r2, #3
 800f61c:	4619      	mov	r1, r3
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7ff fd7a 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f624:	bf00      	nop
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	331c      	adds	r3, #28
 800f638:	4619      	mov	r1, r3
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 f804 	bl	800f648 <_ZN3BTD11hci_connectEPh>
}
 800f640:	bf00      	nop
 800f642:	3708      	adds	r7, #8
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f658:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2205      	movs	r2, #5
 800f668:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2204      	movs	r2, #4
 800f670:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	220d      	movs	r2, #13
 800f678:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	781a      	ldrb	r2, [r3, #0]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	785a      	ldrb	r2, [r3, #1]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	789a      	ldrb	r2, [r3, #2]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	78da      	ldrb	r2, [r3, #3]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	791a      	ldrb	r2, [r3, #4]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	795a      	ldrb	r2, [r3, #5]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2218      	movs	r2, #24
 800f6bc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	22cc      	movs	r2, #204	; 0xcc
 800f6c4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	3389      	adds	r3, #137	; 0x89
 800f6f4:	2210      	movs	r2, #16
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f7ff fd0d 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f6fe:	bf00      	nop
 800f700:	3708      	adds	r7, #8
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}

0800f706 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800f706:	b590      	push	{r4, r7, lr}
 800f708:	b085      	sub	sp, #20
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	220d      	movs	r2, #13
 800f712:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2204      	movs	r2, #4
 800f71a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2217      	movs	r2, #23
 800f722:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	7f1a      	ldrb	r2, [r3, #28]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	7f5a      	ldrb	r2, [r3, #29]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	7f9a      	ldrb	r2, [r3, #30]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	7fda      	ldrb	r2, [r3, #31]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d03f      	beq.n	800f7f0 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2206      	movs	r2, #6
 800f774:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d013      	beq.n	800f7aa <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800f782:	2300      	movs	r3, #0
 800f784:	73fb      	strb	r3, [r7, #15]
 800f786:	7bfb      	ldrb	r3, [r7, #15]
 800f788:	2b05      	cmp	r3, #5
 800f78a:	d822      	bhi.n	800f7d2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800f78c:	7bfa      	ldrb	r2, [r7, #15]
 800f78e:	7bfb      	ldrb	r3, [r7, #15]
 800f790:	330a      	adds	r3, #10
 800f792:	6879      	ldr	r1, [r7, #4]
 800f794:	440a      	add	r2, r1
 800f796:	7d11      	ldrb	r1, [r2, #20]
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	4413      	add	r3, r2
 800f79c:	460a      	mov	r2, r1
 800f79e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800f7a2:	7bfb      	ldrb	r3, [r7, #15]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	73fb      	strb	r3, [r7, #15]
 800f7a8:	e7ed      	b.n	800f786 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	73bb      	strb	r3, [r7, #14]
 800f7ae:	7bbb      	ldrb	r3, [r7, #14]
 800f7b0:	2b05      	cmp	r3, #5
 800f7b2:	d80e      	bhi.n	800f7d2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800f7b4:	7bba      	ldrb	r2, [r7, #14]
 800f7b6:	7bbb      	ldrb	r3, [r7, #14]
 800f7b8:	330a      	adds	r3, #10
 800f7ba:	6879      	ldr	r1, [r7, #4]
 800f7bc:	440a      	add	r2, r1
 800f7be:	7f11      	ldrb	r1, [r2, #28]
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	460a      	mov	r2, r1
 800f7c6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800f7ca:	7bbb      	ldrb	r3, [r7, #14]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	73bb      	strb	r3, [r7, #14]
 800f7d0:	e7ed      	b.n	800f7ae <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800f7d2:	2310      	movs	r3, #16
 800f7d4:	737b      	strb	r3, [r7, #13]
 800f7d6:	7b7b      	ldrb	r3, [r7, #13]
 800f7d8:	2b19      	cmp	r3, #25
 800f7da:	d83c      	bhi.n	800f856 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800f7dc:	7b7b      	ldrb	r3, [r7, #13]
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800f7e8:	7b7b      	ldrb	r3, [r7, #13]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	737b      	strb	r3, [r7, #13]
 800f7ee:	e7f2      	b.n	800f7d6 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	691b      	ldr	r3, [r3, #16]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7f0 fd0b 	bl	8000210 <strlen>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	b2da      	uxtb	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800f804:	2300      	movs	r3, #0
 800f806:	733b      	strb	r3, [r7, #12]
 800f808:	7b3c      	ldrb	r4, [r7, #12]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	691b      	ldr	r3, [r3, #16]
 800f80e:	4618      	mov	r0, r3
 800f810:	f7f0 fcfe 	bl	8000210 <strlen>
 800f814:	4603      	mov	r3, r0
 800f816:	429c      	cmp	r4, r3
 800f818:	d20f      	bcs.n	800f83a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	691a      	ldr	r2, [r3, #16]
 800f81e:	7b3b      	ldrb	r3, [r7, #12]
 800f820:	441a      	add	r2, r3
 800f822:	7b3b      	ldrb	r3, [r7, #12]
 800f824:	330a      	adds	r3, #10
 800f826:	7811      	ldrb	r1, [r2, #0]
 800f828:	687a      	ldr	r2, [r7, #4]
 800f82a:	4413      	add	r3, r2
 800f82c:	460a      	mov	r2, r1
 800f82e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800f832:	7b3b      	ldrb	r3, [r7, #12]
 800f834:	3301      	adds	r3, #1
 800f836:	733b      	strb	r3, [r7, #12]
 800f838:	e7e6      	b.n	800f808 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800f83a:	7b3b      	ldrb	r3, [r7, #12]
 800f83c:	2b0f      	cmp	r3, #15
 800f83e:	d80a      	bhi.n	800f856 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800f840:	7b3b      	ldrb	r3, [r7, #12]
 800f842:	330a      	adds	r3, #10
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	4413      	add	r3, r2
 800f848:	2200      	movs	r2, #0
 800f84a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800f84e:	7b3b      	ldrb	r3, [r7, #12]
 800f850:	3301      	adds	r3, #1
 800f852:	733b      	strb	r3, [r7, #12]
 800f854:	e7f1      	b.n	800f83a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	3389      	adds	r3, #137	; 0x89
 800f85a:	221a      	movs	r2, #26
 800f85c:	4619      	mov	r1, r3
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f7ff fc5a 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f864:	bf00      	nop
 800f866:	3714      	adds	r7, #20
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd90      	pop	{r4, r7, pc}

0800f86c <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	220e      	movs	r2, #14
 800f878:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2204      	movs	r2, #4
 800f880:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2206      	movs	r2, #6
 800f888:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	7f1a      	ldrb	r2, [r3, #28]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	7f5a      	ldrb	r2, [r3, #29]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	7f9a      	ldrb	r2, [r3, #30]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	7fda      	ldrb	r2, [r3, #31]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	3389      	adds	r3, #137	; 0x89
 800f8d0:	2209      	movs	r2, #9
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7ff fc1f 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f8da:	bf00      	nop
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}

0800f8e2 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b082      	sub	sp, #8
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	220c      	movs	r2, #12
 800f8ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2204      	movs	r2, #4
 800f8f6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2206      	movs	r2, #6
 800f8fe:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	7f1a      	ldrb	r2, [r3, #28]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	7f5a      	ldrb	r2, [r3, #29]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	7f9a      	ldrb	r2, [r3, #30]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	7fda      	ldrb	r2, [r3, #31]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	3389      	adds	r3, #137	; 0x89
 800f946:	2209      	movs	r2, #9
 800f948:	4619      	mov	r1, r3
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f7ff fbe4 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f950:	bf00      	nop
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	222b      	movs	r2, #43	; 0x2b
 800f964:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2204      	movs	r2, #4
 800f96c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2209      	movs	r2, #9
 800f974:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	7f1a      	ldrb	r2, [r3, #28]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	7f5a      	ldrb	r2, [r3, #29]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	7f9a      	ldrb	r2, [r3, #30]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	7fda      	ldrb	r2, [r3, #31]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2203      	movs	r2, #3
 800f9bc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	3389      	adds	r3, #137	; 0x89
 800f9d4:	220c      	movs	r2, #12
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7ff fb9d 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800f9de:	bf00      	nop
 800f9e0:	3708      	adds	r7, #8
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}

0800f9e6 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800f9e6:	b580      	push	{r7, lr}
 800f9e8:	b082      	sub	sp, #8
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	222c      	movs	r2, #44	; 0x2c
 800f9f2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2204      	movs	r2, #4
 800f9fa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2206      	movs	r2, #6
 800fa02:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	7f1a      	ldrb	r2, [r3, #28]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	7f5a      	ldrb	r2, [r3, #29]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	7f9a      	ldrb	r2, [r3, #30]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	7fda      	ldrb	r2, [r3, #31]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	3389      	adds	r3, #137	; 0x89
 800fa4a:	2209      	movs	r2, #9
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f7ff fb62 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800fa54:	bf00      	nop
 800fa56:	3708      	adds	r7, #8
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2211      	movs	r2, #17
 800fa68:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2204      	movs	r2, #4
 800fa70:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2202      	movs	r2, #2
 800fa78:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	8b5b      	ldrh	r3, [r3, #26]
 800fa80:	b2da      	uxtb	r2, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	8b5b      	ldrh	r3, [r3, #26]
 800fa8c:	121b      	asrs	r3, r3, #8
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	f003 030f 	and.w	r3, r3, #15
 800fa94:	b2da      	uxtb	r2, r3
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	3389      	adds	r3, #137	; 0x89
 800faa0:	2205      	movs	r2, #5
 800faa2:	4619      	mov	r1, r3
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f7ff fb37 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800faaa:	bf00      	nop
 800faac:	3708      	adds	r7, #8
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}

0800fab2 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800fab2:	b580      	push	{r7, lr}
 800fab4:	b082      	sub	sp, #8
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	460b      	mov	r3, r1
 800fabc:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fac4:	f023 0304 	bic.w	r3, r3, #4
 800fac8:	b29a      	uxth	r2, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2206      	movs	r2, #6
 800fad4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2204      	movs	r2, #4
 800fadc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2203      	movs	r2, #3
 800fae4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800fae8:	887b      	ldrh	r3, [r7, #2]
 800faea:	b2da      	uxtb	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800faf2:	887b      	ldrh	r3, [r7, #2]
 800faf4:	121b      	asrs	r3, r3, #8
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	f003 030f 	and.w	r3, r3, #15
 800fafc:	b2da      	uxtb	r2, r3
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2213      	movs	r2, #19
 800fb08:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	3389      	adds	r3, #137	; 0x89
 800fb10:	2206      	movs	r2, #6
 800fb12:	4619      	mov	r1, r3
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7ff faff 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800fb1a:	bf00      	nop
 800fb1c:	3708      	adds	r7, #8
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800fb22:	b580      	push	{r7, lr}
 800fb24:	b082      	sub	sp, #8
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2224      	movs	r2, #36	; 0x24
 800fb2e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	220c      	movs	r2, #12
 800fb36:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2203      	movs	r2, #3
 800fb3e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2204      	movs	r2, #4
 800fb46:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2208      	movs	r2, #8
 800fb4e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	3389      	adds	r3, #137	; 0x89
 800fb5e:	2206      	movs	r2, #6
 800fb60:	4619      	mov	r1, r3
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f7ff fad8 	bl	800f118 <_ZN3BTD11HCI_CommandEPht>
}
 800fb68:	bf00      	nop
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800fb70:	b5b0      	push	{r4, r5, r7, lr}
 800fb72:	b08a      	sub	sp, #40	; 0x28
 800fb74:	af02      	add	r7, sp, #8
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	607a      	str	r2, [r7, #4]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	817b      	strh	r3, [r7, #10]
 800fb80:	4613      	mov	r3, r2
 800fb82:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800fb84:	466b      	mov	r3, sp
 800fb86:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800fb88:	7a7b      	ldrb	r3, [r7, #9]
 800fb8a:	1ddc      	adds	r4, r3, #7
 800fb8c:	61bc      	str	r4, [r7, #24]
 800fb8e:	4623      	mov	r3, r4
 800fb90:	3301      	adds	r3, #1
 800fb92:	4618      	mov	r0, r3
 800fb94:	f04f 0100 	mov.w	r1, #0
 800fb98:	f04f 0200 	mov.w	r2, #0
 800fb9c:	f04f 0300 	mov.w	r3, #0
 800fba0:	00cb      	lsls	r3, r1, #3
 800fba2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800fba6:	00c2      	lsls	r2, r0, #3
 800fba8:	4623      	mov	r3, r4
 800fbaa:	3301      	adds	r3, #1
 800fbac:	4618      	mov	r0, r3
 800fbae:	f04f 0100 	mov.w	r1, #0
 800fbb2:	f04f 0200 	mov.w	r2, #0
 800fbb6:	f04f 0300 	mov.w	r3, #0
 800fbba:	00cb      	lsls	r3, r1, #3
 800fbbc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800fbc0:	00c2      	lsls	r2, r0, #3
 800fbc2:	4623      	mov	r3, r4
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	3307      	adds	r3, #7
 800fbc8:	08db      	lsrs	r3, r3, #3
 800fbca:	00db      	lsls	r3, r3, #3
 800fbcc:	ebad 0d03 	sub.w	sp, sp, r3
 800fbd0:	ab02      	add	r3, sp, #8
 800fbd2:	3300      	adds	r3, #0
 800fbd4:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800fbd6:	897b      	ldrh	r3, [r7, #10]
 800fbd8:	b2da      	uxtb	r2, r3
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800fbde:	897b      	ldrh	r3, [r7, #10]
 800fbe0:	121b      	asrs	r3, r3, #8
 800fbe2:	b25b      	sxtb	r3, r3
 800fbe4:	f003 030f 	and.w	r3, r3, #15
 800fbe8:	b25b      	sxtb	r3, r3
 800fbea:	f043 0320 	orr.w	r3, r3, #32
 800fbee:	b25b      	sxtb	r3, r3
 800fbf0:	b2da      	uxtb	r2, r3
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800fbf6:	7a7b      	ldrb	r3, [r7, #9]
 800fbf8:	3304      	adds	r3, #4
 800fbfa:	b2da      	uxtb	r2, r3
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800fc00:	7a7b      	ldrb	r3, [r7, #9]
 800fc02:	3304      	adds	r3, #4
 800fc04:	121b      	asrs	r3, r3, #8
 800fc06:	b2da      	uxtb	r2, r3
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	7a7a      	ldrb	r2, [r7, #9]
 800fc10:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800fc12:	7a7b      	ldrb	r3, [r7, #9]
 800fc14:	121b      	asrs	r3, r3, #8
 800fc16:	b2da      	uxtb	r2, r3
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800fc22:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800fc2a:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	83fb      	strh	r3, [r7, #30]
 800fc30:	7a7b      	ldrb	r3, [r7, #9]
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	8bfa      	ldrh	r2, [r7, #30]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d20b      	bcs.n	800fc52 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800fc3a:	8bfb      	ldrh	r3, [r7, #30]
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	441a      	add	r2, r3
 800fc40:	8bfb      	ldrh	r3, [r7, #30]
 800fc42:	3308      	adds	r3, #8
 800fc44:	7811      	ldrb	r1, [r2, #0]
 800fc46:	697a      	ldr	r2, [r7, #20]
 800fc48:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800fc4a:	8bfb      	ldrh	r3, [r7, #30]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	83fb      	strh	r3, [r7, #30]
 800fc50:	e7ee      	b.n	800fc30 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800fc62:	7a7b      	ldrb	r3, [r7, #9]
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	3308      	adds	r3, #8
 800fc68:	b29c      	uxth	r4, r3
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	4623      	mov	r3, r4
 800fc70:	f002 fc34 	bl	80124dc <_ZN3USB11outTransferEhhtPh>
 800fc74:	4603      	mov	r3, r0
 800fc76:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800fc78:	7cfb      	ldrb	r3, [r7, #19]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d002      	beq.n	800fc84 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800fc7e:	2064      	movs	r0, #100	; 0x64
 800fc80:	f7f2 fe68 	bl	8002954 <HAL_Delay>
 800fc84:	46ad      	mov	sp, r5
}
 800fc86:	bf00      	nop
 800fc88:	3720      	adds	r7, #32
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bdb0      	pop	{r4, r5, r7, pc}

0800fc8e <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b086      	sub	sp, #24
 800fc92:	af02      	add	r7, sp, #8
 800fc94:	60f8      	str	r0, [r7, #12]
 800fc96:	607b      	str	r3, [r7, #4]
 800fc98:	460b      	mov	r3, r1
 800fc9a:	817b      	strh	r3, [r7, #10]
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2202      	movs	r2, #2
 800fca4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	7a7a      	ldrb	r2, [r7, #9]
 800fcac:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2204      	movs	r2, #4
 800fcb4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800fcc0:	8b3b      	ldrh	r3, [r7, #24]
 800fcc2:	b2da      	uxtb	r2, r3
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800fcca:	8b3b      	ldrh	r3, [r7, #24]
 800fccc:	121b      	asrs	r3, r3, #8
 800fcce:	b2da      	uxtb	r2, r3
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	781a      	ldrb	r2, [r3, #0]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	785a      	ldrb	r2, [r3, #1]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fcf0:	8979      	ldrh	r1, [r7, #10]
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	9301      	str	r3, [sp, #4]
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	2308      	movs	r3, #8
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f7ff ff37 	bl	800fb70 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fd02:	bf00      	nop
 800fd04:	3710      	adds	r7, #16
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b086      	sub	sp, #24
 800fd0e:	af02      	add	r7, sp, #8
 800fd10:	60f8      	str	r0, [r7, #12]
 800fd12:	607b      	str	r3, [r7, #4]
 800fd14:	460b      	mov	r3, r1
 800fd16:	817b      	strh	r3, [r7, #10]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2203      	movs	r2, #3
 800fd20:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	7a7a      	ldrb	r2, [r7, #9]
 800fd28:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2208      	movs	r2, #8
 800fd30:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	781a      	ldrb	r2, [r3, #0]
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	785a      	ldrb	r2, [r3, #1]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	781a      	ldrb	r2, [r3, #0]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fd5a:	69bb      	ldr	r3, [r7, #24]
 800fd5c:	785a      	ldrb	r2, [r3, #1]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	7f3a      	ldrb	r2, [r7, #28]
 800fd68:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2200      	movs	r2, #0
 800fd78:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fd8a:	8979      	ldrh	r1, [r7, #10]
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	9301      	str	r3, [sp, #4]
 800fd90:	2301      	movs	r3, #1
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	230c      	movs	r3, #12
 800fd96:	68f8      	ldr	r0, [r7, #12]
 800fd98:	f7ff feea 	bl	800fb70 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fd9c:	bf00      	nop
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b086      	sub	sp, #24
 800fda8:	af02      	add	r7, sp, #8
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	607b      	str	r3, [r7, #4]
 800fdae:	460b      	mov	r3, r1
 800fdb0:	817b      	strh	r3, [r7, #10]
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2204      	movs	r2, #4
 800fdba:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	7a7a      	ldrb	r2, [r7, #9]
 800fdc2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2208      	movs	r2, #8
 800fdca:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	781a      	ldrb	r2, [r3, #0]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	785a      	ldrb	r2, [r3, #1]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2200      	movs	r2, #0
 800fdee:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2202      	movs	r2, #2
 800fe06:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	22ff      	movs	r2, #255	; 0xff
 800fe0e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	22ff      	movs	r2, #255	; 0xff
 800fe16:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fe20:	8979      	ldrh	r1, [r7, #10]
 800fe22:	2300      	movs	r3, #0
 800fe24:	9301      	str	r3, [sp, #4]
 800fe26:	2301      	movs	r3, #1
 800fe28:	9300      	str	r3, [sp, #0]
 800fe2a:	230c      	movs	r3, #12
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f7ff fe9f 	bl	800fb70 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fe32:	bf00      	nop
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b086      	sub	sp, #24
 800fe3e:	af02      	add	r7, sp, #8
 800fe40:	60f8      	str	r0, [r7, #12]
 800fe42:	607b      	str	r3, [r7, #4]
 800fe44:	460b      	mov	r3, r1
 800fe46:	817b      	strh	r3, [r7, #10]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2205      	movs	r2, #5
 800fe50:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	7a7a      	ldrb	r2, [r7, #9]
 800fe58:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	220a      	movs	r2, #10
 800fe60:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2200      	movs	r2, #0
 800fe68:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	781a      	ldrb	r2, [r3, #0]
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	785a      	ldrb	r2, [r3, #1]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2200      	movs	r2, #0
 800fe84:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2200      	movs	r2, #0
 800fe94:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2201      	movs	r2, #1
 800fea4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2202      	movs	r2, #2
 800feac:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	22a0      	movs	r2, #160	; 0xa0
 800feb4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2202      	movs	r2, #2
 800febc:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fec6:	8979      	ldrh	r1, [r7, #10]
 800fec8:	2300      	movs	r3, #0
 800feca:	9301      	str	r3, [sp, #4]
 800fecc:	2301      	movs	r3, #1
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	230e      	movs	r3, #14
 800fed2:	68f8      	ldr	r0, [r7, #12]
 800fed4:	f7ff fe4c 	bl	800fb70 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fed8:	bf00      	nop
 800feda:	3710      	adds	r7, #16
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b086      	sub	sp, #24
 800fee4:	af02      	add	r7, sp, #8
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	607b      	str	r3, [r7, #4]
 800feea:	460b      	mov	r3, r1
 800feec:	817b      	strh	r3, [r7, #10]
 800feee:	4613      	mov	r3, r2
 800fef0:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2206      	movs	r2, #6
 800fef6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	7a7a      	ldrb	r2, [r7, #9]
 800fefe:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2204      	movs	r2, #4
 800ff06:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	781a      	ldrb	r2, [r3, #0]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	785a      	ldrb	r2, [r3, #1]
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	781a      	ldrb	r2, [r3, #0]
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ff30:	69bb      	ldr	r3, [r7, #24]
 800ff32:	785a      	ldrb	r2, [r3, #1]
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ff40:	8979      	ldrh	r1, [r7, #10]
 800ff42:	2300      	movs	r3, #0
 800ff44:	9301      	str	r3, [sp, #4]
 800ff46:	2301      	movs	r3, #1
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	2308      	movs	r3, #8
 800ff4c:	68f8      	ldr	r0, [r7, #12]
 800ff4e:	f7ff fe0f 	bl	800fb70 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ff52:	bf00      	nop
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b086      	sub	sp, #24
 800ff5e:	af02      	add	r7, sp, #8
 800ff60:	60f8      	str	r0, [r7, #12]
 800ff62:	607b      	str	r3, [r7, #4]
 800ff64:	460b      	mov	r3, r1
 800ff66:	817b      	strh	r3, [r7, #10]
 800ff68:	4613      	mov	r3, r2
 800ff6a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2207      	movs	r2, #7
 800ff70:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	7a7a      	ldrb	r2, [r7, #9]
 800ff78:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2204      	movs	r2, #4
 800ff80:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2200      	movs	r2, #0
 800ff88:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	781a      	ldrb	r2, [r3, #0]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	785a      	ldrb	r2, [r3, #1]
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ffa0:	69bb      	ldr	r3, [r7, #24]
 800ffa2:	781a      	ldrb	r2, [r3, #0]
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	785a      	ldrb	r2, [r3, #1]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ffba:	8979      	ldrh	r1, [r7, #10]
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	9301      	str	r3, [sp, #4]
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	9300      	str	r3, [sp, #0]
 800ffc4:	2308      	movs	r3, #8
 800ffc6:	68f8      	ldr	r0, [r7, #12]
 800ffc8:	f7ff fdd2 	bl	800fb70 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ffcc:	bf00      	nop
 800ffce:	3710      	adds	r7, #16
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af02      	add	r7, sp, #8
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	4608      	mov	r0, r1
 800ffde:	4611      	mov	r1, r2
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	807b      	strh	r3, [r7, #2]
 800ffe6:	460b      	mov	r3, r1
 800ffe8:	707b      	strb	r3, [r7, #1]
 800ffea:	4613      	mov	r3, r2
 800ffec:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	220b      	movs	r2, #11
 800fff2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	787a      	ldrb	r2, [r7, #1]
 800fffa:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2208      	movs	r2, #8
 8010002:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2200      	movs	r2, #0
 801000a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	783a      	ldrb	r2, [r7, #0]
 8010012:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	7c3a      	ldrb	r2, [r7, #16]
 801001a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2200      	movs	r2, #0
 8010032:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2200      	movs	r2, #0
 801003a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2200      	movs	r2, #0
 8010042:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2200      	movs	r2, #0
 801004a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f203 1209 	addw	r2, r3, #265	; 0x109
 8010054:	8879      	ldrh	r1, [r7, #2]
 8010056:	2300      	movs	r3, #0
 8010058:	9301      	str	r3, [sp, #4]
 801005a:	2301      	movs	r3, #1
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	230c      	movs	r3, #12
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f7ff fd85 	bl	800fb70 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010066:	bf00      	nop
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 801006e:	b580      	push	{r7, lr}
 8010070:	b08e      	sub	sp, #56	; 0x38
 8010072:	af08      	add	r7, sp, #32
 8010074:	6078      	str	r0, [r7, #4]
 8010076:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 8010078:	2301      	movs	r3, #1
 801007a:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 801007c:	2300      	movs	r3, #0
 801007e:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 8010080:	2300      	movs	r3, #0
 8010082:	75fb      	strb	r3, [r7, #23]
 8010084:	7dfb      	ldrb	r3, [r7, #23]
 8010086:	2b05      	cmp	r3, #5
 8010088:	d811      	bhi.n	80100ae <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 801008a:	7dfb      	ldrb	r3, [r7, #23]
 801008c:	f1c3 0305 	rsb	r3, r3, #5
 8010090:	461a      	mov	r2, r3
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	441a      	add	r2, r3
 8010096:	7dfb      	ldrb	r3, [r7, #23]
 8010098:	3302      	adds	r3, #2
 801009a:	7812      	ldrb	r2, [r2, #0]
 801009c:	f107 0118 	add.w	r1, r7, #24
 80100a0:	440b      	add	r3, r1
 80100a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 80100a6:	7dfb      	ldrb	r3, [r7, #23]
 80100a8:	3301      	adds	r3, #1
 80100aa:	75fb      	strb	r3, [r7, #23]
 80100ac:	e7ea      	b.n	8010084 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80100be:	2300      	movs	r3, #0
 80100c0:	9307      	str	r3, [sp, #28]
 80100c2:	f107 030c 	add.w	r3, r7, #12
 80100c6:	9306      	str	r3, [sp, #24]
 80100c8:	2308      	movs	r3, #8
 80100ca:	9305      	str	r3, [sp, #20]
 80100cc:	2308      	movs	r3, #8
 80100ce:	9304      	str	r3, [sp, #16]
 80100d0:	2300      	movs	r3, #0
 80100d2:	9303      	str	r3, [sp, #12]
 80100d4:	2303      	movs	r3, #3
 80100d6:	9302      	str	r3, [sp, #8]
 80100d8:	23f5      	movs	r3, #245	; 0xf5
 80100da:	9301      	str	r3, [sp, #4]
 80100dc:	2309      	movs	r3, #9
 80100de:	9300      	str	r3, [sp, #0]
 80100e0:	2321      	movs	r3, #33	; 0x21
 80100e2:	f002 f81c 	bl	801211e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 80100e6:	bf00      	nop
 80100e8:	3718      	adds	r7, #24
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}

080100ee <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 80100ee:	b580      	push	{r7, lr}
 80100f0:	b08e      	sub	sp, #56	; 0x38
 80100f2:	af08      	add	r7, sp, #32
 80100f4:	6078      	str	r0, [r7, #4]
 80100f6:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 80100f8:	2305      	movs	r3, #5
 80100fa:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 80100fc:	2310      	movs	r3, #16
 80100fe:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 8010100:	2301      	movs	r3, #1
 8010102:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 8010104:	2302      	movs	r3, #2
 8010106:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 8010108:	2312      	movs	r3, #18
 801010a:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 801010c:	2300      	movs	r3, #0
 801010e:	75fb      	strb	r3, [r7, #23]
 8010110:	7dfb      	ldrb	r3, [r7, #23]
 8010112:	2b05      	cmp	r3, #5
 8010114:	d80e      	bhi.n	8010134 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 8010116:	7dfb      	ldrb	r3, [r7, #23]
 8010118:	683a      	ldr	r2, [r7, #0]
 801011a:	441a      	add	r2, r3
 801011c:	7dfb      	ldrb	r3, [r7, #23]
 801011e:	3301      	adds	r3, #1
 8010120:	7812      	ldrb	r2, [r2, #0]
 8010122:	f107 0118 	add.w	r1, r7, #24
 8010126:	440b      	add	r3, r1
 8010128:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 801012c:	7dfb      	ldrb	r3, [r7, #23]
 801012e:	3301      	adds	r3, #1
 8010130:	75fb      	strb	r3, [r7, #23]
 8010132:	e7ed      	b.n	8010110 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8010144:	2300      	movs	r3, #0
 8010146:	9307      	str	r3, [sp, #28]
 8010148:	f107 030c 	add.w	r3, r7, #12
 801014c:	9306      	str	r3, [sp, #24]
 801014e:	230b      	movs	r3, #11
 8010150:	9305      	str	r3, [sp, #20]
 8010152:	230b      	movs	r3, #11
 8010154:	9304      	str	r3, [sp, #16]
 8010156:	2300      	movs	r3, #0
 8010158:	9303      	str	r3, [sp, #12]
 801015a:	2303      	movs	r3, #3
 801015c:	9302      	str	r3, [sp, #8]
 801015e:	2305      	movs	r3, #5
 8010160:	9301      	str	r3, [sp, #4]
 8010162:	2309      	movs	r3, #9
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	2321      	movs	r3, #33	; 0x21
 8010168:	f001 ffd9 	bl	801211e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 801016c:	bf00      	nop
 801016e:	3718      	adds	r7, #24
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}

08010174 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	4a04      	ldr	r2, [pc, #16]	; (8010190 <_ZN13USBReadParserC1Ev+0x1c>)
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	601a      	str	r2, [r3, #0]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4618      	mov	r0, r3
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr
 8010190:	08014c2c 	.word	0x08014c2c

08010194 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7ff ffe7 	bl	8010174 <_ZN13USBReadParserC1Ev>
 80101a6:	4a21      	ldr	r2, [pc, #132]	; (801022c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	601a      	str	r2, [r3, #0]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	683a      	ldr	r2, [r7, #0]
 80101b0:	605a      	str	r2, [r3, #4]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	3308      	adds	r3, #8
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fd fb65 	bl	800d886 <_ZN16MultiValueBufferC1Ev>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	3310      	adds	r3, #16
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fd fb77 	bl	800d8b4 <_ZN20MultiByteValueParserC1Ev>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	3318      	adds	r3, #24
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7fd fb9e 	bl	800d90c <_ZN11ByteSkipperC1Ev>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2200      	movs	r2, #0
 80101dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2200      	movs	r2, #0
 80101e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2200      	movs	r2, #0
 80101ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f103 0220 	add.w	r2, r3, #32
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f103 0210 	add.w	r2, r3, #16
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	3308      	adds	r3, #8
 8010206:	4619      	mov	r1, r3
 8010208:	4610      	mov	r0, r2
 801020a:	f7fd fb67 	bl	800d8dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f103 0218 	add.w	r2, r3, #24
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	3308      	adds	r3, #8
 8010218:	4619      	mov	r1, r3
 801021a:	4610      	mov	r0, r2
 801021c:	f7fd fb8a 	bl	800d934 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	4618      	mov	r0, r3
 8010224:	3708      	adds	r7, #8
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	08014bd4 	.word	0x08014bd4

08010230 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
UseOr(false) {
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4618      	mov	r0, r3
 801023e:	f7ff ff99 	bl	8010174 <_ZN13USBReadParserC1Ev>
 8010242:	4a21      	ldr	r2, [pc, #132]	; (80102c8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	601a      	str	r2, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	683a      	ldr	r2, [r7, #0]
 801024c:	605a      	str	r2, [r3, #4]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	3308      	adds	r3, #8
 8010252:	4618      	mov	r0, r3
 8010254:	f7fd fb17 	bl	800d886 <_ZN16MultiValueBufferC1Ev>
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	3310      	adds	r3, #16
 801025c:	4618      	mov	r0, r3
 801025e:	f7fd fb29 	bl	800d8b4 <_ZN20MultiByteValueParserC1Ev>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	3318      	adds	r3, #24
 8010266:	4618      	mov	r0, r3
 8010268:	f7fd fb50 	bl	800d90c <_ZN11ByteSkipperC1Ev>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2200      	movs	r2, #0
 8010270:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2200      	movs	r2, #0
 8010278:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2200      	movs	r2, #0
 8010280:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2200      	movs	r2, #0
 8010288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f103 0220 	add.w	r2, r3, #32
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f103 0210 	add.w	r2, r3, #16
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	3308      	adds	r3, #8
 80102a2:	4619      	mov	r1, r3
 80102a4:	4610      	mov	r0, r2
 80102a6:	f7fd fb19 	bl	800d8dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f103 0218 	add.w	r2, r3, #24
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	3308      	adds	r3, #8
 80102b4:	4619      	mov	r1, r3
 80102b6:	4610      	mov	r0, r2
 80102b8:	f7fd fb3c 	bl	800d934 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	4618      	mov	r0, r3
 80102c0:	3708      	adds	r7, #8
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}
 80102c6:	bf00      	nop
 80102c8:	08014bc8 	.word	0x08014bc8

080102cc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	607a      	str	r2, [r7, #4]
 80102d6:	603b      	str	r3, [r7, #0]
 80102d8:	460b      	mov	r3, r1
 80102da:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 80102dc:	897b      	ldrh	r3, [r7, #10]
 80102de:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	613b      	str	r3, [r7, #16]

        while(cntdn)
 80102e4:	8afb      	ldrh	r3, [r7, #22]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d00f      	beq.n	801030a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 80102ea:	f107 0216 	add.w	r2, r7, #22
 80102ee:	f107 0310 	add.w	r3, r7, #16
 80102f2:	4619      	mov	r1, r3
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f000 f82d 	bl	8010354 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 80102fa:	4603      	mov	r3, r0
 80102fc:	f083 0301 	eor.w	r3, r3, #1
 8010300:	b2db      	uxtb	r3, r3
 8010302:	2b00      	cmp	r3, #0
 8010304:	d100      	bne.n	8010308 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 8010306:	e7ed      	b.n	80102e4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 8010308:	bf00      	nop
}
 801030a:	3718      	adds	r7, #24
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 8010310:	b580      	push	{r7, lr}
 8010312:	b086      	sub	sp, #24
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	607a      	str	r2, [r7, #4]
 801031a:	603b      	str	r3, [r7, #0]
 801031c:	460b      	mov	r3, r1
 801031e:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 8010320:	897b      	ldrh	r3, [r7, #10]
 8010322:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	613b      	str	r3, [r7, #16]
        while(cntdn)
 8010328:	8afb      	ldrh	r3, [r7, #22]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d00f      	beq.n	801034e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 801032e:	f107 0216 	add.w	r2, r7, #22
 8010332:	f107 0310 	add.w	r3, r7, #16
 8010336:	4619      	mov	r1, r3
 8010338:	68f8      	ldr	r0, [r7, #12]
 801033a:	f000 f981 	bl	8010640 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 801033e:	4603      	mov	r3, r0
 8010340:	f083 0301 	eor.w	r3, r3, #1
 8010344:	b2db      	uxtb	r3, r3
 8010346:	2b00      	cmp	r3, #0
 8010348:	d100      	bne.n	801034c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 801034a:	e7ed      	b.n	8010328 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 801034c:	bf00      	nop
}
 801034e:	3718      	adds	r7, #24
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010356:	b089      	sub	sp, #36	; 0x24
 8010358:	af02      	add	r7, sp, #8
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	3320      	adds	r3, #32
 8010364:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	3320      	adds	r3, #32
 801036a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010372:	2b04      	cmp	r3, #4
 8010374:	f200 815e 	bhi.w	8010634 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010378:	a201      	add	r2, pc, #4	; (adr r2, 8010380 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 801037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801037e:	bf00      	nop
 8010380:	08010395 	.word	0x08010395
 8010384:	080103b5 	.word	0x080103b5
 8010388:	080103f7 	.word	0x080103f7
 801038c:	0801040b 	.word	0x0801040b
 8010390:	080104cf 	.word	0x080104cf
                case 0:
                        theBuffer.valueSize = 2;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	2202      	movs	r2, #2
 8010398:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	f103 0210 	add.w	r2, r3, #16
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	3308      	adds	r3, #8
 80103a4:	4619      	mov	r1, r3
 80103a6:	4610      	mov	r0, r2
 80103a8:	f7fd fa98 	bl	800d8dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2201      	movs	r2, #1
 80103b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	3310      	adds	r3, #16
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	68b9      	ldr	r1, [r7, #8]
 80103bc:	4618      	mov	r0, r3
 80103be:	f003 fa49 	bl	8013854 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80103c2:	4603      	mov	r3, r0
 80103c4:	f083 0301 	eor.w	r3, r3, #1
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d001      	beq.n	80103d2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 80103ce:	2300      	movs	r3, #0
 80103d0:	e131      	b.n	8010636 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80103d8:	781a      	ldrb	r2, [r3, #0]
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80103e6:	785a      	ldrb	r2, [r3, #1]
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2202      	movs	r2, #2
 80103f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	3320      	adds	r3, #32
 80103fa:	1c9a      	adds	r2, r3, #2
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2203      	movs	r2, #3
 8010406:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010410:	3b02      	subs	r3, #2
 8010412:	2b1f      	cmp	r3, #31
 8010414:	d847      	bhi.n	80104a6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8010416:	a201      	add	r2, pc, #4	; (adr r2, 801041c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8010418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801041c:	080104a7 	.word	0x080104a7
 8010420:	080104a7 	.word	0x080104a7
 8010424:	0801049d 	.word	0x0801049d
 8010428:	080104a7 	.word	0x080104a7
 801042c:	080104a7 	.word	0x080104a7
 8010430:	080104a7 	.word	0x080104a7
 8010434:	080104a7 	.word	0x080104a7
 8010438:	080104a7 	.word	0x080104a7
 801043c:	080104a7 	.word	0x080104a7
 8010440:	080104a7 	.word	0x080104a7
 8010444:	080104a7 	.word	0x080104a7
 8010448:	080104a7 	.word	0x080104a7
 801044c:	080104a7 	.word	0x080104a7
 8010450:	080104a7 	.word	0x080104a7
 8010454:	080104a7 	.word	0x080104a7
 8010458:	080104a7 	.word	0x080104a7
 801045c:	080104a7 	.word	0x080104a7
 8010460:	080104a7 	.word	0x080104a7
 8010464:	080104a7 	.word	0x080104a7
 8010468:	080104a7 	.word	0x080104a7
 801046c:	080104a7 	.word	0x080104a7
 8010470:	080104a7 	.word	0x080104a7
 8010474:	080104a7 	.word	0x080104a7
 8010478:	080104a7 	.word	0x080104a7
 801047c:	080104a7 	.word	0x080104a7
 8010480:	080104a7 	.word	0x080104a7
 8010484:	080104a7 	.word	0x080104a7
 8010488:	080104a7 	.word	0x080104a7
 801048c:	080104a7 	.word	0x080104a7
 8010490:	080104a7 	.word	0x080104a7
 8010494:	080104a7 	.word	0x080104a7
 8010498:	080104a7 	.word	0x080104a7
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2200      	movs	r2, #0
 80104a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 80104a4:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80104ac:	3b02      	subs	r3, #2
 80104ae:	b2da      	uxtb	r2, r3
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	f103 0210 	add.w	r2, r3, #16
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	3308      	adds	r3, #8
 80104be:	4619      	mov	r1, r3
 80104c0:	4610      	mov	r0, r2
 80104c2:	f7fd fa0b 	bl	800d8dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2204      	movs	r2, #4
 80104ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80104d4:	2b05      	cmp	r3, #5
 80104d6:	d055      	beq.n	8010584 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 80104d8:	2b05      	cmp	r3, #5
 80104da:	f300 8085 	bgt.w	80105e8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 80104de:	2b02      	cmp	r3, #2
 80104e0:	d002      	beq.n	80104e8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 80104e2:	2b04      	cmp	r3, #4
 80104e4:	d015      	beq.n	8010512 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80104e6:	e07f      	b.n	80105e8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	3310      	adds	r3, #16
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	68b9      	ldr	r1, [r7, #8]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f003 f9af 	bl	8013854 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80104f6:	4603      	mov	r3, r0
 80104f8:	f083 0301 	eor.w	r3, r3, #1
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d001      	beq.n	8010506 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 8010502:	2300      	movs	r3, #0
 8010504:	e097      	b.n	8010636 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	795a      	ldrb	r2, [r3, #5]
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 8010510:	e086      	b.n	8010620 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	3310      	adds	r3, #16
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	68b9      	ldr	r1, [r7, #8]
 801051a:	4618      	mov	r0, r3
 801051c:	f003 f99a 	bl	8013854 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010520:	4603      	mov	r3, r0
 8010522:	f083 0301 	eor.w	r3, r3, #1
 8010526:	b2db      	uxtb	r3, r3
 8010528:	2b00      	cmp	r3, #0
 801052a:	d001      	beq.n	8010530 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 801052c:	2300      	movs	r3, #0
 801052e:	e082      	b.n	8010636 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	795b      	ldrb	r3, [r3, #5]
 8010534:	2be0      	cmp	r3, #224	; 0xe0
 8010536:	d16c      	bne.n	8010612 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	799b      	ldrb	r3, [r3, #6]
 801053c:	2b01      	cmp	r3, #1
 801053e:	d16a      	bne.n	8010616 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010546:	2b00      	cmp	r3, #0
 8010548:	d004      	beq.n	8010554 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	79db      	ldrb	r3, [r3, #7]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d104      	bne.n	801055c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 8010552:	e065      	b.n	8010620 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	79db      	ldrb	r3, [r3, #7]
 8010558:	2b01      	cmp	r3, #1
 801055a:	d15e      	bne.n	801061a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2201      	movs	r2, #1
 8010560:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	789a      	ldrb	r2, [r3, #2]
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	78da      	ldrb	r2, [r3, #3]
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	79da      	ldrb	r2, [r3, #7]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 8010582:	e04d      	b.n	8010620 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	3310      	adds	r3, #16
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	68b9      	ldr	r1, [r7, #8]
 801058c:	4618      	mov	r0, r3
 801058e:	f003 f961 	bl	8013854 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010592:	4603      	mov	r3, r0
 8010594:	f083 0301 	eor.w	r3, r3, #1
 8010598:	b2db      	uxtb	r3, r3
 801059a:	2b00      	cmp	r3, #0
 801059c:	d001      	beq.n	80105a2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801059e:	2300      	movs	r3, #0
 80105a0:	e049      	b.n	8010636 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d038      	beq.n	801061e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d034      	beq.n	801061e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	6858      	ldr	r0, [r3, #4]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	681c      	ldr	r4, [r3, #0]
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80105d8:	68fa      	ldr	r2, [r7, #12]
 80105da:	3220      	adds	r2, #32
 80105dc:	9201      	str	r2, [sp, #4]
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	4633      	mov	r3, r6
 80105e2:	462a      	mov	r2, r5
 80105e4:	47a0      	blx	r4
                                        break;
 80105e6:	e01a      	b.n	801061e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f103 0018 	add.w	r0, r3, #24
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	3b02      	subs	r3, #2
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	68b9      	ldr	r1, [r7, #8]
 80105fe:	f7fd f9ac 	bl	800d95a <_ZN11ByteSkipper4SkipEPPhPtt>
 8010602:	4603      	mov	r3, r0
 8010604:	f083 0301 	eor.w	r3, r3, #1
 8010608:	b2db      	uxtb	r3, r3
 801060a:	2b00      	cmp	r3, #0
 801060c:	d008      	beq.n	8010620 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 801060e:	2300      	movs	r3, #0
 8010610:	e011      	b.n	8010636 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 8010612:	bf00      	nop
 8010614:	e004      	b.n	8010620 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8010616:	bf00      	nop
 8010618:	e002      	b.n	8010620 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 801061a:	bf00      	nop
 801061c:	e000      	b.n	8010620 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 801061e:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f103 0220 	add.w	r2, r3, #32
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	2200      	movs	r2, #0
 8010630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 8010634:	2301      	movs	r3, #1
}
 8010636:	4618      	mov	r0, r3
 8010638:	371c      	adds	r7, #28
 801063a:	46bd      	mov	sp, r7
 801063c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801063e:	bf00      	nop

08010640 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010642:	b089      	sub	sp, #36	; 0x24
 8010644:	af02      	add	r7, sp, #8
 8010646:	60f8      	str	r0, [r7, #12]
 8010648:	60b9      	str	r1, [r7, #8]
 801064a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	3320      	adds	r3, #32
 8010650:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	3320      	adds	r3, #32
 8010656:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801065e:	2b04      	cmp	r3, #4
 8010660:	f200 815e 	bhi.w	8010920 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010664:	a201      	add	r2, pc, #4	; (adr r2, 801066c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8010666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801066a:	bf00      	nop
 801066c:	08010681 	.word	0x08010681
 8010670:	080106a1 	.word	0x080106a1
 8010674:	080106e3 	.word	0x080106e3
 8010678:	080106f7 	.word	0x080106f7
 801067c:	080107bb 	.word	0x080107bb
                        theBuffer.valueSize = 2;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2202      	movs	r2, #2
 8010684:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f103 0210 	add.w	r2, r3, #16
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	3308      	adds	r3, #8
 8010690:	4619      	mov	r1, r3
 8010692:	4610      	mov	r0, r2
 8010694:	f7fd f922 	bl	800d8dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	2201      	movs	r2, #1
 801069c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	3310      	adds	r3, #16
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	68b9      	ldr	r1, [r7, #8]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f003 f8d3 	bl	8013854 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80106ae:	4603      	mov	r3, r0
 80106b0:	f083 0301 	eor.w	r3, r3, #1
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d001      	beq.n	80106be <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 80106ba:	2300      	movs	r3, #0
 80106bc:	e131      	b.n	8010922 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80106c4:	781a      	ldrb	r2, [r3, #0]
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80106d2:	785a      	ldrb	r2, [r3, #1]
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2202      	movs	r2, #2
 80106de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	3320      	adds	r3, #32
 80106e6:	1c9a      	adds	r2, r3, #2
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	2203      	movs	r2, #3
 80106f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80106fc:	3b02      	subs	r3, #2
 80106fe:	2b1f      	cmp	r3, #31
 8010700:	d847      	bhi.n	8010792 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8010702:	a201      	add	r2, pc, #4	; (adr r2, 8010708 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8010704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010708:	08010793 	.word	0x08010793
 801070c:	08010793 	.word	0x08010793
 8010710:	08010789 	.word	0x08010789
 8010714:	08010793 	.word	0x08010793
 8010718:	08010793 	.word	0x08010793
 801071c:	08010793 	.word	0x08010793
 8010720:	08010793 	.word	0x08010793
 8010724:	08010793 	.word	0x08010793
 8010728:	08010793 	.word	0x08010793
 801072c:	08010793 	.word	0x08010793
 8010730:	08010793 	.word	0x08010793
 8010734:	08010793 	.word	0x08010793
 8010738:	08010793 	.word	0x08010793
 801073c:	08010793 	.word	0x08010793
 8010740:	08010793 	.word	0x08010793
 8010744:	08010793 	.word	0x08010793
 8010748:	08010793 	.word	0x08010793
 801074c:	08010793 	.word	0x08010793
 8010750:	08010793 	.word	0x08010793
 8010754:	08010793 	.word	0x08010793
 8010758:	08010793 	.word	0x08010793
 801075c:	08010793 	.word	0x08010793
 8010760:	08010793 	.word	0x08010793
 8010764:	08010793 	.word	0x08010793
 8010768:	08010793 	.word	0x08010793
 801076c:	08010793 	.word	0x08010793
 8010770:	08010793 	.word	0x08010793
 8010774:	08010793 	.word	0x08010793
 8010778:	08010793 	.word	0x08010793
 801077c:	08010793 	.word	0x08010793
 8010780:	08010793 	.word	0x08010793
 8010784:	08010793 	.word	0x08010793
                                        isGoodInterface = false;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2200      	movs	r2, #0
 801078c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8010790:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010798:	3b02      	subs	r3, #2
 801079a:	b2da      	uxtb	r2, r3
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	f103 0210 	add.w	r2, r3, #16
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	3308      	adds	r3, #8
 80107aa:	4619      	mov	r1, r3
 80107ac:	4610      	mov	r0, r2
 80107ae:	f7fd f895 	bl	800d8dc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2204      	movs	r2, #4
 80107b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80107c0:	2b05      	cmp	r3, #5
 80107c2:	d055      	beq.n	8010870 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 80107c4:	2b05      	cmp	r3, #5
 80107c6:	f300 8085 	bgt.w	80108d4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 80107ca:	2b02      	cmp	r3, #2
 80107cc:	d002      	beq.n	80107d4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 80107ce:	2b04      	cmp	r3, #4
 80107d0:	d015      	beq.n	80107fe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80107d2:	e07f      	b.n	80108d4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	3310      	adds	r3, #16
 80107d8:	687a      	ldr	r2, [r7, #4]
 80107da:	68b9      	ldr	r1, [r7, #8]
 80107dc:	4618      	mov	r0, r3
 80107de:	f003 f839 	bl	8013854 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80107e2:	4603      	mov	r3, r0
 80107e4:	f083 0301 	eor.w	r3, r3, #1
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d001      	beq.n	80107f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 80107ee:	2300      	movs	r3, #0
 80107f0:	e097      	b.n	8010922 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	795a      	ldrb	r2, [r3, #5]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 80107fc:	e086      	b.n	801090c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	3310      	adds	r3, #16
 8010802:	687a      	ldr	r2, [r7, #4]
 8010804:	68b9      	ldr	r1, [r7, #8]
 8010806:	4618      	mov	r0, r3
 8010808:	f003 f824 	bl	8013854 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801080c:	4603      	mov	r3, r0
 801080e:	f083 0301 	eor.w	r3, r3, #1
 8010812:	b2db      	uxtb	r3, r3
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 8010818:	2300      	movs	r3, #0
 801081a:	e082      	b.n	8010922 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	795b      	ldrb	r3, [r3, #5]
 8010820:	2bff      	cmp	r3, #255	; 0xff
 8010822:	d16c      	bne.n	80108fe <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	799b      	ldrb	r3, [r3, #6]
 8010828:	2b01      	cmp	r3, #1
 801082a:	d16a      	bne.n	8010902 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010832:	2b00      	cmp	r3, #0
 8010834:	d004      	beq.n	8010840 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	79db      	ldrb	r3, [r3, #7]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d104      	bne.n	8010848 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 801083e:	e065      	b.n	801090c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	79db      	ldrb	r3, [r3, #7]
 8010844:	2b01      	cmp	r3, #1
 8010846:	d15e      	bne.n	8010906 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2201      	movs	r2, #1
 801084c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	789a      	ldrb	r2, [r3, #2]
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	78da      	ldrb	r2, [r3, #3]
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	79da      	ldrb	r2, [r3, #7]
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 801086e:	e04d      	b.n	801090c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	3310      	adds	r3, #16
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	68b9      	ldr	r1, [r7, #8]
 8010878:	4618      	mov	r0, r3
 801087a:	f002 ffeb 	bl	8013854 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801087e:	4603      	mov	r3, r0
 8010880:	f083 0301 	eor.w	r3, r3, #1
 8010884:	b2db      	uxtb	r3, r3
 8010886:	2b00      	cmp	r3, #0
 8010888:	d001      	beq.n	801088e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801088a:	2300      	movs	r3, #0
 801088c:	e049      	b.n	8010922 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010894:	2b00      	cmp	r3, #0
 8010896:	d038      	beq.n	801090a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d034      	beq.n	801090a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	6858      	ldr	r0, [r3, #4]
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	681c      	ldr	r4, [r3, #0]
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80108c4:	68fa      	ldr	r2, [r7, #12]
 80108c6:	3220      	adds	r2, #32
 80108c8:	9201      	str	r2, [sp, #4]
 80108ca:	9300      	str	r3, [sp, #0]
 80108cc:	4633      	mov	r3, r6
 80108ce:	462a      	mov	r2, r5
 80108d0:	47a0      	blx	r4
                                        break;
 80108d2:	e01a      	b.n	801090a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f103 0018 	add.w	r0, r3, #24
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80108e0:	b29b      	uxth	r3, r3
 80108e2:	3b02      	subs	r3, #2
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	68b9      	ldr	r1, [r7, #8]
 80108ea:	f7fd f836 	bl	800d95a <_ZN11ByteSkipper4SkipEPPhPtt>
 80108ee:	4603      	mov	r3, r0
 80108f0:	f083 0301 	eor.w	r3, r3, #1
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d008      	beq.n	801090c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 80108fa:	2300      	movs	r3, #0
 80108fc:	e011      	b.n	8010922 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 80108fe:	bf00      	nop
 8010900:	e004      	b.n	801090c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8010902:	bf00      	nop
 8010904:	e002      	b.n	801090c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 8010906:	bf00      	nop
 8010908:	e000      	b.n	801090c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 801090a:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f103 0220 	add.w	r2, r3, #32
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2200      	movs	r2, #0
 801091c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 8010920:	2301      	movs	r3, #1
}
 8010922:	4618      	mov	r0, r3
 8010924:	371c      	adds	r7, #28
 8010926:	46bd      	mov	sp, r7
 8010928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801092a:	bf00      	nop

0801092c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 801092c:	b480      	push	{r7}
 801092e:	b085      	sub	sp, #20
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010936:	2300      	movs	r3, #0
 8010938:	73fb      	strb	r3, [r7, #15]
 801093a:	7bfb      	ldrb	r3, [r7, #15]
 801093c:	2b03      	cmp	r3, #3
 801093e:	d815      	bhi.n	801096c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 8010940:	7bfb      	ldrb	r3, [r7, #15]
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	3318      	adds	r3, #24
 8010946:	009b      	lsls	r3, r3, #2
 8010948:	4413      	add	r3, r2
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d109      	bne.n	8010964 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 8010950:	7bfb      	ldrb	r3, [r7, #15]
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	3318      	adds	r3, #24
 8010956:	009b      	lsls	r3, r3, #2
 8010958:	4413      	add	r3, r2
 801095a:	683a      	ldr	r2, [r7, #0]
 801095c:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 801095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010962:	e005      	b.n	8010970 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010964:	7bfb      	ldrb	r3, [r7, #15]
 8010966:	3301      	adds	r3, #1
 8010968:	73fb      	strb	r3, [r7, #15]
 801096a:	e7e6      	b.n	801093a <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 801096c:	f04f 33ff 	mov.w	r3, #4294967295
        };
 8010970:	4618      	mov	r0, r3
 8010972:	3714      	adds	r7, #20
 8010974:	46bd      	mov	sp, r7
 8010976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097a:	4770      	bx	lr

0801097c <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 801097c:	b580      	push	{r7, lr}
 801097e:	b082      	sub	sp, #8
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6039      	str	r1, [r7, #0]
 8010986:	4a0a      	ldr	r2, [pc, #40]	; (80109b0 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	601a      	str	r2, [r3, #0]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	683a      	ldr	r2, [r7, #0]
 8010990:	609a      	str	r2, [r3, #8]
                if(pBtd)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	689b      	ldr	r3, [r3, #8]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d005      	beq.n	80109a6 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	689b      	ldr	r3, [r3, #8]
 801099e:	6879      	ldr	r1, [r7, #4]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7ff ffc3 	bl	801092c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4618      	mov	r0, r3
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	08014c90 	.word	0x08014c90

080109b4 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 80109b4:	b480      	push	{r7}
 80109b6:	b085      	sub	sp, #20
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	4613      	mov	r3, r2
 80109c0:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	461a      	mov	r2, r3
 80109c8:	88fb      	ldrh	r3, [r7, #6]
 80109ca:	b2db      	uxtb	r3, r3
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d10b      	bne.n	80109e8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	3301      	adds	r3, #1
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	461a      	mov	r2, r3
 80109d8:	88fb      	ldrh	r3, [r7, #6]
 80109da:	121b      	asrs	r3, r3, #8
 80109dc:	f043 0320 	orr.w	r3, r3, #32
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d101      	bne.n	80109e8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80109e4:	2301      	movs	r3, #1
 80109e6:	e000      	b.n	80109ea <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 80109e8:	2300      	movs	r3, #0
        }
 80109ea:	4618      	mov	r0, r3
 80109ec:	3714      	adds	r7, #20
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr

080109f6 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80109f6:	b480      	push	{r7}
 80109f8:	b085      	sub	sp, #20
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	60f8      	str	r0, [r7, #12]
 80109fe:	460b      	mov	r3, r1
 8010a00:	607a      	str	r2, [r7, #4]
 8010a02:	72fb      	strb	r3, [r7, #11]
                return;
 8010a04:	bf00      	nop
        };
 8010a06:	3714      	adds	r7, #20
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr

08010a10 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
                return;
 8010a18:	bf00      	nop
        };
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
                return;
 8010a2c:	bf00      	nop
        }
 8010a2e:	370c      	adds	r7, #12
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr

08010a38 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b086      	sub	sp, #24
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	60f8      	str	r0, [r7, #12]
 8010a40:	60b9      	str	r1, [r7, #8]
 8010a42:	603b      	str	r3, [r7, #0]
 8010a44:	4613      	mov	r3, r2
 8010a46:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	68b9      	ldr	r1, [r7, #8]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7ff ff95 	bl	801097c <_ZN16BluetoothServiceC1EP3BTD>
 8010a52:	4a1f      	ldr	r2, [pc, #124]	; (8010ad0 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	601a      	str	r2, [r3, #0]
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8010a60:	2300      	movs	r3, #0
 8010a62:	75fb      	strb	r3, [r7, #23]
 8010a64:	7dfb      	ldrb	r3, [r7, #23]
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d809      	bhi.n	8010a7e <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 8010a6a:	7dfa      	ldrb	r2, [r7, #23]
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	3208      	adds	r2, #8
 8010a70:	2100      	movs	r1, #0
 8010a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8010a76:	7dfb      	ldrb	r3, [r7, #23]
 8010a78:	3301      	adds	r3, #1
 8010a7a:	75fb      	strb	r3, [r7, #23]
 8010a7c:	e7f2      	b.n	8010a64 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	689b      	ldr	r3, [r3, #8]
 8010a82:	79fa      	ldrb	r2, [r7, #7]
 8010a84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2250      	movs	r2, #80	; 0x50
 8010a94:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2270      	movs	r2, #112	; 0x70
 8010aa4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2271      	movs	r2, #113	; 0x71
 8010ab4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2200      	movs	r2, #0
 8010abc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f000 f807 	bl	8010ad4 <_ZN5BTHID5ResetEv>
}
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3718      	adds	r7, #24
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	08014c64 	.word	0x08014c64

08010ad4 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
        connected = false;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2200      	movs	r2, #0
 8010aee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2200      	movs	r2, #0
 8010af6:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	220a      	movs	r2, #10
 8010afc:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2200      	movs	r2, #0
 8010b02:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	3320      	adds	r3, #32
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	4798      	blx	r3
}
 8010b12:	bf00      	nop
 8010b14:	3708      	adds	r7, #8
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 8010b1a:	b590      	push	{r4, r7, lr}
 8010b1c:	b085      	sub	sp, #20
 8010b1e:	af02      	add	r7, sp, #8
 8010b20:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d014      	beq.n	8010b56 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6898      	ldr	r0, [r3, #8]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	8999      	ldrh	r1, [r3, #12]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	7d1b      	ldrb	r3, [r3, #20]
 8010b38:	3301      	adds	r3, #1
 8010b3a:	b2da      	uxtb	r2, r3
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	751a      	strb	r2, [r3, #20]
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	7d1a      	ldrb	r2, [r3, #20]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f103 041b 	add.w	r4, r3, #27
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	336f      	adds	r3, #111	; 0x6f
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	4623      	mov	r3, r4
 8010b52:	f7ff f9c5 	bl	800fee0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6898      	ldr	r0, [r3, #8]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	8999      	ldrh	r1, [r3, #12]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	7d1b      	ldrb	r3, [r3, #20]
 8010b62:	3301      	adds	r3, #1
 8010b64:	b2da      	uxtb	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	751a      	strb	r2, [r3, #20]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	7d1a      	ldrb	r2, [r3, #20]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f103 0418 	add.w	r4, r3, #24
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	336d      	adds	r3, #109	; 0x6d
 8010b78:	9300      	str	r3, [sp, #0]
 8010b7a:	4623      	mov	r3, r4
 8010b7c:	f7ff f9b0 	bl	800fee0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	3308      	adds	r3, #8
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	220e      	movs	r2, #14
 8010b90:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2209      	movs	r2, #9
 8010b96:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 8010b9a:	bf00      	nop
 8010b9c:	370c      	adds	r7, #12
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd90      	pop	{r4, r7, pc}

08010ba2 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 8010ba2:	b590      	push	{r4, r7, lr}
 8010ba4:	b087      	sub	sp, #28
 8010ba6:	af02      	add	r7, sp, #8
 8010ba8:	6078      	str	r0, [r7, #4]
 8010baa:	6039      	str	r1, [r7, #0]
        if(!connected) {
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	7d5b      	ldrb	r3, [r3, #21]
 8010bb0:	f083 0301 	eor.w	r3, r3, #1
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d023      	beq.n	8010c02 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	3308      	adds	r3, #8
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	2b02      	cmp	r3, #2
 8010bc2:	d11e      	bne.n	8010c02 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	330c      	adds	r3, #12
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	461a      	mov	r2, r3
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	330d      	adds	r3, #13
 8010bd0:	781b      	ldrb	r3, [r3, #0]
 8010bd2:	021b      	lsls	r3, r3, #8
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d113      	bne.n	8010c02 <_ZN5BTHID7ACLDataEPh+0x60>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	689b      	ldr	r3, [r3, #8]
 8010bde:	7a9b      	ldrb	r3, [r3, #10]
 8010be0:	f083 0301 	eor.w	r3, r3, #1
 8010be4:	b2db      	uxtb	r3, r3
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d00b      	beq.n	8010c02 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	689b      	ldr	r3, [r3, #8]
 8010bee:	2201      	movs	r2, #1
 8010bf0:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	689b      	ldr	r3, [r3, #8]
 8010bf6:	8b5a      	ldrh	r2, [r3, #26]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	220a      	movs	r2, #10
 8010c00:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	689b      	ldr	r3, [r3, #8]
 8010c06:	7a5b      	ldrb	r3, [r3, #9]
 8010c08:	f083 0301 	eor.w	r3, r3, #1
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d03a      	beq.n	8010c88 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	689b      	ldr	r3, [r3, #8]
 8010c16:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d034      	beq.n	8010c88 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	7d5b      	ldrb	r3, [r3, #21]
 8010c22:	f083 0301 	eor.w	r3, r3, #1
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d02d      	beq.n	8010c88 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8010c32:	f083 0301 	eor.w	r3, r3, #1
 8010c36:	b2db      	uxtb	r3, r3
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d025      	beq.n	8010c88 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	3308      	adds	r3, #8
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	2b02      	cmp	r3, #2
 8010c44:	d120      	bne.n	8010c88 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	330c      	adds	r3, #12
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	330d      	adds	r3, #13
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	021b      	lsls	r3, r3, #8
 8010c56:	4313      	orrs	r3, r2
 8010c58:	2b11      	cmp	r3, #17
 8010c5a:	d115      	bne.n	8010c88 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	689b      	ldr	r3, [r3, #8]
 8010c60:	2200      	movs	r2, #0
 8010c62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	689b      	ldr	r3, [r3, #8]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2201      	movs	r2, #1
 8010c72:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	689b      	ldr	r3, [r3, #8]
 8010c7a:	8b5a      	ldrh	r2, [r3, #26]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2200      	movs	r2, #0
 8010c84:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	899b      	ldrh	r3, [r3, #12]
 8010c8e:	461a      	mov	r2, r3
 8010c90:	6839      	ldr	r1, [r7, #0]
 8010c92:	f7ff fe8f 	bl	80109b4 <_ZN16BluetoothService14checkHciHandleEPht>
 8010c96:	4603      	mov	r3, r0
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	f000 83d9 	beq.w	8011450 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	3306      	adds	r3, #6
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	461a      	mov	r2, r3
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	3307      	adds	r3, #7
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	021b      	lsls	r3, r3, #8
 8010cae:	4313      	orrs	r3, r2
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	f040 829b 	bne.w	80111ec <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	3308      	adds	r3, #8
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	f000 83c1 	beq.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	3308      	adds	r3, #8
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	2b03      	cmp	r3, #3
 8010cca:	f040 808d 	bne.w	8010de8 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	3310      	adds	r3, #16
 8010cd2:	781b      	ldrb	r3, [r3, #0]
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	3311      	adds	r3, #17
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	021b      	lsls	r3, r3, #8
 8010cde:	4313      	orrs	r3, r2
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	f040 83af 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	3312      	adds	r3, #18
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	461a      	mov	r2, r3
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	3313      	adds	r3, #19
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	021b      	lsls	r3, r3, #8
 8010cf6:	4313      	orrs	r3, r2
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	f040 83a3 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	330e      	adds	r3, #14
 8010d02:	781a      	ldrb	r2, [r3, #0]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d124      	bne.n	8010d58 <_ZN5BTHID7ACLDataEPh+0x1b6>
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	330f      	adds	r3, #15
 8010d12:	781a      	ldrb	r2, [r3, #0]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d11c      	bne.n	8010d58 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	7a5a      	ldrb	r2, [r3, #9]
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	7b1a      	ldrb	r2, [r3, #12]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	7b5a      	ldrb	r2, [r3, #13]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	7d1b      	ldrb	r3, [r3, #20]
 8010d3a:	3301      	adds	r3, #1
 8010d3c:	b2da      	uxtb	r2, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6898      	ldr	r0, [r3, #8]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	8999      	ldrh	r1, [r3, #12]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	7d1a      	ldrb	r2, [r3, #20]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	331b      	adds	r3, #27
 8010d52:	f7ff f827 	bl	800fda4 <_ZN3BTD20l2cap_config_requestEthPh>
 8010d56:	e375      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	330e      	adds	r3, #14
 8010d5c:	781a      	ldrb	r2, [r3, #0]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d11a      	bne.n	8010d9e <_ZN5BTHID7ACLDataEPh+0x1fc>
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	330f      	adds	r3, #15
 8010d6c:	781a      	ldrb	r2, [r3, #0]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d112      	bne.n	8010d9e <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	7a5a      	ldrb	r2, [r3, #9]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	7b1a      	ldrb	r2, [r3, #12]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	7b5a      	ldrb	r2, [r3, #13]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	691b      	ldr	r3, [r3, #16]
 8010d94:	f043 0204 	orr.w	r2, r3, #4
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	611a      	str	r2, [r3, #16]
 8010d9c:	e352      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	330e      	adds	r3, #14
 8010da2:	781a      	ldrb	r2, [r3, #0]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010daa:	429a      	cmp	r2, r3
 8010dac:	f040 834a 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	330f      	adds	r3, #15
 8010db4:	781a      	ldrb	r2, [r3, #0]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	f040 8341 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	7a5a      	ldrb	r2, [r3, #9]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	7b1a      	ldrb	r2, [r3, #12]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	7b5a      	ldrb	r2, [r3, #13]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	691b      	ldr	r3, [r3, #16]
 8010dde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	611a      	str	r2, [r3, #16]
 8010de6:	e32d      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	3308      	adds	r3, #8
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	2b02      	cmp	r3, #2
 8010df0:	d15a      	bne.n	8010ea8 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	330c      	adds	r3, #12
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	461a      	mov	r2, r3
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	330d      	adds	r3, #13
 8010dfe:	781b      	ldrb	r3, [r3, #0]
 8010e00:	021b      	lsls	r3, r3, #8
 8010e02:	4313      	orrs	r3, r2
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	d112      	bne.n	8010e2e <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	7a5a      	ldrb	r2, [r3, #9]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	7b9a      	ldrb	r2, [r3, #14]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	7bda      	ldrb	r2, [r3, #15]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	691b      	ldr	r3, [r3, #16]
 8010e24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	611a      	str	r2, [r3, #16]
 8010e2c:	e30a      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	330c      	adds	r3, #12
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	461a      	mov	r2, r3
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	330d      	adds	r3, #13
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	021b      	lsls	r3, r3, #8
 8010e3e:	4313      	orrs	r3, r2
 8010e40:	2b11      	cmp	r3, #17
 8010e42:	d112      	bne.n	8010e6a <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	7a5a      	ldrb	r2, [r3, #9]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	7b9a      	ldrb	r2, [r3, #14]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	7bda      	ldrb	r2, [r3, #15]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	691b      	ldr	r3, [r3, #16]
 8010e60:	f043 0201 	orr.w	r2, r3, #1
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	611a      	str	r2, [r3, #16]
 8010e68:	e2ec      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	330c      	adds	r3, #12
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	461a      	mov	r2, r3
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	330d      	adds	r3, #13
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	021b      	lsls	r3, r3, #8
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	2b13      	cmp	r3, #19
 8010e7e:	f040 82e1 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	7a5a      	ldrb	r2, [r3, #9]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	7b9a      	ldrb	r2, [r3, #14]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	7bda      	ldrb	r2, [r3, #15]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	691b      	ldr	r3, [r3, #16]
 8010e9e:	f043 0210 	orr.w	r2, r3, #16
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	611a      	str	r2, [r3, #16]
 8010ea6:	e2cd      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	3308      	adds	r3, #8
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	2b05      	cmp	r3, #5
 8010eb0:	d15e      	bne.n	8010f70 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	3310      	adds	r3, #16
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	461a      	mov	r2, r3
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	3311      	adds	r3, #17
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	021b      	lsls	r3, r3, #8
 8010ec2:	4313      	orrs	r3, r2
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f040 82bd 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	330c      	adds	r3, #12
 8010ece:	781a      	ldrb	r2, [r3, #0]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d112      	bne.n	8010f00 <_ZN5BTHID7ACLDataEPh+0x35e>
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	330d      	adds	r3, #13
 8010ede:	781a      	ldrb	r2, [r3, #0]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d10a      	bne.n	8010f00 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	7a5a      	ldrb	r2, [r3, #9]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	691b      	ldr	r3, [r3, #16]
 8010ef6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	611a      	str	r2, [r3, #16]
 8010efe:	e2a1      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	330c      	adds	r3, #12
 8010f04:	781a      	ldrb	r2, [r3, #0]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d112      	bne.n	8010f36 <_ZN5BTHID7ACLDataEPh+0x394>
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	330d      	adds	r3, #13
 8010f14:	781a      	ldrb	r2, [r3, #0]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d10a      	bne.n	8010f36 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	7a5a      	ldrb	r2, [r3, #9]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	691b      	ldr	r3, [r3, #16]
 8010f2c:	f043 0202 	orr.w	r2, r3, #2
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	611a      	str	r2, [r3, #16]
 8010f34:	e286      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	330c      	adds	r3, #12
 8010f3a:	781a      	ldrb	r2, [r3, #0]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010f42:	429a      	cmp	r2, r3
 8010f44:	f040 827e 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	330d      	adds	r3, #13
 8010f4c:	781a      	ldrb	r2, [r3, #0]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010f54:	429a      	cmp	r2, r3
 8010f56:	f040 8275 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	7a5a      	ldrb	r2, [r3, #9]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	f043 0220 	orr.w	r2, r3, #32
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	611a      	str	r2, [r3, #16]
 8010f6e:	e269      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	3308      	adds	r3, #8
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	2b04      	cmp	r3, #4
 8010f78:	d155      	bne.n	8011026 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	330c      	adds	r3, #12
 8010f7e:	781a      	ldrb	r2, [r3, #0]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d113      	bne.n	8010fb2 <_ZN5BTHID7ACLDataEPh+0x410>
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	330d      	adds	r3, #13
 8010f8e:	781a      	ldrb	r2, [r3, #0]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d10b      	bne.n	8010fb2 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6898      	ldr	r0, [r3, #8]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	8999      	ldrh	r1, [r3, #12]
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	3309      	adds	r3, #9
 8010fa6:	781a      	ldrb	r2, [r3, #0]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	331b      	adds	r3, #27
 8010fac:	f7fe ff45 	bl	800fe3a <_ZN3BTD21l2cap_config_responseEthPh>
 8010fb0:	e248      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	330c      	adds	r3, #12
 8010fb6:	781a      	ldrb	r2, [r3, #0]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d113      	bne.n	8010fea <_ZN5BTHID7ACLDataEPh+0x448>
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	330d      	adds	r3, #13
 8010fc6:	781a      	ldrb	r2, [r3, #0]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d10b      	bne.n	8010fea <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6898      	ldr	r0, [r3, #8]
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	8999      	ldrh	r1, [r3, #12]
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	3309      	adds	r3, #9
 8010fde:	781a      	ldrb	r2, [r3, #0]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	3316      	adds	r3, #22
 8010fe4:	f7fe ff29 	bl	800fe3a <_ZN3BTD21l2cap_config_responseEthPh>
 8010fe8:	e22c      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	330c      	adds	r3, #12
 8010fee:	781a      	ldrb	r2, [r3, #0]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	f040 8224 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	330d      	adds	r3, #13
 8011000:	781a      	ldrb	r2, [r3, #0]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8011008:	429a      	cmp	r2, r3
 801100a:	f040 821b 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	6898      	ldr	r0, [r3, #8]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	8999      	ldrh	r1, [r3, #12]
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	3309      	adds	r3, #9
 801101a:	781a      	ldrb	r2, [r3, #0]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	3318      	adds	r3, #24
 8011020:	f7fe ff0b 	bl	800fe3a <_ZN3BTD21l2cap_config_responseEthPh>
 8011024:	e20e      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	3308      	adds	r3, #8
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	2b06      	cmp	r3, #6
 801102e:	d170      	bne.n	8011112 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	330c      	adds	r3, #12
 8011034:	781a      	ldrb	r2, [r3, #0]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801103c:	429a      	cmp	r2, r3
 801103e:	d112      	bne.n	8011066 <_ZN5BTHID7ACLDataEPh+0x4c4>
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	330d      	adds	r3, #13
 8011044:	781a      	ldrb	r2, [r3, #0]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801104c:	429a      	cmp	r2, r3
 801104e:	d10a      	bne.n	8011066 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	7a5a      	ldrb	r2, [r3, #9]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	691b      	ldr	r3, [r3, #16]
 801105c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	611a      	str	r2, [r3, #16]
 8011064:	e1ee      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	330c      	adds	r3, #12
 801106a:	781a      	ldrb	r2, [r3, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8011072:	429a      	cmp	r2, r3
 8011074:	d121      	bne.n	80110ba <_ZN5BTHID7ACLDataEPh+0x518>
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	330d      	adds	r3, #13
 801107a:	781a      	ldrb	r2, [r3, #0]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011082:	429a      	cmp	r2, r3
 8011084:	d119      	bne.n	80110ba <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	7a5a      	ldrb	r2, [r3, #9]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6898      	ldr	r0, [r3, #8]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	8999      	ldrh	r1, [r3, #12]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	7d1a      	ldrb	r2, [r3, #20]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	3316      	adds	r3, #22
 80110a4:	9300      	str	r3, [sp, #0]
 80110a6:	4623      	mov	r3, r4
 80110a8:	f7fe ff57 	bl	800ff5a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	3308      	adds	r3, #8
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	4798      	blx	r3
 80110b8:	e1c4      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	330c      	adds	r3, #12
 80110be:	781a      	ldrb	r2, [r3, #0]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80110c6:	429a      	cmp	r2, r3
 80110c8:	f040 81bc 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	330d      	adds	r3, #13
 80110d0:	781a      	ldrb	r2, [r3, #0]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80110d8:	429a      	cmp	r2, r3
 80110da:	f040 81b3 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	7a5a      	ldrb	r2, [r3, #9]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6898      	ldr	r0, [r3, #8]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	8999      	ldrh	r1, [r3, #12]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	7d1a      	ldrb	r2, [r3, #20]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	3318      	adds	r3, #24
 80110fc:	9300      	str	r3, [sp, #0]
 80110fe:	4623      	mov	r3, r4
 8011100:	f7fe ff2b 	bl	800ff5a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	3308      	adds	r3, #8
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	4798      	blx	r3
 8011110:	e198      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	3308      	adds	r3, #8
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	2b07      	cmp	r3, #7
 801111a:	d14c      	bne.n	80111b6 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	330c      	adds	r3, #12
 8011120:	781a      	ldrb	r2, [r3, #0]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	7edb      	ldrb	r3, [r3, #27]
 8011126:	429a      	cmp	r2, r3
 8011128:	d111      	bne.n	801114e <_ZN5BTHID7ACLDataEPh+0x5ac>
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	330d      	adds	r3, #13
 801112e:	781a      	ldrb	r2, [r3, #0]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	7f1b      	ldrb	r3, [r3, #28]
 8011134:	429a      	cmp	r2, r3
 8011136:	d10a      	bne.n	801114e <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	7a5a      	ldrb	r2, [r3, #9]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	691b      	ldr	r3, [r3, #16]
 8011144:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	611a      	str	r2, [r3, #16]
 801114c:	e17a      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	330c      	adds	r3, #12
 8011152:	781a      	ldrb	r2, [r3, #0]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	7d9b      	ldrb	r3, [r3, #22]
 8011158:	429a      	cmp	r2, r3
 801115a:	d111      	bne.n	8011180 <_ZN5BTHID7ACLDataEPh+0x5de>
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	330d      	adds	r3, #13
 8011160:	781a      	ldrb	r2, [r3, #0]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	7ddb      	ldrb	r3, [r3, #23]
 8011166:	429a      	cmp	r2, r3
 8011168:	d10a      	bne.n	8011180 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	7a5a      	ldrb	r2, [r3, #9]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	691b      	ldr	r3, [r3, #16]
 8011176:	f043 0208 	orr.w	r2, r3, #8
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	611a      	str	r2, [r3, #16]
 801117e:	e161      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	330c      	adds	r3, #12
 8011184:	781a      	ldrb	r2, [r3, #0]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	7e1b      	ldrb	r3, [r3, #24]
 801118a:	429a      	cmp	r2, r3
 801118c:	f040 815a 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	330d      	adds	r3, #13
 8011194:	781a      	ldrb	r2, [r3, #0]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	7e5b      	ldrb	r3, [r3, #25]
 801119a:	429a      	cmp	r2, r3
 801119c:	f040 8152 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	7a5a      	ldrb	r2, [r3, #9]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	691b      	ldr	r3, [r3, #16]
 80111ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	611a      	str	r2, [r3, #16]
 80111b4:	e146      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	3308      	adds	r3, #8
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	2b0a      	cmp	r3, #10
 80111be:	f040 8141 	bne.w	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	7a5a      	ldrb	r2, [r3, #9]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	6898      	ldr	r0, [r3, #8]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	8999      	ldrh	r1, [r3, #12]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	7d1a      	ldrb	r2, [r3, #20]
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	330c      	adds	r3, #12
 80111da:	781c      	ldrb	r4, [r3, #0]
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	330d      	adds	r3, #13
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	9300      	str	r3, [sp, #0]
 80111e4:	4623      	mov	r3, r4
 80111e6:	f7fe fef5 	bl	800ffd4 <_ZN3BTD26l2cap_information_responseEthhh>
 80111ea:	e12b      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	3306      	adds	r3, #6
 80111f0:	781a      	ldrb	r2, [r3, #0]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80111f8:	429a      	cmp	r2, r3
 80111fa:	f040 8087 	bne.w	801130c <_ZN5BTHID7ACLDataEPh+0x76a>
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	3307      	adds	r3, #7
 8011202:	781a      	ldrb	r2, [r3, #0]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801120a:	429a      	cmp	r2, r3
 801120c:	d17e      	bne.n	801130c <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	3308      	adds	r3, #8
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	2b02      	cmp	r3, #2
 8011216:	d131      	bne.n	801127c <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2203      	movs	r2, #3
 801121c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	7a5a      	ldrb	r2, [r3, #9]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	7a9a      	ldrb	r2, [r3, #10]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2200      	movs	r2, #0
 8011238:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2205      	movs	r2, #5
 8011240:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2200      	movs	r2, #0
 8011248:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2200      	movs	r2, #0
 8011250:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2200      	movs	r2, #0
 8011260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2200      	movs	r2, #0
 8011268:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	3328      	adds	r3, #40	; 0x28
 8011270:	220a      	movs	r2, #10
 8011272:	4619      	mov	r1, r3
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f000 fb6d 	bl	8011954 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801127a:	e0e0      	b.n	801143e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	3308      	adds	r3, #8
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	2b04      	cmp	r3, #4
 8011284:	d131      	bne.n	80112ea <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2205      	movs	r2, #5
 801128a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	7a5a      	ldrb	r2, [r3, #9]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	7a9a      	ldrb	r2, [r3, #10]
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2200      	movs	r2, #0
 80112a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2205      	movs	r2, #5
 80112ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2200      	movs	r2, #0
 80112b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2202      	movs	r2, #2
 80112be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2235      	movs	r2, #53	; 0x35
 80112c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2200      	movs	r2, #0
 80112ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2200      	movs	r2, #0
 80112d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	3328      	adds	r3, #40	; 0x28
 80112de:	220a      	movs	r2, #10
 80112e0:	4619      	mov	r1, r3
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f000 fb36 	bl	8011954 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80112e8:	e0a9      	b.n	801143e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	3308      	adds	r3, #8
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	2b06      	cmp	r3, #6
 80112f2:	f040 80a4 	bne.w	801143e <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	3309      	adds	r3, #9
 80112fa:	7819      	ldrb	r1, [r3, #0]
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	330a      	adds	r3, #10
 8011300:	781b      	ldrb	r3, [r3, #0]
 8011302:	461a      	mov	r2, r3
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f000 fb3f 	bl	8011988 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801130a:	e098      	b.n	801143e <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	3306      	adds	r3, #6
 8011310:	781a      	ldrb	r2, [r3, #0]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8011318:	429a      	cmp	r2, r3
 801131a:	d162      	bne.n	80113e2 <_ZN5BTHID7ACLDataEPh+0x840>
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	3307      	adds	r3, #7
 8011320:	781a      	ldrb	r2, [r3, #0]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8011328:	429a      	cmp	r2, r3
 801132a:	d15a      	bne.n	80113e2 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	3308      	adds	r3, #8
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	2ba1      	cmp	r3, #161	; 0xa1
 8011334:	f040 8085 	bne.w	8011442 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 8011338:	f7f1 fb00 	bl	800293c <HAL_GetTick>
 801133c:	4602      	mov	r2, r0
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	3305      	adds	r3, #5
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	021b      	lsls	r3, r3, #8
 801134a:	b21a      	sxth	r2, r3
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	3304      	adds	r3, #4
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	b21b      	sxth	r3, r3
 8011354:	4313      	orrs	r3, r2
 8011356:	b21b      	sxth	r3, r3
 8011358:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	3314      	adds	r3, #20
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	89fa      	ldrh	r2, [r7, #14]
 8011364:	b2d2      	uxtb	r2, r2
 8011366:	3a01      	subs	r2, #1
 8011368:	b2d1      	uxtb	r1, r2
 801136a:	683a      	ldr	r2, [r7, #0]
 801136c:	3209      	adds	r2, #9
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	3309      	adds	r3, #9
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	2b01      	cmp	r3, #1
 801137a:	d002      	beq.n	8011382 <_ZN5BTHID7ACLDataEPh+0x7e0>
 801137c:	2b02      	cmp	r3, #2
 801137e:	d016      	beq.n	80113ae <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 8011380:	e05f      	b.n	8011442 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6a1b      	ldr	r3, [r3, #32]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d027      	beq.n	80113da <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6a18      	ldr	r0, [r3, #32]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6a1b      	ldr	r3, [r3, #32]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	681c      	ldr	r4, [r3, #0]
 8011396:	89fb      	ldrh	r3, [r7, #14]
 8011398:	b2db      	uxtb	r3, r3
 801139a:	3b02      	subs	r3, #2
 801139c:	b2da      	uxtb	r2, r3
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	330a      	adds	r3, #10
 80113a2:	9300      	str	r3, [sp, #0]
 80113a4:	4613      	mov	r3, r2
 80113a6:	2200      	movs	r2, #0
 80113a8:	6879      	ldr	r1, [r7, #4]
 80113aa:	47a0      	blx	r4
                                                break;
 80113ac:	e015      	b.n	80113da <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d013      	beq.n	80113de <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	681c      	ldr	r4, [r3, #0]
 80113c2:	89fb      	ldrh	r3, [r7, #14]
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	3b02      	subs	r3, #2
 80113c8:	b2da      	uxtb	r2, r3
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	330a      	adds	r3, #10
 80113ce:	9300      	str	r3, [sp, #0]
 80113d0:	4613      	mov	r3, r2
 80113d2:	2200      	movs	r2, #0
 80113d4:	6879      	ldr	r1, [r7, #4]
 80113d6:	47a0      	blx	r4
                                                break;
 80113d8:	e001      	b.n	80113de <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 80113da:	bf00      	nop
 80113dc:	e031      	b.n	8011442 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 80113de:	bf00      	nop
                        }
 80113e0:	e02f      	b.n	8011442 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	3306      	adds	r3, #6
 80113e6:	781a      	ldrb	r2, [r3, #0]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d128      	bne.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	3307      	adds	r3, #7
 80113f6:	781a      	ldrb	r2, [r3, #0]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80113fe:	429a      	cmp	r2, r3
 8011400:	d120      	bne.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	3308      	adds	r3, #8
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	2ba3      	cmp	r3, #163	; 0xa3
 801140a:	d11b      	bne.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	3305      	adds	r3, #5
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	021b      	lsls	r3, r3, #8
 8011414:	b21a      	sxth	r2, r3
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	3304      	adds	r3, #4
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	b21b      	sxth	r3, r3
 801141e:	4313      	orrs	r3, r2
 8011420:	b21b      	sxth	r3, r3
 8011422:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	3318      	adds	r3, #24
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	89ba      	ldrh	r2, [r7, #12]
 801142e:	b2d2      	uxtb	r2, r2
 8011430:	3a01      	subs	r2, #1
 8011432:	b2d1      	uxtb	r1, r2
 8011434:	683a      	ldr	r2, [r7, #0]
 8011436:	3209      	adds	r2, #9
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	4798      	blx	r3
 801143c:	e002      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801143e:	bf00      	nop
 8011440:	e000      	b.n	8011444 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 8011442:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f000 f807 	bl	8011458 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f000 f8b4 	bl	80115b8 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 8011450:	bf00      	nop
 8011452:	3714      	adds	r7, #20
 8011454:	46bd      	mov	sp, r7
 8011456:	bd90      	pop	{r4, r7, pc}

08011458 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 8011458:	b5b0      	push	{r4, r5, r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af02      	add	r7, sp, #8
 801145e:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	7e9b      	ldrb	r3, [r3, #26]
 8011464:	2b0e      	cmp	r3, #14
 8011466:	f000 8084 	beq.w	8011572 <_ZN5BTHID8SDP_taskEv+0x11a>
 801146a:	2b0e      	cmp	r3, #14
 801146c:	f300 809f 	bgt.w	80115ae <_ZN5BTHID8SDP_taskEv+0x156>
 8011470:	2b0a      	cmp	r3, #10
 8011472:	d002      	beq.n	801147a <_ZN5BTHID8SDP_taskEv+0x22>
 8011474:	2b0b      	cmp	r3, #11
 8011476:	d068      	beq.n	801154a <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 8011478:	e099      	b.n	80115ae <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	691b      	ldr	r3, [r3, #16]
 801147e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011482:	2b00      	cmp	r3, #0
 8011484:	d041      	beq.n	801150a <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	691b      	ldr	r3, [r3, #16]
 801148a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6898      	ldr	r0, [r3, #8]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	8999      	ldrh	r1, [r3, #12]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	7d1a      	ldrb	r2, [r3, #20]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	331b      	adds	r3, #27
 80114a8:	2501      	movs	r5, #1
 80114aa:	9501      	str	r5, [sp, #4]
 80114ac:	9300      	str	r3, [sp, #0]
 80114ae:	4623      	mov	r3, r4
 80114b0:	f7fe fc2b 	bl	800fd0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 80114b4:	2001      	movs	r0, #1
 80114b6:	f7f1 fa4d 	bl	8002954 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6898      	ldr	r0, [r3, #8]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	8999      	ldrh	r1, [r3, #12]
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	7d1a      	ldrb	r2, [r3, #20]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	331b      	adds	r3, #27
 80114d0:	2500      	movs	r5, #0
 80114d2:	9501      	str	r5, [sp, #4]
 80114d4:	9300      	str	r3, [sp, #0]
 80114d6:	4623      	mov	r3, r4
 80114d8:	f7fe fc17 	bl	800fd0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	7d1b      	ldrb	r3, [r3, #20]
 80114e0:	3301      	adds	r3, #1
 80114e2:	b2da      	uxtb	r2, r3
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80114e8:	2001      	movs	r0, #1
 80114ea:	f7f1 fa33 	bl	8002954 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6898      	ldr	r0, [r3, #8]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	8999      	ldrh	r1, [r3, #12]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	7d1a      	ldrb	r2, [r3, #20]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	331b      	adds	r3, #27
 80114fe:	f7fe fc51 	bl	800fda4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	220b      	movs	r2, #11
 8011506:	769a      	strb	r2, [r3, #26]
                        break;
 8011508:	e04c      	b.n	80115a4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	691b      	ldr	r3, [r3, #16]
 801150e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011512:	2b00      	cmp	r3, #0
 8011514:	d046      	beq.n	80115a4 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	691b      	ldr	r3, [r3, #16]
 801151a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2200      	movs	r2, #0
 8011526:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6898      	ldr	r0, [r3, #8]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	8999      	ldrh	r1, [r3, #12]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	7d1a      	ldrb	r2, [r3, #20]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	331b      	adds	r3, #27
 8011540:	9300      	str	r3, [sp, #0]
 8011542:	4623      	mov	r3, r4
 8011544:	f7fe fd09 	bl	800ff5a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8011548:	e02c      	b.n	80115a4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	691b      	ldr	r3, [r3, #16]
 801154e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011552:	2b00      	cmp	r3, #0
 8011554:	d028      	beq.n	80115a8 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	691b      	ldr	r3, [r3, #16]
 801155a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2201      	movs	r2, #1
 8011566:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	220a      	movs	r2, #10
 801156e:	769a      	strb	r2, [r3, #26]
                        break;
 8011570:	e01a      	b.n	80115a8 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	691b      	ldr	r3, [r3, #16]
 8011576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801157a:	2b00      	cmp	r3, #0
 801157c:	d016      	beq.n	80115ac <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	689a      	ldr	r2, [r3, #8]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	899b      	ldrh	r3, [r3, #12]
 8011586:	4619      	mov	r1, r3
 8011588:	4610      	mov	r0, r2
 801158a:	f7fe fa92 	bl	800fab2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011594:	819a      	strh	r2, [r3, #12]
                                Reset();
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	3308      	adds	r3, #8
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	4798      	blx	r3
                        break;
 80115a2:	e003      	b.n	80115ac <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 80115a4:	bf00      	nop
 80115a6:	e002      	b.n	80115ae <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80115a8:	bf00      	nop
 80115aa:	e000      	b.n	80115ae <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80115ac:	bf00      	nop
}
 80115ae:	bf00      	nop
 80115b0:	3708      	adds	r7, #8
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080115b8 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 80115b8:	b5b0      	push	{r4, r5, r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af02      	add	r7, sp, #8
 80115be:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80115c6:	3b01      	subs	r3, #1
 80115c8:	2b08      	cmp	r3, #8
 80115ca:	f200 812c 	bhi.w	8011826 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 80115ce:	a201      	add	r2, pc, #4	; (adr r2, 80115d4 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 80115d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d4:	08011805 	.word	0x08011805
 80115d8:	0801169f 	.word	0x0801169f
 80115dc:	080116d7 	.word	0x080116d7
 80115e0:	080115f9 	.word	0x080115f9
 80115e4:	080117d1 	.word	0x080117d1
 80115e8:	08011617 	.word	0x08011617
 80115ec:	0801171f 	.word	0x0801171f
 80115f0:	08011755 	.word	0x08011755
 80115f4:	08011791 	.word	0x08011791
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	691b      	ldr	r3, [r3, #16]
 80115fc:	f003 0302 	and.w	r3, r3, #2
 8011600:	2b00      	cmp	r3, #0
 8011602:	f000 8101 	beq.w	8011808 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f000 f9f9 	bl	80119fe <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2206      	movs	r2, #6
 8011610:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011614:	e0f8      	b.n	8011808 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	691b      	ldr	r3, [r3, #16]
 801161a:	f003 0310 	and.w	r3, r3, #16
 801161e:	2b00      	cmp	r3, #0
 8011620:	f000 80f4 	beq.w	801180c <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6898      	ldr	r0, [r3, #8]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	8999      	ldrh	r1, [r3, #12]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	7d1a      	ldrb	r2, [r3, #20]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	3318      	adds	r3, #24
 801163a:	2501      	movs	r5, #1
 801163c:	9501      	str	r5, [sp, #4]
 801163e:	9300      	str	r3, [sp, #0]
 8011640:	4623      	mov	r3, r4
 8011642:	f7fe fb62 	bl	800fd0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8011646:	2001      	movs	r0, #1
 8011648:	f7f1 f984 	bl	8002954 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6898      	ldr	r0, [r3, #8]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	8999      	ldrh	r1, [r3, #12]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	7d1a      	ldrb	r2, [r3, #20]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	3318      	adds	r3, #24
 8011662:	2500      	movs	r5, #0
 8011664:	9501      	str	r5, [sp, #4]
 8011666:	9300      	str	r3, [sp, #0]
 8011668:	4623      	mov	r3, r4
 801166a:	f7fe fb4e 	bl	800fd0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	7d1b      	ldrb	r3, [r3, #20]
 8011672:	3301      	adds	r3, #1
 8011674:	b2da      	uxtb	r2, r3
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	751a      	strb	r2, [r3, #20]
                                delay(1);
 801167a:	2001      	movs	r0, #1
 801167c:	f7f1 f96a 	bl	8002954 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6898      	ldr	r0, [r3, #8]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	8999      	ldrh	r1, [r3, #12]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	7d1a      	ldrb	r2, [r3, #20]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	3318      	adds	r3, #24
 8011690:	f7fe fb88 	bl	800fda4 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2208      	movs	r2, #8
 8011698:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801169c:	e0b6      	b.n	801180c <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	691b      	ldr	r3, [r3, #16]
 80116a2:	f003 0304 	and.w	r3, r3, #4
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	f000 80b2 	beq.w	8011810 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	7d1b      	ldrb	r3, [r3, #20]
 80116b0:	3301      	adds	r3, #1
 80116b2:	b2da      	uxtb	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6898      	ldr	r0, [r3, #8]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	8999      	ldrh	r1, [r3, #12]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	7d1a      	ldrb	r2, [r3, #20]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	3316      	adds	r3, #22
 80116c8:	f7fe fb6c 	bl	800fda4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2203      	movs	r2, #3
 80116d0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80116d4:	e09c      	b.n	8011810 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	691b      	ldr	r3, [r3, #16]
 80116da:	f003 0302 	and.w	r3, r3, #2
 80116de:	2b00      	cmp	r3, #0
 80116e0:	f000 8098 	beq.w	8011814 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f000 f98a 	bl	80119fe <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 80116ea:	2001      	movs	r0, #1
 80116ec:	f7f1 f932 	bl	8002954 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	7d1b      	ldrb	r3, [r3, #20]
 80116f4:	3301      	adds	r3, #1
 80116f6:	b2da      	uxtb	r2, r3
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6898      	ldr	r0, [r3, #8]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	8999      	ldrh	r1, [r3, #12]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	7d1a      	ldrb	r2, [r3, #20]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	336d      	adds	r3, #109	; 0x6d
 801170c:	2413      	movs	r4, #19
 801170e:	9400      	str	r4, [sp, #0]
 8011710:	f7fe fabd 	bl	800fc8e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2207      	movs	r2, #7
 8011718:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801171c:	e07a      	b.n	8011814 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	691b      	ldr	r3, [r3, #16]
 8011722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011726:	2b00      	cmp	r3, #0
 8011728:	d076      	beq.n	8011818 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	7d1b      	ldrb	r3, [r3, #20]
 801172e:	3301      	adds	r3, #1
 8011730:	b2da      	uxtb	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6898      	ldr	r0, [r3, #8]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	8999      	ldrh	r1, [r3, #12]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	7d1a      	ldrb	r2, [r3, #20]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	3318      	adds	r3, #24
 8011746:	f7fe fb2d 	bl	800fda4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2208      	movs	r2, #8
 801174e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011752:	e061      	b.n	8011818 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	f003 0320 	and.w	r3, r3, #32
 801175c:	2b00      	cmp	r3, #0
 801175e:	d05d      	beq.n	801181c <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	689b      	ldr	r3, [r3, #8]
 8011764:	2200      	movs	r2, #0
 8011766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	689b      	ldr	r3, [r3, #8]
 801176e:	2200      	movs	r2, #0
 8011770:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2201      	movs	r2, #1
 8011778:	755a      	strb	r2, [r3, #21]
                                onInit();
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	3310      	adds	r3, #16
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	6878      	ldr	r0, [r7, #4]
 8011784:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2201      	movs	r2, #1
 801178a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801178e:	e045      	b.n	801181c <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	691b      	ldr	r3, [r3, #16]
 8011794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011798:	2b00      	cmp	r3, #0
 801179a:	d041      	beq.n	8011820 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	7d1b      	ldrb	r3, [r3, #20]
 80117a0:	3301      	adds	r3, #1
 80117a2:	b2da      	uxtb	r2, r3
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6898      	ldr	r0, [r3, #8]
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	8999      	ldrh	r1, [r3, #12]
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	7d1a      	ldrb	r2, [r3, #20]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f103 0416 	add.w	r4, r3, #22
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	336b      	adds	r3, #107	; 0x6b
 80117be:	9300      	str	r3, [sp, #0]
 80117c0:	4623      	mov	r3, r4
 80117c2:	f7fe fb8d 	bl	800fee0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2205      	movs	r2, #5
 80117ca:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80117ce:	e027      	b.n	8011820 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	691b      	ldr	r3, [r3, #16]
 80117d4:	f003 0308 	and.w	r3, r3, #8
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d023      	beq.n	8011824 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	689a      	ldr	r2, [r3, #8]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	899b      	ldrh	r3, [r3, #12]
 80117e4:	4619      	mov	r1, r3
 80117e6:	4610      	mov	r0, r2
 80117e8:	f7fe f963 	bl	800fab2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117f2:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2200      	movs	r2, #0
 80117f8:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2200      	movs	r2, #0
 80117fe:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011802:	e00f      	b.n	8011824 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 8011804:	bf00      	nop
 8011806:	e00e      	b.n	8011826 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011808:	bf00      	nop
 801180a:	e00c      	b.n	8011826 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801180c:	bf00      	nop
 801180e:	e00a      	b.n	8011826 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011810:	bf00      	nop
 8011812:	e008      	b.n	8011826 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011814:	bf00      	nop
 8011816:	e006      	b.n	8011826 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011818:	bf00      	nop
 801181a:	e004      	b.n	8011826 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801181c:	bf00      	nop
 801181e:	e002      	b.n	8011826 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011820:	bf00      	nop
 8011822:	e000      	b.n	8011826 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011824:	bf00      	nop
        }
}
 8011826:	bf00      	nop
 8011828:	3708      	adds	r7, #8
 801182a:	46bd      	mov	sp, r7
 801182c:	bdb0      	pop	{r4, r5, r7, pc}
 801182e:	bf00      	nop

08011830 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 8011830:	b5b0      	push	{r4, r5, r7, lr}
 8011832:	b084      	sub	sp, #16
 8011834:	af02      	add	r7, sp, #8
 8011836:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801183e:	2b00      	cmp	r3, #0
 8011840:	f040 8084 	bne.w	801194c <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	689b      	ldr	r3, [r3, #8]
 8011848:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801184c:	2b00      	cmp	r3, #0
 801184e:	d03a      	beq.n	80118c6 <_ZN5BTHID3RunEv+0x96>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	689b      	ldr	r3, [r3, #8]
 8011854:	7a5b      	ldrb	r3, [r3, #9]
 8011856:	f083 0301 	eor.w	r3, r3, #1
 801185a:	b2db      	uxtb	r3, r3
 801185c:	2b00      	cmp	r3, #0
 801185e:	d032      	beq.n	80118c6 <_ZN5BTHID3RunEv+0x96>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	7d5b      	ldrb	r3, [r3, #21]
 8011864:	f083 0301 	eor.w	r3, r3, #1
 8011868:	b2db      	uxtb	r3, r3
 801186a:	2b00      	cmp	r3, #0
 801186c:	d02b      	beq.n	80118c6 <_ZN5BTHID3RunEv+0x96>
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011874:	f083 0301 	eor.w	r3, r3, #1
 8011878:	b2db      	uxtb	r3, r3
 801187a:	2b00      	cmp	r3, #0
 801187c:	d023      	beq.n	80118c6 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	689b      	ldr	r3, [r3, #8]
 8011882:	2201      	movs	r2, #1
 8011884:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2201      	movs	r2, #1
 801188a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	689b      	ldr	r3, [r3, #8]
 8011892:	8b5a      	ldrh	r2, [r3, #26]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2200      	movs	r2, #0
 801189c:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2200      	movs	r2, #0
 80118a2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6898      	ldr	r0, [r3, #8]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	8999      	ldrh	r1, [r3, #12]
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	7d1a      	ldrb	r2, [r3, #20]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	336b      	adds	r3, #107	; 0x6b
 80118b4:	2411      	movs	r4, #17
 80118b6:	9400      	str	r4, [sp, #0]
 80118b8:	f7fe f9e9 	bl	800fc8e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2202      	movs	r2, #2
 80118c0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 80118c4:	e041      	b.n	801194a <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	691b      	ldr	r3, [r3, #16]
 80118ca:	f003 0301 	and.w	r3, r3, #1
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d03b      	beq.n	801194a <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6898      	ldr	r0, [r3, #8]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	8999      	ldrh	r1, [r3, #12]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	7d1a      	ldrb	r2, [r3, #20]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	3316      	adds	r3, #22
 80118e8:	2501      	movs	r5, #1
 80118ea:	9501      	str	r5, [sp, #4]
 80118ec:	9300      	str	r3, [sp, #0]
 80118ee:	4623      	mov	r3, r4
 80118f0:	f7fe fa0b 	bl	800fd0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 80118f4:	2001      	movs	r0, #1
 80118f6:	f7f1 f82d 	bl	8002954 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6898      	ldr	r0, [r3, #8]
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	8999      	ldrh	r1, [r3, #12]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	7d1a      	ldrb	r2, [r3, #20]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	3316      	adds	r3, #22
 8011910:	2500      	movs	r5, #0
 8011912:	9501      	str	r5, [sp, #4]
 8011914:	9300      	str	r3, [sp, #0]
 8011916:	4623      	mov	r3, r4
 8011918:	f7fe f9f7 	bl	800fd0a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	7d1b      	ldrb	r3, [r3, #20]
 8011920:	3301      	adds	r3, #1
 8011922:	b2da      	uxtb	r2, r3
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8011928:	2001      	movs	r0, #1
 801192a:	f7f1 f813 	bl	8002954 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6898      	ldr	r0, [r3, #8]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	8999      	ldrh	r1, [r3, #12]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	7d1a      	ldrb	r2, [r3, #20]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	3316      	adds	r3, #22
 801193e:	f7fe fa31 	bl	800fda4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2204      	movs	r2, #4
 8011946:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 801194a:	bf00      	nop
        }
}
 801194c:	bf00      	nop
 801194e:	3708      	adds	r7, #8
 8011950:	46bd      	mov	sp, r7
 8011952:	bdb0      	pop	{r4, r5, r7, pc}

08011954 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 8011954:	b590      	push	{r4, r7, lr}
 8011956:	b087      	sub	sp, #28
 8011958:	af02      	add	r7, sp, #8
 801195a:	60f8      	str	r0, [r7, #12]
 801195c:	60b9      	str	r1, [r7, #8]
 801195e:	4613      	mov	r3, r2
 8011960:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	6898      	ldr	r0, [r3, #8]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	8999      	ldrh	r1, [r3, #12]
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	7edb      	ldrb	r3, [r3, #27]
 801196e:	68fa      	ldr	r2, [r7, #12]
 8011970:	7f12      	ldrb	r2, [r2, #28]
 8011972:	79fc      	ldrb	r4, [r7, #7]
 8011974:	9201      	str	r2, [sp, #4]
 8011976:	9300      	str	r3, [sp, #0]
 8011978:	4623      	mov	r3, r4
 801197a:	68ba      	ldr	r2, [r7, #8]
 801197c:	f7fe f8f8 	bl	800fb70 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011980:	bf00      	nop
 8011982:	3714      	adds	r7, #20
 8011984:	46bd      	mov	sp, r7
 8011986:	bd90      	pop	{r4, r7, pc}

08011988 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 8011988:	b580      	push	{r7, lr}
 801198a:	b082      	sub	sp, #8
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	460b      	mov	r3, r1
 8011992:	70fb      	strb	r3, [r7, #3]
 8011994:	4613      	mov	r3, r2
 8011996:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2207      	movs	r2, #7
 801199c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	78fa      	ldrb	r2, [r7, #3]
 80119a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	78ba      	ldrb	r2, [r7, #2]
 80119ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2205      	movs	r2, #5
 80119bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2200      	movs	r2, #0
 80119c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2202      	movs	r2, #2
 80119cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2235      	movs	r2, #53	; 0x35
 80119d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2200      	movs	r2, #0
 80119dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2200      	movs	r2, #0
 80119e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	3328      	adds	r3, #40	; 0x28
 80119ec:	220a      	movs	r2, #10
 80119ee:	4619      	mov	r1, r3
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f7ff ffaf 	bl	8011954 <_ZN5BTHID11SDP_CommandEPhh>
}
 80119f6:	bf00      	nop
 80119f8:	3708      	adds	r7, #8
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}

080119fe <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 80119fe:	b590      	push	{r4, r7, lr}
 8011a00:	b087      	sub	sp, #28
 8011a02:	af02      	add	r7, sp, #8
 8011a04:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d008      	beq.n	8011a22 <_ZN5BTHID11setProtocolEv+0x24>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d003      	beq.n	8011a22 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011a28:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8011a2c:	b2db      	uxtb	r3, r3
 8011a2e:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6898      	ldr	r0, [r3, #8]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	8999      	ldrh	r1, [r3, #12]
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	7d9b      	ldrb	r3, [r3, #22]
 8011a3c:	687a      	ldr	r2, [r7, #4]
 8011a3e:	7dd2      	ldrb	r2, [r2, #23]
 8011a40:	f107 040f 	add.w	r4, r7, #15
 8011a44:	9201      	str	r2, [sp, #4]
 8011a46:	9300      	str	r3, [sp, #0]
 8011a48:	2301      	movs	r3, #1
 8011a4a:	4622      	mov	r2, r4
 8011a4c:	f7fe f890 	bl	800fb70 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011a50:	bf00      	nop
 8011a52:	3714      	adds	r7, #20
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd90      	pop	{r4, r7, pc}

08011a58 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 8011a58:	b480      	push	{r7}
 8011a5a:	b083      	sub	sp, #12
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	460b      	mov	r3, r1
 8011a62:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8011a64:	78fb      	ldrb	r3, [r7, #3]
 8011a66:	2b03      	cmp	r3, #3
 8011a68:	d86e      	bhi.n	8011b48 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 8011a6a:	a201      	add	r2, pc, #4	; (adr r2, 8011a70 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 8011a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a70:	08011a81 	.word	0x08011a81
 8011a74:	08011ab3 	.word	0x08011ab3
 8011a78:	08011ae5 	.word	0x08011ae5
 8011a7c:	08011b17 	.word	0x08011b17
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	7a1b      	ldrb	r3, [r3, #8]
 8011a84:	f003 030f 	and.w	r3, r3, #15
 8011a88:	b2db      	uxtb	r3, r3
 8011a8a:	2b07      	cmp	r3, #7
 8011a8c:	d00d      	beq.n	8011aaa <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	7a1b      	ldrb	r3, [r3, #8]
 8011a92:	f003 030f 	and.w	r3, r3, #15
 8011a96:	b2db      	uxtb	r3, r3
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d006      	beq.n	8011aaa <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	7a1b      	ldrb	r3, [r3, #8]
 8011aa0:	f003 030f 	and.w	r3, r3, #15
 8011aa4:	b2db      	uxtb	r3, r3
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d101      	bne.n	8011aae <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 8011aaa:	2301      	movs	r3, #1
 8011aac:	e04d      	b.n	8011b4a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011aae:	2300      	movs	r3, #0
 8011ab0:	e04b      	b.n	8011b4a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	7a1b      	ldrb	r3, [r3, #8]
 8011ab6:	f003 030f 	and.w	r3, r3, #15
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d00d      	beq.n	8011adc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	7a1b      	ldrb	r3, [r3, #8]
 8011ac4:	f003 030f 	and.w	r3, r3, #15
 8011ac8:	b2db      	uxtb	r3, r3
 8011aca:	2b02      	cmp	r3, #2
 8011acc:	d006      	beq.n	8011adc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	7a1b      	ldrb	r3, [r3, #8]
 8011ad2:	f003 030f 	and.w	r3, r3, #15
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	2b03      	cmp	r3, #3
 8011ada:	d101      	bne.n	8011ae0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 8011adc:	2301      	movs	r3, #1
 8011ade:	e034      	b.n	8011b4a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	e032      	b.n	8011b4a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	7a1b      	ldrb	r3, [r3, #8]
 8011ae8:	f003 030f 	and.w	r3, r3, #15
 8011aec:	b2db      	uxtb	r3, r3
 8011aee:	2b03      	cmp	r3, #3
 8011af0:	d00d      	beq.n	8011b0e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	7a1b      	ldrb	r3, [r3, #8]
 8011af6:	f003 030f 	and.w	r3, r3, #15
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	2b04      	cmp	r3, #4
 8011afe:	d006      	beq.n	8011b0e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	7a1b      	ldrb	r3, [r3, #8]
 8011b04:	f003 030f 	and.w	r3, r3, #15
 8011b08:	b2db      	uxtb	r3, r3
 8011b0a:	2b05      	cmp	r3, #5
 8011b0c:	d101      	bne.n	8011b12 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 8011b0e:	2301      	movs	r3, #1
 8011b10:	e01b      	b.n	8011b4a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011b12:	2300      	movs	r3, #0
 8011b14:	e019      	b.n	8011b4a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	7a1b      	ldrb	r3, [r3, #8]
 8011b1a:	f003 030f 	and.w	r3, r3, #15
 8011b1e:	b2db      	uxtb	r3, r3
 8011b20:	2b05      	cmp	r3, #5
 8011b22:	d00d      	beq.n	8011b40 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	7a1b      	ldrb	r3, [r3, #8]
 8011b28:	f003 030f 	and.w	r3, r3, #15
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	2b06      	cmp	r3, #6
 8011b30:	d006      	beq.n	8011b40 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	7a1b      	ldrb	r3, [r3, #8]
 8011b36:	f003 030f 	and.w	r3, r3, #15
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	2b07      	cmp	r3, #7
 8011b3e:	d101      	bne.n	8011b44 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 8011b40:	2301      	movs	r3, #1
 8011b42:	e002      	b.n	8011b4a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011b44:	2300      	movs	r3, #0
 8011b46:	e000      	b.n	8011b4a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8011b48:	2300      	movs	r3, #0
        }
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	370c      	adds	r7, #12
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop

08011b58 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	460b      	mov	r3, r1
 8011b62:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 8011b64:	78fb      	ldrb	r3, [r7, #3]
 8011b66:	2b03      	cmp	r3, #3
 8011b68:	d806      	bhi.n	8011b78 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 8011b6a:	78fb      	ldrb	r3, [r7, #3]
 8011b6c:	4619      	mov	r1, r3
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f7ff ff72 	bl	8011a58 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011b74:	4603      	mov	r3, r0
 8011b76:	e011      	b.n	8011b9c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	689b      	ldr	r3, [r3, #8]
 8011b7c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011b80:	4619      	mov	r1, r3
 8011b82:	78fb      	ldrb	r3, [r7, #3]
 8011b84:	4a07      	ldr	r2, [pc, #28]	; (8011ba4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 8011b86:	4413      	add	r3, r2
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8011b8e:	f003 0301 	and.w	r3, r3, #1
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	bf14      	ite	ne
 8011b96:	2301      	movne	r3, #1
 8011b98:	2300      	moveq	r3, #0
 8011b9a:	b2db      	uxtb	r3, r3
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3708      	adds	r7, #8
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}
 8011ba4:	08014ca4 	.word	0x08014ca4

08011ba8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 8011ba8:	b480      	push	{r7}
 8011baa:	b085      	sub	sp, #20
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	460b      	mov	r3, r1
 8011bb2:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8011bb4:	78fb      	ldrb	r3, [r7, #3]
 8011bb6:	4a1b      	ldr	r2, [pc, #108]	; (8011c24 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8011bb8:	4413      	add	r3, r2
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	4093      	lsls	r3, r2
 8011bc2:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8011bca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011bce:	021b      	lsls	r3, r3, #8
 8011bd0:	4313      	orrs	r3, r2
 8011bd2:	461a      	mov	r2, r3
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	4013      	ands	r3, r2
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	bf14      	ite	ne
 8011bdc:	2301      	movne	r3, #1
 8011bde:	2300      	moveq	r3, #0
 8011be0:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8011be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011bec:	021b      	lsls	r3, r3, #8
 8011bee:	4313      	orrs	r3, r2
 8011bf0:	461a      	mov	r2, r3
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	43db      	mvns	r3, r3
 8011bf6:	4013      	ands	r3, r2
 8011bf8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	b2d1      	uxtb	r1, r2
 8011c00:	2000      	movs	r0, #0
 8011c02:	4301      	orrs	r1, r0
 8011c04:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8011c08:	0a12      	lsrs	r2, r2, #8
 8011c0a:	b292      	uxth	r2, r2
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	430a      	orrs	r2, r1
 8011c10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8011c14:	7afb      	ldrb	r3, [r7, #11]
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3714      	adds	r7, #20
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr
 8011c22:	bf00      	nop
 8011c24:	08014ca4 	.word	0x08014ca4

08011c28 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 8011c28:	b480      	push	{r7}
 8011c2a:	b083      	sub	sp, #12
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	460b      	mov	r3, r1
 8011c32:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 8011c34:	78fb      	ldrb	r3, [r7, #3]
 8011c36:	2b08      	cmp	r3, #8
 8011c38:	d102      	bne.n	8011c40 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	7adb      	ldrb	r3, [r3, #11]
 8011c3e:	e006      	b.n	8011c4e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 8011c40:	78fb      	ldrb	r3, [r7, #3]
 8011c42:	2b09      	cmp	r3, #9
 8011c44:	d102      	bne.n	8011c4c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	7b1b      	ldrb	r3, [r3, #12]
 8011c4a:	e000      	b.n	8011c4e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 8011c4c:	2300      	movs	r3, #0
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	370c      	adds	r7, #12
 8011c52:	46bd      	mov	sp, r7
 8011c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c58:	4770      	bx	lr

08011c5a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 8011c5a:	b480      	push	{r7}
 8011c5c:	b083      	sub	sp, #12
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	6078      	str	r0, [r7, #4]
 8011c62:	460b      	mov	r3, r1
 8011c64:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 8011c66:	78fb      	ldrb	r3, [r7, #3]
 8011c68:	687a      	ldr	r2, [r7, #4]
 8011c6a:	4413      	add	r3, r2
 8011c6c:	791b      	ldrb	r3, [r3, #4]
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	370c      	adds	r7, #12
 8011c72:	46bd      	mov	sp, r7
 8011c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c78:	4770      	bx	lr

08011c7a <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 8011c7a:	b580      	push	{r7, lr}
 8011c7c:	b086      	sub	sp, #24
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	60f8      	str	r0, [r7, #12]
 8011c82:	460b      	mov	r3, r1
 8011c84:	607a      	str	r2, [r7, #4]
 8011c86:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 8011c88:	7afb      	ldrb	r3, [r7, #11]
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	f240 80a6 	bls.w	8011ddc <_ZN9PS4Parser5ParseEhPh+0x162>
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	f000 80a2 	beq.w	8011ddc <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	d10e      	bne.n	8011cbe <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	1d18      	adds	r0, r3, #4
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	1c59      	adds	r1, r3, #1
 8011ca8:	7afb      	ldrb	r3, [r7, #11]
 8011caa:	3b01      	subs	r3, #1
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	2b3c      	cmp	r3, #60	; 0x3c
 8011cb0:	bf28      	it	cs
 8011cb2:	233c      	movcs	r3, #60	; 0x3c
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	f001 fe56 	bl	8013968 <memcpy>
 8011cbc:	e016      	b.n	8011cec <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	2b11      	cmp	r3, #17
 8011cc4:	f040 8098 	bne.w	8011df8 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 8011cc8:	7afb      	ldrb	r3, [r7, #11]
 8011cca:	2b03      	cmp	r3, #3
 8011ccc:	f240 8096 	bls.w	8011dfc <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	1d18      	adds	r0, r3, #4
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	1cd9      	adds	r1, r3, #3
 8011cd8:	7afb      	ldrb	r3, [r7, #11]
 8011cda:	3b03      	subs	r3, #3
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	2b3c      	cmp	r3, #60	; 0x3c
 8011ce0:	bf28      	it	cs
 8011ce2:	233c      	movcs	r3, #60	; 0x3c
 8011ce4:	b2db      	uxtb	r3, r3
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	f001 fe3e 	bl	8013968 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	689b      	ldr	r3, [r3, #8]
 8011cf0:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cf8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d06d      	beq.n	8011ddc <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	689b      	ldr	r3, [r3, #8]
 8011d04:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011d08:	461a      	mov	r2, r3
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d0e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011d12:	43db      	mvns	r3, r3
 8011d14:	4013      	ands	r3, r2
 8011d16:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	b2d1      	uxtb	r1, r2
 8011d1e:	2000      	movs	r0, #0
 8011d20:	4301      	orrs	r1, r0
 8011d22:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8011d26:	0a12      	lsrs	r2, r2, #8
 8011d28:	b292      	uxth	r2, r2
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	430a      	orrs	r2, r1
 8011d2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	689b      	ldr	r3, [r3, #8]
 8011d36:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8011d3a:	68fa      	ldr	r2, [r7, #12]
 8011d3c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011d3e:	f361 0317 	bfi	r3, r1, #0, #24
 8011d42:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8011d44:	2300      	movs	r3, #0
 8011d46:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8011d48:	2100      	movs	r1, #0
 8011d4a:	68f8      	ldr	r0, [r7, #12]
 8011d4c:	f7ff fe84 	bl	8011a58 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011d50:	4603      	mov	r3, r0
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d003      	beq.n	8011d5e <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 8011d56:	7dfb      	ldrb	r3, [r7, #23]
 8011d58:	f043 0301 	orr.w	r3, r3, #1
 8011d5c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 8011d5e:	2101      	movs	r1, #1
 8011d60:	68f8      	ldr	r0, [r7, #12]
 8011d62:	f7ff fe79 	bl	8011a58 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011d66:	4603      	mov	r3, r0
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d003      	beq.n	8011d74 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 8011d6c:	7dfb      	ldrb	r3, [r7, #23]
 8011d6e:	f043 0302 	orr.w	r3, r3, #2
 8011d72:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 8011d74:	2102      	movs	r1, #2
 8011d76:	68f8      	ldr	r0, [r7, #12]
 8011d78:	f7ff fe6e 	bl	8011a58 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d003      	beq.n	8011d8a <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 8011d82:	7dfb      	ldrb	r3, [r7, #23]
 8011d84:	f043 0304 	orr.w	r3, r3, #4
 8011d88:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 8011d8a:	2103      	movs	r1, #3
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f7ff fe63 	bl	8011a58 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011d92:	4603      	mov	r3, r0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d003      	beq.n	8011da0 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 8011d98:	7dfb      	ldrb	r3, [r7, #23]
 8011d9a:	f043 0308 	orr.w	r3, r3, #8
 8011d9e:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011da6:	7dfa      	ldrb	r2, [r7, #23]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d017      	beq.n	8011ddc <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011db2:	b25b      	sxtb	r3, r3
 8011db4:	43db      	mvns	r3, r3
 8011db6:	b25a      	sxtb	r2, r3
 8011db8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011dbc:	4013      	ands	r3, r2
 8011dbe:	b25b      	sxtb	r3, r3
 8011dc0:	f003 030f 	and.w	r3, r3, #15
 8011dc4:	b2d9      	uxtb	r1, r3
 8011dc6:	68fa      	ldr	r2, [r7, #12]
 8011dc8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8011dcc:	f361 0303 	bfi	r3, r1, #0, #4
 8011dd0:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	7dfa      	ldrb	r2, [r7, #23]
 8011dd8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d00b      	beq.n	8011dfe <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	68fa      	ldr	r2, [r7, #12]
 8011dee:	3246      	adds	r2, #70	; 0x46
 8011df0:	4611      	mov	r1, r2
 8011df2:	68f8      	ldr	r0, [r7, #12]
 8011df4:	4798      	blx	r3
 8011df6:	e002      	b.n	8011dfe <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8011df8:	bf00      	nop
 8011dfa:	e000      	b.n	8011dfe <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 8011dfc:	bf00      	nop
}
 8011dfe:	3718      	adds	r7, #24
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8011e04:	b480      	push	{r7}
 8011e06:	b085      	sub	sp, #20
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	73fb      	strb	r3, [r7, #15]
 8011e10:	7bfb      	ldrb	r3, [r7, #15]
 8011e12:	2b03      	cmp	r3, #3
 8011e14:	d808      	bhi.n	8011e28 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8011e16:	7bfb      	ldrb	r3, [r7, #15]
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	4413      	add	r3, r2
 8011e1c:	227f      	movs	r2, #127	; 0x7f
 8011e1e:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8011e20:	7bfb      	ldrb	r3, [r7, #15]
 8011e22:	3301      	adds	r3, #1
 8011e24:	73fb      	strb	r3, [r7, #15]
 8011e26:	e7f3      	b.n	8011e10 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	6893      	ldr	r3, [r2, #8]
 8011e2c:	f36f 0317 	bfc	r3, #0, #24
 8011e30:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011e36:	f36f 0317 	bfc	r3, #0, #24
 8011e3a:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	73fb      	strb	r3, [r7, #15]
 8011e40:	7bfb      	ldrb	r3, [r7, #15]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d808      	bhi.n	8011e58 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8011e46:	7bfb      	ldrb	r3, [r7, #15]
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	4413      	add	r3, r2
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8011e50:	7bfb      	ldrb	r3, [r7, #15]
 8011e52:	3301      	adds	r3, #1
 8011e54:	73fb      	strb	r3, [r7, #15]
 8011e56:	e7f3      	b.n	8011e40 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8011e58:	2300      	movs	r3, #0
 8011e5a:	73fb      	strb	r3, [r7, #15]
 8011e5c:	7bfb      	ldrb	r3, [r7, #15]
 8011e5e:	2b02      	cmp	r3, #2
 8011e60:	d81b      	bhi.n	8011e9a <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8011e62:	2300      	movs	r3, #0
 8011e64:	73bb      	strb	r3, [r7, #14]
 8011e66:	7bbb      	ldrb	r3, [r7, #14]
 8011e68:	2b01      	cmp	r3, #1
 8011e6a:	d812      	bhi.n	8011e92 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 8011e6c:	7bfa      	ldrb	r2, [r7, #15]
 8011e6e:	7bbb      	ldrb	r3, [r7, #14]
 8011e70:	6879      	ldr	r1, [r7, #4]
 8011e72:	0098      	lsls	r0, r3, #2
 8011e74:	4613      	mov	r3, r2
 8011e76:	00db      	lsls	r3, r3, #3
 8011e78:	4413      	add	r3, r2
 8011e7a:	4403      	add	r3, r0
 8011e7c:	440b      	add	r3, r1
 8011e7e:	f103 0220 	add.w	r2, r3, #32
 8011e82:	7993      	ldrb	r3, [r2, #6]
 8011e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e88:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8011e8a:	7bbb      	ldrb	r3, [r7, #14]
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	73bb      	strb	r3, [r7, #14]
 8011e90:	e7e9      	b.n	8011e66 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8011e92:	7bfb      	ldrb	r3, [r7, #15]
 8011e94:	3301      	adds	r3, #1
 8011e96:	73fb      	strb	r3, [r7, #15]
 8011e98:	e7e0      	b.n	8011e5c <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	7a13      	ldrb	r3, [r2, #8]
 8011e9e:	2108      	movs	r1, #8
 8011ea0:	f361 0303 	bfi	r3, r1, #0, #4
 8011ea4:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8011ea6:	687a      	ldr	r2, [r7, #4]
 8011ea8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8011eac:	2108      	movs	r1, #8
 8011eae:	f361 0303 	bfi	r3, r1, #0, #4
 8011eb2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8011ebc:	f36f 0303 	bfc	r3, #0, #4
 8011ec0:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2200      	movs	r2, #0
 8011f04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2200      	movs	r2, #0
 8011f18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8011f1c:	bf00      	nop
 8011f1e:	3714      	adds	r7, #20
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr

08011f28 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	af00      	add	r7, sp, #0
 8011f2c:	2180      	movs	r1, #128	; 0x80
 8011f2e:	4803      	ldr	r0, [pc, #12]	; (8011f3c <_ZN2P95IsSetEv+0x14>)
 8011f30:	f7f0 ffaa 	bl	8002e88 <HAL_GPIO_ReadPin>
 8011f34:	4603      	mov	r3, r0
 8011f36:	4618      	mov	r0, r3
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	bf00      	nop
 8011f3c:	40020800 	.word	0x40020800

08011f40 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f001 f9bb 	bl	80132c4 <_ZN8MAX3421eI3P102P9EC1Ev>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4618      	mov	r0, r3
 8011f52:	f001 f9d3 	bl	80132fc <_ZN15AddressPoolImplILh16EEC1Ev>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8011f5e:	4b05      	ldr	r3, [pc, #20]	; (8011f74 <_ZN3USBC1Ev+0x34>)
 8011f60:	2211      	movs	r2, #17
 8011f62:	701a      	strb	r2, [r3, #0]
        init();
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f000 f807 	bl	8011f78 <_ZN3USB4initEv>
}
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	200053f9 	.word	0x200053f9

08011f78 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2200      	movs	r2, #0
 8011f84:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8011f88:	bf00      	nop
 8011f8a:	370c      	adds	r7, #12
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr

08011f94 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b086      	sub	sp, #24
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	70fb      	strb	r3, [r7, #3]
 8011fa0:	4613      	mov	r3, r2
 8011fa2:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	78fa      	ldrb	r2, [r7, #3]
 8011fa8:	4611      	mov	r1, r2
 8011faa:	4618      	mov	r0, r3
 8011fac:	f001 f9e0 	bl	8013370 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011fb0:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d003      	beq.n	8011fc0 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d101      	bne.n	8011fc4 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	e018      	b.n	8011ff6 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8011fca:	2300      	movs	r3, #0
 8011fcc:	74fb      	strb	r3, [r7, #19]
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	795b      	ldrb	r3, [r3, #5]
 8011fd2:	7cfa      	ldrb	r2, [r7, #19]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d20d      	bcs.n	8011ff4 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	781b      	ldrb	r3, [r3, #0]
 8011fdc:	78ba      	ldrb	r2, [r7, #2]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d101      	bne.n	8011fe6 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	e007      	b.n	8011ff6 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	3303      	adds	r3, #3
 8011fea:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8011fec:	7cfb      	ldrb	r3, [r7, #19]
 8011fee:	3301      	adds	r3, #1
 8011ff0:	74fb      	strb	r3, [r7, #19]
 8011ff2:	e7ec      	b.n	8011fce <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8011ff4:	2300      	movs	r3, #0
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3718      	adds	r7, #24
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}

08011ffe <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8011ffe:	b580      	push	{r7, lr}
 8012000:	b086      	sub	sp, #24
 8012002:	af00      	add	r7, sp, #0
 8012004:	60f8      	str	r0, [r7, #12]
 8012006:	607b      	str	r3, [r7, #4]
 8012008:	460b      	mov	r3, r1
 801200a:	72fb      	strb	r3, [r7, #11]
 801200c:	4613      	mov	r3, r2
 801200e:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8012016:	23d8      	movs	r3, #216	; 0xd8
 8012018:	e015      	b.n	8012046 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	7afa      	ldrb	r2, [r7, #11]
 801201e:	4611      	mov	r1, r2
 8012020:	4618      	mov	r0, r3
 8012022:	f001 f9a5 	bl	8013370 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012026:	6178      	str	r0, [r7, #20]

        if(!p)
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d101      	bne.n	8012032 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 801202e:	23d6      	movs	r3, #214	; 0xd6
 8012030:	e009      	b.n	8012046 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	7afa      	ldrb	r2, [r7, #11]
 8012036:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	687a      	ldr	r2, [r7, #4]
 801203c:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	7aba      	ldrb	r2, [r7, #10]
 8012042:	715a      	strb	r2, [r3, #5]

        return 0;
 8012044:	2300      	movs	r3, #0
}
 8012046:	4618      	mov	r0, r3
 8012048:	3718      	adds	r7, #24
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}

0801204e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 801204e:	b580      	push	{r7, lr}
 8012050:	b086      	sub	sp, #24
 8012052:	af00      	add	r7, sp, #0
 8012054:	60f8      	str	r0, [r7, #12]
 8012056:	607b      	str	r3, [r7, #4]
 8012058:	460b      	mov	r3, r1
 801205a:	72fb      	strb	r3, [r7, #11]
 801205c:	4613      	mov	r3, r2
 801205e:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	7afa      	ldrb	r2, [r7, #11]
 8012064:	4611      	mov	r1, r2
 8012066:	4618      	mov	r0, r3
 8012068:	f001 f982 	bl	8013370 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 801206c:	6178      	str	r0, [r7, #20]

        if(!p)
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d101      	bne.n	8012078 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012074:	23d6      	movs	r3, #214	; 0xd6
 8012076:	e04e      	b.n	8012116 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d101      	bne.n	8012084 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8012080:	23d7      	movs	r3, #215	; 0xd7
 8012082:	e048      	b.n	8012116 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8012084:	7aba      	ldrb	r2, [r7, #10]
 8012086:	7afb      	ldrb	r3, [r7, #11]
 8012088:	4619      	mov	r1, r3
 801208a:	68f8      	ldr	r0, [r7, #12]
 801208c:	f7ff ff82 	bl	8011f94 <_ZN3USB14getEpInfoEntryEhh>
 8012090:	4602      	mov	r2, r0
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d101      	bne.n	80120a2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 801209e:	23db      	movs	r3, #219	; 0xdb
 80120a0:	e039      	b.n	8012116 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	789b      	ldrb	r3, [r3, #2]
 80120a8:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	2b0f      	cmp	r3, #15
 80120b0:	bf28      	it	cs
 80120b2:	230f      	movcs	r3, #15
 80120b4:	b2db      	uxtb	r3, r3
 80120b6:	461a      	mov	r2, r3
 80120b8:	2301      	movs	r3, #1
 80120ba:	4093      	lsls	r3, r2
 80120bc:	b29a      	uxth	r2, r3
 80120be:	6a3b      	ldr	r3, [r7, #32]
 80120c0:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 80120c2:	6a3b      	ldr	r3, [r7, #32]
 80120c4:	881b      	ldrh	r3, [r3, #0]
 80120c6:	3b01      	subs	r3, #1
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	6a3b      	ldr	r3, [r7, #32]
 80120cc:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 80120ce:	7afb      	ldrb	r3, [r7, #11]
 80120d0:	461a      	mov	r2, r3
 80120d2:	21e0      	movs	r1, #224	; 0xe0
 80120d4:	68f8      	ldr	r0, [r7, #12]
 80120d6:	f7ef ff21 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 80120da:	21d8      	movs	r1, #216	; 0xd8
 80120dc:	68f8      	ldr	r0, [r7, #12]
 80120de:	f7ef ff6f 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80120e2:	4603      	mov	r3, r0
 80120e4:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	799b      	ldrb	r3, [r3, #6]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d009      	beq.n	8012102 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 80120f4:	7cfb      	ldrb	r3, [r7, #19]
 80120f6:	4313      	orrs	r3, r2
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	f043 0302 	orr.w	r3, r3, #2
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	e003      	b.n	801210a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8012102:	7cfb      	ldrb	r3, [r7, #19]
 8012104:	f023 0306 	bic.w	r3, r3, #6
 8012108:	b2db      	uxtb	r3, r3
 801210a:	461a      	mov	r2, r3
 801210c:	21d8      	movs	r1, #216	; 0xd8
 801210e:	68f8      	ldr	r0, [r7, #12]
 8012110:	f7ef ff04 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8012114:	2300      	movs	r3, #0
}
 8012116:	4618      	mov	r0, r3
 8012118:	3718      	adds	r7, #24
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 801211e:	b590      	push	{r4, r7, lr}
 8012120:	b08b      	sub	sp, #44	; 0x2c
 8012122:	af02      	add	r7, sp, #8
 8012124:	6078      	str	r0, [r7, #4]
 8012126:	4608      	mov	r0, r1
 8012128:	4611      	mov	r1, r2
 801212a:	461a      	mov	r2, r3
 801212c:	4603      	mov	r3, r0
 801212e:	70fb      	strb	r3, [r7, #3]
 8012130:	460b      	mov	r3, r1
 8012132:	70bb      	strb	r3, [r7, #2]
 8012134:	4613      	mov	r3, r2
 8012136:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8012138:	2300      	movs	r3, #0
 801213a:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 801213c:	2300      	movs	r3, #0
 801213e:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8012140:	2300      	movs	r3, #0
 8012142:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8012144:	f107 000c 	add.w	r0, r7, #12
 8012148:	78ba      	ldrb	r2, [r7, #2]
 801214a:	78f9      	ldrb	r1, [r7, #3]
 801214c:	f107 030a 	add.w	r3, r7, #10
 8012150:	9300      	str	r3, [sp, #0]
 8012152:	4603      	mov	r3, r0
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f7ff ff7a 	bl	801204e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 801215a:	4603      	mov	r3, r0
 801215c:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 801215e:	7ffb      	ldrb	r3, [r7, #31]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d001      	beq.n	8012168 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8012164:	7ffb      	ldrb	r3, [r7, #31]
 8012166:	e0ae      	b.n	80122c6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8012168:	787b      	ldrb	r3, [r7, #1]
 801216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801216e:	2b00      	cmp	r3, #0
 8012170:	bfcc      	ite	gt
 8012172:	2301      	movgt	r3, #1
 8012174:	2300      	movle	r3, #0
 8012176:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8012178:	787b      	ldrb	r3, [r7, #1]
 801217a:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 801217c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8012180:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8012182:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012186:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8012188:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801218c:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 801218e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012190:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8012192:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012196:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8012198:	f107 0310 	add.w	r3, r7, #16
 801219c:	2208      	movs	r2, #8
 801219e:	2120      	movs	r1, #32
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f001 f90b 	bl	80133bc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 80121a6:	897b      	ldrh	r3, [r7, #10]
 80121a8:	78ba      	ldrb	r2, [r7, #2]
 80121aa:	2110      	movs	r1, #16
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f000 faf2 	bl	8012796 <_ZN3USB11dispatchPktEhht>
 80121b2:	4603      	mov	r3, r0
 80121b4:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 80121b6:	7ffb      	ldrb	r3, [r7, #31]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d001      	beq.n	80121c0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 80121bc:	7ffb      	ldrb	r3, [r7, #31]
 80121be:	e082      	b.n	80122c6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 80121c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d072      	beq.n	80122ac <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 80121c6:	7efb      	ldrb	r3, [r7, #27]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d057      	beq.n	801227c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 80121cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80121d0:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 80121d2:	68fa      	ldr	r2, [r7, #12]
 80121d4:	7893      	ldrb	r3, [r2, #2]
 80121d6:	f043 0302 	orr.w	r3, r3, #2
 80121da:	7093      	strb	r3, [r2, #2]

                        while(left) {
 80121dc:	8bbb      	ldrh	r3, [r7, #28]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d05f      	beq.n	80122a2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 80121e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80121e6:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 80121e8:	68f9      	ldr	r1, [r7, #12]
 80121ea:	897a      	ldrh	r2, [r7, #10]
 80121ec:	f107 0008 	add.w	r0, r7, #8
 80121f0:	2300      	movs	r3, #0
 80121f2:	9301      	str	r3, [sp, #4]
 80121f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121f6:	9300      	str	r3, [sp, #0]
 80121f8:	4603      	mov	r3, r0
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 f8a6 	bl	801234c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8012200:	4603      	mov	r3, r0
 8012202:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8012204:	7ffb      	ldrb	r3, [r7, #31]
 8012206:	2b06      	cmp	r3, #6
 8012208:	d114      	bne.n	8012234 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 801220a:	21f8      	movs	r1, #248	; 0xf8
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7ef fed7 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012212:	4603      	mov	r3, r0
 8012214:	f003 0320 	and.w	r3, r3, #32
 8012218:	2b00      	cmp	r3, #0
 801221a:	bf0c      	ite	eq
 801221c:	2301      	moveq	r3, #1
 801221e:	2300      	movne	r3, #0
 8012220:	b2db      	uxtb	r3, r3
 8012222:	68fa      	ldr	r2, [r7, #12]
 8012224:	f003 0301 	and.w	r3, r3, #1
 8012228:	b2d9      	uxtb	r1, r3
 801222a:	7893      	ldrb	r3, [r2, #2]
 801222c:	f361 0341 	bfi	r3, r1, #1, #1
 8012230:	7093      	strb	r3, [r2, #2]
 8012232:	e7d3      	b.n	80121dc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8012234:	7ffb      	ldrb	r3, [r7, #31]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d001      	beq.n	801223e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 801223a:	7ffb      	ldrb	r3, [r7, #31]
 801223c:	e043      	b.n	80122c6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 801223e:	7ffb      	ldrb	r3, [r7, #31]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d111      	bne.n	8012268 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8012244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00e      	beq.n	8012268 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 801224a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	681c      	ldr	r4, [r3, #0]
 8012250:	8939      	ldrh	r1, [r7, #8]
 8012252:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012256:	8bbb      	ldrh	r3, [r7, #28]
 8012258:	1ad3      	subs	r3, r2, r3
 801225a:	b29b      	uxth	r3, r3
 801225c:	833b      	strh	r3, [r7, #24]
 801225e:	f107 0318 	add.w	r3, r7, #24
 8012262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012264:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012266:	47a0      	blx	r4

                                left -= read;
 8012268:	893b      	ldrh	r3, [r7, #8]
 801226a:	8bba      	ldrh	r2, [r7, #28]
 801226c:	1ad3      	subs	r3, r2, r3
 801226e:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8012270:	893b      	ldrh	r3, [r7, #8]
 8012272:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012276:	429a      	cmp	r2, r3
 8012278:	d812      	bhi.n	80122a0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 801227a:	e7af      	b.n	80121dc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 801227c:	68fa      	ldr	r2, [r7, #12]
 801227e:	7893      	ldrb	r3, [r2, #2]
 8012280:	f043 0301 	orr.w	r3, r3, #1
 8012284:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8012286:	68f9      	ldr	r1, [r7, #12]
 8012288:	897a      	ldrh	r2, [r7, #10]
 801228a:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 801228e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012290:	9300      	str	r3, [sp, #0]
 8012292:	4603      	mov	r3, r0
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f000 f953 	bl	8012540 <_ZN3USB11OutTransferEP6EpInfottPh>
 801229a:	4603      	mov	r3, r0
 801229c:	77fb      	strb	r3, [r7, #31]
 801229e:	e000      	b.n	80122a2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 80122a0:	bf00      	nop
                }
                if(rcode) //return error
 80122a2:	7ffb      	ldrb	r3, [r7, #31]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d001      	beq.n	80122ac <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 80122a8:	7ffb      	ldrb	r3, [r7, #31]
 80122aa:	e00c      	b.n	80122c6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 80122ac:	7efb      	ldrb	r3, [r7, #27]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d001      	beq.n	80122b6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 80122b2:	21a0      	movs	r1, #160	; 0xa0
 80122b4:	e000      	b.n	80122b8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 80122b6:	2180      	movs	r1, #128	; 0x80
 80122b8:	897b      	ldrh	r3, [r7, #10]
 80122ba:	78ba      	ldrb	r2, [r7, #2]
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f000 fa6a 	bl	8012796 <_ZN3USB11dispatchPktEhht>
 80122c2:	4603      	mov	r3, r0
 80122c4:	bf00      	nop
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	3724      	adds	r7, #36	; 0x24
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd90      	pop	{r4, r7, pc}

080122ce <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 80122ce:	b580      	push	{r7, lr}
 80122d0:	b08a      	sub	sp, #40	; 0x28
 80122d2:	af02      	add	r7, sp, #8
 80122d4:	60f8      	str	r0, [r7, #12]
 80122d6:	607b      	str	r3, [r7, #4]
 80122d8:	460b      	mov	r3, r1
 80122da:	72fb      	strb	r3, [r7, #11]
 80122dc:	4613      	mov	r3, r2
 80122de:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 80122e0:	2300      	movs	r3, #0
 80122e2:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 80122e4:	2300      	movs	r3, #0
 80122e6:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80122e8:	f107 0018 	add.w	r0, r7, #24
 80122ec:	7aba      	ldrb	r2, [r7, #10]
 80122ee:	7af9      	ldrb	r1, [r7, #11]
 80122f0:	f107 0316 	add.w	r3, r7, #22
 80122f4:	9300      	str	r3, [sp, #0]
 80122f6:	4603      	mov	r3, r0
 80122f8:	68f8      	ldr	r0, [r7, #12]
 80122fa:	f7ff fea8 	bl	801204e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80122fe:	4603      	mov	r3, r0
 8012300:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8012302:	7ffb      	ldrb	r3, [r7, #31]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d010      	beq.n	801232a <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8012308:	7ffb      	ldrb	r3, [r7, #31]
 801230a:	2181      	movs	r1, #129	; 0x81
 801230c:	4618      	mov	r0, r3
 801230e:	f001 f883 	bl	8013418 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8012312:	7afb      	ldrb	r3, [r7, #11]
 8012314:	2181      	movs	r1, #129	; 0x81
 8012316:	4618      	mov	r0, r3
 8012318:	f001 f87e 	bl	8013418 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 801231c:	7abb      	ldrb	r3, [r7, #10]
 801231e:	2181      	movs	r1, #129	; 0x81
 8012320:	4618      	mov	r0, r3
 8012322:	f001 f879 	bl	8013418 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 8012326:	7ffb      	ldrb	r3, [r7, #31]
 8012328:	e00c      	b.n	8012344 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 801232a:	69b9      	ldr	r1, [r7, #24]
 801232c:	8afa      	ldrh	r2, [r7, #22]
 801232e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012332:	9301      	str	r3, [sp, #4]
 8012334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012336:	9300      	str	r3, [sp, #0]
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	68f8      	ldr	r0, [r7, #12]
 801233c:	f000 f806 	bl	801234c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8012340:	4603      	mov	r3, r0
 8012342:	bf00      	nop
}
 8012344:	4618      	mov	r0, r3
 8012346:	3720      	adds	r7, #32
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}

0801234c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 801234c:	b580      	push	{r7, lr}
 801234e:	b086      	sub	sp, #24
 8012350:	af00      	add	r7, sp, #0
 8012352:	60f8      	str	r0, [r7, #12]
 8012354:	60b9      	str	r1, [r7, #8]
 8012356:	603b      	str	r3, [r7, #0]
 8012358:	4613      	mov	r3, r2
 801235a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 801235c:	2300      	movs	r3, #0
 801235e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	881b      	ldrh	r3, [r3, #0]
 8012364:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	785b      	ldrb	r3, [r3, #1]
 801236a:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	2200      	movs	r2, #0
 8012370:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	789b      	ldrb	r3, [r3, #2]
 8012376:	f003 0302 	and.w	r3, r3, #2
 801237a:	b2db      	uxtb	r3, r3
 801237c:	2b00      	cmp	r3, #0
 801237e:	d001      	beq.n	8012384 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8012380:	2320      	movs	r3, #32
 8012382:	e000      	b.n	8012386 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8012384:	2310      	movs	r3, #16
 8012386:	461a      	mov	r2, r3
 8012388:	21e8      	movs	r1, #232	; 0xe8
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	f7ef fdc6 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	781a      	ldrb	r2, [r3, #0]
 8012394:	88fb      	ldrh	r3, [r7, #6]
 8012396:	2100      	movs	r1, #0
 8012398:	68f8      	ldr	r0, [r7, #12]
 801239a:	f000 f9fc 	bl	8012796 <_ZN3USB11dispatchPktEhht>
 801239e:	4603      	mov	r3, r0
 80123a0:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 80123a2:	7dfb      	ldrb	r3, [r7, #23]
 80123a4:	2b06      	cmp	r3, #6
 80123a6:	d123      	bne.n	80123f0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 80123a8:	21f8      	movs	r1, #248	; 0xf8
 80123aa:	68f8      	ldr	r0, [r7, #12]
 80123ac:	f7ef fe08 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80123b0:	4603      	mov	r3, r0
 80123b2:	f003 0310 	and.w	r3, r3, #16
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	bf0c      	ite	eq
 80123ba:	2301      	moveq	r3, #1
 80123bc:	2300      	movne	r3, #0
 80123be:	b2db      	uxtb	r3, r3
 80123c0:	f003 0301 	and.w	r3, r3, #1
 80123c4:	b2d9      	uxtb	r1, r3
 80123c6:	68ba      	ldr	r2, [r7, #8]
 80123c8:	7893      	ldrb	r3, [r2, #2]
 80123ca:	f361 0341 	bfi	r3, r1, #1, #1
 80123ce:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	789b      	ldrb	r3, [r3, #2]
 80123d4:	f003 0302 	and.w	r3, r3, #2
 80123d8:	b2db      	uxtb	r3, r3
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d001      	beq.n	80123e2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 80123de:	2320      	movs	r3, #32
 80123e0:	e000      	b.n	80123e4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 80123e2:	2310      	movs	r3, #16
 80123e4:	461a      	mov	r2, r3
 80123e6:	21e8      	movs	r1, #232	; 0xe8
 80123e8:	68f8      	ldr	r0, [r7, #12]
 80123ea:	f7ef fd97 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 80123ee:	e06e      	b.n	80124ce <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 80123f0:	7dfb      	ldrb	r3, [r7, #23]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d16c      	bne.n	80124d0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 80123f6:	21c8      	movs	r1, #200	; 0xc8
 80123f8:	68f8      	ldr	r0, [r7, #12]
 80123fa:	f7ef fde1 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80123fe:	4603      	mov	r3, r0
 8012400:	f003 0304 	and.w	r3, r3, #4
 8012404:	2b00      	cmp	r3, #0
 8012406:	bf0c      	ite	eq
 8012408:	2301      	moveq	r3, #1
 801240a:	2300      	movne	r3, #0
 801240c:	b2db      	uxtb	r3, r3
 801240e:	2b00      	cmp	r3, #0
 8012410:	d002      	beq.n	8012418 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8012412:	23f0      	movs	r3, #240	; 0xf0
 8012414:	75fb      	strb	r3, [r7, #23]
                        break;
 8012416:	e05c      	b.n	80124d2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8012418:	2130      	movs	r1, #48	; 0x30
 801241a:	68f8      	ldr	r0, [r7, #12]
 801241c:	f7ef fdd0 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012420:	4603      	mov	r3, r0
 8012422:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8012424:	7dba      	ldrb	r2, [r7, #22]
 8012426:	8a7b      	ldrh	r3, [r7, #18]
 8012428:	429a      	cmp	r2, r3
 801242a:	dd01      	ble.n	8012430 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 801242c:	8a7b      	ldrh	r3, [r7, #18]
 801242e:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012436:	b29b      	uxth	r3, r3
 8012438:	8a7a      	ldrh	r2, [r7, #18]
 801243a:	1ad3      	subs	r3, r2, r3
 801243c:	b29b      	uxth	r3, r3
 801243e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8012440:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012444:	2b00      	cmp	r3, #0
 8012446:	da01      	bge.n	801244c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8012448:	2300      	movs	r3, #0
 801244a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 801244c:	7dba      	ldrb	r2, [r7, #22]
 801244e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012452:	4293      	cmp	r3, r2
 8012454:	bfa8      	it	ge
 8012456:	4613      	movge	r3, r2
 8012458:	b2da      	uxtb	r2, r3
 801245a:	6a3b      	ldr	r3, [r7, #32]
 801245c:	2108      	movs	r1, #8
 801245e:	68f8      	ldr	r0, [r7, #12]
 8012460:	f000 ffe6 	bl	8013430 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8012464:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8012466:	2204      	movs	r2, #4
 8012468:	21c8      	movs	r1, #200	; 0xc8
 801246a:	68f8      	ldr	r0, [r7, #12]
 801246c:	f7ef fd56 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	881a      	ldrh	r2, [r3, #0]
 8012474:	7dbb      	ldrb	r3, [r7, #22]
 8012476:	b29b      	uxth	r3, r3
 8012478:	4413      	add	r3, r2
 801247a:	b29a      	uxth	r2, r3
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8012480:	7dba      	ldrb	r2, [r7, #22]
 8012482:	7c7b      	ldrb	r3, [r7, #17]
 8012484:	429a      	cmp	r2, r3
 8012486:	d304      	bcc.n	8012492 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	881b      	ldrh	r3, [r3, #0]
 801248c:	8a7a      	ldrh	r2, [r7, #18]
 801248e:	429a      	cmp	r2, r3
 8012490:	d813      	bhi.n	80124ba <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8012492:	21f8      	movs	r1, #248	; 0xf8
 8012494:	68f8      	ldr	r0, [r7, #12]
 8012496:	f7ef fd93 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801249a:	4603      	mov	r3, r0
 801249c:	f003 0310 	and.w	r3, r3, #16
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d001      	beq.n	80124a8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 80124a4:	2101      	movs	r1, #1
 80124a6:	e000      	b.n	80124aa <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 80124a8:	2100      	movs	r1, #0
 80124aa:	68ba      	ldr	r2, [r7, #8]
 80124ac:	7893      	ldrb	r3, [r2, #2]
 80124ae:	f361 0341 	bfi	r3, r1, #1, #1
 80124b2:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 80124b4:	2300      	movs	r3, #0
 80124b6:	75fb      	strb	r3, [r7, #23]
                        break;
 80124b8:	e00b      	b.n	80124d2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 80124ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f43f af66 	beq.w	8012390 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 80124c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7f0 fa43 	bl	8002954 <HAL_Delay>
        } //while( 1 )
 80124ce:	e75f      	b.n	8012390 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 80124d0:	bf00      	nop
        return ( rcode);
 80124d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3718      	adds	r7, #24
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 80124dc:	b580      	push	{r7, lr}
 80124de:	b088      	sub	sp, #32
 80124e0:	af02      	add	r7, sp, #8
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	4608      	mov	r0, r1
 80124e6:	4611      	mov	r1, r2
 80124e8:	461a      	mov	r2, r3
 80124ea:	4603      	mov	r3, r0
 80124ec:	70fb      	strb	r3, [r7, #3]
 80124ee:	460b      	mov	r3, r1
 80124f0:	70bb      	strb	r3, [r7, #2]
 80124f2:	4613      	mov	r3, r2
 80124f4:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 80124f6:	2300      	movs	r3, #0
 80124f8:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 80124fa:	2300      	movs	r3, #0
 80124fc:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80124fe:	f107 0010 	add.w	r0, r7, #16
 8012502:	78ba      	ldrb	r2, [r7, #2]
 8012504:	78f9      	ldrb	r1, [r7, #3]
 8012506:	f107 030e 	add.w	r3, r7, #14
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	4603      	mov	r3, r0
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f7ff fd9d 	bl	801204e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8012514:	4603      	mov	r3, r0
 8012516:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8012518:	7dfb      	ldrb	r3, [r7, #23]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d001      	beq.n	8012522 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 801251e:	7dfb      	ldrb	r3, [r7, #23]
 8012520:	e00a      	b.n	8012538 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8012522:	6939      	ldr	r1, [r7, #16]
 8012524:	89fa      	ldrh	r2, [r7, #14]
 8012526:	8838      	ldrh	r0, [r7, #0]
 8012528:	6a3b      	ldr	r3, [r7, #32]
 801252a:	9300      	str	r3, [sp, #0]
 801252c:	4603      	mov	r3, r0
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 f806 	bl	8012540 <_ZN3USB11OutTransferEP6EpInfottPh>
 8012534:	4603      	mov	r3, r0
 8012536:	bf00      	nop
}
 8012538:	4618      	mov	r0, r3
 801253a:	3718      	adds	r7, #24
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8012540:	b580      	push	{r7, lr}
 8012542:	b08a      	sub	sp, #40	; 0x28
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	4611      	mov	r1, r2
 801254c:	461a      	mov	r2, r3
 801254e:	460b      	mov	r3, r1
 8012550:	80fb      	strh	r3, [r7, #6]
 8012552:	4613      	mov	r3, r2
 8012554:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8012556:	2300      	movs	r3, #0
 8012558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 801255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255e:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8012560:	88bb      	ldrh	r3, [r7, #4]
 8012562:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	785b      	ldrb	r3, [r3, #1]
 8012568:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 801256a:	7efb      	ldrb	r3, [r7, #27]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d002      	beq.n	8012576 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 8012570:	7efb      	ldrb	r3, [r7, #27]
 8012572:	2b40      	cmp	r3, #64	; 0x40
 8012574:	d901      	bls.n	801257a <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8012576:	23da      	movs	r3, #218	; 0xda
 8012578:	e109      	b.n	801278e <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 801257a:	f7f0 f9df 	bl	800293c <HAL_GetTick>
 801257e:	4603      	mov	r3, r0
 8012580:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8012584:	3308      	adds	r3, #8
 8012586:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	789b      	ldrb	r3, [r3, #2]
 801258c:	f003 0301 	and.w	r3, r3, #1
 8012590:	b2db      	uxtb	r3, r3
 8012592:	2b00      	cmp	r3, #0
 8012594:	d001      	beq.n	801259a <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 8012596:	2380      	movs	r3, #128	; 0x80
 8012598:	e000      	b.n	801259c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 801259a:	2340      	movs	r3, #64	; 0x40
 801259c:	461a      	mov	r2, r3
 801259e:	21e8      	movs	r1, #232	; 0xe8
 80125a0:	68f8      	ldr	r0, [r7, #12]
 80125a2:	f7ef fcbb 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 80125a6:	8bbb      	ldrh	r3, [r7, #28]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	f000 80da 	beq.w	8012762 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 80125ae:	2300      	movs	r3, #0
 80125b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 80125b4:	2300      	movs	r3, #0
 80125b6:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 80125b8:	7efb      	ldrb	r3, [r7, #27]
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	8bba      	ldrh	r2, [r7, #28]
 80125be:	4293      	cmp	r3, r2
 80125c0:	bf28      	it	cs
 80125c2:	4613      	movcs	r3, r2
 80125c4:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 80125c6:	8a7b      	ldrh	r3, [r7, #18]
 80125c8:	b2da      	uxtb	r2, r3
 80125ca:	6a3b      	ldr	r3, [r7, #32]
 80125cc:	2110      	movs	r1, #16
 80125ce:	68f8      	ldr	r0, [r7, #12]
 80125d0:	f000 fef4 	bl	80133bc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 80125d4:	8a7b      	ldrh	r3, [r7, #18]
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	461a      	mov	r2, r3
 80125da:	2138      	movs	r1, #56	; 0x38
 80125dc:	68f8      	ldr	r0, [r7, #12]
 80125de:	f7ef fc9d 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	f043 0320 	orr.w	r3, r3, #32
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	461a      	mov	r2, r3
 80125ee:	21f0      	movs	r1, #240	; 0xf0
 80125f0:	68f8      	ldr	r0, [r7, #12]
 80125f2:	f7ef fc93 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 80125f6:	21c8      	movs	r1, #200	; 0xc8
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	f7ef fce1 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80125fe:	4603      	mov	r3, r0
 8012600:	b25b      	sxtb	r3, r3
 8012602:	43db      	mvns	r3, r3
 8012604:	b2db      	uxtb	r3, r3
 8012606:	09db      	lsrs	r3, r3, #7
 8012608:	b2db      	uxtb	r3, r3
 801260a:	2b00      	cmp	r3, #0
 801260c:	d000      	beq.n	8012610 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 801260e:	e7f2      	b.n	80125f6 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8012610:	2280      	movs	r2, #128	; 0x80
 8012612:	21c8      	movs	r1, #200	; 0xc8
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	f7ef fc81 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 801261a:	21f8      	movs	r1, #248	; 0xf8
 801261c:	68f8      	ldr	r0, [r7, #12]
 801261e:	f7ef fccf 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012622:	4603      	mov	r3, r0
 8012624:	f003 030f 	and.w	r3, r3, #15
 8012628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801262c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012630:	2b00      	cmp	r3, #0
 8012632:	d008      	beq.n	8012646 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8012634:	f7f0 f982 	bl	800293c <HAL_GetTick>
 8012638:	4602      	mov	r2, r0
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	1ad3      	subs	r3, r2, r3
 801263e:	2b00      	cmp	r3, #0
 8012640:	da01      	bge.n	8012646 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8012642:	2301      	movs	r3, #1
 8012644:	e000      	b.n	8012648 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8012646:	2300      	movs	r3, #0
 8012648:	2b00      	cmp	r3, #0
 801264a:	f000 8081 	beq.w	8012750 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801264e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012652:	2b0e      	cmp	r3, #14
 8012654:	d012      	beq.n	801267c <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8012656:	2b0e      	cmp	r3, #14
 8012658:	f300 8085 	bgt.w	8012766 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 801265c:	2b04      	cmp	r3, #4
 801265e:	d002      	beq.n	8012666 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 8012660:	2b06      	cmp	r3, #6
 8012662:	d015      	beq.n	8012690 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8012664:	e07f      	b.n	8012766 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8012666:	8bfb      	ldrh	r3, [r7, #30]
 8012668:	3301      	adds	r3, #1
 801266a:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 801266c:	88fb      	ldrh	r3, [r7, #6]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d032      	beq.n	80126d8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 8012672:	8bfa      	ldrh	r2, [r7, #30]
 8012674:	88fb      	ldrh	r3, [r7, #6]
 8012676:	429a      	cmp	r2, r3
 8012678:	d12e      	bne.n	80126d8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 801267a:	e075      	b.n	8012768 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 801267c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012680:	3301      	adds	r3, #1
 8012682:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8012686:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801268a:	2b03      	cmp	r3, #3
 801268c:	d126      	bne.n	80126dc <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 801268e:	e06b      	b.n	8012768 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8012690:	21f8      	movs	r1, #248	; 0xf8
 8012692:	68f8      	ldr	r0, [r7, #12]
 8012694:	f7ef fc94 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012698:	4603      	mov	r3, r0
 801269a:	f003 0320 	and.w	r3, r3, #32
 801269e:	2b00      	cmp	r3, #0
 80126a0:	bf0c      	ite	eq
 80126a2:	2301      	moveq	r3, #1
 80126a4:	2300      	movne	r3, #0
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	f003 0301 	and.w	r3, r3, #1
 80126ac:	b2d9      	uxtb	r1, r3
 80126ae:	68ba      	ldr	r2, [r7, #8]
 80126b0:	7893      	ldrb	r3, [r2, #2]
 80126b2:	f361 0300 	bfi	r3, r1, #0, #1
 80126b6:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	789b      	ldrb	r3, [r3, #2]
 80126bc:	f003 0301 	and.w	r3, r3, #1
 80126c0:	b2db      	uxtb	r3, r3
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d001      	beq.n	80126ca <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 80126c6:	2380      	movs	r3, #128	; 0x80
 80126c8:	e000      	b.n	80126cc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 80126ca:	2340      	movs	r3, #64	; 0x40
 80126cc:	461a      	mov	r2, r3
 80126ce:	21e8      	movs	r1, #232	; 0xe8
 80126d0:	68f8      	ldr	r0, [r7, #12]
 80126d2:	f7ef fc23 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 80126d6:	e002      	b.n	80126de <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80126d8:	bf00      	nop
 80126da:	e000      	b.n	80126de <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80126dc:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 80126de:	2200      	movs	r2, #0
 80126e0:	2138      	movs	r1, #56	; 0x38
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	f7ef fc1a 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 80126e8:	6a3b      	ldr	r3, [r7, #32]
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	461a      	mov	r2, r3
 80126ee:	2110      	movs	r1, #16
 80126f0:	68f8      	ldr	r0, [r7, #12]
 80126f2:	f7ef fc13 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 80126f6:	8a7b      	ldrh	r3, [r7, #18]
 80126f8:	b2db      	uxtb	r3, r3
 80126fa:	461a      	mov	r2, r3
 80126fc:	2138      	movs	r1, #56	; 0x38
 80126fe:	68f8      	ldr	r0, [r7, #12]
 8012700:	f7ef fc0c 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	f043 0320 	orr.w	r3, r3, #32
 801270c:	b2db      	uxtb	r3, r3
 801270e:	461a      	mov	r2, r3
 8012710:	21f0      	movs	r1, #240	; 0xf0
 8012712:	68f8      	ldr	r0, [r7, #12]
 8012714:	f7ef fc02 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8012718:	21c8      	movs	r1, #200	; 0xc8
 801271a:	68f8      	ldr	r0, [r7, #12]
 801271c:	f7ef fc50 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012720:	4603      	mov	r3, r0
 8012722:	b25b      	sxtb	r3, r3
 8012724:	43db      	mvns	r3, r3
 8012726:	b2db      	uxtb	r3, r3
 8012728:	09db      	lsrs	r3, r3, #7
 801272a:	b2db      	uxtb	r3, r3
 801272c:	2b00      	cmp	r3, #0
 801272e:	d000      	beq.n	8012732 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8012730:	e7f2      	b.n	8012718 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8012732:	2280      	movs	r2, #128	; 0x80
 8012734:	21c8      	movs	r1, #200	; 0xc8
 8012736:	68f8      	ldr	r0, [r7, #12]
 8012738:	f7ef fbf0 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 801273c:	21f8      	movs	r1, #248	; 0xf8
 801273e:	68f8      	ldr	r0, [r7, #12]
 8012740:	f7ef fc3e 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012744:	4603      	mov	r3, r0
 8012746:	f003 030f 	and.w	r3, r3, #15
 801274a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801274e:	e76d      	b.n	801262c <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 8012750:	8bba      	ldrh	r2, [r7, #28]
 8012752:	8a7b      	ldrh	r3, [r7, #18]
 8012754:	1ad3      	subs	r3, r2, r3
 8012756:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8012758:	8a7b      	ldrh	r3, [r7, #18]
 801275a:	6a3a      	ldr	r2, [r7, #32]
 801275c:	4413      	add	r3, r2
 801275e:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 8012760:	e721      	b.n	80125a6 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 8012762:	bf00      	nop
 8012764:	e000      	b.n	8012768 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8012766:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8012768:	21f8      	movs	r1, #248	; 0xf8
 801276a:	68f8      	ldr	r0, [r7, #12]
 801276c:	f7ef fc28 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012770:	4603      	mov	r3, r0
 8012772:	f003 0320 	and.w	r3, r3, #32
 8012776:	2b00      	cmp	r3, #0
 8012778:	d001      	beq.n	801277e <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 801277a:	2101      	movs	r1, #1
 801277c:	e000      	b.n	8012780 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 801277e:	2100      	movs	r1, #0
 8012780:	68ba      	ldr	r2, [r7, #8]
 8012782:	7893      	ldrb	r3, [r2, #2]
 8012784:	f361 0300 	bfi	r3, r1, #0, #1
 8012788:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 801278a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801278e:	4618      	mov	r0, r3
 8012790:	3728      	adds	r7, #40	; 0x28
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}

08012796 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 8012796:	b580      	push	{r7, lr}
 8012798:	b086      	sub	sp, #24
 801279a:	af00      	add	r7, sp, #0
 801279c:	6078      	str	r0, [r7, #4]
 801279e:	4608      	mov	r0, r1
 80127a0:	4611      	mov	r1, r2
 80127a2:	461a      	mov	r2, r3
 80127a4:	4603      	mov	r3, r0
 80127a6:	70fb      	strb	r3, [r7, #3]
 80127a8:	460b      	mov	r3, r1
 80127aa:	70bb      	strb	r3, [r7, #2]
 80127ac:	4613      	mov	r3, r2
 80127ae:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80127b0:	f7f0 f8c4 	bl	800293c <HAL_GetTick>
 80127b4:	4603      	mov	r3, r0
 80127b6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80127ba:	3308      	adds	r3, #8
 80127bc:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 80127be:	2300      	movs	r3, #0
 80127c0:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 80127c2:	2300      	movs	r3, #0
 80127c4:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 80127c6:	2300      	movs	r3, #0
 80127c8:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80127ca:	f7f0 f8b7 	bl	800293c <HAL_GetTick>
 80127ce:	4602      	mov	r2, r0
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	1ad3      	subs	r3, r2, r3
 80127d4:	0fdb      	lsrs	r3, r3, #31
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d04c      	beq.n	8012876 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 80127dc:	78fa      	ldrb	r2, [r7, #3]
 80127de:	78bb      	ldrb	r3, [r7, #2]
 80127e0:	4313      	orrs	r3, r2
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	461a      	mov	r2, r3
 80127e6:	21f0      	movs	r1, #240	; 0xf0
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	f7ef fb97 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 80127ee:	23ff      	movs	r3, #255	; 0xff
 80127f0:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 80127f2:	f7f0 f8a3 	bl	800293c <HAL_GetTick>
 80127f6:	4602      	mov	r2, r0
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	1ad3      	subs	r3, r2, r3
 80127fc:	0fdb      	lsrs	r3, r3, #31
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	2b00      	cmp	r3, #0
 8012802:	d010      	beq.n	8012826 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 8012804:	21c8      	movs	r1, #200	; 0xc8
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f7ef fbda 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801280c:	4603      	mov	r3, r0
 801280e:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 8012810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012814:	2b00      	cmp	r3, #0
 8012816:	daec      	bge.n	80127f2 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 8012818:	2280      	movs	r2, #128	; 0x80
 801281a:	21c8      	movs	r1, #200	; 0xc8
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f7ef fb7d 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 8012822:	2300      	movs	r3, #0
 8012824:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 8012826:	21f8      	movs	r1, #248	; 0xf8
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f7ef fbc9 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801282e:	4603      	mov	r3, r0
 8012830:	f003 030f 	and.w	r3, r3, #15
 8012834:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8012836:	7dfb      	ldrb	r3, [r7, #23]
 8012838:	2b04      	cmp	r3, #4
 801283a:	d002      	beq.n	8012842 <_ZN3USB11dispatchPktEhht+0xac>
 801283c:	2b0e      	cmp	r3, #14
 801283e:	d00c      	beq.n	801285a <_ZN3USB11dispatchPktEhht+0xc4>
 8012840:	e013      	b.n	801286a <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8012842:	8abb      	ldrh	r3, [r7, #20]
 8012844:	3301      	adds	r3, #1
 8012846:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8012848:	883b      	ldrh	r3, [r7, #0]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d00f      	beq.n	801286e <_ZN3USB11dispatchPktEhht+0xd8>
 801284e:	8aba      	ldrh	r2, [r7, #20]
 8012850:	883b      	ldrh	r3, [r7, #0]
 8012852:	429a      	cmp	r2, r3
 8012854:	d10b      	bne.n	801286e <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8012856:	7dfb      	ldrb	r3, [r7, #23]
 8012858:	e00e      	b.n	8012878 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 801285a:	7dbb      	ldrb	r3, [r7, #22]
 801285c:	3301      	adds	r3, #1
 801285e:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 8012860:	7dbb      	ldrb	r3, [r7, #22]
 8012862:	2b03      	cmp	r3, #3
 8012864:	d105      	bne.n	8012872 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8012866:	7dfb      	ldrb	r3, [r7, #23]
 8012868:	e006      	b.n	8012878 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 801286a:	7dfb      	ldrb	r3, [r7, #23]
 801286c:	e004      	b.n	8012878 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 801286e:	bf00      	nop
 8012870:	e7ab      	b.n	80127ca <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 8012872:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8012874:	e7a9      	b.n	80127ca <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8012876:	7dfb      	ldrb	r3, [r7, #23]
}
 8012878:	4618      	mov	r0, r3
 801287a:	3718      	adds	r7, #24
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b084      	sub	sp, #16
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8012888:	2300      	movs	r3, #0
 801288a:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 801288c:	6878      	ldr	r0, [r7, #4]
 801288e:	f000 fdfd 	bl	801348c <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f000 fe12 	bl	80134bc <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 8012898:	4603      	mov	r3, r0
 801289a:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 801289c:	7b3b      	ldrb	r3, [r7, #12]
 801289e:	2b03      	cmp	r3, #3
 80128a0:	d82e      	bhi.n	8012900 <_ZN3USB4TaskEv+0x80>
 80128a2:	a201      	add	r2, pc, #4	; (adr r2, 80128a8 <_ZN3USB4TaskEv+0x28>)
 80128a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128a8:	080128c5 	.word	0x080128c5
 80128ac:	080128b9 	.word	0x080128b9
 80128b0:	080128e1 	.word	0x080128e1
 80128b4:	080128dd 	.word	0x080128dd
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 80128b8:	4bbf      	ldr	r3, [pc, #764]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 80128ba:	2213      	movs	r2, #19
 80128bc:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80128be:	2300      	movs	r3, #0
 80128c0:	73fb      	strb	r3, [r7, #15]
                        break;
 80128c2:	e01d      	b.n	8012900 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 80128c4:	4bbc      	ldr	r3, [pc, #752]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80128cc:	2b10      	cmp	r3, #16
 80128ce:	d002      	beq.n	80128d6 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 80128d0:	4bb9      	ldr	r3, [pc, #740]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 80128d2:	2211      	movs	r2, #17
 80128d4:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80128d6:	2300      	movs	r3, #0
 80128d8:	73fb      	strb	r3, [r7, #15]
                        break;
 80128da:	e011      	b.n	8012900 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 80128dc:	2301      	movs	r3, #1
 80128de:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 80128e0:	4bb5      	ldr	r3, [pc, #724]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80128e8:	2b10      	cmp	r3, #16
 80128ea:	d108      	bne.n	80128fe <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 80128ec:	f7f0 f826 	bl	800293c <HAL_GetTick>
 80128f0:	4603      	mov	r3, r0
 80128f2:	33c8      	adds	r3, #200	; 0xc8
 80128f4:	4ab1      	ldr	r2, [pc, #708]	; (8012bbc <_ZN3USB4TaskEv+0x33c>)
 80128f6:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 80128f8:	4baf      	ldr	r3, [pc, #700]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 80128fa:	2220      	movs	r2, #32
 80128fc:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 80128fe:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8012900:	2300      	movs	r3, #0
 8012902:	73bb      	strb	r3, [r7, #14]
 8012904:	7bbb      	ldrb	r3, [r7, #14]
 8012906:	2b0f      	cmp	r3, #15
 8012908:	d81b      	bhi.n	8012942 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 801290a:	7bba      	ldrb	r2, [r7, #14]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	321e      	adds	r2, #30
 8012910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d010      	beq.n	801293a <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 8012918:	7bba      	ldrb	r2, [r7, #14]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	321e      	adds	r2, #30
 801291e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012922:	7bba      	ldrb	r2, [r7, #14]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	321e      	adds	r2, #30
 8012928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	330c      	adds	r3, #12
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	4608      	mov	r0, r1
 8012934:	4798      	blx	r3
 8012936:	4603      	mov	r3, r0
 8012938:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801293a:	7bbb      	ldrb	r3, [r7, #14]
 801293c:	3301      	adds	r3, #1
 801293e:	73bb      	strb	r3, [r7, #14]
 8012940:	e7e0      	b.n	8012904 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8012942:	4b9d      	ldr	r3, [pc, #628]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	2ba0      	cmp	r3, #160	; 0xa0
 8012948:	f000 8123 	beq.w	8012b92 <_ZN3USB4TaskEv+0x312>
 801294c:	2ba0      	cmp	r3, #160	; 0xa0
 801294e:	f300 812f 	bgt.w	8012bb0 <_ZN3USB4TaskEv+0x330>
 8012952:	2b90      	cmp	r3, #144	; 0x90
 8012954:	f000 811f 	beq.w	8012b96 <_ZN3USB4TaskEv+0x316>
 8012958:	2b90      	cmp	r3, #144	; 0x90
 801295a:	f300 8129 	bgt.w	8012bb0 <_ZN3USB4TaskEv+0x330>
 801295e:	2b80      	cmp	r3, #128	; 0x80
 8012960:	f000 80fe 	beq.w	8012b60 <_ZN3USB4TaskEv+0x2e0>
 8012964:	2b80      	cmp	r3, #128	; 0x80
 8012966:	f300 8123 	bgt.w	8012bb0 <_ZN3USB4TaskEv+0x330>
 801296a:	2b51      	cmp	r3, #81	; 0x51
 801296c:	f000 80ea 	beq.w	8012b44 <_ZN3USB4TaskEv+0x2c4>
 8012970:	2b51      	cmp	r3, #81	; 0x51
 8012972:	f300 811d 	bgt.w	8012bb0 <_ZN3USB4TaskEv+0x330>
 8012976:	2b40      	cmp	r3, #64	; 0x40
 8012978:	dc6a      	bgt.n	8012a50 <_ZN3USB4TaskEv+0x1d0>
 801297a:	2b11      	cmp	r3, #17
 801297c:	f2c0 8118 	blt.w	8012bb0 <_ZN3USB4TaskEv+0x330>
 8012980:	3b11      	subs	r3, #17
 8012982:	2b2f      	cmp	r3, #47	; 0x2f
 8012984:	f200 8114 	bhi.w	8012bb0 <_ZN3USB4TaskEv+0x330>
 8012988:	a201      	add	r2, pc, #4	; (adr r2, 8012990 <_ZN3USB4TaskEv+0x110>)
 801298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801298e:	bf00      	nop
 8012990:	08012a57 	.word	0x08012a57
 8012994:	08012b9b 	.word	0x08012b9b
 8012998:	08012b9b 	.word	0x08012b9b
 801299c:	08012bb1 	.word	0x08012bb1
 80129a0:	08012bb1 	.word	0x08012bb1
 80129a4:	08012bb1 	.word	0x08012bb1
 80129a8:	08012bb1 	.word	0x08012bb1
 80129ac:	08012bb1 	.word	0x08012bb1
 80129b0:	08012bb1 	.word	0x08012bb1
 80129b4:	08012bb1 	.word	0x08012bb1
 80129b8:	08012bb1 	.word	0x08012bb1
 80129bc:	08012bb1 	.word	0x08012bb1
 80129c0:	08012bb1 	.word	0x08012bb1
 80129c4:	08012bb1 	.word	0x08012bb1
 80129c8:	08012bb1 	.word	0x08012bb1
 80129cc:	08012aa7 	.word	0x08012aa7
 80129d0:	08012bb1 	.word	0x08012bb1
 80129d4:	08012bb1 	.word	0x08012bb1
 80129d8:	08012bb1 	.word	0x08012bb1
 80129dc:	08012bb1 	.word	0x08012bb1
 80129e0:	08012bb1 	.word	0x08012bb1
 80129e4:	08012bb1 	.word	0x08012bb1
 80129e8:	08012bb1 	.word	0x08012bb1
 80129ec:	08012bb1 	.word	0x08012bb1
 80129f0:	08012bb1 	.word	0x08012bb1
 80129f4:	08012bb1 	.word	0x08012bb1
 80129f8:	08012bb1 	.word	0x08012bb1
 80129fc:	08012bb1 	.word	0x08012bb1
 8012a00:	08012bb1 	.word	0x08012bb1
 8012a04:	08012bb1 	.word	0x08012bb1
 8012a08:	08012bb1 	.word	0x08012bb1
 8012a0c:	08012ac3 	.word	0x08012ac3
 8012a10:	08012bb1 	.word	0x08012bb1
 8012a14:	08012bb1 	.word	0x08012bb1
 8012a18:	08012bb1 	.word	0x08012bb1
 8012a1c:	08012bb1 	.word	0x08012bb1
 8012a20:	08012bb1 	.word	0x08012bb1
 8012a24:	08012bb1 	.word	0x08012bb1
 8012a28:	08012bb1 	.word	0x08012bb1
 8012a2c:	08012bb1 	.word	0x08012bb1
 8012a30:	08012bb1 	.word	0x08012bb1
 8012a34:	08012bb1 	.word	0x08012bb1
 8012a38:	08012bb1 	.word	0x08012bb1
 8012a3c:	08012bb1 	.word	0x08012bb1
 8012a40:	08012bb1 	.word	0x08012bb1
 8012a44:	08012bb1 	.word	0x08012bb1
 8012a48:	08012bb1 	.word	0x08012bb1
 8012a4c:	08012ad5 	.word	0x08012ad5
 8012a50:	2b50      	cmp	r3, #80	; 0x50
 8012a52:	d05f      	beq.n	8012b14 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8012a54:	e0ac      	b.n	8012bb0 <_ZN3USB4TaskEv+0x330>
                        init();
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f7ff fa8e 	bl	8011f78 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	737b      	strb	r3, [r7, #13]
 8012a60:	7b7b      	ldrb	r3, [r7, #13]
 8012a62:	2b0f      	cmp	r3, #15
 8012a64:	d81b      	bhi.n	8012a9e <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8012a66:	7b7a      	ldrb	r2, [r7, #13]
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	321e      	adds	r2, #30
 8012a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d010      	beq.n	8012a96 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8012a74:	7b7a      	ldrb	r2, [r7, #13]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	321e      	adds	r2, #30
 8012a7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012a7e:	7b7a      	ldrb	r2, [r7, #13]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	321e      	adds	r2, #30
 8012a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	3308      	adds	r3, #8
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4608      	mov	r0, r1
 8012a90:	4798      	blx	r3
 8012a92:	4603      	mov	r3, r0
 8012a94:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8012a96:	7b7b      	ldrb	r3, [r7, #13]
 8012a98:	3301      	adds	r3, #1
 8012a9a:	737b      	strb	r3, [r7, #13]
 8012a9c:	e7e0      	b.n	8012a60 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8012a9e:	4b46      	ldr	r3, [pc, #280]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 8012aa0:	2212      	movs	r2, #18
 8012aa2:	701a      	strb	r2, [r3, #0]
                        break;
 8012aa4:	e084      	b.n	8012bb0 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 8012aa6:	f7ef ff49 	bl	800293c <HAL_GetTick>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	4b43      	ldr	r3, [pc, #268]	; (8012bbc <_ZN3USB4TaskEv+0x33c>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	1ad3      	subs	r3, r2, r3
 8012ab2:	43db      	mvns	r3, r3
 8012ab4:	0fdb      	lsrs	r3, r3, #31
 8012ab6:	b2db      	uxtb	r3, r3
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d070      	beq.n	8012b9e <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8012abc:	4b3e      	ldr	r3, [pc, #248]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 8012abe:	2230      	movs	r2, #48	; 0x30
 8012ac0:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012ac2:	2201      	movs	r2, #1
 8012ac4:	21e8      	movs	r1, #232	; 0xe8
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7ef fa28 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8012acc:	4b3a      	ldr	r3, [pc, #232]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 8012ace:	2240      	movs	r2, #64	; 0x40
 8012ad0:	701a      	strb	r2, [r3, #0]
                        break;
 8012ad2:	e06d      	b.n	8012bb0 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 8012ad4:	21e8      	movs	r1, #232	; 0xe8
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7ef fa72 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012adc:	4603      	mov	r3, r0
 8012ade:	f003 0301 	and.w	r3, r3, #1
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	bf0c      	ite	eq
 8012ae6:	2301      	moveq	r3, #1
 8012ae8:	2300      	movne	r3, #0
 8012aea:	b2db      	uxtb	r3, r3
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d058      	beq.n	8012ba2 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 8012af0:	21d8      	movs	r1, #216	; 0xd8
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f7ef fa64 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012af8:	4603      	mov	r3, r0
 8012afa:	f043 0308 	orr.w	r3, r3, #8
 8012afe:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 8012b00:	7b3b      	ldrb	r3, [r7, #12]
 8012b02:	461a      	mov	r2, r3
 8012b04:	21d8      	movs	r1, #216	; 0xd8
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f7ef fa08 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8012b0c:	4b2a      	ldr	r3, [pc, #168]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 8012b0e:	2250      	movs	r2, #80	; 0x50
 8012b10:	701a      	strb	r2, [r3, #0]
                        break;
 8012b12:	e046      	b.n	8012ba2 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 8012b14:	21c8      	movs	r1, #200	; 0xc8
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f7ef fa52 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	bf14      	ite	ne
 8012b26:	2301      	movne	r3, #1
 8012b28:	2300      	moveq	r3, #0
 8012b2a:	b2db      	uxtb	r3, r3
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d03a      	beq.n	8012ba6 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 8012b30:	4b21      	ldr	r3, [pc, #132]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 8012b32:	2251      	movs	r2, #81	; 0x51
 8012b34:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8012b36:	f7ef ff01 	bl	800293c <HAL_GetTick>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	3314      	adds	r3, #20
 8012b3e:	4a1f      	ldr	r2, [pc, #124]	; (8012bbc <_ZN3USB4TaskEv+0x33c>)
 8012b40:	6013      	str	r3, [r2, #0]
                        break;
 8012b42:	e030      	b.n	8012ba6 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8012b44:	f7ef fefa 	bl	800293c <HAL_GetTick>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	4b1c      	ldr	r3, [pc, #112]	; (8012bbc <_ZN3USB4TaskEv+0x33c>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	1ad3      	subs	r3, r2, r3
 8012b50:	43db      	mvns	r3, r3
 8012b52:	0fdb      	lsrs	r3, r3, #31
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d027      	beq.n	8012baa <_ZN3USB4TaskEv+0x32a>
 8012b5a:	4b17      	ldr	r3, [pc, #92]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 8012b5c:	2280      	movs	r2, #128	; 0x80
 8012b5e:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 8012b60:	7bfb      	ldrb	r3, [r7, #15]
 8012b62:	2200      	movs	r2, #0
 8012b64:	2100      	movs	r1, #0
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f000 f920 	bl	8012dac <_ZN3USB11ConfiguringEhhb>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 8012b70:	7afb      	ldrb	r3, [r7, #11]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d009      	beq.n	8012b8a <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8012b76:	7afb      	ldrb	r3, [r7, #11]
 8012b78:	2bd2      	cmp	r3, #210	; 0xd2
 8012b7a:	d018      	beq.n	8012bae <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 8012b7c:	4a10      	ldr	r2, [pc, #64]	; (8012bc0 <_ZN3USB4TaskEv+0x340>)
 8012b7e:	7afb      	ldrb	r3, [r7, #11]
 8012b80:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 8012b82:	4b0d      	ldr	r3, [pc, #52]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 8012b84:	22a0      	movs	r2, #160	; 0xa0
 8012b86:	701a      	strb	r2, [r3, #0]
                        break;
 8012b88:	e011      	b.n	8012bae <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 8012b8a:	4b0b      	ldr	r3, [pc, #44]	; (8012bb8 <_ZN3USB4TaskEv+0x338>)
 8012b8c:	2290      	movs	r2, #144	; 0x90
 8012b8e:	701a      	strb	r2, [r3, #0]
                        break;
 8012b90:	e00d      	b.n	8012bae <_ZN3USB4TaskEv+0x32e>
                        break;
 8012b92:	bf00      	nop
 8012b94:	e00c      	b.n	8012bb0 <_ZN3USB4TaskEv+0x330>
                        break;
 8012b96:	bf00      	nop
 8012b98:	e00a      	b.n	8012bb0 <_ZN3USB4TaskEv+0x330>
                        break;
 8012b9a:	bf00      	nop
 8012b9c:	e008      	b.n	8012bb0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 8012b9e:	bf00      	nop
 8012ba0:	e006      	b.n	8012bb0 <_ZN3USB4TaskEv+0x330>
                        break;
 8012ba2:	bf00      	nop
 8012ba4:	e004      	b.n	8012bb0 <_ZN3USB4TaskEv+0x330>
                        break;
 8012ba6:	bf00      	nop
 8012ba8:	e002      	b.n	8012bb0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 8012baa:	bf00      	nop
 8012bac:	e000      	b.n	8012bb0 <_ZN3USB4TaskEv+0x330>
                        break;
 8012bae:	bf00      	nop
}
 8012bb0:	bf00      	nop
 8012bb2:	3710      	adds	r7, #16
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	200053f9 	.word	0x200053f9
 8012bbc:	200053fc 	.word	0x200053fc
 8012bc0:	200053f8 	.word	0x200053f8

08012bc4 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	4608      	mov	r0, r1
 8012bce:	4611      	mov	r1, r2
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	70fb      	strb	r3, [r7, #3]
 8012bd6:	460b      	mov	r3, r1
 8012bd8:	70bb      	strb	r3, [r7, #2]
 8012bda:	4613      	mov	r3, r2
 8012bdc:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 8012bde:	2300      	movs	r3, #0
 8012be0:	617b      	str	r3, [r7, #20]
 8012be2:	2300      	movs	r3, #0
 8012be4:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	2100      	movs	r1, #0
 8012bea:	4618      	mov	r0, r3
 8012bec:	f000 fbc0 	bl	8013370 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012bf0:	6178      	str	r0, [r7, #20]

        if(!p0)
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d101      	bne.n	8012bfc <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012bf8:	23d6      	movs	r3, #214	; 0xd6
 8012bfa:	e03a      	b.n	8012c72 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d101      	bne.n	8012c08 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8012c04:	23d7      	movs	r3, #215	; 0xd7
 8012c06:	e034      	b.n	8012c72 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	787a      	ldrb	r2, [r7, #1]
 8012c0c:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	78bb      	ldrb	r3, [r7, #2]
 8012c12:	78f9      	ldrb	r1, [r7, #3]
 8012c14:	2200      	movs	r2, #0
 8012c16:	f000 fc5f 	bl	80134d8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 8012c1e:	7bfb      	ldrb	r3, [r7, #15]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d101      	bne.n	8012c28 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8012c24:	23d4      	movs	r3, #212	; 0xd4
 8012c26:	e024      	b.n	8012c72 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	7bfa      	ldrb	r2, [r7, #15]
 8012c2c:	4611      	mov	r1, r2
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f000 fb9e 	bl	8013370 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012c34:	6138      	str	r0, [r7, #16]

        if(!p)
 8012c36:	693b      	ldr	r3, [r7, #16]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d101      	bne.n	8012c40 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012c3c:	23d6      	movs	r3, #214	; 0xd6
 8012c3e:	e018      	b.n	8012c72 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8012c40:	693b      	ldr	r3, [r7, #16]
 8012c42:	787a      	ldrb	r2, [r7, #1]
 8012c44:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8012c46:	7bfb      	ldrb	r3, [r7, #15]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f000 fae3 	bl	8013218 <_ZN3USB7setAddrEhhh>
 8012c52:	4603      	mov	r3, r0
 8012c54:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8012c56:	7bbb      	ldrb	r3, [r7, #14]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d009      	beq.n	8012c70 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	7bfa      	ldrb	r2, [r7, #15]
 8012c60:	4611      	mov	r1, r2
 8012c62:	4618      	mov	r0, r3
 8012c64:	f000 fcd0 	bl	8013608 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 8012c6c:	7bbb      	ldrb	r3, [r7, #14]
 8012c6e:	e000      	b.n	8012c72 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8012c70:	2300      	movs	r3, #0
};
 8012c72:	4618      	mov	r0, r3
 8012c74:	3718      	adds	r7, #24
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}

08012c7a <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 8012c7a:	b590      	push	{r4, r7, lr}
 8012c7c:	b085      	sub	sp, #20
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
 8012c82:	4608      	mov	r0, r1
 8012c84:	4611      	mov	r1, r2
 8012c86:	461a      	mov	r2, r3
 8012c88:	4603      	mov	r3, r0
 8012c8a:	70fb      	strb	r3, [r7, #3]
 8012c8c:	460b      	mov	r3, r1
 8012c8e:	70bb      	strb	r3, [r7, #2]
 8012c90:	4613      	mov	r3, r2
 8012c92:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8012c94:	2300      	movs	r3, #0
 8012c96:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8012c98:	78fa      	ldrb	r2, [r7, #3]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	321e      	adds	r2, #30
 8012c9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012ca2:	78fa      	ldrb	r2, [r7, #3]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	321e      	adds	r2, #30
 8012ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	3304      	adds	r3, #4
 8012cb0:	681c      	ldr	r4, [r3, #0]
 8012cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012cb6:	787a      	ldrb	r2, [r7, #1]
 8012cb8:	78b9      	ldrb	r1, [r7, #2]
 8012cba:	47a0      	blx	r4
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8012cc0:	7bbb      	ldrb	r3, [r7, #14]
 8012cc2:	2be0      	cmp	r3, #224	; 0xe0
 8012cc4:	d11c      	bne.n	8012d00 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8012cc6:	78bb      	ldrb	r3, [r7, #2]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d108      	bne.n	8012cde <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012ccc:	2201      	movs	r2, #1
 8012cce:	21e8      	movs	r1, #232	; 0xe8
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7ef f923 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8012cd6:	2066      	movs	r0, #102	; 0x66
 8012cd8:	f7ef fe3c 	bl	8002954 <HAL_Delay>
 8012cdc:	e022      	b.n	8012d24 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8012cde:	78ba      	ldrb	r2, [r7, #2]
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	321e      	adds	r2, #30
 8012ce4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012ce8:	78ba      	ldrb	r2, [r7, #2]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	321e      	adds	r2, #30
 8012cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	3314      	adds	r3, #20
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	787a      	ldrb	r2, [r7, #1]
 8012cfa:	4611      	mov	r1, r2
 8012cfc:	4798      	blx	r3
 8012cfe:	e011      	b.n	8012d24 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8012d00:	7bbb      	ldrb	r3, [r7, #14]
 8012d02:	2b0d      	cmp	r3, #13
 8012d04:	d109      	bne.n	8012d1a <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8012d06:	7bfb      	ldrb	r3, [r7, #15]
 8012d08:	2b02      	cmp	r3, #2
 8012d0a:	d806      	bhi.n	8012d1a <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 8012d0c:	2064      	movs	r0, #100	; 0x64
 8012d0e:	f7ef fe21 	bl	8002954 <HAL_Delay>
                retries++;
 8012d12:	7bfb      	ldrb	r3, [r7, #15]
 8012d14:	3301      	adds	r3, #1
 8012d16:	73fb      	strb	r3, [r7, #15]
                goto again;
 8012d18:	e7be      	b.n	8012c98 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 8012d1a:	7bbb      	ldrb	r3, [r7, #14]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d001      	beq.n	8012d24 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8012d20:	7bbb      	ldrb	r3, [r7, #14]
 8012d22:	e03f      	b.n	8012da4 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8012d24:	78fa      	ldrb	r2, [r7, #3]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	321e      	adds	r2, #30
 8012d2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012d2e:	78fa      	ldrb	r2, [r7, #3]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	321e      	adds	r2, #30
 8012d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	681c      	ldr	r4, [r3, #0]
 8012d3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d40:	787a      	ldrb	r2, [r7, #1]
 8012d42:	78b9      	ldrb	r1, [r7, #2]
 8012d44:	47a0      	blx	r4
 8012d46:	4603      	mov	r3, r0
 8012d48:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8012d4a:	7bbb      	ldrb	r3, [r7, #14]
 8012d4c:	2b0d      	cmp	r3, #13
 8012d4e:	d109      	bne.n	8012d64 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8012d50:	7bfb      	ldrb	r3, [r7, #15]
 8012d52:	2b02      	cmp	r3, #2
 8012d54:	d806      	bhi.n	8012d64 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8012d56:	2064      	movs	r0, #100	; 0x64
 8012d58:	f7ef fdfc 	bl	8002954 <HAL_Delay>
                retries++;
 8012d5c:	7bfb      	ldrb	r3, [r7, #15]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	73fb      	strb	r3, [r7, #15]
                goto again;
 8012d62:	e799      	b.n	8012c98 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8012d64:	7bbb      	ldrb	r3, [r7, #14]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d01b      	beq.n	8012da2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 8012d6a:	78bb      	ldrb	r3, [r7, #2]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d108      	bne.n	8012d82 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012d70:	2201      	movs	r2, #1
 8012d72:	21e8      	movs	r1, #232	; 0xe8
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f7ef f8d1 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8012d7a:	2066      	movs	r0, #102	; 0x66
 8012d7c:	f7ef fdea 	bl	8002954 <HAL_Delay>
 8012d80:	e00f      	b.n	8012da2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8012d82:	78ba      	ldrb	r2, [r7, #2]
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	321e      	adds	r2, #30
 8012d88:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012d8c:	78ba      	ldrb	r2, [r7, #2]
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	321e      	adds	r2, #30
 8012d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	3314      	adds	r3, #20
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	787a      	ldrb	r2, [r7, #1]
 8012d9e:	4611      	mov	r1, r2
 8012da0:	4798      	blx	r3
                }
        }
        return rcode;
 8012da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3714      	adds	r7, #20
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd90      	pop	{r4, r7, pc}

08012dac <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b090      	sub	sp, #64	; 0x40
 8012db0:	af02      	add	r7, sp, #8
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	4608      	mov	r0, r1
 8012db6:	4611      	mov	r1, r2
 8012db8:	461a      	mov	r2, r3
 8012dba:	4603      	mov	r3, r0
 8012dbc:	70fb      	strb	r3, [r7, #3]
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	70bb      	strb	r3, [r7, #2]
 8012dc2:	4613      	mov	r3, r2
 8012dc4:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 8012dcc:	f107 030c 	add.w	r3, r7, #12
 8012dd0:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 8012dde:	2308      	movs	r3, #8
 8012de0:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8012de2:	7abb      	ldrb	r3, [r7, #10]
 8012de4:	f36f 0300 	bfc	r3, #0, #1
 8012de8:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 8012dea:	7abb      	ldrb	r3, [r7, #10]
 8012dec:	f36f 0341 	bfc	r3, #1, #1
 8012df0:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8012df2:	7abb      	ldrb	r3, [r7, #10]
 8012df4:	220f      	movs	r2, #15
 8012df6:	f362 0387 	bfi	r3, r2, #2, #6
 8012dfa:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f7fa fd13 	bl	800d828 <_ZN3USB14GetAddressPoolEv>
 8012e02:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8012e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2100      	movs	r1, #0
 8012e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e0e:	4798      	blx	r3
 8012e10:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8012e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d101      	bne.n	8012e1c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012e18:	23d6      	movs	r3, #214	; 0xd6
 8012e1a:	e15c      	b.n	80130d6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 8012e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8012e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e24:	f107 0208 	add.w	r2, r7, #8
 8012e28:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 8012e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2c:	787a      	ldrb	r2, [r7, #1]
 8012e2e:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8012e30:	f107 030c 	add.w	r3, r7, #12
 8012e34:	9300      	str	r3, [sp, #0]
 8012e36:	2312      	movs	r3, #18
 8012e38:	2200      	movs	r2, #0
 8012e3a:	2100      	movs	r1, #0
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f000 f94e 	bl	80130de <_ZN3USB11getDevDescrEhhtPh>
 8012e42:	4603      	mov	r3, r0
 8012e44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8012e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e4c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 8012e4e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d002      	beq.n	8012e5c <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8012e56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012e5a:	e13c      	b.n	80130d6 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 8012e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e5e:	7a1a      	ldrb	r2, [r3, #8]
 8012e60:	7a5b      	ldrb	r3, [r3, #9]
 8012e62:	021b      	lsls	r3, r3, #8
 8012e64:	4313      	orrs	r3, r2
 8012e66:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8012e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6a:	7a9a      	ldrb	r2, [r3, #10]
 8012e6c:	7adb      	ldrb	r3, [r3, #11]
 8012e6e:	021b      	lsls	r3, r3, #8
 8012e70:	4313      	orrs	r3, r2
 8012e72:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8012e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e76:	791b      	ldrb	r3, [r3, #4]
 8012e78:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 8012e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e7c:	795b      	ldrb	r3, [r3, #5]
 8012e7e:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012e80:	2300      	movs	r3, #0
 8012e82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e8a:	2b0f      	cmp	r3, #15
 8012e8c:	f200 8081 	bhi.w	8012f92 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8012e90:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	321e      	adds	r2, #30
 8012e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d06e      	beq.n	8012f7e <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012ea0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	321e      	adds	r2, #30
 8012ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012eac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	321e      	adds	r2, #30
 8012eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	3310      	adds	r3, #16
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	4608      	mov	r0, r1
 8012ec0:	4798      	blx	r3
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	bf14      	ite	ne
 8012ec8:	2301      	movne	r3, #1
 8012eca:	2300      	moveq	r3, #0
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d157      	bne.n	8012f82 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8012ed2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	321e      	adds	r2, #30
 8012eda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012ede:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	321e      	adds	r2, #30
 8012ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	3320      	adds	r3, #32
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	7fba      	ldrb	r2, [r7, #30]
 8012ef2:	4611      	mov	r1, r2
 8012ef4:	4798      	blx	r3
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d02b      	beq.n	8012f54 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8012efc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	321e      	adds	r2, #30
 8012f04:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012f08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	321e      	adds	r2, #30
 8012f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	3318      	adds	r3, #24
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	8c3a      	ldrh	r2, [r7, #32]
 8012f1c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8012f1e:	4798      	blx	r3
 8012f20:	4603      	mov	r3, r0
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d114      	bne.n	8012f50 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8012f26:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	321e      	adds	r2, #30
 8012f2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012f32:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	321e      	adds	r2, #30
 8012f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	331c      	adds	r3, #28
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	7ffa      	ldrb	r2, [r7, #31]
 8012f46:	4611      	mov	r1, r2
 8012f48:	4798      	blx	r3
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8012f50:	2301      	movs	r3, #1
 8012f52:	e000      	b.n	8012f56 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8012f54:	2300      	movs	r3, #0
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d014      	beq.n	8012f84 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8012f5a:	78b8      	ldrb	r0, [r7, #2]
 8012f5c:	78fa      	ldrb	r2, [r7, #3]
 8012f5e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8012f62:	787b      	ldrb	r3, [r7, #1]
 8012f64:	9300      	str	r3, [sp, #0]
 8012f66:	4603      	mov	r3, r0
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f7ff fe86 	bl	8012c7a <_ZN3USB13AttemptConfigEhhhb>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8012f74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012f78:	2bd1      	cmp	r3, #209	; 0xd1
 8012f7a:	d109      	bne.n	8012f90 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8012f7c:	e002      	b.n	8012f84 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8012f7e:	bf00      	nop
 8012f80:	e000      	b.n	8012f84 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012f82:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012f84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f88:	3301      	adds	r3, #1
 8012f8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012f8e:	e77a      	b.n	8012e86 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8012f90:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8012f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f96:	2b0f      	cmp	r3, #15
 8012f98:	d802      	bhi.n	8012fa0 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8012f9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012f9e:	e09a      	b.n	80130d6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012fa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012faa:	2b0f      	cmp	r3, #15
 8012fac:	f200 8088 	bhi.w	80130c0 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8012fb0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	321e      	adds	r2, #30
 8012fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d074      	beq.n	80130aa <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012fc0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	321e      	adds	r2, #30
 8012fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012fcc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	321e      	adds	r2, #30
 8012fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	3310      	adds	r3, #16
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	4608      	mov	r0, r1
 8012fe0:	4798      	blx	r3
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	bf14      	ite	ne
 8012fe8:	2301      	movne	r3, #1
 8012fea:	2300      	moveq	r3, #0
 8012fec:	b2db      	uxtb	r3, r3
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d15d      	bne.n	80130ae <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8012ff2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	321e      	adds	r2, #30
 8012ffa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012ffe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	321e      	adds	r2, #30
 8013006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	3320      	adds	r3, #32
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	7fba      	ldrb	r2, [r7, #30]
 8013012:	4611      	mov	r1, r2
 8013014:	4798      	blx	r3
 8013016:	4603      	mov	r3, r0
 8013018:	2b00      	cmp	r3, #0
 801301a:	d02b      	beq.n	8013074 <_ZN3USB11ConfiguringEhhb+0x2c8>
 801301c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	321e      	adds	r2, #30
 8013024:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013028:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	321e      	adds	r2, #30
 8013030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	3318      	adds	r3, #24
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	8c3a      	ldrh	r2, [r7, #32]
 801303c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 801303e:	4798      	blx	r3
 8013040:	4603      	mov	r3, r0
 8013042:	2b00      	cmp	r3, #0
 8013044:	d114      	bne.n	8013070 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8013046:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	321e      	adds	r2, #30
 801304e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013052:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	321e      	adds	r2, #30
 801305a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	331c      	adds	r3, #28
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	7ffa      	ldrb	r2, [r7, #31]
 8013066:	4611      	mov	r1, r2
 8013068:	4798      	blx	r3
 801306a:	4603      	mov	r3, r0
 801306c:	2b00      	cmp	r3, #0
 801306e:	d001      	beq.n	8013074 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8013070:	2301      	movs	r3, #1
 8013072:	e000      	b.n	8013076 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8013074:	2300      	movs	r3, #0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d11b      	bne.n	80130b2 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 801307a:	78b8      	ldrb	r0, [r7, #2]
 801307c:	78fa      	ldrb	r2, [r7, #3]
 801307e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8013082:	787b      	ldrb	r3, [r7, #1]
 8013084:	9300      	str	r3, [sp, #0]
 8013086:	4603      	mov	r3, r0
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f7ff fdf6 	bl	8012c7a <_ZN3USB13AttemptConfigEhhhb>
 801308e:	4603      	mov	r3, r0
 8013090:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8013094:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013098:	2bd1      	cmp	r3, #209	; 0xd1
 801309a:	d00b      	beq.n	80130b4 <_ZN3USB11ConfiguringEhhb+0x308>
 801309c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80130a0:	2bd9      	cmp	r3, #217	; 0xd9
 80130a2:	d007      	beq.n	80130b4 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 80130a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80130a8:	e015      	b.n	80130d6 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 80130aa:	bf00      	nop
 80130ac:	e002      	b.n	80130b4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 80130ae:	bf00      	nop
 80130b0:	e000      	b.n	80130b4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 80130b2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 80130b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130b8:	3301      	adds	r3, #1
 80130ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80130be:	e772      	b.n	8012fa6 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 80130c0:	787b      	ldrb	r3, [r7, #1]
 80130c2:	78ba      	ldrb	r2, [r7, #2]
 80130c4:	78f9      	ldrb	r1, [r7, #3]
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f7ff fd7c 	bl	8012bc4 <_ZN3USB17DefaultAddressingEhhb>
 80130cc:	4603      	mov	r3, r0
 80130ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 80130d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3738      	adds	r7, #56	; 0x38
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}

080130de <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 80130de:	b580      	push	{r7, lr}
 80130e0:	b08a      	sub	sp, #40	; 0x28
 80130e2:	af08      	add	r7, sp, #32
 80130e4:	6078      	str	r0, [r7, #4]
 80130e6:	4608      	mov	r0, r1
 80130e8:	4611      	mov	r1, r2
 80130ea:	461a      	mov	r2, r3
 80130ec:	4603      	mov	r3, r0
 80130ee:	70fb      	strb	r3, [r7, #3]
 80130f0:	460b      	mov	r3, r1
 80130f2:	70bb      	strb	r3, [r7, #2]
 80130f4:	4613      	mov	r3, r2
 80130f6:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 80130f8:	78ba      	ldrb	r2, [r7, #2]
 80130fa:	78f9      	ldrb	r1, [r7, #3]
 80130fc:	2300      	movs	r3, #0
 80130fe:	9307      	str	r3, [sp, #28]
 8013100:	693b      	ldr	r3, [r7, #16]
 8013102:	9306      	str	r3, [sp, #24]
 8013104:	883b      	ldrh	r3, [r7, #0]
 8013106:	9305      	str	r3, [sp, #20]
 8013108:	883b      	ldrh	r3, [r7, #0]
 801310a:	9304      	str	r3, [sp, #16]
 801310c:	2300      	movs	r3, #0
 801310e:	9303      	str	r3, [sp, #12]
 8013110:	2301      	movs	r3, #1
 8013112:	9302      	str	r3, [sp, #8]
 8013114:	2300      	movs	r3, #0
 8013116:	9301      	str	r3, [sp, #4]
 8013118:	2306      	movs	r3, #6
 801311a:	9300      	str	r3, [sp, #0]
 801311c:	2380      	movs	r3, #128	; 0x80
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f7fe fffd 	bl	801211e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8013124:	4603      	mov	r3, r0
}
 8013126:	4618      	mov	r0, r3
 8013128:	3708      	adds	r7, #8
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}

0801312e <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 801312e:	b580      	push	{r7, lr}
 8013130:	b08a      	sub	sp, #40	; 0x28
 8013132:	af08      	add	r7, sp, #32
 8013134:	6078      	str	r0, [r7, #4]
 8013136:	4608      	mov	r0, r1
 8013138:	4611      	mov	r1, r2
 801313a:	461a      	mov	r2, r3
 801313c:	4603      	mov	r3, r0
 801313e:	70fb      	strb	r3, [r7, #3]
 8013140:	460b      	mov	r3, r1
 8013142:	70bb      	strb	r3, [r7, #2]
 8013144:	4613      	mov	r3, r2
 8013146:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8013148:	78ba      	ldrb	r2, [r7, #2]
 801314a:	78f9      	ldrb	r1, [r7, #3]
 801314c:	2300      	movs	r3, #0
 801314e:	9307      	str	r3, [sp, #28]
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	9306      	str	r3, [sp, #24]
 8013154:	883b      	ldrh	r3, [r7, #0]
 8013156:	9305      	str	r3, [sp, #20]
 8013158:	883b      	ldrh	r3, [r7, #0]
 801315a:	9304      	str	r3, [sp, #16]
 801315c:	2300      	movs	r3, #0
 801315e:	9303      	str	r3, [sp, #12]
 8013160:	2302      	movs	r3, #2
 8013162:	9302      	str	r3, [sp, #8]
 8013164:	7c3b      	ldrb	r3, [r7, #16]
 8013166:	9301      	str	r3, [sp, #4]
 8013168:	2306      	movs	r3, #6
 801316a:	9300      	str	r3, [sp, #0]
 801316c:	2380      	movs	r3, #128	; 0x80
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f7fe ffd5 	bl	801211e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8013174:	4603      	mov	r3, r0
}
 8013176:	4618      	mov	r0, r3
 8013178:	3708      	adds	r7, #8
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}

0801317e <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 801317e:	b580      	push	{r7, lr}
 8013180:	b09e      	sub	sp, #120	; 0x78
 8013182:	af08      	add	r7, sp, #32
 8013184:	6078      	str	r0, [r7, #4]
 8013186:	4608      	mov	r0, r1
 8013188:	4611      	mov	r1, r2
 801318a:	461a      	mov	r2, r3
 801318c:	4603      	mov	r3, r0
 801318e:	70fb      	strb	r3, [r7, #3]
 8013190:	460b      	mov	r3, r1
 8013192:	70bb      	strb	r3, [r7, #2]
 8013194:	4613      	mov	r3, r2
 8013196:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8013198:	2340      	movs	r3, #64	; 0x40
 801319a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 801319e:	f107 030c 	add.w	r3, r7, #12
 80131a2:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 80131a4:	78ba      	ldrb	r2, [r7, #2]
 80131a6:	78f9      	ldrb	r1, [r7, #3]
 80131a8:	f107 030c 	add.w	r3, r7, #12
 80131ac:	9301      	str	r3, [sp, #4]
 80131ae:	787b      	ldrb	r3, [r7, #1]
 80131b0:	9300      	str	r3, [sp, #0]
 80131b2:	2309      	movs	r3, #9
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f7ff ffba 	bl	801312e <_ZN3USB12getConfDescrEhhthPh>
 80131ba:	4603      	mov	r3, r0
 80131bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 80131c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d002      	beq.n	80131ce <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 80131c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80131cc:	e020      	b.n	8013210 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 80131ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131d0:	789a      	ldrb	r2, [r3, #2]
 80131d2:	78db      	ldrb	r3, [r3, #3]
 80131d4:	021b      	lsls	r3, r3, #8
 80131d6:	4313      	orrs	r3, r2
 80131d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 80131dc:	78ba      	ldrb	r2, [r7, #2]
 80131de:	78f9      	ldrb	r1, [r7, #3]
 80131e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80131e2:	9307      	str	r3, [sp, #28]
 80131e4:	f107 030c 	add.w	r3, r7, #12
 80131e8:	9306      	str	r3, [sp, #24]
 80131ea:	2340      	movs	r3, #64	; 0x40
 80131ec:	9305      	str	r3, [sp, #20]
 80131ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80131f2:	9304      	str	r3, [sp, #16]
 80131f4:	2300      	movs	r3, #0
 80131f6:	9303      	str	r3, [sp, #12]
 80131f8:	2302      	movs	r3, #2
 80131fa:	9302      	str	r3, [sp, #8]
 80131fc:	787b      	ldrb	r3, [r7, #1]
 80131fe:	9301      	str	r3, [sp, #4]
 8013200:	2306      	movs	r3, #6
 8013202:	9300      	str	r3, [sp, #0]
 8013204:	2380      	movs	r3, #128	; 0x80
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7fe ff89 	bl	801211e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801320c:	4603      	mov	r3, r0
 801320e:	bf00      	nop
}
 8013210:	4618      	mov	r0, r3
 8013212:	3758      	adds	r7, #88	; 0x58
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}

08013218 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8013218:	b580      	push	{r7, lr}
 801321a:	b08c      	sub	sp, #48	; 0x30
 801321c:	af08      	add	r7, sp, #32
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	4608      	mov	r0, r1
 8013222:	4611      	mov	r1, r2
 8013224:	461a      	mov	r2, r3
 8013226:	4603      	mov	r3, r0
 8013228:	70fb      	strb	r3, [r7, #3]
 801322a:	460b      	mov	r3, r1
 801322c:	70bb      	strb	r3, [r7, #2]
 801322e:	4613      	mov	r3, r2
 8013230:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8013232:	78ba      	ldrb	r2, [r7, #2]
 8013234:	78f9      	ldrb	r1, [r7, #3]
 8013236:	2300      	movs	r3, #0
 8013238:	9307      	str	r3, [sp, #28]
 801323a:	2300      	movs	r3, #0
 801323c:	9306      	str	r3, [sp, #24]
 801323e:	2300      	movs	r3, #0
 8013240:	9305      	str	r3, [sp, #20]
 8013242:	2300      	movs	r3, #0
 8013244:	9304      	str	r3, [sp, #16]
 8013246:	2300      	movs	r3, #0
 8013248:	9303      	str	r3, [sp, #12]
 801324a:	2300      	movs	r3, #0
 801324c:	9302      	str	r3, [sp, #8]
 801324e:	787b      	ldrb	r3, [r7, #1]
 8013250:	9301      	str	r3, [sp, #4]
 8013252:	2305      	movs	r3, #5
 8013254:	9300      	str	r3, [sp, #0]
 8013256:	2300      	movs	r3, #0
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f7fe ff60 	bl	801211e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801325e:	4603      	mov	r3, r0
 8013260:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8013262:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013266:	f7ef fb75 	bl	8002954 <HAL_Delay>
        return rcode;
 801326a:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 801326c:	4618      	mov	r0, r3
 801326e:	3710      	adds	r7, #16
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8013274:	b580      	push	{r7, lr}
 8013276:	b08a      	sub	sp, #40	; 0x28
 8013278:	af08      	add	r7, sp, #32
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	4608      	mov	r0, r1
 801327e:	4611      	mov	r1, r2
 8013280:	461a      	mov	r2, r3
 8013282:	4603      	mov	r3, r0
 8013284:	70fb      	strb	r3, [r7, #3]
 8013286:	460b      	mov	r3, r1
 8013288:	70bb      	strb	r3, [r7, #2]
 801328a:	4613      	mov	r3, r2
 801328c:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 801328e:	78ba      	ldrb	r2, [r7, #2]
 8013290:	78f9      	ldrb	r1, [r7, #3]
 8013292:	2300      	movs	r3, #0
 8013294:	9307      	str	r3, [sp, #28]
 8013296:	2300      	movs	r3, #0
 8013298:	9306      	str	r3, [sp, #24]
 801329a:	2300      	movs	r3, #0
 801329c:	9305      	str	r3, [sp, #20]
 801329e:	2300      	movs	r3, #0
 80132a0:	9304      	str	r3, [sp, #16]
 80132a2:	2300      	movs	r3, #0
 80132a4:	9303      	str	r3, [sp, #12]
 80132a6:	2300      	movs	r3, #0
 80132a8:	9302      	str	r3, [sp, #8]
 80132aa:	787b      	ldrb	r3, [r7, #1]
 80132ac:	9301      	str	r3, [sp, #4]
 80132ae:	2309      	movs	r3, #9
 80132b0:	9300      	str	r3, [sp, #0]
 80132b2:	2300      	movs	r3, #0
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f7fe ff32 	bl	801211e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80132ba:	4603      	mov	r3, r0
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3708      	adds	r7, #8
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 80132c4:	b480      	push	{r7}
 80132c6:	b083      	sub	sp, #12
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
};
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	4618      	mov	r0, r3
 80132d0:	370c      	adds	r7, #12
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr
	...

080132dc <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 80132dc:	b480      	push	{r7}
 80132de:	b083      	sub	sp, #12
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	4a04      	ldr	r2, [pc, #16]	; (80132f8 <_ZN11AddressPoolC1Ev+0x1c>)
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	601a      	str	r2, [r3, #0]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	4618      	mov	r0, r3
 80132ee:	370c      	adds	r7, #12
 80132f0:	46bd      	mov	sp, r7
 80132f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f6:	4770      	bx	lr
 80132f8:	08014cd4 	.word	0x08014cd4

080132fc <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b082      	sub	sp, #8
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	4618      	mov	r0, r3
 8013308:	f7ff ffe8 	bl	80132dc <_ZN11AddressPoolC1Ev>
 801330c:	4a17      	ldr	r2, [pc, #92]	; (801336c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	601a      	str	r2, [r3, #0]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2200      	movs	r2, #0
 8013316:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8013318:	2100      	movs	r1, #0
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f000 f990 	bl	8013640 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2200      	movs	r2, #0
 8013324:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	1d1a      	adds	r2, r3, #4
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2200      	movs	r2, #0
 8013332:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2208      	movs	r2, #8
 8013338:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	7993      	ldrb	r3, [r2, #6]
 801333e:	f36f 0300 	bfc	r3, #0, #1
 8013342:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	7993      	ldrb	r3, [r2, #6]
 8013348:	f36f 0341 	bfc	r3, #1, #1
 801334c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	7993      	ldrb	r3, [r2, #6]
 8013352:	210f      	movs	r1, #15
 8013354:	f361 0387 	bfi	r3, r1, #2, #6
 8013358:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f000 f9a1 	bl	80136a2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	4618      	mov	r0, r3
 8013364:	3708      	adds	r7, #8
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}
 801336a:	bf00      	nop
 801336c:	08014cc0 	.word	0x08014cc0

08013370 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	460b      	mov	r3, r1
 801337a:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 801337c:	78fb      	ldrb	r3, [r7, #3]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d102      	bne.n	8013388 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	3308      	adds	r3, #8
 8013386:	e014      	b.n	80133b2 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8013388:	78fb      	ldrb	r3, [r7, #3]
 801338a:	4619      	mov	r1, r3
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f000 f9a1 	bl	80136d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8013392:	4603      	mov	r3, r0
 8013394:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8013396:	7bfb      	ldrb	r3, [r7, #15]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d008      	beq.n	80133ae <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f103 0108 	add.w	r1, r3, #8
 80133a2:	7bfa      	ldrb	r2, [r7, #15]
 80133a4:	4613      	mov	r3, r2
 80133a6:	00db      	lsls	r3, r3, #3
 80133a8:	1a9b      	subs	r3, r3, r2
 80133aa:	440b      	add	r3, r1
 80133ac:	e000      	b.n	80133b0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 80133ae:	2300      	movs	r3, #0
 80133b0:	bf00      	nop
        };
 80133b2:	4618      	mov	r0, r3
 80133b4:	3710      	adds	r7, #16
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
	...

080133bc <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 80133bc:	b580      	push	{r7, lr}
 80133be:	b086      	sub	sp, #24
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	607b      	str	r3, [r7, #4]
 80133c6:	460b      	mov	r3, r1
 80133c8:	72fb      	strb	r3, [r7, #11]
 80133ca:	4613      	mov	r3, r2
 80133cc:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 80133ce:	f7ed fa99 	bl	8000904 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 80133d2:	7afb      	ldrb	r3, [r7, #11]
 80133d4:	f043 0302 	orr.w	r3, r3, #2
 80133d8:	b2db      	uxtb	r3, r3
 80133da:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 80133dc:	f107 0117 	add.w	r1, r7, #23
 80133e0:	f04f 33ff 	mov.w	r3, #4294967295
 80133e4:	2201      	movs	r2, #1
 80133e6:	480b      	ldr	r0, [pc, #44]	; (8013414 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80133e8:	f7f2 fce1 	bl	8005dae <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 80133ec:	7abb      	ldrb	r3, [r7, #10]
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	f04f 33ff 	mov.w	r3, #4294967295
 80133f4:	6879      	ldr	r1, [r7, #4]
 80133f6:	4807      	ldr	r0, [pc, #28]	; (8013414 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80133f8:	f7f2 fcd9 	bl	8005dae <HAL_SPI_Transmit>
        data_p += nbytes;
 80133fc:	7abb      	ldrb	r3, [r7, #10]
 80133fe:	687a      	ldr	r2, [r7, #4]
 8013400:	4413      	add	r3, r2
 8013402:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8013404:	f7ed fa72 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 8013408:	687b      	ldr	r3, [r7, #4]
}
 801340a:	4618      	mov	r0, r3
 801340c:	3718      	adds	r7, #24
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	20000320 	.word	0x20000320

08013418 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8013418:	b480      	push	{r7}
 801341a:	b083      	sub	sp, #12
 801341c:	af00      	add	r7, sp, #0
 801341e:	4603      	mov	r3, r0
 8013420:	6039      	str	r1, [r7, #0]
 8013422:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8013424:	bf00      	nop
 8013426:	370c      	adds	r7, #12
 8013428:	46bd      	mov	sp, r7
 801342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342e:	4770      	bx	lr

08013430 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8013430:	b580      	push	{r7, lr}
 8013432:	b084      	sub	sp, #16
 8013434:	af00      	add	r7, sp, #0
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	607b      	str	r3, [r7, #4]
 801343a:	460b      	mov	r3, r1
 801343c:	72fb      	strb	r3, [r7, #11]
 801343e:	4613      	mov	r3, r2
 8013440:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8013442:	f7ed fa5f 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8013446:	f107 010b 	add.w	r1, r7, #11
 801344a:	f04f 33ff 	mov.w	r3, #4294967295
 801344e:	2201      	movs	r2, #1
 8013450:	480d      	ldr	r0, [pc, #52]	; (8013488 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8013452:	f7f2 fcac 	bl	8005dae <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8013456:	7abb      	ldrb	r3, [r7, #10]
 8013458:	461a      	mov	r2, r3
 801345a:	2100      	movs	r1, #0
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f000 fa91 	bl	8013984 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8013462:	7abb      	ldrb	r3, [r7, #10]
 8013464:	b29a      	uxth	r2, r3
 8013466:	f04f 33ff 	mov.w	r3, #4294967295
 801346a:	6879      	ldr	r1, [r7, #4]
 801346c:	4806      	ldr	r0, [pc, #24]	; (8013488 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 801346e:	f7f2 fdda 	bl	8006026 <HAL_SPI_Receive>
        data_p += nbytes;
 8013472:	7abb      	ldrb	r3, [r7, #10]
 8013474:	687a      	ldr	r2, [r7, #4]
 8013476:	4413      	add	r3, r2
 8013478:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 801347a:	f7ed fa37 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 801347e:	687b      	ldr	r3, [r7, #4]
}
 8013480:	4618      	mov	r0, r3
 8013482:	3710      	adds	r7, #16
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}
 8013488:	20000320 	.word	0x20000320

0801348c <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 801348c:	b580      	push	{r7, lr}
 801348e:	b084      	sub	sp, #16
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8013494:	2300      	movs	r3, #0
 8013496:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8013498:	f7fe fd46 	bl	8011f28 <_ZN2P95IsSetEv>
 801349c:	4603      	mov	r3, r0
 801349e:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 80134a0:	7bbb      	ldrb	r3, [r7, #14]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d104      	bne.n	80134b0 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f000 f937 	bl	801371a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 80134ac:	4603      	mov	r3, r0
 80134ae:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 80134b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	3710      	adds	r7, #16
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
	...

080134bc <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 80134bc:	b480      	push	{r7}
 80134be:	b083      	sub	sp, #12
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
                return vbusState;
 80134c4:	4b03      	ldr	r3, [pc, #12]	; (80134d4 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 80134c6:	781b      	ldrb	r3, [r3, #0]
        };
 80134c8:	4618      	mov	r0, r3
 80134ca:	370c      	adds	r7, #12
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr
 80134d4:	200006b0 	.word	0x200006b0

080134d8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 80134d8:	b580      	push	{r7, lr}
 80134da:	b084      	sub	sp, #16
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	4608      	mov	r0, r1
 80134e2:	4611      	mov	r1, r2
 80134e4:	461a      	mov	r2, r3
 80134e6:	4603      	mov	r3, r0
 80134e8:	70fb      	strb	r3, [r7, #3]
 80134ea:	460b      	mov	r3, r1
 80134ec:	70bb      	strb	r3, [r7, #2]
 80134ee:	4613      	mov	r3, r2
 80134f0:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 80134f2:	78fb      	ldrb	r3, [r7, #3]
 80134f4:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 80134f6:	7b3b      	ldrb	r3, [r7, #12]
 80134f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80134fc:	b2db      	uxtb	r3, r3
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d102      	bne.n	8013508 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8013502:	787b      	ldrb	r3, [r7, #1]
 8013504:	2b07      	cmp	r3, #7
 8013506:	d901      	bls.n	801350c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8013508:	2300      	movs	r3, #0
 801350a:	e079      	b.n	8013600 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 801350c:	78bb      	ldrb	r3, [r7, #2]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d005      	beq.n	801351e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	79db      	ldrb	r3, [r3, #7]
 8013516:	2b07      	cmp	r3, #7
 8013518:	d101      	bne.n	801351e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 801351a:	2300      	movs	r3, #0
 801351c:	e070      	b.n	8013600 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 801351e:	2100      	movs	r1, #0
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f000 f8d7 	bl	80136d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8013526:	4603      	mov	r3, r0
 8013528:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 801352a:	7bfb      	ldrb	r3, [r7, #15]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d101      	bne.n	8013534 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8013530:	2300      	movs	r3, #0
 8013532:	e065      	b.n	8013600 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8013534:	7b3b      	ldrb	r3, [r7, #12]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d124      	bne.n	8013584 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 801353a:	78bb      	ldrb	r3, [r7, #2]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d00f      	beq.n	8013560 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8013540:	7bfa      	ldrb	r2, [r7, #15]
 8013542:	6879      	ldr	r1, [r7, #4]
 8013544:	4613      	mov	r3, r2
 8013546:	00db      	lsls	r3, r3, #3
 8013548:	1a9b      	subs	r3, r3, r2
 801354a:	440b      	add	r3, r1
 801354c:	330c      	adds	r3, #12
 801354e:	2241      	movs	r2, #65	; 0x41
 8013550:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	79db      	ldrb	r3, [r3, #7]
 8013556:	3301      	adds	r3, #1
 8013558:	b2da      	uxtb	r2, r3
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	71da      	strb	r2, [r3, #7]
 801355e:	e008      	b.n	8013572 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8013560:	7bfa      	ldrb	r2, [r7, #15]
 8013562:	6879      	ldr	r1, [r7, #4]
 8013564:	4613      	mov	r3, r2
 8013566:	00db      	lsls	r3, r3, #3
 8013568:	1a9b      	subs	r3, r3, r2
 801356a:	440b      	add	r3, r1
 801356c:	330c      	adds	r3, #12
 801356e:	2201      	movs	r2, #1
 8013570:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 8013572:	7bfa      	ldrb	r2, [r7, #15]
 8013574:	6879      	ldr	r1, [r7, #4]
 8013576:	4613      	mov	r3, r2
 8013578:	00db      	lsls	r3, r3, #3
 801357a:	1a9b      	subs	r3, r3, r2
 801357c:	440b      	add	r3, r1
 801357e:	330c      	adds	r3, #12
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	e03d      	b.n	8013600 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 8013584:	2300      	movs	r3, #0
 8013586:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8013588:	7b3b      	ldrb	r3, [r7, #12]
 801358a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801358e:	b2da      	uxtb	r2, r3
 8013590:	7a3b      	ldrb	r3, [r7, #8]
 8013592:	f362 03c5 	bfi	r3, r2, #3, #3
 8013596:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8013598:	78bb      	ldrb	r3, [r7, #2]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d013      	beq.n	80135c6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 801359e:	7a3b      	ldrb	r3, [r7, #8]
 80135a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135a4:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	79db      	ldrb	r3, [r3, #7]
 80135aa:	3301      	adds	r3, #1
 80135ac:	b2da      	uxtb	r2, r3
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	71da      	strb	r2, [r3, #7]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	79db      	ldrb	r3, [r3, #7]
 80135b6:	f003 0307 	and.w	r3, r3, #7
 80135ba:	b2da      	uxtb	r2, r3
 80135bc:	7a3b      	ldrb	r3, [r7, #8]
 80135be:	f362 0302 	bfi	r3, r2, #0, #3
 80135c2:	723b      	strb	r3, [r7, #8]
 80135c4:	e00b      	b.n	80135de <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 80135c6:	7a3b      	ldrb	r3, [r7, #8]
 80135c8:	f36f 1386 	bfc	r3, #6, #1
 80135cc:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 80135ce:	787b      	ldrb	r3, [r7, #1]
 80135d0:	f003 0307 	and.w	r3, r3, #7
 80135d4:	b2da      	uxtb	r2, r3
 80135d6:	7a3b      	ldrb	r3, [r7, #8]
 80135d8:	f362 0302 	bfi	r3, r2, #0, #3
 80135dc:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 80135de:	7bfa      	ldrb	r2, [r7, #15]
 80135e0:	6879      	ldr	r1, [r7, #4]
 80135e2:	4613      	mov	r3, r2
 80135e4:	00db      	lsls	r3, r3, #3
 80135e6:	1a9b      	subs	r3, r3, r2
 80135e8:	440b      	add	r3, r1
 80135ea:	330c      	adds	r3, #12
 80135ec:	7a3a      	ldrb	r2, [r7, #8]
 80135ee:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 80135f0:	7bfa      	ldrb	r2, [r7, #15]
 80135f2:	6879      	ldr	r1, [r7, #4]
 80135f4:	4613      	mov	r3, r2
 80135f6:	00db      	lsls	r3, r3, #3
 80135f8:	1a9b      	subs	r3, r3, r2
 80135fa:	440b      	add	r3, r1
 80135fc:	330c      	adds	r3, #12
 80135fe:	781b      	ldrb	r3, [r3, #0]
        };
 8013600:	4618      	mov	r0, r3
 8013602:	3710      	adds	r7, #16
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}

08013608 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8013608:	b580      	push	{r7, lr}
 801360a:	b084      	sub	sp, #16
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
 8013610:	460b      	mov	r3, r1
 8013612:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8013614:	78fb      	ldrb	r3, [r7, #3]
 8013616:	2b41      	cmp	r3, #65	; 0x41
 8013618:	d103      	bne.n	8013622 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f000 f841 	bl	80136a2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8013620:	e00b      	b.n	801363a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8013622:	78fb      	ldrb	r3, [r7, #3]
 8013624:	4619      	mov	r1, r3
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f000 f854 	bl	80136d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801362c:	4603      	mov	r3, r0
 801362e:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8013630:	7bfb      	ldrb	r3, [r7, #15]
 8013632:	4619      	mov	r1, r3
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f000 f893 	bl	8013760 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 801363a:	3710      	adds	r7, #16
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8013640:	b480      	push	{r7}
 8013642:	b083      	sub	sp, #12
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	460b      	mov	r3, r1
 801364a:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 801364c:	78fa      	ldrb	r2, [r7, #3]
 801364e:	6879      	ldr	r1, [r7, #4]
 8013650:	4613      	mov	r3, r2
 8013652:	00db      	lsls	r3, r3, #3
 8013654:	1a9b      	subs	r3, r3, r2
 8013656:	440b      	add	r3, r1
 8013658:	330c      	adds	r3, #12
 801365a:	2200      	movs	r2, #0
 801365c:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 801365e:	78fa      	ldrb	r2, [r7, #3]
 8013660:	6879      	ldr	r1, [r7, #4]
 8013662:	4613      	mov	r3, r2
 8013664:	00db      	lsls	r3, r3, #3
 8013666:	1a9b      	subs	r3, r3, r2
 8013668:	440b      	add	r3, r1
 801366a:	330d      	adds	r3, #13
 801366c:	2201      	movs	r2, #1
 801366e:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8013670:	78fa      	ldrb	r2, [r7, #3]
 8013672:	6879      	ldr	r1, [r7, #4]
 8013674:	4613      	mov	r3, r2
 8013676:	00db      	lsls	r3, r3, #3
 8013678:	1a9b      	subs	r3, r3, r2
 801367a:	440b      	add	r3, r1
 801367c:	330e      	adds	r3, #14
 801367e:	2200      	movs	r2, #0
 8013680:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 8013682:	78fa      	ldrb	r2, [r7, #3]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	1d19      	adds	r1, r3, #4
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	4613      	mov	r3, r2
 801368c:	00db      	lsls	r3, r3, #3
 801368e:	1a9b      	subs	r3, r3, r2
 8013690:	4403      	add	r3, r0
 8013692:	3308      	adds	r3, #8
 8013694:	6019      	str	r1, [r3, #0]
        };
 8013696:	bf00      	nop
 8013698:	370c      	adds	r7, #12
 801369a:	46bd      	mov	sp, r7
 801369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a0:	4770      	bx	lr

080136a2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 80136a2:	b580      	push	{r7, lr}
 80136a4:	b084      	sub	sp, #16
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80136aa:	2301      	movs	r3, #1
 80136ac:	73fb      	strb	r3, [r7, #15]
 80136ae:	7bfb      	ldrb	r3, [r7, #15]
 80136b0:	2b0f      	cmp	r3, #15
 80136b2:	d808      	bhi.n	80136c6 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 80136b4:	7bfb      	ldrb	r3, [r7, #15]
 80136b6:	4619      	mov	r1, r3
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f7ff ffc1 	bl	8013640 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80136be:	7bfb      	ldrb	r3, [r7, #15]
 80136c0:	3301      	adds	r3, #1
 80136c2:	73fb      	strb	r3, [r7, #15]
 80136c4:	e7f3      	b.n	80136ae <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2200      	movs	r2, #0
 80136ca:	71da      	strb	r2, [r3, #7]
        };
 80136cc:	bf00      	nop
 80136ce:	3710      	adds	r7, #16
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 80136d4:	b480      	push	{r7}
 80136d6:	b085      	sub	sp, #20
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	460b      	mov	r3, r1
 80136de:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80136e0:	2301      	movs	r3, #1
 80136e2:	73fb      	strb	r3, [r7, #15]
 80136e4:	7bfb      	ldrb	r3, [r7, #15]
 80136e6:	2b0f      	cmp	r3, #15
 80136e8:	d810      	bhi.n	801370c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 80136ea:	7bfa      	ldrb	r2, [r7, #15]
 80136ec:	6879      	ldr	r1, [r7, #4]
 80136ee:	4613      	mov	r3, r2
 80136f0:	00db      	lsls	r3, r3, #3
 80136f2:	1a9b      	subs	r3, r3, r2
 80136f4:	440b      	add	r3, r1
 80136f6:	330c      	adds	r3, #12
 80136f8:	781b      	ldrb	r3, [r3, #0]
 80136fa:	78fa      	ldrb	r2, [r7, #3]
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d101      	bne.n	8013704 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8013700:	7bfb      	ldrb	r3, [r7, #15]
 8013702:	e004      	b.n	801370e <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8013704:	7bfb      	ldrb	r3, [r7, #15]
 8013706:	3301      	adds	r3, #1
 8013708:	73fb      	strb	r3, [r7, #15]
 801370a:	e7eb      	b.n	80136e4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 801370c:	2300      	movs	r3, #0
        };
 801370e:	4618      	mov	r0, r3
 8013710:	3714      	adds	r7, #20
 8013712:	46bd      	mov	sp, r7
 8013714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013718:	4770      	bx	lr

0801371a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 801371a:	b580      	push	{r7, lr}
 801371c:	b084      	sub	sp, #16
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8013722:	2300      	movs	r3, #0
 8013724:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8013726:	21c8      	movs	r1, #200	; 0xc8
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f7ee fc49 	bl	8001fc0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801372e:	4603      	mov	r3, r0
 8013730:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8013732:	7bbb      	ldrb	r3, [r7, #14]
 8013734:	f003 0320 	and.w	r3, r3, #32
 8013738:	2b00      	cmp	r3, #0
 801373a:	d006      	beq.n	801374a <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f7ee fc61 	bl	8002004 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8013742:	7bfb      	ldrb	r3, [r7, #15]
 8013744:	f043 0320 	orr.w	r3, r3, #32
 8013748:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801374a:	7bfb      	ldrb	r3, [r7, #15]
 801374c:	461a      	mov	r2, r3
 801374e:	21c8      	movs	r1, #200	; 0xc8
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f7ee fbe3 	bl	8001f1c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 8013756:	7bfb      	ldrb	r3, [r7, #15]
}
 8013758:	4618      	mov	r0, r3
 801375a:	3710      	adds	r7, #16
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}

08013760 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8013760:	b580      	push	{r7, lr}
 8013762:	b084      	sub	sp, #16
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	460b      	mov	r3, r1
 801376a:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 801376c:	78fb      	ldrb	r3, [r7, #3]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d03a      	beq.n	80137e8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 8013772:	78fa      	ldrb	r2, [r7, #3]
 8013774:	6879      	ldr	r1, [r7, #4]
 8013776:	4613      	mov	r3, r2
 8013778:	00db      	lsls	r3, r3, #3
 801377a:	1a9b      	subs	r3, r3, r2
 801377c:	440b      	add	r3, r1
 801377e:	330c      	adds	r3, #12
 8013780:	781b      	ldrb	r3, [r3, #0]
 8013782:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 8013784:	7b3b      	ldrb	r3, [r7, #12]
 8013786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801378a:	b2db      	uxtb	r3, r3
 801378c:	2b00      	cmp	r3, #0
 801378e:	d025      	beq.n	80137dc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8013790:	2301      	movs	r3, #1
 8013792:	73fb      	strb	r3, [r7, #15]
 8013794:	7bfb      	ldrb	r3, [r7, #15]
 8013796:	461a      	mov	r2, r3
 8013798:	7b39      	ldrb	r1, [r7, #12]
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f000 f828 	bl	80137f0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 80137a0:	4603      	mov	r3, r0
 80137a2:	73fb      	strb	r3, [r7, #15]
 80137a4:	7bfb      	ldrb	r3, [r7, #15]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	bf14      	ite	ne
 80137aa:	2301      	movne	r3, #1
 80137ac:	2300      	moveq	r3, #0
 80137ae:	b2db      	uxtb	r3, r3
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d005      	beq.n	80137c0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 80137b4:	7bfb      	ldrb	r3, [r7, #15]
 80137b6:	4619      	mov	r1, r3
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7ff ffd1 	bl	8013760 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80137be:	e7e9      	b.n	8013794 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	79db      	ldrb	r3, [r3, #7]
 80137c4:	7b3a      	ldrb	r2, [r7, #12]
 80137c6:	f3c2 0202 	ubfx	r2, r2, #0, #3
 80137ca:	b2d2      	uxtb	r2, r2
 80137cc:	4293      	cmp	r3, r2
 80137ce:	d105      	bne.n	80137dc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	79db      	ldrb	r3, [r3, #7]
 80137d4:	3b01      	subs	r3, #1
 80137d6:	b2da      	uxtb	r2, r3
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 80137dc:	78fb      	ldrb	r3, [r7, #3]
 80137de:	4619      	mov	r1, r3
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f7ff ff2d 	bl	8013640 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 80137e6:	e000      	b.n	80137ea <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 80137e8:	bf00      	nop
        }
 80137ea:	3710      	adds	r7, #16
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}

080137f0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 80137f0:	b480      	push	{r7}
 80137f2:	b085      	sub	sp, #20
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	7039      	strb	r1, [r7, #0]
 80137fa:	4613      	mov	r3, r2
 80137fc:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80137fe:	78fb      	ldrb	r3, [r7, #3]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d004      	beq.n	801380e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8013804:	78fb      	ldrb	r3, [r7, #3]
 8013806:	2b0f      	cmp	r3, #15
 8013808:	d801      	bhi.n	801380e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 801380a:	78fb      	ldrb	r3, [r7, #3]
 801380c:	e000      	b.n	8013810 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 801380e:	2301      	movs	r3, #1
 8013810:	73fb      	strb	r3, [r7, #15]
 8013812:	7bfb      	ldrb	r3, [r7, #15]
 8013814:	2b0f      	cmp	r3, #15
 8013816:	d816      	bhi.n	8013846 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8013818:	7bfa      	ldrb	r2, [r7, #15]
 801381a:	6879      	ldr	r1, [r7, #4]
 801381c:	4613      	mov	r3, r2
 801381e:	00db      	lsls	r3, r3, #3
 8013820:	1a9b      	subs	r3, r3, r2
 8013822:	440b      	add	r3, r1
 8013824:	3308      	adds	r3, #8
 8013826:	791b      	ldrb	r3, [r3, #4]
 8013828:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801382c:	b2da      	uxtb	r2, r3
 801382e:	783b      	ldrb	r3, [r7, #0]
 8013830:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013834:	b2db      	uxtb	r3, r3
 8013836:	429a      	cmp	r2, r3
 8013838:	d101      	bne.n	801383e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 801383a:	7bfb      	ldrb	r3, [r7, #15]
 801383c:	e004      	b.n	8013848 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801383e:	7bfb      	ldrb	r3, [r7, #15]
 8013840:	3301      	adds	r3, #1
 8013842:	73fb      	strb	r3, [r7, #15]
 8013844:	e7e5      	b.n	8013812 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8013846:	2300      	movs	r3, #0
        };
 8013848:	4618      	mov	r0, r3
 801384a:	3714      	adds	r7, #20
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr

08013854 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8013854:	b480      	push	{r7}
 8013856:	b085      	sub	sp, #20
 8013858:	af00      	add	r7, sp, #0
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	60b9      	str	r1, [r7, #8]
 801385e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d101      	bne.n	801386c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 8013868:	2300      	movs	r3, #0
 801386a:	e031      	b.n	80138d0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	791b      	ldrb	r3, [r3, #4]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d022      	beq.n	80138ba <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	881b      	ldrh	r3, [r3, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d01e      	beq.n	80138ba <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	681a      	ldr	r2, [r3, #0]
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	68f9      	ldr	r1, [r7, #12]
 8013886:	7949      	ldrb	r1, [r1, #5]
 8013888:	4608      	mov	r0, r1
 801388a:	68f9      	ldr	r1, [r7, #12]
 801388c:	7909      	ldrb	r1, [r1, #4]
 801388e:	1a41      	subs	r1, r0, r1
 8013890:	440b      	add	r3, r1
 8013892:	7812      	ldrb	r2, [r2, #0]
 8013894:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	791b      	ldrb	r3, [r3, #4]
 801389a:	3b01      	subs	r3, #1
 801389c:	b2da      	uxtb	r2, r3
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	711a      	strb	r2, [r3, #4]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	881b      	ldrh	r3, [r3, #0]
 80138a6:	3b01      	subs	r3, #1
 80138a8:	b29a      	uxth	r2, r3
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	801a      	strh	r2, [r3, #0]
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	1c5a      	adds	r2, r3, #1
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	601a      	str	r2, [r3, #0]
 80138b8:	e7d8      	b.n	801386c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	791b      	ldrb	r3, [r3, #4]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d001      	beq.n	80138c6 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 80138c2:	2300      	movs	r3, #0
 80138c4:	e004      	b.n	80138d0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	795a      	ldrb	r2, [r3, #5]
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	711a      	strb	r2, [r3, #4]
        return true;
 80138ce:	2301      	movs	r3, #1
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3714      	adds	r7, #20
 80138d4:	46bd      	mov	sp, r7
 80138d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138da:	4770      	bx	lr

080138dc <__cxa_pure_virtual>:
 80138dc:	b508      	push	{r3, lr}
 80138de:	f000 f80d 	bl	80138fc <_ZSt9terminatev>

080138e2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80138e2:	b508      	push	{r3, lr}
 80138e4:	4780      	blx	r0
 80138e6:	f000 f80e 	bl	8013906 <abort>
	...

080138ec <_ZSt13get_terminatev>:
 80138ec:	4b02      	ldr	r3, [pc, #8]	; (80138f8 <_ZSt13get_terminatev+0xc>)
 80138ee:	6818      	ldr	r0, [r3, #0]
 80138f0:	f3bf 8f5b 	dmb	ish
 80138f4:	4770      	bx	lr
 80138f6:	bf00      	nop
 80138f8:	2000011c 	.word	0x2000011c

080138fc <_ZSt9terminatev>:
 80138fc:	b508      	push	{r3, lr}
 80138fe:	f7ff fff5 	bl	80138ec <_ZSt13get_terminatev>
 8013902:	f7ff ffee 	bl	80138e2 <_ZN10__cxxabiv111__terminateEPFvvE>

08013906 <abort>:
 8013906:	b508      	push	{r3, lr}
 8013908:	2006      	movs	r0, #6
 801390a:	f000 f86b 	bl	80139e4 <raise>
 801390e:	2001      	movs	r0, #1
 8013910:	f7ee fdf0 	bl	80024f4 <_exit>

08013914 <__errno>:
 8013914:	4b01      	ldr	r3, [pc, #4]	; (801391c <__errno+0x8>)
 8013916:	6818      	ldr	r0, [r3, #0]
 8013918:	4770      	bx	lr
 801391a:	bf00      	nop
 801391c:	20000120 	.word	0x20000120

08013920 <__libc_init_array>:
 8013920:	b570      	push	{r4, r5, r6, lr}
 8013922:	4d0d      	ldr	r5, [pc, #52]	; (8013958 <__libc_init_array+0x38>)
 8013924:	4c0d      	ldr	r4, [pc, #52]	; (801395c <__libc_init_array+0x3c>)
 8013926:	1b64      	subs	r4, r4, r5
 8013928:	10a4      	asrs	r4, r4, #2
 801392a:	2600      	movs	r6, #0
 801392c:	42a6      	cmp	r6, r4
 801392e:	d109      	bne.n	8013944 <__libc_init_array+0x24>
 8013930:	4d0b      	ldr	r5, [pc, #44]	; (8013960 <__libc_init_array+0x40>)
 8013932:	4c0c      	ldr	r4, [pc, #48]	; (8013964 <__libc_init_array+0x44>)
 8013934:	f000 f884 	bl	8013a40 <_init>
 8013938:	1b64      	subs	r4, r4, r5
 801393a:	10a4      	asrs	r4, r4, #2
 801393c:	2600      	movs	r6, #0
 801393e:	42a6      	cmp	r6, r4
 8013940:	d105      	bne.n	801394e <__libc_init_array+0x2e>
 8013942:	bd70      	pop	{r4, r5, r6, pc}
 8013944:	f855 3b04 	ldr.w	r3, [r5], #4
 8013948:	4798      	blx	r3
 801394a:	3601      	adds	r6, #1
 801394c:	e7ee      	b.n	801392c <__libc_init_array+0xc>
 801394e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013952:	4798      	blx	r3
 8013954:	3601      	adds	r6, #1
 8013956:	e7f2      	b.n	801393e <__libc_init_array+0x1e>
 8013958:	08014d48 	.word	0x08014d48
 801395c:	08014d48 	.word	0x08014d48
 8013960:	08014d48 	.word	0x08014d48
 8013964:	08014d50 	.word	0x08014d50

08013968 <memcpy>:
 8013968:	440a      	add	r2, r1
 801396a:	4291      	cmp	r1, r2
 801396c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013970:	d100      	bne.n	8013974 <memcpy+0xc>
 8013972:	4770      	bx	lr
 8013974:	b510      	push	{r4, lr}
 8013976:	f811 4b01 	ldrb.w	r4, [r1], #1
 801397a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801397e:	4291      	cmp	r1, r2
 8013980:	d1f9      	bne.n	8013976 <memcpy+0xe>
 8013982:	bd10      	pop	{r4, pc}

08013984 <memset>:
 8013984:	4402      	add	r2, r0
 8013986:	4603      	mov	r3, r0
 8013988:	4293      	cmp	r3, r2
 801398a:	d100      	bne.n	801398e <memset+0xa>
 801398c:	4770      	bx	lr
 801398e:	f803 1b01 	strb.w	r1, [r3], #1
 8013992:	e7f9      	b.n	8013988 <memset+0x4>

08013994 <_raise_r>:
 8013994:	291f      	cmp	r1, #31
 8013996:	b538      	push	{r3, r4, r5, lr}
 8013998:	4604      	mov	r4, r0
 801399a:	460d      	mov	r5, r1
 801399c:	d904      	bls.n	80139a8 <_raise_r+0x14>
 801399e:	2316      	movs	r3, #22
 80139a0:	6003      	str	r3, [r0, #0]
 80139a2:	f04f 30ff 	mov.w	r0, #4294967295
 80139a6:	bd38      	pop	{r3, r4, r5, pc}
 80139a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80139aa:	b112      	cbz	r2, 80139b2 <_raise_r+0x1e>
 80139ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80139b0:	b94b      	cbnz	r3, 80139c6 <_raise_r+0x32>
 80139b2:	4620      	mov	r0, r4
 80139b4:	f000 f830 	bl	8013a18 <_getpid_r>
 80139b8:	462a      	mov	r2, r5
 80139ba:	4601      	mov	r1, r0
 80139bc:	4620      	mov	r0, r4
 80139be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139c2:	f000 b817 	b.w	80139f4 <_kill_r>
 80139c6:	2b01      	cmp	r3, #1
 80139c8:	d00a      	beq.n	80139e0 <_raise_r+0x4c>
 80139ca:	1c59      	adds	r1, r3, #1
 80139cc:	d103      	bne.n	80139d6 <_raise_r+0x42>
 80139ce:	2316      	movs	r3, #22
 80139d0:	6003      	str	r3, [r0, #0]
 80139d2:	2001      	movs	r0, #1
 80139d4:	e7e7      	b.n	80139a6 <_raise_r+0x12>
 80139d6:	2400      	movs	r4, #0
 80139d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80139dc:	4628      	mov	r0, r5
 80139de:	4798      	blx	r3
 80139e0:	2000      	movs	r0, #0
 80139e2:	e7e0      	b.n	80139a6 <_raise_r+0x12>

080139e4 <raise>:
 80139e4:	4b02      	ldr	r3, [pc, #8]	; (80139f0 <raise+0xc>)
 80139e6:	4601      	mov	r1, r0
 80139e8:	6818      	ldr	r0, [r3, #0]
 80139ea:	f7ff bfd3 	b.w	8013994 <_raise_r>
 80139ee:	bf00      	nop
 80139f0:	20000120 	.word	0x20000120

080139f4 <_kill_r>:
 80139f4:	b538      	push	{r3, r4, r5, lr}
 80139f6:	4d07      	ldr	r5, [pc, #28]	; (8013a14 <_kill_r+0x20>)
 80139f8:	2300      	movs	r3, #0
 80139fa:	4604      	mov	r4, r0
 80139fc:	4608      	mov	r0, r1
 80139fe:	4611      	mov	r1, r2
 8013a00:	602b      	str	r3, [r5, #0]
 8013a02:	f7ee fd67 	bl	80024d4 <_kill>
 8013a06:	1c43      	adds	r3, r0, #1
 8013a08:	d102      	bne.n	8013a10 <_kill_r+0x1c>
 8013a0a:	682b      	ldr	r3, [r5, #0]
 8013a0c:	b103      	cbz	r3, 8013a10 <_kill_r+0x1c>
 8013a0e:	6023      	str	r3, [r4, #0]
 8013a10:	bd38      	pop	{r3, r4, r5, pc}
 8013a12:	bf00      	nop
 8013a14:	20005d64 	.word	0x20005d64

08013a18 <_getpid_r>:
 8013a18:	f7ee bd54 	b.w	80024c4 <_getpid>

08013a1c <strncmp>:
 8013a1c:	b510      	push	{r4, lr}
 8013a1e:	b16a      	cbz	r2, 8013a3c <strncmp+0x20>
 8013a20:	3901      	subs	r1, #1
 8013a22:	1884      	adds	r4, r0, r2
 8013a24:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013a28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	d103      	bne.n	8013a38 <strncmp+0x1c>
 8013a30:	42a0      	cmp	r0, r4
 8013a32:	d001      	beq.n	8013a38 <strncmp+0x1c>
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d1f5      	bne.n	8013a24 <strncmp+0x8>
 8013a38:	1a98      	subs	r0, r3, r2
 8013a3a:	bd10      	pop	{r4, pc}
 8013a3c:	4610      	mov	r0, r2
 8013a3e:	e7fc      	b.n	8013a3a <strncmp+0x1e>

08013a40 <_init>:
 8013a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a42:	bf00      	nop
 8013a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a46:	bc08      	pop	{r3}
 8013a48:	469e      	mov	lr, r3
 8013a4a:	4770      	bx	lr

08013a4c <_fini>:
 8013a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a4e:	bf00      	nop
 8013a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a52:	bc08      	pop	{r3}
 8013a54:	469e      	mov	lr, r3
 8013a56:	4770      	bx	lr
